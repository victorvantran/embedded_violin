
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  0800dddc  0800dddc  0001dddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e140  0800e140  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e140  0800e140  0001e140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e148  0800e148  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e148  0800e148  0001e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e14c  0800e14c  0001e14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800e150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fbd8  2000011c  0800e26c  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fcf4  0800e26c  0002fcf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030484  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d7  00000000  00000000  000505d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002388  00000000  00000000  00055ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002180  00000000  00000000  00058030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0d9  00000000  00000000  0005a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002730d  00000000  00000000  00088289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118e55  00000000  00000000  000af596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c83eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f88  00000000  00000000  001c8440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddc4 	.word	0x0800ddc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800ddc4 	.word	0x0800ddc4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <SELECT+0x18>)
 8000572:	f004 fdc9 	bl	8005108 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f002 fe8a 	bl	8003290 <HAL_Delay>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	48000400 	.word	0x48000400

08000584 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <DESELECT+0x18>)
 800058e:	f004 fdbb 	bl	8005108 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f002 fe7c 	bl	8003290 <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	48000400 	.word	0x48000400

080005a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005aa:	bf00      	nop
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SPI_TxByte+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d1f8      	bne.n	80005ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <SPI_TxByte+0x30>)
 80005c2:	f006 fac0 	bl	8006b46 <HAL_SPI_Transmit>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000ca78 	.word	0x2000ca78

080005d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005e0:	bf00      	nop
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SPI_TxBuffer+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d1f8      	bne.n	80005e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005f0:	887a      	ldrh	r2, [r7, #2]
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_TxBuffer+0x30>)
 80005f8:	f006 faa5 	bl	8006b46 <HAL_SPI_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000ca78 	.word	0x2000ca78

08000608 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000612:	bf00      	nop
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <SPI_RxByte+0x34>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b02      	cmp	r3, #2
 8000620:	d1f8      	bne.n	8000614 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000622:	1dba      	adds	r2, r7, #6
 8000624:	1df9      	adds	r1, r7, #7
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <SPI_RxByte+0x34>)
 800062e:	f006 fbf8 	bl	8006e22 <HAL_SPI_TransmitReceive>

	return data;
 8000632:	79bb      	ldrb	r3, [r7, #6]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000ca78 	.word	0x2000ca78

08000640 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000648:	f7ff ffde 	bl	8000608 <SPI_RxByte>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <SD_ReadyWait+0x30>)
 8000664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000668:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800066a:	f7ff ffcd 	bl	8000608 <SPI_RxByte>
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2bff      	cmp	r3, #255	; 0xff
 8000676:	d003      	beq.n	8000680 <SD_ReadyWait+0x24>
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <SD_ReadyWait+0x30>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f4      	bne.n	800066a <SD_ReadyWait+0xe>

	return res;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20003578 	.word	0x20003578

08000690 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000696:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800069a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800069c:	f7ff ff72 	bl	8000584 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	e005      	b.n	80006b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	f7ff ff7a 	bl	80005a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	ddf6      	ble.n	80006a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006b8:	f7ff ff56 	bl	8000568 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006d0:	2395      	movs	r3, #149	; 0x95
 80006d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006d4:	463b      	mov	r3, r7
 80006d6:	2106      	movs	r1, #6
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff7b 	bl	80005d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006de:	e002      	b.n	80006e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006e6:	f7ff ff8f 	bl	8000608 <SPI_RxByte>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d002      	beq.n	80006f6 <SD_PowerOn+0x66>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80006f6:	f7ff ff45 	bl	8000584 <DESELECT>
	SPI_TxByte(0XFF);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff50 	bl	80005a0 <SPI_TxByte>

	PowerFlag = 1;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <SD_PowerOn+0x80>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000139 	.word	0x20000139

08000714 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <SD_PowerOff+0x14>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000139 	.word	0x20000139

0800072c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <SD_CheckPower+0x14>)
 8000732:	781b      	ldrb	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000139 	.word	0x20000139

08000744 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SD_RxDataBlock+0x58>)
 8000750:	22c8      	movs	r2, #200	; 0xc8
 8000752:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000754:	f7ff ff58 	bl	8000608 <SPI_RxByte>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2bff      	cmp	r3, #255	; 0xff
 8000760:	d103      	bne.n	800076a <SD_RxDataBlock+0x26>
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <SD_RxDataBlock+0x58>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2bfe      	cmp	r3, #254	; 0xfe
 800076e:	d001      	beq.n	8000774 <SD_RxDataBlock+0x30>
 8000770:	2300      	movs	r3, #0
 8000772:	e00f      	b.n	8000794 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff60 	bl	8000640 <SPI_RxBytePtr>
	} while(len--);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	603a      	str	r2, [r7, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f4      	bne.n	8000774 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800078a:	f7ff ff3d 	bl	8000608 <SPI_RxByte>
	SPI_RxByte();
 800078e:	f7ff ff3b 	bl	8000608 <SPI_RxByte>

	return TRUE;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000357a 	.word	0x2000357a

080007a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007b0:	f7ff ff54 	bl	800065c <SD_ReadyWait>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2bff      	cmp	r3, #255	; 0xff
 80007b8:	d001      	beq.n	80007be <SD_TxDataBlock+0x1e>
 80007ba:	2300      	movs	r3, #0
 80007bc:	e02f      	b.n	800081e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff feed 	bl	80005a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2bfd      	cmp	r3, #253	; 0xfd
 80007ca:	d020      	beq.n	800080e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff feff 	bl	80005d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007d6:	f7ff ff17 	bl	8000608 <SPI_RxByte>
		SPI_RxByte();
 80007da:	f7ff ff15 	bl	8000608 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007de:	e00b      	b.n	80007f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007e0:	f7ff ff12 	bl	8000608 <SPI_RxByte>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f003 031f 	and.w	r3, r3, #31
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d006      	beq.n	8000800 <SD_TxDataBlock+0x60>
			i++;
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2b40      	cmp	r3, #64	; 0x40
 80007fc:	d9f0      	bls.n	80007e0 <SD_TxDataBlock+0x40>
 80007fe:	e000      	b.n	8000802 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000800:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000802:	bf00      	nop
 8000804:	f7ff ff00 	bl	8000608 <SPI_RxByte>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0fa      	beq.n	8000804 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	2b05      	cmp	r3, #5
 8000816:	d101      	bne.n	800081c <SD_TxDataBlock+0x7c>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <SD_TxDataBlock+0x7e>

	return FALSE;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000832:	f7ff ff13 	bl	800065c <SD_ReadyWait>
 8000836:	4603      	mov	r3, r0
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	d001      	beq.n	8000840 <SD_SendCmd+0x1a>
 800083c:	23ff      	movs	r3, #255	; 0xff
 800083e:	e042      	b.n	80008c6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff feac 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fea6 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fea0 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe9a 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe95 	bl	80005a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d102      	bne.n	8000882 <SD_SendCmd+0x5c>
 800087c:	2395      	movs	r3, #149	; 0x95
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e007      	b.n	8000892 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b48      	cmp	r3, #72	; 0x48
 8000886:	d102      	bne.n	800088e <SD_SendCmd+0x68>
 8000888:	2387      	movs	r3, #135	; 0x87
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e001      	b.n	8000892 <SD_SendCmd+0x6c>
	else crc = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe83 	bl	80005a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b4c      	cmp	r3, #76	; 0x4c
 800089e:	d101      	bne.n	80008a4 <SD_SendCmd+0x7e>
 80008a0:	f7ff feb2 	bl	8000608 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008a4:	230a      	movs	r3, #10
 80008a6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008a8:	f7ff feae 	bl	8000608 <SPI_RxByte>
 80008ac:	4603      	mov	r3, r0
 80008ae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	da05      	bge.n	80008c4 <SD_SendCmd+0x9e>
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	73bb      	strb	r3, [r7, #14]
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f1      	bne.n	80008a8 <SD_SendCmd+0x82>

	return res;
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SD_disk_initialize+0x14>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e0d1      	b.n	8000a88 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008e4:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <SD_disk_initialize+0x1c0>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <SD_disk_initialize+0x2a>
 80008f2:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <SD_disk_initialize+0x1c0>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	e0c6      	b.n	8000a88 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008fa:	f7ff fec9 	bl	8000690 <SD_PowerOn>

	/* slave select */
	SELECT();
 80008fe:	f7ff fe33 	bl	8000568 <SELECT>

	/* check disk type */
	type = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000906:	2100      	movs	r1, #0
 8000908:	2040      	movs	r0, #64	; 0x40
 800090a:	f7ff ff8c 	bl	8000826 <SD_SendCmd>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	f040 80a1 	bne.w	8000a58 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800091e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000922:	2048      	movs	r0, #72	; 0x48
 8000924:	f7ff ff7f 	bl	8000826 <SD_SendCmd>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d155      	bne.n	80009da <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e00c      	b.n	800094e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000934:	7bfc      	ldrb	r4, [r7, #15]
 8000936:	f7ff fe67 	bl	8000608 <SPI_RxByte>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4423      	add	r3, r4
 8000944:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	3301      	adds	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d9ef      	bls.n	8000934 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000954:	7abb      	ldrb	r3, [r7, #10]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d17e      	bne.n	8000a58 <SD_disk_initialize+0x188>
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	2baa      	cmp	r3, #170	; 0xaa
 800095e:	d17b      	bne.n	8000a58 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000960:	2100      	movs	r1, #0
 8000962:	2077      	movs	r0, #119	; 0x77
 8000964:	f7ff ff5f 	bl	8000826 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d807      	bhi.n	800097e <SD_disk_initialize+0xae>
 800096e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000972:	2069      	movs	r0, #105	; 0x69
 8000974:	f7ff ff57 	bl	8000826 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d004      	beq.n	8000988 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1ec      	bne.n	8000960 <SD_disk_initialize+0x90>
 8000986:	e000      	b.n	800098a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000988:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <SD_disk_initialize+0x1c4>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d062      	beq.n	8000a58 <SD_disk_initialize+0x188>
 8000992:	2100      	movs	r1, #0
 8000994:	207a      	movs	r0, #122	; 0x7a
 8000996:	f7ff ff46 	bl	8000826 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d15b      	bne.n	8000a58 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e00c      	b.n	80009c0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009a6:	7bfc      	ldrb	r4, [r7, #15]
 80009a8:	f7ff fe2e 	bl	8000608 <SPI_RxByte>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4423      	add	r3, r4
 80009b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d9ef      	bls.n	80009a6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SD_disk_initialize+0x104>
 80009d0:	230c      	movs	r3, #12
 80009d2:	e000      	b.n	80009d6 <SD_disk_initialize+0x106>
 80009d4:	2304      	movs	r3, #4
 80009d6:	73bb      	strb	r3, [r7, #14]
 80009d8:	e03e      	b.n	8000a58 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009da:	2100      	movs	r1, #0
 80009dc:	2077      	movs	r0, #119	; 0x77
 80009de:	f7ff ff22 	bl	8000826 <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d808      	bhi.n	80009fa <SD_disk_initialize+0x12a>
 80009e8:	2100      	movs	r1, #0
 80009ea:	2069      	movs	r0, #105	; 0x69
 80009ec:	f7ff ff1b 	bl	8000826 <SD_SendCmd>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d801      	bhi.n	80009fa <SD_disk_initialize+0x12a>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e000      	b.n	80009fc <SD_disk_initialize+0x12c>
 80009fa:	2301      	movs	r3, #1
 80009fc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d10e      	bne.n	8000a22 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a04:	2100      	movs	r1, #0
 8000a06:	2077      	movs	r0, #119	; 0x77
 8000a08:	f7ff ff0d 	bl	8000826 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d80e      	bhi.n	8000a30 <SD_disk_initialize+0x160>
 8000a12:	2100      	movs	r1, #0
 8000a14:	2069      	movs	r0, #105	; 0x69
 8000a16:	f7ff ff06 	bl	8000826 <SD_SendCmd>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <SD_disk_initialize+0x160>
 8000a20:	e00c      	b.n	8000a3c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a22:	2100      	movs	r1, #0
 8000a24:	2041      	movs	r0, #65	; 0x41
 8000a26:	f7ff fefe 	bl	8000826 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1e2      	bne.n	80009fe <SD_disk_initialize+0x12e>
 8000a38:	e000      	b.n	8000a3c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <SD_disk_initialize+0x184>
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	2050      	movs	r0, #80	; 0x50
 8000a4a:	f7ff feec 	bl	8000826 <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x188>
 8000a54:	2300      	movs	r3, #0
 8000a56:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <SD_disk_initialize+0x1c8>)
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a5e:	f7ff fd91 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000a62:	f7ff fdd1 	bl	8000608 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a7e:	f7ff fe49 	bl	8000714 <SD_PowerOff>
	}

	return Stat;
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	2000357a 	.word	0x2000357a
 8000a98:	20000138 	.word	0x20000138

08000a9c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SD_disk_status+0x14>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e002      	b.n	8000ab6 <SD_disk_status+0x1a>
	return Stat;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SD_disk_status+0x28>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <SD_disk_read+0x1c>
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <SD_disk_read+0x20>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e051      	b.n	8000b8c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <SD_disk_read+0xcc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SD_disk_read+0x32>
 8000af6:	2303      	movs	r3, #3
 8000af8:	e048      	b.n	8000b8c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <SD_disk_read+0xd0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <SD_disk_read+0x44>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b0c:	f7ff fd2c 	bl	8000568 <SELECT>

	if (count == 1)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d111      	bne.n	8000b3a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2051      	movs	r0, #81	; 0x51
 8000b1a:	f7ff fe84 	bl	8000826 <SD_SendCmd>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d129      	bne.n	8000b78 <SD_disk_read+0xb0>
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fe0b 	bl	8000744 <SD_RxDataBlock>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d021      	beq.n	8000b78 <SD_disk_read+0xb0>
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	e01e      	b.n	8000b78 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2052      	movs	r0, #82	; 0x52
 8000b3e:	f7ff fe72 	bl	8000826 <SD_SendCmd>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d117      	bne.n	8000b78 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f7ff fdf9 	bl	8000744 <SD_RxDataBlock>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <SD_disk_read+0xa6>
				buff += 512;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1ed      	bne.n	8000b48 <SD_disk_read+0x80>
 8000b6c:	e000      	b.n	8000b70 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b6e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	204c      	movs	r0, #76	; 0x4c
 8000b74:	f7ff fe57 	bl	8000826 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b78:	f7ff fd04 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000b7c:	f7ff fd44 	bl	8000608 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000138 	.word	0x20000138

08000b9c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <SD_disk_write+0x1c>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <SD_disk_write+0x20>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	e06b      	b.n	8000c94 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <SD_disk_write+0x100>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SD_disk_write+0x32>
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e062      	b.n	8000c94 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <SD_disk_write+0x100>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SD_disk_write+0x44>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e059      	b.n	8000c94 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <SD_disk_write+0x104>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <SD_disk_write+0x56>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	025b      	lsls	r3, r3, #9
 8000bf0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bf2:	f7ff fcb9 	bl	8000568 <SELECT>

	if (count == 1)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d110      	bne.n	8000c1e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	2058      	movs	r0, #88	; 0x58
 8000c00:	f7ff fe11 	bl	8000826 <SD_SendCmd>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d13a      	bne.n	8000c80 <SD_disk_write+0xe4>
 8000c0a:	21fe      	movs	r1, #254	; 0xfe
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdc7 	bl	80007a0 <SD_TxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d033      	beq.n	8000c80 <SD_disk_write+0xe4>
			count = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	e030      	b.n	8000c80 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <SD_disk_write+0x104>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2077      	movs	r0, #119	; 0x77
 8000c2e:	f7ff fdfa 	bl	8000826 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	2057      	movs	r0, #87	; 0x57
 8000c36:	f7ff fdf6 	bl	8000826 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2059      	movs	r0, #89	; 0x59
 8000c3e:	f7ff fdf2 	bl	8000826 <SD_SendCmd>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11b      	bne.n	8000c80 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c48:	21fc      	movs	r1, #252	; 0xfc
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f7ff fda8 	bl	80007a0 <SD_TxDataBlock>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00a      	beq.n	8000c6c <SD_disk_write+0xd0>
				buff += 512;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c5c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1ee      	bne.n	8000c48 <SD_disk_write+0xac>
 8000c6a:	e000      	b.n	8000c6e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c6c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c6e:	21fd      	movs	r1, #253	; 0xfd
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fd95 	bl	80007a0 <SD_TxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c80:	f7ff fc80 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000c84:	f7ff fcc0 	bl	8000608 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000138 	.word	0x20000138

08000ca4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	603a      	str	r2, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SD_disk_ioctl+0x1e>
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e115      	b.n	8000eee <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d124      	bne.n	8000d18 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d012      	beq.n	8000cfc <SD_disk_ioctl+0x58>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	dc1a      	bgt.n	8000d10 <SD_disk_ioctl+0x6c>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <SD_disk_ioctl+0x40>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d006      	beq.n	8000cf0 <SD_disk_ioctl+0x4c>
 8000ce2:	e015      	b.n	8000d10 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000ce4:	f7ff fd16 	bl	8000714 <SD_PowerOff>
			res = RES_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cee:	e0fc      	b.n	8000eea <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000cf0:	f7ff fcce 	bl	8000690 <SD_PowerOn>
			res = RES_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfa:	e0f6      	b.n	8000eea <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	1c5c      	adds	r4, r3, #1
 8000d00:	f7ff fd14 	bl	800072c <SD_CheckPower>
 8000d04:	4603      	mov	r3, r0
 8000d06:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0e:	e0ec      	b.n	8000eea <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d10:	2304      	movs	r3, #4
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d16:	e0e8      	b.n	8000eea <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d18:	4b77      	ldr	r3, [pc, #476]	; (8000ef8 <SD_disk_ioctl+0x254>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SD_disk_ioctl+0x86>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e0e1      	b.n	8000eee <SD_disk_ioctl+0x24a>

		SELECT();
 8000d2a:	f7ff fc1d 	bl	8000568 <SELECT>

		switch (ctrl)
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b0d      	cmp	r3, #13
 8000d32:	f200 80cb 	bhi.w	8000ecc <SD_disk_ioctl+0x228>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <SD_disk_ioctl+0x98>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000e37 	.word	0x08000e37
 8000d40:	08000d75 	.word	0x08000d75
 8000d44:	08000e27 	.word	0x08000e27
 8000d48:	08000ecd 	.word	0x08000ecd
 8000d4c:	08000ecd 	.word	0x08000ecd
 8000d50:	08000ecd 	.word	0x08000ecd
 8000d54:	08000ecd 	.word	0x08000ecd
 8000d58:	08000ecd 	.word	0x08000ecd
 8000d5c:	08000ecd 	.word	0x08000ecd
 8000d60:	08000ecd 	.word	0x08000ecd
 8000d64:	08000ecd 	.word	0x08000ecd
 8000d68:	08000e49 	.word	0x08000e49
 8000d6c:	08000e6d 	.word	0x08000e6d
 8000d70:	08000e91 	.word	0x08000e91
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d74:	2100      	movs	r1, #0
 8000d76:	2049      	movs	r0, #73	; 0x49
 8000d78:	f7ff fd55 	bl	8000826 <SD_SendCmd>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 80a8 	bne.w	8000ed4 <SD_disk_ioctl+0x230>
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fcda 	bl	8000744 <SD_RxDataBlock>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 809e 	beq.w	8000ed4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d98:	7b3b      	ldrb	r3, [r7, #12]
 8000d9a:	099b      	lsrs	r3, r3, #6
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10e      	bne.n	8000dc0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000da2:	7d7b      	ldrb	r3, [r7, #21]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	7d3b      	ldrb	r3, [r7, #20]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000db6:	8bfb      	ldrh	r3, [r7, #30]
 8000db8:	029a      	lsls	r2, r3, #10
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e02e      	b.n	8000e1e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dc0:	7c7b      	ldrb	r3, [r7, #17]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	09db      	lsrs	r3, r3, #7
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 0306 	and.w	r3, r3, #6
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3302      	adds	r3, #2
 8000de4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000de8:	7d3b      	ldrb	r3, [r7, #20]
 8000dea:	099b      	lsrs	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cbb      	ldrb	r3, [r7, #18]
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e10:	8bfa      	ldrh	r2, [r7, #30]
 8000e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e16:	3b09      	subs	r3, #9
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e24:	e056      	b.n	8000ed4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e34:	e055      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e36:	f7ff fc11 	bl	800065c <SD_ReadyWait>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d14b      	bne.n	8000ed8 <SD_disk_ioctl+0x234>
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e46:	e047      	b.n	8000ed8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2049      	movs	r0, #73	; 0x49
 8000e4c:	f7ff fceb 	bl	8000826 <SD_SendCmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d142      	bne.n	8000edc <SD_disk_ioctl+0x238>
 8000e56:	2110      	movs	r1, #16
 8000e58:	6a38      	ldr	r0, [r7, #32]
 8000e5a:	f7ff fc73 	bl	8000744 <SD_RxDataBlock>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d03b      	beq.n	8000edc <SD_disk_ioctl+0x238>
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e6a:	e037      	b.n	8000edc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	204a      	movs	r0, #74	; 0x4a
 8000e70:	f7ff fcd9 	bl	8000826 <SD_SendCmd>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d132      	bne.n	8000ee0 <SD_disk_ioctl+0x23c>
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	6a38      	ldr	r0, [r7, #32]
 8000e7e:	f7ff fc61 	bl	8000744 <SD_RxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d02b      	beq.n	8000ee0 <SD_disk_ioctl+0x23c>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e8e:	e027      	b.n	8000ee0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e90:	2100      	movs	r1, #0
 8000e92:	207a      	movs	r0, #122	; 0x7a
 8000e94:	f7ff fcc7 	bl	8000826 <SD_SendCmd>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ea4:	e00b      	b.n	8000ebe <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ea6:	6a3c      	ldr	r4, [r7, #32]
 8000ea8:	1c63      	adds	r3, r4, #1
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	f7ff fbac 	bl	8000608 <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d9ef      	bls.n	8000ea6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ed2:	e006      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ed4:	bf00      	nop
 8000ed6:	e004      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ed8:	bf00      	nop
 8000eda:	e002      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ee0:	bf00      	nop
		}

		DESELECT();
 8000ee2:	f7ff fb4f 	bl	8000584 <DESELECT>
		SPI_RxByte();
 8000ee6:	f7ff fb8f 	bl	8000608 <SPI_RxByte>
	}

	return res;
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000

08000efc <HAL_TIM_PWM_PulseFinishedCallback>:

extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim8;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	default:
		break;
	}
	*/

	if (htim == &htim3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d10c      	bne.n	8000f26 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f007 f85a 	bl	8007fc8 <HAL_TIM_PWM_Stop_DMA>
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8000f14:	2108      	movs	r1, #8
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f007 f856 	bl	8007fc8 <HAL_TIM_PWM_Stop_DMA>
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8000f1c:	210c      	movs	r1, #12
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f007 f852 	bl	8007fc8 <HAL_TIM_PWM_Stop_DMA>
	}
	else if (htim == &htim8)
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
	}
}
 8000f24:	e007      	b.n	8000f36 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
	else if (htim == &htim8)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d103      	bne.n	8000f36 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8000f2e:	2104      	movs	r1, #4
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f007 f849 	bl	8007fc8 <HAL_TIM_PWM_Stop_DMA>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200047d4 	.word	0x200047d4
 8000f44:	200035cc 	.word	0x200035cc

08000f48 <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2264      	movs	r2, #100	; 0x64
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2264      	movs	r2, #100	; 0x64
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a3a      	ldr	r2, [r7, #32]
 8000f8c:	615a      	str	r2, [r3, #20]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <WS2812B_vSend>:


void WS2812B_vSend(WS2812BHandle_t *pxWS28182B, uint8_t ucRed, uint8_t ucGreen, uint8_t ucBlue)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	70fb      	strb	r3, [r7, #3]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70bb      	strb	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
	// 24-bit data for the colors
	uint32_t ulData = ((uint32_t)ucBlue << 16) | ((uint32_t)ucRed << 8) | ((uint32_t)ucGreen << 0);
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	041a      	lsls	r2, r3, #16
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	78bb      	ldrb	r3, [r7, #2]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]

	// Check individual data bits (start from MSB)
	for (int8_t i = 23; i > 0; i--)
 8000fc4:	2317      	movs	r3, #23
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e01e      	b.n	8001008 <WS2812B_vSend+0x6e>
	{
		if (ulData & (1 << i))
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <WS2812B_vSend+0x54>
		{
			// Bit is 1
			pxWS28182B->pwmData[i] = WS2812B_T1H_TICKS;
 8000fde:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	320c      	adds	r2, #12
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000fec:	e006      	b.n	8000ffc <WS2812B_vSend+0x62>
		}
		else
		{
			// Bit is 0
			pxWS28182B->pwmData[i] = WS2812B_T0H_TICKS;
 8000fee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	320c      	adds	r2, #12
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int8_t i = 23; i > 0; i--)
 8000ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100c:	2b00      	cmp	r3, #0
 800100e:	dcdc      	bgt.n	8000fca <WS2812B_vSend+0x30>
		}
	}

	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_1, (uint32_t *)pxWS28182B->pwmData, sizeof(pxWS28182B->pwmData));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f103 0218 	add.w	r2, r3, #24
 800101a:	2330      	movs	r3, #48	; 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	f006 fdbb 	bl	8007b98 <HAL_TIM_PWM_Start_DMA>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8001034:	1d39      	adds	r1, r7, #4
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	2201      	movs	r2, #1
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <__io_putchar+0x20>)
 800103c:	f008 f8f0 	bl	8009220 <HAL_UART_Transmit>
	return ch;
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000cadc 	.word	0x2000cadc

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f002 f8db 	bl	8003210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f86d 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 fd5f 	bl	8001b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001062:	f000 fd1b 	bl	8001a9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001066:	f000 fce9 	bl	8001a3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800106a:	f000 f8ef 	bl	800124c <MX_ADC1_Init>
  MX_TIM1_Init();
 800106e:	f000 f9e1 	bl	8001434 <MX_TIM1_Init>
  MX_FATFS_Init();
 8001072:	f008 fd5b 	bl	8009b2c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001076:	f000 f99f 	bl	80013b8 <MX_SPI1_Init>
  MX_TIM15_Init();
 800107a:	f000 fb6b 	bl	8001754 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f000 fbed 	bl	800185c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001082:	f000 fc63 	bl	800194c <MX_TIM17_Init>
  MX_I2C1_Init();
 8001086:	f000 f957 	bl	8001338 <MX_I2C1_Init>
  MX_TIM3_Init();
 800108a:	f000 fa63 	bl	8001554 <MX_TIM3_Init>
  MX_TIM8_Init();
 800108e:	f000 fad1 	bl	8001634 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <main+0xa0>)
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <main+0xa4>)
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <main+0xa8>)
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <main+0xac>)
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <main+0xb0>)
 80010a2:	4918      	ldr	r1, [pc, #96]	; (8001104 <main+0xb4>)
 80010a4:	4818      	ldr	r0, [pc, #96]	; (8001108 <main+0xb8>)
 80010a6:	f7ff ff4f 	bl	8000f48 <WS2812B_vInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010aa:	f008 fe47 	bl	8009d3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <main+0xbc>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <main+0xc0>)
 80010b4:	f008 fe8c 	bl	8009dd0 <osThreadNew>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a16      	ldr	r2, [pc, #88]	; (8001114 <main+0xc4>)
 80010bc:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <main+0xc8>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <main+0xcc>)
 80010c4:	f008 fe84 	bl	8009dd0 <osThreadNew>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <main+0xd0>)
 80010cc:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 80010ce:	4a15      	ldr	r2, [pc, #84]	; (8001124 <main+0xd4>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <main+0xd8>)
 80010d4:	f008 fe7c 	bl	8009dd0 <osThreadNew>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a14      	ldr	r2, [pc, #80]	; (800112c <main+0xdc>)
 80010dc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 80010de:	4814      	ldr	r0, [pc, #80]	; (8001130 <main+0xe0>)
 80010e0:	f008 ff50 	bl	8009f84 <osEventFlagsNew>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <main+0xe4>)
 80010e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ea:	f008 fe4b 	bl	8009d84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <main+0x9e>
 80010f0:	20003580 	.word	0x20003580
 80010f4:	2000ca28 	.word	0x2000ca28
 80010f8:	2000478c 	.word	0x2000478c
 80010fc:	200048ec 	.word	0x200048ec
 8001100:	200035cc 	.word	0x200035cc
 8001104:	200047d4 	.word	0x200047d4
 8001108:	200046f4 	.word	0x200046f4
 800110c:	0800dfd8 	.word	0x0800dfd8
 8001110:	08001bcd 	.word	0x08001bcd
 8001114:	20004884 	.word	0x20004884
 8001118:	0800dffc 	.word	0x0800dffc
 800111c:	08001c71 	.word	0x08001c71
 8001120:	200035c8 	.word	0x200035c8
 8001124:	0800e020 	.word	0x0800e020
 8001128:	08001cd5 	.word	0x08001cd5
 800112c:	2000ca70 	.word	0x2000ca70
 8001130:	0800e044 	.word	0x0800e044
 8001134:	20003618 	.word	0x20003618

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b8      	sub	sp, #224	; 0xe0
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001142:	2244      	movs	r2, #68	; 0x44
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00b fe68 	bl	800ce1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	2288      	movs	r2, #136	; 0x88
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00b fe5a 	bl	800ce1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800118e:	230a      	movs	r3, #10
 8001190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001194:	2307      	movs	r3, #7
 8001196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 f94e 	bl	800544c <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011b6:	f000 fdc1 	bl	8001d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011dc:	2104      	movs	r1, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 fd1a 	bl	8005c18 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011ea:	f000 fda7 	bl	8001d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80011ee:	f244 0342 	movw	r3, #16450	; 0x4042
 80011f2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001200:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800120a:	2308      	movs	r3, #8
 800120c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800120e:	2307      	movs	r3, #7
 8001210:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800121a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800121e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4618      	mov	r0, r3
 8001224:	f004 ff30 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800122e:	f000 fd85 	bl	8001d3c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001232:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001236:	f004 f8b3 	bl	80053a0 <HAL_PWREx_ControlVoltageScaling>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001240:	f000 fd7c 	bl	8001d3c <Error_Handler>
  }
}
 8001244:	bf00      	nop
 8001246:	37e0      	adds	r7, #224	; 0xe0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <MX_ADC1_Init+0xe0>)
 8001270:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <MX_ADC1_Init+0xe4>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001274:	4b2d      	ldr	r3, [pc, #180]	; (800132c <MX_ADC1_Init+0xe0>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <MX_ADC1_Init+0xe0>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <MX_ADC1_Init+0xe0>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001286:	4b29      	ldr	r3, [pc, #164]	; (800132c <MX_ADC1_Init+0xe0>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <MX_ADC1_Init+0xe0>)
 800128e:	2204      	movs	r2, #4
 8001290:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <MX_ADC1_Init+0xe0>)
 8001294:	2200      	movs	r2, #0
 8001296:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001298:	4b24      	ldr	r3, [pc, #144]	; (800132c <MX_ADC1_Init+0xe0>)
 800129a:	2200      	movs	r2, #0
 800129c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <MX_ADC1_Init+0xe0>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <MX_ADC1_Init+0xe0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <MX_ADC1_Init+0xe0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_ADC1_Init+0xe0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_ADC1_Init+0xe0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_ADC1_Init+0xe0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_ADC1_Init+0xe0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <MX_ADC1_Init+0xe0>)
 80012d0:	f002 f9d0 	bl	8003674 <HAL_ADC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012da:	f000 fd2f 	bl	8001d3c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <MX_ADC1_Init+0xe0>)
 80012ea:	f003 f999 	bl	8004620 <HAL_ADCEx_MultiModeConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012f4:	f000 fd22 	bl	8001d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_ADC1_Init+0xe8>)
 80012fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fc:	2306      	movs	r3, #6
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001304:	237f      	movs	r3, #127	; 0x7f
 8001306:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001308:	2304      	movs	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_ADC1_Init+0xe0>)
 8001316:	f002 fd3b 	bl	8003d90 <HAL_ADC_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001320:	f000 fd0c 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20004820 	.word	0x20004820
 8001330:	50040000 	.word	0x50040000
 8001334:	04300002 	.word	0x04300002

08001338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C1_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C1_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_I2C1_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_I2C1_Init+0x74>)
 8001350:	2201      	movs	r2, #1
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_I2C1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_I2C1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <MX_I2C1_Init+0x74>)
 8001374:	f003 fee0 	bl	8005138 <HAL_I2C_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800137e:	f000 fcdd 	bl	8001d3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001382:	2100      	movs	r1, #0
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_I2C1_Init+0x74>)
 8001386:	f003 ff66 	bl	8005256 <HAL_I2CEx_ConfigAnalogFilter>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001390:	f000 fcd4 	bl	8001d3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_I2C1_Init+0x74>)
 8001398:	f003 ffa8 	bl	80052ec <HAL_I2CEx_ConfigDigitalFilter>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 fccb 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20004658 	.word	0x20004658
 80013b0:	40005400 	.word	0x40005400
 80013b4:	10909cec 	.word	0x10909cec

080013b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_SPI1_Init+0x74>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_SPI1_Init+0x78>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_SPI1_Init+0x74>)
 80013c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_SPI1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_SPI1_Init+0x74>)
 80013d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_SPI1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_SPI1_Init+0x74>)
 80013e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_SPI1_Init+0x74>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_SPI1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_SPI1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI1_Init+0x74>)
 8001406:	2207      	movs	r2, #7
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI1_Init+0x74>)
 8001412:	2208      	movs	r2, #8
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_SPI1_Init+0x74>)
 8001418:	f005 faf2 	bl	8006a00 <HAL_SPI_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001422:	f000 fc8b 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000ca78 	.word	0x2000ca78
 8001430:	40013000 	.word	0x40013000

08001434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	222c      	movs	r2, #44	; 0x2c
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f00b fcdb 	bl	800ce1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <MX_TIM1_Init+0x118>)
 8001468:	4a39      	ldr	r2, [pc, #228]	; (8001550 <MX_TIM1_Init+0x11c>)
 800146a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <MX_TIM1_Init+0x118>)
 800146e:	2207      	movs	r2, #7
 8001470:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <MX_TIM1_Init+0x118>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001478:	4b34      	ldr	r3, [pc, #208]	; (800154c <MX_TIM1_Init+0x118>)
 800147a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_TIM1_Init+0x118>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <MX_TIM1_Init+0x118>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <MX_TIM1_Init+0x118>)
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001492:	482e      	ldr	r0, [pc, #184]	; (800154c <MX_TIM1_Init+0x118>)
 8001494:	f006 f900 	bl	8007698 <HAL_TIM_PWM_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 fc4d 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4825      	ldr	r0, [pc, #148]	; (800154c <MX_TIM1_Init+0x118>)
 80014b6:	f007 fd41 	bl	8008f3c <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014c0:	f000 fc3c 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	; 0x60
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4818      	ldr	r0, [pc, #96]	; (800154c <MX_TIM1_Init+0x118>)
 80014ea:	f006 ff7d 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014f4:	f000 fc22 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800151a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM1_Init+0x118>)
 800152e:	f007 fd8d 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001538:	f000 fc00 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM1_Init+0x118>)
 800153e:	f001 fb57 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3758      	adds	r7, #88	; 0x58
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000c9d8 	.word	0x2000c9d8
 8001550:	40012c00 	.word	0x40012c00

08001554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <MX_TIM3_Init+0xd8>)
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <MX_TIM3_Init+0xdc>)
 800157c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <MX_TIM3_Init+0xd8>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <MX_TIM3_Init+0xd8>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <MX_TIM3_Init+0xd8>)
 800158c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <MX_TIM3_Init+0xd8>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_TIM3_Init+0xd8>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159e:	4823      	ldr	r0, [pc, #140]	; (800162c <MX_TIM3_Init+0xd8>)
 80015a0:	f006 f87a 	bl	8007698 <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80015aa:	f000 fbc7 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	481b      	ldr	r0, [pc, #108]	; (800162c <MX_TIM3_Init+0xd8>)
 80015be:	f007 fcbd 	bl	8008f3c <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80015c8:	f000 fbb8 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4812      	ldr	r0, [pc, #72]	; (800162c <MX_TIM3_Init+0xd8>)
 80015e4:	f006 ff00 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015ee:	f000 fba5 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	2208      	movs	r2, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM3_Init+0xd8>)
 80015fa:	f006 fef5 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001604:	f000 fb9a 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001608:	463b      	mov	r3, r7
 800160a:	220c      	movs	r2, #12
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM3_Init+0xd8>)
 8001610:	f006 feea 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800161a:	f000 fb8f 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM3_Init+0xd8>)
 8001620:	f001 fae6 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200047d4 	.word	0x200047d4
 8001630:	40000400 	.word	0x40000400

08001634 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b096      	sub	sp, #88	; 0x58
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	222c      	movs	r2, #44	; 0x2c
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fbdb 	bl	800ce1c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <MX_TIM8_Init+0x118>)
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <MX_TIM8_Init+0x11c>)
 800166a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <MX_TIM8_Init+0x118>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b36      	ldr	r3, [pc, #216]	; (800174c <MX_TIM8_Init+0x118>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <MX_TIM8_Init+0x118>)
 800167a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <MX_TIM8_Init+0x118>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001686:	4b31      	ldr	r3, [pc, #196]	; (800174c <MX_TIM8_Init+0x118>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <MX_TIM8_Init+0x118>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001692:	482e      	ldr	r0, [pc, #184]	; (800174c <MX_TIM8_Init+0x118>)
 8001694:	f006 f800 	bl	8007698 <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800169e:	f000 fb4d 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016b2:	4619      	mov	r1, r3
 80016b4:	4825      	ldr	r0, [pc, #148]	; (800174c <MX_TIM8_Init+0x118>)
 80016b6:	f007 fc41 	bl	8008f3c <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80016c0:	f000 fb3c 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c4:	2360      	movs	r3, #96	; 0x60
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016e4:	2204      	movs	r2, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM8_Init+0x118>)
 80016ea:	f006 fe7d 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016f4:	f000 fb22 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800170c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001710:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800171a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM8_Init+0x118>)
 800172e:	f007 fc8d 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001738:	f000 fb00 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM8_Init+0x118>)
 800173e:	f001 fa57 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3758      	adds	r7, #88	; 0x58
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200035cc 	.word	0x200035cc
 8001750:	40013400 	.word	0x40013400

08001754 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	615a      	str	r2, [r3, #20]
 8001778:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	222c      	movs	r2, #44	; 0x2c
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f00b fb4b 	bl	800ce1c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <MX_TIM15_Init+0x100>)
 8001788:	4a33      	ldr	r2, [pc, #204]	; (8001858 <MX_TIM15_Init+0x104>)
 800178a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_TIM15_Init+0x100>)
 800178e:	2207      	movs	r2, #7
 8001790:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b30      	ldr	r3, [pc, #192]	; (8001854 <MX_TIM15_Init+0x100>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <MX_TIM15_Init+0x100>)
 800179a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <MX_TIM15_Init+0x100>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <MX_TIM15_Init+0x100>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_TIM15_Init+0x100>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017b2:	4828      	ldr	r0, [pc, #160]	; (8001854 <MX_TIM15_Init+0x100>)
 80017b4:	f005 ff70 	bl	8007698 <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80017be:	f000 fabd 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4820      	ldr	r0, [pc, #128]	; (8001854 <MX_TIM15_Init+0x100>)
 80017d2:	f007 fbb3 	bl	8008f3c <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80017dc:	f000 faae 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	; 0x60
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <MX_TIM15_Init+0x100>)
 8001806:	f006 fdef 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001810:	f000 fa94 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <MX_TIM15_Init+0x100>)
 8001838:	f007 fc08 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001842:	f000 fa7b 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <MX_TIM15_Init+0x100>)
 8001848:	f001 f9d2 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 800184c:	bf00      	nop
 800184e:	3758      	adds	r7, #88	; 0x58
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200046a4 	.word	0x200046a4
 8001858:	40014000 	.word	0x40014000

0800185c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b092      	sub	sp, #72	; 0x48
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	222c      	movs	r2, #44	; 0x2c
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f00b facd 	bl	800ce1c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <MX_TIM16_Init+0xe8>)
 8001884:	4a30      	ldr	r2, [pc, #192]	; (8001948 <MX_TIM16_Init+0xec>)
 8001886:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <MX_TIM16_Init+0xe8>)
 800188a:	2207      	movs	r2, #7
 800188c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <MX_TIM16_Init+0xe8>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <MX_TIM16_Init+0xe8>)
 8001896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <MX_TIM16_Init+0xe8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <MX_TIM16_Init+0xe8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <MX_TIM16_Init+0xe8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018ae:	4825      	ldr	r0, [pc, #148]	; (8001944 <MX_TIM16_Init+0xe8>)
 80018b0:	f005 fe2a 	bl	8007508 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018ba:	f000 fa3f 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018be:	4821      	ldr	r0, [pc, #132]	; (8001944 <MX_TIM16_Init+0xe8>)
 80018c0:	f005 feea 	bl	8007698 <HAL_TIM_PWM_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018ca:	f000 fa37 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ce:	2360      	movs	r3, #96	; 0x60
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	4814      	ldr	r0, [pc, #80]	; (8001944 <MX_TIM16_Init+0xe8>)
 80018f4:	f006 fd78 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80018fe:	f000 fa1d 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4807      	ldr	r0, [pc, #28]	; (8001944 <MX_TIM16_Init+0xe8>)
 8001926:	f007 fb91 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8001930:	f000 fa04 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <MX_TIM16_Init+0xe8>)
 8001936:	f001 f95b 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 800193a:	bf00      	nop
 800193c:	3748      	adds	r7, #72	; 0x48
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000db94 	.word	0x2000db94
 8001948:	40014400 	.word	0x40014400

0800194c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b092      	sub	sp, #72	; 0x48
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	222c      	movs	r2, #44	; 0x2c
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f00b fa55 	bl	800ce1c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <MX_TIM17_Init+0xe8>)
 8001974:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <MX_TIM17_Init+0xec>)
 8001976:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <MX_TIM17_Init+0xe8>)
 800197a:	2207      	movs	r2, #7
 800197c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <MX_TIM17_Init+0xe8>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001984:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <MX_TIM17_Init+0xe8>)
 8001986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <MX_TIM17_Init+0xe8>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001992:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <MX_TIM17_Init+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <MX_TIM17_Init+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800199e:	4825      	ldr	r0, [pc, #148]	; (8001a34 <MX_TIM17_Init+0xe8>)
 80019a0:	f005 fdb2 	bl	8007508 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80019aa:	f000 f9c7 	bl	8001d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80019ae:	4821      	ldr	r0, [pc, #132]	; (8001a34 <MX_TIM17_Init+0xe8>)
 80019b0:	f005 fe72 	bl	8007698 <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80019ba:	f000 f9bf 	bl	8001d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019be:	2360      	movs	r3, #96	; 0x60
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_TIM17_Init+0xe8>)
 80019e4:	f006 fd00 	bl	80083e8 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80019ee:	f000 f9a5 	bl	8001d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <MX_TIM17_Init+0xe8>)
 8001a16:	f007 fb19 	bl	800904c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001a20:	f000 f98c 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a24:	4803      	ldr	r0, [pc, #12]	; (8001a34 <MX_TIM17_Init+0xe8>)
 8001a26:	f001 f8e3 	bl	8002bf0 <HAL_TIM_MspPostInit>

}
 8001a2a:	bf00      	nop
 8001a2c:	3748      	adds	r7, #72	; 0x48
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20004740 	.word	0x20004740
 8001a38:	40014800 	.word	0x40014800

08001a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <MX_USART2_UART_Init+0x5c>)
 8001a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a62:	220c      	movs	r2, #12
 8001a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART2_UART_Init+0x58>)
 8001a80:	f007 fb80 	bl	8009184 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a8a:	f000 f957 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000cadc 	.word	0x2000cadc
 8001a98:	40004400 	.word	0x40004400

08001a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_DMA_Init+0x80>)
 8001aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <MX_DMA_Init+0x80>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6493      	str	r3, [r2, #72]	; 0x48
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_DMA_Init+0x80>)
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_DMA_Init+0x80>)
 8001abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <MX_DMA_Init+0x80>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6493      	str	r3, [r2, #72]	; 0x48
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_DMA_Init+0x80>)
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2105      	movs	r1, #5
 8001ad6:	200c      	movs	r0, #12
 8001ad8:	f002 ff0a 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001adc:	200c      	movs	r0, #12
 8001ade:	f002 ff23 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2105      	movs	r1, #5
 8001ae6:	200d      	movs	r0, #13
 8001ae8:	f002 ff02 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001aec:	200d      	movs	r0, #13
 8001aee:	f002 ff1b 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2105      	movs	r1, #5
 8001af6:	2010      	movs	r0, #16
 8001af8:	f002 fefa 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001afc:	2010      	movs	r0, #16
 8001afe:	f002 ff13 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2105      	movs	r1, #5
 8001b06:	2045      	movs	r0, #69	; 0x45
 8001b08:	f002 fef2 	bl	80048f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001b0c:	2045      	movs	r0, #69	; 0x45
 8001b0e:	f002 ff0b 	bl	8004928 <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a1c      	ldr	r2, [pc, #112]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_GPIO_Init+0xa4>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	2140      	movs	r1, #64	; 0x40
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001b9c:	f003 fab4 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bac:	2301      	movs	r3, #1
 8001bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <MX_GPIO_Init+0xa8>)
 8001bb8:	f003 f8fc 	bl	8004db4 <HAL_GPIO_Init>

}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400

08001bcc <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <StartMainMenuTask+0x98>)
 8001bd6:	f00b f9af 	bl	800cf38 <puts>
    osDelay(10);
 8001bda:	200a      	movs	r0, #10
 8001bdc:	f008 f98a 	bl	8009ef4 <osDelay>

    //printf("Reading song\r\n");
    //WS2812B_vSend(&xWS2812B, 5, 255, 101);
    WS2812B_vSend(&xWS2812B, 10, 0, 0);
 8001be0:	2300      	movs	r3, #0
 8001be2:	2200      	movs	r2, #0
 8001be4:	210a      	movs	r1, #10
 8001be6:	4820      	ldr	r0, [pc, #128]	; (8001c68 <StartMainMenuTask+0x9c>)
 8001be8:	f7ff f9d7 	bl	8000f9a <WS2812B_vSend>

    osDelay(1000);
 8001bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bf0:	f008 f980 	bl	8009ef4 <osDelay>
    WS2812B_vSend(&xWS2812B, 0, 10, 0);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	220a      	movs	r2, #10
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	481b      	ldr	r0, [pc, #108]	; (8001c68 <StartMainMenuTask+0x9c>)
 8001bfc:	f7ff f9cd 	bl	8000f9a <WS2812B_vSend>

    osDelay(1000);
 8001c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c04:	f008 f976 	bl	8009ef4 <osDelay>
    WS2812B_vSend(&xWS2812B, 0, 0, 10);
 8001c08:	230a      	movs	r3, #10
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4816      	ldr	r0, [pc, #88]	; (8001c68 <StartMainMenuTask+0x9c>)
 8001c10:	f7ff f9c3 	bl	8000f9a <WS2812B_vSend>

    osDelay(1000);
 8001c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c18:	f008 f96c 	bl	8009ef4 <osDelay>
    WS2812B_vSend(&xWS2812B, 1, 1, 1);
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2101      	movs	r1, #1
 8001c22:	4811      	ldr	r0, [pc, #68]	; (8001c68 <StartMainMenuTask+0x9c>)
 8001c24:	f7ff f9b9 	bl	8000f9a <WS2812B_vSend>

    osDelay(1000);
 8001c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c2c:	f008 f962 	bl	8009ef4 <osDelay>



    printf("%lu\r\n", WS2812B_ARR);
 8001c30:	2164      	movs	r1, #100	; 0x64
 8001c32:	480e      	ldr	r0, [pc, #56]	; (8001c6c <StartMainMenuTask+0xa0>)
 8001c34:	f00b f8fa 	bl	800ce2c <iprintf>


    printf("%lu\r\n", WS2812B_T0H_TICKS);
 8001c38:	2120      	movs	r1, #32
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <StartMainMenuTask+0xa0>)
 8001c3c:	f00b f8f6 	bl	800ce2c <iprintf>
    printf("%lu\r\n", WS2812B_T0L_TICKS);
 8001c40:	2144      	movs	r1, #68	; 0x44
 8001c42:	480a      	ldr	r0, [pc, #40]	; (8001c6c <StartMainMenuTask+0xa0>)
 8001c44:	f00b f8f2 	bl	800ce2c <iprintf>
    printf("%lu\r\n", WS2812B_T1H_TICKS);
 8001c48:	2140      	movs	r1, #64	; 0x40
 8001c4a:	4808      	ldr	r0, [pc, #32]	; (8001c6c <StartMainMenuTask+0xa0>)
 8001c4c:	f00b f8ee 	bl	800ce2c <iprintf>
    printf("%lu\r\n", WS2812B_T1L_TICKS);
 8001c50:	2124      	movs	r1, #36	; 0x24
 8001c52:	4806      	ldr	r0, [pc, #24]	; (8001c6c <StartMainMenuTask+0xa0>)
 8001c54:	f00b f8ea 	bl	800ce2c <iprintf>

    osDelay(1000);
 8001c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5c:	f008 f94a 	bl	8009ef4 <osDelay>
  	printf("Main Menu\r\n");
 8001c60:	e7b8      	b.n	8001bd4 <StartMainMenuTask+0x8>
 8001c62:	bf00      	nop
 8001c64:	0800de28 	.word	0x0800de28
 8001c68:	200046f4 	.word	0x200046f4
 8001c6c:	0800de34 	.word	0x0800de34

08001c70 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <StartPlayTickTask+0x4c>)
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <StartPlayTickTask+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4619      	mov	r1, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c86:	2200      	movs	r2, #0
 8001c88:	f008 f9bb 	bl	800a002 <osEventFlagsWait>
 8001c8c:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dbf1      	blt.n	8001c78 <StartPlayTickTask+0x8>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0ec      	beq.n	8001c78 <StartPlayTickTask+0x8>
		{
			while (running)
 8001c9e:	e008      	b.n	8001cb2 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001ca0:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <StartPlayTickTask+0x54>)
 8001ca2:	f00b f949 	bl	800cf38 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <StartPlayTickTask+0x58>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4807      	ldr	r0, [pc, #28]	; (8001ccc <StartPlayTickTask+0x5c>)
 8001cae:	f009 fac7 	bl	800b240 <vTaskDelayUntil>
			while (running)
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <StartPlayTickTask+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f2      	bne.n	8001ca0 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001cba:	e7dd      	b.n	8001c78 <StartPlayTickTask+0x8>
 8001cbc:	20003618 	.word	0x20003618
 8001cc0:	0800e054 	.word	0x0800e054
 8001cc4:	0800de3c 	.word	0x0800de3c
 8001cc8:	0800e058 	.word	0x0800e058
 8001ccc:	200046f0 	.word	0x200046f0
 8001cd0:	2000013c 	.word	0x2000013c

08001cd4 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <StartPlayState+0x38>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <StartPlayState+0x3c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	2200      	movs	r2, #0
 8001cec:	f008 f989 	bl	800a002 <osEventFlagsWait>
 8001cf0:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dbf1      	blt.n	8001cdc <StartPlayState+0x8>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ec      	beq.n	8001cdc <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8001d02:	4804      	ldr	r0, [pc, #16]	; (8001d14 <StartPlayState+0x40>)
 8001d04:	f000 f83a 	bl	8001d7c <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001d08:	e7e8      	b.n	8001cdc <StartPlayState+0x8>
 8001d0a:	bf00      	nop
 8001d0c:	20003618 	.word	0x20003618
 8001d10:	0800e05c 	.word	0x0800e05c
 8001d14:	20004934 	.word	0x20004934

08001d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d2a:	f001 fa91 	bl	8003250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40001000 	.word	0x40001000

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <Error_Handler+0x8>

08001d46 <Piece_ucParseBeatValue>:
	pxPiece->xCapture.ulTick = osKernelGetTickCount();
}


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3305      	adds	r3, #5
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	440a      	add	r2, r1
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	795b      	ldrb	r3, [r3, #5]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 8001d88:	e045      	b.n	8001e16 <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	440a      	add	r2, r1
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4827      	ldr	r0, [pc, #156]	; (8001e4c <Piece_vParseCommand+0xd0>)
 8001db0:	f00b f83c 	bl	800ce2c <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	791b      	ldrb	r3, [r3, #4]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4825      	ldr	r0, [pc, #148]	; (8001e50 <Piece_vParseCommand+0xd4>)
 8001dbc:	f00b f836 	bl	800ce2c <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <Piece_vParseCommand+0x52>
 8001dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dca:	d003      	beq.n	8001dd4 <Piece_vParseCommand+0x58>
 8001dcc:	e006      	b.n	8001ddc <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
			break;
 8001dd2:	e020      	b.n	8001e16 <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f891 	bl	8001efc <Piece_vConfigureAll>
			break;
 8001dda:	e01c      	b.n	8001e16 <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fb4b 	bl	800247c <bIsPlayCommand>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	791b      	ldrb	r3, [r3, #4]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa5 	bl	8001d46 <Piece_ucParseBeatValue>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8001e00:	7bba      	ldrb	r2, [r7, #14]
 8001e02:	7b7b      	ldrb	r3, [r7, #13]
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f9d8 	bl	80021bc <Piece_vPlayNotes>
 8001e0c:	e002      	b.n	8001e14 <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8001e0e:	4811      	ldr	r0, [pc, #68]	; (8001e54 <Piece_vParseCommand+0xd8>)
 8001e10:	f00b f892 	bl	800cf38 <puts>
			}
			break;
 8001e14:	bf00      	nop
	while (!endCommand)
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0b6      	beq.n	8001d8a <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8001e1c:	480e      	ldr	r0, [pc, #56]	; (8001e58 <Piece_vParseCommand+0xdc>)
 8001e1e:	f00b f88b 	bl	800cf38 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8001e22:	2100      	movs	r1, #0
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <Piece_vParseCommand+0xe0>)
 8001e26:	f005 fddb 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <Piece_vParseCommand+0xe4>)
 8001e2e:	f005 fdd7 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8001e32:	2100      	movs	r1, #0
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <Piece_vParseCommand+0xe8>)
 8001e36:	f005 fdd3 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	480a      	ldr	r0, [pc, #40]	; (8001e68 <Piece_vParseCommand+0xec>)
 8001e3e:	f005 fdcf 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	0800de8c 	.word	0x0800de8c
 8001e50:	0800dea0 	.word	0x0800dea0
 8001e54:	0800deb0 	.word	0x0800deb0
 8001e58:	0800dec4 	.word	0x0800dec4
 8001e5c:	2000c9d8 	.word	0x2000c9d8
 8001e60:	200046a4 	.word	0x200046a4
 8001e64:	2000db94 	.word	0x2000db94
 8001e68:	20004740 	.word	0x20004740

08001e6c <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001e86:	4619      	mov	r1, r3
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <Piece_vSetMovement+0x2c>)
 8001e8a:	f00a ffcf 	bl	800ce2c <iprintf>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	0800ded8 	.word	0x0800ded8

08001e9c <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <Piece_vSetBPM+0x2c>)
 8001eba:	f00a ffb7 	bl	800ce2c <iprintf>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800dee8 	.word	0x0800dee8

08001ecc <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <Piece_vSetDynamic+0x2c>)
 8001eea:	f00a ff9f 	bl	800ce2c <iprintf>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	0800def4 	.word	0x0800def4

08001efc <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8001f04:	481e      	ldr	r0, [pc, #120]	; (8001f80 <Piece_vConfigureAll+0x84>)
 8001f06:	f00b f817 	bl	800cf38 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1c9a      	adds	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ff84 	bl	8001e6c <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8001f64:	89bb      	ldrh	r3, [r7, #12]
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff97 	bl	8001e9c <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffaa 	bl	8001ecc <Piece_vSetDynamic>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	0800df04 	.word	0x0800df04

08001f84 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	int count = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001f92:	e01e      	b.n	8001fd2 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f9a:	3394      	adds	r3, #148	; 0x94
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fa8:	3394      	adds	r3, #148	; 0x94
 8001faa:	601a      	str	r2, [r3, #0]
		count++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3b32      	subs	r3, #50	; 0x32
 8001fb6:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8001fb8:	2232      	movs	r2, #50	; 0x32
 8001fba:	68f9      	ldr	r1, [r7, #12]
 8001fbc:	4819      	ldr	r0, [pc, #100]	; (8002024 <Piece_vCaptureFragment+0xa0>)
 8001fbe:	f00a ff35 	bl	800ce2c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fc8:	3394      	adds	r3, #148	; 0x94
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f007 ffac 	bl	8009f2a <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b31      	cmp	r3, #49	; 0x31
 8001fd6:	dcdd      	bgt.n	8001f94 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	dd1b      	ble.n	8002016 <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fe4:	3394      	adds	r3, #148	; 0x94
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	441a      	add	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ff2:	3394      	adds	r3, #148	; 0x94
 8001ff4:	601a      	str	r2, [r3, #0]

		count++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	68f9      	ldr	r1, [r7, #12]
 8002000:	4808      	ldr	r0, [pc, #32]	; (8002024 <Piece_vCaptureFragment+0xa0>)
 8002002:	f00a ff13 	bl	800ce2c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800200c:	3394      	adds	r3, #148	; 0x94
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f007 ff8a 	bl	8009f2a <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	603b      	str	r3, [r7, #0]
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0800df20 	.word	0x0800df20

08002028 <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002036:	3398      	adds	r3, #152	; 0x98
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002042:	339b      	adds	r3, #155	; 0x9b
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800204e:	339e      	adds	r3, #158	; 0x9e
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800205a:	33a1      	adds	r3, #161	; 0xa1
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3306      	adds	r3, #6
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f102 0194 	add.w	r1, r2, #148	; 0x94
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	440a      	add	r2, r1
 8002084:	8812      	ldrh	r2, [r2, #0]
 8002086:	b292      	uxth	r2, r2
 8002088:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1c9a      	adds	r2, r3, #2
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	88db      	ldrh	r3, [r3, #6]
 8002098:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	88db      	ldrh	r3, [r3, #6]
 800209e:	0b9b      	lsrs	r3, r3, #14
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	88db      	ldrh	r3, [r3, #6]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020b2:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d856      	bhi.n	8002168 <Piece_vParseNoteGoal+0xfc>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <Piece_vParseNoteGoal+0x54>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020f7 	.word	0x080020f7
 80020c8:	0800211d 	.word	0x0800211d
 80020cc:	08002143 	.word	0x08002143
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020d6:	3398      	adds	r3, #152	; 0x98
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020e2:	3399      	adds	r3, #153	; 0x99
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020ee:	339a      	adds	r3, #154	; 0x9a
 80020f0:	7b7a      	ldrb	r2, [r7, #13]
 80020f2:	701a      	strb	r2, [r3, #0]
		break;
 80020f4:	e039      	b.n	800216a <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020fc:	339b      	adds	r3, #155	; 0x9b
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002108:	339c      	adds	r3, #156	; 0x9c
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002114:	339d      	adds	r3, #157	; 0x9d
 8002116:	7b7a      	ldrb	r2, [r7, #13]
 8002118:	701a      	strb	r2, [r3, #0]
		break;
 800211a:	e026      	b.n	800216a <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002122:	339e      	adds	r3, #158	; 0x9e
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800212e:	339f      	adds	r3, #159	; 0x9f
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800213a:	33a0      	adds	r3, #160	; 0xa0
 800213c:	7b7a      	ldrb	r2, [r7, #13]
 800213e:	701a      	strb	r2, [r3, #0]
		break;
 8002140:	e013      	b.n	800216a <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002148:	33a1      	adds	r3, #161	; 0xa1
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002154:	33a2      	adds	r3, #162	; 0xa2
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002160:	33a3      	adds	r3, #163	; 0xa3
 8002162:	7b7a      	ldrb	r2, [r7, #13]
 8002164:	701a      	strb	r2, [r3, #0]
		break;
 8002166:	e000      	b.n	800216a <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8002168:	bf00      	nop
	}
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d901      	bls.n	800218e <Piece_vParseGoal+0x16>
 800218a:	2304      	movs	r3, #4
 800218c:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	81fb      	strh	r3, [r7, #14]
 8002192:	e008      	b.n	80021a6 <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff69 	bl	800206c <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 800219a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	81fb      	strh	r3, [r7, #14]
 80021a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	dbf1      	blt.n	8002194 <Piece_vParseGoal+0x1c>
	}
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
 80021c8:	4613      	mov	r3, r2
 80021ca:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 80021cc:	78bb      	ldrb	r3, [r7, #2]
 80021ce:	4619      	mov	r1, r3
 80021d0:	48a0      	ldr	r0, [pc, #640]	; (8002454 <Piece_vPlayNotes+0x298>)
 80021d2:	f00a fe2b 	bl	800ce2c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	4619      	mov	r1, r3
 80021da:	489f      	ldr	r0, [pc, #636]	; (8002458 <Piece_vPlayNotes+0x29c>)
 80021dc:	f00a fe26 	bl	800ce2c <iprintf>

	Piece_vResetGoal(pxPiece);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff21 	bl	8002028 <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 80021e6:	78bb      	ldrb	r3, [r7, #2]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffc4 	bl	8002178 <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f98d 	bl	8002510 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d820      	bhi.n	800223e <Piece_vPlayNotes+0x82>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <Piece_vPlayNotes+0x48>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002219 	.word	0x08002219
 8002208:	08002221 	.word	0x08002221
 800220c:	08002227 	.word	0x08002227
 8002210:	0800222f 	.word	0x0800222f
 8002214:	08002237 	.word	0x08002237
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8002218:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800221c:	617b      	str	r3, [r7, #20]
		break;
 800221e:	e012      	b.n	8002246 <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8002220:	4b8e      	ldr	r3, [pc, #568]	; (800245c <Piece_vPlayNotes+0x2a0>)
 8002222:	617b      	str	r3, [r7, #20]
		break;
 8002224:	e00f      	b.n	8002246 <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8002226:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800222a:	617b      	str	r3, [r7, #20]
		break;
 800222c:	e00b      	b.n	8002246 <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 800222e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002232:	617b      	str	r3, [r7, #20]
		break;
 8002234:	e007      	b.n	8002246 <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8002236:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800223a:	617b      	str	r3, [r7, #20]
		break;
 800223c:	e003      	b.n	8002246 <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 800223e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002242:	617b      	str	r3, [r7, #20]
		break;
 8002244:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002254:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002460 <Piece_vPlayNotes+0x2a4>
 8002258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002464 <Piece_vPlayNotes+0x2a8>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b0b      	cmp	r3, #11
 800226c:	f200 80d6 	bhi.w	800241c <Piece_vPlayNotes+0x260>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <Piece_vPlayNotes+0xbc>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022a9 	.word	0x080022a9
 800227c:	080022c9 	.word	0x080022c9
 8002280:	080022e9 	.word	0x080022e9
 8002284:	08002309 	.word	0x08002309
 8002288:	08002329 	.word	0x08002329
 800228c:	08002345 	.word	0x08002345
 8002290:	0800235d 	.word	0x0800235d
 8002294:	0800237d 	.word	0x0800237d
 8002298:	0800239d 	.word	0x0800239d
 800229c:	080023bd 	.word	0x080023bd
 80022a0:	080023dd 	.word	0x080023dd
 80022a4:	080023fd 	.word	0x080023fd
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 80022a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ac:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002468 <Piece_vPlayNotes+0x2ac>
 80022b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c0:	ee17 3a90 	vmov	r3, s15
 80022c4:	613b      	str	r3, [r7, #16]
		break;
 80022c6:	e0b5      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 80022c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022cc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80022d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	613b      	str	r3, [r7, #16]
		break;
 80022e6:	e0a5      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 80022e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022ec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002300:	ee17 3a90 	vmov	r3, s15
 8002304:	613b      	str	r3, [r7, #16]
		break;
 8002306:	e095      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8002308:	edd7 7a03 	vldr	s15, [r7, #12]
 800230c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002314:	edd7 7a05 	vldr	s15, [r7, #20]
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002320:	ee17 3a90 	vmov	r3, s15
 8002324:	613b      	str	r3, [r7, #16]
		break;
 8002326:	e085      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8002328:	edd7 7a03 	vldr	s15, [r7, #12]
 800232c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002330:	edd7 7a05 	vldr	s15, [r7, #20]
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233c:	ee17 3a90 	vmov	r3, s15
 8002340:	613b      	str	r3, [r7, #16]
		break;
 8002342:	e077      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002344:	ed97 7a03 	vldr	s14, [r7, #12]
 8002348:	edd7 7a05 	vldr	s15, [r7, #20]
 800234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	613b      	str	r3, [r7, #16]
		break;
 800235a:	e06b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 800235c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002360:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002364:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002368:	edd7 7a05 	vldr	s15, [r7, #20]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002374:	ee17 3a90 	vmov	r3, s15
 8002378:	613b      	str	r3, [r7, #16]
		break;
 800237a:	e05b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 800237c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002380:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002388:	edd7 7a05 	vldr	s15, [r7, #20]
 800238c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002394:	ee17 3a90 	vmov	r3, s15
 8002398:	613b      	str	r3, [r7, #16]
		break;
 800239a:	e04b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 800239c:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80023a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	613b      	str	r3, [r7, #16]
		break;
 80023ba:	e03b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80023bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800246c <Piece_vPlayNotes+0x2b0>
 80023c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 3a90 	vmov	r3, s15
 80023d8:	613b      	str	r3, [r7, #16]
		break;
 80023da:	e02b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80023dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002470 <Piece_vPlayNotes+0x2b4>
 80023e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f4:	ee17 3a90 	vmov	r3, s15
 80023f8:	613b      	str	r3, [r7, #16]
		break;
 80023fa:	e01b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80023fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002400:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002474 <Piece_vPlayNotes+0x2b8>
 8002404:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002408:	edd7 7a05 	vldr	s15, [r7, #20]
 800240c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002414:	ee17 3a90 	vmov	r3, s15
 8002418:	613b      	str	r3, [r7, #16]
		break;
 800241a:	e00b      	b.n	8002434 <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 800241c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002420:	edd7 7a05 	vldr	s15, [r7, #20]
 8002424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242c:	ee17 3a90 	vmov	r3, s15
 8002430:	613b      	str	r3, [r7, #16]
		break;
 8002432:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8002434:	78bb      	ldrb	r3, [r7, #2]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 800243a:	480f      	ldr	r0, [pc, #60]	; (8002478 <Piece_vPlayNotes+0x2bc>)
 800243c:	f00a fd7c 	bl	800cf38 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fd9d 	bl	8001f84 <Piece_vCaptureFragment>
}
 800244a:	bf00      	nop
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	0800df38 	.word	0x0800df38
 8002458:	0800df4c 	.word	0x0800df4c
 800245c:	3f2aaaab 	.word	0x3f2aaaab
 8002460:	42700000 	.word	0x42700000
 8002464:	447a0000 	.word	0x447a0000
 8002468:	42000000 	.word	0x42000000
 800246c:	3d800000 	.word	0x3d800000
 8002470:	3d000000 	.word	0x3d000000
 8002474:	3c800000 	.word	0x3c800000
 8002478:	0800df60 	.word	0x0800df60

0800247c <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	09db      	lsrs	r3, r3, #7
 800248e:	b2db      	uxtb	r3, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	460a      	mov	r2, r1
 80024a6:	71fb      	strb	r3, [r7, #7]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d816      	bhi.n	80024e0 <Piece_usGetPitchTick+0x44>
 80024b2:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <Piece_usGetPitchTick+0x1c>)
 80024b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024cf 	.word	0x080024cf
 80024c0:	080024d5 	.word	0x080024d5
 80024c4:	080024db 	.word	0x080024db
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
		break;
 80024cc:	e00b      	b.n	80024e6 <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 80024ce:	230a      	movs	r3, #10
 80024d0:	73fb      	strb	r3, [r7, #15]
		break;
 80024d2:	e008      	b.n	80024e6 <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 80024d4:	2314      	movs	r3, #20
 80024d6:	73fb      	strb	r3, [r7, #15]
		break;
 80024d8:	e005      	b.n	80024e6 <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 80024da:	231e      	movs	r3, #30
 80024dc:	73fb      	strb	r3, [r7, #15]
		break;
 80024de:	e002      	b.n	80024e6 <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	73fb      	strb	r3, [r7, #15]
		break;
 80024e4:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	4413      	add	r3, r2
 80024ec:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b47      	cmp	r3, #71	; 0x47
 80024f2:	bf28      	it	cs
 80024f4:	2347      	movcs	r3, #71	; 0x47
 80024f6:	73fb      	strb	r3, [r7, #15]

	return pusPitchTickMap[ucPitchTickIndex];
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <Piece_usGetPitchTick+0x70>)
 80024fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20000004 	.word	0x20000004

08002510 <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 8002518:	4877      	ldr	r0, [pc, #476]	; (80026f8 <Piece_Debug_vPrintGoal+0x1e8>)
 800251a:	f00a fd0d 	bl	800cf38 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002524:	3398      	adds	r3, #152	; 0x98
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02e      	beq.n	800258a <Piece_Debug_vPrintGoal+0x7a>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002532:	339a      	adds	r3, #154	; 0x9a
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461c      	mov	r4, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800253e:	339a      	adds	r3, #154	; 0x9a
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	4619      	mov	r1, r3
 8002544:	2000      	movs	r0, #0
 8002546:	f7ff ffa9 	bl	800249c <Piece_usGetPitchTick>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4621      	mov	r1, r4
 8002550:	486a      	ldr	r0, [pc, #424]	; (80026fc <Piece_Debug_vPrintGoal+0x1ec>)
 8002552:	f00a fc6b 	bl	800ce2c <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800255c:	339a      	adds	r3, #154	; 0x9a
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff ff9a 	bl	800249c <Piece_usGetPitchTick>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <Piece_Debug_vPrintGoal+0x1f0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <Piece_Debug_vPrintGoal+0x1f0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	4b61      	ldr	r3, [pc, #388]	; (8002700 <Piece_Debug_vPrintGoal+0x1f0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0852      	lsrs	r2, r2, #1
 800257e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002580:	2100      	movs	r1, #0
 8002582:	485f      	ldr	r0, [pc, #380]	; (8002700 <Piece_Debug_vPrintGoal+0x1f0>)
 8002584:	f005 f8e0 	bl	8007748 <HAL_TIM_PWM_Start_IT>
 8002588:	e003      	b.n	8002592 <Piece_Debug_vPrintGoal+0x82>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 800258a:	2100      	movs	r1, #0
 800258c:	485c      	ldr	r0, [pc, #368]	; (8002700 <Piece_Debug_vPrintGoal+0x1f0>)
 800258e:	f005 fa27 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002598:	339b      	adds	r3, #155	; 0x9b
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d02e      	beq.n	80025fe <Piece_Debug_vPrintGoal+0xee>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025a6:	339d      	adds	r3, #157	; 0x9d
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461c      	mov	r4, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025b2:	339d      	adds	r3, #157	; 0x9d
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7ff ff6f 	bl	800249c <Piece_usGetPitchTick>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4621      	mov	r1, r4
 80025c4:	484f      	ldr	r0, [pc, #316]	; (8002704 <Piece_Debug_vPrintGoal+0x1f4>)
 80025c6:	f00a fc31 	bl	800ce2c <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025d0:	339d      	adds	r3, #157	; 0x9d
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7ff ff60 	bl	800249c <Piece_usGetPitchTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b49      	ldr	r3, [pc, #292]	; (8002708 <Piece_Debug_vPrintGoal+0x1f8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80025e6:	4b48      	ldr	r3, [pc, #288]	; (8002708 <Piece_Debug_vPrintGoal+0x1f8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <Piece_Debug_vPrintGoal+0x1f8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0852      	lsrs	r2, r2, #1
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80025f4:	2100      	movs	r1, #0
 80025f6:	4844      	ldr	r0, [pc, #272]	; (8002708 <Piece_Debug_vPrintGoal+0x1f8>)
 80025f8:	f005 f8a6 	bl	8007748 <HAL_TIM_PWM_Start_IT>
 80025fc:	e003      	b.n	8002606 <Piece_Debug_vPrintGoal+0xf6>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80025fe:	2100      	movs	r1, #0
 8002600:	4841      	ldr	r0, [pc, #260]	; (8002708 <Piece_Debug_vPrintGoal+0x1f8>)
 8002602:	f005 f9ed 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800260c:	339e      	adds	r3, #158	; 0x9e
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02e      	beq.n	8002672 <Piece_Debug_vPrintGoal+0x162>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800261a:	33a0      	adds	r3, #160	; 0xa0
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461c      	mov	r4, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002626:	33a0      	adds	r3, #160	; 0xa0
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	2002      	movs	r0, #2
 800262e:	f7ff ff35 	bl	800249c <Piece_usGetPitchTick>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4621      	mov	r1, r4
 8002638:	4834      	ldr	r0, [pc, #208]	; (800270c <Piece_Debug_vPrintGoal+0x1fc>)
 800263a:	f00a fbf7 	bl	800ce2c <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002644:	33a0      	adds	r3, #160	; 0xa0
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	4619      	mov	r1, r3
 800264a:	2002      	movs	r0, #2
 800264c:	f7ff ff26 	bl	800249c <Piece_usGetPitchTick>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <Piece_Debug_vPrintGoal+0x200>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <Piece_Debug_vPrintGoal+0x200>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <Piece_Debug_vPrintGoal+0x200>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0852      	lsrs	r2, r2, #1
 8002666:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002668:	2100      	movs	r1, #0
 800266a:	4829      	ldr	r0, [pc, #164]	; (8002710 <Piece_Debug_vPrintGoal+0x200>)
 800266c:	f005 f86c 	bl	8007748 <HAL_TIM_PWM_Start_IT>
 8002670:	e003      	b.n	800267a <Piece_Debug_vPrintGoal+0x16a>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002672:	2100      	movs	r1, #0
 8002674:	4826      	ldr	r0, [pc, #152]	; (8002710 <Piece_Debug_vPrintGoal+0x200>)
 8002676:	f005 f9b3 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002680:	33a1      	adds	r3, #161	; 0xa1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02e      	beq.n	80026e6 <Piece_Debug_vPrintGoal+0x1d6>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800268e:	33a3      	adds	r3, #163	; 0xa3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461c      	mov	r4, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800269a:	33a3      	adds	r3, #163	; 0xa3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	2003      	movs	r0, #3
 80026a2:	f7ff fefb 	bl	800249c <Piece_usGetPitchTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	4621      	mov	r1, r4
 80026ac:	4819      	ldr	r0, [pc, #100]	; (8002714 <Piece_Debug_vPrintGoal+0x204>)
 80026ae:	f00a fbbd 	bl	800ce2c <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80026b8:	33a3      	adds	r3, #163	; 0xa3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	2003      	movs	r0, #3
 80026c0:	f7ff feec 	bl	800249c <Piece_usGetPitchTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <Piece_Debug_vPrintGoal+0x208>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <Piece_Debug_vPrintGoal+0x208>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <Piece_Debug_vPrintGoal+0x208>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0852      	lsrs	r2, r2, #1
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80026dc:	2100      	movs	r1, #0
 80026de:	480e      	ldr	r0, [pc, #56]	; (8002718 <Piece_Debug_vPrintGoal+0x208>)
 80026e0:	f005 f832 	bl	8007748 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80026e4:	e003      	b.n	80026ee <Piece_Debug_vPrintGoal+0x1de>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80026e6:	2100      	movs	r1, #0
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <Piece_Debug_vPrintGoal+0x208>)
 80026ea:	f005 f979 	bl	80079e0 <HAL_TIM_PWM_Stop_IT>
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd90      	pop	{r4, r7, pc}
 80026f6:	bf00      	nop
 80026f8:	0800df78 	.word	0x0800df78
 80026fc:	0800df80 	.word	0x0800df80
 8002700:	2000c9d8 	.word	0x2000c9d8
 8002704:	0800df90 	.word	0x0800df90
 8002708:	200046a4 	.word	0x200046a4
 800270c:	0800dfa0 	.word	0x0800dfa0
 8002710:	2000db94 	.word	0x2000db94
 8002714:	0800dfb0 	.word	0x0800dfb0
 8002718:	20004740 	.word	0x20004740

0800271c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_MspInit+0x4c>)
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_MspInit+0x4c>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6613      	str	r3, [r2, #96]	; 0x60
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_MspInit+0x4c>)
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_MspInit+0x4c>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_MspInit+0x4c>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6593      	str	r3, [r2, #88]	; 0x58
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_MspInit+0x4c>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	210f      	movs	r1, #15
 8002756:	f06f 0001 	mvn.w	r0, #1
 800275a:	f002 f8c9 	bl	80048f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_ADC_MspInit+0x84>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d12b      	bne.n	80027e6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_ADC_MspInit+0x88>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	4a18      	ldr	r2, [pc, #96]	; (80027f4 <HAL_ADC_MspInit+0x88>)
 8002794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <HAL_ADC_MspInit+0x88>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_ADC_MspInit+0x88>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <HAL_ADC_MspInit+0x88>)
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_ADC_MspInit+0x88>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027be:	230f      	movs	r3, #15
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027c2:	230b      	movs	r3, #11
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4809      	ldr	r0, [pc, #36]	; (80027f8 <HAL_ADC_MspInit+0x8c>)
 80027d2:	f002 faef 	bl	8004db4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2105      	movs	r1, #5
 80027da:	2012      	movs	r0, #18
 80027dc:	f002 f888 	bl	80048f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80027e0:	2012      	movs	r0, #18
 80027e2:	f002 f8a1 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	50040000 	.word	0x50040000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	48000800 	.word	0x48000800

080027fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_I2C_MspInit+0x7c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d128      	bne.n	8002870 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_I2C_MspInit+0x80>)
 8002820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_I2C_MspInit+0x80>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_I2C_MspInit+0x80>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002836:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283c:	2312      	movs	r3, #18
 800283e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002840:	2301      	movs	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002848:	2304      	movs	r3, #4
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	480b      	ldr	r0, [pc, #44]	; (8002880 <HAL_I2C_MspInit+0x84>)
 8002854:	f002 faae 	bl	8004db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_I2C_MspInit+0x80>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_I2C_MspInit+0x80>)
 800285e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002862:	6593      	str	r3, [r2, #88]	; 0x58
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_I2C_MspInit+0x80>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40005400 	.word	0x40005400
 800287c:	40021000 	.word	0x40021000
 8002880:	48000400 	.word	0x48000400

08002884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_SPI_MspInit+0xb4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d144      	bne.n	8002930 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028b0:	6613      	str	r3, [r2, #96]	; 0x60
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	4b1f      	ldr	r3, [pc, #124]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	4b19      	ldr	r3, [pc, #100]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_SPI_MspInit+0xb8>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028ee:	2320      	movs	r3, #32
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028fe:	2305      	movs	r3, #5
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290c:	f002 fa52 	bl	8004db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002910:	2330      	movs	r3, #48	; 0x30
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002920:	2305      	movs	r3, #5
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_SPI_MspInit+0xbc>)
 800292c:	f002 fa42 	bl	8004db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002930:	bf00      	nop
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40013000 	.word	0x40013000
 800293c:	40021000 	.word	0x40021000
 8002940:	48000400 	.word	0x48000400

08002944 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <HAL_TIM_PWM_MspInit+0x210>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10c      	bne.n	8002970 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002956:	4b80      	ldr	r3, [pc, #512]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	4a7f      	ldr	r2, [pc, #508]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 800295c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002960:	6613      	str	r3, [r2, #96]	; 0x60
 8002962:	4b7d      	ldr	r3, [pc, #500]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800296e:	e0ed      	b.n	8002b4c <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a79      	ldr	r2, [pc, #484]	; (8002b5c <HAL_TIM_PWM_MspInit+0x218>)
 8002976:	4293      	cmp	r3, r2
 8002978:	f040 809a 	bne.w	8002ab0 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800297c:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	4a75      	ldr	r2, [pc, #468]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	6593      	str	r3, [r2, #88]	; 0x58
 8002988:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8002994:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 8002996:	4a73      	ldr	r2, [pc, #460]	; (8002b64 <HAL_TIM_PWM_MspInit+0x220>)
 8002998:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 800299a:	4b71      	ldr	r3, [pc, #452]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 800299c:	2205      	movs	r2, #5
 800299e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029a2:	2210      	movs	r2, #16
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b6e      	ldr	r3, [pc, #440]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029b2:	4b6b      	ldr	r3, [pc, #428]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029ba:	4b69      	ldr	r3, [pc, #420]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80029c8:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80029ce:	4864      	ldr	r0, [pc, #400]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029d0:	f001 ffb8 	bl	8004944 <HAL_DMA_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 80029da:	f7ff f9af 	bl	8001d3c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a5f      	ldr	r2, [pc, #380]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
 80029e4:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a5c      	ldr	r2, [pc, #368]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
 80029f0:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <HAL_TIM_PWM_MspInit+0x21c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 80029f8:	4a5c      	ldr	r2, [pc, #368]	; (8002b6c <HAL_TIM_PWM_MspInit+0x228>)
 80029fa:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 80029fc:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 80029fe:	2205      	movs	r2, #5
 8002a00:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a02:	4b59      	ldr	r3, [pc, #356]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a04:	2210      	movs	r2, #16
 8002a06:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a08:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002a0e:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a14:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a1c:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a22:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002a2a:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8002a30:	484d      	ldr	r0, [pc, #308]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a32:	f001 ff87 	bl	8004944 <HAL_DMA_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 8002a3c:	f7ff f97e 	bl	8001d3c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a49      	ldr	r2, [pc, #292]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a46:	4a48      	ldr	r2, [pc, #288]	; (8002b68 <HAL_TIM_PWM_MspInit+0x224>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8002a4c:	4b48      	ldr	r3, [pc, #288]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a4e:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_TIM_PWM_MspInit+0x230>)
 8002a50:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a54:	2205      	movs	r2, #5
 8002a56:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a58:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5e:	4b44      	ldr	r3, [pc, #272]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002a64:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a70:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a78:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002a86:	483a      	ldr	r0, [pc, #232]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a88:	f001 ff5c 	bl	8004944 <HAL_DMA_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 8002a92:	f7ff f953 	bl	8001d3c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a35      	ldr	r2, [pc, #212]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9c:	4a34      	ldr	r2, [pc, #208]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002aa6:	621a      	str	r2, [r3, #32]
 8002aa8:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_TIM_PWM_MspInit+0x22c>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002aae:	e04d      	b.n	8002b4c <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_TIM_PWM_MspInit+0x234>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d137      	bne.n	8002b2a <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	4a26      	ldr	r2, [pc, #152]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ac6:	4b24      	ldr	r3, [pc, #144]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_TIM_PWM_MspInit+0x23c>)
 8002ad6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002ada:	2207      	movs	r2, #7
 8002adc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae4:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002afe:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8002b0c:	481b      	ldr	r0, [pc, #108]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002b0e:	f001 ff19 	bl	8004944 <HAL_DMA_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 8002b18:	f7ff f910 	bl	8001d3c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
 8002b22:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <HAL_TIM_PWM_MspInit+0x238>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002b28:	e010      	b.n	8002b4c <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_TIM_PWM_MspInit+0x240>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10b      	bne.n	8002b4c <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_TIM_PWM_MspInit+0x214>)
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	200048ec 	.word	0x200048ec
 8002b64:	4002006c 	.word	0x4002006c
 8002b68:	2000478c 	.word	0x2000478c
 8002b6c:	4002001c 	.word	0x4002001c
 8002b70:	2000ca28 	.word	0x2000ca28
 8002b74:	40020030 	.word	0x40020030
 8002b78:	40013400 	.word	0x40013400
 8002b7c:	20003580 	.word	0x20003580
 8002b80:	40020480 	.word	0x40020480
 8002b84:	40014000 	.word	0x40014000

08002b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <HAL_TIM_Base_MspInit+0x5c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10c      	bne.n	8002bb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_TIM_Base_MspInit+0x60>)
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_TIM_Base_MspInit+0x60>)
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_TIM_Base_MspInit+0x60>)
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002bb2:	e010      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <HAL_TIM_Base_MspInit+0x64>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_TIM_Base_MspInit+0x60>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_TIM_Base_MspInit+0x60>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_TIM_Base_MspInit+0x60>)
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40014400 	.word	0x40014400
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40014800 	.word	0x40014800

08002bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08e      	sub	sp, #56	; 0x38
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a76      	ldr	r2, [pc, #472]	; (8002de8 <HAL_TIM_MspPostInit+0x1f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d11e      	bne.n	8002c50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c16:	4a75      	ldr	r2, [pc, #468]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1e:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c44:	4619      	mov	r1, r3
 8002c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c4a:	f002 f8b3 	bl	8004db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002c4e:	e0c7      	b.n	8002de0 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_TIM_MspPostInit+0x200>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d138      	bne.n	8002ccc <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	4b64      	ldr	r3, [pc, #400]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a63      	ldr	r2, [pc, #396]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2300      	movs	r3, #0
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4853      	ldr	r0, [pc, #332]	; (8002df4 <HAL_TIM_MspPostInit+0x204>)
 8002ca6:	f002 f885 	bl	8004db4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002caa:	2340      	movs	r3, #64	; 0x40
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	484c      	ldr	r0, [pc, #304]	; (8002df8 <HAL_TIM_MspPostInit+0x208>)
 8002cc6:	f002 f875 	bl	8004db4 <HAL_GPIO_Init>
}
 8002cca:	e089      	b.n	8002de0 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_TIM_MspPostInit+0x20c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d11c      	bne.n	8002d10 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a44      	ldr	r2, [pc, #272]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ce2:	4b42      	ldr	r3, [pc, #264]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d06:	4619      	mov	r1, r3
 8002d08:	483b      	ldr	r0, [pc, #236]	; (8002df8 <HAL_TIM_MspPostInit+0x208>)
 8002d0a:	f002 f853 	bl	8004db4 <HAL_GPIO_Init>
}
 8002d0e:	e067      	b.n	8002de0 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3a      	ldr	r2, [pc, #232]	; (8002e00 <HAL_TIM_MspPostInit+0x210>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d11d      	bne.n	8002d56 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	4a33      	ldr	r2, [pc, #204]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002d44:	230e      	movs	r3, #14
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4829      	ldr	r0, [pc, #164]	; (8002df4 <HAL_TIM_MspPostInit+0x204>)
 8002d50:	f002 f830 	bl	8004db4 <HAL_GPIO_Init>
}
 8002d54:	e044      	b.n	8002de0 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2a      	ldr	r2, [pc, #168]	; (8002e04 <HAL_TIM_MspPostInit+0x214>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d11d      	bne.n	8002d9c <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d60:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d78:	2340      	movs	r3, #64	; 0x40
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002d88:	230e      	movs	r3, #14
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d96:	f002 f80d 	bl	8004db4 <HAL_GPIO_Init>
}
 8002d9a:	e021      	b.n	8002de0 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_TIM_MspPostInit+0x218>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d11c      	bne.n	8002de0 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_TIM_MspPostInit+0x1fc>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002dce:	230e      	movs	r3, #14
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ddc:	f001 ffea 	bl	8004db4 <HAL_GPIO_Init>
}
 8002de0:	bf00      	nop
 8002de2:	3738      	adds	r7, #56	; 0x38
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40000400 	.word	0x40000400
 8002df4:	48000400 	.word	0x48000400
 8002df8:	48000800 	.word	0x48000800
 8002dfc:	40013400 	.word	0x40013400
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40014400 	.word	0x40014400
 8002e08:	40014800 	.word	0x40014800

08002e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <HAL_UART_MspInit+0x7c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d128      	bne.n	8002e80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_UART_MspInit+0x80>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_UART_MspInit+0x80>)
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_UART_MspInit+0x80>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <HAL_UART_MspInit+0x80>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_UART_MspInit+0x80>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_UART_MspInit+0x80>)
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e5e:	230c      	movs	r3, #12
 8002e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e6e:	2307      	movs	r3, #7
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e7c:	f001 ff9a 	bl	8004db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	; 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40004400 	.word	0x40004400
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08c      	sub	sp, #48	; 0x30
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	2036      	movs	r0, #54	; 0x36
 8002ea6:	f001 fd23 	bl	80048f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002eaa:	2036      	movs	r0, #54	; 0x36
 8002eac:	f001 fd3c 	bl	8004928 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_InitTick+0x9c>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_InitTick+0x9c>)
 8002eb6:	f043 0310 	orr.w	r3, r3, #16
 8002eba:	6593      	str	r3, [r2, #88]	; 0x58
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_InitTick+0x9c>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ec8:	f107 0210 	add.w	r2, r7, #16
 8002ecc:	f107 0314 	add.w	r3, r7, #20
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 f846 	bl	8005f64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f003 f818 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8002edc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee0:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <HAL_InitTick+0xa0>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_InitTick+0xa4>)
 8002eee:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_InitTick+0xa8>)
 8002ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_InitTick+0xa4>)
 8002ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ef8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002efa:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_InitTick+0xa4>)
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_InitTick+0xa4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_InitTick+0xa4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f0c:	4809      	ldr	r0, [pc, #36]	; (8002f34 <HAL_InitTick+0xa4>)
 8002f0e:	f004 fafb 	bl	8007508 <HAL_TIM_Base_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f18:	4806      	ldr	r0, [pc, #24]	; (8002f34 <HAL_InitTick+0xa4>)
 8002f1a:	f004 fb4d 	bl	80075b8 <HAL_TIM_Base_Start_IT>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	e000      	b.n	8002f24 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3730      	adds	r7, #48	; 0x30
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	431bde83 	.word	0x431bde83
 8002f34:	2000dbe0 	.word	0x2000dbe0
 8002f38:	40001000 	.word	0x40001000

08002f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <NMI_Handler+0x4>

08002f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f46:	e7fe      	b.n	8002f46 <HardFault_Handler+0x4>

08002f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <MemManage_Handler+0x4>

08002f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f52:	e7fe      	b.n	8002f52 <BusFault_Handler+0x4>

08002f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <UsageFault_Handler+0x4>

08002f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <DMA1_Channel2_IRQHandler+0x10>)
 8002f6e:	f001 fe42 	bl	8004bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	2000478c 	.word	0x2000478c

08002f7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <DMA1_Channel3_IRQHandler+0x10>)
 8002f82:	f001 fe38 	bl	8004bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000ca28 	.word	0x2000ca28

08002f90 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <DMA1_Channel6_IRQHandler+0x10>)
 8002f96:	f001 fe2e 	bl	8004bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200048ec 	.word	0x200048ec

08002fa4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <ADC1_2_IRQHandler+0x10>)
 8002faa:	f000 fcb9 	bl	8003920 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20004820 	.word	0x20004820

08002fb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <TIM6_DAC_IRQHandler+0x38>)
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <TIM6_DAC_IRQHandler+0x38>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <TIM6_DAC_IRQHandler+0x38>)
 8002fce:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <TIM6_DAC_IRQHandler+0x3c>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <TIM6_DAC_IRQHandler+0x3c>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <TIM6_DAC_IRQHandler+0x3c>)
 8002fe2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fe4:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <TIM6_DAC_IRQHandler+0x40>)
 8002fe6:	f005 f8df 	bl	80081a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000357a 	.word	0x2000357a
 8002ff4:	20003578 	.word	0x20003578
 8002ff8:	2000dbe0 	.word	0x2000dbe0

08002ffc <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <DMA2_Channel7_IRQHandler+0x10>)
 8003002:	f001 fdf8 	bl	8004bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20003580 	.word	0x20003580

08003010 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e00a      	b.n	8003038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003022:	f3af 8000 	nop.w
 8003026:	4601      	mov	r1, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	b2ca      	uxtb	r2, r1
 8003030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbf0      	blt.n	8003022 <_read+0x12>
	}

return len;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e009      	b.n	8003070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	60ba      	str	r2, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7fd ffe1 	bl	800102c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	dbf1      	blt.n	800305c <_write+0x12>
	}
	return len;
 8003078:	687b      	ldr	r3, [r7, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_close>:

int _close(int file)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
	return -1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030aa:	605a      	str	r2, [r3, #4]
	return 0;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_isatty>:

int _isatty(int file)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	return 1;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <_sbrk+0x5c>)
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <_sbrk+0x60>)
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <_sbrk+0x64>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <_sbrk+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800311c:	f009 fe46 	bl	800cdac <__errno>
 8003120:	4603      	mov	r3, r0
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800312a:	e009      	b.n	8003140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <_sbrk+0x64>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <_sbrk+0x64>)
 800313c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20018000 	.word	0x20018000
 800314c:	00000400 	.word	0x00000400
 8003150:	20000140 	.word	0x20000140
 8003154:	2000fcf8 	.word	0x2000fcf8

08003158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800315c:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <SystemInit+0x5c>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <SystemInit+0x5c>)
 8003164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <SystemInit+0x60>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <SystemInit+0x60>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <SystemInit+0x60>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <SystemInit+0x60>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <SystemInit+0x60>)
 8003184:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003188:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800318c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <SystemInit+0x60>)
 8003190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003194:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <SystemInit+0x60>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <SystemInit+0x60>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SystemInit+0x60>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000ed00 	.word	0xe000ed00
 80031b8:	40021000 	.word	0x40021000

080031bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031c0:	f7ff ffca 	bl	8003158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031c6:	e003      	b.n	80031d0 <LoopCopyDataInit>

080031c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031ce:	3104      	adds	r1, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031d0:	480a      	ldr	r0, [pc, #40]	; (80031fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031d8:	d3f6      	bcc.n	80031c8 <CopyDataInit>
	ldr	r2, =_sbss
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031dc:	e002      	b.n	80031e4 <LoopFillZerobss>

080031de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031e0:	f842 3b04 	str.w	r3, [r2], #4

080031e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <LoopForever+0x16>)
	cmp	r2, r3
 80031e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031e8:	d3f9      	bcc.n	80031de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031ea:	f009 fde5 	bl	800cdb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ee:	f7fd ff2f 	bl	8001050 <main>

080031f2 <LoopForever>:

LoopForever:
    b LoopForever
 80031f2:	e7fe      	b.n	80031f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80031f8:	0800e150 	.word	0x0800e150
	ldr	r0, =_sdata
 80031fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003200:	2000011c 	.word	0x2000011c
	ldr	r2, =_sbss
 8003204:	2000011c 	.word	0x2000011c
	ldr	r3, = _ebss
 8003208:	2000fcf4 	.word	0x2000fcf4

0800320c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800320c:	e7fe      	b.n	800320c <ADC3_IRQHandler>
	...

08003210 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_Init+0x3c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0b      	ldr	r2, [pc, #44]	; (800324c <HAL_Init+0x3c>)
 8003220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003224:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003226:	2003      	movs	r0, #3
 8003228:	f001 fb57 	bl	80048da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800322c:	2000      	movs	r0, #0
 800322e:	f7ff fe2f 	bl	8002e90 <HAL_InitTick>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	71fb      	strb	r3, [r7, #7]
 800323c:	e001      	b.n	8003242 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800323e:	f7ff fa6d 	bl	800271c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003242:	79fb      	ldrb	r3, [r7, #7]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_IncTick+0x20>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_IncTick+0x24>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4413      	add	r3, r2
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_IncTick+0x24>)
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	2000009c 	.word	0x2000009c
 8003274:	2000dc2c 	.word	0x2000dc2c

08003278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return uwTick;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_GetTick+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000dc2c 	.word	0x2000dc2c

08003290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff ffee 	bl	8003278 <HAL_GetTick>
 800329c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a8:	d005      	beq.n	80032b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_Delay+0x44>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032b6:	bf00      	nop
 80032b8:	f7ff ffde 	bl	8003278 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d8f7      	bhi.n	80032b8 <HAL_Delay+0x28>
  {
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000009c 	.word	0x2000009c

080032d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3360      	adds	r3, #96	; 0x60
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <LL_ADC_SetOffset+0x44>)
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	4313      	orrs	r3, r2
 8003370:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003378:	bf00      	nop
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	03fff000 	.word	0x03fff000

08003388 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3360      	adds	r3, #96	; 0x60
 8003396:	461a      	mov	r2, r3
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3360      	adds	r3, #96	; 0x60
 80033c4:	461a      	mov	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	431a      	orrs	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3330      	adds	r3, #48	; 0x30
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	4413      	add	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	211f      	movs	r1, #31
 800343c:	fa01 f303 	lsl.w	r3, r1, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0e9b      	lsrs	r3, r3, #26
 8003448:	f003 011f 	and.w	r1, r3, #31
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	431a      	orrs	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800348e:	b480      	push	{r7}
 8003490:	b087      	sub	sp, #28
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3314      	adds	r3, #20
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	0e5b      	lsrs	r3, r3, #25
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	0d1b      	lsrs	r3, r3, #20
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2107      	movs	r1, #7
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	401a      	ands	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0d1b      	lsrs	r3, r3, #20
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	431a      	orrs	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0318 	and.w	r3, r3, #24
 8003506:	4908      	ldr	r1, [pc, #32]	; (8003528 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003508:	40d9      	lsrs	r1, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	400b      	ands	r3, r1
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	0007ffff 	.word	0x0007ffff

0800352c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 031f 	and.w	r3, r3, #31
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6093      	str	r3, [r2, #8]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359c:	d101      	bne.n	80035a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ec:	d101      	bne.n	80035f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <LL_ADC_IsEnabled+0x18>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <LL_ADC_IsEnabled+0x1a>
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d101      	bne.n	800363e <LL_ADC_REG_IsConversionOngoing+0x18>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d101      	bne.n	8003664 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e136      	b.n	80038fc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	2b00      	cmp	r3, #0
 800369a:	d109      	bne.n	80036b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff f865 	bl	800276c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff67 	bl	8003588 <LL_ADC_IsDeepPowerDownEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff4d 	bl	8003564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff ff82 	bl	80035d8 <LL_ADC_IsInternalRegulatorEnabled>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d115      	bne.n	8003706 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ff66 	bl	80035b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036e4:	4b87      	ldr	r3, [pc, #540]	; (8003904 <HAL_ADC_Init+0x290>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	099b      	lsrs	r3, r3, #6
 80036ea:	4a87      	ldr	r2, [pc, #540]	; (8003908 <HAL_ADC_Init+0x294>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	099b      	lsrs	r3, r3, #6
 80036f2:	3301      	adds	r3, #1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036f8:	e002      	b.n	8003700 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f9      	bne.n	80036fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff64 	bl	80035d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff75 	bl	8003626 <LL_ADC_REG_IsConversionOngoing>
 800373c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80cf 	bne.w	80038ea <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80cb 	bne.w	80038ea <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800375c:	f043 0202 	orr.w	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff49 	bl	8003600 <LL_ADC_IsEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d115      	bne.n	80037a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003774:	4865      	ldr	r0, [pc, #404]	; (800390c <HAL_ADC_Init+0x298>)
 8003776:	f7ff ff43 	bl	8003600 <LL_ADC_IsEnabled>
 800377a:	4604      	mov	r4, r0
 800377c:	4864      	ldr	r0, [pc, #400]	; (8003910 <HAL_ADC_Init+0x29c>)
 800377e:	f7ff ff3f 	bl	8003600 <LL_ADC_IsEnabled>
 8003782:	4603      	mov	r3, r0
 8003784:	431c      	orrs	r4, r3
 8003786:	4863      	ldr	r0, [pc, #396]	; (8003914 <HAL_ADC_Init+0x2a0>)
 8003788:	f7ff ff3a 	bl	8003600 <LL_ADC_IsEnabled>
 800378c:	4603      	mov	r3, r0
 800378e:	4323      	orrs	r3, r4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4619      	mov	r1, r3
 800379a:	485f      	ldr	r0, [pc, #380]	; (8003918 <HAL_ADC_Init+0x2a4>)
 800379c:	f7ff fd9c 	bl	80032d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7e5b      	ldrb	r3, [r3, #25]
 80037a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80037b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80037b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d106      	bne.n	80037dc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	3b01      	subs	r3, #1
 80037d4:	045b      	lsls	r3, r3, #17
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	4b47      	ldr	r3, [pc, #284]	; (800391c <HAL_ADC_Init+0x2a8>)
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	69b9      	ldr	r1, [r7, #24]
 8003808:	430b      	orrs	r3, r1
 800380a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff08 	bl	8003626 <LL_ADC_REG_IsConversionOngoing>
 8003816:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff15 	bl	800364c <LL_ADC_INJ_IsConversionOngoing>
 8003822:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d13d      	bne.n	80038a6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d13a      	bne.n	80038a6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003834:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800383c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384c:	f023 0302 	bic.w	r3, r3, #2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	430b      	orrs	r3, r1
 8003858:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003860:	2b01      	cmp	r3, #1
 8003862:	d118      	bne.n	8003896 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800386e:	f023 0304 	bic.w	r3, r3, #4
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003886:	430a      	orrs	r2, r1
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	611a      	str	r2, [r3, #16]
 8003894:	e007      	b.n	80038a6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10c      	bne.n	80038c8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f023 010f 	bic.w	r1, r3, #15
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
 80038c6:	e007      	b.n	80038d8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 020f 	bic.w	r2, r2, #15
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	f023 0303 	bic.w	r3, r3, #3
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
 80038e8:	e007      	b.n	80038fa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3724      	adds	r7, #36	; 0x24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	20000094 	.word	0x20000094
 8003908:	053e2d63 	.word	0x053e2d63
 800390c:	50040000 	.word	0x50040000
 8003910:	50040100 	.word	0x50040100
 8003914:	50040200 	.word	0x50040200
 8003918:	50040300 	.word	0x50040300
 800391c:	fff0c007 	.word	0xfff0c007

08003920 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800393c:	4882      	ldr	r0, [pc, #520]	; (8003b48 <HAL_ADC_IRQHandler+0x228>)
 800393e:	f7ff fdf5 	bl	800352c <LL_ADC_GetMultimode>
 8003942:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <HAL_ADC_IRQHandler+0x5e>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fe4b 	bl	800460c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2202      	movs	r2, #2
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <HAL_ADC_IRQHandler+0x72>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8083 	beq.w	8003aa4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d07d      	beq.n	8003aa4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fd10 	bl	80033ea <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d062      	beq.n	8003a96 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a5d      	ldr	r2, [pc, #372]	; (8003b4c <HAL_ADC_IRQHandler+0x22c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d002      	beq.n	80039e0 <HAL_ADC_IRQHandler+0xc0>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	e000      	b.n	80039e2 <HAL_ADC_IRQHandler+0xc2>
 80039e0:	4b5b      	ldr	r3, [pc, #364]	; (8003b50 <HAL_ADC_IRQHandler+0x230>)
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6812      	ldr	r2, [r2, #0]
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d008      	beq.n	80039fc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d002      	beq.n	80039fc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d104      	bne.n	8003a06 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	e00c      	b.n	8003a20 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a50      	ldr	r2, [pc, #320]	; (8003b4c <HAL_ADC_IRQHandler+0x22c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d002      	beq.n	8003a16 <HAL_ADC_IRQHandler+0xf6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	e000      	b.n	8003a18 <HAL_ADC_IRQHandler+0xf8>
 8003a16:	4b4e      	ldr	r3, [pc, #312]	; (8003b50 <HAL_ADC_IRQHandler+0x230>)
 8003a18:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d135      	bne.n	8003a96 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d12e      	bne.n	8003a96 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fdf2 	bl	8003626 <LL_ADC_REG_IsConversionOngoing>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11a      	bne.n	8003a7e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 020c 	bic.w	r2, r2, #12
 8003a56:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d112      	bne.n	8003a96 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54
 8003a7c:	e00b      	b.n	8003a96 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f95c 	bl	8003d54 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADC_IRQHandler+0x198>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 809f 	beq.w	8003c02 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8099 	beq.w	8003c02 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d105      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fcbb 	bl	8003468 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003af2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fc76 	bl	80033ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8003afe:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_ADC_IRQHandler+0x22c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d002      	beq.n	8003b10 <HAL_ADC_IRQHandler+0x1f0>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e000      	b.n	8003b12 <HAL_ADC_IRQHandler+0x1f2>
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_ADC_IRQHandler+0x230>)
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d008      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d002      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	d104      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	623b      	str	r3, [r7, #32]
 8003b34:	e013      	b.n	8003b5e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <HAL_ADC_IRQHandler+0x22c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x234>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	e007      	b.n	8003b56 <HAL_ADC_IRQHandler+0x236>
 8003b46:	bf00      	nop
 8003b48:	50040300 	.word	0x50040300
 8003b4c:	50040100 	.word	0x50040100
 8003b50:	50040000 	.word	0x50040000
 8003b54:	4b7d      	ldr	r3, [pc, #500]	; (8003d4c <HAL_ADC_IRQHandler+0x42c>)
 8003b56:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d047      	beq.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_ADC_IRQHandler+0x25e>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03f      	beq.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d13a      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d133      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12e      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fd56 	bl	800364c <LL_ADC_INJ_IsConversionOngoing>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d11a      	bne.n	8003bdc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d112      	bne.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
 8003bda:	e00b      	b.n	8003bf4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0210 	orr.w	r2, r3, #16
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fce1 	bl	80045bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2260      	movs	r2, #96	; 0x60
 8003c00:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d011      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x310>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f8a0 	bl	8003d68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x340>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fcc7 	bl	80045e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x370>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fcb9 	bl	80045f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d036      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x3e8>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d031      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d102      	bne.n	8003cb2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003cac:	2301      	movs	r3, #1
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	e014      	b.n	8003cdc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cb8:	4825      	ldr	r0, [pc, #148]	; (8003d50 <HAL_ADC_IRQHandler+0x430>)
 8003cba:	f7ff fc45 	bl	8003548 <LL_ADC_GetMultiDMATransfer>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	e008      	b.n	8003cdc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10e      	bne.n	8003d00 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f043 0202 	orr.w	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f83e 	bl	8003d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d018      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x424>
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2c:	f043 0208 	orr.w	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fc46 	bl	80045d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d44:	bf00      	nop
 8003d46:	3728      	adds	r7, #40	; 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	50040000 	.word	0x50040000
 8003d50:	50040300 	.word	0x50040300

08003d54 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b0b6      	sub	sp, #216	; 0xd8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x22>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e3c7      	b.n	8004542 <HAL_ADC_ConfigChannel+0x7b2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fc31 	bl	8003626 <LL_ADC_REG_IsConversionOngoing>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 83a8 	bne.w	800451c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d824      	bhi.n	8003e1e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	3b02      	subs	r3, #2
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d81b      	bhi.n	8003e16 <HAL_ADC_ConfigChannel+0x86>
 8003dde:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_ADC_ConfigChannel+0x54>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003dfd 	.word	0x08003dfd
 8003dec:	08003e05 	.word	0x08003e05
 8003df0:	08003e0d 	.word	0x08003e0d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	220c      	movs	r2, #12
 8003df8:	605a      	str	r2, [r3, #4]
          break;
 8003dfa:	e011      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2212      	movs	r2, #18
 8003e00:	605a      	str	r2, [r3, #4]
          break;
 8003e02:	e00d      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2218      	movs	r2, #24
 8003e08:	605a      	str	r2, [r3, #4]
          break;
 8003e0a:	e009      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e12:	605a      	str	r2, [r3, #4]
          break;
 8003e14:	e004      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2206      	movs	r2, #6
 8003e1a:	605a      	str	r2, [r3, #4]
          break;
 8003e1c:	e000      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003e1e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6859      	ldr	r1, [r3, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f7ff faef 	bl	8003410 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fbf5 	bl	8003626 <LL_ADC_REG_IsConversionOngoing>
 8003e3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fc01 	bl	800364c <LL_ADC_INJ_IsConversionOngoing>
 8003e4a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f040 81a6 	bne.w	80041a4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 81a1 	bne.w	80041a4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7ff fb0d 	bl	800348e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	08db      	lsrs	r3, r3, #3
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00a      	beq.n	8003eac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6919      	ldr	r1, [r3, #16]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ea6:	f7ff fa4b 	bl	8003340 <LL_ADC_SetOffset>
 8003eaa:	e17b      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fa68 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x148>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fa5d 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	f003 021f 	and.w	r2, r3, #31
 8003ed6:	e01e      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x186>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fa52 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003efa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003f06:	2320      	movs	r3, #32
 8003f08:	e004      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d105      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x19e>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	0e9b      	lsrs	r3, r3, #26
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	e018      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x1d0>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f3a:	fa93 f3a3 	rbit	r3, r3
 8003f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003f52:	2320      	movs	r3, #32
 8003f54:	e004      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa21 	bl	80033b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fa05 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x20e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff f9fa 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8003f94:	4603      	mov	r3, r0
 8003f96:	0e9b      	lsrs	r3, r3, #26
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	e01e      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x24c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff f9ef 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003fc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	e004      	b.n	8003fda <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd4:	fab3 f383 	clz	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x264>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	0e9b      	lsrs	r3, r3, #26
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	e018      	b.n	8004026 <HAL_ADC_ConfigChannel+0x296>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800400c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004018:	2320      	movs	r3, #32
 800401a:	e004      	b.n	8004026 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800401c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004026:	429a      	cmp	r2, r3
 8004028:	d106      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2200      	movs	r2, #0
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff f9be 	bl	80033b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2102      	movs	r1, #2
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff f9a2 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x2d4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2102      	movs	r1, #2
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff f997 	bl	8003388 <LL_ADC_GetOffsetChannel>
 800405a:	4603      	mov	r3, r0
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	f003 021f 	and.w	r2, r3, #31
 8004062:	e01e      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x312>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2102      	movs	r1, #2
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f98c 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004086:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800408a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e004      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x32a>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	0e9b      	lsrs	r3, r3, #26
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	e016      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x358>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80040da:	2320      	movs	r3, #32
 80040dc:	e004      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80040de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d106      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f95d 	bl	80033b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2103      	movs	r1, #3
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff f941 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8004106:	4603      	mov	r3, r0
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x396>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2103      	movs	r1, #3
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff f936 	bl	8003388 <LL_ADC_GetOffsetChannel>
 800411c:	4603      	mov	r3, r0
 800411e:	0e9b      	lsrs	r3, r3, #26
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	e017      	b.n	8004156 <HAL_ADC_ConfigChannel+0x3c6>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2103      	movs	r1, #3
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff f92b 	bl	8003388 <LL_ADC_GetOffsetChannel>
 8004132:	4603      	mov	r3, r0
 8004134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800413e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004140:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800414c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_ADC_ConfigChannel+0x3de>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	e011      	b.n	8004192 <HAL_ADC_ConfigChannel+0x402>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004176:	fa93 f3a3 	rbit	r3, r3
 800417a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800417c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800417e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004186:	2320      	movs	r3, #32
 8004188:	e003      	b.n	8004192 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	2103      	movs	r1, #3
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff f908 	bl	80033b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fa29 	bl	8003600 <LL_ADC_IsEnabled>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 813f 	bne.w	8004434 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f7ff f98e 	bl	80034e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a8e      	ldr	r2, [pc, #568]	; (8004408 <HAL_ADC_ConfigChannel+0x678>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	f040 8130 	bne.w	8004434 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x46c>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	bf94      	ite	ls
 80041f4:	2301      	movls	r3, #1
 80041f6:	2300      	movhi	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e019      	b.n	8004230 <HAL_ADC_ConfigChannel+0x4a0>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800420a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004214:	2320      	movs	r3, #32
 8004216:	e003      	b.n	8004220 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421a:	fab3 f383 	clz	r3, r3
 800421e:	b2db      	uxtb	r3, r3
 8004220:	3301      	adds	r3, #1
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2b09      	cmp	r3, #9
 8004228:	bf94      	ite	ls
 800422a:	2301      	movls	r3, #1
 800422c:	2300      	movhi	r3, #0
 800422e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004230:	2b00      	cmp	r3, #0
 8004232:	d079      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d107      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x4c0>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	069b      	lsls	r3, r3, #26
 800424a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800424e:	e015      	b.n	800427c <HAL_ADC_ConfigChannel+0x4ec>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004258:	fa93 f3a3 	rbit	r3, r3
 800425c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004268:	2320      	movs	r3, #32
 800426a:	e003      	b.n	8004274 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800426c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3301      	adds	r3, #1
 8004276:	069b      	lsls	r3, r3, #26
 8004278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_ADC_ConfigChannel+0x50c>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0e9b      	lsrs	r3, r3, #26
 800428e:	3301      	adds	r3, #1
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	e017      	b.n	80042cc <HAL_ADC_ConfigChannel+0x53c>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80042b4:	2320      	movs	r3, #32
 80042b6:	e003      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80042b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3301      	adds	r3, #1
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2101      	movs	r1, #1
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	ea42 0103 	orr.w	r1, r2, r3
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x562>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0e9b      	lsrs	r3, r3, #26
 80042e2:	3301      	adds	r3, #1
 80042e4:	f003 021f 	and.w	r2, r3, #31
 80042e8:	4613      	mov	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	051b      	lsls	r3, r3, #20
 80042f0:	e018      	b.n	8004324 <HAL_ADC_ConfigChannel+0x594>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800430a:	2320      	movs	r3, #32
 800430c:	e003      	b.n	8004316 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800430e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	3301      	adds	r3, #1
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004324:	430b      	orrs	r3, r1
 8004326:	e080      	b.n	800442a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x5b4>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	069b      	lsls	r3, r3, #26
 800433e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004342:	e015      	b.n	8004370 <HAL_ADC_ConfigChannel+0x5e0>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800435c:	2320      	movs	r3, #32
 800435e:	e003      	b.n	8004368 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	fab3 f383 	clz	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	3301      	adds	r3, #1
 800436a:	069b      	lsls	r3, r3, #26
 800436c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x600>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0e9b      	lsrs	r3, r3, #26
 8004382:	3301      	adds	r3, #1
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	2101      	movs	r1, #1
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	e017      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x630>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	61fb      	str	r3, [r7, #28]
  return result;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80043a8:	2320      	movs	r3, #32
 80043aa:	e003      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	fab3 f383 	clz	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3301      	adds	r3, #1
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2101      	movs	r1, #1
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	ea42 0103 	orr.w	r1, r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x65c>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	0e9b      	lsrs	r3, r3, #26
 80043d6:	3301      	adds	r3, #1
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	3b1e      	subs	r3, #30
 80043e4:	051b      	lsls	r3, r3, #20
 80043e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ea:	e01d      	b.n	8004428 <HAL_ADC_ConfigChannel+0x698>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	fa93 f3a3 	rbit	r3, r3
 80043f8:	613b      	str	r3, [r7, #16]
  return result;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004404:	2320      	movs	r3, #32
 8004406:	e005      	b.n	8004414 <HAL_ADC_ConfigChannel+0x684>
 8004408:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	f003 021f 	and.w	r2, r3, #31
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	3b1e      	subs	r3, #30
 8004422:	051b      	lsls	r3, r3, #20
 8004424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004428:	430b      	orrs	r3, r1
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	6892      	ldr	r2, [r2, #8]
 800442e:	4619      	mov	r1, r3
 8004430:	f7ff f82d 	bl	800348e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b44      	ldr	r3, [pc, #272]	; (800454c <HAL_ADC_ConfigChannel+0x7bc>)
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d07a      	beq.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004440:	4843      	ldr	r0, [pc, #268]	; (8004550 <HAL_ADC_ConfigChannel+0x7c0>)
 8004442:	f7fe ff6f 	bl	8003324 <LL_ADC_GetCommonPathInternalCh>
 8004446:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a41      	ldr	r2, [pc, #260]	; (8004554 <HAL_ADC_ConfigChannel+0x7c4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d12c      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d126      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <HAL_ADC_ConfigChannel+0x7c8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_ADC_ConfigChannel+0x6e4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a3b      	ldr	r2, [pc, #236]	; (800455c <HAL_ADC_ConfigChannel+0x7cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d15d      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800447c:	4619      	mov	r1, r3
 800447e:	4834      	ldr	r0, [pc, #208]	; (8004550 <HAL_ADC_ConfigChannel+0x7c0>)
 8004480:	f7fe ff3d 	bl	80032fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004484:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_ADC_ConfigChannel+0x7d0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	4a36      	ldr	r2, [pc, #216]	; (8004564 <HAL_ADC_ConfigChannel+0x7d4>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800449e:	e002      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ac:	e040      	b.n	8004530 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2d      	ldr	r2, [pc, #180]	; (8004568 <HAL_ADC_ConfigChannel+0x7d8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d118      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x75a>
 80044b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d112      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_ADC_ConfigChannel+0x7c8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_ADC_ConfigChannel+0x748>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a22      	ldr	r2, [pc, #136]	; (800455c <HAL_ADC_ConfigChannel+0x7cc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d12d      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e0:	4619      	mov	r1, r3
 80044e2:	481b      	ldr	r0, [pc, #108]	; (8004550 <HAL_ADC_ConfigChannel+0x7c0>)
 80044e4:	f7fe ff0b 	bl	80032fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044e8:	e024      	b.n	8004534 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1f      	ldr	r2, [pc, #124]	; (800456c <HAL_ADC_ConfigChannel+0x7dc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d120      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11a      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_ADC_ConfigChannel+0x7c8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d115      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800450a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800450e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004512:	4619      	mov	r1, r3
 8004514:	480e      	ldr	r0, [pc, #56]	; (8004550 <HAL_ADC_ConfigChannel+0x7c0>)
 8004516:	f7fe fef2 	bl	80032fe <LL_ADC_SetCommonPathInternalCh>
 800451a:	e00c      	b.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800452e:	e002      	b.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004534:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800453e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004542:	4618      	mov	r0, r3
 8004544:	37d8      	adds	r7, #216	; 0xd8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	80080000 	.word	0x80080000
 8004550:	50040300 	.word	0x50040300
 8004554:	c7520000 	.word	0xc7520000
 8004558:	50040000 	.word	0x50040000
 800455c:	50040200 	.word	0x50040200
 8004560:	20000094 	.word	0x20000094
 8004564:	053e2d63 	.word	0x053e2d63
 8004568:	cb840000 	.word	0xcb840000
 800456c:	80000001 	.word	0x80000001

08004570 <LL_ADC_IsEnabled>:
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <LL_ADC_IsEnabled+0x18>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <LL_ADC_IsEnabled+0x1a>
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_ADC_REG_IsConversionOngoing>:
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d101      	bne.n	80045ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b09f      	sub	sp, #124	; 0x7c
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800463a:	2302      	movs	r3, #2
 800463c:	e093      	b.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004646:	2300      	movs	r3, #0
 8004648:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800464a:	2300      	movs	r3, #0
 800464c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a47      	ldr	r2, [pc, #284]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d102      	bne.n	800465e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004658:	4b46      	ldr	r3, [pc, #280]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	e001      	b.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e072      	b.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff87 	bl	8004596 <LL_ADC_REG_IsConversionOngoing>
 8004688:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff81 	bl	8004596 <LL_ADC_REG_IsConversionOngoing>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d154      	bne.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800469a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800469c:	2b00      	cmp	r3, #0
 800469e:	d151      	bne.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046a0:	4b35      	ldr	r3, [pc, #212]	; (8004778 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80046a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02c      	beq.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046be:	035b      	lsls	r3, r3, #13
 80046c0:	430b      	orrs	r3, r1
 80046c2:	431a      	orrs	r2, r3
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046c8:	4829      	ldr	r0, [pc, #164]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046ca:	f7ff ff51 	bl	8004570 <LL_ADC_IsEnabled>
 80046ce:	4604      	mov	r4, r0
 80046d0:	4828      	ldr	r0, [pc, #160]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046d2:	f7ff ff4d 	bl	8004570 <LL_ADC_IsEnabled>
 80046d6:	4603      	mov	r3, r0
 80046d8:	431c      	orrs	r4, r3
 80046da:	4828      	ldr	r0, [pc, #160]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80046dc:	f7ff ff48 	bl	8004570 <LL_ADC_IsEnabled>
 80046e0:	4603      	mov	r3, r0
 80046e2:	4323      	orrs	r3, r4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d137      	bne.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046f0:	f023 030f 	bic.w	r3, r3, #15
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	6811      	ldr	r1, [r2, #0]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	6892      	ldr	r2, [r2, #8]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	431a      	orrs	r2, r3
 8004700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004702:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004704:	e028      	b.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004710:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004712:	4817      	ldr	r0, [pc, #92]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004714:	f7ff ff2c 	bl	8004570 <LL_ADC_IsEnabled>
 8004718:	4604      	mov	r4, r0
 800471a:	4816      	ldr	r0, [pc, #88]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800471c:	f7ff ff28 	bl	8004570 <LL_ADC_IsEnabled>
 8004720:	4603      	mov	r3, r0
 8004722:	431c      	orrs	r4, r3
 8004724:	4815      	ldr	r0, [pc, #84]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004726:	f7ff ff23 	bl	8004570 <LL_ADC_IsEnabled>
 800472a:	4603      	mov	r3, r0
 800472c:	4323      	orrs	r3, r4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d112      	bne.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800473a:	f023 030f 	bic.w	r3, r3, #15
 800473e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004740:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004742:	e009      	b.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004756:	e000      	b.n	800475a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004758:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004762:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004766:	4618      	mov	r0, r3
 8004768:	377c      	adds	r7, #124	; 0x7c
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}
 800476e:	bf00      	nop
 8004770:	50040000 	.word	0x50040000
 8004774:	50040100 	.word	0x50040100
 8004778:	50040300 	.word	0x50040300
 800477c:	50040200 	.word	0x50040200

08004780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800479c:	4013      	ands	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60d3      	str	r3, [r2, #12]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0307 	and.w	r3, r3, #7
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0b      	blt.n	800480e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <__NVIC_EnableIRQ+0x38>)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2001      	movs	r0, #1
 8004806:	fa00 f202 	lsl.w	r2, r0, r2
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	; (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff4c 	bl	8004780 <__NVIC_SetPriorityGrouping>
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004902:	f7ff ff61 	bl	80047c8 <__NVIC_GetPriorityGrouping>
 8004906:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f7ff ffb1 	bl	8004874 <NVIC_EncodePriority>
 8004912:	4602      	mov	r2, r0
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ff80 	bl	8004820 <__NVIC_SetPriority>
}
 8004920:	bf00      	nop
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff ff54 	bl	80047e4 <__NVIC_EnableIRQ>
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e098      	b.n	8004a88 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	4b4d      	ldr	r3, [pc, #308]	; (8004a94 <HAL_DMA_Init+0x150>)
 800495e:	429a      	cmp	r2, r3
 8004960:	d80f      	bhi.n	8004982 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	4b4b      	ldr	r3, [pc, #300]	; (8004a98 <HAL_DMA_Init+0x154>)
 800496a:	4413      	add	r3, r2
 800496c:	4a4b      	ldr	r2, [pc, #300]	; (8004a9c <HAL_DMA_Init+0x158>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	009a      	lsls	r2, r3, #2
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a48      	ldr	r2, [pc, #288]	; (8004aa0 <HAL_DMA_Init+0x15c>)
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
 8004980:	e00e      	b.n	80049a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	4b46      	ldr	r3, [pc, #280]	; (8004aa4 <HAL_DMA_Init+0x160>)
 800498a:	4413      	add	r3, r2
 800498c:	4a43      	ldr	r2, [pc, #268]	; (8004a9c <HAL_DMA_Init+0x158>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	091b      	lsrs	r3, r3, #4
 8004994:	009a      	lsls	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <HAL_DMA_Init+0x164>)
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049fa:	d039      	beq.n	8004a70 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <HAL_DMA_Init+0x15c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d11a      	bne.n	8004a3c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_DMA_Init+0x168>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f003 031c 	and.w	r3, r3, #28
 8004a12:	210f      	movs	r1, #15
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	4924      	ldr	r1, [pc, #144]	; (8004aac <HAL_DMA_Init+0x168>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a20:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_DMA_Init+0x168>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	f003 031c 	and.w	r3, r3, #28
 8004a30:	fa01 f303 	lsl.w	r3, r1, r3
 8004a34:	491d      	ldr	r1, [pc, #116]	; (8004aac <HAL_DMA_Init+0x168>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]
 8004a3a:	e019      	b.n	8004a70 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <HAL_DMA_Init+0x16c>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f003 031c 	and.w	r3, r3, #28
 8004a48:	210f      	movs	r1, #15
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <HAL_DMA_Init+0x16c>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_DMA_Init+0x16c>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6859      	ldr	r1, [r3, #4]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f003 031c 	and.w	r3, r3, #28
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <HAL_DMA_Init+0x16c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40020407 	.word	0x40020407
 8004a98:	bffdfff8 	.word	0xbffdfff8
 8004a9c:	cccccccd 	.word	0xcccccccd
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	bffdfbf8 	.word	0xbffdfbf8
 8004aa8:	40020400 	.word	0x40020400
 8004aac:	400200a8 	.word	0x400200a8
 8004ab0:	400204a8 	.word	0x400204a8

08004ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x20>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e04b      	b.n	8004b6c <HAL_DMA_Start_IT+0xb8>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d13a      	bne.n	8004b5e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f921 	bl	8004d54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 020e 	orr.w	r2, r2, #14
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	e00f      	b.n	8004b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 020a 	orr.w	r2, r2, #10
 8004b4a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e005      	b.n	8004b6a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d005      	beq.n	8004b98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	e029      	b.n	8004bec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 020e 	bic.w	r2, r2, #14
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0201 	bic.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbc:	f003 021c 	and.w	r2, r3, #28
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
    }
  }
  return status;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f003 031c 	and.w	r3, r3, #28
 8004c16:	2204      	movs	r2, #4
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d026      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x7a>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d021      	beq.n	8004c70 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0204 	bic.w	r2, r2, #4
 8004c48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f003 021c 	and.w	r2, r3, #28
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	2104      	movs	r1, #4
 8004c58:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d071      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004c6e:	e06c      	b.n	8004d4a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	f003 031c 	and.w	r3, r3, #28
 8004c78:	2202      	movs	r2, #2
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02e      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0xec>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d029      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 020a 	bic.w	r2, r2, #10
 8004caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	f003 021c 	and.w	r2, r3, #28
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d038      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ce0:	e033      	b.n	8004d4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f003 031c 	and.w	r3, r3, #28
 8004cea:	2208      	movs	r2, #8
 8004cec:	409a      	lsls	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d02a      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x156>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d025      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 020e 	bic.w	r2, r2, #14
 8004d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d14:	f003 021c 	and.w	r2, r3, #28
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
}
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f003 021c 	and.w	r2, r3, #28
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2101      	movs	r1, #1
 8004d70:	fa01 f202 	lsl.w	r2, r1, r2
 8004d74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d108      	bne.n	8004d98 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d96:	e007      	b.n	8004da8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dc2:	e17f      	b.n	80050c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8171 	beq.w	80050be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d00b      	beq.n	8004dfc <HAL_GPIO_Init+0x48>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d007      	beq.n	8004dfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004df0:	2b11      	cmp	r3, #17
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b12      	cmp	r3, #18
 8004dfa:	d130      	bne.n	8004e5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e32:	2201      	movs	r2, #1
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0201 	and.w	r2, r3, #1
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d118      	bne.n	8004e9c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004e70:	2201      	movs	r2, #1
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	08db      	lsrs	r3, r3, #3
 8004e86:	f003 0201 	and.w	r2, r3, #1
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d003      	beq.n	8004edc <HAL_GPIO_Init+0x128>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b12      	cmp	r3, #18
 8004eda:	d123      	bne.n	8004f24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3208      	adds	r2, #8
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	6939      	ldr	r1, [r7, #16]
 8004f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80ac 	beq.w	80050be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f66:	4b5f      	ldr	r3, [pc, #380]	; (80050e4 <HAL_GPIO_Init+0x330>)
 8004f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f6a:	4a5e      	ldr	r2, [pc, #376]	; (80050e4 <HAL_GPIO_Init+0x330>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	6613      	str	r3, [r2, #96]	; 0x60
 8004f72:	4b5c      	ldr	r3, [pc, #368]	; (80050e4 <HAL_GPIO_Init+0x330>)
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f7e:	4a5a      	ldr	r2, [pc, #360]	; (80050e8 <HAL_GPIO_Init+0x334>)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fa8:	d025      	beq.n	8004ff6 <HAL_GPIO_Init+0x242>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4f      	ldr	r2, [pc, #316]	; (80050ec <HAL_GPIO_Init+0x338>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <HAL_GPIO_Init+0x23e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4e      	ldr	r2, [pc, #312]	; (80050f0 <HAL_GPIO_Init+0x33c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d019      	beq.n	8004fee <HAL_GPIO_Init+0x23a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4d      	ldr	r2, [pc, #308]	; (80050f4 <HAL_GPIO_Init+0x340>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d013      	beq.n	8004fea <HAL_GPIO_Init+0x236>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4c      	ldr	r2, [pc, #304]	; (80050f8 <HAL_GPIO_Init+0x344>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00d      	beq.n	8004fe6 <HAL_GPIO_Init+0x232>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4b      	ldr	r2, [pc, #300]	; (80050fc <HAL_GPIO_Init+0x348>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_Init+0x22e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4a      	ldr	r2, [pc, #296]	; (8005100 <HAL_GPIO_Init+0x34c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_GPIO_Init+0x22a>
 8004fda:	2306      	movs	r3, #6
 8004fdc:	e00c      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004fde:	2307      	movs	r3, #7
 8004fe0:	e00a      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004fe2:	2305      	movs	r3, #5
 8004fe4:	e008      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	e006      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004fea:	2303      	movs	r3, #3
 8004fec:	e004      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e002      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_GPIO_Init+0x244>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	f002 0203 	and.w	r2, r2, #3
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	4093      	lsls	r3, r2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005008:	4937      	ldr	r1, [pc, #220]	; (80050e8 <HAL_GPIO_Init+0x334>)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	3302      	adds	r3, #2
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005016:	4b3b      	ldr	r3, [pc, #236]	; (8005104 <HAL_GPIO_Init+0x350>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	43db      	mvns	r3, r3
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800503a:	4a32      	ldr	r2, [pc, #200]	; (8005104 <HAL_GPIO_Init+0x350>)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005040:	4b30      	ldr	r3, [pc, #192]	; (8005104 <HAL_GPIO_Init+0x350>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	43db      	mvns	r3, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4013      	ands	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005064:	4a27      	ldr	r2, [pc, #156]	; (8005104 <HAL_GPIO_Init+0x350>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800506a:	4b26      	ldr	r3, [pc, #152]	; (8005104 <HAL_GPIO_Init+0x350>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	43db      	mvns	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <HAL_GPIO_Init+0x350>)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005094:	4b1b      	ldr	r3, [pc, #108]	; (8005104 <HAL_GPIO_Init+0x350>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	43db      	mvns	r3, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050b8:	4a12      	ldr	r2, [pc, #72]	; (8005104 <HAL_GPIO_Init+0x350>)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3301      	adds	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f47f ae78 	bne.w	8004dc4 <HAL_GPIO_Init+0x10>
  }
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40010000 	.word	0x40010000
 80050ec:	48000400 	.word	0x48000400
 80050f0:	48000800 	.word	0x48000800
 80050f4:	48000c00 	.word	0x48000c00
 80050f8:	48001000 	.word	0x48001000
 80050fc:	48001400 	.word	0x48001400
 8005100:	48001800 	.word	0x48001800
 8005104:	40010400 	.word	0x40010400

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005124:	e002      	b.n	800512c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e081      	b.n	800524e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fd fb4c 	bl	80027fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	; 0x24
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005188:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005198:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	e006      	b.n	80051c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d104      	bne.n	80051d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	ea42 0103 	orr.w	r1, r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b20      	cmp	r3, #32
 800526a:	d138      	bne.n	80052de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005276:	2302      	movs	r3, #2
 8005278:	e032      	b.n	80052e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2224      	movs	r2, #36	; 0x24
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d139      	bne.n	8005376 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800530c:	2302      	movs	r3, #2
 800530e:	e033      	b.n	8005378 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2224      	movs	r2, #36	; 0x24
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800533e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005376:	2302      	movs	r3, #2
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <HAL_PWREx_GetVoltageRange+0x18>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005390:	4618      	mov	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40007000 	.word	0x40007000

080053a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ae:	d130      	bne.n	8005412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053bc:	d038      	beq.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053ce:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2232      	movs	r2, #50	; 0x32
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0c9b      	lsrs	r3, r3, #18
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053e4:	e002      	b.n	80053ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ec:	4b14      	ldr	r3, [pc, #80]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d102      	bne.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f2      	bne.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540c:	d110      	bne.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e00f      	b.n	8005432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541e:	d007      	beq.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005428:	4a05      	ldr	r2, [pc, #20]	; (8005440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800542e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40007000 	.word	0x40007000
 8005444:	20000094 	.word	0x20000094
 8005448:	431bde83 	.word	0x431bde83

0800544c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e3d4      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545e:	4ba1      	ldr	r3, [pc, #644]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 030c 	and.w	r3, r3, #12
 8005466:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005468:	4b9e      	ldr	r3, [pc, #632]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80e4 	beq.w	8005648 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_RCC_OscConfig+0x4a>
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	f040 808b 	bne.w	80055a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 8087 	bne.w	80055a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005496:	4b93      	ldr	r3, [pc, #588]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x62>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e3ac      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	4b8c      	ldr	r3, [pc, #560]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_RCC_OscConfig+0x7c>
 80054be:	4b89      	ldr	r3, [pc, #548]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c6:	e005      	b.n	80054d4 <HAL_RCC_OscConfig+0x88>
 80054c8:	4b86      	ldr	r3, [pc, #536]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80054ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d223      	bcs.n	8005520 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fd73 	bl	8005fc8 <RCC_SetFlashLatencyFromMSIRange>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e38d      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ec:	4b7d      	ldr	r3, [pc, #500]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7c      	ldr	r2, [pc, #496]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80054f2:	f043 0308 	orr.w	r3, r3, #8
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b7a      	ldr	r3, [pc, #488]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	4977      	ldr	r1, [pc, #476]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800550a:	4b76      	ldr	r3, [pc, #472]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	4972      	ldr	r1, [pc, #456]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800551a:	4313      	orrs	r3, r2
 800551c:	604b      	str	r3, [r1, #4]
 800551e:	e025      	b.n	800556c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005520:	4b70      	ldr	r3, [pc, #448]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6f      	ldr	r2, [pc, #444]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005526:	f043 0308 	orr.w	r3, r3, #8
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	4b6d      	ldr	r3, [pc, #436]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	496a      	ldr	r1, [pc, #424]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800553e:	4b69      	ldr	r3, [pc, #420]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	4965      	ldr	r1, [pc, #404]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800554e:	4313      	orrs	r3, r2
 8005550:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fd33 	bl	8005fc8 <RCC_SetFlashLatencyFromMSIRange>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e34d      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800556c:	f000 fc36 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005570:	4602      	mov	r2, r0
 8005572:	4b5c      	ldr	r3, [pc, #368]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 030f 	and.w	r3, r3, #15
 800557c:	495a      	ldr	r1, [pc, #360]	; (80056e8 <HAL_RCC_OscConfig+0x29c>)
 800557e:	5ccb      	ldrb	r3, [r1, r3]
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	4a58      	ldr	r2, [pc, #352]	; (80056ec <HAL_RCC_OscConfig+0x2a0>)
 800558a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800558c:	4b58      	ldr	r3, [pc, #352]	; (80056f0 <HAL_RCC_OscConfig+0x2a4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fd fc7d 	bl	8002e90 <HAL_InitTick>
 8005596:	4603      	mov	r3, r0
 8005598:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d052      	beq.n	8005646 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	e331      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d032      	beq.n	8005612 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055ac:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a4c      	ldr	r2, [pc, #304]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055b8:	f7fd fe5e 	bl	8003278 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055c0:	f7fd fe5a 	bl	8003278 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e31a      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d2:	4b44      	ldr	r3, [pc, #272]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055de:	4b41      	ldr	r3, [pc, #260]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a40      	ldr	r2, [pc, #256]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055e4:	f043 0308 	orr.w	r3, r3, #8
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	493b      	ldr	r1, [pc, #236]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fc:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	4936      	ldr	r1, [pc, #216]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800560c:	4313      	orrs	r3, r2
 800560e:	604b      	str	r3, [r1, #4]
 8005610:	e01a      	b.n	8005648 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005612:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a33      	ldr	r2, [pc, #204]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005618:	f023 0301 	bic.w	r3, r3, #1
 800561c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800561e:	f7fd fe2b 	bl	8003278 <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005624:	e008      	b.n	8005638 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005626:	f7fd fe27 	bl	8003278 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e2e7      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005638:	4b2a      	ldr	r3, [pc, #168]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f0      	bne.n	8005626 <HAL_RCC_OscConfig+0x1da>
 8005644:	e000      	b.n	8005648 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005646:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d074      	beq.n	800573e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b08      	cmp	r3, #8
 8005658:	d005      	beq.n	8005666 <HAL_RCC_OscConfig+0x21a>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	d10e      	bne.n	800567e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d10b      	bne.n	800567e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005666:	4b1f      	ldr	r3, [pc, #124]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d064      	beq.n	800573c <HAL_RCC_OscConfig+0x2f0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d160      	bne.n	800573c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e2c4      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d106      	bne.n	8005696 <HAL_RCC_OscConfig+0x24a>
 8005688:	4b16      	ldr	r3, [pc, #88]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e01d      	b.n	80056d2 <HAL_RCC_OscConfig+0x286>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569e:	d10c      	bne.n	80056ba <HAL_RCC_OscConfig+0x26e>
 80056a0:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	e00b      	b.n	80056d2 <HAL_RCC_OscConfig+0x286>
 80056ba:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a06      	ldr	r2, [pc, #24]	; (80056e4 <HAL_RCC_OscConfig+0x298>)
 80056cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01c      	beq.n	8005714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fd fdcd 	bl	8003278 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e0:	e011      	b.n	8005706 <HAL_RCC_OscConfig+0x2ba>
 80056e2:	bf00      	nop
 80056e4:	40021000 	.word	0x40021000
 80056e8:	0800e060 	.word	0x0800e060
 80056ec:	20000094 	.word	0x20000094
 80056f0:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f4:	f7fd fdc0 	bl	8003278 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	; 0x64
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e280      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005706:	4baf      	ldr	r3, [pc, #700]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f0      	beq.n	80056f4 <HAL_RCC_OscConfig+0x2a8>
 8005712:	e014      	b.n	800573e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fd fdb0 	bl	8003278 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800571c:	f7fd fdac 	bl	8003278 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b64      	cmp	r3, #100	; 0x64
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e26c      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800572e:	4ba5      	ldr	r3, [pc, #660]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x2d0>
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d060      	beq.n	800580c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d005      	beq.n	800575c <HAL_RCC_OscConfig+0x310>
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d119      	bne.n	800578a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d116      	bne.n	800578a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575c:	4b99      	ldr	r3, [pc, #612]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_RCC_OscConfig+0x328>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e249      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005774:	4b93      	ldr	r3, [pc, #588]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	4990      	ldr	r1, [pc, #576]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005788:	e040      	b.n	800580c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d023      	beq.n	80057da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005792:	4b8c      	ldr	r3, [pc, #560]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a8b      	ldr	r2, [pc, #556]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fd fd6b 	bl	8003278 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a6:	f7fd fd67 	bl	8003278 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e227      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b8:	4b82      	ldr	r3, [pc, #520]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c4:	4b7f      	ldr	r3, [pc, #508]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	061b      	lsls	r3, r3, #24
 80057d2:	497c      	ldr	r1, [pc, #496]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	604b      	str	r3, [r1, #4]
 80057d8:	e018      	b.n	800580c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057da:	4b7a      	ldr	r3, [pc, #488]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a79      	ldr	r2, [pc, #484]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80057e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fd fd47 	bl	8003278 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ee:	f7fd fd43 	bl	8003278 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e203      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005800:	4b70      	ldr	r3, [pc, #448]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d03c      	beq.n	8005892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01c      	beq.n	800585a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005820:	4b68      	ldr	r3, [pc, #416]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005826:	4a67      	ldr	r2, [pc, #412]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fd fd22 	bl	8003278 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005838:	f7fd fd1e 	bl	8003278 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e1de      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800584a:	4b5e      	ldr	r3, [pc, #376]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ef      	beq.n	8005838 <HAL_RCC_OscConfig+0x3ec>
 8005858:	e01b      	b.n	8005892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585a:	4b5a      	ldr	r3, [pc, #360]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005860:	4a58      	ldr	r2, [pc, #352]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fd fd05 	bl	8003278 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005872:	f7fd fd01 	bl	8003278 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e1c1      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005884:	4b4f      	ldr	r3, [pc, #316]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1ef      	bne.n	8005872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80a6 	beq.w	80059ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a0:	2300      	movs	r3, #0
 80058a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058a4:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	4a43      	ldr	r2, [pc, #268]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	6593      	str	r3, [r2, #88]	; 0x58
 80058bc:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c8:	2301      	movs	r3, #1
 80058ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058cc:	4b3e      	ldr	r3, [pc, #248]	; (80059c8 <HAL_RCC_OscConfig+0x57c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d118      	bne.n	800590a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d8:	4b3b      	ldr	r3, [pc, #236]	; (80059c8 <HAL_RCC_OscConfig+0x57c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3a      	ldr	r2, [pc, #232]	; (80059c8 <HAL_RCC_OscConfig+0x57c>)
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e4:	f7fd fcc8 	bl	8003278 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fd fcc4 	bl	8003278 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e184      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058fe:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <HAL_RCC_OscConfig+0x57c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d108      	bne.n	8005924 <HAL_RCC_OscConfig+0x4d8>
 8005912:	4b2c      	ldr	r3, [pc, #176]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005922:	e024      	b.n	800596e <HAL_RCC_OscConfig+0x522>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b05      	cmp	r3, #5
 800592a:	d110      	bne.n	800594e <HAL_RCC_OscConfig+0x502>
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800594c:	e00f      	b.n	800596e <HAL_RCC_OscConfig+0x522>
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005954:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005964:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005966:	f023 0304 	bic.w	r3, r3, #4
 800596a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005976:	f7fd fc7f 	bl	8003278 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800597c:	e00a      	b.n	8005994 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fd fc7b 	bl	8003278 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e139      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005994:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_OscConfig+0x578>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ed      	beq.n	800597e <HAL_RCC_OscConfig+0x532>
 80059a2:	e01a      	b.n	80059da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fd fc68 	bl	8003278 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059aa:	e00f      	b.n	80059cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fd fc64 	bl	8003278 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d906      	bls.n	80059cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e122      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
 80059c2:	bf00      	nop
 80059c4:	40021000 	.word	0x40021000
 80059c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059cc:	4b90      	ldr	r3, [pc, #576]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e8      	bne.n	80059ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059da:	7ffb      	ldrb	r3, [r7, #31]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	4b8b      	ldr	r3, [pc, #556]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e4:	4a8a      	ldr	r2, [pc, #552]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8108 	beq.w	8005c06 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	f040 80d0 	bne.w	8005ba0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a00:	4b83      	ldr	r3, [pc, #524]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0203 	and.w	r2, r3, #3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d130      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d127      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d11f      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a40:	2a07      	cmp	r2, #7
 8005a42:	bf14      	ite	ne
 8005a44:	2201      	movne	r2, #1
 8005a46:	2200      	moveq	r2, #0
 8005a48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d113      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d109      	bne.n	8005a76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d06e      	beq.n	8005b54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	d069      	beq.n	8005b50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a7c:	4b64      	ldr	r3, [pc, #400]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a88:	4b61      	ldr	r3, [pc, #388]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0b7      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a98:	4b5d      	ldr	r3, [pc, #372]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aa4:	f7fd fbe8 	bl	8003278 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aac:	f7fd fbe4 	bl	8003278 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e0a4      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005abe:	4b54      	ldr	r3, [pc, #336]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	4b51      	ldr	r3, [pc, #324]	; (8005c14 <HAL_RCC_OscConfig+0x7c8>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ada:	3a01      	subs	r2, #1
 8005adc:	0112      	lsls	r2, r2, #4
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ae4:	0212      	lsls	r2, r2, #8
 8005ae6:	4311      	orrs	r1, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aec:	0852      	lsrs	r2, r2, #1
 8005aee:	3a01      	subs	r2, #1
 8005af0:	0552      	lsls	r2, r2, #21
 8005af2:	4311      	orrs	r1, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005af8:	0852      	lsrs	r2, r2, #1
 8005afa:	3a01      	subs	r2, #1
 8005afc:	0652      	lsls	r2, r2, #25
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b04:	0912      	lsrs	r2, r2, #4
 8005b06:	0452      	lsls	r2, r2, #17
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	4941      	ldr	r1, [pc, #260]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b10:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a3e      	ldr	r2, [pc, #248]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b1c:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b28:	f7fd fba6 	bl	8003278 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b30:	f7fd fba2 	bl	8003278 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e062      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b4e:	e05a      	b.n	8005c06 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e059      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b54:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d152      	bne.n	8005c06 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b60:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b6c:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a27      	ldr	r2, [pc, #156]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b78:	f7fd fb7e 	bl	8003278 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fd fb7a 	bl	8003278 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e03a      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x734>
 8005b9e:	e032      	b.n	8005c06 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b0c      	cmp	r3, #12
 8005ba4:	d02d      	beq.n	8005c02 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bb0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005bb2:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005bbe:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bd0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bda:	f7fd fb4d 	bl	8003278 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fd fb49 	bl	8003278 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e009      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <HAL_RCC_OscConfig+0x7c4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x796>
 8005c00:	e001      	b.n	8005c06 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40021000 	.word	0x40021000
 8005c14:	f99d808c 	.word	0xf99d808c

08005c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0c8      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b66      	ldr	r3, [pc, #408]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d910      	bls.n	8005c5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b63      	ldr	r3, [pc, #396]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 0207 	bic.w	r2, r3, #7
 8005c42:	4961      	ldr	r1, [pc, #388]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b5f      	ldr	r3, [pc, #380]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0b0      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d04c      	beq.n	8005d02 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d107      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c70:	4b56      	ldr	r3, [pc, #344]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d121      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e09e      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d107      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c88:	4b50      	ldr	r3, [pc, #320]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d115      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e092      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ca0:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e086      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb0:	4b46      	ldr	r3, [pc, #280]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e07e      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cc0:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 0203 	bic.w	r2, r3, #3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	493f      	ldr	r1, [pc, #252]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fd fad1 	bl	8003278 <HAL_GetTick>
 8005cd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cda:	f7fd facd 	bl	8003278 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e066      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf0:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 020c 	and.w	r2, r3, #12
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d1eb      	bne.n	8005cda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d008      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	492c      	ldr	r1, [pc, #176]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d20:	4b29      	ldr	r3, [pc, #164]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d210      	bcs.n	8005d50 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0207 	bic.w	r2, r3, #7
 8005d36:	4924      	ldr	r1, [pc, #144]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3e:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e036      	b.n	8005dbe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4918      	ldr	r1, [pc, #96]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4910      	ldr	r1, [pc, #64]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d8e:	f000 f825 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <HAL_RCC_ClockConfig+0x1b4>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	490c      	ldr	r1, [pc, #48]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	5ccb      	ldrb	r3, [r1, r3]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fd f86c 	bl	8002e90 <HAL_InitTick>
 8005db8:	4603      	mov	r3, r0
 8005dba:	72fb      	strb	r3, [r7, #11]

  return status;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	40022000 	.word	0x40022000
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	0800e060 	.word	0x0800e060
 8005dd4:	20000094 	.word	0x20000094
 8005dd8:	20000098 	.word	0x20000098

08005ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dea:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df4:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x34>
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b0c      	cmp	r3, #12
 8005e08:	d121      	bne.n	8005e4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d11e      	bne.n	8005e4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e10:	4b34      	ldr	r3, [pc, #208]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d107      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e1c:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	e005      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e38:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10d      	bne.n	8005e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e4c:	e00a      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d102      	bne.n	8005e5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e54:	4b25      	ldr	r3, [pc, #148]	; (8005eec <HAL_RCC_GetSysClockFreq+0x110>)
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	e004      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d101      	bne.n	8005e64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e60:	4b23      	ldr	r3, [pc, #140]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d134      	bne.n	8005ed4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d003      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0xa6>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d003      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0xac>
 8005e80:	e005      	b.n	8005e8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e82:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <HAL_RCC_GetSysClockFreq+0x110>)
 8005e84:	617b      	str	r3, [r7, #20]
      break;
 8005e86:	e005      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e88:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e8a:	617b      	str	r3, [r7, #20]
      break;
 8005e8c:	e002      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	617b      	str	r3, [r7, #20]
      break;
 8005e92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e94:	4b13      	ldr	r3, [pc, #76]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	091b      	lsrs	r3, r3, #4
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	fb02 f203 	mul.w	r2, r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	0e5b      	lsrs	r3, r3, #25
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3724      	adds	r7, #36	; 0x24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	0800e078 	.word	0x0800e078
 8005eec:	00f42400 	.word	0x00f42400
 8005ef0:	007a1200 	.word	0x007a1200

08005ef4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005efa:	681b      	ldr	r3, [r3, #0]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000094 	.word	0x20000094

08005f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f10:	f7ff fff0 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f14:	4602      	mov	r2, r0
 8005f16:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	4904      	ldr	r1, [pc, #16]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f22:	5ccb      	ldrb	r3, [r1, r3]
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40021000 	.word	0x40021000
 8005f34:	0800e070 	.word	0x0800e070

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f3c:	f7ff ffda 	bl	8005ef4 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0adb      	lsrs	r3, r3, #11
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4904      	ldr	r1, [pc, #16]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800e070 	.word	0x0800e070

08005f64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	220f      	movs	r2, #15
 8005f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005f74:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0203 	and.w	r2, r3, #3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f80:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	08db      	lsrs	r3, r3, #3
 8005f9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <HAL_RCC_GetClockConfig+0x60>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0207 	and.w	r2, r3, #7
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	601a      	str	r2, [r3, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	40022000 	.word	0x40022000

08005fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005fd4:	4b2a      	ldr	r3, [pc, #168]	; (8006080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005fe0:	f7ff f9d0 	bl	8005384 <HAL_PWREx_GetVoltageRange>
 8005fe4:	6178      	str	r0, [r7, #20]
 8005fe6:	e014      	b.n	8006012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fec:	4a24      	ldr	r2, [pc, #144]	; (8006080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff4:	4b22      	ldr	r3, [pc, #136]	; (8006080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006000:	f7ff f9c0 	bl	8005384 <HAL_PWREx_GetVoltageRange>
 8006004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600a:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800600c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006018:	d10b      	bne.n	8006032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b80      	cmp	r3, #128	; 0x80
 800601e:	d919      	bls.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2ba0      	cmp	r3, #160	; 0xa0
 8006024:	d902      	bls.n	800602c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006026:	2302      	movs	r3, #2
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	e013      	b.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800602c:	2301      	movs	r3, #1
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	e010      	b.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d902      	bls.n	800603e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006038:	2303      	movs	r3, #3
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	e00a      	b.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b80      	cmp	r3, #128	; 0x80
 8006042:	d102      	bne.n	800604a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006044:	2302      	movs	r3, #2
 8006046:	613b      	str	r3, [r7, #16]
 8006048:	e004      	b.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b70      	cmp	r3, #112	; 0x70
 800604e:	d101      	bne.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006050:	2301      	movs	r3, #1
 8006052:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f023 0207 	bic.w	r2, r3, #7
 800605c:	4909      	ldr	r1, [pc, #36]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	429a      	cmp	r2, r3
 8006070:	d001      	beq.n	8006076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000
 8006084:	40022000 	.word	0x40022000

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006090:	2300      	movs	r3, #0
 8006092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006094:	2300      	movs	r3, #0
 8006096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d041      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060ac:	d02a      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060b2:	d824      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060b8:	d008      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060be:	d81e      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060c8:	d010      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060ca:	e018      	b.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060cc:	4b86      	ldr	r3, [pc, #536]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a85      	ldr	r2, [pc, #532]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060d8:	e015      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fabb 	bl	800665c <RCCEx_PLLSAI1_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060ea:	e00c      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3320      	adds	r3, #32
 80060f0:	2100      	movs	r1, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 fba6 	bl	8006844 <RCCEx_PLLSAI2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060fc:	e003      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	74fb      	strb	r3, [r7, #19]
      break;
 8006102:	e000      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006106:	7cfb      	ldrb	r3, [r7, #19]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10b      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800610c:	4b76      	ldr	r3, [pc, #472]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	4973      	ldr	r1, [pc, #460]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006122:	e001      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d041      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800613c:	d02a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800613e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006142:	d824      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006148:	d008      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800614a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800614e:	d81e      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006158:	d010      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800615a:	e018      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800615c:	4b62      	ldr	r3, [pc, #392]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a61      	ldr	r2, [pc, #388]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006166:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006168:	e015      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	2100      	movs	r1, #0
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fa73 	bl	800665c <RCCEx_PLLSAI1_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800617a:	e00c      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3320      	adds	r3, #32
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fb5e 	bl	8006844 <RCCEx_PLLSAI2_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	74fb      	strb	r3, [r7, #19]
      break;
 8006192:	e000      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800619c:	4b52      	ldr	r3, [pc, #328]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061aa:	494f      	ldr	r1, [pc, #316]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061b2:	e001      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80a0 	beq.w	8006306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061c6:	2300      	movs	r3, #0
 80061c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061ca:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e4:	4a40      	ldr	r2, [pc, #256]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ea:	6593      	str	r3, [r2, #88]	; 0x58
 80061ec:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061f8:	2301      	movs	r3, #1
 80061fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061fc:	4b3b      	ldr	r3, [pc, #236]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3a      	ldr	r2, [pc, #232]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006208:	f7fd f836 	bl	8003278 <HAL_GetTick>
 800620c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800620e:	e009      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006210:	f7fd f832 	bl	8003278 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d902      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	74fb      	strb	r3, [r7, #19]
        break;
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006224:	4b31      	ldr	r3, [pc, #196]	; (80062ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0ef      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006230:	7cfb      	ldrb	r3, [r7, #19]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d15c      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006236:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006240:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01f      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	d019      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006260:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800626c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006270:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	4a1c      	ldr	r2, [pc, #112]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006292:	f7fc fff1 	bl	8003278 <HAL_GetTick>
 8006296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006298:	e00b      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629a:	f7fc ffed 	bl	8003278 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d902      	bls.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	74fb      	strb	r3, [r7, #19]
            break;
 80062b0:	e006      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062b2:	4b0d      	ldr	r3, [pc, #52]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ec      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80062c0:	7cfb      	ldrb	r3, [r7, #19]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	4904      	ldr	r1, [pc, #16]	; (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062de:	e009      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062e0:	7cfb      	ldrb	r3, [r7, #19]
 80062e2:	74bb      	strb	r3, [r7, #18]
 80062e4:	e006      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80062e6:	bf00      	nop
 80062e8:	40021000 	.word	0x40021000
 80062ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f4:	7c7b      	ldrb	r3, [r7, #17]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d105      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062fa:	4b9e      	ldr	r3, [pc, #632]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fe:	4a9d      	ldr	r2, [pc, #628]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006312:	4b98      	ldr	r3, [pc, #608]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	f023 0203 	bic.w	r2, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	4994      	ldr	r1, [pc, #592]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006334:	4b8f      	ldr	r3, [pc, #572]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	f023 020c 	bic.w	r2, r3, #12
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006342:	498c      	ldr	r1, [pc, #560]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006356:	4b87      	ldr	r3, [pc, #540]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	4983      	ldr	r1, [pc, #524]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006378:	4b7e      	ldr	r3, [pc, #504]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	497b      	ldr	r1, [pc, #492]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800639a:	4b76      	ldr	r3, [pc, #472]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a8:	4972      	ldr	r1, [pc, #456]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063bc:	4b6d      	ldr	r3, [pc, #436]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	496a      	ldr	r1, [pc, #424]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063de:	4b65      	ldr	r3, [pc, #404]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	4961      	ldr	r1, [pc, #388]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006400:	4b5c      	ldr	r3, [pc, #368]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640e:	4959      	ldr	r1, [pc, #356]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006422:	4b54      	ldr	r3, [pc, #336]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006430:	4950      	ldr	r1, [pc, #320]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006444:	4b4b      	ldr	r3, [pc, #300]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006452:	4948      	ldr	r1, [pc, #288]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006466:	4b43      	ldr	r3, [pc, #268]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	493f      	ldr	r1, [pc, #252]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d028      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006488:	4b3a      	ldr	r3, [pc, #232]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006496:	4937      	ldr	r1, [pc, #220]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064a6:	d106      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064a8:	4b32      	ldr	r3, [pc, #200]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a31      	ldr	r2, [pc, #196]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064b2:	60d3      	str	r3, [r2, #12]
 80064b4:	e011      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3304      	adds	r3, #4
 80064c4:	2101      	movs	r1, #1
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f8c8 	bl	800665c <RCCEx_PLLSAI1_Config>
 80064cc:	4603      	mov	r3, r0
 80064ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80064d6:	7cfb      	ldrb	r3, [r7, #19]
 80064d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d028      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064e6:	4b23      	ldr	r3, [pc, #140]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	491f      	ldr	r1, [pc, #124]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006504:	d106      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800650c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006510:	60d3      	str	r3, [r2, #12]
 8006512:	e011      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800651c:	d10c      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3304      	adds	r3, #4
 8006522:	2101      	movs	r1, #1
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f899 	bl	800665c <RCCEx_PLLSAI1_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006534:	7cfb      	ldrb	r3, [r7, #19]
 8006536:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02b      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006544:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006552:	4908      	ldr	r1, [pc, #32]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006562:	d109      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4a02      	ldr	r2, [pc, #8]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800656e:	60d3      	str	r3, [r2, #12]
 8006570:	e014      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006572:	bf00      	nop
 8006574:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006580:	d10c      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	2101      	movs	r1, #1
 8006588:	4618      	mov	r0, r3
 800658a:	f000 f867 	bl	800665c <RCCEx_PLLSAI1_Config>
 800658e:	4603      	mov	r3, r0
 8006590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006592:	7cfb      	ldrb	r3, [r7, #19]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006598:	7cfb      	ldrb	r3, [r7, #19]
 800659a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d02f      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065a8:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b6:	4928      	ldr	r1, [pc, #160]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c6:	d10d      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	2102      	movs	r1, #2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 f844 	bl	800665c <RCCEx_PLLSAI1_Config>
 80065d4:	4603      	mov	r3, r0
 80065d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d014      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80065de:	7cfb      	ldrb	r3, [r7, #19]
 80065e0:	74bb      	strb	r3, [r7, #18]
 80065e2:	e011      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ec:	d10c      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3320      	adds	r3, #32
 80065f2:	2102      	movs	r1, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f925 	bl	8006844 <RCCEx_PLLSAI2_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065fe:	7cfb      	ldrb	r3, [r7, #19]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006614:	4b10      	ldr	r3, [pc, #64]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006622:	490d      	ldr	r1, [pc, #52]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006624:	4313      	orrs	r3, r2
 8006626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00b      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006646:	4904      	ldr	r1, [pc, #16]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800664e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40021000 	.word	0x40021000

0800665c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800666a:	4b75      	ldr	r3, [pc, #468]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006676:	4b72      	ldr	r3, [pc, #456]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0203 	and.w	r2, r3, #3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d10d      	bne.n	80066a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
       ||
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800668e:	4b6c      	ldr	r3, [pc, #432]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	091b      	lsrs	r3, r3, #4
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
       ||
 800669e:	429a      	cmp	r2, r3
 80066a0:	d047      	beq.n	8006732 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	e044      	b.n	8006732 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d018      	beq.n	80066e2 <RCCEx_PLLSAI1_Config+0x86>
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d825      	bhi.n	8006700 <RCCEx_PLLSAI1_Config+0xa4>
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d002      	beq.n	80066be <RCCEx_PLLSAI1_Config+0x62>
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d009      	beq.n	80066d0 <RCCEx_PLLSAI1_Config+0x74>
 80066bc:	e020      	b.n	8006700 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066be:	4b60      	ldr	r3, [pc, #384]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11d      	bne.n	8006706 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ce:	e01a      	b.n	8006706 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066d0:	4b5b      	ldr	r3, [pc, #364]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d116      	bne.n	800670a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066e0:	e013      	b.n	800670a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066e2:	4b57      	ldr	r3, [pc, #348]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10f      	bne.n	800670e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066ee:	4b54      	ldr	r3, [pc, #336]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d109      	bne.n	800670e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066fe:	e006      	b.n	800670e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
      break;
 8006704:	e004      	b.n	8006710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006706:	bf00      	nop
 8006708:	e002      	b.n	8006710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800670e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10d      	bne.n	8006732 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006716:	4b4a      	ldr	r3, [pc, #296]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6819      	ldr	r1, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	3b01      	subs	r3, #1
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	430b      	orrs	r3, r1
 800672c:	4944      	ldr	r1, [pc, #272]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800672e:	4313      	orrs	r3, r2
 8006730:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d17d      	bne.n	8006834 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006738:	4b41      	ldr	r3, [pc, #260]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a40      	ldr	r2, [pc, #256]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006744:	f7fc fd98 	bl	8003278 <HAL_GetTick>
 8006748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800674a:	e009      	b.n	8006760 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800674c:	f7fc fd94 	bl	8003278 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d902      	bls.n	8006760 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	73fb      	strb	r3, [r7, #15]
        break;
 800675e:	e005      	b.n	800676c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006760:	4b37      	ldr	r3, [pc, #220]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ef      	bne.n	800674c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d160      	bne.n	8006834 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d111      	bne.n	800679c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006778:	4b31      	ldr	r3, [pc, #196]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6892      	ldr	r2, [r2, #8]
 8006788:	0211      	lsls	r1, r2, #8
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68d2      	ldr	r2, [r2, #12]
 800678e:	0912      	lsrs	r2, r2, #4
 8006790:	0452      	lsls	r2, r2, #17
 8006792:	430a      	orrs	r2, r1
 8006794:	492a      	ldr	r1, [pc, #168]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006796:	4313      	orrs	r3, r2
 8006798:	610b      	str	r3, [r1, #16]
 800679a:	e027      	b.n	80067ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d112      	bne.n	80067c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067a2:	4b27      	ldr	r3, [pc, #156]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6892      	ldr	r2, [r2, #8]
 80067b2:	0211      	lsls	r1, r2, #8
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6912      	ldr	r2, [r2, #16]
 80067b8:	0852      	lsrs	r2, r2, #1
 80067ba:	3a01      	subs	r2, #1
 80067bc:	0552      	lsls	r2, r2, #21
 80067be:	430a      	orrs	r2, r1
 80067c0:	491f      	ldr	r1, [pc, #124]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	610b      	str	r3, [r1, #16]
 80067c6:	e011      	b.n	80067ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6892      	ldr	r2, [r2, #8]
 80067d8:	0211      	lsls	r1, r2, #8
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6952      	ldr	r2, [r2, #20]
 80067de:	0852      	lsrs	r2, r2, #1
 80067e0:	3a01      	subs	r2, #1
 80067e2:	0652      	lsls	r2, r2, #25
 80067e4:	430a      	orrs	r2, r1
 80067e6:	4916      	ldr	r1, [pc, #88]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067ec:	4b14      	ldr	r3, [pc, #80]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a13      	ldr	r2, [pc, #76]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f8:	f7fc fd3e 	bl	8003278 <HAL_GetTick>
 80067fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067fe:	e009      	b.n	8006814 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006800:	f7fc fd3a 	bl	8003278 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d902      	bls.n	8006814 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	73fb      	strb	r3, [r7, #15]
          break;
 8006812:	e005      	b.n	8006820 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ef      	beq.n	8006800 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006828:	691a      	ldr	r2, [r3, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	4904      	ldr	r1, [pc, #16]	; (8006840 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006830:	4313      	orrs	r3, r2
 8006832:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006834:	7bfb      	ldrb	r3, [r7, #15]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000

08006844 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006852:	4b6a      	ldr	r3, [pc, #424]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d018      	beq.n	8006890 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800685e:	4b67      	ldr	r3, [pc, #412]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0203 	and.w	r2, r3, #3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d10d      	bne.n	800688a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
       ||
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006876:	4b61      	ldr	r3, [pc, #388]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
       ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d047      	beq.n	800691a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	73fb      	strb	r3, [r7, #15]
 800688e:	e044      	b.n	800691a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d018      	beq.n	80068ca <RCCEx_PLLSAI2_Config+0x86>
 8006898:	2b03      	cmp	r3, #3
 800689a:	d825      	bhi.n	80068e8 <RCCEx_PLLSAI2_Config+0xa4>
 800689c:	2b01      	cmp	r3, #1
 800689e:	d002      	beq.n	80068a6 <RCCEx_PLLSAI2_Config+0x62>
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d009      	beq.n	80068b8 <RCCEx_PLLSAI2_Config+0x74>
 80068a4:	e020      	b.n	80068e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068a6:	4b55      	ldr	r3, [pc, #340]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d11d      	bne.n	80068ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068b6:	e01a      	b.n	80068ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068b8:	4b50      	ldr	r3, [pc, #320]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d116      	bne.n	80068f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c8:	e013      	b.n	80068f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068ca:	4b4c      	ldr	r3, [pc, #304]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10f      	bne.n	80068f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068d6:	4b49      	ldr	r3, [pc, #292]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d109      	bne.n	80068f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068e6:	e006      	b.n	80068f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
      break;
 80068ec:	e004      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068ee:	bf00      	nop
 80068f0:	e002      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068f2:	bf00      	nop
 80068f4:	e000      	b.n	80068f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80068f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068fe:	4b3f      	ldr	r3, [pc, #252]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	3b01      	subs	r3, #1
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	430b      	orrs	r3, r1
 8006914:	4939      	ldr	r1, [pc, #228]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006916:	4313      	orrs	r3, r2
 8006918:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d167      	bne.n	80069f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006920:	4b36      	ldr	r3, [pc, #216]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a35      	ldr	r2, [pc, #212]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800692a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692c:	f7fc fca4 	bl	8003278 <HAL_GetTick>
 8006930:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006932:	e009      	b.n	8006948 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006934:	f7fc fca0 	bl	8003278 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d902      	bls.n	8006948 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	73fb      	strb	r3, [r7, #15]
        break;
 8006946:	e005      	b.n	8006954 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006948:	4b2c      	ldr	r3, [pc, #176]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ef      	bne.n	8006934 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d14a      	bne.n	80069f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d111      	bne.n	8006984 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006960:	4b26      	ldr	r3, [pc, #152]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6892      	ldr	r2, [r2, #8]
 8006970:	0211      	lsls	r1, r2, #8
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	68d2      	ldr	r2, [r2, #12]
 8006976:	0912      	lsrs	r2, r2, #4
 8006978:	0452      	lsls	r2, r2, #17
 800697a:	430a      	orrs	r2, r1
 800697c:	491f      	ldr	r1, [pc, #124]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800697e:	4313      	orrs	r3, r2
 8006980:	614b      	str	r3, [r1, #20]
 8006982:	e011      	b.n	80069a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006984:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800698c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6892      	ldr	r2, [r2, #8]
 8006994:	0211      	lsls	r1, r2, #8
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6912      	ldr	r2, [r2, #16]
 800699a:	0852      	lsrs	r2, r2, #1
 800699c:	3a01      	subs	r2, #1
 800699e:	0652      	lsls	r2, r2, #25
 80069a0:	430a      	orrs	r2, r1
 80069a2:	4916      	ldr	r1, [pc, #88]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069a8:	4b14      	ldr	r3, [pc, #80]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a13      	ldr	r2, [pc, #76]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b4:	f7fc fc60 	bl	8003278 <HAL_GetTick>
 80069b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069ba:	e009      	b.n	80069d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069bc:	f7fc fc5c 	bl	8003278 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d902      	bls.n	80069d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
          break;
 80069ce:	e005      	b.n	80069dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0ef      	beq.n	80069bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e4:	695a      	ldr	r2, [r3, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	4904      	ldr	r1, [pc, #16]	; (80069fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40021000 	.word	0x40021000

08006a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e095      	b.n	8006b3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d108      	bne.n	8006a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a22:	d009      	beq.n	8006a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	61da      	str	r2, [r3, #28]
 8006a2a:	e005      	b.n	8006a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fb ff16 	bl	8002884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a78:	d902      	bls.n	8006a80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e002      	b.n	8006a86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a8e:	d007      	beq.n	8006aa0 <HAL_SPI_Init+0xa0>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a98:	d002      	beq.n	8006aa0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae2:	ea42 0103 	orr.w	r1, r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	0c1b      	lsrs	r3, r3, #16
 8006afc:	f003 0204 	and.w	r2, r3, #4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b1c:	ea42 0103 	orr.w	r1, r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b088      	sub	sp, #32
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_SPI_Transmit+0x22>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e158      	b.n	8006e1a <HAL_SPI_Transmit+0x2d4>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b70:	f7fc fb82 	bl	8003278 <HAL_GetTick>
 8006b74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
 8006b88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b8a:	e13d      	b.n	8006e08 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Transmit+0x52>
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d102      	bne.n	8006b9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b9c:	e134      	b.n	8006e08 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	88fa      	ldrh	r2, [r7, #6]
 8006bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	88fa      	ldrh	r2, [r7, #6]
 8006bbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be8:	d10f      	bne.n	8006c0a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d007      	beq.n	8006c28 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c30:	d94b      	bls.n	8006cca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <HAL_SPI_Transmit+0xfa>
 8006c3a:	8afb      	ldrh	r3, [r7, #22]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d13e      	bne.n	8006cbe <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	1c9a      	adds	r2, r3, #2
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c64:	e02b      	b.n	8006cbe <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d112      	bne.n	8006c9a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c98:	e011      	b.n	8006cbe <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c9a:	f7fc faed 	bl	8003278 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d803      	bhi.n	8006cb2 <HAL_SPI_Transmit+0x16c>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb0:	d102      	bne.n	8006cb8 <HAL_SPI_Transmit+0x172>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cbc:	e0a4      	b.n	8006e08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1ce      	bne.n	8006c66 <HAL_SPI_Transmit+0x120>
 8006cc8:	e07c      	b.n	8006dc4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_SPI_Transmit+0x192>
 8006cd2:	8afb      	ldrh	r3, [r7, #22]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d170      	bne.n	8006dba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d912      	bls.n	8006d08 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	881a      	ldrh	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf2:	1c9a      	adds	r2, r3, #2
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d06:	e058      	b.n	8006dba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006d2e:	e044      	b.n	8006dba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d12b      	bne.n	8006d96 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d912      	bls.n	8006d6e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	881a      	ldrh	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	1c9a      	adds	r2, r3, #2
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b02      	subs	r3, #2
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d6c:	e025      	b.n	8006dba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d94:	e011      	b.n	8006dba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d96:	f7fc fa6f 	bl	8003278 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d803      	bhi.n	8006dae <HAL_SPI_Transmit+0x268>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dac:	d102      	bne.n	8006db4 <HAL_SPI_Transmit+0x26e>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006db8:	e026      	b.n	8006e08 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1b5      	bne.n	8006d30 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fb57 	bl	800747c <SPI_EndRxTxTransaction>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e000      	b.n	8006e08 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006e06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b08a      	sub	sp, #40	; 0x28
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e30:	2301      	movs	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x26>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e1fb      	b.n	8007240 <HAL_SPI_TransmitReceive+0x41e>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e50:	f7fc fa12 	bl	8003278 <HAL_GetTick>
 8006e54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e64:	887b      	ldrh	r3, [r7, #2]
 8006e66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e6c:	7efb      	ldrb	r3, [r7, #27]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d00e      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0x6e>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e78:	d106      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x66>
 8006e82:	7efb      	ldrb	r3, [r7, #27]
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d003      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006e8e:	e1cd      	b.n	800722c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_SPI_TransmitReceive+0x80>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_TransmitReceive+0x80>
 8006e9c:	887b      	ldrh	r3, [r7, #2]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ea8:	e1c0      	b.n	800722c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d003      	beq.n	8006ebe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2205      	movs	r2, #5
 8006eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	887a      	ldrh	r2, [r7, #2]
 8006ece:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	887a      	ldrh	r2, [r7, #2]
 8006ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	887a      	ldrh	r2, [r7, #2]
 8006ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	887a      	ldrh	r2, [r7, #2]
 8006eea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f00:	d802      	bhi.n	8006f08 <HAL_SPI_TransmitReceive+0xe6>
 8006f02:	8a3b      	ldrh	r3, [r7, #16]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d908      	bls.n	8006f1a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f16:	605a      	str	r2, [r3, #4]
 8006f18:	e007      	b.n	8006f2a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f28:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f34:	2b40      	cmp	r3, #64	; 0x40
 8006f36:	d007      	beq.n	8006f48 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f50:	d97c      	bls.n	800704c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_TransmitReceive+0x13e>
 8006f5a:	8a7b      	ldrh	r3, [r7, #18]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d169      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	881a      	ldrh	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	1c9a      	adds	r2, r3, #2
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f84:	e056      	b.n	8007034 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d11b      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x1aa>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d016      	beq.n	8006fcc <HAL_SPI_TransmitReceive+0x1aa>
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d113      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d11c      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x1f2>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d016      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	b292      	uxth	r2, r2
 8006ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	1c9a      	adds	r2, r3, #2
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007010:	2301      	movs	r3, #1
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007014:	f7fc f930 	bl	8003278 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007020:	429a      	cmp	r2, r3
 8007022:	d807      	bhi.n	8007034 <HAL_SPI_TransmitReceive+0x212>
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702a:	d003      	beq.n	8007034 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007032:	e0fb      	b.n	800722c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1a3      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x164>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d19d      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x164>
 800704a:	e0df      	b.n	800720c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_SPI_TransmitReceive+0x23a>
 8007054:	8a7b      	ldrh	r3, [r7, #18]
 8007056:	2b01      	cmp	r3, #1
 8007058:	f040 80cb 	bne.w	80071f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	d912      	bls.n	800708c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	881a      	ldrh	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	1c9a      	adds	r2, r3, #2
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b02      	subs	r3, #2
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	87da      	strh	r2, [r3, #62]	; 0x3e
 800708a:	e0b2      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b2:	e09e      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d134      	bne.n	800712c <HAL_SPI_TransmitReceive+0x30a>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d02f      	beq.n	800712c <HAL_SPI_TransmitReceive+0x30a>
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d12c      	bne.n	800712c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d912      	bls.n	8007102 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	881a      	ldrh	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b02      	subs	r3, #2
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007100:	e012      	b.n	8007128 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b01      	cmp	r3, #1
 8007138:	d148      	bne.n	80071cc <HAL_SPI_TransmitReceive+0x3aa>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d042      	beq.n	80071cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b01      	cmp	r3, #1
 8007150:	d923      	bls.n	800719a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	b292      	uxth	r2, r2
 800715e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	1c9a      	adds	r2, r3, #2
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b02      	subs	r3, #2
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b01      	cmp	r3, #1
 8007186:	d81f      	bhi.n	80071c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007196:	605a      	str	r2, [r3, #4]
 8007198:	e016      	b.n	80071c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f103 020c 	add.w	r2, r3, #12
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071c8:	2301      	movs	r3, #1
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071cc:	f7fc f854 	bl	8003278 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d8:	429a      	cmp	r2, r3
 80071da:	d803      	bhi.n	80071e4 <HAL_SPI_TransmitReceive+0x3c2>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e2:	d102      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x3c8>
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80071f0:	e01c      	b.n	800722c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f47f af5b 	bne.w	80070b4 <HAL_SPI_TransmitReceive+0x292>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	f47f af54 	bne.w	80070b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f933 	bl	800747c <SPI_EndRxTxTransaction>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2220      	movs	r2, #32
 8007226:	661a      	str	r2, [r3, #96]	; 0x60
 8007228:	e000      	b.n	800722c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800722a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800723c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007240:	4618      	mov	r0, r3
 8007242:	3728      	adds	r7, #40	; 0x28
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007258:	f7fc f80e 	bl	8003278 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	4413      	add	r3, r2
 8007266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007268:	f7fc f806 	bl	8003278 <HAL_GetTick>
 800726c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	015b      	lsls	r3, r3, #5
 8007274:	0d1b      	lsrs	r3, r3, #20
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800727e:	e054      	b.n	800732a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007286:	d050      	beq.n	800732a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007288:	f7fb fff6 	bl	8003278 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	429a      	cmp	r2, r3
 8007296:	d902      	bls.n	800729e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d13d      	bne.n	800731a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072b6:	d111      	bne.n	80072dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072c0:	d004      	beq.n	80072cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ca:	d107      	bne.n	80072dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e4:	d10f      	bne.n	8007306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e017      	b.n	800734a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	3b01      	subs	r3, #1
 8007328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4013      	ands	r3, r2
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	429a      	cmp	r2, r3
 8007338:	bf0c      	ite	eq
 800733a:	2301      	moveq	r3, #1
 800733c:	2300      	movne	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	429a      	cmp	r2, r3
 8007346:	d19b      	bne.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000094 	.word	0x20000094

08007358 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007366:	f7fb ff87 	bl	8003278 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736e:	1a9b      	subs	r3, r3, r2
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	4413      	add	r3, r2
 8007374:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007376:	f7fb ff7f 	bl	8003278 <HAL_GetTick>
 800737a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800737c:	4b3e      	ldr	r3, [pc, #248]	; (8007478 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	00da      	lsls	r2, r3, #3
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	0d1b      	lsrs	r3, r3, #20
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	fb02 f303 	mul.w	r3, r2, r3
 8007392:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007394:	e062      	b.n	800745c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800739c:	d109      	bne.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d106      	bne.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	330c      	adds	r3, #12
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80073b0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b8:	d050      	beq.n	800745c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ba:	f7fb ff5d 	bl	8003278 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d902      	bls.n	80073d0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d13d      	bne.n	800744c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073e8:	d111      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0xb6>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f2:	d004      	beq.n	80073fe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fc:	d107      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007416:	d10f      	bne.n	8007438 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007436:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e010      	b.n	800746e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	3b01      	subs	r3, #1
 800745a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4013      	ands	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d194      	bne.n	8007396 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000094 	.word	0x20000094

0800747c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff ff5f 	bl	8007358 <SPI_WaitFifoStateUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e027      	b.n	8007500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fec4 	bl	8007248 <SPI_WaitFlagStateUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e014      	b.n	8007500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff ff38 	bl	8007358 <SPI_WaitFifoStateUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f2:	f043 0220 	orr.w	r2, r3, #32
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e000      	b.n	8007500 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e049      	b.n	80075ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fb fb2a 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f001 f962 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d001      	beq.n	80075d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e04f      	b.n	8007670 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a23      	ldr	r2, [pc, #140]	; (800767c <HAL_TIM_Base_Start_IT+0xc4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01d      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x76>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fa:	d018      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x76>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a1f      	ldr	r2, [pc, #124]	; (8007680 <HAL_TIM_Base_Start_IT+0xc8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x76>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <HAL_TIM_Base_Start_IT+0xcc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00e      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x76>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1c      	ldr	r2, [pc, #112]	; (8007688 <HAL_TIM_Base_Start_IT+0xd0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d009      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x76>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a1b      	ldr	r2, [pc, #108]	; (800768c <HAL_TIM_Base_Start_IT+0xd4>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d004      	beq.n	800762e <HAL_TIM_Base_Start_IT+0x76>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a19      	ldr	r2, [pc, #100]	; (8007690 <HAL_TIM_Base_Start_IT+0xd8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d115      	bne.n	800765a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	4b17      	ldr	r3, [pc, #92]	; (8007694 <HAL_TIM_Base_Start_IT+0xdc>)
 8007636:	4013      	ands	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b06      	cmp	r3, #6
 800763e:	d015      	beq.n	800766c <HAL_TIM_Base_Start_IT+0xb4>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007646:	d011      	beq.n	800766c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007658:	e008      	b.n	800766c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0201 	orr.w	r2, r2, #1
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e000      	b.n	800766e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40000c00 	.word	0x40000c00
 800768c:	40013400 	.word	0x40013400
 8007690:	40014000 	.word	0x40014000
 8007694:	00010007 	.word	0x00010007

08007698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e049      	b.n	800773e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fb f940 	bl	8002944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f001 f89a 	bl	8008810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <HAL_TIM_PWM_Start_IT+0x24>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	bf14      	ite	ne
 8007764:	2301      	movne	r3, #1
 8007766:	2300      	moveq	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	e03c      	b.n	80077e6 <HAL_TIM_PWM_Start_IT+0x9e>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b04      	cmp	r3, #4
 8007770:	d109      	bne.n	8007786 <HAL_TIM_PWM_Start_IT+0x3e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	bf14      	ite	ne
 800777e:	2301      	movne	r3, #1
 8007780:	2300      	moveq	r3, #0
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e02f      	b.n	80077e6 <HAL_TIM_PWM_Start_IT+0x9e>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b08      	cmp	r3, #8
 800778a:	d109      	bne.n	80077a0 <HAL_TIM_PWM_Start_IT+0x58>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	bf14      	ite	ne
 8007798:	2301      	movne	r3, #1
 800779a:	2300      	moveq	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	e022      	b.n	80077e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b0c      	cmp	r3, #12
 80077a4:	d109      	bne.n	80077ba <HAL_TIM_PWM_Start_IT+0x72>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	e015      	b.n	80077e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d109      	bne.n	80077d4 <HAL_TIM_PWM_Start_IT+0x8c>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	bf14      	ite	ne
 80077cc:	2301      	movne	r3, #1
 80077ce:	2300      	moveq	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	e008      	b.n	80077e6 <HAL_TIM_PWM_Start_IT+0x9e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0e2      	b.n	80079b4 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <HAL_TIM_PWM_Start_IT+0xb6>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077fc:	e023      	b.n	8007846 <HAL_TIM_PWM_Start_IT+0xfe>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d104      	bne.n	800780e <HAL_TIM_PWM_Start_IT+0xc6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800780c:	e01b      	b.n	8007846 <HAL_TIM_PWM_Start_IT+0xfe>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d104      	bne.n	800781e <HAL_TIM_PWM_Start_IT+0xd6>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781c:	e013      	b.n	8007846 <HAL_TIM_PWM_Start_IT+0xfe>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b0c      	cmp	r3, #12
 8007822:	d104      	bne.n	800782e <HAL_TIM_PWM_Start_IT+0xe6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800782c:	e00b      	b.n	8007846 <HAL_TIM_PWM_Start_IT+0xfe>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b10      	cmp	r3, #16
 8007832:	d104      	bne.n	800783e <HAL_TIM_PWM_Start_IT+0xf6>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800783c:	e003      	b.n	8007846 <HAL_TIM_PWM_Start_IT+0xfe>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b0c      	cmp	r3, #12
 800784a:	d841      	bhi.n	80078d0 <HAL_TIM_PWM_Start_IT+0x188>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <HAL_TIM_PWM_Start_IT+0x10c>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	08007889 	.word	0x08007889
 8007858:	080078d1 	.word	0x080078d1
 800785c:	080078d1 	.word	0x080078d1
 8007860:	080078d1 	.word	0x080078d1
 8007864:	0800789b 	.word	0x0800789b
 8007868:	080078d1 	.word	0x080078d1
 800786c:	080078d1 	.word	0x080078d1
 8007870:	080078d1 	.word	0x080078d1
 8007874:	080078ad 	.word	0x080078ad
 8007878:	080078d1 	.word	0x080078d1
 800787c:	080078d1 	.word	0x080078d1
 8007880:	080078d1 	.word	0x080078d1
 8007884:	080078bf 	.word	0x080078bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0202 	orr.w	r2, r2, #2
 8007896:	60da      	str	r2, [r3, #12]
      break;
 8007898:	e01b      	b.n	80078d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0204 	orr.w	r2, r2, #4
 80078a8:	60da      	str	r2, [r3, #12]
      break;
 80078aa:	e012      	b.n	80078d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0208 	orr.w	r2, r2, #8
 80078ba:	60da      	str	r2, [r3, #12]
      break;
 80078bc:	e009      	b.n	80078d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f042 0210 	orr.w	r2, r2, #16
 80078cc:	60da      	str	r2, [r3, #12]
      break;
 80078ce:	e000      	b.n	80078d2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80078d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2201      	movs	r2, #1
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 fb08 	bl	8008ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a35      	ldr	r2, [pc, #212]	; (80079bc <HAL_TIM_PWM_Start_IT+0x274>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d013      	beq.n	8007912 <HAL_TIM_PWM_Start_IT+0x1ca>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a34      	ldr	r2, [pc, #208]	; (80079c0 <HAL_TIM_PWM_Start_IT+0x278>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d00e      	beq.n	8007912 <HAL_TIM_PWM_Start_IT+0x1ca>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a32      	ldr	r2, [pc, #200]	; (80079c4 <HAL_TIM_PWM_Start_IT+0x27c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_TIM_PWM_Start_IT+0x1ca>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a31      	ldr	r2, [pc, #196]	; (80079c8 <HAL_TIM_PWM_Start_IT+0x280>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d004      	beq.n	8007912 <HAL_TIM_PWM_Start_IT+0x1ca>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2f      	ldr	r2, [pc, #188]	; (80079cc <HAL_TIM_PWM_Start_IT+0x284>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d101      	bne.n	8007916 <HAL_TIM_PWM_Start_IT+0x1ce>
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007916:	2300      	movs	r3, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800792a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a22      	ldr	r2, [pc, #136]	; (80079bc <HAL_TIM_PWM_Start_IT+0x274>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01d      	beq.n	8007972 <HAL_TIM_PWM_Start_IT+0x22a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793e:	d018      	beq.n	8007972 <HAL_TIM_PWM_Start_IT+0x22a>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a22      	ldr	r2, [pc, #136]	; (80079d0 <HAL_TIM_PWM_Start_IT+0x288>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <HAL_TIM_PWM_Start_IT+0x22a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00e      	beq.n	8007972 <HAL_TIM_PWM_Start_IT+0x22a>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	; (80079d8 <HAL_TIM_PWM_Start_IT+0x290>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <HAL_TIM_PWM_Start_IT+0x22a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a17      	ldr	r2, [pc, #92]	; (80079c0 <HAL_TIM_PWM_Start_IT+0x278>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <HAL_TIM_PWM_Start_IT+0x22a>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d115      	bne.n	800799e <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	4b18      	ldr	r3, [pc, #96]	; (80079dc <HAL_TIM_PWM_Start_IT+0x294>)
 800797a:	4013      	ands	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b06      	cmp	r3, #6
 8007982:	d015      	beq.n	80079b0 <HAL_TIM_PWM_Start_IT+0x268>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798a:	d011      	beq.n	80079b0 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0201 	orr.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799c:	e008      	b.n	80079b0 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0201 	orr.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	e000      	b.n	80079b2 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40012c00 	.word	0x40012c00
 80079c0:	40013400 	.word	0x40013400
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800
 80079d0:	40000400 	.word	0x40000400
 80079d4:	40000800 	.word	0x40000800
 80079d8:	40000c00 	.word	0x40000c00
 80079dc:	00010007 	.word	0x00010007

080079e0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b0c      	cmp	r3, #12
 80079ee:	d841      	bhi.n	8007a74 <HAL_TIM_PWM_Stop_IT+0x94>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <HAL_TIM_PWM_Stop_IT+0x18>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a2d 	.word	0x08007a2d
 80079fc:	08007a75 	.word	0x08007a75
 8007a00:	08007a75 	.word	0x08007a75
 8007a04:	08007a75 	.word	0x08007a75
 8007a08:	08007a3f 	.word	0x08007a3f
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	08007a75 	.word	0x08007a75
 8007a14:	08007a75 	.word	0x08007a75
 8007a18:	08007a51 	.word	0x08007a51
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	08007a63 	.word	0x08007a63
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0202 	bic.w	r2, r2, #2
 8007a3a:	60da      	str	r2, [r3, #12]
      break;
 8007a3c:	e01b      	b.n	8007a76 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0204 	bic.w	r2, r2, #4
 8007a4c:	60da      	str	r2, [r3, #12]
      break;
 8007a4e:	e012      	b.n	8007a76 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0208 	bic.w	r2, r2, #8
 8007a5e:	60da      	str	r2, [r3, #12]
      break;
 8007a60:	e009      	b.n	8007a76 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0210 	bic.w	r2, r2, #16
 8007a70:	60da      	str	r2, [r3, #12]
      break;
 8007a72:	e000      	b.n	8007a76 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8007a74:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f001 fa36 	bl	8008ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a3e      	ldr	r2, [pc, #248]	; (8007b84 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a3d      	ldr	r2, [pc, #244]	; (8007b88 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00e      	beq.n	8007ab6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a3b      	ldr	r2, [pc, #236]	; (8007b8c <HAL_TIM_PWM_Stop_IT+0x1ac>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d009      	beq.n	8007ab6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a3a      	ldr	r2, [pc, #232]	; (8007b90 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d004      	beq.n	8007ab6 <HAL_TIM_PWM_Stop_IT+0xd6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a38      	ldr	r2, [pc, #224]	; (8007b94 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_PWM_Stop_IT+0xda>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <HAL_TIM_PWM_Stop_IT+0xdc>
 8007aba:	2300      	movs	r3, #0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d017      	beq.n	8007af0 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10f      	bne.n	8007af0 <HAL_TIM_PWM_Stop_IT+0x110>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d107      	bne.n	8007af0 <HAL_TIM_PWM_Stop_IT+0x110>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007aee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a1a      	ldr	r2, [r3, #32]
 8007af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10f      	bne.n	8007b20 <HAL_TIM_PWM_Stop_IT+0x140>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6a1a      	ldr	r2, [r3, #32]
 8007b06:	f240 4344 	movw	r3, #1092	; 0x444
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d107      	bne.n	8007b20 <HAL_TIM_PWM_Stop_IT+0x140>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0201 	bic.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d104      	bne.n	8007b30 <HAL_TIM_PWM_Stop_IT+0x150>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b2e:	e023      	b.n	8007b78 <HAL_TIM_PWM_Stop_IT+0x198>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d104      	bne.n	8007b40 <HAL_TIM_PWM_Stop_IT+0x160>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b3e:	e01b      	b.n	8007b78 <HAL_TIM_PWM_Stop_IT+0x198>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d104      	bne.n	8007b50 <HAL_TIM_PWM_Stop_IT+0x170>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b4e:	e013      	b.n	8007b78 <HAL_TIM_PWM_Stop_IT+0x198>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b0c      	cmp	r3, #12
 8007b54:	d104      	bne.n	8007b60 <HAL_TIM_PWM_Stop_IT+0x180>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b5e:	e00b      	b.n	8007b78 <HAL_TIM_PWM_Stop_IT+0x198>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b10      	cmp	r3, #16
 8007b64:	d104      	bne.n	8007b70 <HAL_TIM_PWM_Stop_IT+0x190>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b6e:	e003      	b.n	8007b78 <HAL_TIM_PWM_Stop_IT+0x198>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40013400 	.word	0x40013400
 8007b8c:	40014000 	.word	0x40014000
 8007b90:	40014400 	.word	0x40014400
 8007b94:	40014800 	.word	0x40014800

08007b98 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d109      	bne.n	8007bc0 <HAL_TIM_PWM_Start_DMA+0x28>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	bf0c      	ite	eq
 8007bb8:	2301      	moveq	r3, #1
 8007bba:	2300      	movne	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	e03c      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d109      	bne.n	8007bda <HAL_TIM_PWM_Start_DMA+0x42>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	bf0c      	ite	eq
 8007bd2:	2301      	moveq	r3, #1
 8007bd4:	2300      	movne	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	e02f      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d109      	bne.n	8007bf4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	e022      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b0c      	cmp	r3, #12
 8007bf8:	d109      	bne.n	8007c0e <HAL_TIM_PWM_Start_DMA+0x76>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	bf0c      	ite	eq
 8007c06:	2301      	moveq	r3, #1
 8007c08:	2300      	movne	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	e015      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d109      	bne.n	8007c28 <HAL_TIM_PWM_Start_DMA+0x90>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	e008      	b.n	8007c3a <HAL_TIM_PWM_Start_DMA+0xa2>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e1a6      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d109      	bne.n	8007c5c <HAL_TIM_PWM_Start_DMA+0xc4>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	bf0c      	ite	eq
 8007c54:	2301      	moveq	r3, #1
 8007c56:	2300      	movne	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	e03c      	b.n	8007cd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d109      	bne.n	8007c76 <HAL_TIM_PWM_Start_DMA+0xde>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	bf0c      	ite	eq
 8007c6e:	2301      	moveq	r3, #1
 8007c70:	2300      	movne	r3, #0
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	e02f      	b.n	8007cd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d109      	bne.n	8007c90 <HAL_TIM_PWM_Start_DMA+0xf8>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	e022      	b.n	8007cd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b0c      	cmp	r3, #12
 8007c94:	d109      	bne.n	8007caa <HAL_TIM_PWM_Start_DMA+0x112>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	bf0c      	ite	eq
 8007ca2:	2301      	moveq	r3, #1
 8007ca4:	2300      	movne	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	e015      	b.n	8007cd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d109      	bne.n	8007cc4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	e008      	b.n	8007cd6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d034      	beq.n	8007d44 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <HAL_TIM_PWM_Start_DMA+0x152>
 8007ce0:	887b      	ldrh	r3, [r7, #2]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e152      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <HAL_TIM_PWM_Start_DMA+0x162>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf8:	e026      	b.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d104      	bne.n	8007d0a <HAL_TIM_PWM_Start_DMA+0x172>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d08:	e01e      	b.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d104      	bne.n	8007d1a <HAL_TIM_PWM_Start_DMA+0x182>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d18:	e016      	b.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b0c      	cmp	r3, #12
 8007d1e:	d104      	bne.n	8007d2a <HAL_TIM_PWM_Start_DMA+0x192>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d28:	e00e      	b.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d104      	bne.n	8007d3a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d38:	e006      	b.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d42:	e001      	b.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e123      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b0c      	cmp	r3, #12
 8007d4c:	f200 80ae 	bhi.w	8007eac <HAL_TIM_PWM_Start_DMA+0x314>
 8007d50:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d8d 	.word	0x08007d8d
 8007d5c:	08007ead 	.word	0x08007ead
 8007d60:	08007ead 	.word	0x08007ead
 8007d64:	08007ead 	.word	0x08007ead
 8007d68:	08007dd5 	.word	0x08007dd5
 8007d6c:	08007ead 	.word	0x08007ead
 8007d70:	08007ead 	.word	0x08007ead
 8007d74:	08007ead 	.word	0x08007ead
 8007d78:	08007e1d 	.word	0x08007e1d
 8007d7c:	08007ead 	.word	0x08007ead
 8007d80:	08007ead 	.word	0x08007ead
 8007d84:	08007ead 	.word	0x08007ead
 8007d88:	08007e65 	.word	0x08007e65
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	4a81      	ldr	r2, [pc, #516]	; (8007f98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d98:	4a80      	ldr	r2, [pc, #512]	; (8007f9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	4a7f      	ldr	r2, [pc, #508]	; (8007fa0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007da2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007da8:	6879      	ldr	r1, [r7, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3334      	adds	r3, #52	; 0x34
 8007db0:	461a      	mov	r2, r3
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	f7fc fe7e 	bl	8004ab4 <HAL_DMA_Start_IT>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e0e6      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd0:	60da      	str	r2, [r3, #12]
      break;
 8007dd2:	e06c      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	4a6f      	ldr	r2, [pc, #444]	; (8007f98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	4a6e      	ldr	r2, [pc, #440]	; (8007f9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8007de2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	4a6d      	ldr	r2, [pc, #436]	; (8007fa0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3338      	adds	r3, #56	; 0x38
 8007df8:	461a      	mov	r2, r3
 8007dfa:	887b      	ldrh	r3, [r7, #2]
 8007dfc:	f7fc fe5a 	bl	8004ab4 <HAL_DMA_Start_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e0c2      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e18:	60da      	str	r2, [r3, #12]
      break;
 8007e1a:	e048      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a5d      	ldr	r2, [pc, #372]	; (8007f98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8007e22:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	4a5c      	ldr	r2, [pc, #368]	; (8007f9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8007e2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	4a5b      	ldr	r2, [pc, #364]	; (8007fa0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007e32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	333c      	adds	r3, #60	; 0x3c
 8007e40:	461a      	mov	r2, r3
 8007e42:	887b      	ldrh	r3, [r7, #2]
 8007e44:	f7fc fe36 	bl	8004ab4 <HAL_DMA_Start_IT>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e09e      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e60:	60da      	str	r2, [r3, #12]
      break;
 8007e62:	e024      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e68:	4a4b      	ldr	r2, [pc, #300]	; (8007f98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8007e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	4a4a      	ldr	r2, [pc, #296]	; (8007f9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e78:	4a49      	ldr	r2, [pc, #292]	; (8007fa0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8007e7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e80:	6879      	ldr	r1, [r7, #4]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3340      	adds	r3, #64	; 0x40
 8007e88:	461a      	mov	r2, r3
 8007e8a:	887b      	ldrh	r3, [r7, #2]
 8007e8c:	f7fc fe12 	bl	8004ab4 <HAL_DMA_Start_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e07a      	b.n	8007f90 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ea8:	60da      	str	r2, [r3, #12]
      break;
 8007eaa:	e000      	b.n	8007eae <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8007eac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 f81a 	bl	8008ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a38      	ldr	r2, [pc, #224]	; (8007fa4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d013      	beq.n	8007eee <HAL_TIM_PWM_Start_DMA+0x356>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a37      	ldr	r2, [pc, #220]	; (8007fa8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d00e      	beq.n	8007eee <HAL_TIM_PWM_Start_DMA+0x356>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a35      	ldr	r2, [pc, #212]	; (8007fac <HAL_TIM_PWM_Start_DMA+0x414>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d009      	beq.n	8007eee <HAL_TIM_PWM_Start_DMA+0x356>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a34      	ldr	r2, [pc, #208]	; (8007fb0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <HAL_TIM_PWM_Start_DMA+0x356>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a32      	ldr	r2, [pc, #200]	; (8007fb4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <HAL_TIM_PWM_Start_DMA+0x35c>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a25      	ldr	r2, [pc, #148]	; (8007fa4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d01d      	beq.n	8007f4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d018      	beq.n	8007f4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a25      	ldr	r2, [pc, #148]	; (8007fb8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d013      	beq.n	8007f4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a24      	ldr	r2, [pc, #144]	; (8007fbc <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00e      	beq.n	8007f4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d009      	beq.n	8007f4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1a      	ldr	r2, [pc, #104]	; (8007fa8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a18      	ldr	r2, [pc, #96]	; (8007fac <HAL_TIM_PWM_Start_DMA+0x414>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d115      	bne.n	8007f7a <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	4b1b      	ldr	r3, [pc, #108]	; (8007fc4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b06      	cmp	r3, #6
 8007f5e:	d015      	beq.n	8007f8c <HAL_TIM_PWM_Start_DMA+0x3f4>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f66:	d011      	beq.n	8007f8c <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0201 	orr.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	e008      	b.n	8007f8c <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e000      	b.n	8007f8e <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	080086ff 	.word	0x080086ff
 8007f9c:	080087a7 	.word	0x080087a7
 8007fa0:	0800866d 	.word	0x0800866d
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40013400 	.word	0x40013400
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800
 8007fb8:	40000400 	.word	0x40000400
 8007fbc:	40000800 	.word	0x40000800
 8007fc0:	40000c00 	.word	0x40000c00
 8007fc4:	00010007 	.word	0x00010007

08007fc8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	d855      	bhi.n	8008084 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007fd8:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008015 	.word	0x08008015
 8007fe4:	08008085 	.word	0x08008085
 8007fe8:	08008085 	.word	0x08008085
 8007fec:	08008085 	.word	0x08008085
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008085 	.word	0x08008085
 8007ff8:	08008085 	.word	0x08008085
 8007ffc:	08008085 	.word	0x08008085
 8008000:	0800804d 	.word	0x0800804d
 8008004:	08008085 	.word	0x08008085
 8008008:	08008085 	.word	0x08008085
 800800c:	08008085 	.word	0x08008085
 8008010:	08008069 	.word	0x08008069
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008022:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	4618      	mov	r0, r3
 800802a:	f7fc fda3 	bl	8004b74 <HAL_DMA_Abort_IT>
      break;
 800802e:	e02a      	b.n	8008086 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800803e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	4618      	mov	r0, r3
 8008046:	f7fc fd95 	bl	8004b74 <HAL_DMA_Abort_IT>
      break;
 800804a:	e01c      	b.n	8008086 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800805a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	4618      	mov	r0, r3
 8008062:	f7fc fd87 	bl	8004b74 <HAL_DMA_Abort_IT>
      break;
 8008066:	e00e      	b.n	8008086 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008076:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807c:	4618      	mov	r0, r3
 800807e:	f7fc fd79 	bl	8004b74 <HAL_DMA_Abort_IT>
      break;
 8008082:	e000      	b.n	8008086 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8008084:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 ff2e 	bl	8008ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a3e      	ldr	r2, [pc, #248]	; (8008194 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d013      	beq.n	80080c6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a3d      	ldr	r2, [pc, #244]	; (8008198 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00e      	beq.n	80080c6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a3b      	ldr	r2, [pc, #236]	; (800819c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d009      	beq.n	80080c6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a3a      	ldr	r2, [pc, #232]	; (80081a0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d004      	beq.n	80080c6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a38      	ldr	r2, [pc, #224]	; (80081a4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d101      	bne.n	80080ca <HAL_TIM_PWM_Stop_DMA+0x102>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <HAL_TIM_PWM_Stop_DMA+0x104>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d017      	beq.n	8008100 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6a1a      	ldr	r2, [r3, #32]
 80080d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80080da:	4013      	ands	r3, r2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10f      	bne.n	8008100 <HAL_TIM_PWM_Stop_DMA+0x138>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6a1a      	ldr	r2, [r3, #32]
 80080e6:	f240 4344 	movw	r3, #1092	; 0x444
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d107      	bne.n	8008100 <HAL_TIM_PWM_Stop_DMA+0x138>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6a1a      	ldr	r2, [r3, #32]
 8008106:	f241 1311 	movw	r3, #4369	; 0x1111
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10f      	bne.n	8008130 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6a1a      	ldr	r2, [r3, #32]
 8008116:	f240 4344 	movw	r3, #1092	; 0x444
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d107      	bne.n	8008130 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f022 0201 	bic.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800813e:	e023      	b.n	8008188 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b04      	cmp	r3, #4
 8008144:	d104      	bne.n	8008150 <HAL_TIM_PWM_Stop_DMA+0x188>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800814e:	e01b      	b.n	8008188 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b08      	cmp	r3, #8
 8008154:	d104      	bne.n	8008160 <HAL_TIM_PWM_Stop_DMA+0x198>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800815e:	e013      	b.n	8008188 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b0c      	cmp	r3, #12
 8008164:	d104      	bne.n	8008170 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800816e:	e00b      	b.n	8008188 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b10      	cmp	r3, #16
 8008174:	d104      	bne.n	8008180 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800817e:	e003      	b.n	8008188 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40012c00 	.word	0x40012c00
 8008198:	40013400 	.word	0x40013400
 800819c:	40014000 	.word	0x40014000
 80081a0:	40014400 	.word	0x40014400
 80081a4:	40014800 	.word	0x40014800

080081a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d122      	bne.n	8008204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d11b      	bne.n	8008204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0202 	mvn.w	r2, #2
 80081d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa16 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 80081f0:	e005      	b.n	80081fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fa08 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7f8 fe7f 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b04      	cmp	r3, #4
 8008210:	d122      	bne.n	8008258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d11b      	bne.n	8008258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0204 	mvn.w	r2, #4
 8008228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f9ec 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008244:	e005      	b.n	8008252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f9de 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7f8 fe55 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b08      	cmp	r3, #8
 8008264:	d122      	bne.n	80082ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b08      	cmp	r3, #8
 8008272:	d11b      	bne.n	80082ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0208 	mvn.w	r2, #8
 800827c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2204      	movs	r2, #4
 8008282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f9c2 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008298:	e005      	b.n	80082a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f9b4 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7f8 fe2b 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0310 	and.w	r3, r3, #16
 80082b6:	2b10      	cmp	r3, #16
 80082b8:	d122      	bne.n	8008300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b10      	cmp	r3, #16
 80082c6:	d11b      	bne.n	8008300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0210 	mvn.w	r2, #16
 80082d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2208      	movs	r2, #8
 80082d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f998 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f98a 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7f8 fe01 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b01      	cmp	r3, #1
 800830c:	d10e      	bne.n	800832c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b01      	cmp	r3, #1
 800831a:	d107      	bne.n	800832c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0201 	mvn.w	r2, #1
 8008324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f9 fcf6 	bl	8001d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008336:	2b80      	cmp	r3, #128	; 0x80
 8008338:	d10e      	bne.n	8008358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008344:	2b80      	cmp	r3, #128	; 0x80
 8008346:	d107      	bne.n	8008358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 ff02 	bl	800915c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008366:	d10e      	bne.n	8008386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	d107      	bne.n	8008386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fef5 	bl	8009170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008390:	2b40      	cmp	r3, #64	; 0x40
 8008392:	d10e      	bne.n	80083b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d107      	bne.n	80083b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f949 	bl	8008644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d10e      	bne.n	80083de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d107      	bne.n	80083de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f06f 0220 	mvn.w	r2, #32
 80083d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 feb5 	bl	8009148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80083fe:	2302      	movs	r3, #2
 8008400:	e0fd      	b.n	80085fe <HAL_TIM_PWM_ConfigChannel+0x216>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b14      	cmp	r3, #20
 800840e:	f200 80f0 	bhi.w	80085f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	0800846d 	.word	0x0800846d
 800841c:	080085f3 	.word	0x080085f3
 8008420:	080085f3 	.word	0x080085f3
 8008424:	080085f3 	.word	0x080085f3
 8008428:	080084ad 	.word	0x080084ad
 800842c:	080085f3 	.word	0x080085f3
 8008430:	080085f3 	.word	0x080085f3
 8008434:	080085f3 	.word	0x080085f3
 8008438:	080084ef 	.word	0x080084ef
 800843c:	080085f3 	.word	0x080085f3
 8008440:	080085f3 	.word	0x080085f3
 8008444:	080085f3 	.word	0x080085f3
 8008448:	0800852f 	.word	0x0800852f
 800844c:	080085f3 	.word	0x080085f3
 8008450:	080085f3 	.word	0x080085f3
 8008454:	080085f3 	.word	0x080085f3
 8008458:	08008571 	.word	0x08008571
 800845c:	080085f3 	.word	0x080085f3
 8008460:	080085f3 	.word	0x080085f3
 8008464:	080085f3 	.word	0x080085f3
 8008468:	080085b1 	.word	0x080085b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fa66 	bl	8008944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0208 	orr.w	r2, r2, #8
 8008486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0204 	bic.w	r2, r2, #4
 8008496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6999      	ldr	r1, [r3, #24]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	691a      	ldr	r2, [r3, #16]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	619a      	str	r2, [r3, #24]
      break;
 80084aa:	e0a3      	b.n	80085f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fad6 	bl	8008a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	699a      	ldr	r2, [r3, #24]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6999      	ldr	r1, [r3, #24]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	021a      	lsls	r2, r3, #8
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	619a      	str	r2, [r3, #24]
      break;
 80084ec:	e082      	b.n	80085f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fb3f 	bl	8008b78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0208 	orr.w	r2, r2, #8
 8008508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69da      	ldr	r2, [r3, #28]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0204 	bic.w	r2, r2, #4
 8008518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69d9      	ldr	r1, [r3, #28]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	691a      	ldr	r2, [r3, #16]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	61da      	str	r2, [r3, #28]
      break;
 800852c:	e062      	b.n	80085f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fba7 	bl	8008c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69da      	ldr	r2, [r3, #28]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69d9      	ldr	r1, [r3, #28]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	021a      	lsls	r2, r3, #8
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	61da      	str	r2, [r3, #28]
      break;
 800856e:	e041      	b.n	80085f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fbf0 	bl	8008d5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0208 	orr.w	r2, r2, #8
 800858a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0204 	bic.w	r2, r2, #4
 800859a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691a      	ldr	r2, [r3, #16]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085ae:	e021      	b.n	80085f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68b9      	ldr	r1, [r7, #8]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fc34 	bl	8008e24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	021a      	lsls	r2, r3, #8
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	430a      	orrs	r2, r1
 80085ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085f0:	e000      	b.n	80085f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80085f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop

08008608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d107      	bne.n	8008694 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008692:	e02a      	b.n	80086ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	429a      	cmp	r2, r3
 800869c:	d107      	bne.n	80086ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2202      	movs	r2, #2
 80086a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086ac:	e01d      	b.n	80086ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d107      	bne.n	80086c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2204      	movs	r2, #4
 80086bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c6:	e010      	b.n	80086ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d107      	bne.n	80086e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2208      	movs	r2, #8
 80086d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086e0:	e003      	b.n	80086ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f7ff ffb4 	bl	8008658 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	771a      	strb	r2, [r3, #28]
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d10b      	bne.n	800872e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2201      	movs	r2, #1
 800871a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d136      	bne.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800872c:	e031      	b.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d10b      	bne.n	8008750 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2202      	movs	r2, #2
 800873c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d125      	bne.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800874e:	e020      	b.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d10b      	bne.n	8008772 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2204      	movs	r2, #4
 800875e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d114      	bne.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008770:	e00f      	b.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d10a      	bne.n	8008792 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2208      	movs	r2, #8
 8008780:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7f8 fbb2 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	771a      	strb	r2, [r3, #28]
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d103      	bne.n	80087c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	771a      	strb	r2, [r3, #28]
 80087c4:	e019      	b.n	80087fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d103      	bne.n	80087d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2202      	movs	r2, #2
 80087d4:	771a      	strb	r2, [r3, #28]
 80087d6:	e010      	b.n	80087fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d103      	bne.n	80087ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2204      	movs	r2, #4
 80087e6:	771a      	strb	r2, [r3, #28]
 80087e8:	e007      	b.n	80087fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d102      	bne.n	80087fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2208      	movs	r2, #8
 80087f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff ff18 	bl	8008630 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	771a      	strb	r2, [r3, #28]
}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a40      	ldr	r2, [pc, #256]	; (8008924 <TIM_Base_SetConfig+0x114>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a3d      	ldr	r2, [pc, #244]	; (8008928 <TIM_Base_SetConfig+0x118>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a3c      	ldr	r2, [pc, #240]	; (800892c <TIM_Base_SetConfig+0x11c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a3b      	ldr	r2, [pc, #236]	; (8008930 <TIM_Base_SetConfig+0x120>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0x40>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a3a      	ldr	r2, [pc, #232]	; (8008934 <TIM_Base_SetConfig+0x124>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2f      	ldr	r2, [pc, #188]	; (8008924 <TIM_Base_SetConfig+0x114>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01f      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008870:	d01b      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2c      	ldr	r2, [pc, #176]	; (8008928 <TIM_Base_SetConfig+0x118>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d017      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2b      	ldr	r2, [pc, #172]	; (800892c <TIM_Base_SetConfig+0x11c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d013      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a2a      	ldr	r2, [pc, #168]	; (8008930 <TIM_Base_SetConfig+0x120>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00f      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a29      	ldr	r2, [pc, #164]	; (8008934 <TIM_Base_SetConfig+0x124>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00b      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a28      	ldr	r2, [pc, #160]	; (8008938 <TIM_Base_SetConfig+0x128>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d007      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a27      	ldr	r2, [pc, #156]	; (800893c <TIM_Base_SetConfig+0x12c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d003      	beq.n	80088aa <TIM_Base_SetConfig+0x9a>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a26      	ldr	r2, [pc, #152]	; (8008940 <TIM_Base_SetConfig+0x130>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d108      	bne.n	80088bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <TIM_Base_SetConfig+0x114>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00f      	beq.n	8008908 <TIM_Base_SetConfig+0xf8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a12      	ldr	r2, [pc, #72]	; (8008934 <TIM_Base_SetConfig+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_Base_SetConfig+0xf8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a11      	ldr	r2, [pc, #68]	; (8008938 <TIM_Base_SetConfig+0x128>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_Base_SetConfig+0xf8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a10      	ldr	r2, [pc, #64]	; (800893c <TIM_Base_SetConfig+0x12c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_Base_SetConfig+0xf8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a0f      	ldr	r2, [pc, #60]	; (8008940 <TIM_Base_SetConfig+0x130>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d103      	bne.n	8008910 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	615a      	str	r2, [r3, #20]
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	40012c00 	.word	0x40012c00
 8008928:	40000400 	.word	0x40000400
 800892c:	40000800 	.word	0x40000800
 8008930:	40000c00 	.word	0x40000c00
 8008934:	40013400 	.word	0x40013400
 8008938:	40014000 	.word	0x40014000
 800893c:	40014400 	.word	0x40014400
 8008940:	40014800 	.word	0x40014800

08008944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f023 0201 	bic.w	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4313      	orrs	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f023 0302 	bic.w	r3, r3, #2
 8008990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	4313      	orrs	r3, r2
 800899a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a2c      	ldr	r2, [pc, #176]	; (8008a50 <TIM_OC1_SetConfig+0x10c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00f      	beq.n	80089c4 <TIM_OC1_SetConfig+0x80>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a2b      	ldr	r2, [pc, #172]	; (8008a54 <TIM_OC1_SetConfig+0x110>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00b      	beq.n	80089c4 <TIM_OC1_SetConfig+0x80>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a2a      	ldr	r2, [pc, #168]	; (8008a58 <TIM_OC1_SetConfig+0x114>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <TIM_OC1_SetConfig+0x80>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a29      	ldr	r2, [pc, #164]	; (8008a5c <TIM_OC1_SetConfig+0x118>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_OC1_SetConfig+0x80>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a28      	ldr	r2, [pc, #160]	; (8008a60 <TIM_OC1_SetConfig+0x11c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d10c      	bne.n	80089de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f023 0308 	bic.w	r3, r3, #8
 80089ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f023 0304 	bic.w	r3, r3, #4
 80089dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a1b      	ldr	r2, [pc, #108]	; (8008a50 <TIM_OC1_SetConfig+0x10c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d00f      	beq.n	8008a06 <TIM_OC1_SetConfig+0xc2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a1a      	ldr	r2, [pc, #104]	; (8008a54 <TIM_OC1_SetConfig+0x110>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00b      	beq.n	8008a06 <TIM_OC1_SetConfig+0xc2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a19      	ldr	r2, [pc, #100]	; (8008a58 <TIM_OC1_SetConfig+0x114>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d007      	beq.n	8008a06 <TIM_OC1_SetConfig+0xc2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a18      	ldr	r2, [pc, #96]	; (8008a5c <TIM_OC1_SetConfig+0x118>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d003      	beq.n	8008a06 <TIM_OC1_SetConfig+0xc2>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a17      	ldr	r2, [pc, #92]	; (8008a60 <TIM_OC1_SetConfig+0x11c>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d111      	bne.n	8008a2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	621a      	str	r2, [r3, #32]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40013400 	.word	0x40013400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800

08008a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	f023 0210 	bic.w	r2, r3, #16
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f023 0320 	bic.w	r3, r3, #32
 8008ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a28      	ldr	r2, [pc, #160]	; (8008b64 <TIM_OC2_SetConfig+0x100>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d003      	beq.n	8008ad0 <TIM_OC2_SetConfig+0x6c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a27      	ldr	r2, [pc, #156]	; (8008b68 <TIM_OC2_SetConfig+0x104>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10d      	bne.n	8008aec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <TIM_OC2_SetConfig+0x100>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00f      	beq.n	8008b14 <TIM_OC2_SetConfig+0xb0>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a1c      	ldr	r2, [pc, #112]	; (8008b68 <TIM_OC2_SetConfig+0x104>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <TIM_OC2_SetConfig+0xb0>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a1b      	ldr	r2, [pc, #108]	; (8008b6c <TIM_OC2_SetConfig+0x108>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d007      	beq.n	8008b14 <TIM_OC2_SetConfig+0xb0>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a1a      	ldr	r2, [pc, #104]	; (8008b70 <TIM_OC2_SetConfig+0x10c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <TIM_OC2_SetConfig+0xb0>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a19      	ldr	r2, [pc, #100]	; (8008b74 <TIM_OC2_SetConfig+0x110>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d113      	bne.n	8008b3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	621a      	str	r2, [r3, #32]
}
 8008b56:	bf00      	nop
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40012c00 	.word	0x40012c00
 8008b68:	40013400 	.word	0x40013400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40014400 	.word	0x40014400
 8008b74:	40014800 	.word	0x40014800

08008b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a27      	ldr	r2, [pc, #156]	; (8008c74 <TIM_OC3_SetConfig+0xfc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d003      	beq.n	8008be2 <TIM_OC3_SetConfig+0x6a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a26      	ldr	r2, [pc, #152]	; (8008c78 <TIM_OC3_SetConfig+0x100>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d10d      	bne.n	8008bfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	021b      	lsls	r3, r3, #8
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a1c      	ldr	r2, [pc, #112]	; (8008c74 <TIM_OC3_SetConfig+0xfc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00f      	beq.n	8008c26 <TIM_OC3_SetConfig+0xae>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <TIM_OC3_SetConfig+0x100>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00b      	beq.n	8008c26 <TIM_OC3_SetConfig+0xae>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1a      	ldr	r2, [pc, #104]	; (8008c7c <TIM_OC3_SetConfig+0x104>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d007      	beq.n	8008c26 <TIM_OC3_SetConfig+0xae>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a19      	ldr	r2, [pc, #100]	; (8008c80 <TIM_OC3_SetConfig+0x108>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d003      	beq.n	8008c26 <TIM_OC3_SetConfig+0xae>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a18      	ldr	r2, [pc, #96]	; (8008c84 <TIM_OC3_SetConfig+0x10c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d113      	bne.n	8008c4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	621a      	str	r2, [r3, #32]
}
 8008c68:	bf00      	nop
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	40012c00 	.word	0x40012c00
 8008c78:	40013400 	.word	0x40013400
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40014400 	.word	0x40014400
 8008c84:	40014800 	.word	0x40014800

08008c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	031b      	lsls	r3, r3, #12
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <TIM_OC4_SetConfig+0xc0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00f      	beq.n	8008d0c <TIM_OC4_SetConfig+0x84>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <TIM_OC4_SetConfig+0xc4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d00b      	beq.n	8008d0c <TIM_OC4_SetConfig+0x84>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a16      	ldr	r2, [pc, #88]	; (8008d50 <TIM_OC4_SetConfig+0xc8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_OC4_SetConfig+0x84>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <TIM_OC4_SetConfig+0xcc>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_OC4_SetConfig+0x84>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <TIM_OC4_SetConfig+0xd0>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d109      	bne.n	8008d20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	019b      	lsls	r3, r3, #6
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40012c00 	.word	0x40012c00
 8008d4c:	40013400 	.word	0x40013400
 8008d50:	40014000 	.word	0x40014000
 8008d54:	40014400 	.word	0x40014400
 8008d58:	40014800 	.word	0x40014800

08008d5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008da0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	041b      	lsls	r3, r3, #16
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <TIM_OC5_SetConfig+0xb4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00f      	beq.n	8008dd6 <TIM_OC5_SetConfig+0x7a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a16      	ldr	r2, [pc, #88]	; (8008e14 <TIM_OC5_SetConfig+0xb8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00b      	beq.n	8008dd6 <TIM_OC5_SetConfig+0x7a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <TIM_OC5_SetConfig+0xbc>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d007      	beq.n	8008dd6 <TIM_OC5_SetConfig+0x7a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a14      	ldr	r2, [pc, #80]	; (8008e1c <TIM_OC5_SetConfig+0xc0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_OC5_SetConfig+0x7a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a13      	ldr	r2, [pc, #76]	; (8008e20 <TIM_OC5_SetConfig+0xc4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d109      	bne.n	8008dea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	621a      	str	r2, [r3, #32]
}
 8008e04:	bf00      	nop
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40012c00 	.word	0x40012c00
 8008e14:	40013400 	.word	0x40013400
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	40014400 	.word	0x40014400
 8008e20:	40014800 	.word	0x40014800

08008e24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	051b      	lsls	r3, r3, #20
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a18      	ldr	r2, [pc, #96]	; (8008edc <TIM_OC6_SetConfig+0xb8>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d00f      	beq.n	8008ea0 <TIM_OC6_SetConfig+0x7c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a17      	ldr	r2, [pc, #92]	; (8008ee0 <TIM_OC6_SetConfig+0xbc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00b      	beq.n	8008ea0 <TIM_OC6_SetConfig+0x7c>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a16      	ldr	r2, [pc, #88]	; (8008ee4 <TIM_OC6_SetConfig+0xc0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d007      	beq.n	8008ea0 <TIM_OC6_SetConfig+0x7c>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <TIM_OC6_SetConfig+0xc4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_OC6_SetConfig+0x7c>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a14      	ldr	r2, [pc, #80]	; (8008eec <TIM_OC6_SetConfig+0xc8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d109      	bne.n	8008eb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	029b      	lsls	r3, r3, #10
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	621a      	str	r2, [r3, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	40012c00 	.word	0x40012c00
 8008ee0:	40013400 	.word	0x40013400
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400
 8008eec:	40014800 	.word	0x40014800

08008ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	2201      	movs	r2, #1
 8008f04:	fa02 f303 	lsl.w	r3, r2, r3
 8008f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a1a      	ldr	r2, [r3, #32]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	43db      	mvns	r3, r3
 8008f12:	401a      	ands	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a1a      	ldr	r2, [r3, #32]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f003 031f 	and.w	r3, r3, #31
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	fa01 f303 	lsl.w	r3, r1, r3
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	621a      	str	r2, [r3, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e068      	b.n	8009026 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a2e      	ldr	r2, [pc, #184]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d004      	beq.n	8008f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a2d      	ldr	r2, [pc, #180]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d108      	bne.n	8008f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a1e      	ldr	r2, [pc, #120]	; (8009034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d01d      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc6:	d018      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a1b      	ldr	r2, [pc, #108]	; (800903c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d013      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a1a      	ldr	r2, [pc, #104]	; (8009040 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d00e      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a18      	ldr	r2, [pc, #96]	; (8009044 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d009      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a13      	ldr	r2, [pc, #76]	; (8009038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d004      	beq.n	8008ffa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a14      	ldr	r2, [pc, #80]	; (8009048 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d10c      	bne.n	8009014 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	4313      	orrs	r3, r2
 800900a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40012c00 	.word	0x40012c00
 8009038:	40013400 	.word	0x40013400
 800903c:	40000400 	.word	0x40000400
 8009040:	40000800 	.word	0x40000800
 8009044:	40000c00 	.word	0x40000c00
 8009048:	40014000 	.word	0x40014000

0800904c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009064:	2302      	movs	r3, #2
 8009066:	e065      	b.n	8009134 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	4313      	orrs	r3, r2
 800907c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4313      	orrs	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	041b      	lsls	r3, r3, #16
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a16      	ldr	r2, [pc, #88]	; (8009140 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d004      	beq.n	80090f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a14      	ldr	r2, [pc, #80]	; (8009144 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d115      	bne.n	8009122 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	051b      	lsls	r3, r3, #20
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	40012c00 	.word	0x40012c00
 8009144:	40013400 	.word	0x40013400

08009148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e040      	b.n	8009218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7f9 fe30 	bl	8002e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2224      	movs	r2, #36	; 0x24
 80091b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 0201 	bic.w	r2, r2, #1
 80091c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8c0 	bl	8009348 <UART_SetConfig>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e022      	b.n	8009218 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d002      	beq.n	80091e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fb3e 	bl	800985c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fbc5 	bl	80099a0 <UART_CheckIdleState>
 8009216:	4603      	mov	r3, r0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08a      	sub	sp, #40	; 0x28
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009234:	2b20      	cmp	r3, #32
 8009236:	f040 8082 	bne.w	800933e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_UART_Transmit+0x26>
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e07a      	b.n	8009340 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009250:	2b01      	cmp	r3, #1
 8009252:	d101      	bne.n	8009258 <HAL_UART_Transmit+0x38>
 8009254:	2302      	movs	r3, #2
 8009256:	e073      	b.n	8009340 <HAL_UART_Transmit+0x120>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2221      	movs	r2, #33	; 0x21
 800926c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800926e:	f7fa f803 	bl	8003278 <HAL_GetTick>
 8009272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	88fa      	ldrh	r2, [r7, #6]
 8009278:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	88fa      	ldrh	r2, [r7, #6]
 8009280:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800928c:	d108      	bne.n	80092a0 <HAL_UART_Transmit+0x80>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d104      	bne.n	80092a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009296:	2300      	movs	r3, #0
 8009298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	e003      	b.n	80092a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80092b0:	e02d      	b.n	800930e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2180      	movs	r1, #128	; 0x80
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 fbb8 	bl	8009a32 <UART_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e039      	b.n	8009340 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10b      	bne.n	80092ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	881a      	ldrh	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092de:	b292      	uxth	r2, r2
 80092e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	3302      	adds	r3, #2
 80092e6:	61bb      	str	r3, [r7, #24]
 80092e8:	e008      	b.n	80092fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	781a      	ldrb	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	b292      	uxth	r2, r2
 80092f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	3301      	adds	r3, #1
 80092fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009302:	b29b      	uxth	r3, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009314:	b29b      	uxth	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1cb      	bne.n	80092b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2200      	movs	r2, #0
 8009322:	2140      	movs	r1, #64	; 0x40
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fb84 	bl	8009a32 <UART_WaitOnFlagUntilTimeout>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e005      	b.n	8009340 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2220      	movs	r2, #32
 8009338:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	e000      	b.n	8009340 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800933e:	2302      	movs	r3, #2
  }
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009348:	b5b0      	push	{r4, r5, r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	689a      	ldr	r2, [r3, #8]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	4313      	orrs	r3, r2
 800936a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	4bad      	ldr	r3, [pc, #692]	; (8009628 <UART_SetConfig+0x2e0>)
 8009374:	4013      	ands	r3, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6812      	ldr	r2, [r2, #0]
 800937a:	69f9      	ldr	r1, [r7, #28]
 800937c:	430b      	orrs	r3, r1
 800937e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4aa2      	ldr	r2, [pc, #648]	; (800962c <UART_SetConfig+0x2e4>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d004      	beq.n	80093b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a99      	ldr	r2, [pc, #612]	; (8009630 <UART_SetConfig+0x2e8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d121      	bne.n	8009412 <UART_SetConfig+0xca>
 80093ce:	4b99      	ldr	r3, [pc, #612]	; (8009634 <UART_SetConfig+0x2ec>)
 80093d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d817      	bhi.n	800940c <UART_SetConfig+0xc4>
 80093dc:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <UART_SetConfig+0x9c>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080093f5 	.word	0x080093f5
 80093e8:	08009401 	.word	0x08009401
 80093ec:	080093fb 	.word	0x080093fb
 80093f0:	08009407 	.word	0x08009407
 80093f4:	2301      	movs	r3, #1
 80093f6:	76fb      	strb	r3, [r7, #27]
 80093f8:	e0e7      	b.n	80095ca <UART_SetConfig+0x282>
 80093fa:	2302      	movs	r3, #2
 80093fc:	76fb      	strb	r3, [r7, #27]
 80093fe:	e0e4      	b.n	80095ca <UART_SetConfig+0x282>
 8009400:	2304      	movs	r3, #4
 8009402:	76fb      	strb	r3, [r7, #27]
 8009404:	e0e1      	b.n	80095ca <UART_SetConfig+0x282>
 8009406:	2308      	movs	r3, #8
 8009408:	76fb      	strb	r3, [r7, #27]
 800940a:	e0de      	b.n	80095ca <UART_SetConfig+0x282>
 800940c:	2310      	movs	r3, #16
 800940e:	76fb      	strb	r3, [r7, #27]
 8009410:	e0db      	b.n	80095ca <UART_SetConfig+0x282>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a88      	ldr	r2, [pc, #544]	; (8009638 <UART_SetConfig+0x2f0>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d132      	bne.n	8009482 <UART_SetConfig+0x13a>
 800941c:	4b85      	ldr	r3, [pc, #532]	; (8009634 <UART_SetConfig+0x2ec>)
 800941e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009422:	f003 030c 	and.w	r3, r3, #12
 8009426:	2b0c      	cmp	r3, #12
 8009428:	d828      	bhi.n	800947c <UART_SetConfig+0x134>
 800942a:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <UART_SetConfig+0xe8>)
 800942c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009430:	08009465 	.word	0x08009465
 8009434:	0800947d 	.word	0x0800947d
 8009438:	0800947d 	.word	0x0800947d
 800943c:	0800947d 	.word	0x0800947d
 8009440:	08009471 	.word	0x08009471
 8009444:	0800947d 	.word	0x0800947d
 8009448:	0800947d 	.word	0x0800947d
 800944c:	0800947d 	.word	0x0800947d
 8009450:	0800946b 	.word	0x0800946b
 8009454:	0800947d 	.word	0x0800947d
 8009458:	0800947d 	.word	0x0800947d
 800945c:	0800947d 	.word	0x0800947d
 8009460:	08009477 	.word	0x08009477
 8009464:	2300      	movs	r3, #0
 8009466:	76fb      	strb	r3, [r7, #27]
 8009468:	e0af      	b.n	80095ca <UART_SetConfig+0x282>
 800946a:	2302      	movs	r3, #2
 800946c:	76fb      	strb	r3, [r7, #27]
 800946e:	e0ac      	b.n	80095ca <UART_SetConfig+0x282>
 8009470:	2304      	movs	r3, #4
 8009472:	76fb      	strb	r3, [r7, #27]
 8009474:	e0a9      	b.n	80095ca <UART_SetConfig+0x282>
 8009476:	2308      	movs	r3, #8
 8009478:	76fb      	strb	r3, [r7, #27]
 800947a:	e0a6      	b.n	80095ca <UART_SetConfig+0x282>
 800947c:	2310      	movs	r3, #16
 800947e:	76fb      	strb	r3, [r7, #27]
 8009480:	e0a3      	b.n	80095ca <UART_SetConfig+0x282>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a6d      	ldr	r2, [pc, #436]	; (800963c <UART_SetConfig+0x2f4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d120      	bne.n	80094ce <UART_SetConfig+0x186>
 800948c:	4b69      	ldr	r3, [pc, #420]	; (8009634 <UART_SetConfig+0x2ec>)
 800948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009492:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009496:	2b30      	cmp	r3, #48	; 0x30
 8009498:	d013      	beq.n	80094c2 <UART_SetConfig+0x17a>
 800949a:	2b30      	cmp	r3, #48	; 0x30
 800949c:	d814      	bhi.n	80094c8 <UART_SetConfig+0x180>
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d009      	beq.n	80094b6 <UART_SetConfig+0x16e>
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d810      	bhi.n	80094c8 <UART_SetConfig+0x180>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <UART_SetConfig+0x168>
 80094aa:	2b10      	cmp	r3, #16
 80094ac:	d006      	beq.n	80094bc <UART_SetConfig+0x174>
 80094ae:	e00b      	b.n	80094c8 <UART_SetConfig+0x180>
 80094b0:	2300      	movs	r3, #0
 80094b2:	76fb      	strb	r3, [r7, #27]
 80094b4:	e089      	b.n	80095ca <UART_SetConfig+0x282>
 80094b6:	2302      	movs	r3, #2
 80094b8:	76fb      	strb	r3, [r7, #27]
 80094ba:	e086      	b.n	80095ca <UART_SetConfig+0x282>
 80094bc:	2304      	movs	r3, #4
 80094be:	76fb      	strb	r3, [r7, #27]
 80094c0:	e083      	b.n	80095ca <UART_SetConfig+0x282>
 80094c2:	2308      	movs	r3, #8
 80094c4:	76fb      	strb	r3, [r7, #27]
 80094c6:	e080      	b.n	80095ca <UART_SetConfig+0x282>
 80094c8:	2310      	movs	r3, #16
 80094ca:	76fb      	strb	r3, [r7, #27]
 80094cc:	e07d      	b.n	80095ca <UART_SetConfig+0x282>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a5b      	ldr	r2, [pc, #364]	; (8009640 <UART_SetConfig+0x2f8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d120      	bne.n	800951a <UART_SetConfig+0x1d2>
 80094d8:	4b56      	ldr	r3, [pc, #344]	; (8009634 <UART_SetConfig+0x2ec>)
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80094e2:	2bc0      	cmp	r3, #192	; 0xc0
 80094e4:	d013      	beq.n	800950e <UART_SetConfig+0x1c6>
 80094e6:	2bc0      	cmp	r3, #192	; 0xc0
 80094e8:	d814      	bhi.n	8009514 <UART_SetConfig+0x1cc>
 80094ea:	2b80      	cmp	r3, #128	; 0x80
 80094ec:	d009      	beq.n	8009502 <UART_SetConfig+0x1ba>
 80094ee:	2b80      	cmp	r3, #128	; 0x80
 80094f0:	d810      	bhi.n	8009514 <UART_SetConfig+0x1cc>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <UART_SetConfig+0x1b4>
 80094f6:	2b40      	cmp	r3, #64	; 0x40
 80094f8:	d006      	beq.n	8009508 <UART_SetConfig+0x1c0>
 80094fa:	e00b      	b.n	8009514 <UART_SetConfig+0x1cc>
 80094fc:	2300      	movs	r3, #0
 80094fe:	76fb      	strb	r3, [r7, #27]
 8009500:	e063      	b.n	80095ca <UART_SetConfig+0x282>
 8009502:	2302      	movs	r3, #2
 8009504:	76fb      	strb	r3, [r7, #27]
 8009506:	e060      	b.n	80095ca <UART_SetConfig+0x282>
 8009508:	2304      	movs	r3, #4
 800950a:	76fb      	strb	r3, [r7, #27]
 800950c:	e05d      	b.n	80095ca <UART_SetConfig+0x282>
 800950e:	2308      	movs	r3, #8
 8009510:	76fb      	strb	r3, [r7, #27]
 8009512:	e05a      	b.n	80095ca <UART_SetConfig+0x282>
 8009514:	2310      	movs	r3, #16
 8009516:	76fb      	strb	r3, [r7, #27]
 8009518:	e057      	b.n	80095ca <UART_SetConfig+0x282>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a49      	ldr	r2, [pc, #292]	; (8009644 <UART_SetConfig+0x2fc>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d125      	bne.n	8009570 <UART_SetConfig+0x228>
 8009524:	4b43      	ldr	r3, [pc, #268]	; (8009634 <UART_SetConfig+0x2ec>)
 8009526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800952a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009532:	d017      	beq.n	8009564 <UART_SetConfig+0x21c>
 8009534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009538:	d817      	bhi.n	800956a <UART_SetConfig+0x222>
 800953a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800953e:	d00b      	beq.n	8009558 <UART_SetConfig+0x210>
 8009540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009544:	d811      	bhi.n	800956a <UART_SetConfig+0x222>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <UART_SetConfig+0x20a>
 800954a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954e:	d006      	beq.n	800955e <UART_SetConfig+0x216>
 8009550:	e00b      	b.n	800956a <UART_SetConfig+0x222>
 8009552:	2300      	movs	r3, #0
 8009554:	76fb      	strb	r3, [r7, #27]
 8009556:	e038      	b.n	80095ca <UART_SetConfig+0x282>
 8009558:	2302      	movs	r3, #2
 800955a:	76fb      	strb	r3, [r7, #27]
 800955c:	e035      	b.n	80095ca <UART_SetConfig+0x282>
 800955e:	2304      	movs	r3, #4
 8009560:	76fb      	strb	r3, [r7, #27]
 8009562:	e032      	b.n	80095ca <UART_SetConfig+0x282>
 8009564:	2308      	movs	r3, #8
 8009566:	76fb      	strb	r3, [r7, #27]
 8009568:	e02f      	b.n	80095ca <UART_SetConfig+0x282>
 800956a:	2310      	movs	r3, #16
 800956c:	76fb      	strb	r3, [r7, #27]
 800956e:	e02c      	b.n	80095ca <UART_SetConfig+0x282>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a2d      	ldr	r2, [pc, #180]	; (800962c <UART_SetConfig+0x2e4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d125      	bne.n	80095c6 <UART_SetConfig+0x27e>
 800957a:	4b2e      	ldr	r3, [pc, #184]	; (8009634 <UART_SetConfig+0x2ec>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009588:	d017      	beq.n	80095ba <UART_SetConfig+0x272>
 800958a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800958e:	d817      	bhi.n	80095c0 <UART_SetConfig+0x278>
 8009590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009594:	d00b      	beq.n	80095ae <UART_SetConfig+0x266>
 8009596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800959a:	d811      	bhi.n	80095c0 <UART_SetConfig+0x278>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d003      	beq.n	80095a8 <UART_SetConfig+0x260>
 80095a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095a4:	d006      	beq.n	80095b4 <UART_SetConfig+0x26c>
 80095a6:	e00b      	b.n	80095c0 <UART_SetConfig+0x278>
 80095a8:	2300      	movs	r3, #0
 80095aa:	76fb      	strb	r3, [r7, #27]
 80095ac:	e00d      	b.n	80095ca <UART_SetConfig+0x282>
 80095ae:	2302      	movs	r3, #2
 80095b0:	76fb      	strb	r3, [r7, #27]
 80095b2:	e00a      	b.n	80095ca <UART_SetConfig+0x282>
 80095b4:	2304      	movs	r3, #4
 80095b6:	76fb      	strb	r3, [r7, #27]
 80095b8:	e007      	b.n	80095ca <UART_SetConfig+0x282>
 80095ba:	2308      	movs	r3, #8
 80095bc:	76fb      	strb	r3, [r7, #27]
 80095be:	e004      	b.n	80095ca <UART_SetConfig+0x282>
 80095c0:	2310      	movs	r3, #16
 80095c2:	76fb      	strb	r3, [r7, #27]
 80095c4:	e001      	b.n	80095ca <UART_SetConfig+0x282>
 80095c6:	2310      	movs	r3, #16
 80095c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a17      	ldr	r2, [pc, #92]	; (800962c <UART_SetConfig+0x2e4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	f040 8087 	bne.w	80096e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80095d6:	7efb      	ldrb	r3, [r7, #27]
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d837      	bhi.n	800964c <UART_SetConfig+0x304>
 80095dc:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <UART_SetConfig+0x29c>)
 80095de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e2:	bf00      	nop
 80095e4:	08009609 	.word	0x08009609
 80095e8:	0800964d 	.word	0x0800964d
 80095ec:	08009611 	.word	0x08009611
 80095f0:	0800964d 	.word	0x0800964d
 80095f4:	08009617 	.word	0x08009617
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	0800964d 	.word	0x0800964d
 8009600:	0800964d 	.word	0x0800964d
 8009604:	0800961f 	.word	0x0800961f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009608:	f7fc fc80 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 800960c:	6178      	str	r0, [r7, #20]
        break;
 800960e:	e022      	b.n	8009656 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009610:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <UART_SetConfig+0x300>)
 8009612:	617b      	str	r3, [r7, #20]
        break;
 8009614:	e01f      	b.n	8009656 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009616:	f7fc fbe1 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 800961a:	6178      	str	r0, [r7, #20]
        break;
 800961c:	e01b      	b.n	8009656 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800961e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009622:	617b      	str	r3, [r7, #20]
        break;
 8009624:	e017      	b.n	8009656 <UART_SetConfig+0x30e>
 8009626:	bf00      	nop
 8009628:	efff69f3 	.word	0xefff69f3
 800962c:	40008000 	.word	0x40008000
 8009630:	40013800 	.word	0x40013800
 8009634:	40021000 	.word	0x40021000
 8009638:	40004400 	.word	0x40004400
 800963c:	40004800 	.word	0x40004800
 8009640:	40004c00 	.word	0x40004c00
 8009644:	40005000 	.word	0x40005000
 8009648:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	76bb      	strb	r3, [r7, #26]
        break;
 8009654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80f1 	beq.w	8009840 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	4613      	mov	r3, r2
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	4413      	add	r3, r2
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	429a      	cmp	r2, r3
 800966c:	d305      	bcc.n	800967a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	429a      	cmp	r2, r3
 8009678:	d902      	bls.n	8009680 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	76bb      	strb	r3, [r7, #26]
 800967e:	e0df      	b.n	8009840 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	4618      	mov	r0, r3
 8009684:	f04f 0100 	mov.w	r1, #0
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	020b      	lsls	r3, r1, #8
 8009692:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009696:	0202      	lsls	r2, r0, #8
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	6849      	ldr	r1, [r1, #4]
 800969c:	0849      	lsrs	r1, r1, #1
 800969e:	4608      	mov	r0, r1
 80096a0:	f04f 0100 	mov.w	r1, #0
 80096a4:	1814      	adds	r4, r2, r0
 80096a6:	eb43 0501 	adc.w	r5, r3, r1
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f04f 0300 	mov.w	r3, #0
 80096b4:	4620      	mov	r0, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	f7f6 fdda 	bl	8000270 <__aeabi_uldivmod>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4613      	mov	r3, r2
 80096c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ca:	d308      	bcc.n	80096de <UART_SetConfig+0x396>
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096d2:	d204      	bcs.n	80096de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	60da      	str	r2, [r3, #12]
 80096dc:	e0b0      	b.n	8009840 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	76bb      	strb	r3, [r7, #26]
 80096e2:	e0ad      	b.n	8009840 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ec:	d15c      	bne.n	80097a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80096ee:	7efb      	ldrb	r3, [r7, #27]
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d828      	bhi.n	8009746 <UART_SetConfig+0x3fe>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <UART_SetConfig+0x3b4>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	08009721 	.word	0x08009721
 8009700:	08009729 	.word	0x08009729
 8009704:	08009731 	.word	0x08009731
 8009708:	08009747 	.word	0x08009747
 800970c:	08009737 	.word	0x08009737
 8009710:	08009747 	.word	0x08009747
 8009714:	08009747 	.word	0x08009747
 8009718:	08009747 	.word	0x08009747
 800971c:	0800973f 	.word	0x0800973f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009720:	f7fc fbf4 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 8009724:	6178      	str	r0, [r7, #20]
        break;
 8009726:	e013      	b.n	8009750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009728:	f7fc fc06 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 800972c:	6178      	str	r0, [r7, #20]
        break;
 800972e:	e00f      	b.n	8009750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009730:	4b49      	ldr	r3, [pc, #292]	; (8009858 <UART_SetConfig+0x510>)
 8009732:	617b      	str	r3, [r7, #20]
        break;
 8009734:	e00c      	b.n	8009750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009736:	f7fc fb51 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 800973a:	6178      	str	r0, [r7, #20]
        break;
 800973c:	e008      	b.n	8009750 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800973e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009742:	617b      	str	r3, [r7, #20]
        break;
 8009744:	e004      	b.n	8009750 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	76bb      	strb	r3, [r7, #26]
        break;
 800974e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d074      	beq.n	8009840 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	005a      	lsls	r2, r3, #1
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	441a      	add	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	fbb2 f3f3 	udiv	r3, r2, r3
 800976a:	b29b      	uxth	r3, r3
 800976c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b0f      	cmp	r3, #15
 8009772:	d916      	bls.n	80097a2 <UART_SetConfig+0x45a>
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977a:	d212      	bcs.n	80097a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	b29b      	uxth	r3, r3
 8009780:	f023 030f 	bic.w	r3, r3, #15
 8009784:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	b29a      	uxth	r2, r3
 8009792:	89fb      	ldrh	r3, [r7, #14]
 8009794:	4313      	orrs	r3, r2
 8009796:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	89fa      	ldrh	r2, [r7, #14]
 800979e:	60da      	str	r2, [r3, #12]
 80097a0:	e04e      	b.n	8009840 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	76bb      	strb	r3, [r7, #26]
 80097a6:	e04b      	b.n	8009840 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80097a8:	7efb      	ldrb	r3, [r7, #27]
 80097aa:	2b08      	cmp	r3, #8
 80097ac:	d827      	bhi.n	80097fe <UART_SetConfig+0x4b6>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <UART_SetConfig+0x46c>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097d9 	.word	0x080097d9
 80097b8:	080097e1 	.word	0x080097e1
 80097bc:	080097e9 	.word	0x080097e9
 80097c0:	080097ff 	.word	0x080097ff
 80097c4:	080097ef 	.word	0x080097ef
 80097c8:	080097ff 	.word	0x080097ff
 80097cc:	080097ff 	.word	0x080097ff
 80097d0:	080097ff 	.word	0x080097ff
 80097d4:	080097f7 	.word	0x080097f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097d8:	f7fc fb98 	bl	8005f0c <HAL_RCC_GetPCLK1Freq>
 80097dc:	6178      	str	r0, [r7, #20]
        break;
 80097de:	e013      	b.n	8009808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097e0:	f7fc fbaa 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 80097e4:	6178      	str	r0, [r7, #20]
        break;
 80097e6:	e00f      	b.n	8009808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097e8:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <UART_SetConfig+0x510>)
 80097ea:	617b      	str	r3, [r7, #20]
        break;
 80097ec:	e00c      	b.n	8009808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ee:	f7fc faf5 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 80097f2:	6178      	str	r0, [r7, #20]
        break;
 80097f4:	e008      	b.n	8009808 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097fa:	617b      	str	r3, [r7, #20]
        break;
 80097fc:	e004      	b.n	8009808 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	76bb      	strb	r3, [r7, #26]
        break;
 8009806:	bf00      	nop
    }

    if (pclk != 0U)
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d018      	beq.n	8009840 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	085a      	lsrs	r2, r3, #1
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	441a      	add	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009820:	b29b      	uxth	r3, r3
 8009822:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2b0f      	cmp	r3, #15
 8009828:	d908      	bls.n	800983c <UART_SetConfig+0x4f4>
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009830:	d204      	bcs.n	800983c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	60da      	str	r2, [r3, #12]
 800983a:	e001      	b.n	8009840 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800984c:	7ebb      	ldrb	r3, [r7, #26]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3720      	adds	r7, #32
 8009852:	46bd      	mov	sp, r7
 8009854:	bdb0      	pop	{r4, r5, r7, pc}
 8009856:	bf00      	nop
 8009858:	00f42400 	.word	0x00f42400

0800985c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00a      	beq.n	8009886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	430a      	orrs	r2, r1
 8009884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00a      	beq.n	80098ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00a      	beq.n	80098ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	430a      	orrs	r2, r1
 80098ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	f003 0310 	and.w	r3, r3, #16
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00a      	beq.n	800990e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	430a      	orrs	r2, r1
 800992e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009938:	2b00      	cmp	r3, #0
 800993a:	d01a      	beq.n	8009972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800995a:	d10a      	bne.n	8009972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	605a      	str	r2, [r3, #4]
  }
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099b0:	f7f9 fc62 	bl	8003278 <HAL_GetTick>
 80099b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d10e      	bne.n	80099e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f82d 	bl	8009a32 <UART_WaitOnFlagUntilTimeout>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e023      	b.n	8009a2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d10e      	bne.n	8009a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f817 	bl	8009a32 <UART_WaitOnFlagUntilTimeout>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e00d      	b.n	8009a2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2220      	movs	r2, #32
 8009a12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2220      	movs	r2, #32
 8009a18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	60f8      	str	r0, [r7, #12]
 8009a3a:	60b9      	str	r1, [r7, #8]
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	4613      	mov	r3, r2
 8009a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a42:	e05e      	b.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a4a:	d05a      	beq.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4c:	f7f9 fc14 	bl	8003278 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	69ba      	ldr	r2, [r7, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d302      	bcc.n	8009a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d11b      	bne.n	8009a9a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2220      	movs	r2, #32
 8009a86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e043      	b.n	8009b22 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f003 0304 	and.w	r3, r3, #4
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d02c      	beq.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ab6:	d124      	bne.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ac0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ad0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2220      	movs	r2, #32
 8009aec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e00f      	b.n	8009b22 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69da      	ldr	r2, [r3, #28]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	bf0c      	ite	eq
 8009b12:	2301      	moveq	r3, #1
 8009b14:	2300      	movne	r3, #0
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d091      	beq.n	8009a44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009b30:	4904      	ldr	r1, [pc, #16]	; (8009b44 <MX_FATFS_Init+0x18>)
 8009b32:	4805      	ldr	r0, [pc, #20]	; (8009b48 <MX_FATFS_Init+0x1c>)
 8009b34:	f000 f8ae 	bl	8009c94 <FATFS_LinkDriver>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	4b03      	ldr	r3, [pc, #12]	; (8009b4c <MX_FATFS_Init+0x20>)
 8009b3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b40:	bf00      	nop
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	2000dc30 	.word	0x2000dc30
 8009b48:	200000a0 	.word	0x200000a0
 8009b4c:	2000dc34 	.word	0x2000dc34

08009b50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7f6 feb7 	bl	80008d0 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8009b62:	bf00      	nop
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7f6 ff8f 	bl	8000a9c <SD_disk_status>
  /* USER CODE END STATUS */
}
 8009b7e:	bf00      	nop
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 8009b98:	7bf8      	ldrb	r0, [r7, #15]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	68b9      	ldr	r1, [r7, #8]
 8009ba0:	f7f6 ff92 	bl	8000ac8 <SD_disk_read>
  /* USER CODE END READ */
}
 8009ba4:	bf00      	nop
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 8009bbe:	7bf8      	ldrb	r0, [r7, #15]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	f7f6 ffe9 	bl	8000b9c <SD_disk_write>
  /* USER CODE END WRITE */
}
 8009bca:	bf00      	nop
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	603a      	str	r2, [r7, #0]
 8009bde:	71fb      	strb	r3, [r7, #7]
 8009be0:	460b      	mov	r3, r1
 8009be2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	79b9      	ldrb	r1, [r7, #6]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f7 f85a 	bl	8000ca4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8009bf0:	bf00      	nop
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	4613      	mov	r3, r2
 8009c08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c12:	4b1f      	ldr	r3, [pc, #124]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c14:	7a5b      	ldrb	r3, [r3, #9]
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d131      	bne.n	8009c80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c1c:	4b1c      	ldr	r3, [pc, #112]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c1e:	7a5b      	ldrb	r3, [r3, #9]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	461a      	mov	r2, r3
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c26:	2100      	movs	r1, #0
 8009c28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c2a:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c2c:	7a5b      	ldrb	r3, [r3, #9]
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	4a17      	ldr	r2, [pc, #92]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009c3a:	4b15      	ldr	r3, [pc, #84]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c3c:	7a5b      	ldrb	r3, [r3, #9]
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c44:	4413      	add	r3, r2
 8009c46:	79fa      	ldrb	r2, [r7, #7]
 8009c48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009c4a:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c4c:	7a5b      	ldrb	r3, [r3, #9]
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	b2d1      	uxtb	r1, r2
 8009c54:	4a0e      	ldr	r2, [pc, #56]	; (8009c90 <FATFS_LinkDriverEx+0x94>)
 8009c56:	7251      	strb	r1, [r2, #9]
 8009c58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009c5a:	7dbb      	ldrb	r3, [r7, #22]
 8009c5c:	3330      	adds	r3, #48	; 0x30
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	3301      	adds	r3, #1
 8009c68:	223a      	movs	r2, #58	; 0x3a
 8009c6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3302      	adds	r3, #2
 8009c70:	222f      	movs	r2, #47	; 0x2f
 8009c72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	3303      	adds	r3, #3
 8009c78:	2200      	movs	r2, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000144 	.word	0x20000144

08009c94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff ffaa 	bl	8009bfc <FATFS_LinkDriverEx>
 8009ca8:	4603      	mov	r3, r0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <__NVIC_SetPriority>:
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	6039      	str	r1, [r7, #0]
 8009cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	db0a      	blt.n	8009cde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	490c      	ldr	r1, [pc, #48]	; (8009d00 <__NVIC_SetPriority+0x4c>)
 8009cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cd2:	0112      	lsls	r2, r2, #4
 8009cd4:	b2d2      	uxtb	r2, r2
 8009cd6:	440b      	add	r3, r1
 8009cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009cdc:	e00a      	b.n	8009cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4908      	ldr	r1, [pc, #32]	; (8009d04 <__NVIC_SetPriority+0x50>)
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	3b04      	subs	r3, #4
 8009cec:	0112      	lsls	r2, r2, #4
 8009cee:	b2d2      	uxtb	r2, r2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	761a      	strb	r2, [r3, #24]
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	e000e100 	.word	0xe000e100
 8009d04:	e000ed00 	.word	0xe000ed00

08009d08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d0c:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <SysTick_Handler+0x1c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d10:	f001 ffcc 	bl	800bcac <xTaskGetSchedulerState>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009d1a:	f002 fdcd 	bl	800c8b8 <xPortSysTickHandler>
  }
}
 8009d1e:	bf00      	nop
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	e000e010 	.word	0xe000e010

08009d28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	f06f 0004 	mvn.w	r0, #4
 8009d32:	f7ff ffbf 	bl	8009cb4 <__NVIC_SetPriority>
#endif
}
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d42:	f3ef 8305 	mrs	r3, IPSR
 8009d46:	603b      	str	r3, [r7, #0]
  return(result);
 8009d48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d4e:	f06f 0305 	mvn.w	r3, #5
 8009d52:	607b      	str	r3, [r7, #4]
 8009d54:	e00c      	b.n	8009d70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <osKernelInitialize+0x44>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d105      	bne.n	8009d6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d5e:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <osKernelInitialize+0x44>)
 8009d60:	2201      	movs	r2, #1
 8009d62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	607b      	str	r3, [r7, #4]
 8009d68:	e002      	b.n	8009d70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d70:	687b      	ldr	r3, [r7, #4]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	20000150 	.word	0x20000150

08009d84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d8a:	f3ef 8305 	mrs	r3, IPSR
 8009d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d96:	f06f 0305 	mvn.w	r3, #5
 8009d9a:	607b      	str	r3, [r7, #4]
 8009d9c:	e010      	b.n	8009dc0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <osKernelStart+0x48>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d109      	bne.n	8009dba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009da6:	f7ff ffbf 	bl	8009d28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009daa:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <osKernelStart+0x48>)
 8009dac:	2202      	movs	r2, #2
 8009dae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009db0:	f001 faf8 	bl	800b3a4 <vTaskStartScheduler>
      stat = osOK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	e002      	b.n	8009dc0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009dc0:	687b      	ldr	r3, [r7, #4]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000150 	.word	0x20000150

08009dd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08e      	sub	sp, #56	; 0x38
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009de0:	f3ef 8305 	mrs	r3, IPSR
 8009de4:	617b      	str	r3, [r7, #20]
  return(result);
 8009de6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d17e      	bne.n	8009eea <osThreadNew+0x11a>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d07b      	beq.n	8009eea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009df2:	2380      	movs	r3, #128	; 0x80
 8009df4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009df6:	2318      	movs	r3, #24
 8009df8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d045      	beq.n	8009e96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <osThreadNew+0x48>
        name = attr->name;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d008      	beq.n	8009e3e <osThreadNew+0x6e>
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	2b38      	cmp	r3, #56	; 0x38
 8009e30:	d805      	bhi.n	8009e3e <osThreadNew+0x6e>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <osThreadNew+0x72>
        return (NULL);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	e054      	b.n	8009eec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d003      	beq.n	8009e52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	089b      	lsrs	r3, r3, #2
 8009e50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00e      	beq.n	8009e78 <osThreadNew+0xa8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b5b      	cmp	r3, #91	; 0x5b
 8009e60:	d90a      	bls.n	8009e78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d006      	beq.n	8009e78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <osThreadNew+0xa8>
        mem = 1;
 8009e72:	2301      	movs	r3, #1
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	e010      	b.n	8009e9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10c      	bne.n	8009e9a <osThreadNew+0xca>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <osThreadNew+0xca>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <osThreadNew+0xca>
          mem = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	61bb      	str	r3, [r7, #24]
 8009e94:	e001      	b.n	8009e9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d110      	bne.n	8009ec2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ea8:	9202      	str	r2, [sp, #8]
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f001 f820 	bl	800aefc <xTaskCreateStatic>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	613b      	str	r3, [r7, #16]
 8009ec0:	e013      	b.n	8009eea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d110      	bne.n	8009eea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	f107 0310 	add.w	r3, r7, #16
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f001 f86b 	bl	800afb6 <xTaskCreate>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d001      	beq.n	8009eea <osThreadNew+0x11a>
            hTask = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eea:	693b      	ldr	r3, [r7, #16]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3728      	adds	r7, #40	; 0x28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009efc:	f3ef 8305 	mrs	r3, IPSR
 8009f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <osDelay+0x1c>
    stat = osErrorISR;
 8009f08:	f06f 0305 	mvn.w	r3, #5
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e007      	b.n	8009f20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fa0e 	bl	800b33c <vTaskDelay>
    }
  }

  return (stat);
 8009f20:	68fb      	ldr	r3, [r7, #12]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f32:	f3ef 8305 	mrs	r3, IPSR
 8009f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f38:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009f3e:	f06f 0305 	mvn.w	r3, #5
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	e019      	b.n	8009f7a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009f4a:	f001 fb3d 	bl	800b5c8 <xTaskGetTickCount>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d009      	beq.n	8009f74 <osDelayUntil+0x4a>
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	db06      	blt.n	8009f74 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009f66:	f107 0308 	add.w	r3, r7, #8
 8009f6a:	6939      	ldr	r1, [r7, #16]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 f967 	bl	800b240 <vTaskDelayUntil>
 8009f72:	e002      	b.n	8009f7a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009f74:	f06f 0303 	mvn.w	r3, #3
 8009f78:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009f7a:	697b      	ldr	r3, [r7, #20]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f90:	f3ef 8305 	mrs	r3, IPSR
 8009f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f96:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d12d      	bne.n	8009ff8 <osEventFlagsNew+0x74>
    mem = -1;
 8009f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fa0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d015      	beq.n	8009fd4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d006      	beq.n	8009fbe <osEventFlagsNew+0x3a>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	2b1f      	cmp	r3, #31
 8009fb6:	d902      	bls.n	8009fbe <osEventFlagsNew+0x3a>
        mem = 1;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	e00c      	b.n	8009fd8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d108      	bne.n	8009fd8 <osEventFlagsNew+0x54>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d104      	bne.n	8009fd8 <osEventFlagsNew+0x54>
          mem = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	613b      	str	r3, [r7, #16]
 8009fd2:	e001      	b.n	8009fd8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d106      	bne.n	8009fec <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f8a8 	bl	800a138 <xEventGroupCreateStatic>
 8009fe8:	6178      	str	r0, [r7, #20]
 8009fea:	e005      	b.n	8009ff8 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d102      	bne.n	8009ff8 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009ff2:	f000 f8d8 	bl	800a1a6 <xEventGroupCreate>
 8009ff6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009ff8:	697b      	ldr	r3, [r7, #20]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800a002:	b580      	push	{r7, lr}
 800a004:	b08c      	sub	sp, #48	; 0x30
 800a006:	af02      	add	r7, sp, #8
 800a008:	60f8      	str	r0, [r7, #12]
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <osEventFlagsWait+0x22>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a024:	f06f 0303 	mvn.w	r3, #3
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	e04b      	b.n	800a0c4 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02c:	f3ef 8305 	mrs	r3, IPSR
 800a030:	617b      	str	r3, [r7, #20]
  return(result);
 800a032:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800a038:	f06f 0305 	mvn.w	r3, #5
 800a03c:	61fb      	str	r3, [r7, #28]
 800a03e:	e041      	b.n	800a0c4 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800a04a:	2301      	movs	r3, #1
 800a04c:	627b      	str	r3, [r7, #36]	; 0x24
 800a04e:	e001      	b.n	800a054 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800a050:	2300      	movs	r3, #0
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f003 0302 	and.w	r3, r3, #2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800a05e:	2300      	movs	r3, #0
 800a060:	623b      	str	r3, [r7, #32]
 800a062:	e001      	b.n	800a068 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	6a3a      	ldr	r2, [r7, #32]
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	69b8      	ldr	r0, [r7, #24]
 800a074:	f000 f8b2 	bl	800a1dc <xEventGroupWaitBits>
 800a078:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b00      	cmp	r3, #0
 800a082:	d010      	beq.n	800a0a6 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4013      	ands	r3, r2
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d019      	beq.n	800a0c4 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d003      	beq.n	800a09e <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800a096:	f06f 0301 	mvn.w	r3, #1
 800a09a:	61fb      	str	r3, [r7, #28]
 800a09c:	e012      	b.n	800a0c4 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a09e:	f06f 0302 	mvn.w	r3, #2
 800a0a2:	61fb      	str	r3, [r7, #28]
 800a0a4:	e00e      	b.n	800a0c4 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d109      	bne.n	800a0c4 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800a0b6:	f06f 0301 	mvn.w	r3, #1
 800a0ba:	61fb      	str	r3, [r7, #28]
 800a0bc:	e002      	b.n	800a0c4 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800a0be:	f06f 0302 	mvn.w	r3, #2
 800a0c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800a0c4:	69fb      	ldr	r3, [r7, #28]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3728      	adds	r7, #40	; 0x28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4a07      	ldr	r2, [pc, #28]	; (800a0fc <vApplicationGetIdleTaskMemory+0x2c>)
 800a0e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4a06      	ldr	r2, [pc, #24]	; (800a100 <vApplicationGetIdleTaskMemory+0x30>)
 800a0e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2280      	movs	r2, #128	; 0x80
 800a0ec:	601a      	str	r2, [r3, #0]
}
 800a0ee:	bf00      	nop
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000154 	.word	0x20000154
 800a100:	200001b0 	.word	0x200001b0

0800a104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4a07      	ldr	r2, [pc, #28]	; (800a130 <vApplicationGetTimerTaskMemory+0x2c>)
 800a114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	4a06      	ldr	r2, [pc, #24]	; (800a134 <vApplicationGetTimerTaskMemory+0x30>)
 800a11a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a122:	601a      	str	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	200003b0 	.word	0x200003b0
 800a134:	2000040c 	.word	0x2000040c

0800a138 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a158:	bf00      	nop
 800a15a:	e7fe      	b.n	800a15a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800a15c:	2320      	movs	r3, #32
 800a15e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b20      	cmp	r3, #32
 800a164:	d00a      	beq.n	800a17c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60fb      	str	r3, [r7, #12]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	3304      	adds	r3, #4
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f913 	bl	800a3bc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2201      	movs	r2, #1
 800a19a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800a19c:	697b      	ldr	r3, [r7, #20]
	}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a1ac:	2020      	movs	r0, #32
 800a1ae:	f002 fc13 	bl	800c9d8 <pvPortMalloc>
 800a1b2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00a      	beq.n	800a1d0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 f8f9 	bl	800a3bc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a1d0:	687b      	ldr	r3, [r7, #4]
	}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b090      	sub	sp, #64	; 0x40
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10a      	bne.n	800a212 <xEventGroupWaitBits+0x36>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	623b      	str	r3, [r7, #32]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00a      	beq.n	800a232 <xEventGroupWaitBits+0x56>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	61fb      	str	r3, [r7, #28]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d10a      	bne.n	800a24e <xEventGroupWaitBits+0x72>
	__asm volatile
 800a238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23c:	f383 8811 	msr	BASEPRI, r3
 800a240:	f3bf 8f6f 	isb	sy
 800a244:	f3bf 8f4f 	dsb	sy
 800a248:	61bb      	str	r3, [r7, #24]
}
 800a24a:	bf00      	nop
 800a24c:	e7fe      	b.n	800a24c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a24e:	f001 fd2d 	bl	800bcac <xTaskGetSchedulerState>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d102      	bne.n	800a25e <xEventGroupWaitBits+0x82>
 800a258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <xEventGroupWaitBits+0x86>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <xEventGroupWaitBits+0x88>
 800a262:	2300      	movs	r3, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	617b      	str	r3, [r7, #20]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a27e:	f001 f8f7 	bl	800b470 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a28e:	f000 f873 	bl	800a378 <prvTestWaitCondition>
 800a292:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00e      	beq.n	800a2b8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d028      	beq.n	800a2fa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	43db      	mvns	r3, r3
 800a2b0:	401a      	ands	r2, r3
 800a2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	e020      	b.n	800a2fa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30
 800a2c6:	e018      	b.n	800a2fa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2d4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2e2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e6:	1d18      	adds	r0, r3, #4
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f001 fab5 	bl	800b860 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a2fa:	f001 f8c7 	bl	800b48c <xTaskResumeAll>
 800a2fe:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a302:	2b00      	cmp	r3, #0
 800a304:	d031      	beq.n	800a36a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d107      	bne.n	800a31c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a30c:	4b19      	ldr	r3, [pc, #100]	; (800a374 <xEventGroupWaitBits+0x198>)
 800a30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a31c:	f001 fd52 	bl	800bdc4 <uxTaskResetEventItemValue>
 800a320:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d11a      	bne.n	800a362 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a32c:	f002 fa32 	bl	800c794 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	68b9      	ldr	r1, [r7, #8]
 800a33a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a33c:	f000 f81c 	bl	800a378 <prvTestWaitCondition>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	43db      	mvns	r3, r3
 800a354:	401a      	ands	r2, r3
 800a356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a358:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a35a:	2301      	movs	r3, #1
 800a35c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a35e:	f002 fa49 	bl	800c7f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a368:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3740      	adds	r7, #64	; 0x40
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	e000ed04 	.word	0xe000ed04

0800a378 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a384:	2300      	movs	r3, #0
 800a386:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d107      	bne.n	800a39e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	4013      	ands	r3, r2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e007      	b.n	800a3ae <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d101      	bne.n	800a3ae <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f103 0208 	add.w	r2, r3, #8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f103 0208 	add.w	r2, r3, #8
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f103 0208 	add.w	r2, r3, #8
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a40a:	bf00      	nop
 800a40c:	370c      	adds	r7, #12
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a416:	b480      	push	{r7}
 800a418:	b085      	sub	sp, #20
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
}
 800a452:	bf00      	nop
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a45e:	b480      	push	{r7}
 800a460:	b085      	sub	sp, #20
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a474:	d103      	bne.n	800a47e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e00c      	b.n	800a498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3308      	adds	r3, #8
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e002      	b.n	800a48c <vListInsert+0x2e>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	429a      	cmp	r2, r3
 800a496:	d2f6      	bcs.n	800a486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	6892      	ldr	r2, [r2, #8]
 800a4e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6852      	ldr	r2, [r2, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d103      	bne.n	800a504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	1e5a      	subs	r2, r3, #1
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xQueueGenericReset+0x2a>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	60bb      	str	r3, [r7, #8]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a54e:	f002 f921 	bl	800c794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55a:	68f9      	ldr	r1, [r7, #12]
 800a55c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a55e:	fb01 f303 	mul.w	r3, r1, r3
 800a562:	441a      	add	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57e:	3b01      	subs	r3, #1
 800a580:	68f9      	ldr	r1, [r7, #12]
 800a582:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a584:	fb01 f303 	mul.w	r3, r1, r3
 800a588:	441a      	add	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	22ff      	movs	r2, #255	; 0xff
 800a592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	22ff      	movs	r2, #255	; 0xff
 800a59a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d114      	bne.n	800a5ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01a      	beq.n	800a5e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3310      	adds	r3, #16
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 f9bd 	bl	800b930 <xTaskRemoveFromEventList>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d012      	beq.n	800a5e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <xQueueGenericReset+0xcc>)
 800a5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	e009      	b.n	800a5e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3310      	adds	r3, #16
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff fef2 	bl	800a3bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3324      	adds	r3, #36	; 0x24
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff feed 	bl	800a3bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5e2:	f002 f907 	bl	800c7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5e6:	2301      	movs	r3, #1
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08e      	sub	sp, #56	; 0x38
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10a      	bne.n	800a63a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <xQueueGenericCreateStatic+0x52>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <xQueueGenericCreateStatic+0x56>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <xQueueGenericCreateStatic+0x58>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	623b      	str	r3, [r7, #32]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <xQueueGenericCreateStatic+0x7e>
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <xQueueGenericCreateStatic+0x82>
 800a672:	2301      	movs	r3, #1
 800a674:	e000      	b.n	800a678 <xQueueGenericCreateStatic+0x84>
 800a676:	2300      	movs	r3, #0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10a      	bne.n	800a692 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	61fb      	str	r3, [r7, #28]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a692:	2350      	movs	r3, #80	; 0x50
 800a694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b50      	cmp	r3, #80	; 0x50
 800a69a:	d00a      	beq.n	800a6b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a0:	f383 8811 	msr	BASEPRI, r3
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	f3bf 8f4f 	dsb	sy
 800a6ac:	61bb      	str	r3, [r7, #24]
}
 800a6ae:	bf00      	nop
 800a6b0:	e7fe      	b.n	800a6b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00d      	beq.n	800a6da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 f805 	bl	800a6e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3730      	adds	r7, #48	; 0x30
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d103      	bne.n	800a700 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e002      	b.n	800a706 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a712:	2101      	movs	r1, #1
 800a714:	69b8      	ldr	r0, [r7, #24]
 800a716:	f7ff ff05 	bl	800a524 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	78fa      	ldrb	r2, [r7, #3]
 800a71e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a722:	bf00      	nop
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08e      	sub	sp, #56	; 0x38
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a73a:	2300      	movs	r3, #0
 800a73c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <xQueueGenericSend+0x32>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d103      	bne.n	800a76c <xQueueGenericSend+0x40>
 800a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <xQueueGenericSend+0x44>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e000      	b.n	800a772 <xQueueGenericSend+0x46>
 800a770:	2300      	movs	r3, #0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10a      	bne.n	800a78c <xQueueGenericSend+0x60>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a788:	bf00      	nop
 800a78a:	e7fe      	b.n	800a78a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d103      	bne.n	800a79a <xQueueGenericSend+0x6e>
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <xQueueGenericSend+0x72>
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <xQueueGenericSend+0x74>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10a      	bne.n	800a7ba <xQueueGenericSend+0x8e>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	623b      	str	r3, [r7, #32]
}
 800a7b6:	bf00      	nop
 800a7b8:	e7fe      	b.n	800a7b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7ba:	f001 fa77 	bl	800bcac <xTaskGetSchedulerState>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d102      	bne.n	800a7ca <xQueueGenericSend+0x9e>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <xQueueGenericSend+0xa2>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e000      	b.n	800a7d0 <xQueueGenericSend+0xa4>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10a      	bne.n	800a7ea <xQueueGenericSend+0xbe>
	__asm volatile
 800a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	61fb      	str	r3, [r7, #28]
}
 800a7e6:	bf00      	nop
 800a7e8:	e7fe      	b.n	800a7e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ea:	f001 ffd3 	bl	800c794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d302      	bcc.n	800a800 <xQueueGenericSend+0xd4>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d129      	bne.n	800a854 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a806:	f000 fa0b 	bl	800ac20 <prvCopyDataToQueue>
 800a80a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d010      	beq.n	800a836 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	3324      	adds	r3, #36	; 0x24
 800a818:	4618      	mov	r0, r3
 800a81a:	f001 f889 	bl	800b930 <xTaskRemoveFromEventList>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d013      	beq.n	800a84c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a824:	4b3f      	ldr	r3, [pc, #252]	; (800a924 <xQueueGenericSend+0x1f8>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	e00a      	b.n	800a84c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d007      	beq.n	800a84c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a83c:	4b39      	ldr	r3, [pc, #228]	; (800a924 <xQueueGenericSend+0x1f8>)
 800a83e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a84c:	f001 ffd2 	bl	800c7f4 <vPortExitCritical>
				return pdPASS;
 800a850:	2301      	movs	r3, #1
 800a852:	e063      	b.n	800a91c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d103      	bne.n	800a862 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a85a:	f001 ffcb 	bl	800c7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a85e:	2300      	movs	r3, #0
 800a860:	e05c      	b.n	800a91c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a868:	f107 0314 	add.w	r3, r7, #20
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 f8c3 	bl	800b9f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a872:	2301      	movs	r3, #1
 800a874:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a876:	f001 ffbd 	bl	800c7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a87a:	f000 fdf9 	bl	800b470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a87e:	f001 ff89 	bl	800c794 <vPortEnterCritical>
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a888:	b25b      	sxtb	r3, r3
 800a88a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a88e:	d103      	bne.n	800a898 <xQueueGenericSend+0x16c>
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a89e:	b25b      	sxtb	r3, r3
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8a4:	d103      	bne.n	800a8ae <xQueueGenericSend+0x182>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ae:	f001 ffa1 	bl	800c7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8b2:	1d3a      	adds	r2, r7, #4
 800a8b4:	f107 0314 	add.w	r3, r7, #20
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 f8b2 	bl	800ba24 <xTaskCheckForTimeOut>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d124      	bne.n	800a910 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8c8:	f000 faa2 	bl	800ae10 <prvIsQueueFull>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d018      	beq.n	800a904 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d4:	3310      	adds	r3, #16
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 ff9c 	bl	800b818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8e2:	f000 fa2d 	bl	800ad40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8e6:	f000 fdd1 	bl	800b48c <xTaskResumeAll>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f47f af7c 	bne.w	800a7ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8f2:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <xQueueGenericSend+0x1f8>)
 800a8f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	e772      	b.n	800a7ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a906:	f000 fa1b 	bl	800ad40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a90a:	f000 fdbf 	bl	800b48c <xTaskResumeAll>
 800a90e:	e76c      	b.n	800a7ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a912:	f000 fa15 	bl	800ad40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a916:	f000 fdb9 	bl	800b48c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a91a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3738      	adds	r7, #56	; 0x38
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	e000ed04 	.word	0xe000ed04

0800a928 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b090      	sub	sp, #64	; 0x40
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <xQueueGenericSendFromISR+0x3c>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <xQueueGenericSendFromISR+0x40>
 800a964:	2301      	movs	r3, #1
 800a966:	e000      	b.n	800a96a <xQueueGenericSendFromISR+0x42>
 800a968:	2300      	movs	r3, #0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a980:	bf00      	nop
 800a982:	e7fe      	b.n	800a982 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d103      	bne.n	800a992 <xQueueGenericSendFromISR+0x6a>
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d101      	bne.n	800a996 <xQueueGenericSendFromISR+0x6e>
 800a992:	2301      	movs	r3, #1
 800a994:	e000      	b.n	800a998 <xQueueGenericSendFromISR+0x70>
 800a996:	2300      	movs	r3, #0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	623b      	str	r3, [r7, #32]
}
 800a9ae:	bf00      	nop
 800a9b0:	e7fe      	b.n	800a9b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9b2:	f001 ffd1 	bl	800c958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9b6:	f3ef 8211 	mrs	r2, BASEPRI
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	61fa      	str	r2, [r7, #28]
 800a9cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d302      	bcc.n	800a9e4 <xQueueGenericSendFromISR+0xbc>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d12f      	bne.n	800aa44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	68b9      	ldr	r1, [r7, #8]
 800a9f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9fa:	f000 f911 	bl	800ac20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa06:	d112      	bne.n	800aa2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d016      	beq.n	800aa3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa12:	3324      	adds	r3, #36	; 0x24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 ff8b 	bl	800b930 <xTaskRemoveFromEventList>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00b      	beq.n	800aa3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	e007      	b.n	800aa3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa32:	3301      	adds	r3, #1
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	b25a      	sxtb	r2, r3
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa42:	e001      	b.n	800aa48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3740      	adds	r7, #64	; 0x40
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	; 0x30
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <xQueueReceive+0x30>
	__asm volatile
 800aa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
 800aa8a:	623b      	str	r3, [r7, #32]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <xQueueReceive+0x3e>
 800aa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <xQueueReceive+0x42>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <xQueueReceive+0x44>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10a      	bne.n	800aabe <xQueueReceive+0x5e>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	61fb      	str	r3, [r7, #28]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aabe:	f001 f8f5 	bl	800bcac <xTaskGetSchedulerState>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <xQueueReceive+0x6e>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <xQueueReceive+0x72>
 800aace:	2301      	movs	r3, #1
 800aad0:	e000      	b.n	800aad4 <xQueueReceive+0x74>
 800aad2:	2300      	movs	r3, #0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <xQueueReceive+0x8e>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	61bb      	str	r3, [r7, #24]
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaee:	f001 fe51 	bl	800c794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d01f      	beq.n	800ab3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aafe:	68b9      	ldr	r1, [r7, #8]
 800ab00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab02:	f000 f8f7 	bl	800acf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab08:	1e5a      	subs	r2, r3, #1
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00f      	beq.n	800ab36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	3310      	adds	r3, #16
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 ff08 	bl	800b930 <xTaskRemoveFromEventList>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d007      	beq.n	800ab36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab26:	4b3d      	ldr	r3, [pc, #244]	; (800ac1c <xQueueReceive+0x1bc>)
 800ab28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab36:	f001 fe5d 	bl	800c7f4 <vPortExitCritical>
				return pdPASS;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e069      	b.n	800ac12 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d103      	bne.n	800ab4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab44:	f001 fe56 	bl	800c7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	e062      	b.n	800ac12 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab52:	f107 0310 	add.w	r3, r7, #16
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 ff4e 	bl	800b9f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab60:	f001 fe48 	bl	800c7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab64:	f000 fc84 	bl	800b470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab68:	f001 fe14 	bl	800c794 <vPortEnterCritical>
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab72:	b25b      	sxtb	r3, r3
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab78:	d103      	bne.n	800ab82 <xQueueReceive+0x122>
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab88:	b25b      	sxtb	r3, r3
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab8e:	d103      	bne.n	800ab98 <xQueueReceive+0x138>
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab98:	f001 fe2c 	bl	800c7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab9c:	1d3a      	adds	r2, r7, #4
 800ab9e:	f107 0310 	add.w	r3, r7, #16
 800aba2:	4611      	mov	r1, r2
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 ff3d 	bl	800ba24 <xTaskCheckForTimeOut>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d123      	bne.n	800abf8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb2:	f000 f917 	bl	800ade4 <prvIsQueueEmpty>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d017      	beq.n	800abec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	3324      	adds	r3, #36	; 0x24
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	4611      	mov	r1, r2
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fe27 	bl	800b818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abcc:	f000 f8b8 	bl	800ad40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abd0:	f000 fc5c 	bl	800b48c <xTaskResumeAll>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d189      	bne.n	800aaee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abda:	4b10      	ldr	r3, [pc, #64]	; (800ac1c <xQueueReceive+0x1bc>)
 800abdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	e780      	b.n	800aaee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abee:	f000 f8a7 	bl	800ad40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abf2:	f000 fc4b 	bl	800b48c <xTaskResumeAll>
 800abf6:	e77a      	b.n	800aaee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfa:	f000 f8a1 	bl	800ad40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abfe:	f000 fc45 	bl	800b48c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac04:	f000 f8ee 	bl	800ade4 <prvIsQueueEmpty>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f43f af6f 	beq.w	800aaee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac10:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3730      	adds	r7, #48	; 0x30
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	e000ed04 	.word	0xe000ed04

0800ac20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10d      	bne.n	800ac5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d14d      	bne.n	800ace2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 f84c 	bl	800bce8 <xTaskPriorityDisinherit>
 800ac50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	609a      	str	r2, [r3, #8]
 800ac58:	e043      	b.n	800ace2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d119      	bne.n	800ac94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6858      	ldr	r0, [r3, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	461a      	mov	r2, r3
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	f002 f8c8 	bl	800ce00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac78:	441a      	add	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d32b      	bcc.n	800ace2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	605a      	str	r2, [r3, #4]
 800ac92:	e026      	b.n	800ace2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68d8      	ldr	r0, [r3, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	f002 f8ae 	bl	800ce00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acac:	425b      	negs	r3, r3
 800acae:	441a      	add	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	68da      	ldr	r2, [r3, #12]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d207      	bcs.n	800acd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	689a      	ldr	r2, [r3, #8]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc8:	425b      	negs	r3, r3
 800acca:	441a      	add	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d105      	bne.n	800ace2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	3b01      	subs	r3, #1
 800ace0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acea:	697b      	ldr	r3, [r7, #20]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d018      	beq.n	800ad38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0e:	441a      	add	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68da      	ldr	r2, [r3, #12]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d303      	bcc.n	800ad28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68d9      	ldr	r1, [r3, #12]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad30:	461a      	mov	r2, r3
 800ad32:	6838      	ldr	r0, [r7, #0]
 800ad34:	f002 f864 	bl	800ce00 <memcpy>
	}
}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad48:	f001 fd24 	bl	800c794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad54:	e011      	b.n	800ad7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d012      	beq.n	800ad84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3324      	adds	r3, #36	; 0x24
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fde4 	bl	800b930 <xTaskRemoveFromEventList>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad6e:	f000 febb 	bl	800bae8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	dce9      	bgt.n	800ad56 <prvUnlockQueue+0x16>
 800ad82:	e000      	b.n	800ad86 <prvUnlockQueue+0x46>
					break;
 800ad84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	22ff      	movs	r2, #255	; 0xff
 800ad8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad8e:	f001 fd31 	bl	800c7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad92:	f001 fcff 	bl	800c794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad9e:	e011      	b.n	800adc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d012      	beq.n	800adce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3310      	adds	r3, #16
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fdbf 	bl	800b930 <xTaskRemoveFromEventList>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800adb8:	f000 fe96 	bl	800bae8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800adc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	dce9      	bgt.n	800ada0 <prvUnlockQueue+0x60>
 800adcc:	e000      	b.n	800add0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	22ff      	movs	r2, #255	; 0xff
 800add4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800add8:	f001 fd0c 	bl	800c7f4 <vPortExitCritical>
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adec:	f001 fcd2 	bl	800c794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adf8:	2301      	movs	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	e001      	b.n	800ae02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae02:	f001 fcf7 	bl	800c7f4 <vPortExitCritical>

	return xReturn;
 800ae06:	68fb      	ldr	r3, [r7, #12]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae18:	f001 fcbc 	bl	800c794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d102      	bne.n	800ae2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	e001      	b.n	800ae32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae32:	f001 fcdf 	bl	800c7f4 <vPortExitCritical>

	return xReturn;
 800ae36:	68fb      	ldr	r3, [r7, #12]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
 800ae4e:	e014      	b.n	800ae7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae50:	4a0f      	ldr	r2, [pc, #60]	; (800ae90 <vQueueAddToRegistry+0x50>)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10b      	bne.n	800ae74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae5c:	490c      	ldr	r1, [pc, #48]	; (800ae90 <vQueueAddToRegistry+0x50>)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae66:	4a0a      	ldr	r2, [pc, #40]	; (800ae90 <vQueueAddToRegistry+0x50>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae72:	e006      	b.n	800ae82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b07      	cmp	r3, #7
 800ae7e:	d9e7      	bls.n	800ae50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	2000fca4 	.word	0x2000fca4

0800ae94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aea4:	f001 fc76 	bl	800c794 <vPortEnterCritical>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb4:	d103      	bne.n	800aebe <vQueueWaitForMessageRestricted+0x2a>
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec4:	b25b      	sxtb	r3, r3
 800aec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeca:	d103      	bne.n	800aed4 <vQueueWaitForMessageRestricted+0x40>
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed4:	f001 fc8e 	bl	800c7f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d106      	bne.n	800aeee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	3324      	adds	r3, #36	; 0x24
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	68b9      	ldr	r1, [r7, #8]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 fcf5 	bl	800b8d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aeee:	6978      	ldr	r0, [r7, #20]
 800aef0:	f7ff ff26 	bl	800ad40 <prvUnlockQueue>
	}
 800aef4:	bf00      	nop
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08e      	sub	sp, #56	; 0x38
 800af00:	af04      	add	r7, sp, #16
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	623b      	str	r3, [r7, #32]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10a      	bne.n	800af42 <xTaskCreateStatic+0x46>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	61fb      	str	r3, [r7, #28]
}
 800af3e:	bf00      	nop
 800af40:	e7fe      	b.n	800af40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af42:	235c      	movs	r3, #92	; 0x5c
 800af44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	2b5c      	cmp	r3, #92	; 0x5c
 800af4a:	d00a      	beq.n	800af62 <xTaskCreateStatic+0x66>
	__asm volatile
 800af4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	61bb      	str	r3, [r7, #24]
}
 800af5e:	bf00      	nop
 800af60:	e7fe      	b.n	800af60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	2b00      	cmp	r3, #0
 800af68:	d01e      	beq.n	800afa8 <xTaskCreateStatic+0xac>
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01b      	beq.n	800afa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	2202      	movs	r2, #2
 800af7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af82:	2300      	movs	r3, #0
 800af84:	9303      	str	r3, [sp, #12]
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	9302      	str	r3, [sp, #8]
 800af8a:	f107 0314 	add.w	r3, r7, #20
 800af8e:	9301      	str	r3, [sp, #4]
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 f850 	bl	800b040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afa2:	f000 f8dd 	bl	800b160 <prvAddNewTaskToReadyList>
 800afa6:	e001      	b.n	800afac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800afa8:	2300      	movs	r3, #0
 800afaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afac:	697b      	ldr	r3, [r7, #20]
	}
 800afae:	4618      	mov	r0, r3
 800afb0:	3728      	adds	r7, #40	; 0x28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b08c      	sub	sp, #48	; 0x30
 800afba:	af04      	add	r7, sp, #16
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	60b9      	str	r1, [r7, #8]
 800afc0:	603b      	str	r3, [r7, #0]
 800afc2:	4613      	mov	r3, r2
 800afc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afc6:	88fb      	ldrh	r3, [r7, #6]
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4618      	mov	r0, r3
 800afcc:	f001 fd04 	bl	800c9d8 <pvPortMalloc>
 800afd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00e      	beq.n	800aff6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afd8:	205c      	movs	r0, #92	; 0x5c
 800afda:	f001 fcfd 	bl	800c9d8 <pvPortMalloc>
 800afde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	631a      	str	r2, [r3, #48]	; 0x30
 800afec:	e005      	b.n	800affa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afee:	6978      	ldr	r0, [r7, #20]
 800aff0:	f001 fdbe 	bl	800cb70 <vPortFree>
 800aff4:	e001      	b.n	800affa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d017      	beq.n	800b030 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b008:	88fa      	ldrh	r2, [r7, #6]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9303      	str	r3, [sp, #12]
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	9302      	str	r3, [sp, #8]
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 f80e 	bl	800b040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b024:	69f8      	ldr	r0, [r7, #28]
 800b026:	f000 f89b 	bl	800b160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b02a:	2301      	movs	r3, #1
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	e002      	b.n	800b036 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b034:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b036:	69bb      	ldr	r3, [r7, #24]
	}
 800b038:	4618      	mov	r0, r3
 800b03a:	3720      	adds	r7, #32
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	461a      	mov	r2, r3
 800b058:	21a5      	movs	r1, #165	; 0xa5
 800b05a:	f001 fedf 	bl	800ce1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b068:	3b01      	subs	r3, #1
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	f023 0307 	bic.w	r3, r3, #7
 800b076:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	f003 0307 	and.w	r3, r3, #7
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	617b      	str	r3, [r7, #20]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d01f      	beq.n	800b0de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b09e:	2300      	movs	r3, #0
 800b0a0:	61fb      	str	r3, [r7, #28]
 800b0a2:	e012      	b.n	800b0ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	7819      	ldrb	r1, [r3, #0]
 800b0ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	3334      	adds	r3, #52	; 0x34
 800b0b4:	460a      	mov	r2, r1
 800b0b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d006      	beq.n	800b0d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	2b0f      	cmp	r3, #15
 800b0ce:	d9e9      	bls.n	800b0a4 <prvInitialiseNewTask+0x64>
 800b0d0:	e000      	b.n	800b0d4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b0d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0dc:	e003      	b.n	800b0e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	2b37      	cmp	r3, #55	; 0x37
 800b0ea:	d901      	bls.n	800b0f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0ec:	2337      	movs	r3, #55	; 0x37
 800b0ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	2200      	movs	r2, #0
 800b100:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	3304      	adds	r3, #4
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff f978 	bl	800a3fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	3318      	adds	r3, #24
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff f973 	bl	800a3fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b11a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b12a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	2200      	movs	r2, #0
 800b130:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	69b8      	ldr	r0, [r7, #24]
 800b140:	f001 f9fa 	bl	800c538 <pxPortInitialiseStack>
 800b144:	4602      	mov	r2, r0
 800b146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b156:	bf00      	nop
 800b158:	3720      	adds	r7, #32
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b168:	f001 fb14 	bl	800c794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b16c:	4b2d      	ldr	r3, [pc, #180]	; (800b224 <prvAddNewTaskToReadyList+0xc4>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	4a2c      	ldr	r2, [pc, #176]	; (800b224 <prvAddNewTaskToReadyList+0xc4>)
 800b174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b176:	4b2c      	ldr	r3, [pc, #176]	; (800b228 <prvAddNewTaskToReadyList+0xc8>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d109      	bne.n	800b192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b17e:	4a2a      	ldr	r2, [pc, #168]	; (800b228 <prvAddNewTaskToReadyList+0xc8>)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b184:	4b27      	ldr	r3, [pc, #156]	; (800b224 <prvAddNewTaskToReadyList+0xc4>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d110      	bne.n	800b1ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b18c:	f000 fcd0 	bl	800bb30 <prvInitialiseTaskLists>
 800b190:	e00d      	b.n	800b1ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b192:	4b26      	ldr	r3, [pc, #152]	; (800b22c <prvAddNewTaskToReadyList+0xcc>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d109      	bne.n	800b1ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b19a:	4b23      	ldr	r3, [pc, #140]	; (800b228 <prvAddNewTaskToReadyList+0xc8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d802      	bhi.n	800b1ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1a8:	4a1f      	ldr	r2, [pc, #124]	; (800b228 <prvAddNewTaskToReadyList+0xc8>)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1ae:	4b20      	ldr	r3, [pc, #128]	; (800b230 <prvAddNewTaskToReadyList+0xd0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <prvAddNewTaskToReadyList+0xd0>)
 800b1b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b1b8:	4b1d      	ldr	r3, [pc, #116]	; (800b230 <prvAddNewTaskToReadyList+0xd0>)
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c4:	4b1b      	ldr	r3, [pc, #108]	; (800b234 <prvAddNewTaskToReadyList+0xd4>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d903      	bls.n	800b1d4 <prvAddNewTaskToReadyList+0x74>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d0:	4a18      	ldr	r2, [pc, #96]	; (800b234 <prvAddNewTaskToReadyList+0xd4>)
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4a15      	ldr	r2, [pc, #84]	; (800b238 <prvAddNewTaskToReadyList+0xd8>)
 800b1e2:	441a      	add	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	f7ff f913 	bl	800a416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1f0:	f001 fb00 	bl	800c7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1f4:	4b0d      	ldr	r3, [pc, #52]	; (800b22c <prvAddNewTaskToReadyList+0xcc>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00e      	beq.n	800b21a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <prvAddNewTaskToReadyList+0xc8>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	429a      	cmp	r2, r3
 800b208:	d207      	bcs.n	800b21a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b20a:	4b0c      	ldr	r3, [pc, #48]	; (800b23c <prvAddNewTaskToReadyList+0xdc>)
 800b20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20000ce0 	.word	0x20000ce0
 800b228:	2000080c 	.word	0x2000080c
 800b22c:	20000cec 	.word	0x20000cec
 800b230:	20000cfc 	.word	0x20000cfc
 800b234:	20000ce8 	.word	0x20000ce8
 800b238:	20000810 	.word	0x20000810
 800b23c:	e000ed04 	.word	0xe000ed04

0800b240 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08a      	sub	sp, #40	; 0x28
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b24a:	2300      	movs	r3, #0
 800b24c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10a      	bne.n	800b26a <vTaskDelayUntil+0x2a>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	617b      	str	r3, [r7, #20]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10a      	bne.n	800b286 <vTaskDelayUntil+0x46>
	__asm volatile
 800b270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b274:	f383 8811 	msr	BASEPRI, r3
 800b278:	f3bf 8f6f 	isb	sy
 800b27c:	f3bf 8f4f 	dsb	sy
 800b280:	613b      	str	r3, [r7, #16]
}
 800b282:	bf00      	nop
 800b284:	e7fe      	b.n	800b284 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b286:	4b2a      	ldr	r3, [pc, #168]	; (800b330 <vTaskDelayUntil+0xf0>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <vTaskDelayUntil+0x64>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	60fb      	str	r3, [r7, #12]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b2a4:	f000 f8e4 	bl	800b470 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b2a8:	4b22      	ldr	r3, [pc, #136]	; (800b334 <vTaskDelayUntil+0xf4>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	683a      	ldr	r2, [r7, #0]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6a3a      	ldr	r2, [r7, #32]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d20b      	bcs.n	800b2da <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d211      	bcs.n	800b2f0 <vTaskDelayUntil+0xb0>
 800b2cc:	69fa      	ldr	r2, [r7, #28]
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d90d      	bls.n	800b2f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b2d8:	e00a      	b.n	800b2f0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	69fa      	ldr	r2, [r7, #28]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d303      	bcc.n	800b2ec <vTaskDelayUntil+0xac>
 800b2e4:	69fa      	ldr	r2, [r7, #28]
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d901      	bls.n	800b2f0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	6a3b      	ldr	r3, [r7, #32]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	2100      	movs	r1, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fd75 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b30a:	f000 f8bf 	bl	800b48c <xTaskResumeAll>
 800b30e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d107      	bne.n	800b326 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b316:	4b08      	ldr	r3, [pc, #32]	; (800b338 <vTaskDelayUntil+0xf8>)
 800b318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b326:	bf00      	nop
 800b328:	3728      	adds	r7, #40	; 0x28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000d08 	.word	0x20000d08
 800b334:	20000ce4 	.word	0x20000ce4
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b344:	2300      	movs	r3, #0
 800b346:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d017      	beq.n	800b37e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b34e:	4b13      	ldr	r3, [pc, #76]	; (800b39c <vTaskDelay+0x60>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <vTaskDelay+0x30>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	60bb      	str	r3, [r7, #8]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b36c:	f000 f880 	bl	800b470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b370:	2100      	movs	r1, #0
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fd3e 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b378:	f000 f888 	bl	800b48c <xTaskResumeAll>
 800b37c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d107      	bne.n	800b394 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b384:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <vTaskDelay+0x64>)
 800b386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20000d08 	.word	0x20000d08
 800b3a0:	e000ed04 	.word	0xe000ed04

0800b3a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08a      	sub	sp, #40	; 0x28
 800b3a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3b2:	463a      	mov	r2, r7
 800b3b4:	1d39      	adds	r1, r7, #4
 800b3b6:	f107 0308 	add.w	r3, r7, #8
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe fe88 	bl	800a0d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	9202      	str	r2, [sp, #8]
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	4921      	ldr	r1, [pc, #132]	; (800b458 <vTaskStartScheduler+0xb4>)
 800b3d4:	4821      	ldr	r0, [pc, #132]	; (800b45c <vTaskStartScheduler+0xb8>)
 800b3d6:	f7ff fd91 	bl	800aefc <xTaskCreateStatic>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4a20      	ldr	r2, [pc, #128]	; (800b460 <vTaskStartScheduler+0xbc>)
 800b3de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b3e0:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <vTaskStartScheduler+0xbc>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	e001      	b.n	800b3f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d102      	bne.n	800b3fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b3f8:	f000 fd50 	bl	800be9c <xTimerCreateTimerTask>
 800b3fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d116      	bne.n	800b432 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	613b      	str	r3, [r7, #16]
}
 800b416:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b418:	4b12      	ldr	r3, [pc, #72]	; (800b464 <vTaskStartScheduler+0xc0>)
 800b41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b41e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b420:	4b11      	ldr	r3, [pc, #68]	; (800b468 <vTaskStartScheduler+0xc4>)
 800b422:	2201      	movs	r2, #1
 800b424:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b426:	4b11      	ldr	r3, [pc, #68]	; (800b46c <vTaskStartScheduler+0xc8>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b42c:	f001 f910 	bl	800c650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b430:	e00e      	b.n	800b450 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b438:	d10a      	bne.n	800b450 <vTaskStartScheduler+0xac>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	60fb      	str	r3, [r7, #12]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <vTaskStartScheduler+0xaa>
}
 800b450:	bf00      	nop
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	0800dfc0 	.word	0x0800dfc0
 800b45c:	0800bb01 	.word	0x0800bb01
 800b460:	20000d04 	.word	0x20000d04
 800b464:	20000d00 	.word	0x20000d00
 800b468:	20000cec 	.word	0x20000cec
 800b46c:	20000ce4 	.word	0x20000ce4

0800b470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b470:	b480      	push	{r7}
 800b472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <vTaskSuspendAll+0x18>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3301      	adds	r3, #1
 800b47a:	4a03      	ldr	r2, [pc, #12]	; (800b488 <vTaskSuspendAll+0x18>)
 800b47c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b47e:	bf00      	nop
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	20000d08 	.word	0x20000d08

0800b48c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b496:	2300      	movs	r3, #0
 800b498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b49a:	4b42      	ldr	r3, [pc, #264]	; (800b5a4 <xTaskResumeAll+0x118>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10a      	bne.n	800b4b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	603b      	str	r3, [r7, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4b8:	f001 f96c 	bl	800c794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4bc:	4b39      	ldr	r3, [pc, #228]	; (800b5a4 <xTaskResumeAll+0x118>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	4a38      	ldr	r2, [pc, #224]	; (800b5a4 <xTaskResumeAll+0x118>)
 800b4c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4c6:	4b37      	ldr	r3, [pc, #220]	; (800b5a4 <xTaskResumeAll+0x118>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d162      	bne.n	800b594 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4ce:	4b36      	ldr	r3, [pc, #216]	; (800b5a8 <xTaskResumeAll+0x11c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d05e      	beq.n	800b594 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4d6:	e02f      	b.n	800b538 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d8:	4b34      	ldr	r3, [pc, #208]	; (800b5ac <xTaskResumeAll+0x120>)
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3318      	adds	r3, #24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7fe fff3 	bl	800a4d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	3304      	adds	r3, #4
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe ffee 	bl	800a4d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f8:	4b2d      	ldr	r3, [pc, #180]	; (800b5b0 <xTaskResumeAll+0x124>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d903      	bls.n	800b508 <xTaskResumeAll+0x7c>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	4a2a      	ldr	r2, [pc, #168]	; (800b5b0 <xTaskResumeAll+0x124>)
 800b506:	6013      	str	r3, [r2, #0]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	4613      	mov	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4a27      	ldr	r2, [pc, #156]	; (800b5b4 <xTaskResumeAll+0x128>)
 800b516:	441a      	add	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f7fe ff79 	bl	800a416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b528:	4b23      	ldr	r3, [pc, #140]	; (800b5b8 <xTaskResumeAll+0x12c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52e:	429a      	cmp	r2, r3
 800b530:	d302      	bcc.n	800b538 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b532:	4b22      	ldr	r3, [pc, #136]	; (800b5bc <xTaskResumeAll+0x130>)
 800b534:	2201      	movs	r2, #1
 800b536:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b538:	4b1c      	ldr	r3, [pc, #112]	; (800b5ac <xTaskResumeAll+0x120>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1cb      	bne.n	800b4d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d001      	beq.n	800b54a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b546:	f000 fb91 	bl	800bc6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b54a:	4b1d      	ldr	r3, [pc, #116]	; (800b5c0 <xTaskResumeAll+0x134>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d010      	beq.n	800b578 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b556:	f000 f847 	bl	800b5e8 <xTaskIncrementTick>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b560:	4b16      	ldr	r3, [pc, #88]	; (800b5bc <xTaskResumeAll+0x130>)
 800b562:	2201      	movs	r2, #1
 800b564:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3b01      	subs	r3, #1
 800b56a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1f1      	bne.n	800b556 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b572:	4b13      	ldr	r3, [pc, #76]	; (800b5c0 <xTaskResumeAll+0x134>)
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b578:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <xTaskResumeAll+0x130>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b580:	2301      	movs	r3, #1
 800b582:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b584:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <xTaskResumeAll+0x138>)
 800b586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b594:	f001 f92e 	bl	800c7f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b598:	68bb      	ldr	r3, [r7, #8]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000d08 	.word	0x20000d08
 800b5a8:	20000ce0 	.word	0x20000ce0
 800b5ac:	20000ca0 	.word	0x20000ca0
 800b5b0:	20000ce8 	.word	0x20000ce8
 800b5b4:	20000810 	.word	0x20000810
 800b5b8:	2000080c 	.word	0x2000080c
 800b5bc:	20000cf4 	.word	0x20000cf4
 800b5c0:	20000cf0 	.word	0x20000cf0
 800b5c4:	e000ed04 	.word	0xe000ed04

0800b5c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <xTaskGetTickCount+0x1c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5d4:	687b      	ldr	r3, [r7, #4]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20000ce4 	.word	0x20000ce4

0800b5e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f2:	4b4f      	ldr	r3, [pc, #316]	; (800b730 <xTaskIncrementTick+0x148>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f040 808f 	bne.w	800b71a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b5fc:	4b4d      	ldr	r3, [pc, #308]	; (800b734 <xTaskIncrementTick+0x14c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3301      	adds	r3, #1
 800b602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b604:	4a4b      	ldr	r2, [pc, #300]	; (800b734 <xTaskIncrementTick+0x14c>)
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d120      	bne.n	800b652 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b610:	4b49      	ldr	r3, [pc, #292]	; (800b738 <xTaskIncrementTick+0x150>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00a      	beq.n	800b630 <xTaskIncrementTick+0x48>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	603b      	str	r3, [r7, #0]
}
 800b62c:	bf00      	nop
 800b62e:	e7fe      	b.n	800b62e <xTaskIncrementTick+0x46>
 800b630:	4b41      	ldr	r3, [pc, #260]	; (800b738 <xTaskIncrementTick+0x150>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	4b41      	ldr	r3, [pc, #260]	; (800b73c <xTaskIncrementTick+0x154>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a3f      	ldr	r2, [pc, #252]	; (800b738 <xTaskIncrementTick+0x150>)
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	4a3f      	ldr	r2, [pc, #252]	; (800b73c <xTaskIncrementTick+0x154>)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6013      	str	r3, [r2, #0]
 800b644:	4b3e      	ldr	r3, [pc, #248]	; (800b740 <xTaskIncrementTick+0x158>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3301      	adds	r3, #1
 800b64a:	4a3d      	ldr	r2, [pc, #244]	; (800b740 <xTaskIncrementTick+0x158>)
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	f000 fb0d 	bl	800bc6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b652:	4b3c      	ldr	r3, [pc, #240]	; (800b744 <xTaskIncrementTick+0x15c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	693a      	ldr	r2, [r7, #16]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d349      	bcc.n	800b6f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b65c:	4b36      	ldr	r3, [pc, #216]	; (800b738 <xTaskIncrementTick+0x150>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d104      	bne.n	800b670 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b666:	4b37      	ldr	r3, [pc, #220]	; (800b744 <xTaskIncrementTick+0x15c>)
 800b668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b66c:	601a      	str	r2, [r3, #0]
					break;
 800b66e:	e03f      	b.n	800b6f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b670:	4b31      	ldr	r3, [pc, #196]	; (800b738 <xTaskIncrementTick+0x150>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d203      	bcs.n	800b690 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b688:	4a2e      	ldr	r2, [pc, #184]	; (800b744 <xTaskIncrementTick+0x15c>)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b68e:	e02f      	b.n	800b6f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	3304      	adds	r3, #4
 800b694:	4618      	mov	r0, r3
 800b696:	f7fe ff1b 	bl	800a4d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d004      	beq.n	800b6ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	3318      	adds	r3, #24
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe ff12 	bl	800a4d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b0:	4b25      	ldr	r3, [pc, #148]	; (800b748 <xTaskIncrementTick+0x160>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d903      	bls.n	800b6c0 <xTaskIncrementTick+0xd8>
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	4a22      	ldr	r2, [pc, #136]	; (800b748 <xTaskIncrementTick+0x160>)
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4a1f      	ldr	r2, [pc, #124]	; (800b74c <xTaskIncrementTick+0x164>)
 800b6ce:	441a      	add	r2, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fe fe9d 	bl	800a416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	4b1b      	ldr	r3, [pc, #108]	; (800b750 <xTaskIncrementTick+0x168>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d3b8      	bcc.n	800b65c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6ee:	e7b5      	b.n	800b65c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b6f0:	4b17      	ldr	r3, [pc, #92]	; (800b750 <xTaskIncrementTick+0x168>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f6:	4915      	ldr	r1, [pc, #84]	; (800b74c <xTaskIncrementTick+0x164>)
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	440b      	add	r3, r1
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d901      	bls.n	800b70c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b70c:	4b11      	ldr	r3, [pc, #68]	; (800b754 <xTaskIncrementTick+0x16c>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d007      	beq.n	800b724 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b714:	2301      	movs	r3, #1
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	e004      	b.n	800b724 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b71a:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <xTaskIncrementTick+0x170>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3301      	adds	r3, #1
 800b720:	4a0d      	ldr	r2, [pc, #52]	; (800b758 <xTaskIncrementTick+0x170>)
 800b722:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b724:	697b      	ldr	r3, [r7, #20]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000d08 	.word	0x20000d08
 800b734:	20000ce4 	.word	0x20000ce4
 800b738:	20000c98 	.word	0x20000c98
 800b73c:	20000c9c 	.word	0x20000c9c
 800b740:	20000cf8 	.word	0x20000cf8
 800b744:	20000d00 	.word	0x20000d00
 800b748:	20000ce8 	.word	0x20000ce8
 800b74c:	20000810 	.word	0x20000810
 800b750:	2000080c 	.word	0x2000080c
 800b754:	20000cf4 	.word	0x20000cf4
 800b758:	20000cf0 	.word	0x20000cf0

0800b75c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b762:	4b28      	ldr	r3, [pc, #160]	; (800b804 <vTaskSwitchContext+0xa8>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d003      	beq.n	800b772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b76a:	4b27      	ldr	r3, [pc, #156]	; (800b808 <vTaskSwitchContext+0xac>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b770:	e041      	b.n	800b7f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b772:	4b25      	ldr	r3, [pc, #148]	; (800b808 <vTaskSwitchContext+0xac>)
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b778:	4b24      	ldr	r3, [pc, #144]	; (800b80c <vTaskSwitchContext+0xb0>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	60fb      	str	r3, [r7, #12]
 800b77e:	e010      	b.n	800b7a2 <vTaskSwitchContext+0x46>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10a      	bne.n	800b79c <vTaskSwitchContext+0x40>
	__asm volatile
 800b786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78a:	f383 8811 	msr	BASEPRI, r3
 800b78e:	f3bf 8f6f 	isb	sy
 800b792:	f3bf 8f4f 	dsb	sy
 800b796:	607b      	str	r3, [r7, #4]
}
 800b798:	bf00      	nop
 800b79a:	e7fe      	b.n	800b79a <vTaskSwitchContext+0x3e>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	491b      	ldr	r1, [pc, #108]	; (800b810 <vTaskSwitchContext+0xb4>)
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	440b      	add	r3, r1
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0e4      	beq.n	800b780 <vTaskSwitchContext+0x24>
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4a13      	ldr	r2, [pc, #76]	; (800b810 <vTaskSwitchContext+0xb4>)
 800b7c2:	4413      	add	r3, r2
 800b7c4:	60bb      	str	r3, [r7, #8]
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	605a      	str	r2, [r3, #4]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	3308      	adds	r3, #8
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d104      	bne.n	800b7e6 <vTaskSwitchContext+0x8a>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	4a09      	ldr	r2, [pc, #36]	; (800b814 <vTaskSwitchContext+0xb8>)
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	4a06      	ldr	r2, [pc, #24]	; (800b80c <vTaskSwitchContext+0xb0>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6013      	str	r3, [r2, #0]
}
 800b7f6:	bf00      	nop
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	20000d08 	.word	0x20000d08
 800b808:	20000cf4 	.word	0x20000cf4
 800b80c:	20000ce8 	.word	0x20000ce8
 800b810:	20000810 	.word	0x20000810
 800b814:	2000080c 	.word	0x2000080c

0800b818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	60fb      	str	r3, [r7, #12]
}
 800b83a:	bf00      	nop
 800b83c:	e7fe      	b.n	800b83c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b83e:	4b07      	ldr	r3, [pc, #28]	; (800b85c <vTaskPlaceOnEventList+0x44>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3318      	adds	r3, #24
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7fe fe09 	bl	800a45e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b84c:	2101      	movs	r1, #1
 800b84e:	6838      	ldr	r0, [r7, #0]
 800b850:	f000 fad0 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
}
 800b854:	bf00      	nop
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2000080c 	.word	0x2000080c

0800b860 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	617b      	str	r3, [r7, #20]
}
 800b884:	bf00      	nop
 800b886:	e7fe      	b.n	800b886 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b888:	4b11      	ldr	r3, [pc, #68]	; (800b8d0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	613b      	str	r3, [r7, #16]
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b8a6:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b8b0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8b2:	4b08      	ldr	r3, [pc, #32]	; (800b8d4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7fe fdab 	bl	800a416 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa96 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
}
 800b8c8:	bf00      	nop
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20000d08 	.word	0x20000d08
 800b8d4:	2000080c 	.word	0x2000080c

0800b8d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	f383 8811 	msr	BASEPRI, r3
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	f3bf 8f4f 	dsb	sy
 800b8fa:	617b      	str	r3, [r7, #20]
}
 800b8fc:	bf00      	nop
 800b8fe:	e7fe      	b.n	800b8fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b900:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <vTaskPlaceOnEventListRestricted+0x54>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3318      	adds	r3, #24
 800b906:	4619      	mov	r1, r3
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7fe fd84 	bl	800a416 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b918:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	68b8      	ldr	r0, [r7, #8]
 800b91e:	f000 fa69 	bl	800bdf4 <prvAddCurrentTaskToDelayedList>
	}
 800b922:	bf00      	nop
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	2000080c 	.word	0x2000080c

0800b930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10a      	bne.n	800b95c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	60fb      	str	r3, [r7, #12]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	3318      	adds	r3, #24
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe fdb5 	bl	800a4d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b966:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <xTaskRemoveFromEventList+0xb0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d11d      	bne.n	800b9aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3304      	adds	r3, #4
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe fdac 	bl	800a4d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	4b19      	ldr	r3, [pc, #100]	; (800b9e4 <xTaskRemoveFromEventList+0xb4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d903      	bls.n	800b98c <xTaskRemoveFromEventList+0x5c>
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	4a16      	ldr	r2, [pc, #88]	; (800b9e4 <xTaskRemoveFromEventList+0xb4>)
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	4613      	mov	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4a13      	ldr	r2, [pc, #76]	; (800b9e8 <xTaskRemoveFromEventList+0xb8>)
 800b99a:	441a      	add	r2, r3
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	3304      	adds	r3, #4
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	f7fe fd37 	bl	800a416 <vListInsertEnd>
 800b9a8:	e005      	b.n	800b9b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	3318      	adds	r3, #24
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	480e      	ldr	r0, [pc, #56]	; (800b9ec <xTaskRemoveFromEventList+0xbc>)
 800b9b2:	f7fe fd30 	bl	800a416 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ba:	4b0d      	ldr	r3, [pc, #52]	; (800b9f0 <xTaskRemoveFromEventList+0xc0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d905      	bls.n	800b9d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9c8:	4b0a      	ldr	r3, [pc, #40]	; (800b9f4 <xTaskRemoveFromEventList+0xc4>)
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
 800b9ce:	e001      	b.n	800b9d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9d4:	697b      	ldr	r3, [r7, #20]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3718      	adds	r7, #24
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000d08 	.word	0x20000d08
 800b9e4:	20000ce8 	.word	0x20000ce8
 800b9e8:	20000810 	.word	0x20000810
 800b9ec:	20000ca0 	.word	0x20000ca0
 800b9f0:	2000080c 	.word	0x2000080c
 800b9f4:	20000cf4 	.word	0x20000cf4

0800b9f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba00:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <vTaskInternalSetTimeOutState+0x24>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba08:	4b05      	ldr	r3, [pc, #20]	; (800ba20 <vTaskInternalSetTimeOutState+0x28>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	605a      	str	r2, [r3, #4]
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	20000cf8 	.word	0x20000cf8
 800ba20:	20000ce4 	.word	0x20000ce4

0800ba24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	613b      	str	r3, [r7, #16]
}
 800ba46:	bf00      	nop
 800ba48:	e7fe      	b.n	800ba48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	60fb      	str	r3, [r7, #12]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba66:	f000 fe95 	bl	800c794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba6a:	4b1d      	ldr	r3, [pc, #116]	; (800bae0 <xTaskCheckForTimeOut+0xbc>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba82:	d102      	bne.n	800ba8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]
 800ba88:	e023      	b.n	800bad2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	4b15      	ldr	r3, [pc, #84]	; (800bae4 <xTaskCheckForTimeOut+0xc0>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d007      	beq.n	800baa6 <xTaskCheckForTimeOut+0x82>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	69ba      	ldr	r2, [r7, #24]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d302      	bcc.n	800baa6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800baa0:	2301      	movs	r3, #1
 800baa2:	61fb      	str	r3, [r7, #28]
 800baa4:	e015      	b.n	800bad2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	429a      	cmp	r2, r3
 800baae:	d20b      	bcs.n	800bac8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	1ad2      	subs	r2, r2, r3
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7ff ff9b 	bl	800b9f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	61fb      	str	r3, [r7, #28]
 800bac6:	e004      	b.n	800bad2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bace:	2301      	movs	r3, #1
 800bad0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bad2:	f000 fe8f 	bl	800c7f4 <vPortExitCritical>

	return xReturn;
 800bad6:	69fb      	ldr	r3, [r7, #28]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3720      	adds	r7, #32
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20000ce4 	.word	0x20000ce4
 800bae4:	20000cf8 	.word	0x20000cf8

0800bae8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800baec:	4b03      	ldr	r3, [pc, #12]	; (800bafc <vTaskMissedYield+0x14>)
 800baee:	2201      	movs	r2, #1
 800baf0:	601a      	str	r2, [r3, #0]
}
 800baf2:	bf00      	nop
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	20000cf4 	.word	0x20000cf4

0800bb00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb08:	f000 f852 	bl	800bbb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb0c:	4b06      	ldr	r3, [pc, #24]	; (800bb28 <prvIdleTask+0x28>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d9f9      	bls.n	800bb08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb14:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <prvIdleTask+0x2c>)
 800bb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb1a:	601a      	str	r2, [r3, #0]
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb24:	e7f0      	b.n	800bb08 <prvIdleTask+0x8>
 800bb26:	bf00      	nop
 800bb28:	20000810 	.word	0x20000810
 800bb2c:	e000ed04 	.word	0xe000ed04

0800bb30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb36:	2300      	movs	r3, #0
 800bb38:	607b      	str	r3, [r7, #4]
 800bb3a:	e00c      	b.n	800bb56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4a12      	ldr	r2, [pc, #72]	; (800bb90 <prvInitialiseTaskLists+0x60>)
 800bb48:	4413      	add	r3, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fe fc36 	bl	800a3bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3301      	adds	r3, #1
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b37      	cmp	r3, #55	; 0x37
 800bb5a:	d9ef      	bls.n	800bb3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb5c:	480d      	ldr	r0, [pc, #52]	; (800bb94 <prvInitialiseTaskLists+0x64>)
 800bb5e:	f7fe fc2d 	bl	800a3bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb62:	480d      	ldr	r0, [pc, #52]	; (800bb98 <prvInitialiseTaskLists+0x68>)
 800bb64:	f7fe fc2a 	bl	800a3bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb68:	480c      	ldr	r0, [pc, #48]	; (800bb9c <prvInitialiseTaskLists+0x6c>)
 800bb6a:	f7fe fc27 	bl	800a3bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb6e:	480c      	ldr	r0, [pc, #48]	; (800bba0 <prvInitialiseTaskLists+0x70>)
 800bb70:	f7fe fc24 	bl	800a3bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb74:	480b      	ldr	r0, [pc, #44]	; (800bba4 <prvInitialiseTaskLists+0x74>)
 800bb76:	f7fe fc21 	bl	800a3bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb7a:	4b0b      	ldr	r3, [pc, #44]	; (800bba8 <prvInitialiseTaskLists+0x78>)
 800bb7c:	4a05      	ldr	r2, [pc, #20]	; (800bb94 <prvInitialiseTaskLists+0x64>)
 800bb7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb80:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <prvInitialiseTaskLists+0x7c>)
 800bb82:	4a05      	ldr	r2, [pc, #20]	; (800bb98 <prvInitialiseTaskLists+0x68>)
 800bb84:	601a      	str	r2, [r3, #0]
}
 800bb86:	bf00      	nop
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000810 	.word	0x20000810
 800bb94:	20000c70 	.word	0x20000c70
 800bb98:	20000c84 	.word	0x20000c84
 800bb9c:	20000ca0 	.word	0x20000ca0
 800bba0:	20000cb4 	.word	0x20000cb4
 800bba4:	20000ccc 	.word	0x20000ccc
 800bba8:	20000c98 	.word	0x20000c98
 800bbac:	20000c9c 	.word	0x20000c9c

0800bbb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb6:	e019      	b.n	800bbec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbb8:	f000 fdec 	bl	800c794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbbc:	4b10      	ldr	r3, [pc, #64]	; (800bc00 <prvCheckTasksWaitingTermination+0x50>)
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe fc81 	bl	800a4d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <prvCheckTasksWaitingTermination+0x54>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	4a0b      	ldr	r2, [pc, #44]	; (800bc04 <prvCheckTasksWaitingTermination+0x54>)
 800bbd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <prvCheckTasksWaitingTermination+0x58>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	4a0a      	ldr	r2, [pc, #40]	; (800bc08 <prvCheckTasksWaitingTermination+0x58>)
 800bbe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbe2:	f000 fe07 	bl	800c7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f810 	bl	800bc0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbec:	4b06      	ldr	r3, [pc, #24]	; (800bc08 <prvCheckTasksWaitingTermination+0x58>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e1      	bne.n	800bbb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000cb4 	.word	0x20000cb4
 800bc04:	20000ce0 	.word	0x20000ce0
 800bc08:	20000cc8 	.word	0x20000cc8

0800bc0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d108      	bne.n	800bc30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 ffa4 	bl	800cb70 <vPortFree>
				vPortFree( pxTCB );
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 ffa1 	bl	800cb70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc2e:	e018      	b.n	800bc62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d103      	bne.n	800bc42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 ff98 	bl	800cb70 <vPortFree>
	}
 800bc40:	e00f      	b.n	800bc62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d00a      	beq.n	800bc62 <prvDeleteTCB+0x56>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	60fb      	str	r3, [r7, #12]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <prvDeleteTCB+0x54>
	}
 800bc62:	bf00      	nop
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc72:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <prvResetNextTaskUnblockTime+0x38>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	; (800bca8 <prvResetNextTaskUnblockTime+0x3c>)
 800bc7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc84:	e008      	b.n	800bc98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc86:	4b07      	ldr	r3, [pc, #28]	; (800bca4 <prvResetNextTaskUnblockTime+0x38>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	4a04      	ldr	r2, [pc, #16]	; (800bca8 <prvResetNextTaskUnblockTime+0x3c>)
 800bc96:	6013      	str	r3, [r2, #0]
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	20000c98 	.word	0x20000c98
 800bca8:	20000d00 	.word	0x20000d00

0800bcac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcb2:	4b0b      	ldr	r3, [pc, #44]	; (800bce0 <xTaskGetSchedulerState+0x34>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d102      	bne.n	800bcc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	e008      	b.n	800bcd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcc0:	4b08      	ldr	r3, [pc, #32]	; (800bce4 <xTaskGetSchedulerState+0x38>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcc8:	2302      	movs	r3, #2
 800bcca:	607b      	str	r3, [r7, #4]
 800bccc:	e001      	b.n	800bcd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcd2:	687b      	ldr	r3, [r7, #4]
	}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20000cec 	.word	0x20000cec
 800bce4:	20000d08 	.word	0x20000d08

0800bce8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d056      	beq.n	800bdac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcfe:	4b2e      	ldr	r3, [pc, #184]	; (800bdb8 <xTaskPriorityDisinherit+0xd0>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	693a      	ldr	r2, [r7, #16]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d00a      	beq.n	800bd1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	60fb      	str	r3, [r7, #12]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10a      	bne.n	800bd3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	60bb      	str	r3, [r7, #8]
}
 800bd38:	bf00      	nop
 800bd3a:	e7fe      	b.n	800bd3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd40:	1e5a      	subs	r2, r3, #1
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d02c      	beq.n	800bdac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d128      	bne.n	800bdac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe fbb6 	bl	800a4d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd7c:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <xTaskPriorityDisinherit+0xd4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d903      	bls.n	800bd8c <xTaskPriorityDisinherit+0xa4>
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	4a0c      	ldr	r2, [pc, #48]	; (800bdbc <xTaskPriorityDisinherit+0xd4>)
 800bd8a:	6013      	str	r3, [r2, #0]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd90:	4613      	mov	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4a09      	ldr	r2, [pc, #36]	; (800bdc0 <xTaskPriorityDisinherit+0xd8>)
 800bd9a:	441a      	add	r2, r3
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4619      	mov	r1, r3
 800bda2:	4610      	mov	r0, r2
 800bda4:	f7fe fb37 	bl	800a416 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdac:	697b      	ldr	r3, [r7, #20]
	}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	2000080c 	.word	0x2000080c
 800bdbc:	20000ce8 	.word	0x20000ce8
 800bdc0:	20000810 	.word	0x20000810

0800bdc4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <uxTaskResetEventItemValue+0x2c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdd2:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <uxTaskResetEventItemValue+0x2c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <uxTaskResetEventItemValue+0x2c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bde0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bde2:	687b      	ldr	r3, [r7, #4]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	2000080c 	.word	0x2000080c

0800bdf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdfe:	4b21      	ldr	r3, [pc, #132]	; (800be84 <prvAddCurrentTaskToDelayedList+0x90>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be04:	4b20      	ldr	r3, [pc, #128]	; (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3304      	adds	r3, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe fb60 	bl	800a4d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be16:	d10a      	bne.n	800be2e <prvAddCurrentTaskToDelayedList+0x3a>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d007      	beq.n	800be2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be1e:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3304      	adds	r3, #4
 800be24:	4619      	mov	r1, r3
 800be26:	4819      	ldr	r0, [pc, #100]	; (800be8c <prvAddCurrentTaskToDelayedList+0x98>)
 800be28:	f7fe faf5 	bl	800a416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be2c:	e026      	b.n	800be7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4413      	add	r3, r2
 800be34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be36:	4b14      	ldr	r3, [pc, #80]	; (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	429a      	cmp	r2, r3
 800be44:	d209      	bcs.n	800be5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be46:	4b12      	ldr	r3, [pc, #72]	; (800be90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b0f      	ldr	r3, [pc, #60]	; (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3304      	adds	r3, #4
 800be50:	4619      	mov	r1, r3
 800be52:	4610      	mov	r0, r2
 800be54:	f7fe fb03 	bl	800a45e <vListInsert>
}
 800be58:	e010      	b.n	800be7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be5a:	4b0e      	ldr	r3, [pc, #56]	; (800be94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <prvAddCurrentTaskToDelayedList+0x94>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f7fe faf9 	bl	800a45e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	429a      	cmp	r2, r3
 800be74:	d202      	bcs.n	800be7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be76:	4a08      	ldr	r2, [pc, #32]	; (800be98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	6013      	str	r3, [r2, #0]
}
 800be7c:	bf00      	nop
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20000ce4 	.word	0x20000ce4
 800be88:	2000080c 	.word	0x2000080c
 800be8c:	20000ccc 	.word	0x20000ccc
 800be90:	20000c9c 	.word	0x20000c9c
 800be94:	20000c98 	.word	0x20000c98
 800be98:	20000d00 	.word	0x20000d00

0800be9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08a      	sub	sp, #40	; 0x28
 800bea0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bea6:	f000 fb07 	bl	800c4b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800beaa:	4b1c      	ldr	r3, [pc, #112]	; (800bf1c <xTimerCreateTimerTask+0x80>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d021      	beq.n	800bef6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800beba:	1d3a      	adds	r2, r7, #4
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	f107 030c 	add.w	r3, r7, #12
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe f91d 	bl	800a104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800beca:	6879      	ldr	r1, [r7, #4]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	9202      	str	r2, [sp, #8]
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	2302      	movs	r3, #2
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	2300      	movs	r3, #0
 800beda:	460a      	mov	r2, r1
 800bedc:	4910      	ldr	r1, [pc, #64]	; (800bf20 <xTimerCreateTimerTask+0x84>)
 800bede:	4811      	ldr	r0, [pc, #68]	; (800bf24 <xTimerCreateTimerTask+0x88>)
 800bee0:	f7ff f80c 	bl	800aefc <xTaskCreateStatic>
 800bee4:	4603      	mov	r3, r0
 800bee6:	4a10      	ldr	r2, [pc, #64]	; (800bf28 <xTimerCreateTimerTask+0x8c>)
 800bee8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800beea:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <xTimerCreateTimerTask+0x8c>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bef2:	2301      	movs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10a      	bne.n	800bf12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	613b      	str	r3, [r7, #16]
}
 800bf0e:	bf00      	nop
 800bf10:	e7fe      	b.n	800bf10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf12:	697b      	ldr	r3, [r7, #20]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20000d3c 	.word	0x20000d3c
 800bf20:	0800dfc8 	.word	0x0800dfc8
 800bf24:	0800c061 	.word	0x0800c061
 800bf28:	20000d40 	.word	0x20000d40

0800bf2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08a      	sub	sp, #40	; 0x28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
 800bf38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	623b      	str	r3, [r7, #32]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf5a:	4b1a      	ldr	r3, [pc, #104]	; (800bfc4 <xTimerGenericCommand+0x98>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d02a      	beq.n	800bfb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2b05      	cmp	r3, #5
 800bf72:	dc18      	bgt.n	800bfa6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf74:	f7ff fe9a 	bl	800bcac <xTaskGetSchedulerState>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d109      	bne.n	800bf92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf7e:	4b11      	ldr	r3, [pc, #68]	; (800bfc4 <xTimerGenericCommand+0x98>)
 800bf80:	6818      	ldr	r0, [r3, #0]
 800bf82:	f107 0110 	add.w	r1, r7, #16
 800bf86:	2300      	movs	r3, #0
 800bf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8a:	f7fe fbcf 	bl	800a72c <xQueueGenericSend>
 800bf8e:	6278      	str	r0, [r7, #36]	; 0x24
 800bf90:	e012      	b.n	800bfb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf92:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <xTimerGenericCommand+0x98>)
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	f107 0110 	add.w	r1, r7, #16
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f7fe fbc5 	bl	800a72c <xQueueGenericSend>
 800bfa2:	6278      	str	r0, [r7, #36]	; 0x24
 800bfa4:	e008      	b.n	800bfb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bfa6:	4b07      	ldr	r3, [pc, #28]	; (800bfc4 <xTimerGenericCommand+0x98>)
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	f107 0110 	add.w	r1, r7, #16
 800bfae:	2300      	movs	r3, #0
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	f7fe fcb9 	bl	800a928 <xQueueGenericSendFromISR>
 800bfb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3728      	adds	r7, #40	; 0x28
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20000d3c 	.word	0x20000d3c

0800bfc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd2:	4b22      	ldr	r3, [pc, #136]	; (800c05c <prvProcessExpiredTimer+0x94>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fe fa75 	bl	800a4d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfec:	f003 0304 	and.w	r3, r3, #4
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d022      	beq.n	800c03a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	699a      	ldr	r2, [r3, #24]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	18d1      	adds	r1, r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	6978      	ldr	r0, [r7, #20]
 800c002:	f000 f8d1 	bl	800c1a8 <prvInsertTimerInActiveList>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d01f      	beq.n	800c04c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c00c:	2300      	movs	r3, #0
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	2300      	movs	r3, #0
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	2100      	movs	r1, #0
 800c016:	6978      	ldr	r0, [r7, #20]
 800c018:	f7ff ff88 	bl	800bf2c <xTimerGenericCommand>
 800c01c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d113      	bne.n	800c04c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	60fb      	str	r3, [r7, #12]
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c040:	f023 0301 	bic.w	r3, r3, #1
 800c044:	b2da      	uxtb	r2, r3
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	6978      	ldr	r0, [r7, #20]
 800c052:	4798      	blx	r3
}
 800c054:	bf00      	nop
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	20000d34 	.word	0x20000d34

0800c060 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c068:	f107 0308 	add.w	r3, r7, #8
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 f857 	bl	800c120 <prvGetNextExpireTime>
 800c072:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	4619      	mov	r1, r3
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 f803 	bl	800c084 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c07e:	f000 f8d5 	bl	800c22c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c082:	e7f1      	b.n	800c068 <prvTimerTask+0x8>

0800c084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c08e:	f7ff f9ef 	bl	800b470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c092:	f107 0308 	add.w	r3, r7, #8
 800c096:	4618      	mov	r0, r3
 800c098:	f000 f866 	bl	800c168 <prvSampleTimeNow>
 800c09c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d130      	bne.n	800c106 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10a      	bne.n	800c0c0 <prvProcessTimerOrBlockTask+0x3c>
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d806      	bhi.n	800c0c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0b2:	f7ff f9eb 	bl	800b48c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0b6:	68f9      	ldr	r1, [r7, #12]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff ff85 	bl	800bfc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0be:	e024      	b.n	800c10a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d008      	beq.n	800c0d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0c6:	4b13      	ldr	r3, [pc, #76]	; (800c114 <prvProcessTimerOrBlockTask+0x90>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <prvProcessTimerOrBlockTask+0x50>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e000      	b.n	800c0d6 <prvProcessTimerOrBlockTask+0x52>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0d8:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <prvProcessTimerOrBlockTask+0x94>)
 800c0da:	6818      	ldr	r0, [r3, #0]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	f7fe fed5 	bl	800ae94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0ea:	f7ff f9cf 	bl	800b48c <xTaskResumeAll>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10a      	bne.n	800c10a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0f4:	4b09      	ldr	r3, [pc, #36]	; (800c11c <prvProcessTimerOrBlockTask+0x98>)
 800c0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	f3bf 8f6f 	isb	sy
}
 800c104:	e001      	b.n	800c10a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c106:	f7ff f9c1 	bl	800b48c <xTaskResumeAll>
}
 800c10a:	bf00      	nop
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	20000d38 	.word	0x20000d38
 800c118:	20000d3c 	.word	0x20000d3c
 800c11c:	e000ed04 	.word	0xe000ed04

0800c120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c128:	4b0e      	ldr	r3, [pc, #56]	; (800c164 <prvGetNextExpireTime+0x44>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <prvGetNextExpireTime+0x16>
 800c132:	2201      	movs	r2, #1
 800c134:	e000      	b.n	800c138 <prvGetNextExpireTime+0x18>
 800c136:	2200      	movs	r2, #0
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d105      	bne.n	800c150 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c144:	4b07      	ldr	r3, [pc, #28]	; (800c164 <prvGetNextExpireTime+0x44>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	e001      	b.n	800c154 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c150:	2300      	movs	r3, #0
 800c152:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c154:	68fb      	ldr	r3, [r7, #12]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20000d34 	.word	0x20000d34

0800c168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c170:	f7ff fa2a 	bl	800b5c8 <xTaskGetTickCount>
 800c174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <prvSampleTimeNow+0x3c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d205      	bcs.n	800c18c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c180:	f000 f936 	bl	800c3f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	e002      	b.n	800c192 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c192:	4a04      	ldr	r2, [pc, #16]	; (800c1a4 <prvSampleTimeNow+0x3c>)
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c198:	68fb      	ldr	r3, [r7, #12]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	20000d44 	.word	0x20000d44

0800c1a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d812      	bhi.n	800c1f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	1ad2      	subs	r2, r2, r3
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d302      	bcc.n	800c1e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	617b      	str	r3, [r7, #20]
 800c1e0:	e01b      	b.n	800c21a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1e2:	4b10      	ldr	r3, [pc, #64]	; (800c224 <prvInsertTimerInActiveList+0x7c>)
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	f7fe f936 	bl	800a45e <vListInsert>
 800c1f2:	e012      	b.n	800c21a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d206      	bcs.n	800c20a <prvInsertTimerInActiveList+0x62>
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d302      	bcc.n	800c20a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e007      	b.n	800c21a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <prvInsertTimerInActiveList+0x80>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	3304      	adds	r3, #4
 800c212:	4619      	mov	r1, r3
 800c214:	4610      	mov	r0, r2
 800c216:	f7fe f922 	bl	800a45e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c21a:	697b      	ldr	r3, [r7, #20]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	20000d38 	.word	0x20000d38
 800c228:	20000d34 	.word	0x20000d34

0800c22c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08e      	sub	sp, #56	; 0x38
 800c230:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c232:	e0ca      	b.n	800c3ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	da18      	bge.n	800c26c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c23a:	1d3b      	adds	r3, r7, #4
 800c23c:	3304      	adds	r3, #4
 800c23e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10a      	bne.n	800c25c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	61fb      	str	r3, [r7, #28]
}
 800c258:	bf00      	nop
 800c25a:	e7fe      	b.n	800c25a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c262:	6850      	ldr	r0, [r2, #4]
 800c264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c266:	6892      	ldr	r2, [r2, #8]
 800c268:	4611      	mov	r1, r2
 800c26a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f2c0 80aa 	blt.w	800c3c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d004      	beq.n	800c28a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	3304      	adds	r3, #4
 800c284:	4618      	mov	r0, r3
 800c286:	f7fe f923 	bl	800a4d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c28a:	463b      	mov	r3, r7
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7ff ff6b 	bl	800c168 <prvSampleTimeNow>
 800c292:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b09      	cmp	r3, #9
 800c298:	f200 8097 	bhi.w	800c3ca <prvProcessReceivedCommands+0x19e>
 800c29c:	a201      	add	r2, pc, #4	; (adr r2, 800c2a4 <prvProcessReceivedCommands+0x78>)
 800c29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a2:	bf00      	nop
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2cd 	.word	0x0800c2cd
 800c2ac:	0800c2cd 	.word	0x0800c2cd
 800c2b0:	0800c341 	.word	0x0800c341
 800c2b4:	0800c355 	.word	0x0800c355
 800c2b8:	0800c39f 	.word	0x0800c39f
 800c2bc:	0800c2cd 	.word	0x0800c2cd
 800c2c0:	0800c2cd 	.word	0x0800c2cd
 800c2c4:	0800c341 	.word	0x0800c341
 800c2c8:	0800c355 	.word	0x0800c355
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2d2:	f043 0301 	orr.w	r3, r3, #1
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	18d1      	adds	r1, r2, r3
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ec:	f7ff ff5c 	bl	800c1a8 <prvInsertTimerInActiveList>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d069      	beq.n	800c3ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d05e      	beq.n	800c3ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	441a      	add	r2, r3
 800c314:	2300      	movs	r3, #0
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	2300      	movs	r3, #0
 800c31a:	2100      	movs	r1, #0
 800c31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31e:	f7ff fe05 	bl	800bf2c <xTimerGenericCommand>
 800c322:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d14f      	bne.n	800c3ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	61bb      	str	r3, [r7, #24]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c346:	f023 0301 	bic.w	r3, r3, #1
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c352:	e03a      	b.n	800c3ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c35a:	f043 0301 	orr.w	r3, r3, #1
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10a      	bne.n	800c38a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	617b      	str	r3, [r7, #20]
}
 800c386:	bf00      	nop
 800c388:	e7fe      	b.n	800c388 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	699a      	ldr	r2, [r3, #24]
 800c38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c390:	18d1      	adds	r1, r2, r3
 800c392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c398:	f7ff ff06 	bl	800c1a8 <prvInsertTimerInActiveList>
					break;
 800c39c:	e015      	b.n	800c3ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3a4:	f003 0302 	and.w	r3, r3, #2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d103      	bne.n	800c3b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ae:	f000 fbdf 	bl	800cb70 <vPortFree>
 800c3b2:	e00a      	b.n	800c3ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ba:	f023 0301 	bic.w	r3, r3, #1
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3c6:	e000      	b.n	800c3ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c3c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3ca:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <prvProcessReceivedCommands+0x1c0>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	1d39      	adds	r1, r7, #4
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe fb44 	bl	800aa60 <xQueueReceive>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f47f af2a 	bne.w	800c234 <prvProcessReceivedCommands+0x8>
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	bf00      	nop
 800c3e4:	3730      	adds	r7, #48	; 0x30
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000d3c 	.word	0x20000d3c

0800c3f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3f6:	e048      	b.n	800c48a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3f8:	4b2d      	ldr	r3, [pc, #180]	; (800c4b0 <prvSwitchTimerLists+0xc0>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c402:	4b2b      	ldr	r3, [pc, #172]	; (800c4b0 <prvSwitchTimerLists+0xc0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	3304      	adds	r3, #4
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe f85d 	bl	800a4d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d02e      	beq.n	800c48a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	4413      	add	r3, r2
 800c434:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d90e      	bls.n	800c45c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c44a:	4b19      	ldr	r3, [pc, #100]	; (800c4b0 <prvSwitchTimerLists+0xc0>)
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3304      	adds	r3, #4
 800c452:	4619      	mov	r1, r3
 800c454:	4610      	mov	r0, r2
 800c456:	f7fe f802 	bl	800a45e <vListInsert>
 800c45a:	e016      	b.n	800c48a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c45c:	2300      	movs	r3, #0
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	2300      	movs	r3, #0
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	2100      	movs	r1, #0
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7ff fd60 	bl	800bf2c <xTimerGenericCommand>
 800c46c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	603b      	str	r3, [r7, #0]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c48a:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <prvSwitchTimerLists+0xc0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1b1      	bne.n	800c3f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c494:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <prvSwitchTimerLists+0xc0>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c49a:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <prvSwitchTimerLists+0xc4>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a04      	ldr	r2, [pc, #16]	; (800c4b0 <prvSwitchTimerLists+0xc0>)
 800c4a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4a2:	4a04      	ldr	r2, [pc, #16]	; (800c4b4 <prvSwitchTimerLists+0xc4>)
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	6013      	str	r3, [r2, #0]
}
 800c4a8:	bf00      	nop
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	20000d34 	.word	0x20000d34
 800c4b4:	20000d38 	.word	0x20000d38

0800c4b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4be:	f000 f969 	bl	800c794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4c2:	4b15      	ldr	r3, [pc, #84]	; (800c518 <prvCheckForValidListAndQueue+0x60>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d120      	bne.n	800c50c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4ca:	4814      	ldr	r0, [pc, #80]	; (800c51c <prvCheckForValidListAndQueue+0x64>)
 800c4cc:	f7fd ff76 	bl	800a3bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4d0:	4813      	ldr	r0, [pc, #76]	; (800c520 <prvCheckForValidListAndQueue+0x68>)
 800c4d2:	f7fd ff73 	bl	800a3bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <prvCheckForValidListAndQueue+0x6c>)
 800c4d8:	4a10      	ldr	r2, [pc, #64]	; (800c51c <prvCheckForValidListAndQueue+0x64>)
 800c4da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4dc:	4b12      	ldr	r3, [pc, #72]	; (800c528 <prvCheckForValidListAndQueue+0x70>)
 800c4de:	4a10      	ldr	r2, [pc, #64]	; (800c520 <prvCheckForValidListAndQueue+0x68>)
 800c4e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	4b11      	ldr	r3, [pc, #68]	; (800c52c <prvCheckForValidListAndQueue+0x74>)
 800c4e8:	4a11      	ldr	r2, [pc, #68]	; (800c530 <prvCheckForValidListAndQueue+0x78>)
 800c4ea:	2110      	movs	r1, #16
 800c4ec:	200a      	movs	r0, #10
 800c4ee:	f7fe f881 	bl	800a5f4 <xQueueGenericCreateStatic>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4a08      	ldr	r2, [pc, #32]	; (800c518 <prvCheckForValidListAndQueue+0x60>)
 800c4f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4f8:	4b07      	ldr	r3, [pc, #28]	; (800c518 <prvCheckForValidListAndQueue+0x60>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d005      	beq.n	800c50c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c500:	4b05      	ldr	r3, [pc, #20]	; (800c518 <prvCheckForValidListAndQueue+0x60>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	490b      	ldr	r1, [pc, #44]	; (800c534 <prvCheckForValidListAndQueue+0x7c>)
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fc9a 	bl	800ae40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c50c:	f000 f972 	bl	800c7f4 <vPortExitCritical>
}
 800c510:	bf00      	nop
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20000d3c 	.word	0x20000d3c
 800c51c:	20000d0c 	.word	0x20000d0c
 800c520:	20000d20 	.word	0x20000d20
 800c524:	20000d34 	.word	0x20000d34
 800c528:	20000d38 	.word	0x20000d38
 800c52c:	20000de8 	.word	0x20000de8
 800c530:	20000d48 	.word	0x20000d48
 800c534:	0800dfd0 	.word	0x0800dfd0

0800c538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3b04      	subs	r3, #4
 800c548:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	3b04      	subs	r3, #4
 800c556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	f023 0201 	bic.w	r2, r3, #1
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	3b04      	subs	r3, #4
 800c566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c568:	4a0c      	ldr	r2, [pc, #48]	; (800c59c <pxPortInitialiseStack+0x64>)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3b14      	subs	r3, #20
 800c572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3b04      	subs	r3, #4
 800c57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f06f 0202 	mvn.w	r2, #2
 800c586:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3b20      	subs	r3, #32
 800c58c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c58e:	68fb      	ldr	r3, [r7, #12]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3714      	adds	r7, #20
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	0800c5a1 	.word	0x0800c5a1

0800c5a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5aa:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <prvTaskExitError+0x54>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5b2:	d00a      	beq.n	800c5ca <prvTaskExitError+0x2a>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	60fb      	str	r3, [r7, #12]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <prvTaskExitError+0x28>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	60bb      	str	r3, [r7, #8]
}
 800c5dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5de:	bf00      	nop
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0fc      	beq.n	800c5e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	200000b4 	.word	0x200000b4
	...

0800c600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c600:	4b07      	ldr	r3, [pc, #28]	; (800c620 <pxCurrentTCBConst2>)
 800c602:	6819      	ldr	r1, [r3, #0]
 800c604:	6808      	ldr	r0, [r1, #0]
 800c606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	f380 8809 	msr	PSP, r0
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f04f 0000 	mov.w	r0, #0
 800c616:	f380 8811 	msr	BASEPRI, r0
 800c61a:	4770      	bx	lr
 800c61c:	f3af 8000 	nop.w

0800c620 <pxCurrentTCBConst2>:
 800c620:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop

0800c628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c628:	4808      	ldr	r0, [pc, #32]	; (800c64c <prvPortStartFirstTask+0x24>)
 800c62a:	6800      	ldr	r0, [r0, #0]
 800c62c:	6800      	ldr	r0, [r0, #0]
 800c62e:	f380 8808 	msr	MSP, r0
 800c632:	f04f 0000 	mov.w	r0, #0
 800c636:	f380 8814 	msr	CONTROL, r0
 800c63a:	b662      	cpsie	i
 800c63c:	b661      	cpsie	f
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	df00      	svc	0
 800c648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c64a:	bf00      	nop
 800c64c:	e000ed08 	.word	0xe000ed08

0800c650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c656:	4b46      	ldr	r3, [pc, #280]	; (800c770 <xPortStartScheduler+0x120>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a46      	ldr	r2, [pc, #280]	; (800c774 <xPortStartScheduler+0x124>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d10a      	bne.n	800c676 <xPortStartScheduler+0x26>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	613b      	str	r3, [r7, #16]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c676:	4b3e      	ldr	r3, [pc, #248]	; (800c770 <xPortStartScheduler+0x120>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a3f      	ldr	r2, [pc, #252]	; (800c778 <xPortStartScheduler+0x128>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d10a      	bne.n	800c696 <xPortStartScheduler+0x46>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	60fb      	str	r3, [r7, #12]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c696:	4b39      	ldr	r3, [pc, #228]	; (800c77c <xPortStartScheduler+0x12c>)
 800c698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	22ff      	movs	r2, #255	; 0xff
 800c6a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	4b31      	ldr	r3, [pc, #196]	; (800c780 <xPortStartScheduler+0x130>)
 800c6bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6be:	4b31      	ldr	r3, [pc, #196]	; (800c784 <xPortStartScheduler+0x134>)
 800c6c0:	2207      	movs	r2, #7
 800c6c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6c4:	e009      	b.n	800c6da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c6c6:	4b2f      	ldr	r3, [pc, #188]	; (800c784 <xPortStartScheduler+0x134>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	4a2d      	ldr	r2, [pc, #180]	; (800c784 <xPortStartScheduler+0x134>)
 800c6ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6d0:	78fb      	ldrb	r3, [r7, #3]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e2:	2b80      	cmp	r3, #128	; 0x80
 800c6e4:	d0ef      	beq.n	800c6c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6e6:	4b27      	ldr	r3, [pc, #156]	; (800c784 <xPortStartScheduler+0x134>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f1c3 0307 	rsb	r3, r3, #7
 800c6ee:	2b04      	cmp	r3, #4
 800c6f0:	d00a      	beq.n	800c708 <xPortStartScheduler+0xb8>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	60bb      	str	r3, [r7, #8]
}
 800c704:	bf00      	nop
 800c706:	e7fe      	b.n	800c706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c708:	4b1e      	ldr	r3, [pc, #120]	; (800c784 <xPortStartScheduler+0x134>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	021b      	lsls	r3, r3, #8
 800c70e:	4a1d      	ldr	r2, [pc, #116]	; (800c784 <xPortStartScheduler+0x134>)
 800c710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c712:	4b1c      	ldr	r3, [pc, #112]	; (800c784 <xPortStartScheduler+0x134>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c71a:	4a1a      	ldr	r2, [pc, #104]	; (800c784 <xPortStartScheduler+0x134>)
 800c71c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	b2da      	uxtb	r2, r3
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c726:	4b18      	ldr	r3, [pc, #96]	; (800c788 <xPortStartScheduler+0x138>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a17      	ldr	r2, [pc, #92]	; (800c788 <xPortStartScheduler+0x138>)
 800c72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c732:	4b15      	ldr	r3, [pc, #84]	; (800c788 <xPortStartScheduler+0x138>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a14      	ldr	r2, [pc, #80]	; (800c788 <xPortStartScheduler+0x138>)
 800c738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c73c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c73e:	f000 f8dd 	bl	800c8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c742:	4b12      	ldr	r3, [pc, #72]	; (800c78c <xPortStartScheduler+0x13c>)
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c748:	f000 f8fc 	bl	800c944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c74c:	4b10      	ldr	r3, [pc, #64]	; (800c790 <xPortStartScheduler+0x140>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a0f      	ldr	r2, [pc, #60]	; (800c790 <xPortStartScheduler+0x140>)
 800c752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c758:	f7ff ff66 	bl	800c628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c75c:	f7fe fffe 	bl	800b75c <vTaskSwitchContext>
	prvTaskExitError();
 800c760:	f7ff ff1e 	bl	800c5a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	e000ed00 	.word	0xe000ed00
 800c774:	410fc271 	.word	0x410fc271
 800c778:	410fc270 	.word	0x410fc270
 800c77c:	e000e400 	.word	0xe000e400
 800c780:	20000e38 	.word	0x20000e38
 800c784:	20000e3c 	.word	0x20000e3c
 800c788:	e000ed20 	.word	0xe000ed20
 800c78c:	200000b4 	.word	0x200000b4
 800c790:	e000ef34 	.word	0xe000ef34

0800c794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	607b      	str	r3, [r7, #4]
}
 800c7ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7ae:	4b0f      	ldr	r3, [pc, #60]	; (800c7ec <vPortEnterCritical+0x58>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	4a0d      	ldr	r2, [pc, #52]	; (800c7ec <vPortEnterCritical+0x58>)
 800c7b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <vPortEnterCritical+0x58>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d10f      	bne.n	800c7e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7c0:	4b0b      	ldr	r3, [pc, #44]	; (800c7f0 <vPortEnterCritical+0x5c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00a      	beq.n	800c7e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	603b      	str	r3, [r7, #0]
}
 800c7dc:	bf00      	nop
 800c7de:	e7fe      	b.n	800c7de <vPortEnterCritical+0x4a>
	}
}
 800c7e0:	bf00      	nop
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	200000b4 	.word	0x200000b4
 800c7f0:	e000ed04 	.word	0xe000ed04

0800c7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7fa:	4b12      	ldr	r3, [pc, #72]	; (800c844 <vPortExitCritical+0x50>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10a      	bne.n	800c818 <vPortExitCritical+0x24>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	607b      	str	r3, [r7, #4]
}
 800c814:	bf00      	nop
 800c816:	e7fe      	b.n	800c816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <vPortExitCritical+0x50>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	4a09      	ldr	r2, [pc, #36]	; (800c844 <vPortExitCritical+0x50>)
 800c820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c822:	4b08      	ldr	r3, [pc, #32]	; (800c844 <vPortExitCritical+0x50>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <vPortExitCritical+0x42>
 800c82a:	2300      	movs	r3, #0
 800c82c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	f383 8811 	msr	BASEPRI, r3
}
 800c834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	200000b4 	.word	0x200000b4
	...

0800c850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c850:	f3ef 8009 	mrs	r0, PSP
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	4b15      	ldr	r3, [pc, #84]	; (800c8b0 <pxCurrentTCBConst>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	f01e 0f10 	tst.w	lr, #16
 800c860:	bf08      	it	eq
 800c862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86a:	6010      	str	r0, [r2, #0]
 800c86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c870:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c874:	f380 8811 	msr	BASEPRI, r0
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f7fe ff6c 	bl	800b75c <vTaskSwitchContext>
 800c884:	f04f 0000 	mov.w	r0, #0
 800c888:	f380 8811 	msr	BASEPRI, r0
 800c88c:	bc09      	pop	{r0, r3}
 800c88e:	6819      	ldr	r1, [r3, #0]
 800c890:	6808      	ldr	r0, [r1, #0]
 800c892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c896:	f01e 0f10 	tst.w	lr, #16
 800c89a:	bf08      	it	eq
 800c89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8a0:	f380 8809 	msr	PSP, r0
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	f3af 8000 	nop.w

0800c8b0 <pxCurrentTCBConst>:
 800c8b0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop

0800c8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	607b      	str	r3, [r7, #4]
}
 800c8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8d2:	f7fe fe89 	bl	800b5e8 <xTaskIncrementTick>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8dc:	4b06      	ldr	r3, [pc, #24]	; (800c8f8 <xPortSysTickHandler+0x40>)
 800c8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	f383 8811 	msr	BASEPRI, r3
}
 800c8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c900:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <vPortSetupTimerInterrupt+0x34>)
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c906:	4b0b      	ldr	r3, [pc, #44]	; (800c934 <vPortSetupTimerInterrupt+0x38>)
 800c908:	2200      	movs	r2, #0
 800c90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c90c:	4b0a      	ldr	r3, [pc, #40]	; (800c938 <vPortSetupTimerInterrupt+0x3c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a0a      	ldr	r2, [pc, #40]	; (800c93c <vPortSetupTimerInterrupt+0x40>)
 800c912:	fba2 2303 	umull	r2, r3, r2, r3
 800c916:	099b      	lsrs	r3, r3, #6
 800c918:	4a09      	ldr	r2, [pc, #36]	; (800c940 <vPortSetupTimerInterrupt+0x44>)
 800c91a:	3b01      	subs	r3, #1
 800c91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c91e:	4b04      	ldr	r3, [pc, #16]	; (800c930 <vPortSetupTimerInterrupt+0x34>)
 800c920:	2207      	movs	r2, #7
 800c922:	601a      	str	r2, [r3, #0]
}
 800c924:	bf00      	nop
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	e000e010 	.word	0xe000e010
 800c934:	e000e018 	.word	0xe000e018
 800c938:	20000094 	.word	0x20000094
 800c93c:	10624dd3 	.word	0x10624dd3
 800c940:	e000e014 	.word	0xe000e014

0800c944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c954 <vPortEnableVFP+0x10>
 800c948:	6801      	ldr	r1, [r0, #0]
 800c94a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c94e:	6001      	str	r1, [r0, #0]
 800c950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c952:	bf00      	nop
 800c954:	e000ed88 	.word	0xe000ed88

0800c958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c95e:	f3ef 8305 	mrs	r3, IPSR
 800c962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b0f      	cmp	r3, #15
 800c968:	d914      	bls.n	800c994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c96a:	4a17      	ldr	r2, [pc, #92]	; (800c9c8 <vPortValidateInterruptPriority+0x70>)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	4413      	add	r3, r2
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c974:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <vPortValidateInterruptPriority+0x74>)
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	7afa      	ldrb	r2, [r7, #11]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d20a      	bcs.n	800c994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	607b      	str	r3, [r7, #4]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c994:	4b0e      	ldr	r3, [pc, #56]	; (800c9d0 <vPortValidateInterruptPriority+0x78>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c99c:	4b0d      	ldr	r3, [pc, #52]	; (800c9d4 <vPortValidateInterruptPriority+0x7c>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d90a      	bls.n	800c9ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	603b      	str	r3, [r7, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	e7fe      	b.n	800c9b8 <vPortValidateInterruptPriority+0x60>
	}
 800c9ba:	bf00      	nop
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	e000e3f0 	.word	0xe000e3f0
 800c9cc:	20000e38 	.word	0x20000e38
 800c9d0:	e000ed0c 	.word	0xe000ed0c
 800c9d4:	20000e3c 	.word	0x20000e3c

0800c9d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08a      	sub	sp, #40	; 0x28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9e4:	f7fe fd44 	bl	800b470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9e8:	4b5b      	ldr	r3, [pc, #364]	; (800cb58 <pvPortMalloc+0x180>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9f0:	f000 f920 	bl	800cc34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9f4:	4b59      	ldr	r3, [pc, #356]	; (800cb5c <pvPortMalloc+0x184>)
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f040 8093 	bne.w	800cb28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d01d      	beq.n	800ca44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca08:	2208      	movs	r2, #8
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d014      	beq.n	800ca44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f023 0307 	bic.w	r3, r3, #7
 800ca20:	3308      	adds	r3, #8
 800ca22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f003 0307 	and.w	r3, r3, #7
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00a      	beq.n	800ca44 <pvPortMalloc+0x6c>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	617b      	str	r3, [r7, #20]
}
 800ca40:	bf00      	nop
 800ca42:	e7fe      	b.n	800ca42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d06e      	beq.n	800cb28 <pvPortMalloc+0x150>
 800ca4a:	4b45      	ldr	r3, [pc, #276]	; (800cb60 <pvPortMalloc+0x188>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d869      	bhi.n	800cb28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca54:	4b43      	ldr	r3, [pc, #268]	; (800cb64 <pvPortMalloc+0x18c>)
 800ca56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca58:	4b42      	ldr	r3, [pc, #264]	; (800cb64 <pvPortMalloc+0x18c>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca5e:	e004      	b.n	800ca6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d903      	bls.n	800ca7c <pvPortMalloc+0xa4>
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f1      	bne.n	800ca60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca7c:	4b36      	ldr	r3, [pc, #216]	; (800cb58 <pvPortMalloc+0x180>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d050      	beq.n	800cb28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca86:	6a3b      	ldr	r3, [r7, #32]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2208      	movs	r2, #8
 800ca8c:	4413      	add	r3, r2
 800ca8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	2308      	movs	r3, #8
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d91f      	bls.n	800cae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4413      	add	r3, r2
 800caae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00a      	beq.n	800cad0 <pvPortMalloc+0xf8>
	__asm volatile
 800caba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabe:	f383 8811 	msr	BASEPRI, r3
 800cac2:	f3bf 8f6f 	isb	sy
 800cac6:	f3bf 8f4f 	dsb	sy
 800caca:	613b      	str	r3, [r7, #16]
}
 800cacc:	bf00      	nop
 800cace:	e7fe      	b.n	800cace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	685a      	ldr	r2, [r3, #4]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	1ad2      	subs	r2, r2, r3
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cae2:	69b8      	ldr	r0, [r7, #24]
 800cae4:	f000 f908 	bl	800ccf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cae8:	4b1d      	ldr	r3, [pc, #116]	; (800cb60 <pvPortMalloc+0x188>)
 800caea:	681a      	ldr	r2, [r3, #0]
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	4a1b      	ldr	r2, [pc, #108]	; (800cb60 <pvPortMalloc+0x188>)
 800caf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caf6:	4b1a      	ldr	r3, [pc, #104]	; (800cb60 <pvPortMalloc+0x188>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	4b1b      	ldr	r3, [pc, #108]	; (800cb68 <pvPortMalloc+0x190>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d203      	bcs.n	800cb0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb02:	4b17      	ldr	r3, [pc, #92]	; (800cb60 <pvPortMalloc+0x188>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a18      	ldr	r2, [pc, #96]	; (800cb68 <pvPortMalloc+0x190>)
 800cb08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <pvPortMalloc+0x184>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	431a      	orrs	r2, r3
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <pvPortMalloc+0x194>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3301      	adds	r3, #1
 800cb24:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <pvPortMalloc+0x194>)
 800cb26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb28:	f7fe fcb0 	bl	800b48c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f003 0307 	and.w	r3, r3, #7
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00a      	beq.n	800cb4c <pvPortMalloc+0x174>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	60fb      	str	r3, [r7, #12]
}
 800cb48:	bf00      	nop
 800cb4a:	e7fe      	b.n	800cb4a <pvPortMalloc+0x172>
	return pvReturn;
 800cb4c:	69fb      	ldr	r3, [r7, #28]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3728      	adds	r7, #40	; 0x28
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20003558 	.word	0x20003558
 800cb5c:	2000356c 	.word	0x2000356c
 800cb60:	2000355c 	.word	0x2000355c
 800cb64:	20003550 	.word	0x20003550
 800cb68:	20003560 	.word	0x20003560
 800cb6c:	20003564 	.word	0x20003564

0800cb70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d04d      	beq.n	800cc1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb82:	2308      	movs	r3, #8
 800cb84:	425b      	negs	r3, r3
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	4413      	add	r3, r2
 800cb8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	4b24      	ldr	r3, [pc, #144]	; (800cc28 <vPortFree+0xb8>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4013      	ands	r3, r2
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10a      	bne.n	800cbb4 <vPortFree+0x44>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	60fb      	str	r3, [r7, #12]
}
 800cbb0:	bf00      	nop
 800cbb2:	e7fe      	b.n	800cbb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00a      	beq.n	800cbd2 <vPortFree+0x62>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	60bb      	str	r3, [r7, #8]
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	4b14      	ldr	r3, [pc, #80]	; (800cc28 <vPortFree+0xb8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4013      	ands	r3, r2
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d01e      	beq.n	800cc1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d11a      	bne.n	800cc1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	4b0e      	ldr	r3, [pc, #56]	; (800cc28 <vPortFree+0xb8>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	43db      	mvns	r3, r3
 800cbf2:	401a      	ands	r2, r3
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbf8:	f7fe fc3a 	bl	800b470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	4b0a      	ldr	r3, [pc, #40]	; (800cc2c <vPortFree+0xbc>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4413      	add	r3, r2
 800cc06:	4a09      	ldr	r2, [pc, #36]	; (800cc2c <vPortFree+0xbc>)
 800cc08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc0a:	6938      	ldr	r0, [r7, #16]
 800cc0c:	f000 f874 	bl	800ccf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc10:	4b07      	ldr	r3, [pc, #28]	; (800cc30 <vPortFree+0xc0>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	4a06      	ldr	r2, [pc, #24]	; (800cc30 <vPortFree+0xc0>)
 800cc18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc1a:	f7fe fc37 	bl	800b48c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc1e:	bf00      	nop
 800cc20:	3718      	adds	r7, #24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	2000356c 	.word	0x2000356c
 800cc2c:	2000355c 	.word	0x2000355c
 800cc30:	20003568 	.word	0x20003568

0800cc34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc3a:	f242 7310 	movw	r3, #10000	; 0x2710
 800cc3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc40:	4b27      	ldr	r3, [pc, #156]	; (800cce0 <prvHeapInit+0xac>)
 800cc42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f003 0307 	and.w	r3, r3, #7
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00c      	beq.n	800cc68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3307      	adds	r3, #7
 800cc52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f023 0307 	bic.w	r3, r3, #7
 800cc5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc5c:	68ba      	ldr	r2, [r7, #8]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	4a1f      	ldr	r2, [pc, #124]	; (800cce0 <prvHeapInit+0xac>)
 800cc64:	4413      	add	r3, r2
 800cc66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc6c:	4a1d      	ldr	r2, [pc, #116]	; (800cce4 <prvHeapInit+0xb0>)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc72:	4b1c      	ldr	r3, [pc, #112]	; (800cce4 <prvHeapInit+0xb0>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	68ba      	ldr	r2, [r7, #8]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc80:	2208      	movs	r2, #8
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	1a9b      	subs	r3, r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f023 0307 	bic.w	r3, r3, #7
 800cc8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4a15      	ldr	r2, [pc, #84]	; (800cce8 <prvHeapInit+0xb4>)
 800cc94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc96:	4b14      	ldr	r3, [pc, #80]	; (800cce8 <prvHeapInit+0xb4>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc9e:	4b12      	ldr	r3, [pc, #72]	; (800cce8 <prvHeapInit+0xb4>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68fa      	ldr	r2, [r7, #12]
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccb4:	4b0c      	ldr	r3, [pc, #48]	; (800cce8 <prvHeapInit+0xb4>)
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	4a0a      	ldr	r2, [pc, #40]	; (800ccec <prvHeapInit+0xb8>)
 800ccc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	4a09      	ldr	r2, [pc, #36]	; (800ccf0 <prvHeapInit+0xbc>)
 800ccca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cccc:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <prvHeapInit+0xc0>)
 800ccce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ccd2:	601a      	str	r2, [r3, #0]
}
 800ccd4:	bf00      	nop
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	20000e40 	.word	0x20000e40
 800cce4:	20003550 	.word	0x20003550
 800cce8:	20003558 	.word	0x20003558
 800ccec:	20003560 	.word	0x20003560
 800ccf0:	2000355c 	.word	0x2000355c
 800ccf4:	2000356c 	.word	0x2000356c

0800ccf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd00:	4b28      	ldr	r3, [pc, #160]	; (800cda4 <prvInsertBlockIntoFreeList+0xac>)
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	e002      	b.n	800cd0c <prvInsertBlockIntoFreeList+0x14>
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	60fb      	str	r3, [r7, #12]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d8f7      	bhi.n	800cd06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	4413      	add	r3, r2
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d108      	bne.n	800cd3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	441a      	add	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	441a      	add	r2, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d118      	bne.n	800cd80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	4b15      	ldr	r3, [pc, #84]	; (800cda8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d00d      	beq.n	800cd76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	441a      	add	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	e008      	b.n	800cd88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd76:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	601a      	str	r2, [r3, #0]
 800cd7e:	e003      	b.n	800cd88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d002      	beq.n	800cd96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd96:	bf00      	nop
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20003550 	.word	0x20003550
 800cda8:	20003558 	.word	0x20003558

0800cdac <__errno>:
 800cdac:	4b01      	ldr	r3, [pc, #4]	; (800cdb4 <__errno+0x8>)
 800cdae:	6818      	ldr	r0, [r3, #0]
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	200000b8 	.word	0x200000b8

0800cdb8 <__libc_init_array>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4d0d      	ldr	r5, [pc, #52]	; (800cdf0 <__libc_init_array+0x38>)
 800cdbc:	4c0d      	ldr	r4, [pc, #52]	; (800cdf4 <__libc_init_array+0x3c>)
 800cdbe:	1b64      	subs	r4, r4, r5
 800cdc0:	10a4      	asrs	r4, r4, #2
 800cdc2:	2600      	movs	r6, #0
 800cdc4:	42a6      	cmp	r6, r4
 800cdc6:	d109      	bne.n	800cddc <__libc_init_array+0x24>
 800cdc8:	4d0b      	ldr	r5, [pc, #44]	; (800cdf8 <__libc_init_array+0x40>)
 800cdca:	4c0c      	ldr	r4, [pc, #48]	; (800cdfc <__libc_init_array+0x44>)
 800cdcc:	f000 fffa 	bl	800ddc4 <_init>
 800cdd0:	1b64      	subs	r4, r4, r5
 800cdd2:	10a4      	asrs	r4, r4, #2
 800cdd4:	2600      	movs	r6, #0
 800cdd6:	42a6      	cmp	r6, r4
 800cdd8:	d105      	bne.n	800cde6 <__libc_init_array+0x2e>
 800cdda:	bd70      	pop	{r4, r5, r6, pc}
 800cddc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cde0:	4798      	blx	r3
 800cde2:	3601      	adds	r6, #1
 800cde4:	e7ee      	b.n	800cdc4 <__libc_init_array+0xc>
 800cde6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdea:	4798      	blx	r3
 800cdec:	3601      	adds	r6, #1
 800cdee:	e7f2      	b.n	800cdd6 <__libc_init_array+0x1e>
 800cdf0:	0800e148 	.word	0x0800e148
 800cdf4:	0800e148 	.word	0x0800e148
 800cdf8:	0800e148 	.word	0x0800e148
 800cdfc:	0800e14c 	.word	0x0800e14c

0800ce00 <memcpy>:
 800ce00:	440a      	add	r2, r1
 800ce02:	4291      	cmp	r1, r2
 800ce04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce08:	d100      	bne.n	800ce0c <memcpy+0xc>
 800ce0a:	4770      	bx	lr
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce16:	4291      	cmp	r1, r2
 800ce18:	d1f9      	bne.n	800ce0e <memcpy+0xe>
 800ce1a:	bd10      	pop	{r4, pc}

0800ce1c <memset>:
 800ce1c:	4402      	add	r2, r0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d100      	bne.n	800ce26 <memset+0xa>
 800ce24:	4770      	bx	lr
 800ce26:	f803 1b01 	strb.w	r1, [r3], #1
 800ce2a:	e7f9      	b.n	800ce20 <memset+0x4>

0800ce2c <iprintf>:
 800ce2c:	b40f      	push	{r0, r1, r2, r3}
 800ce2e:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <iprintf+0x2c>)
 800ce30:	b513      	push	{r0, r1, r4, lr}
 800ce32:	681c      	ldr	r4, [r3, #0]
 800ce34:	b124      	cbz	r4, 800ce40 <iprintf+0x14>
 800ce36:	69a3      	ldr	r3, [r4, #24]
 800ce38:	b913      	cbnz	r3, 800ce40 <iprintf+0x14>
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 fa5e 	bl	800d2fc <__sinit>
 800ce40:	ab05      	add	r3, sp, #20
 800ce42:	9a04      	ldr	r2, [sp, #16]
 800ce44:	68a1      	ldr	r1, [r4, #8]
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 fc2f 	bl	800d6ac <_vfiprintf_r>
 800ce4e:	b002      	add	sp, #8
 800ce50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce54:	b004      	add	sp, #16
 800ce56:	4770      	bx	lr
 800ce58:	200000b8 	.word	0x200000b8

0800ce5c <_puts_r>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	460e      	mov	r6, r1
 800ce60:	4605      	mov	r5, r0
 800ce62:	b118      	cbz	r0, 800ce6c <_puts_r+0x10>
 800ce64:	6983      	ldr	r3, [r0, #24]
 800ce66:	b90b      	cbnz	r3, 800ce6c <_puts_r+0x10>
 800ce68:	f000 fa48 	bl	800d2fc <__sinit>
 800ce6c:	69ab      	ldr	r3, [r5, #24]
 800ce6e:	68ac      	ldr	r4, [r5, #8]
 800ce70:	b913      	cbnz	r3, 800ce78 <_puts_r+0x1c>
 800ce72:	4628      	mov	r0, r5
 800ce74:	f000 fa42 	bl	800d2fc <__sinit>
 800ce78:	4b2c      	ldr	r3, [pc, #176]	; (800cf2c <_puts_r+0xd0>)
 800ce7a:	429c      	cmp	r4, r3
 800ce7c:	d120      	bne.n	800cec0 <_puts_r+0x64>
 800ce7e:	686c      	ldr	r4, [r5, #4]
 800ce80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce82:	07db      	lsls	r3, r3, #31
 800ce84:	d405      	bmi.n	800ce92 <_puts_r+0x36>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	0598      	lsls	r0, r3, #22
 800ce8a:	d402      	bmi.n	800ce92 <_puts_r+0x36>
 800ce8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce8e:	f000 fad3 	bl	800d438 <__retarget_lock_acquire_recursive>
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	0719      	lsls	r1, r3, #28
 800ce96:	d51d      	bpl.n	800ced4 <_puts_r+0x78>
 800ce98:	6923      	ldr	r3, [r4, #16]
 800ce9a:	b1db      	cbz	r3, 800ced4 <_puts_r+0x78>
 800ce9c:	3e01      	subs	r6, #1
 800ce9e:	68a3      	ldr	r3, [r4, #8]
 800cea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cea4:	3b01      	subs	r3, #1
 800cea6:	60a3      	str	r3, [r4, #8]
 800cea8:	bb39      	cbnz	r1, 800cefa <_puts_r+0x9e>
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da38      	bge.n	800cf20 <_puts_r+0xc4>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	210a      	movs	r1, #10
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f000 f848 	bl	800cf48 <__swbuf_r>
 800ceb8:	3001      	adds	r0, #1
 800ceba:	d011      	beq.n	800cee0 <_puts_r+0x84>
 800cebc:	250a      	movs	r5, #10
 800cebe:	e011      	b.n	800cee4 <_puts_r+0x88>
 800cec0:	4b1b      	ldr	r3, [pc, #108]	; (800cf30 <_puts_r+0xd4>)
 800cec2:	429c      	cmp	r4, r3
 800cec4:	d101      	bne.n	800ceca <_puts_r+0x6e>
 800cec6:	68ac      	ldr	r4, [r5, #8]
 800cec8:	e7da      	b.n	800ce80 <_puts_r+0x24>
 800ceca:	4b1a      	ldr	r3, [pc, #104]	; (800cf34 <_puts_r+0xd8>)
 800cecc:	429c      	cmp	r4, r3
 800cece:	bf08      	it	eq
 800ced0:	68ec      	ldreq	r4, [r5, #12]
 800ced2:	e7d5      	b.n	800ce80 <_puts_r+0x24>
 800ced4:	4621      	mov	r1, r4
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f888 	bl	800cfec <__swsetup_r>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0dd      	beq.n	800ce9c <_puts_r+0x40>
 800cee0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cee6:	07da      	lsls	r2, r3, #31
 800cee8:	d405      	bmi.n	800cef6 <_puts_r+0x9a>
 800ceea:	89a3      	ldrh	r3, [r4, #12]
 800ceec:	059b      	lsls	r3, r3, #22
 800ceee:	d402      	bmi.n	800cef6 <_puts_r+0x9a>
 800cef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cef2:	f000 faa2 	bl	800d43a <__retarget_lock_release_recursive>
 800cef6:	4628      	mov	r0, r5
 800cef8:	bd70      	pop	{r4, r5, r6, pc}
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	da04      	bge.n	800cf08 <_puts_r+0xac>
 800cefe:	69a2      	ldr	r2, [r4, #24]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	dc06      	bgt.n	800cf12 <_puts_r+0xb6>
 800cf04:	290a      	cmp	r1, #10
 800cf06:	d004      	beq.n	800cf12 <_puts_r+0xb6>
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	6022      	str	r2, [r4, #0]
 800cf0e:	7019      	strb	r1, [r3, #0]
 800cf10:	e7c5      	b.n	800ce9e <_puts_r+0x42>
 800cf12:	4622      	mov	r2, r4
 800cf14:	4628      	mov	r0, r5
 800cf16:	f000 f817 	bl	800cf48 <__swbuf_r>
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d1bf      	bne.n	800ce9e <_puts_r+0x42>
 800cf1e:	e7df      	b.n	800cee0 <_puts_r+0x84>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	250a      	movs	r5, #10
 800cf24:	1c5a      	adds	r2, r3, #1
 800cf26:	6022      	str	r2, [r4, #0]
 800cf28:	701d      	strb	r5, [r3, #0]
 800cf2a:	e7db      	b.n	800cee4 <_puts_r+0x88>
 800cf2c:	0800e0cc 	.word	0x0800e0cc
 800cf30:	0800e0ec 	.word	0x0800e0ec
 800cf34:	0800e0ac 	.word	0x0800e0ac

0800cf38 <puts>:
 800cf38:	4b02      	ldr	r3, [pc, #8]	; (800cf44 <puts+0xc>)
 800cf3a:	4601      	mov	r1, r0
 800cf3c:	6818      	ldr	r0, [r3, #0]
 800cf3e:	f7ff bf8d 	b.w	800ce5c <_puts_r>
 800cf42:	bf00      	nop
 800cf44:	200000b8 	.word	0x200000b8

0800cf48 <__swbuf_r>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	460e      	mov	r6, r1
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	4605      	mov	r5, r0
 800cf50:	b118      	cbz	r0, 800cf5a <__swbuf_r+0x12>
 800cf52:	6983      	ldr	r3, [r0, #24]
 800cf54:	b90b      	cbnz	r3, 800cf5a <__swbuf_r+0x12>
 800cf56:	f000 f9d1 	bl	800d2fc <__sinit>
 800cf5a:	4b21      	ldr	r3, [pc, #132]	; (800cfe0 <__swbuf_r+0x98>)
 800cf5c:	429c      	cmp	r4, r3
 800cf5e:	d12b      	bne.n	800cfb8 <__swbuf_r+0x70>
 800cf60:	686c      	ldr	r4, [r5, #4]
 800cf62:	69a3      	ldr	r3, [r4, #24]
 800cf64:	60a3      	str	r3, [r4, #8]
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	071a      	lsls	r2, r3, #28
 800cf6a:	d52f      	bpl.n	800cfcc <__swbuf_r+0x84>
 800cf6c:	6923      	ldr	r3, [r4, #16]
 800cf6e:	b36b      	cbz	r3, 800cfcc <__swbuf_r+0x84>
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	6820      	ldr	r0, [r4, #0]
 800cf74:	1ac0      	subs	r0, r0, r3
 800cf76:	6963      	ldr	r3, [r4, #20]
 800cf78:	b2f6      	uxtb	r6, r6
 800cf7a:	4283      	cmp	r3, r0
 800cf7c:	4637      	mov	r7, r6
 800cf7e:	dc04      	bgt.n	800cf8a <__swbuf_r+0x42>
 800cf80:	4621      	mov	r1, r4
 800cf82:	4628      	mov	r0, r5
 800cf84:	f000 f926 	bl	800d1d4 <_fflush_r>
 800cf88:	bb30      	cbnz	r0, 800cfd8 <__swbuf_r+0x90>
 800cf8a:	68a3      	ldr	r3, [r4, #8]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	60a3      	str	r3, [r4, #8]
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	6022      	str	r2, [r4, #0]
 800cf96:	701e      	strb	r6, [r3, #0]
 800cf98:	6963      	ldr	r3, [r4, #20]
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	4283      	cmp	r3, r0
 800cf9e:	d004      	beq.n	800cfaa <__swbuf_r+0x62>
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	07db      	lsls	r3, r3, #31
 800cfa4:	d506      	bpl.n	800cfb4 <__swbuf_r+0x6c>
 800cfa6:	2e0a      	cmp	r6, #10
 800cfa8:	d104      	bne.n	800cfb4 <__swbuf_r+0x6c>
 800cfaa:	4621      	mov	r1, r4
 800cfac:	4628      	mov	r0, r5
 800cfae:	f000 f911 	bl	800d1d4 <_fflush_r>
 800cfb2:	b988      	cbnz	r0, 800cfd8 <__swbuf_r+0x90>
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb8:	4b0a      	ldr	r3, [pc, #40]	; (800cfe4 <__swbuf_r+0x9c>)
 800cfba:	429c      	cmp	r4, r3
 800cfbc:	d101      	bne.n	800cfc2 <__swbuf_r+0x7a>
 800cfbe:	68ac      	ldr	r4, [r5, #8]
 800cfc0:	e7cf      	b.n	800cf62 <__swbuf_r+0x1a>
 800cfc2:	4b09      	ldr	r3, [pc, #36]	; (800cfe8 <__swbuf_r+0xa0>)
 800cfc4:	429c      	cmp	r4, r3
 800cfc6:	bf08      	it	eq
 800cfc8:	68ec      	ldreq	r4, [r5, #12]
 800cfca:	e7ca      	b.n	800cf62 <__swbuf_r+0x1a>
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f000 f80c 	bl	800cfec <__swsetup_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d0cb      	beq.n	800cf70 <__swbuf_r+0x28>
 800cfd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cfdc:	e7ea      	b.n	800cfb4 <__swbuf_r+0x6c>
 800cfde:	bf00      	nop
 800cfe0:	0800e0cc 	.word	0x0800e0cc
 800cfe4:	0800e0ec 	.word	0x0800e0ec
 800cfe8:	0800e0ac 	.word	0x0800e0ac

0800cfec <__swsetup_r>:
 800cfec:	4b32      	ldr	r3, [pc, #200]	; (800d0b8 <__swsetup_r+0xcc>)
 800cfee:	b570      	push	{r4, r5, r6, lr}
 800cff0:	681d      	ldr	r5, [r3, #0]
 800cff2:	4606      	mov	r6, r0
 800cff4:	460c      	mov	r4, r1
 800cff6:	b125      	cbz	r5, 800d002 <__swsetup_r+0x16>
 800cff8:	69ab      	ldr	r3, [r5, #24]
 800cffa:	b913      	cbnz	r3, 800d002 <__swsetup_r+0x16>
 800cffc:	4628      	mov	r0, r5
 800cffe:	f000 f97d 	bl	800d2fc <__sinit>
 800d002:	4b2e      	ldr	r3, [pc, #184]	; (800d0bc <__swsetup_r+0xd0>)
 800d004:	429c      	cmp	r4, r3
 800d006:	d10f      	bne.n	800d028 <__swsetup_r+0x3c>
 800d008:	686c      	ldr	r4, [r5, #4]
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d010:	0719      	lsls	r1, r3, #28
 800d012:	d42c      	bmi.n	800d06e <__swsetup_r+0x82>
 800d014:	06dd      	lsls	r5, r3, #27
 800d016:	d411      	bmi.n	800d03c <__swsetup_r+0x50>
 800d018:	2309      	movs	r3, #9
 800d01a:	6033      	str	r3, [r6, #0]
 800d01c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d026:	e03e      	b.n	800d0a6 <__swsetup_r+0xba>
 800d028:	4b25      	ldr	r3, [pc, #148]	; (800d0c0 <__swsetup_r+0xd4>)
 800d02a:	429c      	cmp	r4, r3
 800d02c:	d101      	bne.n	800d032 <__swsetup_r+0x46>
 800d02e:	68ac      	ldr	r4, [r5, #8]
 800d030:	e7eb      	b.n	800d00a <__swsetup_r+0x1e>
 800d032:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <__swsetup_r+0xd8>)
 800d034:	429c      	cmp	r4, r3
 800d036:	bf08      	it	eq
 800d038:	68ec      	ldreq	r4, [r5, #12]
 800d03a:	e7e6      	b.n	800d00a <__swsetup_r+0x1e>
 800d03c:	0758      	lsls	r0, r3, #29
 800d03e:	d512      	bpl.n	800d066 <__swsetup_r+0x7a>
 800d040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d042:	b141      	cbz	r1, 800d056 <__swsetup_r+0x6a>
 800d044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d048:	4299      	cmp	r1, r3
 800d04a:	d002      	beq.n	800d052 <__swsetup_r+0x66>
 800d04c:	4630      	mov	r0, r6
 800d04e:	f000 fa59 	bl	800d504 <_free_r>
 800d052:	2300      	movs	r3, #0
 800d054:	6363      	str	r3, [r4, #52]	; 0x34
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	2300      	movs	r3, #0
 800d060:	6063      	str	r3, [r4, #4]
 800d062:	6923      	ldr	r3, [r4, #16]
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f043 0308 	orr.w	r3, r3, #8
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	b94b      	cbnz	r3, 800d086 <__swsetup_r+0x9a>
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d07c:	d003      	beq.n	800d086 <__swsetup_r+0x9a>
 800d07e:	4621      	mov	r1, r4
 800d080:	4630      	mov	r0, r6
 800d082:	f000 f9ff 	bl	800d484 <__smakebuf_r>
 800d086:	89a0      	ldrh	r0, [r4, #12]
 800d088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d08c:	f010 0301 	ands.w	r3, r0, #1
 800d090:	d00a      	beq.n	800d0a8 <__swsetup_r+0xbc>
 800d092:	2300      	movs	r3, #0
 800d094:	60a3      	str	r3, [r4, #8]
 800d096:	6963      	ldr	r3, [r4, #20]
 800d098:	425b      	negs	r3, r3
 800d09a:	61a3      	str	r3, [r4, #24]
 800d09c:	6923      	ldr	r3, [r4, #16]
 800d09e:	b943      	cbnz	r3, 800d0b2 <__swsetup_r+0xc6>
 800d0a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0a4:	d1ba      	bne.n	800d01c <__swsetup_r+0x30>
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	0781      	lsls	r1, r0, #30
 800d0aa:	bf58      	it	pl
 800d0ac:	6963      	ldrpl	r3, [r4, #20]
 800d0ae:	60a3      	str	r3, [r4, #8]
 800d0b0:	e7f4      	b.n	800d09c <__swsetup_r+0xb0>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	e7f7      	b.n	800d0a6 <__swsetup_r+0xba>
 800d0b6:	bf00      	nop
 800d0b8:	200000b8 	.word	0x200000b8
 800d0bc:	0800e0cc 	.word	0x0800e0cc
 800d0c0:	0800e0ec 	.word	0x0800e0ec
 800d0c4:	0800e0ac 	.word	0x0800e0ac

0800d0c8 <__sflush_r>:
 800d0c8:	898a      	ldrh	r2, [r1, #12]
 800d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	0710      	lsls	r0, r2, #28
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	d458      	bmi.n	800d188 <__sflush_r+0xc0>
 800d0d6:	684b      	ldr	r3, [r1, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	dc05      	bgt.n	800d0e8 <__sflush_r+0x20>
 800d0dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	dc02      	bgt.n	800d0e8 <__sflush_r+0x20>
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ea:	2e00      	cmp	r6, #0
 800d0ec:	d0f9      	beq.n	800d0e2 <__sflush_r+0x1a>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0f4:	682f      	ldr	r7, [r5, #0]
 800d0f6:	602b      	str	r3, [r5, #0]
 800d0f8:	d032      	beq.n	800d160 <__sflush_r+0x98>
 800d0fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0fc:	89a3      	ldrh	r3, [r4, #12]
 800d0fe:	075a      	lsls	r2, r3, #29
 800d100:	d505      	bpl.n	800d10e <__sflush_r+0x46>
 800d102:	6863      	ldr	r3, [r4, #4]
 800d104:	1ac0      	subs	r0, r0, r3
 800d106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d108:	b10b      	cbz	r3, 800d10e <__sflush_r+0x46>
 800d10a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d10c:	1ac0      	subs	r0, r0, r3
 800d10e:	2300      	movs	r3, #0
 800d110:	4602      	mov	r2, r0
 800d112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d114:	6a21      	ldr	r1, [r4, #32]
 800d116:	4628      	mov	r0, r5
 800d118:	47b0      	blx	r6
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	d106      	bne.n	800d12e <__sflush_r+0x66>
 800d120:	6829      	ldr	r1, [r5, #0]
 800d122:	291d      	cmp	r1, #29
 800d124:	d82c      	bhi.n	800d180 <__sflush_r+0xb8>
 800d126:	4a2a      	ldr	r2, [pc, #168]	; (800d1d0 <__sflush_r+0x108>)
 800d128:	40ca      	lsrs	r2, r1
 800d12a:	07d6      	lsls	r6, r2, #31
 800d12c:	d528      	bpl.n	800d180 <__sflush_r+0xb8>
 800d12e:	2200      	movs	r2, #0
 800d130:	6062      	str	r2, [r4, #4]
 800d132:	04d9      	lsls	r1, r3, #19
 800d134:	6922      	ldr	r2, [r4, #16]
 800d136:	6022      	str	r2, [r4, #0]
 800d138:	d504      	bpl.n	800d144 <__sflush_r+0x7c>
 800d13a:	1c42      	adds	r2, r0, #1
 800d13c:	d101      	bne.n	800d142 <__sflush_r+0x7a>
 800d13e:	682b      	ldr	r3, [r5, #0]
 800d140:	b903      	cbnz	r3, 800d144 <__sflush_r+0x7c>
 800d142:	6560      	str	r0, [r4, #84]	; 0x54
 800d144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d146:	602f      	str	r7, [r5, #0]
 800d148:	2900      	cmp	r1, #0
 800d14a:	d0ca      	beq.n	800d0e2 <__sflush_r+0x1a>
 800d14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d150:	4299      	cmp	r1, r3
 800d152:	d002      	beq.n	800d15a <__sflush_r+0x92>
 800d154:	4628      	mov	r0, r5
 800d156:	f000 f9d5 	bl	800d504 <_free_r>
 800d15a:	2000      	movs	r0, #0
 800d15c:	6360      	str	r0, [r4, #52]	; 0x34
 800d15e:	e7c1      	b.n	800d0e4 <__sflush_r+0x1c>
 800d160:	6a21      	ldr	r1, [r4, #32]
 800d162:	2301      	movs	r3, #1
 800d164:	4628      	mov	r0, r5
 800d166:	47b0      	blx	r6
 800d168:	1c41      	adds	r1, r0, #1
 800d16a:	d1c7      	bne.n	800d0fc <__sflush_r+0x34>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0c4      	beq.n	800d0fc <__sflush_r+0x34>
 800d172:	2b1d      	cmp	r3, #29
 800d174:	d001      	beq.n	800d17a <__sflush_r+0xb2>
 800d176:	2b16      	cmp	r3, #22
 800d178:	d101      	bne.n	800d17e <__sflush_r+0xb6>
 800d17a:	602f      	str	r7, [r5, #0]
 800d17c:	e7b1      	b.n	800d0e2 <__sflush_r+0x1a>
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	e7ad      	b.n	800d0e4 <__sflush_r+0x1c>
 800d188:	690f      	ldr	r7, [r1, #16]
 800d18a:	2f00      	cmp	r7, #0
 800d18c:	d0a9      	beq.n	800d0e2 <__sflush_r+0x1a>
 800d18e:	0793      	lsls	r3, r2, #30
 800d190:	680e      	ldr	r6, [r1, #0]
 800d192:	bf08      	it	eq
 800d194:	694b      	ldreq	r3, [r1, #20]
 800d196:	600f      	str	r7, [r1, #0]
 800d198:	bf18      	it	ne
 800d19a:	2300      	movne	r3, #0
 800d19c:	eba6 0807 	sub.w	r8, r6, r7
 800d1a0:	608b      	str	r3, [r1, #8]
 800d1a2:	f1b8 0f00 	cmp.w	r8, #0
 800d1a6:	dd9c      	ble.n	800d0e2 <__sflush_r+0x1a>
 800d1a8:	6a21      	ldr	r1, [r4, #32]
 800d1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1ac:	4643      	mov	r3, r8
 800d1ae:	463a      	mov	r2, r7
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b0      	blx	r6
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	dc06      	bgt.n	800d1c6 <__sflush_r+0xfe>
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1be:	81a3      	strh	r3, [r4, #12]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1c4:	e78e      	b.n	800d0e4 <__sflush_r+0x1c>
 800d1c6:	4407      	add	r7, r0
 800d1c8:	eba8 0800 	sub.w	r8, r8, r0
 800d1cc:	e7e9      	b.n	800d1a2 <__sflush_r+0xda>
 800d1ce:	bf00      	nop
 800d1d0:	20400001 	.word	0x20400001

0800d1d4 <_fflush_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	690b      	ldr	r3, [r1, #16]
 800d1d8:	4605      	mov	r5, r0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	b913      	cbnz	r3, 800d1e4 <_fflush_r+0x10>
 800d1de:	2500      	movs	r5, #0
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	b118      	cbz	r0, 800d1ee <_fflush_r+0x1a>
 800d1e6:	6983      	ldr	r3, [r0, #24]
 800d1e8:	b90b      	cbnz	r3, 800d1ee <_fflush_r+0x1a>
 800d1ea:	f000 f887 	bl	800d2fc <__sinit>
 800d1ee:	4b14      	ldr	r3, [pc, #80]	; (800d240 <_fflush_r+0x6c>)
 800d1f0:	429c      	cmp	r4, r3
 800d1f2:	d11b      	bne.n	800d22c <_fflush_r+0x58>
 800d1f4:	686c      	ldr	r4, [r5, #4]
 800d1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d0ef      	beq.n	800d1de <_fflush_r+0xa>
 800d1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d200:	07d0      	lsls	r0, r2, #31
 800d202:	d404      	bmi.n	800d20e <_fflush_r+0x3a>
 800d204:	0599      	lsls	r1, r3, #22
 800d206:	d402      	bmi.n	800d20e <_fflush_r+0x3a>
 800d208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d20a:	f000 f915 	bl	800d438 <__retarget_lock_acquire_recursive>
 800d20e:	4628      	mov	r0, r5
 800d210:	4621      	mov	r1, r4
 800d212:	f7ff ff59 	bl	800d0c8 <__sflush_r>
 800d216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d218:	07da      	lsls	r2, r3, #31
 800d21a:	4605      	mov	r5, r0
 800d21c:	d4e0      	bmi.n	800d1e0 <_fflush_r+0xc>
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	059b      	lsls	r3, r3, #22
 800d222:	d4dd      	bmi.n	800d1e0 <_fflush_r+0xc>
 800d224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d226:	f000 f908 	bl	800d43a <__retarget_lock_release_recursive>
 800d22a:	e7d9      	b.n	800d1e0 <_fflush_r+0xc>
 800d22c:	4b05      	ldr	r3, [pc, #20]	; (800d244 <_fflush_r+0x70>)
 800d22e:	429c      	cmp	r4, r3
 800d230:	d101      	bne.n	800d236 <_fflush_r+0x62>
 800d232:	68ac      	ldr	r4, [r5, #8]
 800d234:	e7df      	b.n	800d1f6 <_fflush_r+0x22>
 800d236:	4b04      	ldr	r3, [pc, #16]	; (800d248 <_fflush_r+0x74>)
 800d238:	429c      	cmp	r4, r3
 800d23a:	bf08      	it	eq
 800d23c:	68ec      	ldreq	r4, [r5, #12]
 800d23e:	e7da      	b.n	800d1f6 <_fflush_r+0x22>
 800d240:	0800e0cc 	.word	0x0800e0cc
 800d244:	0800e0ec 	.word	0x0800e0ec
 800d248:	0800e0ac 	.word	0x0800e0ac

0800d24c <std>:
 800d24c:	2300      	movs	r3, #0
 800d24e:	b510      	push	{r4, lr}
 800d250:	4604      	mov	r4, r0
 800d252:	e9c0 3300 	strd	r3, r3, [r0]
 800d256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d25a:	6083      	str	r3, [r0, #8]
 800d25c:	8181      	strh	r1, [r0, #12]
 800d25e:	6643      	str	r3, [r0, #100]	; 0x64
 800d260:	81c2      	strh	r2, [r0, #14]
 800d262:	6183      	str	r3, [r0, #24]
 800d264:	4619      	mov	r1, r3
 800d266:	2208      	movs	r2, #8
 800d268:	305c      	adds	r0, #92	; 0x5c
 800d26a:	f7ff fdd7 	bl	800ce1c <memset>
 800d26e:	4b05      	ldr	r3, [pc, #20]	; (800d284 <std+0x38>)
 800d270:	6263      	str	r3, [r4, #36]	; 0x24
 800d272:	4b05      	ldr	r3, [pc, #20]	; (800d288 <std+0x3c>)
 800d274:	62a3      	str	r3, [r4, #40]	; 0x28
 800d276:	4b05      	ldr	r3, [pc, #20]	; (800d28c <std+0x40>)
 800d278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d27a:	4b05      	ldr	r3, [pc, #20]	; (800d290 <std+0x44>)
 800d27c:	6224      	str	r4, [r4, #32]
 800d27e:	6323      	str	r3, [r4, #48]	; 0x30
 800d280:	bd10      	pop	{r4, pc}
 800d282:	bf00      	nop
 800d284:	0800dc55 	.word	0x0800dc55
 800d288:	0800dc77 	.word	0x0800dc77
 800d28c:	0800dcaf 	.word	0x0800dcaf
 800d290:	0800dcd3 	.word	0x0800dcd3

0800d294 <_cleanup_r>:
 800d294:	4901      	ldr	r1, [pc, #4]	; (800d29c <_cleanup_r+0x8>)
 800d296:	f000 b8af 	b.w	800d3f8 <_fwalk_reent>
 800d29a:	bf00      	nop
 800d29c:	0800d1d5 	.word	0x0800d1d5

0800d2a0 <__sfmoreglue>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	1e4a      	subs	r2, r1, #1
 800d2a4:	2568      	movs	r5, #104	; 0x68
 800d2a6:	4355      	muls	r5, r2
 800d2a8:	460e      	mov	r6, r1
 800d2aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2ae:	f000 f979 	bl	800d5a4 <_malloc_r>
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	b140      	cbz	r0, 800d2c8 <__sfmoreglue+0x28>
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	e9c0 1600 	strd	r1, r6, [r0]
 800d2bc:	300c      	adds	r0, #12
 800d2be:	60a0      	str	r0, [r4, #8]
 800d2c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2c4:	f7ff fdaa 	bl	800ce1c <memset>
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	bd70      	pop	{r4, r5, r6, pc}

0800d2cc <__sfp_lock_acquire>:
 800d2cc:	4801      	ldr	r0, [pc, #4]	; (800d2d4 <__sfp_lock_acquire+0x8>)
 800d2ce:	f000 b8b3 	b.w	800d438 <__retarget_lock_acquire_recursive>
 800d2d2:	bf00      	nop
 800d2d4:	2000fcec 	.word	0x2000fcec

0800d2d8 <__sfp_lock_release>:
 800d2d8:	4801      	ldr	r0, [pc, #4]	; (800d2e0 <__sfp_lock_release+0x8>)
 800d2da:	f000 b8ae 	b.w	800d43a <__retarget_lock_release_recursive>
 800d2de:	bf00      	nop
 800d2e0:	2000fcec 	.word	0x2000fcec

0800d2e4 <__sinit_lock_acquire>:
 800d2e4:	4801      	ldr	r0, [pc, #4]	; (800d2ec <__sinit_lock_acquire+0x8>)
 800d2e6:	f000 b8a7 	b.w	800d438 <__retarget_lock_acquire_recursive>
 800d2ea:	bf00      	nop
 800d2ec:	2000fce7 	.word	0x2000fce7

0800d2f0 <__sinit_lock_release>:
 800d2f0:	4801      	ldr	r0, [pc, #4]	; (800d2f8 <__sinit_lock_release+0x8>)
 800d2f2:	f000 b8a2 	b.w	800d43a <__retarget_lock_release_recursive>
 800d2f6:	bf00      	nop
 800d2f8:	2000fce7 	.word	0x2000fce7

0800d2fc <__sinit>:
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	4604      	mov	r4, r0
 800d300:	f7ff fff0 	bl	800d2e4 <__sinit_lock_acquire>
 800d304:	69a3      	ldr	r3, [r4, #24]
 800d306:	b11b      	cbz	r3, 800d310 <__sinit+0x14>
 800d308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d30c:	f7ff bff0 	b.w	800d2f0 <__sinit_lock_release>
 800d310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d314:	6523      	str	r3, [r4, #80]	; 0x50
 800d316:	4b13      	ldr	r3, [pc, #76]	; (800d364 <__sinit+0x68>)
 800d318:	4a13      	ldr	r2, [pc, #76]	; (800d368 <__sinit+0x6c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d31e:	42a3      	cmp	r3, r4
 800d320:	bf04      	itt	eq
 800d322:	2301      	moveq	r3, #1
 800d324:	61a3      	streq	r3, [r4, #24]
 800d326:	4620      	mov	r0, r4
 800d328:	f000 f820 	bl	800d36c <__sfp>
 800d32c:	6060      	str	r0, [r4, #4]
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 f81c 	bl	800d36c <__sfp>
 800d334:	60a0      	str	r0, [r4, #8]
 800d336:	4620      	mov	r0, r4
 800d338:	f000 f818 	bl	800d36c <__sfp>
 800d33c:	2200      	movs	r2, #0
 800d33e:	60e0      	str	r0, [r4, #12]
 800d340:	2104      	movs	r1, #4
 800d342:	6860      	ldr	r0, [r4, #4]
 800d344:	f7ff ff82 	bl	800d24c <std>
 800d348:	68a0      	ldr	r0, [r4, #8]
 800d34a:	2201      	movs	r2, #1
 800d34c:	2109      	movs	r1, #9
 800d34e:	f7ff ff7d 	bl	800d24c <std>
 800d352:	68e0      	ldr	r0, [r4, #12]
 800d354:	2202      	movs	r2, #2
 800d356:	2112      	movs	r1, #18
 800d358:	f7ff ff78 	bl	800d24c <std>
 800d35c:	2301      	movs	r3, #1
 800d35e:	61a3      	str	r3, [r4, #24]
 800d360:	e7d2      	b.n	800d308 <__sinit+0xc>
 800d362:	bf00      	nop
 800d364:	0800e0a8 	.word	0x0800e0a8
 800d368:	0800d295 	.word	0x0800d295

0800d36c <__sfp>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	4607      	mov	r7, r0
 800d370:	f7ff ffac 	bl	800d2cc <__sfp_lock_acquire>
 800d374:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <__sfp+0x84>)
 800d376:	681e      	ldr	r6, [r3, #0]
 800d378:	69b3      	ldr	r3, [r6, #24]
 800d37a:	b913      	cbnz	r3, 800d382 <__sfp+0x16>
 800d37c:	4630      	mov	r0, r6
 800d37e:	f7ff ffbd 	bl	800d2fc <__sinit>
 800d382:	3648      	adds	r6, #72	; 0x48
 800d384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d388:	3b01      	subs	r3, #1
 800d38a:	d503      	bpl.n	800d394 <__sfp+0x28>
 800d38c:	6833      	ldr	r3, [r6, #0]
 800d38e:	b30b      	cbz	r3, 800d3d4 <__sfp+0x68>
 800d390:	6836      	ldr	r6, [r6, #0]
 800d392:	e7f7      	b.n	800d384 <__sfp+0x18>
 800d394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d398:	b9d5      	cbnz	r5, 800d3d0 <__sfp+0x64>
 800d39a:	4b16      	ldr	r3, [pc, #88]	; (800d3f4 <__sfp+0x88>)
 800d39c:	60e3      	str	r3, [r4, #12]
 800d39e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3a2:	6665      	str	r5, [r4, #100]	; 0x64
 800d3a4:	f000 f847 	bl	800d436 <__retarget_lock_init_recursive>
 800d3a8:	f7ff ff96 	bl	800d2d8 <__sfp_lock_release>
 800d3ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d3b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d3b4:	6025      	str	r5, [r4, #0]
 800d3b6:	61a5      	str	r5, [r4, #24]
 800d3b8:	2208      	movs	r2, #8
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3c0:	f7ff fd2c 	bl	800ce1c <memset>
 800d3c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d0:	3468      	adds	r4, #104	; 0x68
 800d3d2:	e7d9      	b.n	800d388 <__sfp+0x1c>
 800d3d4:	2104      	movs	r1, #4
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	f7ff ff62 	bl	800d2a0 <__sfmoreglue>
 800d3dc:	4604      	mov	r4, r0
 800d3de:	6030      	str	r0, [r6, #0]
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d1d5      	bne.n	800d390 <__sfp+0x24>
 800d3e4:	f7ff ff78 	bl	800d2d8 <__sfp_lock_release>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	e7ee      	b.n	800d3cc <__sfp+0x60>
 800d3ee:	bf00      	nop
 800d3f0:	0800e0a8 	.word	0x0800e0a8
 800d3f4:	ffff0001 	.word	0xffff0001

0800d3f8 <_fwalk_reent>:
 800d3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	4688      	mov	r8, r1
 800d400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d404:	2700      	movs	r7, #0
 800d406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d40a:	f1b9 0901 	subs.w	r9, r9, #1
 800d40e:	d505      	bpl.n	800d41c <_fwalk_reent+0x24>
 800d410:	6824      	ldr	r4, [r4, #0]
 800d412:	2c00      	cmp	r4, #0
 800d414:	d1f7      	bne.n	800d406 <_fwalk_reent+0xe>
 800d416:	4638      	mov	r0, r7
 800d418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d41c:	89ab      	ldrh	r3, [r5, #12]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d907      	bls.n	800d432 <_fwalk_reent+0x3a>
 800d422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d426:	3301      	adds	r3, #1
 800d428:	d003      	beq.n	800d432 <_fwalk_reent+0x3a>
 800d42a:	4629      	mov	r1, r5
 800d42c:	4630      	mov	r0, r6
 800d42e:	47c0      	blx	r8
 800d430:	4307      	orrs	r7, r0
 800d432:	3568      	adds	r5, #104	; 0x68
 800d434:	e7e9      	b.n	800d40a <_fwalk_reent+0x12>

0800d436 <__retarget_lock_init_recursive>:
 800d436:	4770      	bx	lr

0800d438 <__retarget_lock_acquire_recursive>:
 800d438:	4770      	bx	lr

0800d43a <__retarget_lock_release_recursive>:
 800d43a:	4770      	bx	lr

0800d43c <__swhatbuf_r>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	460e      	mov	r6, r1
 800d440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d444:	2900      	cmp	r1, #0
 800d446:	b096      	sub	sp, #88	; 0x58
 800d448:	4614      	mov	r4, r2
 800d44a:	461d      	mov	r5, r3
 800d44c:	da07      	bge.n	800d45e <__swhatbuf_r+0x22>
 800d44e:	2300      	movs	r3, #0
 800d450:	602b      	str	r3, [r5, #0]
 800d452:	89b3      	ldrh	r3, [r6, #12]
 800d454:	061a      	lsls	r2, r3, #24
 800d456:	d410      	bmi.n	800d47a <__swhatbuf_r+0x3e>
 800d458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d45c:	e00e      	b.n	800d47c <__swhatbuf_r+0x40>
 800d45e:	466a      	mov	r2, sp
 800d460:	f000 fc5e 	bl	800dd20 <_fstat_r>
 800d464:	2800      	cmp	r0, #0
 800d466:	dbf2      	blt.n	800d44e <__swhatbuf_r+0x12>
 800d468:	9a01      	ldr	r2, [sp, #4]
 800d46a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d46e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d472:	425a      	negs	r2, r3
 800d474:	415a      	adcs	r2, r3
 800d476:	602a      	str	r2, [r5, #0]
 800d478:	e7ee      	b.n	800d458 <__swhatbuf_r+0x1c>
 800d47a:	2340      	movs	r3, #64	; 0x40
 800d47c:	2000      	movs	r0, #0
 800d47e:	6023      	str	r3, [r4, #0]
 800d480:	b016      	add	sp, #88	; 0x58
 800d482:	bd70      	pop	{r4, r5, r6, pc}

0800d484 <__smakebuf_r>:
 800d484:	898b      	ldrh	r3, [r1, #12]
 800d486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d488:	079d      	lsls	r5, r3, #30
 800d48a:	4606      	mov	r6, r0
 800d48c:	460c      	mov	r4, r1
 800d48e:	d507      	bpl.n	800d4a0 <__smakebuf_r+0x1c>
 800d490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	6123      	str	r3, [r4, #16]
 800d498:	2301      	movs	r3, #1
 800d49a:	6163      	str	r3, [r4, #20]
 800d49c:	b002      	add	sp, #8
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	ab01      	add	r3, sp, #4
 800d4a2:	466a      	mov	r2, sp
 800d4a4:	f7ff ffca 	bl	800d43c <__swhatbuf_r>
 800d4a8:	9900      	ldr	r1, [sp, #0]
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f000 f879 	bl	800d5a4 <_malloc_r>
 800d4b2:	b948      	cbnz	r0, 800d4c8 <__smakebuf_r+0x44>
 800d4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b8:	059a      	lsls	r2, r3, #22
 800d4ba:	d4ef      	bmi.n	800d49c <__smakebuf_r+0x18>
 800d4bc:	f023 0303 	bic.w	r3, r3, #3
 800d4c0:	f043 0302 	orr.w	r3, r3, #2
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	e7e3      	b.n	800d490 <__smakebuf_r+0xc>
 800d4c8:	4b0d      	ldr	r3, [pc, #52]	; (800d500 <__smakebuf_r+0x7c>)
 800d4ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4cc:	89a3      	ldrh	r3, [r4, #12]
 800d4ce:	6020      	str	r0, [r4, #0]
 800d4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	9b00      	ldr	r3, [sp, #0]
 800d4d8:	6163      	str	r3, [r4, #20]
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	6120      	str	r0, [r4, #16]
 800d4de:	b15b      	cbz	r3, 800d4f8 <__smakebuf_r+0x74>
 800d4e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f000 fc2d 	bl	800dd44 <_isatty_r>
 800d4ea:	b128      	cbz	r0, 800d4f8 <__smakebuf_r+0x74>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f023 0303 	bic.w	r3, r3, #3
 800d4f2:	f043 0301 	orr.w	r3, r3, #1
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	89a0      	ldrh	r0, [r4, #12]
 800d4fa:	4305      	orrs	r5, r0
 800d4fc:	81a5      	strh	r5, [r4, #12]
 800d4fe:	e7cd      	b.n	800d49c <__smakebuf_r+0x18>
 800d500:	0800d295 	.word	0x0800d295

0800d504 <_free_r>:
 800d504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d506:	2900      	cmp	r1, #0
 800d508:	d048      	beq.n	800d59c <_free_r+0x98>
 800d50a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50e:	9001      	str	r0, [sp, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	f1a1 0404 	sub.w	r4, r1, #4
 800d516:	bfb8      	it	lt
 800d518:	18e4      	addlt	r4, r4, r3
 800d51a:	f000 fc35 	bl	800dd88 <__malloc_lock>
 800d51e:	4a20      	ldr	r2, [pc, #128]	; (800d5a0 <_free_r+0x9c>)
 800d520:	9801      	ldr	r0, [sp, #4]
 800d522:	6813      	ldr	r3, [r2, #0]
 800d524:	4615      	mov	r5, r2
 800d526:	b933      	cbnz	r3, 800d536 <_free_r+0x32>
 800d528:	6063      	str	r3, [r4, #4]
 800d52a:	6014      	str	r4, [r2, #0]
 800d52c:	b003      	add	sp, #12
 800d52e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d532:	f000 bc2f 	b.w	800dd94 <__malloc_unlock>
 800d536:	42a3      	cmp	r3, r4
 800d538:	d90b      	bls.n	800d552 <_free_r+0x4e>
 800d53a:	6821      	ldr	r1, [r4, #0]
 800d53c:	1862      	adds	r2, r4, r1
 800d53e:	4293      	cmp	r3, r2
 800d540:	bf04      	itt	eq
 800d542:	681a      	ldreq	r2, [r3, #0]
 800d544:	685b      	ldreq	r3, [r3, #4]
 800d546:	6063      	str	r3, [r4, #4]
 800d548:	bf04      	itt	eq
 800d54a:	1852      	addeq	r2, r2, r1
 800d54c:	6022      	streq	r2, [r4, #0]
 800d54e:	602c      	str	r4, [r5, #0]
 800d550:	e7ec      	b.n	800d52c <_free_r+0x28>
 800d552:	461a      	mov	r2, r3
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	b10b      	cbz	r3, 800d55c <_free_r+0x58>
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d9fa      	bls.n	800d552 <_free_r+0x4e>
 800d55c:	6811      	ldr	r1, [r2, #0]
 800d55e:	1855      	adds	r5, r2, r1
 800d560:	42a5      	cmp	r5, r4
 800d562:	d10b      	bne.n	800d57c <_free_r+0x78>
 800d564:	6824      	ldr	r4, [r4, #0]
 800d566:	4421      	add	r1, r4
 800d568:	1854      	adds	r4, r2, r1
 800d56a:	42a3      	cmp	r3, r4
 800d56c:	6011      	str	r1, [r2, #0]
 800d56e:	d1dd      	bne.n	800d52c <_free_r+0x28>
 800d570:	681c      	ldr	r4, [r3, #0]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	6053      	str	r3, [r2, #4]
 800d576:	4421      	add	r1, r4
 800d578:	6011      	str	r1, [r2, #0]
 800d57a:	e7d7      	b.n	800d52c <_free_r+0x28>
 800d57c:	d902      	bls.n	800d584 <_free_r+0x80>
 800d57e:	230c      	movs	r3, #12
 800d580:	6003      	str	r3, [r0, #0]
 800d582:	e7d3      	b.n	800d52c <_free_r+0x28>
 800d584:	6825      	ldr	r5, [r4, #0]
 800d586:	1961      	adds	r1, r4, r5
 800d588:	428b      	cmp	r3, r1
 800d58a:	bf04      	itt	eq
 800d58c:	6819      	ldreq	r1, [r3, #0]
 800d58e:	685b      	ldreq	r3, [r3, #4]
 800d590:	6063      	str	r3, [r4, #4]
 800d592:	bf04      	itt	eq
 800d594:	1949      	addeq	r1, r1, r5
 800d596:	6021      	streq	r1, [r4, #0]
 800d598:	6054      	str	r4, [r2, #4]
 800d59a:	e7c7      	b.n	800d52c <_free_r+0x28>
 800d59c:	b003      	add	sp, #12
 800d59e:	bd30      	pop	{r4, r5, pc}
 800d5a0:	20003570 	.word	0x20003570

0800d5a4 <_malloc_r>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	1ccd      	adds	r5, r1, #3
 800d5a8:	f025 0503 	bic.w	r5, r5, #3
 800d5ac:	3508      	adds	r5, #8
 800d5ae:	2d0c      	cmp	r5, #12
 800d5b0:	bf38      	it	cc
 800d5b2:	250c      	movcc	r5, #12
 800d5b4:	2d00      	cmp	r5, #0
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	db01      	blt.n	800d5be <_malloc_r+0x1a>
 800d5ba:	42a9      	cmp	r1, r5
 800d5bc:	d903      	bls.n	800d5c6 <_malloc_r+0x22>
 800d5be:	230c      	movs	r3, #12
 800d5c0:	6033      	str	r3, [r6, #0]
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c6:	f000 fbdf 	bl	800dd88 <__malloc_lock>
 800d5ca:	4921      	ldr	r1, [pc, #132]	; (800d650 <_malloc_r+0xac>)
 800d5cc:	680a      	ldr	r2, [r1, #0]
 800d5ce:	4614      	mov	r4, r2
 800d5d0:	b99c      	cbnz	r4, 800d5fa <_malloc_r+0x56>
 800d5d2:	4f20      	ldr	r7, [pc, #128]	; (800d654 <_malloc_r+0xb0>)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	b923      	cbnz	r3, 800d5e2 <_malloc_r+0x3e>
 800d5d8:	4621      	mov	r1, r4
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f000 fb2a 	bl	800dc34 <_sbrk_r>
 800d5e0:	6038      	str	r0, [r7, #0]
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f000 fb25 	bl	800dc34 <_sbrk_r>
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	d123      	bne.n	800d636 <_malloc_r+0x92>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	6033      	str	r3, [r6, #0]
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f000 fbce 	bl	800dd94 <__malloc_unlock>
 800d5f8:	e7e3      	b.n	800d5c2 <_malloc_r+0x1e>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	1b5b      	subs	r3, r3, r5
 800d5fe:	d417      	bmi.n	800d630 <_malloc_r+0x8c>
 800d600:	2b0b      	cmp	r3, #11
 800d602:	d903      	bls.n	800d60c <_malloc_r+0x68>
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	441c      	add	r4, r3
 800d608:	6025      	str	r5, [r4, #0]
 800d60a:	e004      	b.n	800d616 <_malloc_r+0x72>
 800d60c:	6863      	ldr	r3, [r4, #4]
 800d60e:	42a2      	cmp	r2, r4
 800d610:	bf0c      	ite	eq
 800d612:	600b      	streq	r3, [r1, #0]
 800d614:	6053      	strne	r3, [r2, #4]
 800d616:	4630      	mov	r0, r6
 800d618:	f000 fbbc 	bl	800dd94 <__malloc_unlock>
 800d61c:	f104 000b 	add.w	r0, r4, #11
 800d620:	1d23      	adds	r3, r4, #4
 800d622:	f020 0007 	bic.w	r0, r0, #7
 800d626:	1ac2      	subs	r2, r0, r3
 800d628:	d0cc      	beq.n	800d5c4 <_malloc_r+0x20>
 800d62a:	1a1b      	subs	r3, r3, r0
 800d62c:	50a3      	str	r3, [r4, r2]
 800d62e:	e7c9      	b.n	800d5c4 <_malloc_r+0x20>
 800d630:	4622      	mov	r2, r4
 800d632:	6864      	ldr	r4, [r4, #4]
 800d634:	e7cc      	b.n	800d5d0 <_malloc_r+0x2c>
 800d636:	1cc4      	adds	r4, r0, #3
 800d638:	f024 0403 	bic.w	r4, r4, #3
 800d63c:	42a0      	cmp	r0, r4
 800d63e:	d0e3      	beq.n	800d608 <_malloc_r+0x64>
 800d640:	1a21      	subs	r1, r4, r0
 800d642:	4630      	mov	r0, r6
 800d644:	f000 faf6 	bl	800dc34 <_sbrk_r>
 800d648:	3001      	adds	r0, #1
 800d64a:	d1dd      	bne.n	800d608 <_malloc_r+0x64>
 800d64c:	e7cf      	b.n	800d5ee <_malloc_r+0x4a>
 800d64e:	bf00      	nop
 800d650:	20003570 	.word	0x20003570
 800d654:	20003574 	.word	0x20003574

0800d658 <__sfputc_r>:
 800d658:	6893      	ldr	r3, [r2, #8]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	b410      	push	{r4}
 800d660:	6093      	str	r3, [r2, #8]
 800d662:	da08      	bge.n	800d676 <__sfputc_r+0x1e>
 800d664:	6994      	ldr	r4, [r2, #24]
 800d666:	42a3      	cmp	r3, r4
 800d668:	db01      	blt.n	800d66e <__sfputc_r+0x16>
 800d66a:	290a      	cmp	r1, #10
 800d66c:	d103      	bne.n	800d676 <__sfputc_r+0x1e>
 800d66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d672:	f7ff bc69 	b.w	800cf48 <__swbuf_r>
 800d676:	6813      	ldr	r3, [r2, #0]
 800d678:	1c58      	adds	r0, r3, #1
 800d67a:	6010      	str	r0, [r2, #0]
 800d67c:	7019      	strb	r1, [r3, #0]
 800d67e:	4608      	mov	r0, r1
 800d680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <__sfputs_r>:
 800d686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d688:	4606      	mov	r6, r0
 800d68a:	460f      	mov	r7, r1
 800d68c:	4614      	mov	r4, r2
 800d68e:	18d5      	adds	r5, r2, r3
 800d690:	42ac      	cmp	r4, r5
 800d692:	d101      	bne.n	800d698 <__sfputs_r+0x12>
 800d694:	2000      	movs	r0, #0
 800d696:	e007      	b.n	800d6a8 <__sfputs_r+0x22>
 800d698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69c:	463a      	mov	r2, r7
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff ffda 	bl	800d658 <__sfputc_r>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d1f3      	bne.n	800d690 <__sfputs_r+0xa>
 800d6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6ac <_vfiprintf_r>:
 800d6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	b09d      	sub	sp, #116	; 0x74
 800d6b4:	4614      	mov	r4, r2
 800d6b6:	4698      	mov	r8, r3
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	b118      	cbz	r0, 800d6c4 <_vfiprintf_r+0x18>
 800d6bc:	6983      	ldr	r3, [r0, #24]
 800d6be:	b90b      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x18>
 800d6c0:	f7ff fe1c 	bl	800d2fc <__sinit>
 800d6c4:	4b89      	ldr	r3, [pc, #548]	; (800d8ec <_vfiprintf_r+0x240>)
 800d6c6:	429d      	cmp	r5, r3
 800d6c8:	d11b      	bne.n	800d702 <_vfiprintf_r+0x56>
 800d6ca:	6875      	ldr	r5, [r6, #4]
 800d6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ce:	07d9      	lsls	r1, r3, #31
 800d6d0:	d405      	bmi.n	800d6de <_vfiprintf_r+0x32>
 800d6d2:	89ab      	ldrh	r3, [r5, #12]
 800d6d4:	059a      	lsls	r2, r3, #22
 800d6d6:	d402      	bmi.n	800d6de <_vfiprintf_r+0x32>
 800d6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6da:	f7ff fead 	bl	800d438 <__retarget_lock_acquire_recursive>
 800d6de:	89ab      	ldrh	r3, [r5, #12]
 800d6e0:	071b      	lsls	r3, r3, #28
 800d6e2:	d501      	bpl.n	800d6e8 <_vfiprintf_r+0x3c>
 800d6e4:	692b      	ldr	r3, [r5, #16]
 800d6e6:	b9eb      	cbnz	r3, 800d724 <_vfiprintf_r+0x78>
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7ff fc7e 	bl	800cfec <__swsetup_r>
 800d6f0:	b1c0      	cbz	r0, 800d724 <_vfiprintf_r+0x78>
 800d6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6f4:	07dc      	lsls	r4, r3, #31
 800d6f6:	d50e      	bpl.n	800d716 <_vfiprintf_r+0x6a>
 800d6f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6fc:	b01d      	add	sp, #116	; 0x74
 800d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d702:	4b7b      	ldr	r3, [pc, #492]	; (800d8f0 <_vfiprintf_r+0x244>)
 800d704:	429d      	cmp	r5, r3
 800d706:	d101      	bne.n	800d70c <_vfiprintf_r+0x60>
 800d708:	68b5      	ldr	r5, [r6, #8]
 800d70a:	e7df      	b.n	800d6cc <_vfiprintf_r+0x20>
 800d70c:	4b79      	ldr	r3, [pc, #484]	; (800d8f4 <_vfiprintf_r+0x248>)
 800d70e:	429d      	cmp	r5, r3
 800d710:	bf08      	it	eq
 800d712:	68f5      	ldreq	r5, [r6, #12]
 800d714:	e7da      	b.n	800d6cc <_vfiprintf_r+0x20>
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	0598      	lsls	r0, r3, #22
 800d71a:	d4ed      	bmi.n	800d6f8 <_vfiprintf_r+0x4c>
 800d71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d71e:	f7ff fe8c 	bl	800d43a <__retarget_lock_release_recursive>
 800d722:	e7e9      	b.n	800d6f8 <_vfiprintf_r+0x4c>
 800d724:	2300      	movs	r3, #0
 800d726:	9309      	str	r3, [sp, #36]	; 0x24
 800d728:	2320      	movs	r3, #32
 800d72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d732:	2330      	movs	r3, #48	; 0x30
 800d734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8f8 <_vfiprintf_r+0x24c>
 800d738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d73c:	f04f 0901 	mov.w	r9, #1
 800d740:	4623      	mov	r3, r4
 800d742:	469a      	mov	sl, r3
 800d744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d748:	b10a      	cbz	r2, 800d74e <_vfiprintf_r+0xa2>
 800d74a:	2a25      	cmp	r2, #37	; 0x25
 800d74c:	d1f9      	bne.n	800d742 <_vfiprintf_r+0x96>
 800d74e:	ebba 0b04 	subs.w	fp, sl, r4
 800d752:	d00b      	beq.n	800d76c <_vfiprintf_r+0xc0>
 800d754:	465b      	mov	r3, fp
 800d756:	4622      	mov	r2, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ff93 	bl	800d686 <__sfputs_r>
 800d760:	3001      	adds	r0, #1
 800d762:	f000 80aa 	beq.w	800d8ba <_vfiprintf_r+0x20e>
 800d766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d768:	445a      	add	r2, fp
 800d76a:	9209      	str	r2, [sp, #36]	; 0x24
 800d76c:	f89a 3000 	ldrb.w	r3, [sl]
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 80a2 	beq.w	800d8ba <_vfiprintf_r+0x20e>
 800d776:	2300      	movs	r3, #0
 800d778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d780:	f10a 0a01 	add.w	sl, sl, #1
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	9307      	str	r3, [sp, #28]
 800d788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d78c:	931a      	str	r3, [sp, #104]	; 0x68
 800d78e:	4654      	mov	r4, sl
 800d790:	2205      	movs	r2, #5
 800d792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d796:	4858      	ldr	r0, [pc, #352]	; (800d8f8 <_vfiprintf_r+0x24c>)
 800d798:	f7f2 fd1a 	bl	80001d0 <memchr>
 800d79c:	9a04      	ldr	r2, [sp, #16]
 800d79e:	b9d8      	cbnz	r0, 800d7d8 <_vfiprintf_r+0x12c>
 800d7a0:	06d1      	lsls	r1, r2, #27
 800d7a2:	bf44      	itt	mi
 800d7a4:	2320      	movmi	r3, #32
 800d7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7aa:	0713      	lsls	r3, r2, #28
 800d7ac:	bf44      	itt	mi
 800d7ae:	232b      	movmi	r3, #43	; 0x2b
 800d7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ba:	d015      	beq.n	800d7e8 <_vfiprintf_r+0x13c>
 800d7bc:	9a07      	ldr	r2, [sp, #28]
 800d7be:	4654      	mov	r4, sl
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	f04f 0c0a 	mov.w	ip, #10
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7cc:	3b30      	subs	r3, #48	; 0x30
 800d7ce:	2b09      	cmp	r3, #9
 800d7d0:	d94e      	bls.n	800d870 <_vfiprintf_r+0x1c4>
 800d7d2:	b1b0      	cbz	r0, 800d802 <_vfiprintf_r+0x156>
 800d7d4:	9207      	str	r2, [sp, #28]
 800d7d6:	e014      	b.n	800d802 <_vfiprintf_r+0x156>
 800d7d8:	eba0 0308 	sub.w	r3, r0, r8
 800d7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	46a2      	mov	sl, r4
 800d7e6:	e7d2      	b.n	800d78e <_vfiprintf_r+0xe2>
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	1d19      	adds	r1, r3, #4
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	9103      	str	r1, [sp, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfbb      	ittet	lt
 800d7f4:	425b      	neglt	r3, r3
 800d7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7fa:	9307      	strge	r3, [sp, #28]
 800d7fc:	9307      	strlt	r3, [sp, #28]
 800d7fe:	bfb8      	it	lt
 800d800:	9204      	strlt	r2, [sp, #16]
 800d802:	7823      	ldrb	r3, [r4, #0]
 800d804:	2b2e      	cmp	r3, #46	; 0x2e
 800d806:	d10c      	bne.n	800d822 <_vfiprintf_r+0x176>
 800d808:	7863      	ldrb	r3, [r4, #1]
 800d80a:	2b2a      	cmp	r3, #42	; 0x2a
 800d80c:	d135      	bne.n	800d87a <_vfiprintf_r+0x1ce>
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	1d1a      	adds	r2, r3, #4
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	9203      	str	r2, [sp, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfb8      	it	lt
 800d81a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d81e:	3402      	adds	r4, #2
 800d820:	9305      	str	r3, [sp, #20]
 800d822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d908 <_vfiprintf_r+0x25c>
 800d826:	7821      	ldrb	r1, [r4, #0]
 800d828:	2203      	movs	r2, #3
 800d82a:	4650      	mov	r0, sl
 800d82c:	f7f2 fcd0 	bl	80001d0 <memchr>
 800d830:	b140      	cbz	r0, 800d844 <_vfiprintf_r+0x198>
 800d832:	2340      	movs	r3, #64	; 0x40
 800d834:	eba0 000a 	sub.w	r0, r0, sl
 800d838:	fa03 f000 	lsl.w	r0, r3, r0
 800d83c:	9b04      	ldr	r3, [sp, #16]
 800d83e:	4303      	orrs	r3, r0
 800d840:	3401      	adds	r4, #1
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d848:	482c      	ldr	r0, [pc, #176]	; (800d8fc <_vfiprintf_r+0x250>)
 800d84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d84e:	2206      	movs	r2, #6
 800d850:	f7f2 fcbe 	bl	80001d0 <memchr>
 800d854:	2800      	cmp	r0, #0
 800d856:	d03f      	beq.n	800d8d8 <_vfiprintf_r+0x22c>
 800d858:	4b29      	ldr	r3, [pc, #164]	; (800d900 <_vfiprintf_r+0x254>)
 800d85a:	bb1b      	cbnz	r3, 800d8a4 <_vfiprintf_r+0x1f8>
 800d85c:	9b03      	ldr	r3, [sp, #12]
 800d85e:	3307      	adds	r3, #7
 800d860:	f023 0307 	bic.w	r3, r3, #7
 800d864:	3308      	adds	r3, #8
 800d866:	9303      	str	r3, [sp, #12]
 800d868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d86a:	443b      	add	r3, r7
 800d86c:	9309      	str	r3, [sp, #36]	; 0x24
 800d86e:	e767      	b.n	800d740 <_vfiprintf_r+0x94>
 800d870:	fb0c 3202 	mla	r2, ip, r2, r3
 800d874:	460c      	mov	r4, r1
 800d876:	2001      	movs	r0, #1
 800d878:	e7a5      	b.n	800d7c6 <_vfiprintf_r+0x11a>
 800d87a:	2300      	movs	r3, #0
 800d87c:	3401      	adds	r4, #1
 800d87e:	9305      	str	r3, [sp, #20]
 800d880:	4619      	mov	r1, r3
 800d882:	f04f 0c0a 	mov.w	ip, #10
 800d886:	4620      	mov	r0, r4
 800d888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d88c:	3a30      	subs	r2, #48	; 0x30
 800d88e:	2a09      	cmp	r2, #9
 800d890:	d903      	bls.n	800d89a <_vfiprintf_r+0x1ee>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0c5      	beq.n	800d822 <_vfiprintf_r+0x176>
 800d896:	9105      	str	r1, [sp, #20]
 800d898:	e7c3      	b.n	800d822 <_vfiprintf_r+0x176>
 800d89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d89e:	4604      	mov	r4, r0
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e7f0      	b.n	800d886 <_vfiprintf_r+0x1da>
 800d8a4:	ab03      	add	r3, sp, #12
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	462a      	mov	r2, r5
 800d8aa:	4b16      	ldr	r3, [pc, #88]	; (800d904 <_vfiprintf_r+0x258>)
 800d8ac:	a904      	add	r1, sp, #16
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f3af 8000 	nop.w
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	1c78      	adds	r0, r7, #1
 800d8b8:	d1d6      	bne.n	800d868 <_vfiprintf_r+0x1bc>
 800d8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8bc:	07d9      	lsls	r1, r3, #31
 800d8be:	d405      	bmi.n	800d8cc <_vfiprintf_r+0x220>
 800d8c0:	89ab      	ldrh	r3, [r5, #12]
 800d8c2:	059a      	lsls	r2, r3, #22
 800d8c4:	d402      	bmi.n	800d8cc <_vfiprintf_r+0x220>
 800d8c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8c8:	f7ff fdb7 	bl	800d43a <__retarget_lock_release_recursive>
 800d8cc:	89ab      	ldrh	r3, [r5, #12]
 800d8ce:	065b      	lsls	r3, r3, #25
 800d8d0:	f53f af12 	bmi.w	800d6f8 <_vfiprintf_r+0x4c>
 800d8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8d6:	e711      	b.n	800d6fc <_vfiprintf_r+0x50>
 800d8d8:	ab03      	add	r3, sp, #12
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	462a      	mov	r2, r5
 800d8de:	4b09      	ldr	r3, [pc, #36]	; (800d904 <_vfiprintf_r+0x258>)
 800d8e0:	a904      	add	r1, sp, #16
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f000 f880 	bl	800d9e8 <_printf_i>
 800d8e8:	e7e4      	b.n	800d8b4 <_vfiprintf_r+0x208>
 800d8ea:	bf00      	nop
 800d8ec:	0800e0cc 	.word	0x0800e0cc
 800d8f0:	0800e0ec 	.word	0x0800e0ec
 800d8f4:	0800e0ac 	.word	0x0800e0ac
 800d8f8:	0800e10c 	.word	0x0800e10c
 800d8fc:	0800e116 	.word	0x0800e116
 800d900:	00000000 	.word	0x00000000
 800d904:	0800d687 	.word	0x0800d687
 800d908:	0800e112 	.word	0x0800e112

0800d90c <_printf_common>:
 800d90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	4616      	mov	r6, r2
 800d912:	4699      	mov	r9, r3
 800d914:	688a      	ldr	r2, [r1, #8]
 800d916:	690b      	ldr	r3, [r1, #16]
 800d918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d91c:	4293      	cmp	r3, r2
 800d91e:	bfb8      	it	lt
 800d920:	4613      	movlt	r3, r2
 800d922:	6033      	str	r3, [r6, #0]
 800d924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d928:	4607      	mov	r7, r0
 800d92a:	460c      	mov	r4, r1
 800d92c:	b10a      	cbz	r2, 800d932 <_printf_common+0x26>
 800d92e:	3301      	adds	r3, #1
 800d930:	6033      	str	r3, [r6, #0]
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	0699      	lsls	r1, r3, #26
 800d936:	bf42      	ittt	mi
 800d938:	6833      	ldrmi	r3, [r6, #0]
 800d93a:	3302      	addmi	r3, #2
 800d93c:	6033      	strmi	r3, [r6, #0]
 800d93e:	6825      	ldr	r5, [r4, #0]
 800d940:	f015 0506 	ands.w	r5, r5, #6
 800d944:	d106      	bne.n	800d954 <_printf_common+0x48>
 800d946:	f104 0a19 	add.w	sl, r4, #25
 800d94a:	68e3      	ldr	r3, [r4, #12]
 800d94c:	6832      	ldr	r2, [r6, #0]
 800d94e:	1a9b      	subs	r3, r3, r2
 800d950:	42ab      	cmp	r3, r5
 800d952:	dc26      	bgt.n	800d9a2 <_printf_common+0x96>
 800d954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d958:	1e13      	subs	r3, r2, #0
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	bf18      	it	ne
 800d95e:	2301      	movne	r3, #1
 800d960:	0692      	lsls	r2, r2, #26
 800d962:	d42b      	bmi.n	800d9bc <_printf_common+0xb0>
 800d964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d968:	4649      	mov	r1, r9
 800d96a:	4638      	mov	r0, r7
 800d96c:	47c0      	blx	r8
 800d96e:	3001      	adds	r0, #1
 800d970:	d01e      	beq.n	800d9b0 <_printf_common+0xa4>
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	68e5      	ldr	r5, [r4, #12]
 800d976:	6832      	ldr	r2, [r6, #0]
 800d978:	f003 0306 	and.w	r3, r3, #6
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	bf08      	it	eq
 800d980:	1aad      	subeq	r5, r5, r2
 800d982:	68a3      	ldr	r3, [r4, #8]
 800d984:	6922      	ldr	r2, [r4, #16]
 800d986:	bf0c      	ite	eq
 800d988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d98c:	2500      	movne	r5, #0
 800d98e:	4293      	cmp	r3, r2
 800d990:	bfc4      	itt	gt
 800d992:	1a9b      	subgt	r3, r3, r2
 800d994:	18ed      	addgt	r5, r5, r3
 800d996:	2600      	movs	r6, #0
 800d998:	341a      	adds	r4, #26
 800d99a:	42b5      	cmp	r5, r6
 800d99c:	d11a      	bne.n	800d9d4 <_printf_common+0xc8>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	e008      	b.n	800d9b4 <_printf_common+0xa8>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	4652      	mov	r2, sl
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	47c0      	blx	r8
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	d103      	bne.n	800d9b8 <_printf_common+0xac>
 800d9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9b8:	3501      	adds	r5, #1
 800d9ba:	e7c6      	b.n	800d94a <_printf_common+0x3e>
 800d9bc:	18e1      	adds	r1, r4, r3
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	2030      	movs	r0, #48	; 0x30
 800d9c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9c6:	4422      	add	r2, r4
 800d9c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9d0:	3302      	adds	r3, #2
 800d9d2:	e7c7      	b.n	800d964 <_printf_common+0x58>
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	4649      	mov	r1, r9
 800d9da:	4638      	mov	r0, r7
 800d9dc:	47c0      	blx	r8
 800d9de:	3001      	adds	r0, #1
 800d9e0:	d0e6      	beq.n	800d9b0 <_printf_common+0xa4>
 800d9e2:	3601      	adds	r6, #1
 800d9e4:	e7d9      	b.n	800d99a <_printf_common+0x8e>
	...

0800d9e8 <_printf_i>:
 800d9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	4691      	mov	r9, r2
 800d9f0:	7e27      	ldrb	r7, [r4, #24]
 800d9f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d9f4:	2f78      	cmp	r7, #120	; 0x78
 800d9f6:	4680      	mov	r8, r0
 800d9f8:	469a      	mov	sl, r3
 800d9fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9fe:	d807      	bhi.n	800da10 <_printf_i+0x28>
 800da00:	2f62      	cmp	r7, #98	; 0x62
 800da02:	d80a      	bhi.n	800da1a <_printf_i+0x32>
 800da04:	2f00      	cmp	r7, #0
 800da06:	f000 80d8 	beq.w	800dbba <_printf_i+0x1d2>
 800da0a:	2f58      	cmp	r7, #88	; 0x58
 800da0c:	f000 80a3 	beq.w	800db56 <_printf_i+0x16e>
 800da10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da18:	e03a      	b.n	800da90 <_printf_i+0xa8>
 800da1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da1e:	2b15      	cmp	r3, #21
 800da20:	d8f6      	bhi.n	800da10 <_printf_i+0x28>
 800da22:	a001      	add	r0, pc, #4	; (adr r0, 800da28 <_printf_i+0x40>)
 800da24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800da28:	0800da81 	.word	0x0800da81
 800da2c:	0800da95 	.word	0x0800da95
 800da30:	0800da11 	.word	0x0800da11
 800da34:	0800da11 	.word	0x0800da11
 800da38:	0800da11 	.word	0x0800da11
 800da3c:	0800da11 	.word	0x0800da11
 800da40:	0800da95 	.word	0x0800da95
 800da44:	0800da11 	.word	0x0800da11
 800da48:	0800da11 	.word	0x0800da11
 800da4c:	0800da11 	.word	0x0800da11
 800da50:	0800da11 	.word	0x0800da11
 800da54:	0800dba1 	.word	0x0800dba1
 800da58:	0800dac5 	.word	0x0800dac5
 800da5c:	0800db83 	.word	0x0800db83
 800da60:	0800da11 	.word	0x0800da11
 800da64:	0800da11 	.word	0x0800da11
 800da68:	0800dbc3 	.word	0x0800dbc3
 800da6c:	0800da11 	.word	0x0800da11
 800da70:	0800dac5 	.word	0x0800dac5
 800da74:	0800da11 	.word	0x0800da11
 800da78:	0800da11 	.word	0x0800da11
 800da7c:	0800db8b 	.word	0x0800db8b
 800da80:	680b      	ldr	r3, [r1, #0]
 800da82:	1d1a      	adds	r2, r3, #4
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	600a      	str	r2, [r1, #0]
 800da88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da90:	2301      	movs	r3, #1
 800da92:	e0a3      	b.n	800dbdc <_printf_i+0x1f4>
 800da94:	6825      	ldr	r5, [r4, #0]
 800da96:	6808      	ldr	r0, [r1, #0]
 800da98:	062e      	lsls	r6, r5, #24
 800da9a:	f100 0304 	add.w	r3, r0, #4
 800da9e:	d50a      	bpl.n	800dab6 <_printf_i+0xce>
 800daa0:	6805      	ldr	r5, [r0, #0]
 800daa2:	600b      	str	r3, [r1, #0]
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	da03      	bge.n	800dab0 <_printf_i+0xc8>
 800daa8:	232d      	movs	r3, #45	; 0x2d
 800daaa:	426d      	negs	r5, r5
 800daac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab0:	485e      	ldr	r0, [pc, #376]	; (800dc2c <_printf_i+0x244>)
 800dab2:	230a      	movs	r3, #10
 800dab4:	e019      	b.n	800daea <_printf_i+0x102>
 800dab6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800daba:	6805      	ldr	r5, [r0, #0]
 800dabc:	600b      	str	r3, [r1, #0]
 800dabe:	bf18      	it	ne
 800dac0:	b22d      	sxthne	r5, r5
 800dac2:	e7ef      	b.n	800daa4 <_printf_i+0xbc>
 800dac4:	680b      	ldr	r3, [r1, #0]
 800dac6:	6825      	ldr	r5, [r4, #0]
 800dac8:	1d18      	adds	r0, r3, #4
 800daca:	6008      	str	r0, [r1, #0]
 800dacc:	0628      	lsls	r0, r5, #24
 800dace:	d501      	bpl.n	800dad4 <_printf_i+0xec>
 800dad0:	681d      	ldr	r5, [r3, #0]
 800dad2:	e002      	b.n	800dada <_printf_i+0xf2>
 800dad4:	0669      	lsls	r1, r5, #25
 800dad6:	d5fb      	bpl.n	800dad0 <_printf_i+0xe8>
 800dad8:	881d      	ldrh	r5, [r3, #0]
 800dada:	4854      	ldr	r0, [pc, #336]	; (800dc2c <_printf_i+0x244>)
 800dadc:	2f6f      	cmp	r7, #111	; 0x6f
 800dade:	bf0c      	ite	eq
 800dae0:	2308      	moveq	r3, #8
 800dae2:	230a      	movne	r3, #10
 800dae4:	2100      	movs	r1, #0
 800dae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800daea:	6866      	ldr	r6, [r4, #4]
 800daec:	60a6      	str	r6, [r4, #8]
 800daee:	2e00      	cmp	r6, #0
 800daf0:	bfa2      	ittt	ge
 800daf2:	6821      	ldrge	r1, [r4, #0]
 800daf4:	f021 0104 	bicge.w	r1, r1, #4
 800daf8:	6021      	strge	r1, [r4, #0]
 800dafa:	b90d      	cbnz	r5, 800db00 <_printf_i+0x118>
 800dafc:	2e00      	cmp	r6, #0
 800dafe:	d04d      	beq.n	800db9c <_printf_i+0x1b4>
 800db00:	4616      	mov	r6, r2
 800db02:	fbb5 f1f3 	udiv	r1, r5, r3
 800db06:	fb03 5711 	mls	r7, r3, r1, r5
 800db0a:	5dc7      	ldrb	r7, [r0, r7]
 800db0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db10:	462f      	mov	r7, r5
 800db12:	42bb      	cmp	r3, r7
 800db14:	460d      	mov	r5, r1
 800db16:	d9f4      	bls.n	800db02 <_printf_i+0x11a>
 800db18:	2b08      	cmp	r3, #8
 800db1a:	d10b      	bne.n	800db34 <_printf_i+0x14c>
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	07df      	lsls	r7, r3, #31
 800db20:	d508      	bpl.n	800db34 <_printf_i+0x14c>
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	6861      	ldr	r1, [r4, #4]
 800db26:	4299      	cmp	r1, r3
 800db28:	bfde      	ittt	le
 800db2a:	2330      	movle	r3, #48	; 0x30
 800db2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db30:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800db34:	1b92      	subs	r2, r2, r6
 800db36:	6122      	str	r2, [r4, #16]
 800db38:	f8cd a000 	str.w	sl, [sp]
 800db3c:	464b      	mov	r3, r9
 800db3e:	aa03      	add	r2, sp, #12
 800db40:	4621      	mov	r1, r4
 800db42:	4640      	mov	r0, r8
 800db44:	f7ff fee2 	bl	800d90c <_printf_common>
 800db48:	3001      	adds	r0, #1
 800db4a:	d14c      	bne.n	800dbe6 <_printf_i+0x1fe>
 800db4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db50:	b004      	add	sp, #16
 800db52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db56:	4835      	ldr	r0, [pc, #212]	; (800dc2c <_printf_i+0x244>)
 800db58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	680e      	ldr	r6, [r1, #0]
 800db60:	061f      	lsls	r7, r3, #24
 800db62:	f856 5b04 	ldr.w	r5, [r6], #4
 800db66:	600e      	str	r6, [r1, #0]
 800db68:	d514      	bpl.n	800db94 <_printf_i+0x1ac>
 800db6a:	07d9      	lsls	r1, r3, #31
 800db6c:	bf44      	itt	mi
 800db6e:	f043 0320 	orrmi.w	r3, r3, #32
 800db72:	6023      	strmi	r3, [r4, #0]
 800db74:	b91d      	cbnz	r5, 800db7e <_printf_i+0x196>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	f023 0320 	bic.w	r3, r3, #32
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	2310      	movs	r3, #16
 800db80:	e7b0      	b.n	800dae4 <_printf_i+0xfc>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	f043 0320 	orr.w	r3, r3, #32
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	2378      	movs	r3, #120	; 0x78
 800db8c:	4828      	ldr	r0, [pc, #160]	; (800dc30 <_printf_i+0x248>)
 800db8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db92:	e7e3      	b.n	800db5c <_printf_i+0x174>
 800db94:	065e      	lsls	r6, r3, #25
 800db96:	bf48      	it	mi
 800db98:	b2ad      	uxthmi	r5, r5
 800db9a:	e7e6      	b.n	800db6a <_printf_i+0x182>
 800db9c:	4616      	mov	r6, r2
 800db9e:	e7bb      	b.n	800db18 <_printf_i+0x130>
 800dba0:	680b      	ldr	r3, [r1, #0]
 800dba2:	6826      	ldr	r6, [r4, #0]
 800dba4:	6960      	ldr	r0, [r4, #20]
 800dba6:	1d1d      	adds	r5, r3, #4
 800dba8:	600d      	str	r5, [r1, #0]
 800dbaa:	0635      	lsls	r5, r6, #24
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	d501      	bpl.n	800dbb4 <_printf_i+0x1cc>
 800dbb0:	6018      	str	r0, [r3, #0]
 800dbb2:	e002      	b.n	800dbba <_printf_i+0x1d2>
 800dbb4:	0671      	lsls	r1, r6, #25
 800dbb6:	d5fb      	bpl.n	800dbb0 <_printf_i+0x1c8>
 800dbb8:	8018      	strh	r0, [r3, #0]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	6123      	str	r3, [r4, #16]
 800dbbe:	4616      	mov	r6, r2
 800dbc0:	e7ba      	b.n	800db38 <_printf_i+0x150>
 800dbc2:	680b      	ldr	r3, [r1, #0]
 800dbc4:	1d1a      	adds	r2, r3, #4
 800dbc6:	600a      	str	r2, [r1, #0]
 800dbc8:	681e      	ldr	r6, [r3, #0]
 800dbca:	6862      	ldr	r2, [r4, #4]
 800dbcc:	2100      	movs	r1, #0
 800dbce:	4630      	mov	r0, r6
 800dbd0:	f7f2 fafe 	bl	80001d0 <memchr>
 800dbd4:	b108      	cbz	r0, 800dbda <_printf_i+0x1f2>
 800dbd6:	1b80      	subs	r0, r0, r6
 800dbd8:	6060      	str	r0, [r4, #4]
 800dbda:	6863      	ldr	r3, [r4, #4]
 800dbdc:	6123      	str	r3, [r4, #16]
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbe4:	e7a8      	b.n	800db38 <_printf_i+0x150>
 800dbe6:	6923      	ldr	r3, [r4, #16]
 800dbe8:	4632      	mov	r2, r6
 800dbea:	4649      	mov	r1, r9
 800dbec:	4640      	mov	r0, r8
 800dbee:	47d0      	blx	sl
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	d0ab      	beq.n	800db4c <_printf_i+0x164>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	079b      	lsls	r3, r3, #30
 800dbf8:	d413      	bmi.n	800dc22 <_printf_i+0x23a>
 800dbfa:	68e0      	ldr	r0, [r4, #12]
 800dbfc:	9b03      	ldr	r3, [sp, #12]
 800dbfe:	4298      	cmp	r0, r3
 800dc00:	bfb8      	it	lt
 800dc02:	4618      	movlt	r0, r3
 800dc04:	e7a4      	b.n	800db50 <_printf_i+0x168>
 800dc06:	2301      	movs	r3, #1
 800dc08:	4632      	mov	r2, r6
 800dc0a:	4649      	mov	r1, r9
 800dc0c:	4640      	mov	r0, r8
 800dc0e:	47d0      	blx	sl
 800dc10:	3001      	adds	r0, #1
 800dc12:	d09b      	beq.n	800db4c <_printf_i+0x164>
 800dc14:	3501      	adds	r5, #1
 800dc16:	68e3      	ldr	r3, [r4, #12]
 800dc18:	9903      	ldr	r1, [sp, #12]
 800dc1a:	1a5b      	subs	r3, r3, r1
 800dc1c:	42ab      	cmp	r3, r5
 800dc1e:	dcf2      	bgt.n	800dc06 <_printf_i+0x21e>
 800dc20:	e7eb      	b.n	800dbfa <_printf_i+0x212>
 800dc22:	2500      	movs	r5, #0
 800dc24:	f104 0619 	add.w	r6, r4, #25
 800dc28:	e7f5      	b.n	800dc16 <_printf_i+0x22e>
 800dc2a:	bf00      	nop
 800dc2c:	0800e11d 	.word	0x0800e11d
 800dc30:	0800e12e 	.word	0x0800e12e

0800dc34 <_sbrk_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d06      	ldr	r5, [pc, #24]	; (800dc50 <_sbrk_r+0x1c>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	f7f5 fa54 	bl	80030ec <_sbrk>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_sbrk_r+0x1a>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_sbrk_r+0x1a>
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	2000fcf0 	.word	0x2000fcf0

0800dc54 <__sread>:
 800dc54:	b510      	push	{r4, lr}
 800dc56:	460c      	mov	r4, r1
 800dc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5c:	f000 f8a0 	bl	800dda0 <_read_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	bfab      	itete	ge
 800dc64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc66:	89a3      	ldrhlt	r3, [r4, #12]
 800dc68:	181b      	addge	r3, r3, r0
 800dc6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc6e:	bfac      	ite	ge
 800dc70:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc72:	81a3      	strhlt	r3, [r4, #12]
 800dc74:	bd10      	pop	{r4, pc}

0800dc76 <__swrite>:
 800dc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7a:	461f      	mov	r7, r3
 800dc7c:	898b      	ldrh	r3, [r1, #12]
 800dc7e:	05db      	lsls	r3, r3, #23
 800dc80:	4605      	mov	r5, r0
 800dc82:	460c      	mov	r4, r1
 800dc84:	4616      	mov	r6, r2
 800dc86:	d505      	bpl.n	800dc94 <__swrite+0x1e>
 800dc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f000 f868 	bl	800dd64 <_lseek_r>
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc9e:	81a3      	strh	r3, [r4, #12]
 800dca0:	4632      	mov	r2, r6
 800dca2:	463b      	mov	r3, r7
 800dca4:	4628      	mov	r0, r5
 800dca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	f000 b817 	b.w	800dcdc <_write_r>

0800dcae <__sseek>:
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb6:	f000 f855 	bl	800dd64 <_lseek_r>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	bf15      	itete	ne
 800dcc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dcc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcca:	81a3      	strheq	r3, [r4, #12]
 800dccc:	bf18      	it	ne
 800dcce:	81a3      	strhne	r3, [r4, #12]
 800dcd0:	bd10      	pop	{r4, pc}

0800dcd2 <__sclose>:
 800dcd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd6:	f000 b813 	b.w	800dd00 <_close_r>
	...

0800dcdc <_write_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	4d07      	ldr	r5, [pc, #28]	; (800dcfc <_write_r+0x20>)
 800dce0:	4604      	mov	r4, r0
 800dce2:	4608      	mov	r0, r1
 800dce4:	4611      	mov	r1, r2
 800dce6:	2200      	movs	r2, #0
 800dce8:	602a      	str	r2, [r5, #0]
 800dcea:	461a      	mov	r2, r3
 800dcec:	f7f5 f9ad 	bl	800304a <_write>
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d102      	bne.n	800dcfa <_write_r+0x1e>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	b103      	cbz	r3, 800dcfa <_write_r+0x1e>
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	2000fcf0 	.word	0x2000fcf0

0800dd00 <_close_r>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	4d06      	ldr	r5, [pc, #24]	; (800dd1c <_close_r+0x1c>)
 800dd04:	2300      	movs	r3, #0
 800dd06:	4604      	mov	r4, r0
 800dd08:	4608      	mov	r0, r1
 800dd0a:	602b      	str	r3, [r5, #0]
 800dd0c:	f7f5 f9b9 	bl	8003082 <_close>
 800dd10:	1c43      	adds	r3, r0, #1
 800dd12:	d102      	bne.n	800dd1a <_close_r+0x1a>
 800dd14:	682b      	ldr	r3, [r5, #0]
 800dd16:	b103      	cbz	r3, 800dd1a <_close_r+0x1a>
 800dd18:	6023      	str	r3, [r4, #0]
 800dd1a:	bd38      	pop	{r3, r4, r5, pc}
 800dd1c:	2000fcf0 	.word	0x2000fcf0

0800dd20 <_fstat_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4d07      	ldr	r5, [pc, #28]	; (800dd40 <_fstat_r+0x20>)
 800dd24:	2300      	movs	r3, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4608      	mov	r0, r1
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	602b      	str	r3, [r5, #0]
 800dd2e:	f7f5 f9b4 	bl	800309a <_fstat>
 800dd32:	1c43      	adds	r3, r0, #1
 800dd34:	d102      	bne.n	800dd3c <_fstat_r+0x1c>
 800dd36:	682b      	ldr	r3, [r5, #0]
 800dd38:	b103      	cbz	r3, 800dd3c <_fstat_r+0x1c>
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	bd38      	pop	{r3, r4, r5, pc}
 800dd3e:	bf00      	nop
 800dd40:	2000fcf0 	.word	0x2000fcf0

0800dd44 <_isatty_r>:
 800dd44:	b538      	push	{r3, r4, r5, lr}
 800dd46:	4d06      	ldr	r5, [pc, #24]	; (800dd60 <_isatty_r+0x1c>)
 800dd48:	2300      	movs	r3, #0
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	4608      	mov	r0, r1
 800dd4e:	602b      	str	r3, [r5, #0]
 800dd50:	f7f5 f9b3 	bl	80030ba <_isatty>
 800dd54:	1c43      	adds	r3, r0, #1
 800dd56:	d102      	bne.n	800dd5e <_isatty_r+0x1a>
 800dd58:	682b      	ldr	r3, [r5, #0]
 800dd5a:	b103      	cbz	r3, 800dd5e <_isatty_r+0x1a>
 800dd5c:	6023      	str	r3, [r4, #0]
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
 800dd60:	2000fcf0 	.word	0x2000fcf0

0800dd64 <_lseek_r>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	4d07      	ldr	r5, [pc, #28]	; (800dd84 <_lseek_r+0x20>)
 800dd68:	4604      	mov	r4, r0
 800dd6a:	4608      	mov	r0, r1
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	2200      	movs	r2, #0
 800dd70:	602a      	str	r2, [r5, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	f7f5 f9ac 	bl	80030d0 <_lseek>
 800dd78:	1c43      	adds	r3, r0, #1
 800dd7a:	d102      	bne.n	800dd82 <_lseek_r+0x1e>
 800dd7c:	682b      	ldr	r3, [r5, #0]
 800dd7e:	b103      	cbz	r3, 800dd82 <_lseek_r+0x1e>
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	bd38      	pop	{r3, r4, r5, pc}
 800dd84:	2000fcf0 	.word	0x2000fcf0

0800dd88 <__malloc_lock>:
 800dd88:	4801      	ldr	r0, [pc, #4]	; (800dd90 <__malloc_lock+0x8>)
 800dd8a:	f7ff bb55 	b.w	800d438 <__retarget_lock_acquire_recursive>
 800dd8e:	bf00      	nop
 800dd90:	2000fce8 	.word	0x2000fce8

0800dd94 <__malloc_unlock>:
 800dd94:	4801      	ldr	r0, [pc, #4]	; (800dd9c <__malloc_unlock+0x8>)
 800dd96:	f7ff bb50 	b.w	800d43a <__retarget_lock_release_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	2000fce8 	.word	0x2000fce8

0800dda0 <_read_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d07      	ldr	r5, [pc, #28]	; (800ddc0 <_read_r+0x20>)
 800dda4:	4604      	mov	r4, r0
 800dda6:	4608      	mov	r0, r1
 800dda8:	4611      	mov	r1, r2
 800ddaa:	2200      	movs	r2, #0
 800ddac:	602a      	str	r2, [r5, #0]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	f7f5 f92e 	bl	8003010 <_read>
 800ddb4:	1c43      	adds	r3, r0, #1
 800ddb6:	d102      	bne.n	800ddbe <_read_r+0x1e>
 800ddb8:	682b      	ldr	r3, [r5, #0]
 800ddba:	b103      	cbz	r3, 800ddbe <_read_r+0x1e>
 800ddbc:	6023      	str	r3, [r4, #0]
 800ddbe:	bd38      	pop	{r3, r4, r5, pc}
 800ddc0:	2000fcf0 	.word	0x2000fcf0

0800ddc4 <_init>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	bf00      	nop
 800ddc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddca:	bc08      	pop	{r3}
 800ddcc:	469e      	mov	lr, r3
 800ddce:	4770      	bx	lr

0800ddd0 <_fini>:
 800ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd2:	bf00      	nop
 800ddd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd6:	bc08      	pop	{r3}
 800ddd8:	469e      	mov	lr, r3
 800ddda:	4770      	bx	lr
