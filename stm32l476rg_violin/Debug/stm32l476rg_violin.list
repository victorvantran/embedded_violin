
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08010140  08010140  00020140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010690  08010690  000301c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010690  08010690  00020690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010698  08010698  000301c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010698  08010698  00020698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801069c  0801069c  0002069c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  080106a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fecc  200001c4  08010864  000301c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010090  08010864  00040090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000320d1  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005992  00000000  00000000  000622c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e8  00000000  00000000  00067c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021d0  00000000  00000000  0006a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e44b  00000000  00000000  0006c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e73  00000000  00000000  0009a65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001190f9  00000000  00000000  000c24ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001db5c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a62c  00000000  00000000  001db61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c4 	.word	0x200001c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010124 	.word	0x08010124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c8 	.word	0x200001c8
 80001cc:	08010124 	.word	0x08010124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b96e 	b.w	8000f40 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468c      	mov	ip, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8083 	bne.w	8000d92 <__udivmoddi4+0x116>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d947      	bls.n	8000d22 <__udivmoddi4+0xa6>
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b142      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c98:	f1c2 0020 	rsb	r0, r2, #32
 8000c9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	4097      	lsls	r7, r2
 8000ca4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb4:	fa1f fe87 	uxth.w	lr, r7
 8000cb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 8119 	bcs.w	8000f04 <__udivmoddi4+0x288>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8116 	bls.w	8000f04 <__udivmoddi4+0x288>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	443b      	add	r3, r7
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8105 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f240 8102 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b902      	cbnz	r2, 8000d26 <__udivmoddi4+0xaa>
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d150      	bne.n	8000dd0 <__udivmoddi4+0x154>
 8000d2e:	1bcb      	subs	r3, r1, r7
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	2601      	movs	r6, #1
 8000d3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3e:	0c21      	lsrs	r1, r4, #16
 8000d40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb08 f30c 	mul.w	r3, r8, ip
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0xe2>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f200 80e9 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x10c>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x10a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80d9 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e7bf      	b.n	8000d12 <__udivmoddi4+0x96>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x12e>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80b1 	beq.w	8000efe <__udivmoddi4+0x282>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x1cc>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0x140>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80b8 	bhi.w	8000f2c <__udivmoddi4+0x2b0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0a8      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000dca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd8:	4097      	lsls	r7, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	4330      	orrs	r0, r6
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb06 f108 	mul.w	r1, r6, r8
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x19c>
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e0a:	f080 808d 	bcs.w	8000f28 <__udivmoddi4+0x2ac>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 808a 	bls.w	8000f28 <__udivmoddi4+0x2ac>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	443b      	add	r3, r7
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b281      	uxth	r1, r0
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb00 f308 	mul.w	r3, r0, r8
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x1c4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e36:	d273      	bcs.n	8000f20 <__udivmoddi4+0x2a4>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d971      	bls.n	8000f20 <__udivmoddi4+0x2a4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4439      	add	r1, r7
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e46:	e778      	b.n	8000d3a <__udivmoddi4+0xbe>
 8000e48:	f1c6 0c20 	rsb	ip, r6, #32
 8000e4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e54:	431c      	orrs	r4, r3
 8000e56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e66:	431f      	orrs	r7, r3
 8000e68:	0c3b      	lsrs	r3, r7, #16
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fa1f f884 	uxth.w	r8, r4
 8000e72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	fa02 f206 	lsl.w	r2, r2, r6
 8000e84:	fa00 f306 	lsl.w	r3, r0, r6
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x220>
 8000e8a:	1861      	adds	r1, r4, r1
 8000e8c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e90:	d248      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d946      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4421      	add	r1, r4
 8000e9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ea0:	b2bf      	uxth	r7, r7
 8000ea2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eaa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eae:	fb00 f808 	mul.w	r8, r0, r8
 8000eb2:	45b8      	cmp	r8, r7
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x24a>
 8000eb6:	19e7      	adds	r7, r4, r7
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ebc:	d22e      	bcs.n	8000f1c <__udivmoddi4+0x2a0>
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d92c      	bls.n	8000f1c <__udivmoddi4+0x2a0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4427      	add	r7, r4
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	eba7 0708 	sub.w	r7, r7, r8
 8000ece:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	46c6      	mov	lr, r8
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	d31a      	bcc.n	8000f10 <__udivmoddi4+0x294>
 8000eda:	d017      	beq.n	8000f0c <__udivmoddi4+0x290>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x27a>
 8000ede:	ebb3 020e 	subs.w	r2, r3, lr
 8000ee2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eea:	40f2      	lsrs	r2, r6
 8000eec:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef0:	40f7      	lsrs	r7, r6
 8000ef2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e70b      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fd      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f0c:	4543      	cmp	r3, r8
 8000f0e:	d2e5      	bcs.n	8000edc <__udivmoddi4+0x260>
 8000f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f14:	eb69 0104 	sbc.w	r1, r9, r4
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7df      	b.n	8000edc <__udivmoddi4+0x260>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e7d2      	b.n	8000ec6 <__udivmoddi4+0x24a>
 8000f20:	4660      	mov	r0, ip
 8000f22:	e78d      	b.n	8000e40 <__udivmoddi4+0x1c4>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e7b9      	b.n	8000e9c <__udivmoddi4+0x220>
 8000f28:	4666      	mov	r6, ip
 8000f2a:	e775      	b.n	8000e18 <__udivmoddi4+0x19c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e74a      	b.n	8000dc6 <__udivmoddi4+0x14a>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	4439      	add	r1, r7
 8000f36:	e713      	b.n	8000d60 <__udivmoddi4+0xe4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	e724      	b.n	8000d88 <__udivmoddi4+0x10c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <SELECT+0x18>)
 8000f4e:	f005 f84d 	bl	8005fec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f003 f976 	bl	8004244 <HAL_Delay>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	48000400 	.word	0x48000400

08000f60 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <DESELECT+0x18>)
 8000f6a:	f005 f83f 	bl	8005fec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f003 f968 	bl	8004244 <HAL_Delay>
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	48000400 	.word	0x48000400

08000f7c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f86:	bf00      	nop
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <SPI_TxByte+0x30>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d1f8      	bne.n	8000f88 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f96:	1df9      	adds	r1, r7, #7
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <SPI_TxByte+0x30>)
 8000f9e:	f006 fd5a 	bl	8007a56 <HAL_SPI_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000ce04 	.word	0x2000ce04

08000fb0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fbc:	bf00      	nop
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <SPI_TxBuffer+0x30>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d1f8      	bne.n	8000fbe <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <SPI_TxBuffer+0x30>)
 8000fd4:	f006 fd3f 	bl	8007a56 <HAL_SPI_Transmit>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000ce04 	.word	0x2000ce04

08000fe4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000fea:	23ff      	movs	r3, #255	; 0xff
 8000fec:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fee:	bf00      	nop
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <SPI_RxByte+0x34>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d1f8      	bne.n	8000ff0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000ffe:	1dba      	adds	r2, r7, #6
 8001000:	1df9      	adds	r1, r7, #7
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <SPI_RxByte+0x34>)
 800100a:	f006 fe92 	bl	8007d32 <HAL_SPI_TransmitReceive>

	return data;
 800100e:	79bb      	ldrb	r3, [r7, #6]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000ce04 	.word	0x2000ce04

0800101c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001024:	f7ff ffde 	bl	8000fe4 <SPI_RxByte>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	701a      	strb	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <SD_ReadyWait+0x30>)
 8001040:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001044:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001046:	f7ff ffcd 	bl	8000fe4 <SPI_RxByte>
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2bff      	cmp	r3, #255	; 0xff
 8001052:	d003      	beq.n	800105c <SD_ReadyWait+0x24>
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SD_ReadyWait+0x30>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f4      	bne.n	8001046 <SD_ReadyWait+0xe>

	return res;
 800105c:	79fb      	ldrb	r3, [r7, #7]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20003664 	.word	0x20003664

0800106c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001072:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001076:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001078:	f7ff ff72 	bl	8000f60 <DESELECT>
	for(int i = 0; i < 10; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e005      	b.n	800108e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	f7ff ff7a 	bl	8000f7c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	3301      	adds	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	2b09      	cmp	r3, #9
 8001092:	ddf6      	ble.n	8001082 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001094:	f7ff ff56 	bl	8000f44 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80010ac:	2395      	movs	r3, #149	; 0x95
 80010ae:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80010b0:	463b      	mov	r3, r7
 80010b2:	2106      	movs	r1, #6
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff7b 	bl	8000fb0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80010ba:	e002      	b.n	80010c2 <SD_PowerOn+0x56>
	{
		cnt--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80010c2:	f7ff ff8f 	bl	8000fe4 <SPI_RxByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d002      	beq.n	80010d2 <SD_PowerOn+0x66>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f4      	bne.n	80010bc <SD_PowerOn+0x50>
	}

	DESELECT();
 80010d2:	f7ff ff45 	bl	8000f60 <DESELECT>
	SPI_TxByte(0XFF);
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff50 	bl	8000f7c <SPI_TxByte>

	PowerFlag = 1;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <SD_PowerOn+0x80>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001e1 	.word	0x200001e1

080010f0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <SD_PowerOff+0x14>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	200001e1 	.word	0x200001e1

08001108 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <SD_CheckPower+0x14>)
 800110e:	781b      	ldrb	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200001e1 	.word	0x200001e1

08001120 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <SD_RxDataBlock+0x58>)
 800112c:	22c8      	movs	r2, #200	; 0xc8
 800112e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001130:	f7ff ff58 	bl	8000fe4 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d103      	bne.n	8001146 <SD_RxDataBlock+0x26>
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <SD_RxDataBlock+0x58>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f4      	bne.n	8001130 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2bfe      	cmp	r3, #254	; 0xfe
 800114a:	d001      	beq.n	8001150 <SD_RxDataBlock+0x30>
 800114c:	2300      	movs	r3, #0
 800114e:	e00f      	b.n	8001170 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff60 	bl	800101c <SPI_RxBytePtr>
	} while(len--);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	1e5a      	subs	r2, r3, #1
 8001160:	603a      	str	r2, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f4      	bne.n	8001150 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001166:	f7ff ff3d 	bl	8000fe4 <SPI_RxByte>
	SPI_RxByte();
 800116a:	f7ff ff3b 	bl	8000fe4 <SPI_RxByte>

	return TRUE;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20003666 	.word	0x20003666

0800117c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800118c:	f7ff ff54 	bl	8001038 <SD_ReadyWait>
 8001190:	4603      	mov	r3, r0
 8001192:	2bff      	cmp	r3, #255	; 0xff
 8001194:	d001      	beq.n	800119a <SD_TxDataBlock+0x1e>
 8001196:	2300      	movs	r3, #0
 8001198:	e02f      	b.n	80011fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff feed 	bl	8000f7c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2bfd      	cmp	r3, #253	; 0xfd
 80011a6:	d020      	beq.n	80011ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff feff 	bl	8000fb0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80011b2:	f7ff ff17 	bl	8000fe4 <SPI_RxByte>
		SPI_RxByte();
 80011b6:	f7ff ff15 	bl	8000fe4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80011ba:	e00b      	b.n	80011d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80011bc:	f7ff ff12 	bl	8000fe4 <SPI_RxByte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d006      	beq.n	80011dc <SD_TxDataBlock+0x60>
			i++;
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	3301      	adds	r3, #1
 80011d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	2b40      	cmp	r3, #64	; 0x40
 80011d8:	d9f0      	bls.n	80011bc <SD_TxDataBlock+0x40>
 80011da:	e000      	b.n	80011de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011de:	bf00      	nop
 80011e0:	f7ff ff00 	bl	8000fe4 <SPI_RxByte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0fa      	beq.n	80011e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d101      	bne.n	80011f8 <SD_TxDataBlock+0x7c>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	6039      	str	r1, [r7, #0]
 800120c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800120e:	f7ff ff13 	bl	8001038 <SD_ReadyWait>
 8001212:	4603      	mov	r3, r0
 8001214:	2bff      	cmp	r3, #255	; 0xff
 8001216:	d001      	beq.n	800121c <SD_SendCmd+0x1a>
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	e042      	b.n	80012a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff feac 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	0e1b      	lsrs	r3, r3, #24
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fea6 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fea0 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe9a 	bl	8000f7c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe95 	bl	8000f7c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	d102      	bne.n	800125e <SD_SendCmd+0x5c>
 8001258:	2395      	movs	r3, #149	; 0x95
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e007      	b.n	800126e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b48      	cmp	r3, #72	; 0x48
 8001262:	d102      	bne.n	800126a <SD_SendCmd+0x68>
 8001264:	2387      	movs	r3, #135	; 0x87
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e001      	b.n	800126e <SD_SendCmd+0x6c>
	else crc = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe83 	bl	8000f7c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b4c      	cmp	r3, #76	; 0x4c
 800127a:	d101      	bne.n	8001280 <SD_SendCmd+0x7e>
 800127c:	f7ff feb2 	bl	8000fe4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001280:	230a      	movs	r3, #10
 8001282:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001284:	f7ff feae 	bl	8000fe4 <SPI_RxByte>
 8001288:	4603      	mov	r3, r0
 800128a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800128c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da05      	bge.n	80012a0 <SD_SendCmd+0x9e>
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	3b01      	subs	r3, #1
 8001298:	73bb      	strb	r3, [r7, #14]
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f1      	bne.n	8001284 <SD_SendCmd+0x82>

	return res;
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SD_disk_initialize+0x14>
 80012bc:	2301      	movs	r3, #1
 80012be:	e0d1      	b.n	8001464 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80012c0:	4b6a      	ldr	r3, [pc, #424]	; (800146c <SD_disk_initialize+0x1c0>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <SD_disk_initialize+0x2a>
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <SD_disk_initialize+0x1c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	e0c6      	b.n	8001464 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80012d6:	f7ff fec9 	bl	800106c <SD_PowerOn>

	/* slave select */
	SELECT();
 80012da:	f7ff fe33 	bl	8000f44 <SELECT>

	/* check disk type */
	type = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012e2:	2100      	movs	r1, #0
 80012e4:	2040      	movs	r0, #64	; 0x40
 80012e6:	f7ff ff8c 	bl	8001202 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f040 80a1 	bne.w	8001434 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <SD_disk_initialize+0x1c4>)
 80012f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012fe:	2048      	movs	r0, #72	; 0x48
 8001300:	f7ff ff7f 	bl	8001202 <SD_SendCmd>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d155      	bne.n	80013b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800130a:	2300      	movs	r3, #0
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e00c      	b.n	800132a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001310:	7bfc      	ldrb	r4, [r7, #15]
 8001312:	f7ff fe67 	bl	8000fe4 <SPI_RxByte>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4423      	add	r3, r4
 8001320:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d9ef      	bls.n	8001310 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001330:	7abb      	ldrb	r3, [r7, #10]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d17e      	bne.n	8001434 <SD_disk_initialize+0x188>
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	2baa      	cmp	r3, #170	; 0xaa
 800133a:	d17b      	bne.n	8001434 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800133c:	2100      	movs	r1, #0
 800133e:	2077      	movs	r0, #119	; 0x77
 8001340:	f7ff ff5f 	bl	8001202 <SD_SendCmd>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d807      	bhi.n	800135a <SD_disk_initialize+0xae>
 800134a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800134e:	2069      	movs	r0, #105	; 0x69
 8001350:	f7ff ff57 	bl	8001202 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <SD_disk_initialize+0x1c4>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1ec      	bne.n	800133c <SD_disk_initialize+0x90>
 8001362:	e000      	b.n	8001366 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001364:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <SD_disk_initialize+0x1c4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d062      	beq.n	8001434 <SD_disk_initialize+0x188>
 800136e:	2100      	movs	r1, #0
 8001370:	207a      	movs	r0, #122	; 0x7a
 8001372:	f7ff ff46 	bl	8001202 <SD_SendCmd>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d15b      	bne.n	8001434 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e00c      	b.n	800139c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001382:	7bfc      	ldrb	r4, [r7, #15]
 8001384:	f7ff fe2e 	bl	8000fe4 <SPI_RxByte>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4423      	add	r3, r4
 8001392:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	3301      	adds	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d9ef      	bls.n	8001382 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013a2:	7a3b      	ldrb	r3, [r7, #8]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SD_disk_initialize+0x104>
 80013ac:	230c      	movs	r3, #12
 80013ae:	e000      	b.n	80013b2 <SD_disk_initialize+0x106>
 80013b0:	2304      	movs	r3, #4
 80013b2:	73bb      	strb	r3, [r7, #14]
 80013b4:	e03e      	b.n	8001434 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80013b6:	2100      	movs	r1, #0
 80013b8:	2077      	movs	r0, #119	; 0x77
 80013ba:	f7ff ff22 	bl	8001202 <SD_SendCmd>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d808      	bhi.n	80013d6 <SD_disk_initialize+0x12a>
 80013c4:	2100      	movs	r1, #0
 80013c6:	2069      	movs	r0, #105	; 0x69
 80013c8:	f7ff ff1b 	bl	8001202 <SD_SendCmd>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d801      	bhi.n	80013d6 <SD_disk_initialize+0x12a>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e000      	b.n	80013d8 <SD_disk_initialize+0x12c>
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d10e      	bne.n	80013fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013e0:	2100      	movs	r1, #0
 80013e2:	2077      	movs	r0, #119	; 0x77
 80013e4:	f7ff ff0d 	bl	8001202 <SD_SendCmd>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d80e      	bhi.n	800140c <SD_disk_initialize+0x160>
 80013ee:	2100      	movs	r1, #0
 80013f0:	2069      	movs	r0, #105	; 0x69
 80013f2:	f7ff ff06 	bl	8001202 <SD_SendCmd>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <SD_disk_initialize+0x160>
 80013fc:	e00c      	b.n	8001418 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013fe:	2100      	movs	r1, #0
 8001400:	2041      	movs	r0, #65	; 0x41
 8001402:	f7ff fefe 	bl	8001202 <SD_SendCmd>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <SD_disk_initialize+0x1c4>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e2      	bne.n	80013da <SD_disk_initialize+0x12e>
 8001414:	e000      	b.n	8001418 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001416:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <SD_disk_initialize+0x1c4>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d007      	beq.n	8001430 <SD_disk_initialize+0x184>
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	2050      	movs	r0, #80	; 0x50
 8001426:	f7ff feec 	bl	8001202 <SD_SendCmd>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SD_disk_initialize+0x188>
 8001430:	2300      	movs	r3, #0
 8001432:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <SD_disk_initialize+0x1c8>)
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800143a:	f7ff fd91 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 800143e:	f7ff fdd1 	bl	8000fe4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <SD_disk_initialize+0x1c0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SD_disk_initialize+0x1c0>)
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e001      	b.n	800145e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800145a:	f7ff fe49 	bl	80010f0 <SD_PowerOff>
	}

	return Stat;
 800145e:	4b03      	ldr	r3, [pc, #12]	; (800146c <SD_disk_initialize+0x1c0>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20003666 	.word	0x20003666
 8001474:	200001e0 	.word	0x200001e0

08001478 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SD_disk_status+0x14>
 8001488:	2301      	movs	r3, #1
 800148a:	e002      	b.n	8001492 <SD_disk_status+0x1a>
	return Stat;
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SD_disk_status+0x28>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b2db      	uxtb	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000

080014a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <SD_disk_read+0x1c>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <SD_disk_read+0x20>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e051      	b.n	8001568 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <SD_disk_read+0xcc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SD_disk_read+0x32>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e048      	b.n	8001568 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SD_disk_read+0xd0>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <SD_disk_read+0x44>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80014e8:	f7ff fd2c 	bl	8000f44 <SELECT>

	if (count == 1)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d111      	bne.n	8001516 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2051      	movs	r0, #81	; 0x51
 80014f6:	f7ff fe84 	bl	8001202 <SD_SendCmd>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d129      	bne.n	8001554 <SD_disk_read+0xb0>
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f7ff fe0b 	bl	8001120 <SD_RxDataBlock>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d021      	beq.n	8001554 <SD_disk_read+0xb0>
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	e01e      	b.n	8001554 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	2052      	movs	r0, #82	; 0x52
 800151a:	f7ff fe72 	bl	8001202 <SD_SendCmd>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d117      	bne.n	8001554 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f7ff fdf9 	bl	8001120 <SD_RxDataBlock>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00a      	beq.n	800154a <SD_disk_read+0xa6>
				buff += 512;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800153a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ed      	bne.n	8001524 <SD_disk_read+0x80>
 8001548:	e000      	b.n	800154c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800154a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800154c:	2100      	movs	r1, #0
 800154e:	204c      	movs	r0, #76	; 0x4c
 8001550:	f7ff fe57 	bl	8001202 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001554:	f7ff fd04 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 8001558:	f7ff fd44 	bl	8000fe4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf14      	ite	ne
 8001562:	2301      	movne	r3, #1
 8001564:	2300      	moveq	r3, #0
 8001566:	b2db      	uxtb	r3, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000000 	.word	0x20000000
 8001574:	200001e0 	.word	0x200001e0

08001578 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <SD_disk_write+0x1c>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <SD_disk_write+0x20>
 8001594:	2304      	movs	r3, #4
 8001596:	e06b      	b.n	8001670 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001598:	4b37      	ldr	r3, [pc, #220]	; (8001678 <SD_disk_write+0x100>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SD_disk_write+0x32>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e062      	b.n	8001670 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015aa:	4b33      	ldr	r3, [pc, #204]	; (8001678 <SD_disk_write+0x100>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SD_disk_write+0x44>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e059      	b.n	8001670 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80015bc:	4b2f      	ldr	r3, [pc, #188]	; (800167c <SD_disk_write+0x104>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <SD_disk_write+0x56>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80015ce:	f7ff fcb9 	bl	8000f44 <SELECT>

	if (count == 1)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d110      	bne.n	80015fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	2058      	movs	r0, #88	; 0x58
 80015dc:	f7ff fe11 	bl	8001202 <SD_SendCmd>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13a      	bne.n	800165c <SD_disk_write+0xe4>
 80015e6:	21fe      	movs	r1, #254	; 0xfe
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff fdc7 	bl	800117c <SD_TxDataBlock>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d033      	beq.n	800165c <SD_disk_write+0xe4>
			count = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	e030      	b.n	800165c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <SD_disk_write+0x104>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001606:	2100      	movs	r1, #0
 8001608:	2077      	movs	r0, #119	; 0x77
 800160a:	f7ff fdfa 	bl	8001202 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	2057      	movs	r0, #87	; 0x57
 8001612:	f7ff fdf6 	bl	8001202 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	2059      	movs	r0, #89	; 0x59
 800161a:	f7ff fdf2 	bl	8001202 <SD_SendCmd>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d11b      	bne.n	800165c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001624:	21fc      	movs	r1, #252	; 0xfc
 8001626:	68b8      	ldr	r0, [r7, #8]
 8001628:	f7ff fda8 	bl	800117c <SD_TxDataBlock>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <SD_disk_write+0xd0>
				buff += 512;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001638:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <SD_disk_write+0xac>
 8001646:	e000      	b.n	800164a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001648:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800164a:	21fd      	movs	r1, #253	; 0xfd
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fd95 	bl	800117c <SD_TxDataBlock>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <SD_disk_write+0xe4>
			{
				count = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800165c:	f7ff fc80 	bl	8000f60 <DESELECT>
	SPI_RxByte();
 8001660:	f7ff fcc0 	bl	8000fe4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	bf14      	ite	ne
 800166a:	2301      	movne	r3, #1
 800166c:	2300      	moveq	r3, #0
 800166e:	b2db      	uxtb	r3, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	200001e0 	.word	0x200001e0

08001680 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	603a      	str	r2, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	460b      	mov	r3, r1
 800168e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SD_disk_ioctl+0x1e>
 800169a:	2304      	movs	r3, #4
 800169c:	e115      	b.n	80018ca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d124      	bne.n	80016f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d012      	beq.n	80016d8 <SD_disk_ioctl+0x58>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	dc1a      	bgt.n	80016ec <SD_disk_ioctl+0x6c>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <SD_disk_ioctl+0x40>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d006      	beq.n	80016cc <SD_disk_ioctl+0x4c>
 80016be:	e015      	b.n	80016ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80016c0:	f7ff fd16 	bl	80010f0 <SD_PowerOff>
			res = RES_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ca:	e0fc      	b.n	80018c6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80016cc:	f7ff fcce 	bl	800106c <SD_PowerOn>
			res = RES_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016d6:	e0f6      	b.n	80018c6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	1c5c      	adds	r4, r3, #1
 80016dc:	f7ff fd14 	bl	8001108 <SD_CheckPower>
 80016e0:	4603      	mov	r3, r0
 80016e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ea:	e0ec      	b.n	80018c6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016ec:	2304      	movs	r3, #4
 80016ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f2:	e0e8      	b.n	80018c6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <SD_disk_ioctl+0x254>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x86>
 8001702:	2303      	movs	r3, #3
 8001704:	e0e1      	b.n	80018ca <SD_disk_ioctl+0x24a>

		SELECT();
 8001706:	f7ff fc1d 	bl	8000f44 <SELECT>

		switch (ctrl)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	2b0d      	cmp	r3, #13
 800170e:	f200 80cb 	bhi.w	80018a8 <SD_disk_ioctl+0x228>
 8001712:	a201      	add	r2, pc, #4	; (adr r2, 8001718 <SD_disk_ioctl+0x98>)
 8001714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001718:	08001813 	.word	0x08001813
 800171c:	08001751 	.word	0x08001751
 8001720:	08001803 	.word	0x08001803
 8001724:	080018a9 	.word	0x080018a9
 8001728:	080018a9 	.word	0x080018a9
 800172c:	080018a9 	.word	0x080018a9
 8001730:	080018a9 	.word	0x080018a9
 8001734:	080018a9 	.word	0x080018a9
 8001738:	080018a9 	.word	0x080018a9
 800173c:	080018a9 	.word	0x080018a9
 8001740:	080018a9 	.word	0x080018a9
 8001744:	08001825 	.word	0x08001825
 8001748:	08001849 	.word	0x08001849
 800174c:	0800186d 	.word	0x0800186d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001750:	2100      	movs	r1, #0
 8001752:	2049      	movs	r0, #73	; 0x49
 8001754:	f7ff fd55 	bl	8001202 <SD_SendCmd>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80a8 	bne.w	80018b0 <SD_disk_ioctl+0x230>
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2110      	movs	r1, #16
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fcda 	bl	8001120 <SD_RxDataBlock>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 809e 	beq.w	80018b0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10e      	bne.n	800179c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	b29a      	uxth	r2, r3
 8001782:	7d3b      	ldrb	r3, [r7, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001792:	8bfb      	ldrh	r3, [r7, #30]
 8001794:	029a      	lsls	r2, r3, #10
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	e02e      	b.n	80017fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800179c:	7c7b      	ldrb	r3, [r7, #17]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7dbb      	ldrb	r3, [r7, #22]
 80017a6:	09db      	lsrs	r3, r3, #7
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	7d7b      	ldrb	r3, [r7, #21]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0306 	and.w	r3, r3, #6
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3302      	adds	r3, #2
 80017c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80017c4:	7d3b      	ldrb	r3, [r7, #20]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	7cbb      	ldrb	r3, [r7, #18]
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017ec:	8bfa      	ldrh	r2, [r7, #30]
 80017ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f2:	3b09      	subs	r3, #9
 80017f4:	409a      	lsls	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001800:	e056      	b.n	80018b0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001808:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001810:	e055      	b.n	80018be <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001812:	f7ff fc11 	bl	8001038 <SD_ReadyWait>
 8001816:	4603      	mov	r3, r0
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d14b      	bne.n	80018b4 <SD_disk_ioctl+0x234>
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001822:	e047      	b.n	80018b4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001824:	2100      	movs	r1, #0
 8001826:	2049      	movs	r0, #73	; 0x49
 8001828:	f7ff fceb 	bl	8001202 <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d142      	bne.n	80018b8 <SD_disk_ioctl+0x238>
 8001832:	2110      	movs	r1, #16
 8001834:	6a38      	ldr	r0, [r7, #32]
 8001836:	f7ff fc73 	bl	8001120 <SD_RxDataBlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03b      	beq.n	80018b8 <SD_disk_ioctl+0x238>
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001846:	e037      	b.n	80018b8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001848:	2100      	movs	r1, #0
 800184a:	204a      	movs	r0, #74	; 0x4a
 800184c:	f7ff fcd9 	bl	8001202 <SD_SendCmd>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d132      	bne.n	80018bc <SD_disk_ioctl+0x23c>
 8001856:	2110      	movs	r1, #16
 8001858:	6a38      	ldr	r0, [r7, #32]
 800185a:	f7ff fc61 	bl	8001120 <SD_RxDataBlock>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d02b      	beq.n	80018bc <SD_disk_ioctl+0x23c>
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800186a:	e027      	b.n	80018bc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800186c:	2100      	movs	r1, #0
 800186e:	207a      	movs	r0, #122	; 0x7a
 8001870:	f7ff fcc7 	bl	8001202 <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001880:	e00b      	b.n	800189a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001882:	6a3c      	ldr	r4, [r7, #32]
 8001884:	1c63      	adds	r3, r4, #1
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	f7ff fbac 	bl	8000fe4 <SPI_RxByte>
 800188c:	4603      	mov	r3, r0
 800188e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001894:	3301      	adds	r3, #1
 8001896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800189a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d9ef      	bls.n	8001882 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80018a8:	2304      	movs	r3, #4
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ae:	e006      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b0:	bf00      	nop
 80018b2:	e004      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b4:	bf00      	nop
 80018b6:	e002      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018b8:	bf00      	nop
 80018ba:	e000      	b.n	80018be <SD_disk_ioctl+0x23e>
			break;
 80018bc:	bf00      	nop
		}

		DESELECT();
 80018be:	f7ff fb4f 	bl	8000f60 <DESELECT>
		SPI_RxByte();
 80018c2:	f7ff fb8f 	bl	8000fe4 <SPI_RxByte>
	}

	return res;
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	372c      	adds	r7, #44	; 0x2c
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000

080018d8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 80018e0:	1d39      	adds	r1, r7, #4
 80018e2:	2364      	movs	r3, #100	; 0x64
 80018e4:	2201      	movs	r2, #1
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <__io_putchar+0x20>)
 80018e8:	f008 fc22 	bl	800a130 <HAL_UART_Transmit>
	return ch;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000ce68 	.word	0x2000ce68

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001902:	f002 fc5f 	bl	80041c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001906:	f000 f877 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190a:	f000 fd9f 	bl	800244c <MX_GPIO_Init>
  MX_DMA_Init();
 800190e:	f000 fd53 	bl	80023b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001912:	f000 fd21 	bl	8002358 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001916:	f000 f8f7 	bl	8001b08 <MX_ADC1_Init>
  MX_TIM1_Init();
 800191a:	f000 fa19 	bl	8001d50 <MX_TIM1_Init>
  MX_FATFS_Init();
 800191e:	f009 f88d 	bl	800aa3c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001922:	f000 f9d7 	bl	8001cd4 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001926:	f000 fba3 	bl	8002070 <MX_TIM15_Init>
  MX_TIM16_Init();
 800192a:	f000 fc25 	bl	8002178 <MX_TIM16_Init>
  MX_TIM17_Init();
 800192e:	f000 fc9b 	bl	8002268 <MX_TIM17_Init>
  MX_I2C1_Init();
 8001932:	f000 f98f 	bl	8001c54 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001936:	f000 fa9b 	bl	8001e70 <MX_TIM3_Init>
  MX_TIM8_Init();
 800193a:	f000 fb09 	bl	8001f50 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <main+0xac>)
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <main+0xb0>)
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <main+0xb4>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <main+0xb8>)
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <main+0xbc>)
 800194e:	491b      	ldr	r1, [pc, #108]	; (80019bc <main+0xc0>)
 8001950:	481b      	ldr	r0, [pc, #108]	; (80019c0 <main+0xc4>)
 8001952:	f002 fa03 	bl	8003d5c <WS2812B_vInit>

	//[!] Care for HAL_ADC_START_DMA sampling too fast due to small array for DMA (ex: 4 instead of 400. Reduce sampling time of ADC if such case or filter more samples)
  HAL_ADC_Start_DMA(&hadc1, adcValue, ADC_CHANNEL_COUNT);
 8001956:	2204      	movs	r2, #4
 8001958:	491a      	ldr	r1, [pc, #104]	; (80019c4 <main+0xc8>)
 800195a:	481b      	ldr	r0, [pc, #108]	; (80019c8 <main+0xcc>)
 800195c:	f002 ffc2 	bl	80048e4 <HAL_ADC_Start_DMA>
  //HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001960:	f009 f974 	bl	800ac4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <main+0xd0>)
 8001966:	2100      	movs	r1, #0
 8001968:	4819      	ldr	r0, [pc, #100]	; (80019d0 <main+0xd4>)
 800196a:	f009 f9b9 	bl	800ace0 <osThreadNew>
 800196e:	4603      	mov	r3, r0
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <main+0xd8>)
 8001972:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8001974:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <main+0xdc>)
 8001976:	2100      	movs	r1, #0
 8001978:	4818      	ldr	r0, [pc, #96]	; (80019dc <main+0xe0>)
 800197a:	f009 f9b1 	bl	800ace0 <osThreadNew>
 800197e:	4603      	mov	r3, r0
 8001980:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <main+0xe4>)
 8001982:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <main+0xe8>)
 8001986:	2100      	movs	r1, #0
 8001988:	4817      	ldr	r0, [pc, #92]	; (80019e8 <main+0xec>)
 800198a:	f009 f9a9 	bl	800ace0 <osThreadNew>
 800198e:	4603      	mov	r3, r0
 8001990:	4a16      	ldr	r2, [pc, #88]	; (80019ec <main+0xf0>)
 8001992:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8001994:	4816      	ldr	r0, [pc, #88]	; (80019f0 <main+0xf4>)
 8001996:	f009 fa7d 	bl	800ae94 <osEventFlagsNew>
 800199a:	4603      	mov	r3, r0
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <main+0xf8>)
 800199e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019a0:	f009 f978 	bl	800ac94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <main+0xa8>
 80019a6:	bf00      	nop
 80019a8:	2000366c 	.word	0x2000366c
 80019ac:	2000cdb4 	.word	0x2000cdb4
 80019b0:	20004ad0 	.word	0x20004ad0
 80019b4:	20004c78 	.word	0x20004c78
 80019b8:	200036b8 	.word	0x200036b8
 80019bc:	20004b18 	.word	0x20004b18
 80019c0:	200047e0 	.word	0x200047e0
 80019c4:	2000cef0 	.word	0x2000cef0
 80019c8:	20004b64 	.word	0x20004b64
 80019cc:	0801034c 	.word	0x0801034c
 80019d0:	08002561 	.word	0x08002561
 80019d4:	20004bc8 	.word	0x20004bc8
 80019d8:	08010370 	.word	0x08010370
 80019dc:	080026a9 	.word	0x080026a9
 80019e0:	200036b4 	.word	0x200036b4
 80019e4:	08010394 	.word	0x08010394
 80019e8:	0800270d 	.word	0x0800270d
 80019ec:	2000cdfc 	.word	0x2000cdfc
 80019f0:	080103b8 	.word	0x080103b8
 80019f4:	20003704 	.word	0x20003704

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0b8      	sub	sp, #224	; 0xe0
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a02:	2244      	movs	r2, #68	; 0x44
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00c f990 	bl	800dd2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2288      	movs	r2, #136	; 0x88
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00c f982 	bl	800dd2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a48:	230a      	movs	r3, #10
 8001a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 fc7b 	bl	8006360 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a70:	f000 fe80 	bl	8002774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a96:	2104      	movs	r1, #4
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 f847 	bl	8006b2c <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001aa4:	f000 fe66 	bl	8002774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001aa8:	f244 0342 	movw	r3, #16450	; 0x4042
 8001aac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ab6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001aba:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001abc:	2303      	movs	r3, #3
 8001abe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001acc:	2302      	movs	r3, #2
 8001ace:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ad8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ada:	463b      	mov	r3, r7
 8001adc:	4618      	mov	r0, r3
 8001ade:	f005 fa5b 	bl	8006f98 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001ae8:	f000 fe44 	bl	8002774 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001af0:	f004 fbe0 	bl	80062b4 <HAL_PWREx_ControlVoltageScaling>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x106>
  {
    Error_Handler();
 8001afa:	f000 fe3b 	bl	8002774 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	37e0      	adds	r7, #224	; 0xe0
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b2c:	4a44      	ldr	r2, [pc, #272]	; (8001c40 <MX_ADC1_Init+0x138>)
 8001b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b60:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001b82:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8a:	482c      	ldr	r0, [pc, #176]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001b8c:	f002 fd54 	bl	8004638 <HAL_ADC_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001b96:	f000 fded 	bl	8002774 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4825      	ldr	r0, [pc, #148]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001ba6:	f003 fc7b 	bl	80054a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bb0:	f000 fde0 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <MX_ADC1_Init+0x13c>)
 8001bb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bc0:	237f      	movs	r3, #127	; 0x7f
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481a      	ldr	r0, [pc, #104]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001bd2:	f002 ff59 	bl	8004a88 <HAL_ADC_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001bdc:	f000 fdca 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_ADC1_Init+0x140>)
 8001be2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001be4:	230c      	movs	r3, #12
 8001be6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4813      	ldr	r0, [pc, #76]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001bee:	f002 ff4b 	bl	8004a88 <HAL_ADC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001bf8:	f000 fdbc 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_ADC1_Init+0x144>)
 8001bfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c00:	2312      	movs	r3, #18
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001c0a:	f002 ff3d 	bl	8004a88 <HAL_ADC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001c14:	f000 fdae 	bl	8002774 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <MX_ADC1_Init+0x148>)
 8001c1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001c1c:	2318      	movs	r3, #24
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_ADC1_Init+0x134>)
 8001c26:	f002 ff2f 	bl	8004a88 <HAL_ADC_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001c30:	f000 fda0 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20004b64 	.word	0x20004b64
 8001c40:	50040000 	.word	0x50040000
 8001c44:	04300002 	.word	0x04300002
 8001c48:	08600004 	.word	0x08600004
 8001c4c:	0c900008 	.word	0x0c900008
 8001c50:	10c00010 	.word	0x10c00010

08001c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <MX_I2C1_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <MX_I2C1_Init+0x7c>)
 8001c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c8e:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001c90:	f004 f9dc 	bl	800604c <HAL_I2C_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c9a:	f000 fd6b 	bl	8002774 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001ca2:	f004 fa62 	bl	800616a <HAL_I2CEx_ConfigAnalogFilter>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001cac:	f000 fd62 	bl	8002774 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_I2C1_Init+0x74>)
 8001cb4:	f004 faa4 	bl	8006200 <HAL_I2CEx_ConfigDigitalFilter>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cbe:	f000 fd59 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20004744 	.word	0x20004744
 8001ccc:	40005400 	.word	0x40005400
 8001cd0:	10909cec 	.word	0x10909cec

08001cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_SPI1_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d22:	2207      	movs	r2, #7
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d2e:	2208      	movs	r2, #8
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_SPI1_Init+0x74>)
 8001d34:	f005 fdec 	bl	8007910 <HAL_SPI_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 fd19 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000ce04 	.word	0x2000ce04
 8001d4c:	40013000 	.word	0x40013000

08001d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b096      	sub	sp, #88	; 0x58
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	222c      	movs	r2, #44	; 0x2c
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00b ffd5 	bl	800dd2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d84:	4a39      	ldr	r2, [pc, #228]	; (8001e6c <MX_TIM1_Init+0x11c>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dae:	482e      	ldr	r0, [pc, #184]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001db0:	f006 fbfa 	bl	80085a8 <HAL_TIM_PWM_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 fcdb 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4825      	ldr	r0, [pc, #148]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001dd2:	f008 f83b 	bl	8009e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ddc:	f000 fcca 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de0:	2360      	movs	r3, #96	; 0x60
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001e06:	f007 fa77 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e10:	f000 fcb0 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	4619      	mov	r1, r3
 8001e48:	4807      	ldr	r0, [pc, #28]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001e4a:	f008 f887 	bl	8009f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e54:	f000 fc8e 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <MX_TIM1_Init+0x118>)
 8001e5a:	f001 fc6d 	bl	8003738 <HAL_TIM_MspPostInit>

}
 8001e5e:	bf00      	nop
 8001e60:	3758      	adds	r7, #88	; 0x58
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000cd64 	.word	0x2000cd64
 8001e6c:	40012c00 	.word	0x40012c00

08001e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e82:	463b      	mov	r3, r7
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	615a      	str	r2, [r3, #20]
 8001e92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001e96:	4a2d      	ldr	r2, [pc, #180]	; (8001f4c <MX_TIM3_Init+0xdc>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eba:	4823      	ldr	r0, [pc, #140]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001ebc:	f006 fb74 	bl	80085a8 <HAL_TIM_PWM_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001ec6:	f000 fc55 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481b      	ldr	r0, [pc, #108]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001eda:	f007 ffb7 	bl	8009e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ee4:	f000 fc46 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee8:	2360      	movs	r3, #96	; 0x60
 8001eea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	4812      	ldr	r0, [pc, #72]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f00:	f007 f9fa 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f0a:	f000 fc33 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2208      	movs	r2, #8
 8001f12:	4619      	mov	r1, r3
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f16:	f007 f9ef 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f20:	f000 fc28 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	220c      	movs	r2, #12
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f2c:	f007 f9e4 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f36:	f000 fc1d 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM3_Init+0xd8>)
 8001f3c:	f001 fbfc 	bl	8003738 <HAL_TIM_MspPostInit>

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20004b18 	.word	0x20004b18
 8001f4c:	40000400 	.word	0x40000400

08001f50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b096      	sub	sp, #88	; 0x58
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	615a      	str	r2, [r3, #20]
 8001f74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	222c      	movs	r2, #44	; 0x2c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00b fed5 	bl	800dd2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f84:	4a39      	ldr	r2, [pc, #228]	; (800206c <MX_TIM8_Init+0x11c>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <MX_TIM8_Init+0x118>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <MX_TIM8_Init+0x118>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <MX_TIM8_Init+0x118>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fae:	482e      	ldr	r0, [pc, #184]	; (8002068 <MX_TIM8_Init+0x118>)
 8001fb0:	f006 fafa 	bl	80085a8 <HAL_TIM_PWM_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001fba:	f000 fbdb 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4825      	ldr	r0, [pc, #148]	; (8002068 <MX_TIM8_Init+0x118>)
 8001fd2:	f007 ff3b 	bl	8009e4c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001fdc:	f000 fbca 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002000:	2204      	movs	r2, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4818      	ldr	r0, [pc, #96]	; (8002068 <MX_TIM8_Init+0x118>)
 8002006:	f007 f977 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002010:	f000 fbb0 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM8_Init+0x118>)
 800204a:	f007 ff87 	bl	8009f5c <HAL_TIMEx_ConfigBreakDeadTime>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002054:	f000 fb8e 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM8_Init+0x118>)
 800205a:	f001 fb6d 	bl	8003738 <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3758      	adds	r7, #88	; 0x58
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200036b8 	.word	0x200036b8
 800206c:	40013400 	.word	0x40013400

08002070 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b096      	sub	sp, #88	; 0x58
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	222c      	movs	r2, #44	; 0x2c
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f00b fe45 	bl	800dd2c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <MX_TIM15_Init+0x100>)
 80020a4:	4a33      	ldr	r2, [pc, #204]	; (8002174 <MX_TIM15_Init+0x104>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <MX_TIM15_Init+0x100>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <MX_TIM15_Init+0x100>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <MX_TIM15_Init+0x100>)
 80020b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <MX_TIM15_Init+0x100>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <MX_TIM15_Init+0x100>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <MX_TIM15_Init+0x100>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80020ce:	4828      	ldr	r0, [pc, #160]	; (8002170 <MX_TIM15_Init+0x100>)
 80020d0:	f006 fa6a 	bl	80085a8 <HAL_TIM_PWM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80020da:	f000 fb4b 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ea:	4619      	mov	r1, r3
 80020ec:	4820      	ldr	r0, [pc, #128]	; (8002170 <MX_TIM15_Init+0x100>)
 80020ee:	f007 fead 	bl	8009e4c <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80020f8:	f000 fb3c 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fc:	2360      	movs	r3, #96	; 0x60
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002108:	2300      	movs	r3, #0
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <MX_TIM15_Init+0x100>)
 8002122:	f007 f8e9 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800212c:	f000 fb22 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002148:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <MX_TIM15_Init+0x100>)
 8002154:	f007 ff02 	bl	8009f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800215e:	f000 fb09 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <MX_TIM15_Init+0x100>)
 8002164:	f001 fae8 	bl	8003738 <HAL_TIM_MspPostInit>

}
 8002168:	bf00      	nop
 800216a:	3758      	adds	r7, #88	; 0x58
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20004790 	.word	0x20004790
 8002174:	40014000 	.word	0x40014000

08002178 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b092      	sub	sp, #72	; 0x48
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800217e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	615a      	str	r2, [r3, #20]
 8002190:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002192:	463b      	mov	r3, r7
 8002194:	222c      	movs	r2, #44	; 0x2c
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f00b fdc7 	bl	800dd2c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <MX_TIM16_Init+0xec>)
 80021a2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021a6:	2207      	movs	r2, #7
 80021a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80021b0:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021ca:	4825      	ldr	r0, [pc, #148]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021cc:	f006 f924 	bl	8008418 <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80021d6:	f000 facd 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80021da:	4821      	ldr	r0, [pc, #132]	; (8002260 <MX_TIM16_Init+0xe8>)
 80021dc:	f006 f9e4 	bl	80085a8 <HAL_TIM_PWM_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80021e6:	f000 fac5 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ea:	2360      	movs	r3, #96	; 0x60
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002206:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_TIM16_Init+0xe8>)
 8002210:	f007 f872 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800221a:	f000 faab 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM16_Init+0xe8>)
 8002242:	f007 fe8b 	bl	8009f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800224c:	f000 fa92 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM16_Init+0xe8>)
 8002252:	f001 fa71 	bl	8003738 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3748      	adds	r7, #72	; 0x48
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000df30 	.word	0x2000df30
 8002264:	40014400 	.word	0x40014400

08002268 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b092      	sub	sp, #72	; 0x48
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800226e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
 800227e:	615a      	str	r2, [r3, #20]
 8002280:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	222c      	movs	r2, #44	; 0x2c
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f00b fd4f 	bl	800dd2c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <MX_TIM17_Init+0xec>)
 8002292:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002296:	2207      	movs	r2, #7
 8002298:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <MX_TIM17_Init+0xe8>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80022ba:	4825      	ldr	r0, [pc, #148]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022bc:	f006 f8ac 	bl	8008418 <HAL_TIM_Base_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80022c6:	f000 fa55 	bl	8002774 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80022ca:	4821      	ldr	r0, [pc, #132]	; (8002350 <MX_TIM17_Init+0xe8>)
 80022cc:	f006 f96c 	bl	80085a8 <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80022d6:	f000 fa4d 	bl	8002774 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	; 0x60
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e6:	2300      	movs	r3, #0
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fa:	2200      	movs	r2, #0
 80022fc:	4619      	mov	r1, r3
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002300:	f006 fffa 	bl	80092f8 <HAL_TIM_PWM_ConfigChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800230a:	f000 fa33 	bl	8002774 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800232c:	463b      	mov	r3, r7
 800232e:	4619      	mov	r1, r3
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002332:	f007 fe13 	bl	8009f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 800233c:	f000 fa1a 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <MX_TIM17_Init+0xe8>)
 8002342:	f001 f9f9 	bl	8003738 <HAL_TIM_MspPostInit>

}
 8002346:	bf00      	nop
 8002348:	3748      	adds	r7, #72	; 0x48
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20004a84 	.word	0x20004a84
 8002354:	40014800 	.word	0x40014800

08002358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <MX_USART2_UART_Init+0x5c>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 8002396:	2200      	movs	r2, #0
 8002398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_USART2_UART_Init+0x58>)
 800239c:	f007 fe7a 	bl	800a094 <HAL_UART_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023a6:	f000 f9e5 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000ce68 	.word	0x2000ce68
 80023b4:	40004400 	.word	0x40004400

080023b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <MX_DMA_Init+0x90>)
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <MX_DMA_Init+0x90>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6493      	str	r3, [r2, #72]	; 0x48
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <MX_DMA_Init+0x90>)
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <MX_DMA_Init+0x90>)
 80023d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <MX_DMA_Init+0x90>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6493      	str	r3, [r2, #72]	; 0x48
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <MX_DMA_Init+0x90>)
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2105      	movs	r1, #5
 80023f2:	200b      	movs	r0, #11
 80023f4:	f003 f9e0 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023f8:	200b      	movs	r0, #11
 80023fa:	f003 f9f9 	bl	80057f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2105      	movs	r1, #5
 8002402:	200c      	movs	r0, #12
 8002404:	f003 f9d8 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002408:	200c      	movs	r0, #12
 800240a:	f003 f9f1 	bl	80057f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2105      	movs	r1, #5
 8002412:	200d      	movs	r0, #13
 8002414:	f003 f9d0 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002418:	200d      	movs	r0, #13
 800241a:	f003 f9e9 	bl	80057f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2105      	movs	r1, #5
 8002422:	2010      	movs	r0, #16
 8002424:	f003 f9c8 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002428:	2010      	movs	r0, #16
 800242a:	f003 f9e1 	bl	80057f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2105      	movs	r1, #5
 8002432:	2045      	movs	r0, #69	; 0x45
 8002434:	f003 f9c0 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8002438:	2045      	movs	r0, #69	; 0x45
 800243a:	f003 f9d9 	bl	80057f0 <HAL_NVIC_EnableIRQ>

}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <MX_GPIO_Init+0xe0>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	4a31      	ldr	r2, [pc, #196]	; (800252c <MX_GPIO_Init+0xe0>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246e:	4b2f      	ldr	r3, [pc, #188]	; (800252c <MX_GPIO_Init+0xe0>)
 8002470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <MX_GPIO_Init+0xe0>)
 800247c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <MX_GPIO_Init+0xe0>)
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <MX_GPIO_Init+0xe0>)
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <MX_GPIO_Init+0xe0>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a25      	ldr	r2, [pc, #148]	; (800252c <MX_GPIO_Init+0xe0>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <MX_GPIO_Init+0xe0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <MX_GPIO_Init+0xe0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <MX_GPIO_Init+0xe0>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MX_GPIO_Init+0xe0>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	481a      	ldr	r0, [pc, #104]	; (8002530 <MX_GPIO_Init+0xe4>)
 80024c8:	f003 fd90 	bl	8005fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024cc:	2303      	movs	r3, #3
 80024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <MX_GPIO_Init+0xe8>)
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e2:	f003 fbd9 	bl	8005c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024e6:	2340      	movs	r3, #64	; 0x40
 80024e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024f2:	2301      	movs	r3, #1
 80024f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <MX_GPIO_Init+0xe4>)
 80024fe:	f003 fbcb 	bl	8005c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2105      	movs	r1, #5
 8002506:	2006      	movs	r0, #6
 8002508:	f003 f956 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800250c:	2006      	movs	r0, #6
 800250e:	f003 f96f 	bl	80057f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2105      	movs	r1, #5
 8002516:	2007      	movs	r0, #7
 8002518:	f003 f94e 	bl	80057b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800251c:	2007      	movs	r0, #7
 800251e:	f003 f967 	bl	80057f0 <HAL_NVIC_EnableIRQ>

}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400
 8002534:	10210000 	.word	0x10210000

08002538 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	80fb      	strh	r3, [r7, #6]
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002542:	2006      	movs	r0, #6
 8002544:	f003 f962 	bl	800580c <HAL_NVIC_DisableIRQ>

	if (GPIO_Pin == GPIO_PIN_0)
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		printf(".\r\n");
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <HAL_GPIO_EXTI_Callback+0x24>)
 8002550:	f00b fc7a 	bl	800de48 <puts>
	}
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	0801018c 	.word	0x0801018c

08002560 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af02      	add	r7, sp, #8
 8002566:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8002568:	484d      	ldr	r0, [pc, #308]	; (80026a0 <StartMainMenuTask+0x140>)
 800256a:	f00b fc6d 	bl	800de48 <puts>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800256e:	2006      	movs	r0, #6
 8002570:	f003 f93e 	bl	80057f0 <HAL_NVIC_EnableIRQ>





  	osDelay(250);
 8002574:	20fa      	movs	r0, #250	; 0xfa
 8002576:	f008 fc45 	bl	800ae04 <osDelay>
    //WS2812B_vSetLED(&xWS2812B, 1, 0, 255, 0);
    //WS2812B_vSetLED(&xWS2812B, 2, 0, 0, 255);
    //WS2812B_vSetLED(&xWS2812B, 3, 0, 0, 255);


    WS2812B_vSetLED(&xWS2812B, 0, 0, 0, 255);
 800257a:	23ff      	movs	r3, #255	; 0xff
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	4847      	ldr	r0, [pc, #284]	; (80026a4 <StartMainMenuTask+0x144>)
 8002586:	f001 fc12 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 1, 0, 255, 0);
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	23ff      	movs	r3, #255	; 0xff
 8002590:	2200      	movs	r2, #0
 8002592:	2101      	movs	r1, #1
 8002594:	4843      	ldr	r0, [pc, #268]	; (80026a4 <StartMainMenuTask+0x144>)
 8002596:	f001 fc0a 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 2, 255, 0, 0);
 800259a:	2300      	movs	r3, #0
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2300      	movs	r3, #0
 80025a0:	22ff      	movs	r2, #255	; 0xff
 80025a2:	2102      	movs	r1, #2
 80025a4:	483f      	ldr	r0, [pc, #252]	; (80026a4 <StartMainMenuTask+0x144>)
 80025a6:	f001 fc02 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 3, 255, 0, 0);
 80025aa:	2300      	movs	r3, #0
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2300      	movs	r3, #0
 80025b0:	22ff      	movs	r2, #255	; 0xff
 80025b2:	2103      	movs	r1, #3
 80025b4:	483b      	ldr	r0, [pc, #236]	; (80026a4 <StartMainMenuTask+0x144>)
 80025b6:	f001 fbfa 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 4, 255, 0, 0);
 80025ba:	2300      	movs	r3, #0
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2300      	movs	r3, #0
 80025c0:	22ff      	movs	r2, #255	; 0xff
 80025c2:	2104      	movs	r1, #4
 80025c4:	4837      	ldr	r0, [pc, #220]	; (80026a4 <StartMainMenuTask+0x144>)
 80025c6:	f001 fbf2 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 5, 255, 0, 0);
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2300      	movs	r3, #0
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	2105      	movs	r1, #5
 80025d4:	4833      	ldr	r0, [pc, #204]	; (80026a4 <StartMainMenuTask+0x144>)
 80025d6:	f001 fbea 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 6, 255, 0, 0);
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	22ff      	movs	r2, #255	; 0xff
 80025e2:	2106      	movs	r1, #6
 80025e4:	482f      	ldr	r0, [pc, #188]	; (80026a4 <StartMainMenuTask+0x144>)
 80025e6:	f001 fbe2 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 7, 255, 0, 0);
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2300      	movs	r3, #0
 80025f0:	22ff      	movs	r2, #255	; 0xff
 80025f2:	2107      	movs	r1, #7
 80025f4:	482b      	ldr	r0, [pc, #172]	; (80026a4 <StartMainMenuTask+0x144>)
 80025f6:	f001 fbda 	bl	8003dae <WS2812B_vSetLED>


    WS2812B_vSetBrightness(&xWS2812B, 1);
 80025fa:	2101      	movs	r1, #1
 80025fc:	4829      	ldr	r0, [pc, #164]	; (80026a4 <StartMainMenuTask+0x144>)
 80025fe:	f001 fc63 	bl	8003ec8 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8002602:	4828      	ldr	r0, [pc, #160]	; (80026a4 <StartMainMenuTask+0x144>)
 8002604:	f001 fd26 	bl	8004054 <WS2812B_vSend>
    //WS2812B_vResetLEDs(&xWS2812B);
  	osDelay(250);
 8002608:	20fa      	movs	r0, #250	; 0xfa
 800260a:	f008 fbfb 	bl	800ae04 <osDelay>


    WS2812B_vSetLED(&xWS2812B, 0, 255, 0, 0);
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	22ff      	movs	r2, #255	; 0xff
 8002616:	2100      	movs	r1, #0
 8002618:	4822      	ldr	r0, [pc, #136]	; (80026a4 <StartMainMenuTask+0x144>)
 800261a:	f001 fbc8 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 1, 0, 255, 255);
 800261e:	23ff      	movs	r3, #255	; 0xff
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	23ff      	movs	r3, #255	; 0xff
 8002624:	2200      	movs	r2, #0
 8002626:	2101      	movs	r1, #1
 8002628:	481e      	ldr	r0, [pc, #120]	; (80026a4 <StartMainMenuTask+0x144>)
 800262a:	f001 fbc0 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 2, 255, 0, 0);
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	2102      	movs	r1, #2
 8002638:	481a      	ldr	r0, [pc, #104]	; (80026a4 <StartMainMenuTask+0x144>)
 800263a:	f001 fbb8 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 3, 255, 0, 0);
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	2103      	movs	r1, #3
 8002648:	4816      	ldr	r0, [pc, #88]	; (80026a4 <StartMainMenuTask+0x144>)
 800264a:	f001 fbb0 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 4, 255, 0, 0);
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	2300      	movs	r3, #0
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	2104      	movs	r1, #4
 8002658:	4812      	ldr	r0, [pc, #72]	; (80026a4 <StartMainMenuTask+0x144>)
 800265a:	f001 fba8 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 5, 255, 0, 0);
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2300      	movs	r3, #0
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	2105      	movs	r1, #5
 8002668:	480e      	ldr	r0, [pc, #56]	; (80026a4 <StartMainMenuTask+0x144>)
 800266a:	f001 fba0 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 6, 255, 0, 0);
 800266e:	2300      	movs	r3, #0
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2300      	movs	r3, #0
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	2106      	movs	r1, #6
 8002678:	480a      	ldr	r0, [pc, #40]	; (80026a4 <StartMainMenuTask+0x144>)
 800267a:	f001 fb98 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetLED(&xWS2812B, 7, 255, 0, 0);
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	2107      	movs	r1, #7
 8002688:	4806      	ldr	r0, [pc, #24]	; (80026a4 <StartMainMenuTask+0x144>)
 800268a:	f001 fb90 	bl	8003dae <WS2812B_vSetLED>



    WS2812B_vSetBrightness(&xWS2812B, 1);
 800268e:	2101      	movs	r1, #1
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <StartMainMenuTask+0x144>)
 8002692:	f001 fc19 	bl	8003ec8 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <StartMainMenuTask+0x144>)
 8002698:	f001 fcdc 	bl	8004054 <WS2812B_vSend>
  	printf("Main Menu\r\n");
 800269c:	e764      	b.n	8002568 <StartMainMenuTask+0x8>
 800269e:	bf00      	nop
 80026a0:	08010190 	.word	0x08010190
 80026a4:	200047e0 	.word	0x200047e0

080026a8 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <StartPlayTickTask+0x4c>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <StartPlayTickTask+0x50>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	2200      	movs	r2, #0
 80026c0:	f008 fc27 	bl	800af12 <osEventFlagsWait>
 80026c4:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dbf1      	blt.n	80026b0 <StartPlayTickTask+0x8>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ec      	beq.n	80026b0 <StartPlayTickTask+0x8>
		{
			while (running)
 80026d6:	e008      	b.n	80026ea <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 80026d8:	4808      	ldr	r0, [pc, #32]	; (80026fc <StartPlayTickTask+0x54>)
 80026da:	f00b fbb5 	bl	800de48 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <StartPlayTickTask+0x58>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4807      	ldr	r0, [pc, #28]	; (8002704 <StartPlayTickTask+0x5c>)
 80026e6:	f009 fd33 	bl	800c150 <vTaskDelayUntil>
			while (running)
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <StartPlayTickTask+0x60>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f2      	bne.n	80026d8 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 80026f2:	e7dd      	b.n	80026b0 <StartPlayTickTask+0x8>
 80026f4:	20003704 	.word	0x20003704
 80026f8:	080103c8 	.word	0x080103c8
 80026fc:	0801019c 	.word	0x0801019c
 8002700:	080103cc 	.word	0x080103cc
 8002704:	200047dc 	.word	0x200047dc
 8002708:	200001e4 	.word	0x200001e4

0800270c <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <StartPlayState+0x38>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <StartPlayState+0x3c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	2200      	movs	r2, #0
 8002724:	f008 fbf5 	bl	800af12 <osEventFlagsWait>
 8002728:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	dbf1      	blt.n	8002714 <StartPlayState+0x8>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ec      	beq.n	8002714 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <StartPlayState+0x40>)
 800273c:	f000 f83a 	bl	80027b4 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8002740:	e7e8      	b.n	8002714 <StartPlayState+0x8>
 8002742:	bf00      	nop
 8002744:	20003704 	.word	0x20003704
 8002748:	080103d0 	.word	0x080103d0
 800274c:	20004cc0 	.word	0x20004cc0

08002750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002762:	f001 fd4f 	bl	8004204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40001000 	.word	0x40001000

08002774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800277c:	e7fe      	b.n	800277c <Error_Handler+0x8>

0800277e <Piece_ucParseBeatValue>:
	pxPiece->xCapture.ulTick = osKernelGetTickCount();
}


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3305      	adds	r3, #5
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	440a      	add	r2, r1
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	795b      	ldrb	r3, [r3, #5]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 80027c0:	e045      	b.n	800284e <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	440a      	add	r2, r1
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4827      	ldr	r0, [pc, #156]	; (8002884 <Piece_vParseCommand+0xd0>)
 80027e8:	f00b faa8 	bl	800dd3c <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	791b      	ldrb	r3, [r3, #4]
 80027f0:	4619      	mov	r1, r3
 80027f2:	4825      	ldr	r0, [pc, #148]	; (8002888 <Piece_vParseCommand+0xd4>)
 80027f4:	f00b faa2 	bl	800dd3c <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	791b      	ldrb	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <Piece_vParseCommand+0x52>
 8002800:	2b7f      	cmp	r3, #127	; 0x7f
 8002802:	d003      	beq.n	800280c <Piece_vParseCommand+0x58>
 8002804:	e006      	b.n	8002814 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
			break;
 800280a:	e020      	b.n	800284e <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f891 	bl	8002934 <Piece_vConfigureAll>
			break;
 8002812:	e01c      	b.n	800284e <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fb4b 	bl	8002eb4 <bIsPlayCommand>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	791b      	ldrb	r3, [r3, #4]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffa5 	bl	800277e <Piece_ucParseBeatValue>
 8002834:	4603      	mov	r3, r0
 8002836:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8002838:	7bba      	ldrb	r2, [r7, #14]
 800283a:	7b7b      	ldrb	r3, [r7, #13]
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f9d8 	bl	8002bf4 <Piece_vPlayNotes>
 8002844:	e002      	b.n	800284c <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8002846:	4811      	ldr	r0, [pc, #68]	; (800288c <Piece_vParseCommand+0xd8>)
 8002848:	f00b fafe 	bl	800de48 <puts>
			}
			break;
 800284c:	bf00      	nop
	while (!endCommand)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0b6      	beq.n	80027c2 <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8002854:	480e      	ldr	r0, [pc, #56]	; (8002890 <Piece_vParseCommand+0xdc>)
 8002856:	f00b faf7 	bl	800de48 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 800285a:	2100      	movs	r1, #0
 800285c:	480d      	ldr	r0, [pc, #52]	; (8002894 <Piece_vParseCommand+0xe0>)
 800285e:	f006 f847 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8002862:	2100      	movs	r1, #0
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <Piece_vParseCommand+0xe4>)
 8002866:	f006 f843 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800286a:	2100      	movs	r1, #0
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <Piece_vParseCommand+0xe8>)
 800286e:	f006 f83f 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8002872:	2100      	movs	r1, #0
 8002874:	480a      	ldr	r0, [pc, #40]	; (80028a0 <Piece_vParseCommand+0xec>)
 8002876:	f006 f83b 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	080101ec 	.word	0x080101ec
 8002888:	08010200 	.word	0x08010200
 800288c:	08010210 	.word	0x08010210
 8002890:	08010224 	.word	0x08010224
 8002894:	2000cd64 	.word	0x2000cd64
 8002898:	20004790 	.word	0x20004790
 800289c:	2000df30 	.word	0x2000df30
 80028a0:	20004a84 	.word	0x20004a84

080028a4 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80028be:	4619      	mov	r1, r3
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <Piece_vSetMovement+0x2c>)
 80028c2:	f00b fa3b 	bl	800dd3c <iprintf>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08010238 	.word	0x08010238

080028d4 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80028ee:	4619      	mov	r1, r3
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <Piece_vSetBPM+0x2c>)
 80028f2:	f00b fa23 	bl	800dd3c <iprintf>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	08010248 	.word	0x08010248

08002904 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800291e:	4619      	mov	r1, r3
 8002920:	4803      	ldr	r0, [pc, #12]	; (8002930 <Piece_vSetDynamic+0x2c>)
 8002922:	f00b fa0b 	bl	800dd3c <iprintf>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08010254 	.word	0x08010254

08002934 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 800293c:	481e      	ldr	r0, [pc, #120]	; (80029b8 <Piece_vConfigureAll+0x84>)
 800293e:	f00b fa83 	bl	800de48 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1c9a      	adds	r2, r3, #2
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff84 	bl	80028a4 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 800299c:	89bb      	ldrh	r3, [r7, #12]
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff97 	bl	80028d4 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffaa 	bl	8002904 <Piece_vSetDynamic>
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	08010264 	.word	0x08010264

080029bc <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	int count = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 80029ca:	e01e      	b.n	8002a0a <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029d2:	3394      	adds	r3, #148	; 0x94
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80029e0:	3394      	adds	r3, #148	; 0x94
 80029e2:	601a      	str	r2, [r3, #0]
		count++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3b32      	subs	r3, #50	; 0x32
 80029ee:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 80029f0:	2232      	movs	r2, #50	; 0x32
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	4819      	ldr	r0, [pc, #100]	; (8002a5c <Piece_vCaptureFragment+0xa0>)
 80029f6:	f00b f9a1 	bl	800dd3c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a00:	3394      	adds	r3, #148	; 0x94
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f008 fa18 	bl	800ae3a <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b31      	cmp	r3, #49	; 0x31
 8002a0e:	dcdd      	bgt.n	80029cc <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dd1b      	ble.n	8002a4e <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a1c:	3394      	adds	r3, #148	; 0x94
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	441a      	add	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a2a:	3394      	adds	r3, #148	; 0x94
 8002a2c:	601a      	str	r2, [r3, #0]

		count++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4808      	ldr	r0, [pc, #32]	; (8002a5c <Piece_vCaptureFragment+0xa0>)
 8002a3a:	f00b f97f 	bl	800dd3c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a44:	3394      	adds	r3, #148	; 0x94
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f008 f9f6 	bl	800ae3a <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	603b      	str	r3, [r7, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	08010280 	.word	0x08010280

08002a60 <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a6e:	3398      	adds	r3, #152	; 0x98
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a7a:	339b      	adds	r3, #155	; 0x9b
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a86:	339e      	adds	r3, #158	; 0x9e
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a92:	33a1      	adds	r3, #161	; 0xa1
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3306      	adds	r3, #6
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	440a      	add	r2, r1
 8002abc:	8812      	ldrh	r2, [r2, #0]
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1c9a      	adds	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	88db      	ldrh	r3, [r3, #6]
 8002ad0:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	88db      	ldrh	r3, [r3, #6]
 8002ad6:	0b9b      	lsrs	r3, r3, #14
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	88db      	ldrh	r3, [r3, #6]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aea:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d856      	bhi.n	8002ba0 <Piece_vParseNoteGoal+0xfc>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <Piece_vParseNoteGoal+0x54>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b2f 	.word	0x08002b2f
 8002b00:	08002b55 	.word	0x08002b55
 8002b04:	08002b7b 	.word	0x08002b7b
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b0e:	3398      	adds	r3, #152	; 0x98
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b1a:	3399      	adds	r3, #153	; 0x99
 8002b1c:	7bfa      	ldrb	r2, [r7, #15]
 8002b1e:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b26:	339a      	adds	r3, #154	; 0x9a
 8002b28:	7b7a      	ldrb	r2, [r7, #13]
 8002b2a:	701a      	strb	r2, [r3, #0]
		break;
 8002b2c:	e039      	b.n	8002ba2 <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b34:	339b      	adds	r3, #155	; 0x9b
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b40:	339c      	adds	r3, #156	; 0x9c
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b4c:	339d      	adds	r3, #157	; 0x9d
 8002b4e:	7b7a      	ldrb	r2, [r7, #13]
 8002b50:	701a      	strb	r2, [r3, #0]
		break;
 8002b52:	e026      	b.n	8002ba2 <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b5a:	339e      	adds	r3, #158	; 0x9e
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b66:	339f      	adds	r3, #159	; 0x9f
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b72:	33a0      	adds	r3, #160	; 0xa0
 8002b74:	7b7a      	ldrb	r2, [r7, #13]
 8002b76:	701a      	strb	r2, [r3, #0]
		break;
 8002b78:	e013      	b.n	8002ba2 <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b80:	33a1      	adds	r3, #161	; 0xa1
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b8c:	33a2      	adds	r3, #162	; 0xa2
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b98:	33a3      	adds	r3, #163	; 0xa3
 8002b9a:	7b7a      	ldrb	r2, [r7, #13]
 8002b9c:	701a      	strb	r2, [r3, #0]
		break;
 8002b9e:	e000      	b.n	8002ba2 <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 8002ba0:	bf00      	nop
	}
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d901      	bls.n	8002bc6 <Piece_vParseGoal+0x16>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	81fb      	strh	r3, [r7, #14]
 8002bca:	e008      	b.n	8002bde <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff69 	bl	8002aa4 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8002bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	81fb      	strh	r3, [r7, #14]
 8002bde:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dbf1      	blt.n	8002bcc <Piece_vParseGoal+0x1c>
	}
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
 8002c00:	4613      	mov	r3, r2
 8002c02:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8002c04:	78bb      	ldrb	r3, [r7, #2]
 8002c06:	4619      	mov	r1, r3
 8002c08:	48a0      	ldr	r0, [pc, #640]	; (8002e8c <Piece_vPlayNotes+0x298>)
 8002c0a:	f00b f897 	bl	800dd3c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	4619      	mov	r1, r3
 8002c12:	489f      	ldr	r0, [pc, #636]	; (8002e90 <Piece_vPlayNotes+0x29c>)
 8002c14:	f00b f892 	bl	800dd3c <iprintf>

	Piece_vResetGoal(pxPiece);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff21 	bl	8002a60 <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 8002c1e:	78bb      	ldrb	r3, [r7, #2]
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffc4 	bl	8002bb0 <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f9d1 	bl	8002fd0 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d820      	bhi.n	8002c76 <Piece_vPlayNotes+0x82>
 8002c34:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <Piece_vPlayNotes+0x48>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c51 	.word	0x08002c51
 8002c40:	08002c59 	.word	0x08002c59
 8002c44:	08002c5f 	.word	0x08002c5f
 8002c48:	08002c67 	.word	0x08002c67
 8002c4c:	08002c6f 	.word	0x08002c6f
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 8002c50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c54:	617b      	str	r3, [r7, #20]
		break;
 8002c56:	e012      	b.n	8002c7e <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8002c58:	4b8e      	ldr	r3, [pc, #568]	; (8002e94 <Piece_vPlayNotes+0x2a0>)
 8002c5a:	617b      	str	r3, [r7, #20]
		break;
 8002c5c:	e00f      	b.n	8002c7e <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 8002c5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c62:	617b      	str	r3, [r7, #20]
		break;
 8002c64:	e00b      	b.n	8002c7e <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8002c66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c6a:	617b      	str	r3, [r7, #20]
		break;
 8002c6c:	e007      	b.n	8002c7e <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 8002c6e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c72:	617b      	str	r3, [r7, #20]
		break;
 8002c74:	e003      	b.n	8002c7e <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8002c76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c7a:	617b      	str	r3, [r7, #20]
		break;
 8002c7c:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8c:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002e98 <Piece_vPlayNotes+0x2a4>
 8002c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c94:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002e9c <Piece_vPlayNotes+0x2a8>
 8002c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9c:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	2b0b      	cmp	r3, #11
 8002ca4:	f200 80d6 	bhi.w	8002e54 <Piece_vPlayNotes+0x260>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <Piece_vPlayNotes+0xbc>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002ce1 	.word	0x08002ce1
 8002cb4:	08002d01 	.word	0x08002d01
 8002cb8:	08002d21 	.word	0x08002d21
 8002cbc:	08002d41 	.word	0x08002d41
 8002cc0:	08002d61 	.word	0x08002d61
 8002cc4:	08002d7d 	.word	0x08002d7d
 8002cc8:	08002d95 	.word	0x08002d95
 8002ccc:	08002db5 	.word	0x08002db5
 8002cd0:	08002dd5 	.word	0x08002dd5
 8002cd4:	08002df5 	.word	0x08002df5
 8002cd8:	08002e15 	.word	0x08002e15
 8002cdc:	08002e35 	.word	0x08002e35
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 8002ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002ea0 <Piece_vPlayNotes+0x2ac>
 8002ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf8:	ee17 3a90 	vmov	r3, s15
 8002cfc:	613b      	str	r3, [r7, #16]
		break;
 8002cfe:	e0b5      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 8002d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d04:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002d08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d18:	ee17 3a90 	vmov	r3, s15
 8002d1c:	613b      	str	r3, [r7, #16]
		break;
 8002d1e:	e0a5      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 8002d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d24:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002d28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d38:	ee17 3a90 	vmov	r3, s15
 8002d3c:	613b      	str	r3, [r7, #16]
		break;
 8002d3e:	e095      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 8002d40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d44:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d58:	ee17 3a90 	vmov	r3, s15
 8002d5c:	613b      	str	r3, [r7, #16]
		break;
 8002d5e:	e085      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d68:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d74:	ee17 3a90 	vmov	r3, s15
 8002d78:	613b      	str	r3, [r7, #16]
		break;
 8002d7a:	e077      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002d7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d8c:	ee17 3a90 	vmov	r3, s15
 8002d90:	613b      	str	r3, [r7, #16]
		break;
 8002d92:	e06b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8002d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dac:	ee17 3a90 	vmov	r3, s15
 8002db0:	613b      	str	r3, [r7, #16]
		break;
 8002db2:	e05b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8002db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002db8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002dbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dcc:	ee17 3a90 	vmov	r3, s15
 8002dd0:	613b      	str	r3, [r7, #16]
		break;
 8002dd2:	e04b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8002dd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd8:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dec:	ee17 3a90 	vmov	r3, s15
 8002df0:	613b      	str	r3, [r7, #16]
		break;
 8002df2:	e03b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002df4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002ea4 <Piece_vPlayNotes+0x2b0>
 8002dfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e0c:	ee17 3a90 	vmov	r3, s15
 8002e10:	613b      	str	r3, [r7, #16]
		break;
 8002e12:	e02b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e18:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ea8 <Piece_vPlayNotes+0x2b4>
 8002e1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2c:	ee17 3a90 	vmov	r3, s15
 8002e30:	613b      	str	r3, [r7, #16]
		break;
 8002e32:	e01b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 8002e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e38:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002eac <Piece_vPlayNotes+0x2b8>
 8002e3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e4c:	ee17 3a90 	vmov	r3, s15
 8002e50:	613b      	str	r3, [r7, #16]
		break;
 8002e52:	e00b      	b.n	8002e6c <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002e54:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e64:	ee17 3a90 	vmov	r3, s15
 8002e68:	613b      	str	r3, [r7, #16]
		break;
 8002e6a:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8002e6c:	78bb      	ldrb	r3, [r7, #2]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 8002e72:	480f      	ldr	r0, [pc, #60]	; (8002eb0 <Piece_vPlayNotes+0x2bc>)
 8002e74:	f00a ffe8 	bl	800de48 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fd9d 	bl	80029bc <Piece_vCaptureFragment>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	08010298 	.word	0x08010298
 8002e90:	080102ac 	.word	0x080102ac
 8002e94:	3f2aaaab 	.word	0x3f2aaaab
 8002e98:	42700000 	.word	0x42700000
 8002e9c:	447a0000 	.word	0x447a0000
 8002ea0:	42000000 	.word	0x42000000
 8002ea4:	3d800000 	.word	0x3d800000
 8002ea8:	3d000000 	.word	0x3d000000
 8002eac:	3c800000 	.word	0x3c800000
 8002eb0:	080102c0 	.word	0x080102c0

08002eb4 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	b2db      	uxtb	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d816      	bhi.n	8002f18 <Piece_usGetPitchTick+0x44>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <Piece_usGetPitchTick+0x1c>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f0d 	.word	0x08002f0d
 8002efc:	08002f13 	.word	0x08002f13
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
		break;
 8002f04:	e00b      	b.n	8002f1e <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 8002f06:	230a      	movs	r3, #10
 8002f08:	73fb      	strb	r3, [r7, #15]
		break;
 8002f0a:	e008      	b.n	8002f1e <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 8002f0c:	2314      	movs	r3, #20
 8002f0e:	73fb      	strb	r3, [r7, #15]
		break;
 8002f10:	e005      	b.n	8002f1e <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 8002f12:	231e      	movs	r3, #30
 8002f14:	73fb      	strb	r3, [r7, #15]
		break;
 8002f16:	e002      	b.n	8002f1e <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
		break;
 8002f1c:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	4413      	add	r3, r2
 8002f24:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b47      	cmp	r3, #71	; 0x47
 8002f2a:	bf28      	it	cs
 8002f2c:	2347      	movcs	r3, #71	; 0x47
 8002f2e:	73fb      	strb	r3, [r7, #15]

	return pusNoteToPitchMap[ucPitchTickIndex];
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <Piece_usGetPitchTick+0x70>)
 8002f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	20000004 	.word	0x20000004

08002f48 <Piece_ucGetFingeringIndex>:



uint8_t Piece_ucGetFingeringIndex(uint8_t ucString, uint8_t ucOffset)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460a      	mov	r2, r1
 8002f52:	71fb      	strb	r3, [r7, #7]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71bb      	strb	r3, [r7, #6]
	uint8_t ucFingeringIndex;

	// [!] assert ucOffset [0, 29]

	switch (ucString)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d82b      	bhi.n	8002fb6 <Piece_ucGetFingeringIndex+0x6e>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <Piece_ucGetFingeringIndex+0x1c>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f75 	.word	0x08002f75
 8002f68:	08002f85 	.word	0x08002f85
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	08002fa7 	.word	0x08002fa7
	{
	case G_STRING:
		ucFingeringIndex = G_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucG;
 8002f74:	79bb      	ldrb	r3, [r7, #6]
 8002f76:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <Piece_ucGetFingeringIndex+0x84>)
 8002f78:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8002f7c:	f1c3 031d 	rsb	r3, r3, #29
 8002f80:	73fb      	strb	r3, [r7, #15]
		break;
 8002f82:	e01b      	b.n	8002fbc <Piece_ucGetFingeringIndex+0x74>
	case D_STRING:
		ucFingeringIndex = D_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucD;
 8002f84:	79bb      	ldrb	r3, [r7, #6]
 8002f86:	4a11      	ldr	r2, [pc, #68]	; (8002fcc <Piece_ucGetFingeringIndex+0x84>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	331e      	adds	r3, #30
 8002f90:	73fb      	strb	r3, [r7, #15]
		break;
 8002f92:	e013      	b.n	8002fbc <Piece_ucGetFingeringIndex+0x74>
	case A_STRING:
		ucFingeringIndex = A_STRING_FINGER_OFFSET - pucStringNoteToFingerMap[ucOffset].ucA;
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <Piece_ucGetFingeringIndex+0x84>)
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	789b      	ldrb	r3, [r3, #2]
 8002f9e:	f1c3 0359 	rsb	r3, r3, #89	; 0x59
 8002fa2:	73fb      	strb	r3, [r7, #15]
		break;
 8002fa4:	e00a      	b.n	8002fbc <Piece_ucGetFingeringIndex+0x74>
	case E_STRING:
		ucFingeringIndex = E_STRING_FINGER_OFFSET + pucStringNoteToFingerMap[ucOffset].ucE;
 8002fa6:	79bb      	ldrb	r3, [r7, #6]
 8002fa8:	4a08      	ldr	r2, [pc, #32]	; (8002fcc <Piece_ucGetFingeringIndex+0x84>)
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	78db      	ldrb	r3, [r3, #3]
 8002fb0:	335a      	adds	r3, #90	; 0x5a
 8002fb2:	73fb      	strb	r3, [r7, #15]
		break;
 8002fb4:	e002      	b.n	8002fbc <Piece_ucGetFingeringIndex+0x74>
	default:
		// [!] error light
		ucFingeringIndex = G_STRING_FINGER_OFFSET;
 8002fb6:	231d      	movs	r3, #29
 8002fb8:	73fb      	strb	r3, [r7, #15]
		break;
 8002fba:	bf00      	nop
	}

	return ucFingeringIndex;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000094 	.word	0x20000094

08002fd0 <Piece_Debug_vPrintGoal>:

extern WS2812BHandle_t xWS2812B;


void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 8002fd8:	4885      	ldr	r0, [pc, #532]	; (80031f0 <Piece_Debug_vPrintGoal+0x220>)
 8002fda:	f00a ff35 	bl	800de48 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fe4:	3398      	adds	r3, #152	; 0x98
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d04b      	beq.n	8003084 <Piece_Debug_vPrintGoal+0xb4>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ff2:	339a      	adds	r3, #154	; 0x9a
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ffe:	339a      	adds	r3, #154	; 0x9a
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	2000      	movs	r0, #0
 8003006:	f7ff ff65 	bl	8002ed4 <Piece_usGetPitchTick>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4621      	mov	r1, r4
 8003010:	4878      	ldr	r0, [pc, #480]	; (80031f4 <Piece_Debug_vPrintGoal+0x224>)
 8003012:	f00a fe93 	bl	800dd3c <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800301c:	339a      	adds	r3, #154	; 0x9a
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff ff56 	bl	8002ed4 <Piece_usGetPitchTick>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <Piece_Debug_vPrintGoal+0x228>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 8003032:	4b71      	ldr	r3, [pc, #452]	; (80031f8 <Piece_Debug_vPrintGoal+0x228>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <Piece_Debug_vPrintGoal+0x228>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0852      	lsrs	r2, r2, #1
 800303e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8003040:	2100      	movs	r1, #0
 8003042:	486d      	ldr	r0, [pc, #436]	; (80031f8 <Piece_Debug_vPrintGoal+0x228>)
 8003044:	f005 fb08 	bl	8008658 <HAL_TIM_PWM_Start_IT>


		uint8_t ucGFingeringOffset = Piece_ucGetFingeringIndex(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800304e:	339a      	adds	r3, #154	; 0x9a
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	2000      	movs	r0, #0
 8003056:	f7ff ff77 	bl	8002f48 <Piece_ucGetFingeringIndex>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
		WS2812B_vSetLED(&xWS2812B, ucGFingeringOffset, 255, 0, 0);
 800305e:	7bf9      	ldrb	r1, [r7, #15]
 8003060:	2300      	movs	r3, #0
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	4864      	ldr	r0, [pc, #400]	; (80031fc <Piece_Debug_vPrintGoal+0x22c>)
 800306a:	f000 fea0 	bl	8003dae <WS2812B_vSetLED>
    WS2812B_vSetBrightness(&xWS2812B, 1);
 800306e:	2101      	movs	r1, #1
 8003070:	4862      	ldr	r0, [pc, #392]	; (80031fc <Piece_Debug_vPrintGoal+0x22c>)
 8003072:	f000 ff29 	bl	8003ec8 <WS2812B_vSetBrightness>
    WS2812B_vSend(&xWS2812B);
 8003076:	4861      	ldr	r0, [pc, #388]	; (80031fc <Piece_Debug_vPrintGoal+0x22c>)
 8003078:	f000 ffec 	bl	8004054 <WS2812B_vSend>
    WS2812B_vResetLEDs(&xWS2812B);
 800307c:	485f      	ldr	r0, [pc, #380]	; (80031fc <Piece_Debug_vPrintGoal+0x22c>)
 800307e:	f000 ff06 	bl	8003e8e <WS2812B_vResetLEDs>
 8003082:	e003      	b.n	800308c <Piece_Debug_vPrintGoal+0xbc>

	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8003084:	2100      	movs	r1, #0
 8003086:	485c      	ldr	r0, [pc, #368]	; (80031f8 <Piece_Debug_vPrintGoal+0x228>)
 8003088:	f005 fc32 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003092:	339b      	adds	r3, #155	; 0x9b
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d02e      	beq.n	80030f8 <Piece_Debug_vPrintGoal+0x128>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030a0:	339d      	adds	r3, #157	; 0x9d
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461c      	mov	r4, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030ac:	339d      	adds	r3, #157	; 0x9d
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7ff ff0e 	bl	8002ed4 <Piece_usGetPitchTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	4621      	mov	r1, r4
 80030be:	4850      	ldr	r0, [pc, #320]	; (8003200 <Piece_Debug_vPrintGoal+0x230>)
 80030c0:	f00a fe3c 	bl	800dd3c <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030ca:	339d      	adds	r3, #157	; 0x9d
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4619      	mov	r1, r3
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7ff feff 	bl	8002ed4 <Piece_usGetPitchTick>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <Piece_Debug_vPrintGoal+0x234>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80030e0:	4b48      	ldr	r3, [pc, #288]	; (8003204 <Piece_Debug_vPrintGoal+0x234>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <Piece_Debug_vPrintGoal+0x234>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0852      	lsrs	r2, r2, #1
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80030ee:	2100      	movs	r1, #0
 80030f0:	4844      	ldr	r0, [pc, #272]	; (8003204 <Piece_Debug_vPrintGoal+0x234>)
 80030f2:	f005 fab1 	bl	8008658 <HAL_TIM_PWM_Start_IT>
 80030f6:	e003      	b.n	8003100 <Piece_Debug_vPrintGoal+0x130>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80030f8:	2100      	movs	r1, #0
 80030fa:	4842      	ldr	r0, [pc, #264]	; (8003204 <Piece_Debug_vPrintGoal+0x234>)
 80030fc:	f005 fbf8 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003106:	339e      	adds	r3, #158	; 0x9e
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02e      	beq.n	800316c <Piece_Debug_vPrintGoal+0x19c>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003114:	33a0      	adds	r3, #160	; 0xa0
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	461c      	mov	r4, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003120:	33a0      	adds	r3, #160	; 0xa0
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	2002      	movs	r0, #2
 8003128:	f7ff fed4 	bl	8002ed4 <Piece_usGetPitchTick>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4621      	mov	r1, r4
 8003132:	4835      	ldr	r0, [pc, #212]	; (8003208 <Piece_Debug_vPrintGoal+0x238>)
 8003134:	f00a fe02 	bl	800dd3c <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800313e:	33a0      	adds	r3, #160	; 0xa0
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	2002      	movs	r0, #2
 8003146:	f7ff fec5 	bl	8002ed4 <Piece_usGetPitchTick>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <Piece_Debug_vPrintGoal+0x23c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <Piece_Debug_vPrintGoal+0x23c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <Piece_Debug_vPrintGoal+0x23c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0852      	lsrs	r2, r2, #1
 8003160:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8003162:	2100      	movs	r1, #0
 8003164:	4829      	ldr	r0, [pc, #164]	; (800320c <Piece_Debug_vPrintGoal+0x23c>)
 8003166:	f005 fa77 	bl	8008658 <HAL_TIM_PWM_Start_IT>
 800316a:	e003      	b.n	8003174 <Piece_Debug_vPrintGoal+0x1a4>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800316c:	2100      	movs	r1, #0
 800316e:	4827      	ldr	r0, [pc, #156]	; (800320c <Piece_Debug_vPrintGoal+0x23c>)
 8003170:	f005 fbbe 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800317a:	33a1      	adds	r3, #161	; 0xa1
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02e      	beq.n	80031e0 <Piece_Debug_vPrintGoal+0x210>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003188:	33a3      	adds	r3, #163	; 0xa3
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461c      	mov	r4, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003194:	33a3      	adds	r3, #163	; 0xa3
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	2003      	movs	r0, #3
 800319c:	f7ff fe9a 	bl	8002ed4 <Piece_usGetPitchTick>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4621      	mov	r1, r4
 80031a6:	481a      	ldr	r0, [pc, #104]	; (8003210 <Piece_Debug_vPrintGoal+0x240>)
 80031a8:	f00a fdc8 	bl	800dd3c <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80031b2:	33a3      	adds	r3, #163	; 0xa3
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4619      	mov	r1, r3
 80031b8:	2003      	movs	r0, #3
 80031ba:	f7ff fe8b 	bl	8002ed4 <Piece_usGetPitchTick>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <Piece_Debug_vPrintGoal+0x244>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <Piece_Debug_vPrintGoal+0x244>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <Piece_Debug_vPrintGoal+0x244>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	0852      	lsrs	r2, r2, #1
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80031d6:	2100      	movs	r1, #0
 80031d8:	480e      	ldr	r0, [pc, #56]	; (8003214 <Piece_Debug_vPrintGoal+0x244>)
 80031da:	f005 fa3d 	bl	8008658 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80031de:	e003      	b.n	80031e8 <Piece_Debug_vPrintGoal+0x218>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80031e0:	2100      	movs	r1, #0
 80031e2:	480c      	ldr	r0, [pc, #48]	; (8003214 <Piece_Debug_vPrintGoal+0x244>)
 80031e4:	f005 fb84 	bl	80088f0 <HAL_TIM_PWM_Stop_IT>
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd90      	pop	{r4, r7, pc}
 80031f0:	080102d8 	.word	0x080102d8
 80031f4:	080102e0 	.word	0x080102e0
 80031f8:	2000cd64 	.word	0x2000cd64
 80031fc:	200047e0 	.word	0x200047e0
 8003200:	080102f0 	.word	0x080102f0
 8003204:	20004790 	.word	0x20004790
 8003208:	08010300 	.word	0x08010300
 800320c:	2000df30 	.word	0x2000df30
 8003210:	08010310 	.word	0x08010310
 8003214:	20004a84 	.word	0x20004a84

08003218 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_MspInit+0x4c>)
 8003220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_MspInit+0x4c>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6613      	str	r3, [r2, #96]	; 0x60
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_MspInit+0x4c>)
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_MspInit+0x4c>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_MspInit+0x4c>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6593      	str	r3, [r2, #88]	; 0x58
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_MspInit+0x4c>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	210f      	movs	r1, #15
 8003252:	f06f 0001 	mvn.w	r0, #1
 8003256:	f002 faaf 	bl	80057b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000

08003268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <HAL_ADC_MspInit+0xc8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d14e      	bne.n	8003328 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_ADC_MspInit+0xcc>)
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	4a29      	ldr	r2, [pc, #164]	; (8003334 <HAL_ADC_MspInit+0xcc>)
 8003290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003296:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_ADC_MspInit+0xcc>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_ADC_MspInit+0xcc>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a6:	4a23      	ldr	r2, [pc, #140]	; (8003334 <HAL_ADC_MspInit+0xcc>)
 80032a8:	f043 0304 	orr.w	r3, r3, #4
 80032ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_ADC_MspInit+0xcc>)
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80032ba:	230f      	movs	r3, #15
 80032bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80032be:	230b      	movs	r3, #11
 80032c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	481a      	ldr	r0, [pc, #104]	; (8003338 <HAL_ADC_MspInit+0xd0>)
 80032ce:	f002 fce3 	bl	8005c98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032d4:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_ADC_MspInit+0xd8>)
 80032d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80032d8:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032da:	2200      	movs	r2, #0
 80032dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_ADC_MspInit+0xd4>)
 80032fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <HAL_ADC_MspInit+0xd4>)
 8003302:	2220      	movs	r2, #32
 8003304:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <HAL_ADC_MspInit+0xd4>)
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800330c:	480b      	ldr	r0, [pc, #44]	; (800333c <HAL_ADC_MspInit+0xd4>)
 800330e:	f002 fa8b 	bl	8005828 <HAL_DMA_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8003318:	f7ff fa2c 	bl	8002774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a07      	ldr	r2, [pc, #28]	; (800333c <HAL_ADC_MspInit+0xd4>)
 8003320:	64da      	str	r2, [r3, #76]	; 0x4c
 8003322:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_ADC_MspInit+0xd4>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	; 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	50040000 	.word	0x50040000
 8003334:	40021000 	.word	0x40021000
 8003338:	48000800 	.word	0x48000800
 800333c:	20004c30 	.word	0x20004c30
 8003340:	40020008 	.word	0x40020008

08003344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_I2C_MspInit+0x7c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d128      	bne.n	80033b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4b17      	ldr	r3, [pc, #92]	; (80033c4 <HAL_I2C_MspInit+0x80>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_I2C_MspInit+0x80>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <HAL_I2C_MspInit+0x80>)
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800337e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003384:	2312      	movs	r3, #18
 8003386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003388:	2301      	movs	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338c:	2303      	movs	r3, #3
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003390:	2304      	movs	r3, #4
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4619      	mov	r1, r3
 800339a:	480b      	ldr	r0, [pc, #44]	; (80033c8 <HAL_I2C_MspInit+0x84>)
 800339c:	f002 fc7c 	bl	8005c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <HAL_I2C_MspInit+0x80>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a07      	ldr	r2, [pc, #28]	; (80033c4 <HAL_I2C_MspInit+0x80>)
 80033a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_I2C_MspInit+0x80>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033b8:	bf00      	nop
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40005400 	.word	0x40005400
 80033c4:	40021000 	.word	0x40021000
 80033c8:	48000400 	.word	0x48000400

080033cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a25      	ldr	r2, [pc, #148]	; (8003480 <HAL_SPI_MspInit+0xb4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d144      	bne.n	8003478 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 80033f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f2:	4a24      	ldr	r2, [pc, #144]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 80033f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f8:	6613      	str	r3, [r2, #96]	; 0x60
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800342a:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_SPI_MspInit+0xb8>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003436:	2320      	movs	r3, #32
 8003438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003442:	2303      	movs	r3, #3
 8003444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003446:	2305      	movs	r3, #5
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	4619      	mov	r1, r3
 8003450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003454:	f002 fc20 	bl	8005c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003458:	2330      	movs	r3, #48	; 0x30
 800345a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003464:	2303      	movs	r3, #3
 8003466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003468:	2305      	movs	r3, #5
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4619      	mov	r1, r3
 8003472:	4805      	ldr	r0, [pc, #20]	; (8003488 <HAL_SPI_MspInit+0xbc>)
 8003474:	f002 fc10 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003478:	bf00      	nop
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40013000 	.word	0x40013000
 8003484:	40021000 	.word	0x40021000
 8003488:	48000400 	.word	0x48000400

0800348c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a80      	ldr	r2, [pc, #512]	; (800369c <HAL_TIM_PWM_MspInit+0x210>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10c      	bne.n	80034b8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800349e:	4b80      	ldr	r3, [pc, #512]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	4a7f      	ldr	r2, [pc, #508]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 80034a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034a8:	6613      	str	r3, [r2, #96]	; 0x60
 80034aa:	4b7d      	ldr	r3, [pc, #500]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80034b6:	e0ed      	b.n	8003694 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a79      	ldr	r2, [pc, #484]	; (80036a4 <HAL_TIM_PWM_MspInit+0x218>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	f040 809a 	bne.w	80035f8 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034c4:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a75      	ldr	r2, [pc, #468]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80034dc:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 80034de:	4a73      	ldr	r2, [pc, #460]	; (80036ac <HAL_TIM_PWM_MspInit+0x220>)
 80034e0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80034e2:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 80034e4:	2205      	movs	r2, #5
 80034e6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034e8:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 80034ea:	2210      	movs	r2, #16
 80034ec:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ee:	4b6e      	ldr	r3, [pc, #440]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80034f4:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034fa:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 80034fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003500:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003502:	4b69      	ldr	r3, [pc, #420]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 8003504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003508:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800350a:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 800350c:	2200      	movs	r2, #0
 800350e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8003510:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 8003512:	2200      	movs	r2, #0
 8003514:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8003516:	4864      	ldr	r0, [pc, #400]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 8003518:	f002 f986 	bl	8005828 <HAL_DMA_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 8003522:	f7ff f927 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a5f      	ldr	r2, [pc, #380]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
 800352c:	4a5e      	ldr	r2, [pc, #376]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a5c      	ldr	r2, [pc, #368]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
 8003538:	4a5b      	ldr	r2, [pc, #364]	; (80036a8 <HAL_TIM_PWM_MspInit+0x21c>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 800353e:	4b5c      	ldr	r3, [pc, #368]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003540:	4a5c      	ldr	r2, [pc, #368]	; (80036b4 <HAL_TIM_PWM_MspInit+0x228>)
 8003542:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 8003544:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003546:	2205      	movs	r2, #5
 8003548:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800354a:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 800354c:	2210      	movs	r2, #16
 800354e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003550:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003556:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003558:	2280      	movs	r2, #128	; 0x80
 800355a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800355c:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 800355e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003562:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003564:	4b52      	ldr	r3, [pc, #328]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003572:	4b4f      	ldr	r3, [pc, #316]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003574:	2200      	movs	r2, #0
 8003576:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003578:	484d      	ldr	r0, [pc, #308]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 800357a:	f002 f955 	bl	8005828 <HAL_DMA_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 8003584:	f7ff f8f6 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a49      	ldr	r2, [pc, #292]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
 800358e:	4a48      	ldr	r2, [pc, #288]	; (80036b0 <HAL_TIM_PWM_MspInit+0x224>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8003594:	4b48      	ldr	r3, [pc, #288]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 8003596:	4a49      	ldr	r2, [pc, #292]	; (80036bc <HAL_TIM_PWM_MspInit+0x230>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 800359c:	2205      	movs	r2, #5
 800359e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a0:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035a2:	2210      	movs	r2, #16
 80035a4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a6:	4b44      	ldr	r3, [pc, #272]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80035ac:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035b2:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80035c2:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80035ce:	483a      	ldr	r0, [pc, #232]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035d0:	f002 f92a 	bl	8005828 <HAL_DMA_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 80035da:	f7ff f8cb 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a35      	ldr	r2, [pc, #212]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
 80035e4:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035ee:	621a      	str	r2, [r3, #32]
 80035f0:	4a31      	ldr	r2, [pc, #196]	; (80036b8 <HAL_TIM_PWM_MspInit+0x22c>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80035f6:	e04d      	b.n	8003694 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a30      	ldr	r2, [pc, #192]	; (80036c0 <HAL_TIM_PWM_MspInit+0x234>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d137      	bne.n	8003672 <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 8003604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003606:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 8003608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800360c:	6613      	str	r3, [r2, #96]	; 0x60
 800360e:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 8003610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <HAL_TIM_PWM_MspInit+0x23c>)
 800361e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 8003620:	4b28      	ldr	r3, [pc, #160]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003622:	2207      	movs	r2, #7
 8003624:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003626:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003628:	2210      	movs	r2, #16
 800362a:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003646:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8003654:	481b      	ldr	r0, [pc, #108]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003656:	f002 f8e7 	bl	8005828 <HAL_DMA_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 8003660:	f7ff f888 	bl	8002774 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <HAL_TIM_PWM_MspInit+0x238>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003670:	e010      	b.n	8003694 <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_TIM_PWM_MspInit+0x240>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10b      	bne.n	8003694 <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	4a07      	ldr	r2, [pc, #28]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003686:	6613      	str	r3, [r2, #96]	; 0x60
 8003688:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_TIM_PWM_MspInit+0x214>)
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	20004c78 	.word	0x20004c78
 80036ac:	4002006c 	.word	0x4002006c
 80036b0:	20004ad0 	.word	0x20004ad0
 80036b4:	4002001c 	.word	0x4002001c
 80036b8:	2000cdb4 	.word	0x2000cdb4
 80036bc:	40020030 	.word	0x40020030
 80036c0:	40013400 	.word	0x40013400
 80036c4:	2000366c 	.word	0x2000366c
 80036c8:	40020480 	.word	0x40020480
 80036cc:	40014000 	.word	0x40014000

080036d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_TIM_Base_MspInit+0x5c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10c      	bne.n	80036fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_TIM_Base_MspInit+0x60>)
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <HAL_TIM_Base_MspInit+0x60>)
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ec:	6613      	str	r3, [r2, #96]	; 0x60
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_TIM_Base_MspInit+0x60>)
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80036fa:	e010      	b.n	800371e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_TIM_Base_MspInit+0x64>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10b      	bne.n	800371e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_TIM_Base_MspInit+0x60>)
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_TIM_Base_MspInit+0x60>)
 800370c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003710:	6613      	str	r3, [r2, #96]	; 0x60
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_TIM_Base_MspInit+0x60>)
 8003714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40014400 	.word	0x40014400
 8003730:	40021000 	.word	0x40021000
 8003734:	40014800 	.word	0x40014800

08003738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	; 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_TIM_MspPostInit+0x1f8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d11e      	bne.n	8003798 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375a:	4b76      	ldr	r3, [pc, #472]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	4a75      	ldr	r2, [pc, #468]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003766:	4b73      	ldr	r3, [pc, #460]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003778:	2302      	movs	r3, #2
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003780:	2300      	movs	r3, #0
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003784:	2301      	movs	r3, #1
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800378c:	4619      	mov	r1, r3
 800378e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003792:	f002 fa81 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003796:	e0c7      	b.n	8003928 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a66      	ldr	r2, [pc, #408]	; (8003938 <HAL_TIM_MspPostInit+0x200>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d138      	bne.n	8003814 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	4b64      	ldr	r3, [pc, #400]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a6:	4a63      	ldr	r2, [pc, #396]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ae:	4b61      	ldr	r3, [pc, #388]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ba:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	4a5d      	ldr	r2, [pc, #372]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037c6:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037d2:	2303      	movs	r3, #3
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037de:	2300      	movs	r3, #0
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037e2:	2302      	movs	r3, #2
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ea:	4619      	mov	r1, r3
 80037ec:	4853      	ldr	r0, [pc, #332]	; (800393c <HAL_TIM_MspPostInit+0x204>)
 80037ee:	f002 fa53 	bl	8005c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037f2:	2340      	movs	r3, #64	; 0x40
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003802:	2302      	movs	r3, #2
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380a:	4619      	mov	r1, r3
 800380c:	484c      	ldr	r0, [pc, #304]	; (8003940 <HAL_TIM_MspPostInit+0x208>)
 800380e:	f002 fa43 	bl	8005c98 <HAL_GPIO_Init>
}
 8003812:	e089      	b.n	8003928 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4a      	ldr	r2, [pc, #296]	; (8003944 <HAL_TIM_MspPostInit+0x20c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d11c      	bne.n	8003858 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381e:	4b45      	ldr	r3, [pc, #276]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	4a44      	ldr	r2, [pc, #272]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800382a:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003842:	2300      	movs	r3, #0
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003846:	2303      	movs	r3, #3
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	483b      	ldr	r0, [pc, #236]	; (8003940 <HAL_TIM_MspPostInit+0x208>)
 8003852:	f002 fa21 	bl	8005c98 <HAL_GPIO_Init>
}
 8003856:	e067      	b.n	8003928 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <HAL_TIM_MspPostInit+0x210>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d11d      	bne.n	800389e <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003862:	4b34      	ldr	r3, [pc, #208]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	4a33      	ldr	r2, [pc, #204]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003868:	f043 0302 	orr.w	r3, r3, #2
 800386c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800387a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003880:	2302      	movs	r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003888:	2300      	movs	r3, #0
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800388c:	230e      	movs	r3, #14
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003894:	4619      	mov	r1, r3
 8003896:	4829      	ldr	r0, [pc, #164]	; (800393c <HAL_TIM_MspPostInit+0x204>)
 8003898:	f002 f9fe 	bl	8005c98 <HAL_GPIO_Init>
}
 800389c:	e044      	b.n	8003928 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2a      	ldr	r2, [pc, #168]	; (800394c <HAL_TIM_MspPostInit+0x214>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d11d      	bne.n	80038e4 <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a8:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	4a21      	ldr	r2, [pc, #132]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b4:	4b1f      	ldr	r3, [pc, #124]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038c0:	2340      	movs	r3, #64	; 0x40
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80038d0:	230e      	movs	r3, #14
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038de:	f002 f9db 	bl	8005c98 <HAL_GPIO_Init>
}
 80038e2:	e021      	b.n	8003928 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <HAL_TIM_MspPostInit+0x218>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d11c      	bne.n	8003928 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <HAL_TIM_MspPostInit+0x1fc>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003906:	2380      	movs	r3, #128	; 0x80
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8003916:	230e      	movs	r3, #14
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391e:	4619      	mov	r1, r3
 8003920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003924:	f002 f9b8 	bl	8005c98 <HAL_GPIO_Init>
}
 8003928:	bf00      	nop
 800392a:	3738      	adds	r7, #56	; 0x38
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40012c00 	.word	0x40012c00
 8003934:	40021000 	.word	0x40021000
 8003938:	40000400 	.word	0x40000400
 800393c:	48000400 	.word	0x48000400
 8003940:	48000800 	.word	0x48000800
 8003944:	40013400 	.word	0x40013400
 8003948:	40014000 	.word	0x40014000
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800

08003954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_UART_MspInit+0x7c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d128      	bne.n	80039c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_UART_MspInit+0x80>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <HAL_UART_MspInit+0x80>)
 800397c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <HAL_UART_MspInit+0x80>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <HAL_UART_MspInit+0x80>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_UART_MspInit+0x80>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <HAL_UART_MspInit+0x80>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039a6:	230c      	movs	r3, #12
 80039a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b2:	2303      	movs	r3, #3
 80039b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039b6:	2307      	movs	r3, #7
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ba:	f107 0314 	add.w	r3, r7, #20
 80039be:	4619      	mov	r1, r3
 80039c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c4:	f002 f968 	bl	8005c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039c8:	bf00      	nop
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40004400 	.word	0x40004400
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	2036      	movs	r0, #54	; 0x36
 80039ee:	f001 fee3 	bl	80057b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039f2:	2036      	movs	r0, #54	; 0x36
 80039f4:	f001 fefc 	bl	80057f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <HAL_InitTick+0x9c>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_InitTick+0x9c>)
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	6593      	str	r3, [r2, #88]	; 0x58
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_InitTick+0x9c>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a10:	f107 0210 	add.w	r2, r7, #16
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f003 fa2a 	bl	8006e74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a20:	f003 f9fc 	bl	8006e1c <HAL_RCC_GetPCLK1Freq>
 8003a24:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_InitTick+0xa0>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	3b01      	subs	r3, #1
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a40:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003a54:	4809      	ldr	r0, [pc, #36]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a56:	f004 fcdf 	bl	8008418 <HAL_TIM_Base_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003a60:	4806      	ldr	r0, [pc, #24]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a62:	f004 fd31 	bl	80084c8 <HAL_TIM_Base_Start_IT>
 8003a66:	4603      	mov	r3, r0
 8003a68:	e000      	b.n	8003a6c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3730      	adds	r7, #48	; 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	2000df7c 	.word	0x2000df7c
 8003a80:	40001000 	.word	0x40001000

08003a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <NMI_Handler+0x4>

08003a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <HardFault_Handler+0x4>

08003a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <MemManage_Handler+0x4>

08003a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <BusFault_Handler+0x4>

08003a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <UsageFault_Handler+0x4>

08003aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f002 fab1 	bl	800601c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}

08003abe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f002 faaa 	bl	800601c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}

08003acc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <DMA1_Channel1_IRQHandler+0x10>)
 8003ad2:	f002 f802 	bl	8005ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20004c30 	.word	0x20004c30

08003ae0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003ae4:	4802      	ldr	r0, [pc, #8]	; (8003af0 <DMA1_Channel2_IRQHandler+0x10>)
 8003ae6:	f001 fff8 	bl	8005ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20004ad0 	.word	0x20004ad0

08003af4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8003af8:	4802      	ldr	r0, [pc, #8]	; (8003b04 <DMA1_Channel3_IRQHandler+0x10>)
 8003afa:	f001 ffee 	bl	8005ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2000cdb4 	.word	0x2000cdb4

08003b08 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8003b0c:	4802      	ldr	r0, [pc, #8]	; (8003b18 <DMA1_Channel6_IRQHandler+0x10>)
 8003b0e:	f001 ffe4 	bl	8005ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20004c78 	.word	0x20004c78

08003b1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <TIM6_DAC_IRQHandler+0x38>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <TIM6_DAC_IRQHandler+0x38>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <TIM6_DAC_IRQHandler+0x38>)
 8003b32:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <TIM6_DAC_IRQHandler+0x3c>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <TIM6_DAC_IRQHandler+0x3c>)
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <TIM6_DAC_IRQHandler+0x3c>)
 8003b46:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b48:	4804      	ldr	r0, [pc, #16]	; (8003b5c <TIM6_DAC_IRQHandler+0x40>)
 8003b4a:	f005 fab5 	bl	80090b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20003666 	.word	0x20003666
 8003b58:	20003664 	.word	0x20003664
 8003b5c:	2000df7c 	.word	0x2000df7c

08003b60 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <DMA2_Channel7_IRQHandler+0x10>)
 8003b66:	f001 ffb8 	bl	8005ada <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000366c 	.word	0x2000366c

08003b74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e00a      	b.n	8003b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b86:	f3af 8000 	nop.w
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	60ba      	str	r2, [r7, #8]
 8003b92:	b2ca      	uxtb	r2, r1
 8003b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	dbf0      	blt.n	8003b86 <_read+0x12>
	}

return len;
 8003ba4:	687b      	ldr	r3, [r7, #4]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e009      	b.n	8003bd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	60ba      	str	r2, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fd fe85 	bl	80018d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	dbf1      	blt.n	8003bc0 <_write+0x12>
	}
	return len;
 8003bdc:	687b      	ldr	r3, [r7, #4]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_close>:

int _close(int file)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
	return -1;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_isatty>:

int _isatty(int file)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
	return 1;
 8003c26:	2301      	movs	r3, #1
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <_sbrk+0x5c>)
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <_sbrk+0x60>)
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <_sbrk+0x64>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <_sbrk+0x64>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <_sbrk+0x68>)
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c80:	f00a f81c 	bl	800dcbc <__errno>
 8003c84:	4603      	mov	r3, r0
 8003c86:	220c      	movs	r2, #12
 8003c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8e:	e009      	b.n	8003ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <_sbrk+0x64>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <_sbrk+0x64>)
 8003ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20018000 	.word	0x20018000
 8003cb0:	00000400 	.word	0x00000400
 8003cb4:	200001e8 	.word	0x200001e8
 8003cb8:	20010090 	.word	0x20010090

08003cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <SystemInit+0x5c>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <SystemInit+0x5c>)
 8003cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <SystemInit+0x60>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <SystemInit+0x60>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <SystemInit+0x60>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <SystemInit+0x60>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <SystemInit+0x60>)
 8003ce8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003cec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <SystemInit+0x60>)
 8003cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cf8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <SystemInit+0x60>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <SystemInit+0x60>)
 8003d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <SystemInit+0x60>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	619a      	str	r2, [r3, #24]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_TIM_PWM_PulseFinishedCallback>:
extern TIM_HandleTypeDef htim3;

volatile uint8_t ucDataSentFlag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d10a      	bne.n	8003d46 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
	{
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8003d30:	2100      	movs	r1, #0
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f005 f8d0 	bl	8008ed8 <HAL_TIM_PWM_Stop_DMA>
		HAL_UART_Transmit(&huart2, (uint8_t*)"testzzzz\r\n", sizeof("testzzzz\r\n"), 1000);
 8003d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d3c:	220b      	movs	r2, #11
 8003d3e:	4905      	ldr	r1, [pc, #20]	; (8003d54 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8003d40:	4805      	ldr	r0, [pc, #20]	; (8003d58 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8003d42:	f006 f9f5 	bl	800a130 <HAL_UART_Transmit>

	}
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20004b18 	.word	0x20004b18
 8003d54:	08010320 	.word	0x08010320
 8003d58:	2000ce68 	.word	0x2000ce68

08003d5c <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2260      	movs	r2, #96	; 0x60
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2260      	movs	r2, #96	; 0x60
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	615a      	str	r2, [r3, #20]
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <WS2812B_vSetLED>:



void WS2812B_vSetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex, uint8_t ucRed, uint8_t ucGreen, uint8_t ucBlue)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	4608      	mov	r0, r1
 8003db8:	4611      	mov	r1, r2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	70fb      	strb	r3, [r7, #3]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70bb      	strb	r3, [r7, #2]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	707b      	strb	r3, [r7, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3298      	adds	r2, #152	; 0x98
 8003dce:	78f9      	ldrb	r1, [r7, #3]
 8003dd0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = ucGreen;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	3398      	adds	r3, #152	; 0x98
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	787a      	ldrb	r2, [r7, #1]
 8003de0:	705a      	strb	r2, [r3, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = ucRed;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	3398      	adds	r3, #152	; 0x98
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	78ba      	ldrb	r2, [r7, #2]
 8003dee:	709a      	strb	r2, [r3, #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = ucBlue;
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	3398      	adds	r3, #152	; 0x98
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	7c3a      	ldrb	r2, [r7, #16]
 8003dfc:	70da      	strb	r2, [r3, #3]
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <WS2812B_vResetLED>:


void WS2812B_vResetLED(WS2812BHandle_t *pxWS28182B, uint8_t ucLEDIndex)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
	pxWS28182B->pxLEDData[ucLEDIndex].ucIndex = ucLEDIndex;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3298      	adds	r2, #152	; 0x98
 8003e1c:	78f9      	ldrb	r1, [r7, #3]
 8003e1e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucGreen = 0;
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	3398      	adds	r3, #152	; 0x98
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	705a      	strb	r2, [r3, #1]
	pxWS28182B->pxLEDData[ucLEDIndex].ucRed = 0;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	3398      	adds	r3, #152	; 0x98
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	709a      	strb	r2, [r3, #2]
	pxWS28182B->pxLEDData[ucLEDIndex].ucBlue = 0;
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	3398      	adds	r3, #152	; 0x98
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	2200      	movs	r2, #0
 8003e4a:	70da      	strb	r2, [r3, #3]


	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucIndex = ucLEDIndex;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	32a0      	adds	r2, #160	; 0xa0
 8003e52:	78f9      	ldrb	r1, [r7, #3]
 8003e54:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucGreen = 0;
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	33a0      	adds	r3, #160	; 0xa0
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	2200      	movs	r2, #0
 8003e64:	705a      	strb	r2, [r3, #1]
	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucRed = 0;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	33a0      	adds	r3, #160	; 0xa0
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	2200      	movs	r2, #0
 8003e72:	709a      	strb	r2, [r3, #2]
	pxWS28182B->pxLEDBrightness[ucLEDIndex].ucBlue = 0;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	33a0      	adds	r3, #160	; 0xa0
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	70da      	strb	r2, [r3, #3]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <WS2812B_vResetLEDs>:


void WS2812B_vResetLEDs(WS2812BHandle_t *pxWS28182B)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
	// [!] faster way to reset with memclr
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
 8003e9a:	e00a      	b.n	8003eb2 <WS2812B_vResetLEDs+0x24>
	{
		WS2812B_vResetLED(pxWS28182B, i);
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ffb2 	bl	8003e0a <WS2812B_vResetLED>
	for (int8_t i = 0; i < LED_COUNT; i++)
 8003ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	2b07      	cmp	r3, #7
 8003eb8:	ddf0      	ble.n	8003e9c <WS2812B_vResetLEDs+0xe>
	}
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	0000      	movs	r0, r0
	...

08003ec8 <WS2812B_vSetBrightness>:


// Credits to Controllers Tech
void WS2812B_vSetBrightness(WS2812BHandle_t *pxWS28182B, int brightness)
{
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b2d      	cmp	r3, #45	; 0x2d
 8003ed6:	dd01      	ble.n	8003edc <WS2812B_vSetBrightness+0x14>
 8003ed8:	232d      	movs	r3, #45	; 0x2d
 8003eda:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < LED_COUNT; i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e0a9      	b.n	8004036 <WS2812B_vSetBrightness+0x16e>
	{
		pxWS28182B->pxLEDBrightness[i].ucIndex = pxWS28182B->pxLEDData[i].ucIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	3298      	adds	r2, #152	; 0x98
 8003ee8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	32a0      	adds	r2, #160	; 0xa0
 8003ef2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]

		float angle = 90 - brightness;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8003efc:	ee07 3a90 	vmov	s15, r3
 8003f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f04:	edc7 7a02 	vstr	s15, [r7, #8]
		angle = angle*M_PI / 180;
 8003f08:	68b8      	ldr	r0, [r7, #8]
 8003f0a:	f7fc fb15 	bl	8000538 <__aeabi_f2d>
 8003f0e:	a34f      	add	r3, pc, #316	; (adr r3, 800404c <WS2812B_vSetBrightness+0x184>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fb68 	bl	80005e8 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	4b48      	ldr	r3, [pc, #288]	; (8004048 <WS2812B_vSetBrightness+0x180>)
 8003f26:	f7fc fc89 	bl	800083c <__aeabi_ddiv>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fc fe3b 	bl	8000bac <__aeabi_d2f>
 8003f36:	4603      	mov	r3, r0
 8003f38:	60bb      	str	r3, [r7, #8]
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen)/(tan(angle));
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3398      	adds	r3, #152	; 0x98
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fc fae4 	bl	8000514 <__aeabi_i2d>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	68b8      	ldr	r0, [r7, #8]
 8003f52:	f7fc faf1 	bl	8000538 <__aeabi_f2d>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec43 2b10 	vmov	d0, r2, r3
 8003f5e:	f00b f87f 	bl	800f060 <tan>
 8003f62:	ec53 2b10 	vmov	r2, r3, d0
 8003f66:	4620      	mov	r0, r4
 8003f68:	4629      	mov	r1, r5
 8003f6a:	f7fc fc67 	bl	800083c <__aeabi_ddiv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fc fdf9 	bl	8000b6c <__aeabi_d2uiz>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	b2d9      	uxtb	r1, r3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	33a0      	adds	r3, #160	; 0xa0
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	460a      	mov	r2, r1
 8003f8a:	705a      	strb	r2, [r3, #1]
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed)/(tan(angle));
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3398      	adds	r3, #152	; 0x98
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	789b      	ldrb	r3, [r3, #2]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc fabb 	bl	8000514 <__aeabi_i2d>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	68b8      	ldr	r0, [r7, #8]
 8003fa4:	f7fc fac8 	bl	8000538 <__aeabi_f2d>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	ec43 2b10 	vmov	d0, r2, r3
 8003fb0:	f00b f856 	bl	800f060 <tan>
 8003fb4:	ec53 2b10 	vmov	r2, r3, d0
 8003fb8:	4620      	mov	r0, r4
 8003fba:	4629      	mov	r1, r5
 8003fbc:	f7fc fc3e 	bl	800083c <__aeabi_ddiv>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7fc fdd0 	bl	8000b6c <__aeabi_d2uiz>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	b2d9      	uxtb	r1, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	33a0      	adds	r3, #160	; 0xa0
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	460a      	mov	r2, r1
 8003fdc:	709a      	strb	r2, [r3, #2]
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue)/(tan(angle));
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3398      	adds	r3, #152	; 0x98
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	78db      	ldrb	r3, [r3, #3]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fa92 	bl	8000514 <__aeabi_i2d>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	68b8      	ldr	r0, [r7, #8]
 8003ff6:	f7fc fa9f 	bl	8000538 <__aeabi_f2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	ec43 2b10 	vmov	d0, r2, r3
 8004002:	f00b f82d 	bl	800f060 <tan>
 8004006:	ec53 2b10 	vmov	r2, r3, d0
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc fc15 	bl	800083c <__aeabi_ddiv>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	f7fc fda7 	bl	8000b6c <__aeabi_d2uiz>
 800401e:	4603      	mov	r3, r0
 8004020:	b2d9      	uxtb	r1, r3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	33a0      	adds	r3, #160	; 0xa0
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	460a      	mov	r2, r1
 800402e:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < LED_COUNT; i++)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b07      	cmp	r3, #7
 800403a:	f77f af52 	ble.w	8003ee2 <WS2812B_vSetBrightness+0x1a>
		pxWS28182B->pxLEDBrightness[i].ucGreen = (pxWS28182B->pxLEDData[i].ucGreen);
		pxWS28182B->pxLEDBrightness[i].ucRed = (pxWS28182B->pxLEDData[i].ucRed);
		pxWS28182B->pxLEDBrightness[i].ucBlue = (pxWS28182B->pxLEDData[i].ucBlue);
	}
#endif
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bdb0      	pop	{r4, r5, r7, pc}
 8004048:	40668000 	.word	0x40668000
 800404c:	54442d18 	.word	0x54442d18
 8004050:	400921fb 	.word	0x400921fb

08004054 <WS2812B_vSend>:




void WS2812B_vSend(WS2812BHandle_t *pxWS28182B)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	uint32_t indx = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
	uint32_t color;

	for (int i = 0; i < LED_COUNT; i++)
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e03b      	b.n	80040de <WS2812B_vSend+0x8a>
	{
		color = ((pxWS28182B->pxLEDBrightness[i].ucGreen<<16) | (pxWS28182B->pxLEDBrightness[i].ucRed<<8) | (pxWS28182B->pxLEDBrightness[i].ucBlue));
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	33a0      	adds	r3, #160	; 0xa0
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	041a      	lsls	r2, r3, #16
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	33a0      	adds	r3, #160	; 0xa0
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	789b      	ldrb	r3, [r3, #2]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	431a      	orrs	r2, r3
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	33a0      	adds	r3, #160	; 0xa0
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	78db      	ldrb	r3, [r3, #3]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--)
 8004094:	2317      	movs	r3, #23
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e01b      	b.n	80040d2 <WS2812B_vSend+0x7e>
		{
			if (color & (1 << i))
 800409a:	2201      	movs	r2, #1
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <WS2812B_vSend+0x66>
			{
				pxWS28182B->pwmData[indx] = WS2812B_T1H_TICKS;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	320c      	adds	r2, #12
 80040b2:	2130      	movs	r1, #48	; 0x30
 80040b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80040b8:	e005      	b.n	80040c6 <WS2812B_vSend+0x72>
			}
			else
			{
				pxWS28182B->pwmData[indx] = WS2812B_T0H_TICKS;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	320c      	adds	r2, #12
 80040c0:	2118      	movs	r1, #24
 80040c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			indx++;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3301      	adds	r3, #1
 80040ca:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dae0      	bge.n	800409a <WS2812B_vSend+0x46>
	for (int i = 0; i < LED_COUNT; i++)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	3301      	adds	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b07      	cmp	r3, #7
 80040e2:	ddc0      	ble.n	8004066 <WS2812B_vSend+0x12>
	}


	static char buffer[64];

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", WS2812B_T1H_TICKS), 1000);
 80040e4:	2230      	movs	r2, #48	; 0x30
 80040e6:	491e      	ldr	r1, [pc, #120]	; (8004160 <WS2812B_vSend+0x10c>)
 80040e8:	481e      	ldr	r0, [pc, #120]	; (8004164 <WS2812B_vSend+0x110>)
 80040ea:	f009 feb5 	bl	800de58 <siprintf>
 80040ee:	4603      	mov	r3, r0
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f6:	491b      	ldr	r1, [pc, #108]	; (8004164 <WS2812B_vSend+0x110>)
 80040f8:	481b      	ldr	r0, [pc, #108]	; (8004168 <WS2812B_vSend+0x114>)
 80040fa:	f006 f819 	bl	800a130 <HAL_UART_Transmit>

	for (int i = 0; i < WS2812B_RES_TICKS; i++) // [!]
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e00b      	b.n	800411c <WS2812B_vSend+0xc8>
	{
		pxWS28182B->pwmData[indx] = 0;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	320c      	adds	r2, #12
 800410a:	2100      	movs	r1, #0
 800410c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < WS2812B_RES_TICKS; i++) // [!]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	3301      	adds	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	2b63      	cmp	r3, #99	; 0x63
 8004120:	ddf0      	ble.n	8004104 <WS2812B_vSend+0xb0>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "%d\r\n", WS2812B_T0H_TICKS), 1000);
 8004122:	2218      	movs	r2, #24
 8004124:	490e      	ldr	r1, [pc, #56]	; (8004160 <WS2812B_vSend+0x10c>)
 8004126:	480f      	ldr	r0, [pc, #60]	; (8004164 <WS2812B_vSend+0x110>)
 8004128:	f009 fe96 	bl	800de58 <siprintf>
 800412c:	4603      	mov	r3, r0
 800412e:	b29a      	uxth	r2, r3
 8004130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004134:	490b      	ldr	r1, [pc, #44]	; (8004164 <WS2812B_vSend+0x110>)
 8004136:	480c      	ldr	r0, [pc, #48]	; (8004168 <WS2812B_vSend+0x114>)
 8004138:	f005 fffa 	bl	800a130 <HAL_UART_Transmit>



	HAL_TIM_PWM_Start_DMA(pxWS28182B->pxTimer1, TIM_CHANNEL_1, (uint32_t *)pxWS28182B->pwmData, indx);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f103 0218 	add.w	r2, r3, #24
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	b29b      	uxth	r3, r3
 800414a:	2100      	movs	r1, #0
 800414c:	f004 fcac 	bl	8008aa8 <HAL_TIM_PWM_Start_DMA>
	// [!] semaphore wait or osdelay
	//while (!ucDataSentFlag) {};
	ucDataSentFlag = 0;
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <WS2812B_vSend+0x118>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	0801032c 	.word	0x0801032c
 8004164:	200001f0 	.word	0x200001f0
 8004168:	2000ce68 	.word	0x2000ce68
 800416c:	200001ec 	.word	0x200001ec

08004170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004174:	f7ff fda2 	bl	8003cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004178:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800417a:	e003      	b.n	8004184 <LoopCopyDataInit>

0800417c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800417e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004180:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004182:	3104      	adds	r1, #4

08004184 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004184:	480a      	ldr	r0, [pc, #40]	; (80041b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004188:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800418a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800418c:	d3f6      	bcc.n	800417c <CopyDataInit>
	ldr	r2, =_sbss
 800418e:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004190:	e002      	b.n	8004198 <LoopFillZerobss>

08004192 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004192:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004194:	f842 3b04 	str.w	r3, [r2], #4

08004198 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <LoopForever+0x16>)
	cmp	r2, r3
 800419a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800419c:	d3f9      	bcc.n	8004192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800419e:	f009 fd93 	bl	800dcc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041a2:	f7fd fbab 	bl	80018fc <main>

080041a6 <LoopForever>:

LoopForever:
    b LoopForever
 80041a6:	e7fe      	b.n	80041a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80041a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80041ac:	080106a0 	.word	0x080106a0
	ldr	r0, =_sdata
 80041b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80041b4:	200001c4 	.word	0x200001c4
	ldr	r2, =_sbss
 80041b8:	200001c4 	.word	0x200001c4
	ldr	r3, = _ebss
 80041bc:	20010090 	.word	0x20010090

080041c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80041c0:	e7fe      	b.n	80041c0 <ADC1_2_IRQHandler>
	...

080041c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <HAL_Init+0x3c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <HAL_Init+0x3c>)
 80041d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041da:	2003      	movs	r0, #3
 80041dc:	f001 fae1 	bl	80057a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041e0:	2000      	movs	r0, #0
 80041e2:	f7ff fbf9 	bl	80039d8 <HAL_InitTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	71fb      	strb	r3, [r7, #7]
 80041f0:	e001      	b.n	80041f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041f2:	f7ff f811 	bl	8003218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041f6:	79fb      	ldrb	r3, [r7, #7]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40022000 	.word	0x40022000

08004204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x20>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_IncTick+0x24>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4413      	add	r3, r2
 8004214:	4a04      	ldr	r2, [pc, #16]	; (8004228 <HAL_IncTick+0x24>)
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000144 	.word	0x20000144
 8004228:	2000dfc8 	.word	0x2000dfc8

0800422c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return uwTick;
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_GetTick+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	2000dfc8 	.word	0x2000dfc8

08004244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7ff ffee 	bl	800422c <HAL_GetTick>
 8004250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425c:	d005      	beq.n	800426a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_Delay+0x44>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800426a:	bf00      	nop
 800426c:	f7ff ffde 	bl	800422c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	429a      	cmp	r2, r3
 800427a:	d8f7      	bhi.n	800426c <HAL_Delay+0x28>
  {
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000144 	.word	0x20000144

0800428c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	609a      	str	r2, [r3, #8]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	609a      	str	r2, [r3, #8]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3360      	adds	r3, #96	; 0x60
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <LL_ADC_SetOffset+0x44>)
 8004316:	4013      	ands	r3, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	03fff000 	.word	0x03fff000

0800433c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3360      	adds	r3, #96	; 0x60
 800434a:	461a      	mov	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3360      	adds	r3, #96	; 0x60
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	431a      	orrs	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3330      	adds	r3, #48	; 0x30
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	4413      	add	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	211f      	movs	r1, #31
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	f003 011f 	and.w	r1, r3, #31
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	431a      	orrs	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3314      	adds	r3, #20
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	0e5b      	lsrs	r3, r3, #25
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	4413      	add	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0d1b      	lsrs	r3, r3, #20
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2107      	movs	r1, #7
 800444a:	fa01 f303 	lsl.w	r3, r1, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	401a      	ands	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	0d1b      	lsrs	r3, r3, #20
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448c:	43db      	mvns	r3, r3
 800448e:	401a      	ands	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0318 	and.w	r3, r3, #24
 8004496:	4908      	ldr	r1, [pc, #32]	; (80044b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004498:	40d9      	lsrs	r1, r3
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	400b      	ands	r3, r1
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	0007ffff 	.word	0x0007ffff

080044bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 031f 	and.w	r3, r3, #31
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80044e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6093      	str	r3, [r2, #8]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800450c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004510:	d101      	bne.n	8004516 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004538:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004560:	d101      	bne.n	8004566 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004588:	f043 0201 	orr.w	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <LL_ADC_IsEnabled+0x18>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <LL_ADC_IsEnabled+0x1a>
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d101      	bne.n	8004602 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d101      	bne.n	8004628 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e136      	b.n	80048c0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fe fe01 	bl	8003268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff3f 	bl	80044fc <LL_ADC_IsDeepPowerDownEnabled>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff25 	bl	80044d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ff5a 	bl	800454c <LL_ADC_IsInternalRegulatorEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d115      	bne.n	80046ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff3e 	bl	8004524 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a8:	4b87      	ldr	r3, [pc, #540]	; (80048c8 <HAL_ADC_Init+0x290>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	4a87      	ldr	r2, [pc, #540]	; (80048cc <HAL_ADC_Init+0x294>)
 80046b0:	fba2 2303 	umull	r2, r3, r2, r3
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	3301      	adds	r3, #1
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046bc:	e002      	b.n	80046c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f9      	bne.n	80046be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff3c 	bl	800454c <LL_ADC_IsInternalRegulatorEnabled>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f043 0210 	orr.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff75 	bl	80045ea <LL_ADC_REG_IsConversionOngoing>
 8004700:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 80cf 	bne.w	80048ae <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 80cb 	bne.w	80048ae <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004720:	f043 0202 	orr.w	r2, r3, #2
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff35 	bl	800459c <LL_ADC_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d115      	bne.n	8004764 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004738:	4865      	ldr	r0, [pc, #404]	; (80048d0 <HAL_ADC_Init+0x298>)
 800473a:	f7ff ff2f 	bl	800459c <LL_ADC_IsEnabled>
 800473e:	4604      	mov	r4, r0
 8004740:	4864      	ldr	r0, [pc, #400]	; (80048d4 <HAL_ADC_Init+0x29c>)
 8004742:	f7ff ff2b 	bl	800459c <LL_ADC_IsEnabled>
 8004746:	4603      	mov	r3, r0
 8004748:	431c      	orrs	r4, r3
 800474a:	4863      	ldr	r0, [pc, #396]	; (80048d8 <HAL_ADC_Init+0x2a0>)
 800474c:	f7ff ff26 	bl	800459c <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	4323      	orrs	r3, r4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4619      	mov	r1, r3
 800475e:	485f      	ldr	r0, [pc, #380]	; (80048dc <HAL_ADC_Init+0x2a4>)
 8004760:	f7ff fd94 	bl	800428c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7e5b      	ldrb	r3, [r3, #25]
 8004768:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800476e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004774:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800477a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004782:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d106      	bne.n	80047a0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	3b01      	subs	r3, #1
 8004798:	045b      	lsls	r3, r3, #17
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_ADC_Init+0x2a8>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff08 	bl	80045ea <LL_ADC_REG_IsConversionOngoing>
 80047da:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff15 	bl	8004610 <LL_ADC_INJ_IsConversionOngoing>
 80047e6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13d      	bne.n	800486a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d13a      	bne.n	800486a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047f8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004800:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004810:	f023 0302 	bic.w	r3, r3, #2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	69b9      	ldr	r1, [r7, #24]
 800481a:	430b      	orrs	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004824:	2b01      	cmp	r3, #1
 8004826:	d118      	bne.n	800485a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800483e:	4311      	orrs	r1, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800484a:	430a      	orrs	r2, r1
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	611a      	str	r2, [r3, #16]
 8004858:	e007      	b.n	800486a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10c      	bne.n	800488c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	f023 010f 	bic.w	r1, r3, #15
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	1e5a      	subs	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
 800488a:	e007      	b.n	800489c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 020f 	bic.w	r2, r2, #15
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f023 0303 	bic.w	r3, r3, #3
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
 80048ac:	e007      	b.n	80048be <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048be:	7ffb      	ldrb	r3, [r7, #31]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3724      	adds	r7, #36	; 0x24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd90      	pop	{r4, r7, pc}
 80048c8:	2000013c 	.word	0x2000013c
 80048cc:	053e2d63 	.word	0x053e2d63
 80048d0:	50040000 	.word	0x50040000
 80048d4:	50040100 	.word	0x50040100
 80048d8:	50040200 	.word	0x50040200
 80048dc:	50040300 	.word	0x50040300
 80048e0:	fff0c007 	.word	0xfff0c007

080048e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048f0:	4850      	ldr	r0, [pc, #320]	; (8004a34 <HAL_ADC_Start_DMA+0x150>)
 80048f2:	f7ff fde3 	bl	80044bc <LL_ADC_GetMultimode>
 80048f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fe74 	bl	80045ea <LL_ADC_REG_IsConversionOngoing>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	f040 808e 	bne.w	8004a26 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_ADC_Start_DMA+0x34>
 8004914:	2302      	movs	r3, #2
 8004916:	e089      	b.n	8004a2c <HAL_ADC_Start_DMA+0x148>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d002      	beq.n	8004932 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b09      	cmp	r3, #9
 8004930:	d172      	bne.n	8004a18 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fc98 	bl	8005268 <ADC_Enable>
 8004938:	4603      	mov	r3, r0
 800493a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d165      	bne.n	8004a0e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a37      	ldr	r2, [pc, #220]	; (8004a38 <HAL_ADC_Start_DMA+0x154>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d002      	beq.n	8004966 <HAL_ADC_Start_DMA+0x82>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	e000      	b.n	8004968 <HAL_ADC_Start_DMA+0x84>
 8004966:	4b35      	ldr	r3, [pc, #212]	; (8004a3c <HAL_ADC_Start_DMA+0x158>)
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	4293      	cmp	r3, r2
 800496e:	d002      	beq.n	8004976 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	f023 0206 	bic.w	r2, r3, #6
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	659a      	str	r2, [r3, #88]	; 0x58
 800499a:	e002      	b.n	80049a2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	4a26      	ldr	r2, [pc, #152]	; (8004a40 <HAL_ADC_Start_DMA+0x15c>)
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <HAL_ADC_Start_DMA+0x160>)
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	4a24      	ldr	r2, [pc, #144]	; (8004a48 <HAL_ADC_Start_DMA+0x164>)
 80049b8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	221c      	movs	r2, #28
 80049c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0210 	orr.w	r2, r2, #16
 80049d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3340      	adds	r3, #64	; 0x40
 80049f4:	4619      	mov	r1, r3
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f000 ffcd 	bl	8005998 <HAL_DMA_Start_IT>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fddb 	bl	80045c2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a0c:	e00d      	b.n	8004a2a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a16:	e008      	b.n	8004a2a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a24:	e001      	b.n	8004a2a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
 8004a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	50040300 	.word	0x50040300
 8004a38:	50040100 	.word	0x50040100
 8004a3c:	50040000 	.word	0x50040000
 8004a40:	0800532d 	.word	0x0800532d
 8004a44:	08005405 	.word	0x08005405
 8004a48:	08005421 	.word	0x08005421

08004a4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b0b6      	sub	sp, #216	; 0xd8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x22>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e3c7      	b.n	800523a <HAL_ADC_ConfigChannel+0x7b2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fd97 	bl	80045ea <LL_ADC_REG_IsConversionOngoing>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 83a8 	bne.w	8005214 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d824      	bhi.n	8004b16 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	3b02      	subs	r3, #2
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d81b      	bhi.n	8004b0e <HAL_ADC_ConfigChannel+0x86>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <HAL_ADC_ConfigChannel+0x54>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004af5 	.word	0x08004af5
 8004ae4:	08004afd 	.word	0x08004afd
 8004ae8:	08004b05 	.word	0x08004b05
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	220c      	movs	r2, #12
 8004af0:	605a      	str	r2, [r3, #4]
          break;
 8004af2:	e011      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2212      	movs	r2, #18
 8004af8:	605a      	str	r2, [r3, #4]
          break;
 8004afa:	e00d      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2218      	movs	r2, #24
 8004b00:	605a      	str	r2, [r3, #4]
          break;
 8004b02:	e009      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b0a:	605a      	str	r2, [r3, #4]
          break;
 8004b0c:	e004      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2206      	movs	r2, #6
 8004b12:	605a      	str	r2, [r3, #4]
          break;
 8004b14:	e000      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b16:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	f7ff fc4d 	bl	80043c4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fd5b 	bl	80045ea <LL_ADC_REG_IsConversionOngoing>
 8004b34:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fd67 	bl	8004610 <LL_ADC_INJ_IsConversionOngoing>
 8004b42:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 81a6 	bne.w	8004e9c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f040 81a1 	bne.w	8004e9c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f7ff fc58 	bl	800441c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	08db      	lsrs	r3, r3, #3
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6919      	ldr	r1, [r3, #16]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b9e:	f7ff fba9 	bl	80042f4 <LL_ADC_SetOffset>
 8004ba2:	e17b      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fbc6 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x148>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fbbb 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	0e9b      	lsrs	r3, r3, #26
 8004bca:	f003 021f 	and.w	r2, r3, #31
 8004bce:	e01e      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x186>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fbb0 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004be6:	fa93 f3a3 	rbit	r3, r3
 8004bea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e004      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004c02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x19e>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	0e9b      	lsrs	r3, r3, #26
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	e018      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x1d0>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c32:	fa93 f3a3 	rbit	r3, r3
 8004c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004c4a:	2320      	movs	r3, #32
 8004c4c:	e004      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004c4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c52:	fab3 f383 	clz	r3, r3
 8004c56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d106      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fb7f 	bl	8004368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fb63 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x20e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff fb58 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	0e9b      	lsrs	r3, r3, #26
 8004c90:	f003 021f 	and.w	r2, r3, #31
 8004c94:	e01e      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x24c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff fb4d 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cac:	fa93 f3a3 	rbit	r3, r3
 8004cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004cb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	e004      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x264>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	0e9b      	lsrs	r3, r3, #26
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	e018      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x296>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d00:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d10:	2320      	movs	r3, #32
 8004d12:	e004      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d18:	fab3 f383 	clz	r3, r3
 8004d1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d106      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fb1c 	bl	8004368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2102      	movs	r1, #2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fb00 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x2d4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff faf5 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004d52:	4603      	mov	r3, r0
 8004d54:	0e9b      	lsrs	r3, r3, #26
 8004d56:	f003 021f 	and.w	r2, r3, #31
 8004d5a:	e01e      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x312>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2102      	movs	r1, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff faea 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004d82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004d8a:	2320      	movs	r3, #32
 8004d8c:	e004      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004d8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d92:	fab3 f383 	clz	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x32a>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	0e9b      	lsrs	r3, r3, #26
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	e016      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x358>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e004      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d106      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2102      	movs	r1, #2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fabb 	bl	8004368 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2103      	movs	r1, #3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fa9f 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x396>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fa94 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004e14:	4603      	mov	r3, r0
 8004e16:	0e9b      	lsrs	r3, r3, #26
 8004e18:	f003 021f 	and.w	r2, r3, #31
 8004e1c:	e017      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x3c6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2103      	movs	r1, #3
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fa89 	bl	800433c <LL_ADC_GetOffsetChannel>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e38:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004e40:	2320      	movs	r3, #32
 8004e42:	e003      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e46:	fab3 f383 	clz	r3, r3
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x3de>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	0e9b      	lsrs	r3, r3, #26
 8004e60:	f003 031f 	and.w	r3, r3, #31
 8004e64:	e011      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x402>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004e7e:	2320      	movs	r3, #32
 8004e80:	e003      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d106      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	2103      	movs	r1, #3
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fa66 	bl	8004368 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fb7b 	bl	800459c <LL_ADC_IsEnabled>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 813f 	bne.w	800512c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7ff fada 	bl	8004474 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a8e      	ldr	r2, [pc, #568]	; (8005100 <HAL_ADC_ConfigChannel+0x678>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f040 8130 	bne.w	800512c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x46c>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0e9b      	lsrs	r3, r3, #26
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	2b09      	cmp	r3, #9
 8004eea:	bf94      	ite	ls
 8004eec:	2301      	movls	r3, #1
 8004eee:	2300      	movhi	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e019      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x4a0>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f04:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	e003      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2b09      	cmp	r3, #9
 8004f20:	bf94      	ite	ls
 8004f22:	2301      	movls	r3, #1
 8004f24:	2300      	movhi	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d079      	beq.n	8005020 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x4c0>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	0e9b      	lsrs	r3, r3, #26
 8004f3e:	3301      	adds	r3, #1
 8004f40:	069b      	lsls	r3, r3, #26
 8004f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f46:	e015      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x4ec>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f50:	fa93 f3a3 	rbit	r3, r3
 8004f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004f60:	2320      	movs	r3, #32
 8004f62:	e003      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f66:	fab3 f383 	clz	r3, r3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	069b      	lsls	r3, r3, #26
 8004f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x50c>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	3301      	adds	r3, #1
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	e017      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x53c>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9c:	fa93 f3a3 	rbit	r3, r3
 8004fa0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004fac:	2320      	movs	r3, #32
 8004fae:	e003      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb2:	fab3 f383 	clz	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x562>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	0e9b      	lsrs	r3, r3, #26
 8004fda:	3301      	adds	r3, #1
 8004fdc:	f003 021f 	and.w	r2, r3, #31
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	051b      	lsls	r3, r3, #20
 8004fe8:	e018      	b.n	800501c <HAL_ADC_ConfigChannel+0x594>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005002:	2320      	movs	r3, #32
 8005004:	e003      	b.n	800500e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005008:	fab3 f383 	clz	r3, r3
 800500c:	b2db      	uxtb	r3, r3
 800500e:	3301      	adds	r3, #1
 8005010:	f003 021f 	and.w	r2, r3, #31
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800501c:	430b      	orrs	r3, r1
 800501e:	e080      	b.n	8005122 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_ADC_ConfigChannel+0x5b4>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0e9b      	lsrs	r3, r3, #26
 8005032:	3301      	adds	r3, #1
 8005034:	069b      	lsls	r3, r3, #26
 8005036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800503a:	e015      	b.n	8005068 <HAL_ADC_ConfigChannel+0x5e0>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	fa93 f3a3 	rbit	r3, r3
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005054:	2320      	movs	r3, #32
 8005056:	e003      	b.n	8005060 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3301      	adds	r3, #1
 8005062:	069b      	lsls	r3, r3, #26
 8005064:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <HAL_ADC_ConfigChannel+0x600>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0e9b      	lsrs	r3, r3, #26
 800507a:	3301      	adds	r3, #1
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	2101      	movs	r1, #1
 8005082:	fa01 f303 	lsl.w	r3, r1, r3
 8005086:	e017      	b.n	80050b8 <HAL_ADC_ConfigChannel+0x630>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	fa93 f3a3 	rbit	r3, r3
 8005094:	61fb      	str	r3, [r7, #28]
  return result;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80050a0:	2320      	movs	r3, #32
 80050a2:	e003      	b.n	80050ac <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	fab3 f383 	clz	r3, r3
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	3301      	adds	r3, #1
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2101      	movs	r1, #1
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	ea42 0103 	orr.w	r1, r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x65c>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	0e9b      	lsrs	r3, r3, #26
 80050ce:	3301      	adds	r3, #1
 80050d0:	f003 021f 	and.w	r2, r3, #31
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	3b1e      	subs	r3, #30
 80050dc:	051b      	lsls	r3, r3, #20
 80050de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050e2:	e01d      	b.n	8005120 <HAL_ADC_ConfigChannel+0x698>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	fa93 f3a3 	rbit	r3, r3
 80050f0:	613b      	str	r3, [r7, #16]
  return result;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d103      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80050fc:	2320      	movs	r3, #32
 80050fe:	e005      	b.n	800510c <HAL_ADC_ConfigChannel+0x684>
 8005100:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	fab3 f383 	clz	r3, r3
 800510a:	b2db      	uxtb	r3, r3
 800510c:	3301      	adds	r3, #1
 800510e:	f003 021f 	and.w	r2, r3, #31
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	3b1e      	subs	r3, #30
 800511a:	051b      	lsls	r3, r3, #20
 800511c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005120:	430b      	orrs	r3, r1
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	4619      	mov	r1, r3
 8005128:	f7ff f978 	bl	800441c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b44      	ldr	r3, [pc, #272]	; (8005244 <HAL_ADC_ConfigChannel+0x7bc>)
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d07a      	beq.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005138:	4843      	ldr	r0, [pc, #268]	; (8005248 <HAL_ADC_ConfigChannel+0x7c0>)
 800513a:	f7ff f8cd 	bl	80042d8 <LL_ADC_GetCommonPathInternalCh>
 800513e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a41      	ldr	r2, [pc, #260]	; (800524c <HAL_ADC_ConfigChannel+0x7c4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d12c      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800514c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d126      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3c      	ldr	r2, [pc, #240]	; (8005250 <HAL_ADC_ConfigChannel+0x7c8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_ADC_ConfigChannel+0x6e4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a3b      	ldr	r2, [pc, #236]	; (8005254 <HAL_ADC_ConfigChannel+0x7cc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d15d      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800516c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005174:	4619      	mov	r1, r3
 8005176:	4834      	ldr	r0, [pc, #208]	; (8005248 <HAL_ADC_ConfigChannel+0x7c0>)
 8005178:	f7ff f89b 	bl	80042b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800517c:	4b36      	ldr	r3, [pc, #216]	; (8005258 <HAL_ADC_ConfigChannel+0x7d0>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	099b      	lsrs	r3, r3, #6
 8005182:	4a36      	ldr	r2, [pc, #216]	; (800525c <HAL_ADC_ConfigChannel+0x7d4>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	099b      	lsrs	r3, r3, #6
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005196:	e002      	b.n	800519e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f9      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051a4:	e040      	b.n	8005228 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <HAL_ADC_ConfigChannel+0x7d8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d118      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0x75a>
 80051b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d112      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a23      	ldr	r2, [pc, #140]	; (8005250 <HAL_ADC_ConfigChannel+0x7c8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d004      	beq.n	80051d0 <HAL_ADC_ConfigChannel+0x748>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_ADC_ConfigChannel+0x7cc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d12d      	bne.n	800522c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051d8:	4619      	mov	r1, r3
 80051da:	481b      	ldr	r0, [pc, #108]	; (8005248 <HAL_ADC_ConfigChannel+0x7c0>)
 80051dc:	f7ff f869 	bl	80042b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051e0:	e024      	b.n	800522c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <HAL_ADC_ConfigChannel+0x7dc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d120      	bne.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d11a      	bne.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a14      	ldr	r2, [pc, #80]	; (8005250 <HAL_ADC_ConfigChannel+0x7c8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d115      	bne.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800520a:	4619      	mov	r1, r3
 800520c:	480e      	ldr	r0, [pc, #56]	; (8005248 <HAL_ADC_ConfigChannel+0x7c0>)
 800520e:	f7ff f850 	bl	80042b2 <LL_ADC_SetCommonPathInternalCh>
 8005212:	e00c      	b.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005226:	e002      	b.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005228:	bf00      	nop
 800522a:	e000      	b.n	800522e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800522c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005236:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800523a:	4618      	mov	r0, r3
 800523c:	37d8      	adds	r7, #216	; 0xd8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	80080000 	.word	0x80080000
 8005248:	50040300 	.word	0x50040300
 800524c:	c7520000 	.word	0xc7520000
 8005250:	50040000 	.word	0x50040000
 8005254:	50040200 	.word	0x50040200
 8005258:	2000013c 	.word	0x2000013c
 800525c:	053e2d63 	.word	0x053e2d63
 8005260:	cb840000 	.word	0xcb840000
 8005264:	80000001 	.word	0x80000001

08005268 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff f991 	bl	800459c <LL_ADC_IsEnabled>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d14d      	bne.n	800531c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	4b28      	ldr	r3, [pc, #160]	; (8005328 <ADC_Enable+0xc0>)
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	f043 0210 	orr.w	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f043 0201 	orr.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e039      	b.n	800531e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f960 	bl	8004574 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052b4:	f7fe ffba 	bl	800422c <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ba:	e028      	b.n	800530e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff f96b 	bl	800459c <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff f94f 	bl	8004574 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052d6:	f7fe ffa9 	bl	800422c <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d914      	bls.n	800530e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d00d      	beq.n	800530e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	f043 0210 	orr.w	r2, r3, #16
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e007      	b.n	800531e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d1cf      	bne.n	80052bc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	8000003f 	.word	0x8000003f

0800532c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d14b      	bne.n	80053de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d021      	beq.n	80053a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff f81a 	bl	800439e <LL_ADC_REG_IsTriggerSourceSWStart>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d032      	beq.n	80053d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d12b      	bne.n	80053d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11f      	bne.n	80053d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
 80053a2:	e018      	b.n	80053d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d111      	bne.n	80053d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff fb38 	bl	8004a4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053dc:	e00e      	b.n	80053fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fb42 	bl	8004a74 <HAL_ADC_ErrorCallback>
}
 80053f0:	e004      	b.n	80053fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff fb24 	bl	8004a60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f043 0204 	orr.w	r2, r3, #4
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff fb14 	bl	8004a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <LL_ADC_IsEnabled>:
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <LL_ADC_IsEnabled+0x18>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <LL_ADC_IsEnabled+0x1a>
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <LL_ADC_REG_IsConversionOngoing>:
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d101      	bne.n	8005492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b09f      	sub	sp, #124	; 0x7c
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e093      	b.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80054c6:	2300      	movs	r3, #0
 80054c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80054ca:	2300      	movs	r3, #0
 80054cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a47      	ldr	r2, [pc, #284]	; (80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d102      	bne.n	80054de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80054d8:	4b46      	ldr	r3, [pc, #280]	; (80055f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	e001      	b.n	80054e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e072      	b.n	80055e6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff ffb9 	bl	800547a <LL_ADC_REG_IsConversionOngoing>
 8005508:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ffb3 	bl	800547a <LL_ADC_REG_IsConversionOngoing>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d154      	bne.n	80055c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800551a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800551c:	2b00      	cmp	r3, #0
 800551e:	d151      	bne.n	80055c4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005520:	4b35      	ldr	r3, [pc, #212]	; (80055f8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005522:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02c      	beq.n	8005586 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800553e:	035b      	lsls	r3, r3, #13
 8005540:	430b      	orrs	r3, r1
 8005542:	431a      	orrs	r2, r3
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005548:	4829      	ldr	r0, [pc, #164]	; (80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800554a:	f7ff ff83 	bl	8005454 <LL_ADC_IsEnabled>
 800554e:	4604      	mov	r4, r0
 8005550:	4828      	ldr	r0, [pc, #160]	; (80055f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005552:	f7ff ff7f 	bl	8005454 <LL_ADC_IsEnabled>
 8005556:	4603      	mov	r3, r0
 8005558:	431c      	orrs	r4, r3
 800555a:	4828      	ldr	r0, [pc, #160]	; (80055fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800555c:	f7ff ff7a 	bl	8005454 <LL_ADC_IsEnabled>
 8005560:	4603      	mov	r3, r0
 8005562:	4323      	orrs	r3, r4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d137      	bne.n	80055d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005570:	f023 030f 	bic.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	6811      	ldr	r1, [r2, #0]
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	430a      	orrs	r2, r1
 800557e:	431a      	orrs	r2, r3
 8005580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005582:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005584:	e028      	b.n	80055d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800558e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005590:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005592:	4817      	ldr	r0, [pc, #92]	; (80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005594:	f7ff ff5e 	bl	8005454 <LL_ADC_IsEnabled>
 8005598:	4604      	mov	r4, r0
 800559a:	4816      	ldr	r0, [pc, #88]	; (80055f4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800559c:	f7ff ff5a 	bl	8005454 <LL_ADC_IsEnabled>
 80055a0:	4603      	mov	r3, r0
 80055a2:	431c      	orrs	r4, r3
 80055a4:	4815      	ldr	r0, [pc, #84]	; (80055fc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80055a6:	f7ff ff55 	bl	8005454 <LL_ADC_IsEnabled>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4323      	orrs	r3, r4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d112      	bne.n	80055d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80055ba:	f023 030f 	bic.w	r3, r3, #15
 80055be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055c2:	e009      	b.n	80055d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c8:	f043 0220 	orr.w	r2, r3, #32
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80055d6:	e000      	b.n	80055da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80055e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	377c      	adds	r7, #124	; 0x7c
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd90      	pop	{r4, r7, pc}
 80055ee:	bf00      	nop
 80055f0:	50040000 	.word	0x50040000
 80055f4:	50040100 	.word	0x50040100
 80055f8:	50040300 	.word	0x50040300
 80055fc:	50040200 	.word	0x50040200

08005600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <__NVIC_SetPriorityGrouping+0x44>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800561c:	4013      	ands	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800562c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005632:	4a04      	ldr	r2, [pc, #16]	; (8005644 <__NVIC_SetPriorityGrouping+0x44>)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	60d3      	str	r3, [r2, #12]
}
 8005638:	bf00      	nop
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	e000ed00 	.word	0xe000ed00

08005648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800564c:	4b04      	ldr	r3, [pc, #16]	; (8005660 <__NVIC_GetPriorityGrouping+0x18>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	f003 0307 	and.w	r3, r3, #7
}
 8005656:	4618      	mov	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	2b00      	cmp	r3, #0
 8005674:	db0b      	blt.n	800568e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	f003 021f 	and.w	r2, r3, #31
 800567c:	4907      	ldr	r1, [pc, #28]	; (800569c <__NVIC_EnableIRQ+0x38>)
 800567e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	2001      	movs	r0, #1
 8005686:	fa00 f202 	lsl.w	r2, r0, r2
 800568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000e100 	.word	0xe000e100

080056a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	db12      	blt.n	80056d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	f003 021f 	and.w	r2, r3, #31
 80056b8:	490a      	ldr	r1, [pc, #40]	; (80056e4 <__NVIC_DisableIRQ+0x44>)
 80056ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2001      	movs	r0, #1
 80056c2:	fa00 f202 	lsl.w	r2, r0, r2
 80056c6:	3320      	adds	r3, #32
 80056c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80056cc:	f3bf 8f4f 	dsb	sy
}
 80056d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056d2:	f3bf 8f6f 	isb	sy
}
 80056d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000e100 	.word	0xe000e100

080056e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	4603      	mov	r3, r0
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db0a      	blt.n	8005712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	490c      	ldr	r1, [pc, #48]	; (8005734 <__NVIC_SetPriority+0x4c>)
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	0112      	lsls	r2, r2, #4
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	440b      	add	r3, r1
 800570c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005710:	e00a      	b.n	8005728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4908      	ldr	r1, [pc, #32]	; (8005738 <__NVIC_SetPriority+0x50>)
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	3b04      	subs	r3, #4
 8005720:	0112      	lsls	r2, r2, #4
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	440b      	add	r3, r1
 8005726:	761a      	strb	r2, [r3, #24]
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000e100 	.word	0xe000e100
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f1c3 0307 	rsb	r3, r3, #7
 8005756:	2b04      	cmp	r3, #4
 8005758:	bf28      	it	cs
 800575a:	2304      	movcs	r3, #4
 800575c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3304      	adds	r3, #4
 8005762:	2b06      	cmp	r3, #6
 8005764:	d902      	bls.n	800576c <NVIC_EncodePriority+0x30>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3b03      	subs	r3, #3
 800576a:	e000      	b.n	800576e <NVIC_EncodePriority+0x32>
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	43da      	mvns	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	401a      	ands	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	43d9      	mvns	r1, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005794:	4313      	orrs	r3, r2
         );
}
 8005796:	4618      	mov	r0, r3
 8005798:	3724      	adds	r7, #36	; 0x24
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ff28 	bl	8005600 <__NVIC_SetPriorityGrouping>
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057ca:	f7ff ff3d 	bl	8005648 <__NVIC_GetPriorityGrouping>
 80057ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	6978      	ldr	r0, [r7, #20]
 80057d6:	f7ff ffb1 	bl	800573c <NVIC_EncodePriority>
 80057da:	4602      	mov	r2, r0
 80057dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff ff80 	bl	80056e8 <__NVIC_SetPriority>
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	4603      	mov	r3, r0
 80057f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff30 	bl	8005664 <__NVIC_EnableIRQ>
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ff40 	bl	80056a0 <__NVIC_DisableIRQ>
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e098      	b.n	800596c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	4b4d      	ldr	r3, [pc, #308]	; (8005978 <HAL_DMA_Init+0x150>)
 8005842:	429a      	cmp	r2, r3
 8005844:	d80f      	bhi.n	8005866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	4b4b      	ldr	r3, [pc, #300]	; (800597c <HAL_DMA_Init+0x154>)
 800584e:	4413      	add	r3, r2
 8005850:	4a4b      	ldr	r2, [pc, #300]	; (8005980 <HAL_DMA_Init+0x158>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	009a      	lsls	r2, r3, #2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a48      	ldr	r2, [pc, #288]	; (8005984 <HAL_DMA_Init+0x15c>)
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
 8005864:	e00e      	b.n	8005884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b46      	ldr	r3, [pc, #280]	; (8005988 <HAL_DMA_Init+0x160>)
 800586e:	4413      	add	r3, r2
 8005870:	4a43      	ldr	r2, [pc, #268]	; (8005980 <HAL_DMA_Init+0x158>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	009a      	lsls	r2, r3, #2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a42      	ldr	r2, [pc, #264]	; (800598c <HAL_DMA_Init+0x164>)
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058de:	d039      	beq.n	8005954 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <HAL_DMA_Init+0x15c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d11a      	bne.n	8005920 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058ea:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_DMA_Init+0x168>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f003 031c 	and.w	r3, r3, #28
 80058f6:	210f      	movs	r1, #15
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	4924      	ldr	r1, [pc, #144]	; (8005990 <HAL_DMA_Init+0x168>)
 8005900:	4013      	ands	r3, r2
 8005902:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005904:	4b22      	ldr	r3, [pc, #136]	; (8005990 <HAL_DMA_Init+0x168>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	f003 031c 	and.w	r3, r3, #28
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	491d      	ldr	r1, [pc, #116]	; (8005990 <HAL_DMA_Init+0x168>)
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]
 800591e:	e019      	b.n	8005954 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <HAL_DMA_Init+0x16c>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	f003 031c 	and.w	r3, r3, #28
 800592c:	210f      	movs	r1, #15
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	4917      	ldr	r1, [pc, #92]	; (8005994 <HAL_DMA_Init+0x16c>)
 8005936:	4013      	ands	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800593a:	4b16      	ldr	r3, [pc, #88]	; (8005994 <HAL_DMA_Init+0x16c>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f003 031c 	and.w	r3, r3, #28
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	4911      	ldr	r1, [pc, #68]	; (8005994 <HAL_DMA_Init+0x16c>)
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40020407 	.word	0x40020407
 800597c:	bffdfff8 	.word	0xbffdfff8
 8005980:	cccccccd 	.word	0xcccccccd
 8005984:	40020000 	.word	0x40020000
 8005988:	bffdfbf8 	.word	0xbffdfbf8
 800598c:	40020400 	.word	0x40020400
 8005990:	400200a8 	.word	0x400200a8
 8005994:	400204a8 	.word	0x400204a8

08005998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_DMA_Start_IT+0x20>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e04b      	b.n	8005a50 <HAL_DMA_Start_IT+0xb8>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d13a      	bne.n	8005a42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f921 	bl	8005c38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 020e 	orr.w	r2, r2, #14
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e00f      	b.n	8005a30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0204 	bic.w	r2, r2, #4
 8005a1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 020a 	orr.w	r2, r2, #10
 8005a2e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	e005      	b.n	8005a4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d005      	beq.n	8005a7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2204      	movs	r2, #4
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
 8005a7a:	e029      	b.n	8005ad0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 020e 	bic.w	r2, r2, #14
 8005a8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f003 021c 	and.w	r2, r3, #28
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005aae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
    }
  }
  return status;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f003 031c 	and.w	r3, r3, #28
 8005afa:	2204      	movs	r2, #4
 8005afc:	409a      	lsls	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4013      	ands	r3, r2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d026      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x7a>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d021      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0204 	bic.w	r2, r2, #4
 8005b2c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b32:	f003 021c 	and.w	r2, r3, #28
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	2104      	movs	r1, #4
 8005b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b40:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d071      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005b52:	e06c      	b.n	8005c2e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b58:	f003 031c 	and.w	r3, r3, #28
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d02e      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0xec>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d029      	beq.n	8005bc6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 020a 	bic.w	r2, r2, #10
 8005b8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9c:	f003 021c 	and.w	r2, r3, #28
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8005baa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d038      	beq.n	8005c2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005bc4:	e033      	b.n	8005c2e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f003 031c 	and.w	r3, r3, #28
 8005bce:	2208      	movs	r2, #8
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d02a      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x156>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d025      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 020e 	bic.w	r2, r2, #14
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	f003 021c 	and.w	r2, r3, #28
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	2101      	movs	r1, #1
 8005c02:	fa01 f202 	lsl.w	r2, r1, r2
 8005c06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
}
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f003 021c 	and.w	r2, r3, #28
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2101      	movs	r1, #1
 8005c54:	fa01 f202 	lsl.w	r2, r1, r2
 8005c58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d108      	bne.n	8005c7c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c7a:	e007      	b.n	8005c8c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	60da      	str	r2, [r3, #12]
}
 8005c8c:	bf00      	nop
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ca6:	e17f      	b.n	8005fa8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	2101      	movs	r1, #1
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8171 	beq.w	8005fa2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_GPIO_Init+0x48>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d007      	beq.n	8005ce0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cd4:	2b11      	cmp	r3, #17
 8005cd6:	d003      	beq.n	8005ce0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b12      	cmp	r3, #18
 8005cde:	d130      	bne.n	8005d42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	2203      	movs	r2, #3
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d16:	2201      	movs	r2, #1
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4013      	ands	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 0201 	and.w	r2, r3, #1
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d118      	bne.n	8005d80 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005d54:	2201      	movs	r2, #1
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	08db      	lsrs	r3, r3, #3
 8005d6a:	f003 0201 	and.w	r2, r3, #1
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4013      	ands	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d003      	beq.n	8005dc0 <HAL_GPIO_Init+0x128>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b12      	cmp	r3, #18
 8005dbe:	d123      	bne.n	8005e08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	08da      	lsrs	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3208      	adds	r2, #8
 8005dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	220f      	movs	r2, #15
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4013      	ands	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	08da      	lsrs	r2, r3, #3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3208      	adds	r2, #8
 8005e02:	6939      	ldr	r1, [r7, #16]
 8005e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	2203      	movs	r2, #3
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 0203 	and.w	r2, r3, #3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80ac 	beq.w	8005fa2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e4a:	4b5f      	ldr	r3, [pc, #380]	; (8005fc8 <HAL_GPIO_Init+0x330>)
 8005e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4e:	4a5e      	ldr	r2, [pc, #376]	; (8005fc8 <HAL_GPIO_Init+0x330>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	6613      	str	r3, [r2, #96]	; 0x60
 8005e56:	4b5c      	ldr	r3, [pc, #368]	; (8005fc8 <HAL_GPIO_Init+0x330>)
 8005e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005e62:	4a5a      	ldr	r2, [pc, #360]	; (8005fcc <HAL_GPIO_Init+0x334>)
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	089b      	lsrs	r3, r3, #2
 8005e68:	3302      	adds	r3, #2
 8005e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	220f      	movs	r2, #15
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e8c:	d025      	beq.n	8005eda <HAL_GPIO_Init+0x242>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a4f      	ldr	r2, [pc, #316]	; (8005fd0 <HAL_GPIO_Init+0x338>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d01f      	beq.n	8005ed6 <HAL_GPIO_Init+0x23e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a4e      	ldr	r2, [pc, #312]	; (8005fd4 <HAL_GPIO_Init+0x33c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d019      	beq.n	8005ed2 <HAL_GPIO_Init+0x23a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a4d      	ldr	r2, [pc, #308]	; (8005fd8 <HAL_GPIO_Init+0x340>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_GPIO_Init+0x236>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a4c      	ldr	r2, [pc, #304]	; (8005fdc <HAL_GPIO_Init+0x344>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00d      	beq.n	8005eca <HAL_GPIO_Init+0x232>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a4b      	ldr	r2, [pc, #300]	; (8005fe0 <HAL_GPIO_Init+0x348>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d007      	beq.n	8005ec6 <HAL_GPIO_Init+0x22e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <HAL_GPIO_Init+0x34c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d101      	bne.n	8005ec2 <HAL_GPIO_Init+0x22a>
 8005ebe:	2306      	movs	r3, #6
 8005ec0:	e00c      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005ec2:	2307      	movs	r3, #7
 8005ec4:	e00a      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	e008      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	e006      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e004      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e002      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_GPIO_Init+0x244>
 8005eda:	2300      	movs	r3, #0
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	f002 0203 	and.w	r2, r2, #3
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	4093      	lsls	r3, r2
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005eec:	4937      	ldr	r1, [pc, #220]	; (8005fcc <HAL_GPIO_Init+0x334>)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005efa:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f1e:	4a32      	ldr	r2, [pc, #200]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005f24:	4b30      	ldr	r3, [pc, #192]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4013      	ands	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f48:	4a27      	ldr	r2, [pc, #156]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f72:	4a1d      	ldr	r2, [pc, #116]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f78:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f9c:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <HAL_GPIO_Init+0x350>)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f47f ae78 	bne.w	8005ca8 <HAL_GPIO_Init+0x10>
  }
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	48000400 	.word	0x48000400
 8005fd4:	48000800 	.word	0x48000800
 8005fd8:	48000c00 	.word	0x48000c00
 8005fdc:	48001000 	.word	0x48001000
 8005fe0:	48001400 	.word	0x48001400
 8005fe4:	48001800 	.word	0x48001800
 8005fe8:	40010400 	.word	0x40010400

08005fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	807b      	strh	r3, [r7, #2]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ffc:	787b      	ldrb	r3, [r7, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006002:	887a      	ldrh	r2, [r7, #2]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006008:	e002      	b.n	8006010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800600a:	887a      	ldrh	r2, [r7, #2]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006032:	4a05      	ldr	r2, [pc, #20]	; (8006048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	4618      	mov	r0, r3
 800603c:	f7fc fa7c 	bl	8002538 <HAL_GPIO_EXTI_Callback>
  }
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40010400 	.word	0x40010400

0800604c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e081      	b.n	8006162 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fd f966 	bl	8003344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2224      	movs	r2, #36	; 0x24
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800609c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d107      	bne.n	80060c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c2:	609a      	str	r2, [r3, #8]
 80060c4:	e006      	b.n	80060d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d104      	bne.n	80060e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006108:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	ea42 0103 	orr.w	r1, r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	021a      	lsls	r2, r3, #8
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69d9      	ldr	r1, [r3, #28]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b20      	cmp	r3, #32
 800617e:	d138      	bne.n	80061f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800618a:	2302      	movs	r3, #2
 800618c:	e032      	b.n	80061f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2224      	movs	r2, #36	; 0x24
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b20      	cmp	r3, #32
 8006214:	d139      	bne.n	800628a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800621c:	2b01      	cmp	r3, #1
 800621e:	d101      	bne.n	8006224 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006220:	2302      	movs	r3, #2
 8006222:	e033      	b.n	800628c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006252:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e000      	b.n	800628c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800628a:	2302      	movs	r3, #2
  }
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40007000 	.word	0x40007000

080062b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c2:	d130      	bne.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062c4:	4b23      	ldr	r3, [pc, #140]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d0:	d038      	beq.n	8006344 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062d2:	4b20      	ldr	r3, [pc, #128]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062da:	4a1e      	ldr	r2, [pc, #120]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062e2:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2232      	movs	r2, #50	; 0x32
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	0c9b      	lsrs	r3, r3, #18
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062f8:	e002      	b.n	8006300 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630c:	d102      	bne.n	8006314 <HAL_PWREx_ControlVoltageScaling+0x60>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f2      	bne.n	80062fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800631c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006320:	d110      	bne.n	8006344 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e00f      	b.n	8006346 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800632e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006332:	d007      	beq.n	8006344 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800633c:	4a05      	ldr	r2, [pc, #20]	; (8006354 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800633e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006342:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40007000 	.word	0x40007000
 8006358:	2000013c 	.word	0x2000013c
 800635c:	431bde83 	.word	0x431bde83

08006360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e3d4      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006372:	4ba1      	ldr	r3, [pc, #644]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800637c:	4b9e      	ldr	r3, [pc, #632]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80e4 	beq.w	800655c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_RCC_OscConfig+0x4a>
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b0c      	cmp	r3, #12
 800639e:	f040 808b 	bne.w	80064b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	f040 8087 	bne.w	80064b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063aa:	4b93      	ldr	r3, [pc, #588]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_RCC_OscConfig+0x62>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e3ac      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1a      	ldr	r2, [r3, #32]
 80063c6:	4b8c      	ldr	r3, [pc, #560]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <HAL_RCC_OscConfig+0x7c>
 80063d2:	4b89      	ldr	r3, [pc, #548]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063da:	e005      	b.n	80063e8 <HAL_RCC_OscConfig+0x88>
 80063dc:	4b86      	ldr	r3, [pc, #536]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80063de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063e2:	091b      	lsrs	r3, r3, #4
 80063e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d223      	bcs.n	8006434 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fd71 	bl	8006ed8 <RCC_SetFlashLatencyFromMSIRange>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e38d      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006400:	4b7d      	ldr	r3, [pc, #500]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a7c      	ldr	r2, [pc, #496]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006406:	f043 0308 	orr.w	r3, r3, #8
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	4b7a      	ldr	r3, [pc, #488]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4977      	ldr	r1, [pc, #476]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800641e:	4b76      	ldr	r3, [pc, #472]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	4972      	ldr	r1, [pc, #456]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800642e:	4313      	orrs	r3, r2
 8006430:	604b      	str	r3, [r1, #4]
 8006432:	e025      	b.n	8006480 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006434:	4b70      	ldr	r3, [pc, #448]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a6f      	ldr	r2, [pc, #444]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800643a:	f043 0308 	orr.w	r3, r3, #8
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	496a      	ldr	r1, [pc, #424]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800644e:	4313      	orrs	r3, r2
 8006450:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006452:	4b69      	ldr	r3, [pc, #420]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	4965      	ldr	r1, [pc, #404]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006462:	4313      	orrs	r3, r2
 8006464:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fd31 	bl	8006ed8 <RCC_SetFlashLatencyFromMSIRange>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e34d      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006480:	f000 fc36 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b5c      	ldr	r3, [pc, #368]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	495a      	ldr	r1, [pc, #360]	; (80065fc <HAL_RCC_OscConfig+0x29c>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	f003 031f 	and.w	r3, r3, #31
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
 800649c:	4a58      	ldr	r2, [pc, #352]	; (8006600 <HAL_RCC_OscConfig+0x2a0>)
 800649e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064a0:	4b58      	ldr	r3, [pc, #352]	; (8006604 <HAL_RCC_OscConfig+0x2a4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fd fa97 	bl	80039d8 <HAL_InitTick>
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d052      	beq.n	800655a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	e331      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d032      	beq.n	8006526 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064c0:	4b4d      	ldr	r3, [pc, #308]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a4c      	ldr	r2, [pc, #304]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064cc:	f7fd feae 	bl	800422c <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064d4:	f7fd feaa 	bl	800422c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e31a      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064e6:	4b44      	ldr	r3, [pc, #272]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f2:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a40      	ldr	r2, [pc, #256]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80064f8:	f043 0308 	orr.w	r3, r3, #8
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	493b      	ldr	r1, [pc, #236]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800650c:	4313      	orrs	r3, r2
 800650e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006510:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	4936      	ldr	r1, [pc, #216]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]
 8006524:	e01a      	b.n	800655c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006526:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a33      	ldr	r2, [pc, #204]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006532:	f7fd fe7b 	bl	800422c <HAL_GetTick>
 8006536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006538:	e008      	b.n	800654c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800653a:	f7fd fe77 	bl	800422c <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d901      	bls.n	800654c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e2e7      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800654c:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1f0      	bne.n	800653a <HAL_RCC_OscConfig+0x1da>
 8006558:	e000      	b.n	800655c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800655a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d074      	beq.n	8006652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	2b08      	cmp	r3, #8
 800656c:	d005      	beq.n	800657a <HAL_RCC_OscConfig+0x21a>
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d10e      	bne.n	8006592 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b03      	cmp	r3, #3
 8006578:	d10b      	bne.n	8006592 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657a:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d064      	beq.n	8006650 <HAL_RCC_OscConfig+0x2f0>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d160      	bne.n	8006650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e2c4      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659a:	d106      	bne.n	80065aa <HAL_RCC_OscConfig+0x24a>
 800659c:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e01d      	b.n	80065e6 <HAL_RCC_OscConfig+0x286>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065b2:	d10c      	bne.n	80065ce <HAL_RCC_OscConfig+0x26e>
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a0f      	ldr	r2, [pc, #60]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e00b      	b.n	80065e6 <HAL_RCC_OscConfig+0x286>
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a06      	ldr	r2, [pc, #24]	; (80065f8 <HAL_RCC_OscConfig+0x298>)
 80065e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01c      	beq.n	8006628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ee:	f7fd fe1d 	bl	800422c <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065f4:	e011      	b.n	800661a <HAL_RCC_OscConfig+0x2ba>
 80065f6:	bf00      	nop
 80065f8:	40021000 	.word	0x40021000
 80065fc:	080103d4 	.word	0x080103d4
 8006600:	2000013c 	.word	0x2000013c
 8006604:	20000140 	.word	0x20000140
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006608:	f7fd fe10 	bl	800422c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	; 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e280      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800661a:	4baf      	ldr	r3, [pc, #700]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x2a8>
 8006626:	e014      	b.n	8006652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fd fe00 	bl	800422c <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006630:	f7fd fdfc 	bl	800422c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	; 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e26c      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006642:	4ba5      	ldr	r3, [pc, #660]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x2d0>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d060      	beq.n	8006720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b04      	cmp	r3, #4
 8006662:	d005      	beq.n	8006670 <HAL_RCC_OscConfig+0x310>
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d119      	bne.n	800669e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d116      	bne.n	800669e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006670:	4b99      	ldr	r3, [pc, #612]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_RCC_OscConfig+0x328>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e249      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006688:	4b93      	ldr	r3, [pc, #588]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	061b      	lsls	r3, r3, #24
 8006696:	4990      	ldr	r1, [pc, #576]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006698:	4313      	orrs	r3, r2
 800669a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800669c:	e040      	b.n	8006720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d023      	beq.n	80066ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066a6:	4b8c      	ldr	r3, [pc, #560]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a8b      	ldr	r2, [pc, #556]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fd fdbb 	bl	800422c <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ba:	f7fd fdb7 	bl	800422c <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e227      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066cc:	4b82      	ldr	r3, [pc, #520]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0f0      	beq.n	80066ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d8:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	061b      	lsls	r3, r3, #24
 80066e6:	497c      	ldr	r1, [pc, #496]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	604b      	str	r3, [r1, #4]
 80066ec:	e018      	b.n	8006720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ee:	4b7a      	ldr	r3, [pc, #488]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a79      	ldr	r2, [pc, #484]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80066f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fd fd97 	bl	800422c <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006702:	f7fd fd93 	bl	800422c <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e203      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006714:	4b70      	ldr	r3, [pc, #448]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d03c      	beq.n	80067a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01c      	beq.n	800676e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006734:	4b68      	ldr	r3, [pc, #416]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800673a:	4a67      	ldr	r2, [pc, #412]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800673c:	f043 0301 	orr.w	r3, r3, #1
 8006740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006744:	f7fd fd72 	bl	800422c <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800674c:	f7fd fd6e 	bl	800422c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e1de      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800675e:	4b5e      	ldr	r3, [pc, #376]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0ef      	beq.n	800674c <HAL_RCC_OscConfig+0x3ec>
 800676c:	e01b      	b.n	80067a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800676e:	4b5a      	ldr	r3, [pc, #360]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006774:	4a58      	ldr	r2, [pc, #352]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677e:	f7fd fd55 	bl	800422c <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006786:	f7fd fd51 	bl	800422c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e1c1      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006798:	4b4f      	ldr	r3, [pc, #316]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800679a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1ef      	bne.n	8006786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 80a6 	beq.w	8006900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067b4:	2300      	movs	r3, #0
 80067b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067b8:	4b47      	ldr	r3, [pc, #284]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80067ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c4:	4b44      	ldr	r3, [pc, #272]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c8:	4a43      	ldr	r2, [pc, #268]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ce:	6593      	str	r3, [r2, #88]	; 0x58
 80067d0:	4b41      	ldr	r3, [pc, #260]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80067d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067dc:	2301      	movs	r3, #1
 80067de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067e0:	4b3e      	ldr	r3, [pc, #248]	; (80068dc <HAL_RCC_OscConfig+0x57c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d118      	bne.n	800681e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ec:	4b3b      	ldr	r3, [pc, #236]	; (80068dc <HAL_RCC_OscConfig+0x57c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a3a      	ldr	r2, [pc, #232]	; (80068dc <HAL_RCC_OscConfig+0x57c>)
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f8:	f7fd fd18 	bl	800422c <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006800:	f7fd fd14 	bl	800422c <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e184      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006812:	4b32      	ldr	r3, [pc, #200]	; (80068dc <HAL_RCC_OscConfig+0x57c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d108      	bne.n	8006838 <HAL_RCC_OscConfig+0x4d8>
 8006826:	4b2c      	ldr	r3, [pc, #176]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006836:	e024      	b.n	8006882 <HAL_RCC_OscConfig+0x522>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b05      	cmp	r3, #5
 800683e:	d110      	bne.n	8006862 <HAL_RCC_OscConfig+0x502>
 8006840:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	4a24      	ldr	r2, [pc, #144]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006848:	f043 0304 	orr.w	r3, r3, #4
 800684c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006850:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006856:	4a20      	ldr	r2, [pc, #128]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006858:	f043 0301 	orr.w	r3, r3, #1
 800685c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006860:	e00f      	b.n	8006882 <HAL_RCC_OscConfig+0x522>
 8006862:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006868:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006872:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 8006874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006878:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 800687a:	f023 0304 	bic.w	r3, r3, #4
 800687e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fd fccf 	bl	800422c <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006892:	f7fd fccb 	bl	800422c <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e139      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <HAL_RCC_OscConfig+0x578>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0ed      	beq.n	8006892 <HAL_RCC_OscConfig+0x532>
 80068b6:	e01a      	b.n	80068ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b8:	f7fd fcb8 	bl	800422c <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068be:	e00f      	b.n	80068e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f7fd fcb4 	bl	800422c <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d906      	bls.n	80068e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e122      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
 80068d6:	bf00      	nop
 80068d8:	40021000 	.word	0x40021000
 80068dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068e0:	4b90      	ldr	r3, [pc, #576]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e8      	bne.n	80068c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068ee:	7ffb      	ldrb	r3, [r7, #31]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d105      	bne.n	8006900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f4:	4b8b      	ldr	r3, [pc, #556]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	4a8a      	ldr	r2, [pc, #552]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80068fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8108 	beq.w	8006b1a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	2b02      	cmp	r3, #2
 8006910:	f040 80d0 	bne.w	8006ab4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006914:	4b83      	ldr	r3, [pc, #524]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 0203 	and.w	r2, r3, #3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	429a      	cmp	r2, r3
 8006926:	d130      	bne.n	800698a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	3b01      	subs	r3, #1
 8006934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d127      	bne.n	800698a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006946:	429a      	cmp	r2, r3
 8006948:	d11f      	bne.n	800698a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006954:	2a07      	cmp	r2, #7
 8006956:	bf14      	ite	ne
 8006958:	2201      	movne	r2, #1
 800695a:	2200      	moveq	r2, #0
 800695c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800695e:	4293      	cmp	r3, r2
 8006960:	d113      	bne.n	800698a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	3b01      	subs	r3, #1
 8006970:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006972:	429a      	cmp	r2, r3
 8006974:	d109      	bne.n	800698a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	085b      	lsrs	r3, r3, #1
 8006982:	3b01      	subs	r3, #1
 8006984:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006986:	429a      	cmp	r2, r3
 8006988:	d06e      	beq.n	8006a68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b0c      	cmp	r3, #12
 800698e:	d069      	beq.n	8006a64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006990:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800699c:	4b61      	ldr	r3, [pc, #388]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0b7      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80069ac:	4b5d      	ldr	r3, [pc, #372]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a5c      	ldr	r2, [pc, #368]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80069b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069b8:	f7fd fc38 	bl	800422c <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fd fc34 	bl	800422c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e0a4      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d2:	4b54      	ldr	r3, [pc, #336]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069de:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	4b51      	ldr	r3, [pc, #324]	; (8006b28 <HAL_RCC_OscConfig+0x7c8>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069ee:	3a01      	subs	r2, #1
 80069f0:	0112      	lsls	r2, r2, #4
 80069f2:	4311      	orrs	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069f8:	0212      	lsls	r2, r2, #8
 80069fa:	4311      	orrs	r1, r2
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a00:	0852      	lsrs	r2, r2, #1
 8006a02:	3a01      	subs	r2, #1
 8006a04:	0552      	lsls	r2, r2, #21
 8006a06:	4311      	orrs	r1, r2
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a0c:	0852      	lsrs	r2, r2, #1
 8006a0e:	3a01      	subs	r2, #1
 8006a10:	0652      	lsls	r2, r2, #25
 8006a12:	4311      	orrs	r1, r2
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a18:	0912      	lsrs	r2, r2, #4
 8006a1a:	0452      	lsls	r2, r2, #17
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	4941      	ldr	r1, [pc, #260]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a24:	4b3f      	ldr	r3, [pc, #252]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a3e      	ldr	r2, [pc, #248]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a30:	4b3c      	ldr	r3, [pc, #240]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4a3b      	ldr	r2, [pc, #236]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a3c:	f7fd fbf6 	bl	800422c <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a44:	f7fd fbf2 	bl	800422c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e062      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a56:	4b33      	ldr	r3, [pc, #204]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f0      	beq.n	8006a44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a62:	e05a      	b.n	8006b1a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e059      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a68:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d152      	bne.n	8006b1a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a74:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	4a27      	ldr	r2, [pc, #156]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a8c:	f7fd fbce 	bl	800422c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fd fbca 	bl	800422c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e03a      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aa6:	4b1f      	ldr	r3, [pc, #124]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x734>
 8006ab2:	e032      	b.n	8006b1a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b0c      	cmp	r3, #12
 8006ab8:	d02d      	beq.n	8006b16 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ac4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d105      	bne.n	8006ade <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	4a10      	ldr	r2, [pc, #64]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006ae4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aee:	f7fd fb9d 	bl	800422c <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af6:	f7fd fb99 	bl	800422c <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e009      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_RCC_OscConfig+0x7c4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f0      	bne.n	8006af6 <HAL_RCC_OscConfig+0x796>
 8006b14:	e001      	b.n	8006b1a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40021000 	.word	0x40021000
 8006b28:	f99d808c 	.word	0xf99d808c

08006b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0c8      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b40:	4b66      	ldr	r3, [pc, #408]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0307 	and.w	r3, r3, #7
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d910      	bls.n	8006b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4e:	4b63      	ldr	r3, [pc, #396]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 0207 	bic.w	r2, r3, #7
 8006b56:	4961      	ldr	r1, [pc, #388]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5e:	4b5f      	ldr	r3, [pc, #380]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0b0      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d04c      	beq.n	8006c16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b84:	4b56      	ldr	r3, [pc, #344]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d121      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e09e      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d107      	bne.n	8006bac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b9c:	4b50      	ldr	r3, [pc, #320]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d115      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e092      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bb4:	4b4a      	ldr	r3, [pc, #296]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e086      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc4:	4b46      	ldr	r3, [pc, #280]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e07e      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bd4:	4b42      	ldr	r3, [pc, #264]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 0203 	bic.w	r2, r3, #3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	493f      	ldr	r1, [pc, #252]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be6:	f7fd fb21 	bl	800422c <HAL_GetTick>
 8006bea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bee:	f7fd fb1d 	bl	800422c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e066      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c04:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 020c 	and.w	r2, r3, #12
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d1eb      	bne.n	8006bee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d008      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c22:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	492c      	ldr	r1, [pc, #176]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c34:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d210      	bcs.n	8006c64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c42:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f023 0207 	bic.w	r2, r3, #7
 8006c4a:	4924      	ldr	r1, [pc, #144]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c52:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <HAL_RCC_ClockConfig+0x1b0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e036      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	4918      	ldr	r1, [pc, #96]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c8e:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4910      	ldr	r1, [pc, #64]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ca2:	f000 f825 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <HAL_RCC_ClockConfig+0x1b4>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	091b      	lsrs	r3, r3, #4
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	490c      	ldr	r1, [pc, #48]	; (8006ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb4:	5ccb      	ldrb	r3, [r1, r3]
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <HAL_RCC_ClockConfig+0x1c0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fc fe86 	bl	80039d8 <HAL_InitTick>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40022000 	.word	0x40022000
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	080103d4 	.word	0x080103d4
 8006ce8:	2000013c 	.word	0x2000013c
 8006cec:	20000140 	.word	0x20000140

08006cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b089      	sub	sp, #36	; 0x24
 8006cf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfe:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 030c 	and.w	r3, r3, #12
 8006d06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d08:	4b3b      	ldr	r3, [pc, #236]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x34>
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b0c      	cmp	r3, #12
 8006d1c:	d121      	bne.n	8006d62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d11e      	bne.n	8006d62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d24:	4b34      	ldr	r3, [pc, #208]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d30:	4b31      	ldr	r3, [pc, #196]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e005      	b.n	8006d4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d40:	4b2d      	ldr	r3, [pc, #180]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 030f 	and.w	r3, r3, #15
 8006d4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d4c:	4a2b      	ldr	r2, [pc, #172]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d60:	e00a      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d102      	bne.n	8006d6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d68:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	e004      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d101      	bne.n	8006d78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d74:	4b22      	ldr	r3, [pc, #136]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b0c      	cmp	r3, #12
 8006d7c:	d134      	bne.n	8006de8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d7e:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d003      	beq.n	8006d96 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d003      	beq.n	8006d9c <HAL_RCC_GetSysClockFreq+0xac>
 8006d94:	e005      	b.n	8006da2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d96:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d98:	617b      	str	r3, [r7, #20]
      break;
 8006d9a:	e005      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d9c:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d9e:	617b      	str	r3, [r7, #20]
      break;
 8006da0:	e002      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	617b      	str	r3, [r7, #20]
      break;
 8006da6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 0307 	and.w	r3, r3, #7
 8006db2:	3301      	adds	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006db6:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	0a1b      	lsrs	r3, r3, #8
 8006dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	fb02 f203 	mul.w	r2, r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dce:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	0e5b      	lsrs	r3, r3, #25
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	3301      	adds	r3, #1
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006de8:	69bb      	ldr	r3, [r7, #24]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3724      	adds	r7, #36	; 0x24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	080103ec 	.word	0x080103ec
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e08:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	2000013c 	.word	0x2000013c

08006e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e20:	f7ff fff0 	bl	8006e04 <HAL_RCC_GetHCLKFreq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	4904      	ldr	r1, [pc, #16]	; (8006e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e32:	5ccb      	ldrb	r3, [r1, r3]
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40021000 	.word	0x40021000
 8006e44:	080103e4 	.word	0x080103e4

08006e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e4c:	f7ff ffda 	bl	8006e04 <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	0adb      	lsrs	r3, r3, #11
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4904      	ldr	r1, [pc, #16]	; (8006e70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	080103e4 	.word	0x080103e4

08006e74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	220f      	movs	r2, #15
 8006e82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0203 	and.w	r2, r3, #3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006e9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <HAL_RCC_GetClockConfig+0x5c>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	08db      	lsrs	r3, r3, #3
 8006eae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <HAL_RCC_GetClockConfig+0x60>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	601a      	str	r2, [r3, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	40022000 	.word	0x40022000

08006ed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ee4:	4b2a      	ldr	r3, [pc, #168]	; (8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ef0:	f7ff f9d2 	bl	8006298 <HAL_PWREx_GetVoltageRange>
 8006ef4:	6178      	str	r0, [r7, #20]
 8006ef6:	e014      	b.n	8006f22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ef8:	4b25      	ldr	r3, [pc, #148]	; (8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efc:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f02:	6593      	str	r3, [r2, #88]	; 0x58
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f10:	f7ff f9c2 	bl	8006298 <HAL_PWREx_GetVoltageRange>
 8006f14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f16:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	; (8006f90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f28:	d10b      	bne.n	8006f42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d919      	bls.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2ba0      	cmp	r3, #160	; 0xa0
 8006f34:	d902      	bls.n	8006f3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f36:	2302      	movs	r3, #2
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e013      	b.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	e010      	b.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d902      	bls.n	8006f4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f48:	2303      	movs	r3, #3
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	e00a      	b.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d102      	bne.n	8006f5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f54:	2302      	movs	r3, #2
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	e004      	b.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b70      	cmp	r3, #112	; 0x70
 8006f5e:	d101      	bne.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f60:	2301      	movs	r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f023 0207 	bic.w	r2, r3, #7
 8006f6c:	4909      	ldr	r1, [pc, #36]	; (8006f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f74:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d001      	beq.n	8006f86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40022000 	.word	0x40022000

08006f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d041      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fbc:	d02a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fc2:	d824      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fc8:	d008      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fce:	d81e      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fd8:	d010      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006fda:	e018      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fdc:	4b86      	ldr	r3, [pc, #536]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	4a85      	ldr	r2, [pc, #532]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fe8:	e015      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fabb 	bl	800756c <RCCEx_PLLSAI1_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ffa:	e00c      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3320      	adds	r3, #32
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fba6 	bl	8007754 <RCCEx_PLLSAI2_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	74fb      	strb	r3, [r7, #19]
      break;
 8007012:	e000      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007016:	7cfb      	ldrb	r3, [r7, #19]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800701c:	4b76      	ldr	r3, [pc, #472]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702a:	4973      	ldr	r1, [pc, #460]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007032:	e001      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d041      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800704c:	d02a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800704e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007052:	d824      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007058:	d008      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800705a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800705e:	d81e      	bhi.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007068:	d010      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800706a:	e018      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800706c:	4b62      	ldr	r3, [pc, #392]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4a61      	ldr	r2, [pc, #388]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007076:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007078:	e015      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fa73 	bl	800756c <RCCEx_PLLSAI1_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800708a:	e00c      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3320      	adds	r3, #32
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fb5e 	bl	8007754 <RCCEx_PLLSAI2_Config>
 8007098:	4603      	mov	r3, r0
 800709a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800709c:	e003      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	74fb      	strb	r3, [r7, #19]
      break;
 80070a2:	e000      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80070a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a6:	7cfb      	ldrb	r3, [r7, #19]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070ac:	4b52      	ldr	r3, [pc, #328]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070ba:	494f      	ldr	r1, [pc, #316]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070c2:	e001      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c4:	7cfb      	ldrb	r3, [r7, #19]
 80070c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a0 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d6:	2300      	movs	r3, #0
 80070d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00d      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070f0:	4b41      	ldr	r3, [pc, #260]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f4:	4a40      	ldr	r2, [pc, #256]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070fa:	6593      	str	r3, [r2, #88]	; 0x58
 80070fc:	4b3e      	ldr	r3, [pc, #248]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007108:	2301      	movs	r3, #1
 800710a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800710c:	4b3b      	ldr	r3, [pc, #236]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3a      	ldr	r2, [pc, #232]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007118:	f7fd f888 	bl	800422c <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800711e:	e009      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007120:	f7fd f884 	bl	800422c <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d902      	bls.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	74fb      	strb	r3, [r7, #19]
        break;
 8007132:	e005      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007134:	4b31      	ldr	r3, [pc, #196]	; (80071fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0ef      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d15c      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007146:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01f      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	429a      	cmp	r2, r3
 8007162:	d019      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007164:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007180:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d016      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fd f843 	bl	800422c <HAL_GetTick>
 80071a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a8:	e00b      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f7fd f83f 	bl	800422c <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d902      	bls.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	74fb      	strb	r3, [r7, #19]
            break;
 80071c0:	e006      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071c2:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0ec      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e6:	4904      	ldr	r1, [pc, #16]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071ee:	e009      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	74bb      	strb	r3, [r7, #18]
 80071f4:	e006      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80071f6:	bf00      	nop
 80071f8:	40021000 	.word	0x40021000
 80071fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	7cfb      	ldrb	r3, [r7, #19]
 8007202:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007204:	7c7b      	ldrb	r3, [r7, #17]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720a:	4b9e      	ldr	r3, [pc, #632]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720e:	4a9d      	ldr	r2, [pc, #628]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007214:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007222:	4b98      	ldr	r3, [pc, #608]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	f023 0203 	bic.w	r2, r3, #3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	4994      	ldr	r1, [pc, #592]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007244:	4b8f      	ldr	r3, [pc, #572]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	f023 020c 	bic.w	r2, r3, #12
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	498c      	ldr	r1, [pc, #560]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007266:	4b87      	ldr	r3, [pc, #540]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	4983      	ldr	r1, [pc, #524]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0308 	and.w	r3, r3, #8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007288:	4b7e      	ldr	r3, [pc, #504]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	497b      	ldr	r1, [pc, #492]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0310 	and.w	r3, r3, #16
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80072aa:	4b76      	ldr	r3, [pc, #472]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b8:	4972      	ldr	r1, [pc, #456]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072cc:	4b6d      	ldr	r3, [pc, #436]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072da:	496a      	ldr	r1, [pc, #424]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ee:	4b65      	ldr	r3, [pc, #404]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fc:	4961      	ldr	r1, [pc, #388]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007310:	4b5c      	ldr	r3, [pc, #368]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800731e:	4959      	ldr	r1, [pc, #356]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007332:	4b54      	ldr	r3, [pc, #336]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	4950      	ldr	r1, [pc, #320]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007354:	4b4b      	ldr	r3, [pc, #300]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	4948      	ldr	r1, [pc, #288]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007376:	4b43      	ldr	r3, [pc, #268]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	493f      	ldr	r1, [pc, #252]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d028      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007398:	4b3a      	ldr	r3, [pc, #232]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a6:	4937      	ldr	r1, [pc, #220]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b6:	d106      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073b8:	4b32      	ldr	r3, [pc, #200]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4a31      	ldr	r2, [pc, #196]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073c2:	60d3      	str	r3, [r2, #12]
 80073c4:	e011      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ce:	d10c      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2101      	movs	r1, #1
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f8c8 	bl	800756c <RCCEx_PLLSAI1_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073e0:	7cfb      	ldrb	r3, [r7, #19]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80073e6:	7cfb      	ldrb	r3, [r7, #19]
 80073e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d028      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	491f      	ldr	r1, [pc, #124]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007414:	d106      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007416:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	4a1a      	ldr	r2, [pc, #104]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007420:	60d3      	str	r3, [r2, #12]
 8007422:	e011      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800742c:	d10c      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3304      	adds	r3, #4
 8007432:	2101      	movs	r1, #1
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f899 	bl	800756c <RCCEx_PLLSAI1_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800743e:	7cfb      	ldrb	r3, [r7, #19]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007444:	7cfb      	ldrb	r3, [r7, #19]
 8007446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02b      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007462:	4908      	ldr	r1, [pc, #32]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007464:	4313      	orrs	r3, r2
 8007466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007472:	d109      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007474:	4b03      	ldr	r3, [pc, #12]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4a02      	ldr	r2, [pc, #8]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800747e:	60d3      	str	r3, [r2, #12]
 8007480:	e014      	b.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007482:	bf00      	nop
 8007484:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007490:	d10c      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3304      	adds	r3, #4
 8007496:	2101      	movs	r1, #1
 8007498:	4618      	mov	r0, r3
 800749a:	f000 f867 	bl	800756c <RCCEx_PLLSAI1_Config>
 800749e:	4603      	mov	r3, r0
 80074a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074a2:	7cfb      	ldrb	r3, [r7, #19]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80074a8:	7cfb      	ldrb	r3, [r7, #19]
 80074aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d02f      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074b8:	4b2b      	ldr	r3, [pc, #172]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c6:	4928      	ldr	r1, [pc, #160]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2102      	movs	r1, #2
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f844 	bl	800756c <RCCEx_PLLSAI1_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074e8:	7cfb      	ldrb	r3, [r7, #19]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d014      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074ee:	7cfb      	ldrb	r3, [r7, #19]
 80074f0:	74bb      	strb	r3, [r7, #18]
 80074f2:	e011      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074fc:	d10c      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3320      	adds	r3, #32
 8007502:	2102      	movs	r1, #2
 8007504:	4618      	mov	r0, r3
 8007506:	f000 f925 	bl	8007754 <RCCEx_PLLSAI2_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800750e:	7cfb      	ldrb	r3, [r7, #19]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007514:	7cfb      	ldrb	r3, [r7, #19]
 8007516:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007524:	4b10      	ldr	r3, [pc, #64]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007532:	490d      	ldr	r1, [pc, #52]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007546:	4b08      	ldr	r3, [pc, #32]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800755e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40021000 	.word	0x40021000

0800756c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800757a:	4b75      	ldr	r3, [pc, #468]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f003 0303 	and.w	r3, r3, #3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d018      	beq.n	80075b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007586:	4b72      	ldr	r3, [pc, #456]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f003 0203 	and.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d10d      	bne.n	80075b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
       ||
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800759e:	4b6c      	ldr	r3, [pc, #432]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	091b      	lsrs	r3, r3, #4
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
       ||
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d047      	beq.n	8007642 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	e044      	b.n	8007642 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d018      	beq.n	80075f2 <RCCEx_PLLSAI1_Config+0x86>
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d825      	bhi.n	8007610 <RCCEx_PLLSAI1_Config+0xa4>
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d002      	beq.n	80075ce <RCCEx_PLLSAI1_Config+0x62>
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d009      	beq.n	80075e0 <RCCEx_PLLSAI1_Config+0x74>
 80075cc:	e020      	b.n	8007610 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075ce:	4b60      	ldr	r3, [pc, #384]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11d      	bne.n	8007616 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075de:	e01a      	b.n	8007616 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075e0:	4b5b      	ldr	r3, [pc, #364]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d116      	bne.n	800761a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075f0:	e013      	b.n	800761a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075f2:	4b57      	ldr	r3, [pc, #348]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10f      	bne.n	800761e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075fe:	4b54      	ldr	r3, [pc, #336]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800760e:	e006      	b.n	800761e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e004      	b.n	8007620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800761e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007626:	4b4a      	ldr	r3, [pc, #296]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	3b01      	subs	r3, #1
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	430b      	orrs	r3, r1
 800763c:	4944      	ldr	r1, [pc, #272]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800763e:	4313      	orrs	r3, r2
 8007640:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d17d      	bne.n	8007744 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007648:	4b41      	ldr	r3, [pc, #260]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a40      	ldr	r2, [pc, #256]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800764e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007654:	f7fc fdea 	bl	800422c <HAL_GetTick>
 8007658:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800765a:	e009      	b.n	8007670 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800765c:	f7fc fde6 	bl	800422c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d902      	bls.n	8007670 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	73fb      	strb	r3, [r7, #15]
        break;
 800766e:	e005      	b.n	800767c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007670:	4b37      	ldr	r3, [pc, #220]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1ef      	bne.n	800765c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d160      	bne.n	8007744 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d111      	bne.n	80076ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007688:	4b31      	ldr	r3, [pc, #196]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6892      	ldr	r2, [r2, #8]
 8007698:	0211      	lsls	r1, r2, #8
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68d2      	ldr	r2, [r2, #12]
 800769e:	0912      	lsrs	r2, r2, #4
 80076a0:	0452      	lsls	r2, r2, #17
 80076a2:	430a      	orrs	r2, r1
 80076a4:	492a      	ldr	r1, [pc, #168]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	610b      	str	r3, [r1, #16]
 80076aa:	e027      	b.n	80076fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d112      	bne.n	80076d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076b2:	4b27      	ldr	r3, [pc, #156]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80076ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	6892      	ldr	r2, [r2, #8]
 80076c2:	0211      	lsls	r1, r2, #8
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6912      	ldr	r2, [r2, #16]
 80076c8:	0852      	lsrs	r2, r2, #1
 80076ca:	3a01      	subs	r2, #1
 80076cc:	0552      	lsls	r2, r2, #21
 80076ce:	430a      	orrs	r2, r1
 80076d0:	491f      	ldr	r1, [pc, #124]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	610b      	str	r3, [r1, #16]
 80076d6:	e011      	b.n	80076fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6892      	ldr	r2, [r2, #8]
 80076e8:	0211      	lsls	r1, r2, #8
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6952      	ldr	r2, [r2, #20]
 80076ee:	0852      	lsrs	r2, r2, #1
 80076f0:	3a01      	subs	r2, #1
 80076f2:	0652      	lsls	r2, r2, #25
 80076f4:	430a      	orrs	r2, r1
 80076f6:	4916      	ldr	r1, [pc, #88]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076fc:	4b14      	ldr	r3, [pc, #80]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a13      	ldr	r2, [pc, #76]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007706:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007708:	f7fc fd90 	bl	800422c <HAL_GetTick>
 800770c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800770e:	e009      	b.n	8007724 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007710:	f7fc fd8c 	bl	800422c <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d902      	bls.n	8007724 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	73fb      	strb	r3, [r7, #15]
          break;
 8007722:	e005      	b.n	8007730 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0ef      	beq.n	8007710 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007736:	4b06      	ldr	r3, [pc, #24]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	4904      	ldr	r1, [pc, #16]	; (8007750 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007740:	4313      	orrs	r3, r2
 8007742:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40021000 	.word	0x40021000

08007754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007762:	4b6a      	ldr	r3, [pc, #424]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d018      	beq.n	80077a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800776e:	4b67      	ldr	r3, [pc, #412]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f003 0203 	and.w	r2, r3, #3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d10d      	bne.n	800779a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
       ||
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007786:	4b61      	ldr	r3, [pc, #388]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
       ||
 8007796:	429a      	cmp	r2, r3
 8007798:	d047      	beq.n	800782a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	73fb      	strb	r3, [r7, #15]
 800779e:	e044      	b.n	800782a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d018      	beq.n	80077da <RCCEx_PLLSAI2_Config+0x86>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d825      	bhi.n	80077f8 <RCCEx_PLLSAI2_Config+0xa4>
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d002      	beq.n	80077b6 <RCCEx_PLLSAI2_Config+0x62>
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d009      	beq.n	80077c8 <RCCEx_PLLSAI2_Config+0x74>
 80077b4:	e020      	b.n	80077f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077b6:	4b55      	ldr	r3, [pc, #340]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d11d      	bne.n	80077fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077c6:	e01a      	b.n	80077fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077c8:	4b50      	ldr	r3, [pc, #320]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d116      	bne.n	8007802 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077d8:	e013      	b.n	8007802 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077da:	4b4c      	ldr	r3, [pc, #304]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10f      	bne.n	8007806 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077e6:	4b49      	ldr	r3, [pc, #292]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077f6:	e006      	b.n	8007806 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
      break;
 80077fc:	e004      	b.n	8007808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077fe:	bf00      	nop
 8007800:	e002      	b.n	8007808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007806:	bf00      	nop
    }

    if(status == HAL_OK)
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10d      	bne.n	800782a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800780e:	4b3f      	ldr	r3, [pc, #252]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	3b01      	subs	r3, #1
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	430b      	orrs	r3, r1
 8007824:	4939      	ldr	r1, [pc, #228]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007826:	4313      	orrs	r3, r2
 8007828:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d167      	bne.n	8007900 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007830:	4b36      	ldr	r3, [pc, #216]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a35      	ldr	r2, [pc, #212]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800783c:	f7fc fcf6 	bl	800422c <HAL_GetTick>
 8007840:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007842:	e009      	b.n	8007858 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007844:	f7fc fcf2 	bl	800422c <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d902      	bls.n	8007858 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	73fb      	strb	r3, [r7, #15]
        break;
 8007856:	e005      	b.n	8007864 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007858:	4b2c      	ldr	r3, [pc, #176]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1ef      	bne.n	8007844 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d14a      	bne.n	8007900 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d111      	bne.n	8007894 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007870:	4b26      	ldr	r3, [pc, #152]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	6892      	ldr	r2, [r2, #8]
 8007880:	0211      	lsls	r1, r2, #8
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	68d2      	ldr	r2, [r2, #12]
 8007886:	0912      	lsrs	r2, r2, #4
 8007888:	0452      	lsls	r2, r2, #17
 800788a:	430a      	orrs	r2, r1
 800788c:	491f      	ldr	r1, [pc, #124]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 800788e:	4313      	orrs	r3, r2
 8007890:	614b      	str	r3, [r1, #20]
 8007892:	e011      	b.n	80078b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007894:	4b1d      	ldr	r3, [pc, #116]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800789c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6892      	ldr	r2, [r2, #8]
 80078a4:	0211      	lsls	r1, r2, #8
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	6912      	ldr	r2, [r2, #16]
 80078aa:	0852      	lsrs	r2, r2, #1
 80078ac:	3a01      	subs	r2, #1
 80078ae:	0652      	lsls	r2, r2, #25
 80078b0:	430a      	orrs	r2, r1
 80078b2:	4916      	ldr	r1, [pc, #88]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80078b8:	4b14      	ldr	r3, [pc, #80]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a13      	ldr	r2, [pc, #76]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c4:	f7fc fcb2 	bl	800422c <HAL_GetTick>
 80078c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078ca:	e009      	b.n	80078e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078cc:	f7fc fcae 	bl	800422c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d902      	bls.n	80078e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	73fb      	strb	r3, [r7, #15]
          break;
 80078de:	e005      	b.n	80078ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0ef      	beq.n	80078cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	4904      	ldr	r1, [pc, #16]	; (800790c <RCCEx_PLLSAI2_Config+0x1b8>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40021000 	.word	0x40021000

08007910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e095      	b.n	8007a4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d108      	bne.n	800793c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007932:	d009      	beq.n	8007948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	61da      	str	r2, [r3, #28]
 800793a:	e005      	b.n	8007948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fb fd32 	bl	80033cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007988:	d902      	bls.n	8007990 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800798a:	2300      	movs	r3, #0
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	e002      	b.n	8007996 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007994:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800799e:	d007      	beq.n	80079b0 <HAL_SPI_Init+0xa0>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079a8:	d002      	beq.n	80079b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	ea42 0103 	orr.w	r1, r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	f003 0204 	and.w	r2, r3, #4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a2c:	ea42 0103 	orr.w	r1, r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b088      	sub	sp, #32
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	603b      	str	r3, [r7, #0]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_SPI_Transmit+0x22>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e158      	b.n	8007d2a <HAL_SPI_Transmit+0x2d4>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a80:	f7fc fbd4 	bl	800422c <HAL_GetTick>
 8007a84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d002      	beq.n	8007a9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a96:	2302      	movs	r3, #2
 8007a98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a9a:	e13d      	b.n	8007d18 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_SPI_Transmit+0x52>
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007aac:	e134      	b.n	8007d18 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	88fa      	ldrh	r2, [r7, #6]
 8007acc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af8:	d10f      	bne.n	8007b1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b40      	cmp	r3, #64	; 0x40
 8007b26:	d007      	beq.n	8007b38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b40:	d94b      	bls.n	8007bda <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_SPI_Transmit+0xfa>
 8007b4a:	8afb      	ldrh	r3, [r7, #22]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d13e      	bne.n	8007bce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	881a      	ldrh	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	1c9a      	adds	r2, r3, #2
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b74:	e02b      	b.n	8007bce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d112      	bne.n	8007baa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	881a      	ldrh	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	1c9a      	adds	r2, r3, #2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ba8:	e011      	b.n	8007bce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007baa:	f7fc fb3f 	bl	800422c <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d803      	bhi.n	8007bc2 <HAL_SPI_Transmit+0x16c>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc0:	d102      	bne.n	8007bc8 <HAL_SPI_Transmit+0x172>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bcc:	e0a4      	b.n	8007d18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1ce      	bne.n	8007b76 <HAL_SPI_Transmit+0x120>
 8007bd8:	e07c      	b.n	8007cd4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <HAL_SPI_Transmit+0x192>
 8007be2:	8afb      	ldrh	r3, [r7, #22]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d170      	bne.n	8007cca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d912      	bls.n	8007c18 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	881a      	ldrh	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b02      	subs	r3, #2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c16:	e058      	b.n	8007cca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007c3e:	e044      	b.n	8007cca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d12b      	bne.n	8007ca6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d912      	bls.n	8007c7e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	881a      	ldrh	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	1c9a      	adds	r2, r3, #2
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b02      	subs	r3, #2
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c7c:	e025      	b.n	8007cca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	7812      	ldrb	r2, [r2, #0]
 8007c8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ca4:	e011      	b.n	8007cca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ca6:	f7fc fac1 	bl	800422c <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d803      	bhi.n	8007cbe <HAL_SPI_Transmit+0x268>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cbc:	d102      	bne.n	8007cc4 <HAL_SPI_Transmit+0x26e>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007cc8:	e026      	b.n	8007d18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1b5      	bne.n	8007c40 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fb57 	bl	800838c <SPI_EndRxTxTransaction>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e000      	b.n	8007d18 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007d16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3720      	adds	r7, #32
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b08a      	sub	sp, #40	; 0x28
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
 8007d3e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d40:	2301      	movs	r3, #1
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_SPI_TransmitReceive+0x26>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e1fb      	b.n	8008150 <HAL_SPI_TransmitReceive+0x41e>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d60:	f7fc fa64 	bl	800422c <HAL_GetTick>
 8007d64:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d6c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007d74:	887b      	ldrh	r3, [r7, #2]
 8007d76:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d7c:	7efb      	ldrb	r3, [r7, #27]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d00e      	beq.n	8007da0 <HAL_SPI_TransmitReceive+0x6e>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d88:	d106      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <HAL_SPI_TransmitReceive+0x66>
 8007d92:	7efb      	ldrb	r3, [r7, #27]
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	d003      	beq.n	8007da0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007d9e:	e1cd      	b.n	800813c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_SPI_TransmitReceive+0x80>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <HAL_SPI_TransmitReceive+0x80>
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007db8:	e1c0      	b.n	800813c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d003      	beq.n	8007dce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2205      	movs	r2, #5
 8007dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	887a      	ldrh	r2, [r7, #2]
 8007dde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	887a      	ldrh	r2, [r7, #2]
 8007de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	887a      	ldrh	r2, [r7, #2]
 8007dfa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e10:	d802      	bhi.n	8007e18 <HAL_SPI_TransmitReceive+0xe6>
 8007e12:	8a3b      	ldrh	r3, [r7, #16]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d908      	bls.n	8007e2a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e26:	605a      	str	r2, [r3, #4]
 8007e28:	e007      	b.n	8007e3a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e38:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	d007      	beq.n	8007e58 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e60:	d97c      	bls.n	8007f5c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x13e>
 8007e6a:	8a7b      	ldrh	r3, [r7, #18]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d169      	bne.n	8007f44 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	1c9a      	adds	r2, r3, #2
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e94:	e056      	b.n	8007f44 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d11b      	bne.n	8007edc <HAL_SPI_TransmitReceive+0x1aa>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d016      	beq.n	8007edc <HAL_SPI_TransmitReceive+0x1aa>
 8007eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d113      	bne.n	8007edc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	881a      	ldrh	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	1c9a      	adds	r2, r3, #2
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d11c      	bne.n	8007f24 <HAL_SPI_TransmitReceive+0x1f2>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f00:	b292      	uxth	r2, r2
 8007f02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	1c9a      	adds	r2, r3, #2
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f20:	2301      	movs	r3, #1
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f24:	f7fc f982 	bl	800422c <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d807      	bhi.n	8007f44 <HAL_SPI_TransmitReceive+0x212>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f3a:	d003      	beq.n	8007f44 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007f42:	e0fb      	b.n	800813c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1a3      	bne.n	8007e96 <HAL_SPI_TransmitReceive+0x164>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d19d      	bne.n	8007e96 <HAL_SPI_TransmitReceive+0x164>
 8007f5a:	e0df      	b.n	800811c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_SPI_TransmitReceive+0x23a>
 8007f64:	8a7b      	ldrh	r3, [r7, #18]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	f040 80cb 	bne.w	8008102 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d912      	bls.n	8007f9c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	881a      	ldrh	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	1c9a      	adds	r2, r3, #2
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b02      	subs	r3, #2
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f9a:	e0b2      	b.n	8008102 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	330c      	adds	r3, #12
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fc2:	e09e      	b.n	8008102 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d134      	bne.n	800803c <HAL_SPI_TransmitReceive+0x30a>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02f      	beq.n	800803c <HAL_SPI_TransmitReceive+0x30a>
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d12c      	bne.n	800803c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d912      	bls.n	8008012 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	881a      	ldrh	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	1c9a      	adds	r2, r3, #2
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008006:	b29b      	uxth	r3, r3
 8008008:	3b02      	subs	r3, #2
 800800a:	b29a      	uxth	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008010:	e012      	b.n	8008038 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800802e:	b29b      	uxth	r3, r3
 8008030:	3b01      	subs	r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b01      	cmp	r3, #1
 8008048:	d148      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x3aa>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008050:	b29b      	uxth	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d042      	beq.n	80080dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b01      	cmp	r3, #1
 8008060:	d923      	bls.n	80080aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806c:	b292      	uxth	r2, r2
 800806e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b02      	subs	r3, #2
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d81f      	bhi.n	80080d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080a6:	605a      	str	r2, [r3, #4]
 80080a8:	e016      	b.n	80080d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f103 020c 	add.w	r2, r3, #12
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080d8:	2301      	movs	r3, #1
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080dc:	f7fc f8a6 	bl	800422c <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d803      	bhi.n	80080f4 <HAL_SPI_TransmitReceive+0x3c2>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f2:	d102      	bne.n	80080fa <HAL_SPI_TransmitReceive+0x3c8>
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d103      	bne.n	8008102 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008100:	e01c      	b.n	800813c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	f47f af5b 	bne.w	8007fc4 <HAL_SPI_TransmitReceive+0x292>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	f47f af54 	bne.w	8007fc4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f933 	bl	800838c <SPI_EndRxTxTransaction>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d006      	beq.n	800813a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	661a      	str	r2, [r3, #96]	; 0x60
 8008138:	e000      	b.n	800813c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800813a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800814c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008150:	4618      	mov	r0, r3
 8008152:	3728      	adds	r7, #40	; 0x28
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008168:	f7fc f860 	bl	800422c <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4413      	add	r3, r2
 8008176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008178:	f7fc f858 	bl	800422c <HAL_GetTick>
 800817c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800817e:	4b39      	ldr	r3, [pc, #228]	; (8008264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	015b      	lsls	r3, r3, #5
 8008184:	0d1b      	lsrs	r3, r3, #20
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	fb02 f303 	mul.w	r3, r2, r3
 800818c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800818e:	e054      	b.n	800823a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008196:	d050      	beq.n	800823a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008198:	f7fc f848 	bl	800422c <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d902      	bls.n	80081ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d13d      	bne.n	800822a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c6:	d111      	bne.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081d0:	d004      	beq.n	80081dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081da:	d107      	bne.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f4:	d10f      	bne.n	8008216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e017      	b.n	800825a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3b01      	subs	r3, #1
 8008238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4013      	ands	r3, r2
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	429a      	cmp	r2, r3
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	429a      	cmp	r2, r3
 8008256:	d19b      	bne.n	8008190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3720      	adds	r7, #32
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	2000013c 	.word	0x2000013c

08008268 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008276:	f7fb ffd9 	bl	800422c <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	4413      	add	r3, r2
 8008284:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008286:	f7fb ffd1 	bl	800422c <HAL_GetTick>
 800828a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800828c:	4b3e      	ldr	r3, [pc, #248]	; (8008388 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	00da      	lsls	r2, r3, #3
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	0d1b      	lsrs	r3, r3, #20
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	fb02 f303 	mul.w	r3, r2, r3
 80082a2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80082a4:	e062      	b.n	800836c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082ac:	d109      	bne.n	80082c2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	330c      	adds	r3, #12
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80082c0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c8:	d050      	beq.n	800836c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082ca:	f7fb ffaf 	bl	800422c <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d902      	bls.n	80082e0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d13d      	bne.n	800835c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80082ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082f8:	d111      	bne.n	800831e <SPI_WaitFifoStateUntilTimeout+0xb6>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008302:	d004      	beq.n	800830e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800830c:	d107      	bne.n	800831e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800831c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008326:	d10f      	bne.n	8008348 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e010      	b.n	800837e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	3b01      	subs	r3, #1
 800836a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689a      	ldr	r2, [r3, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4013      	ands	r3, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	429a      	cmp	r2, r3
 800837a:	d194      	bne.n	80082a6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	2000013c 	.word	0x2000013c

0800838c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7ff ff5f 	bl	8008268 <SPI_WaitFifoStateUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b4:	f043 0220 	orr.w	r2, r3, #32
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e027      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2200      	movs	r2, #0
 80083c8:	2180      	movs	r1, #128	; 0x80
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f7ff fec4 	bl	8008158 <SPI_WaitFlagStateUntilTimeout>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083da:	f043 0220 	orr.w	r2, r3, #32
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e014      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ff38 	bl	8008268 <SPI_WaitFifoStateUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	f043 0220 	orr.w	r2, r3, #32
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e000      	b.n	8008410 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e049      	b.n	80084be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7fb f946 	bl	80036d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f001 f962 	bl	8009720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d001      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e04f      	b.n	8008580 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a23      	ldr	r2, [pc, #140]	; (800858c <HAL_TIM_Base_Start_IT+0xc4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01d      	beq.n	800853e <HAL_TIM_Base_Start_IT+0x76>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850a:	d018      	beq.n	800853e <HAL_TIM_Base_Start_IT+0x76>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1f      	ldr	r2, [pc, #124]	; (8008590 <HAL_TIM_Base_Start_IT+0xc8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_TIM_Base_Start_IT+0x76>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <HAL_TIM_Base_Start_IT+0xcc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_TIM_Base_Start_IT+0x76>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1c      	ldr	r2, [pc, #112]	; (8008598 <HAL_TIM_Base_Start_IT+0xd0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_TIM_Base_Start_IT+0x76>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1b      	ldr	r2, [pc, #108]	; (800859c <HAL_TIM_Base_Start_IT+0xd4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_TIM_Base_Start_IT+0x76>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a19      	ldr	r2, [pc, #100]	; (80085a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d115      	bne.n	800856a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	4b17      	ldr	r3, [pc, #92]	; (80085a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008546:	4013      	ands	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b06      	cmp	r3, #6
 800854e:	d015      	beq.n	800857c <HAL_TIM_Base_Start_IT+0xb4>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d011      	beq.n	800857c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0201 	orr.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008568:	e008      	b.n	800857c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e000      	b.n	800857e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	40012c00 	.word	0x40012c00
 8008590:	40000400 	.word	0x40000400
 8008594:	40000800 	.word	0x40000800
 8008598:	40000c00 	.word	0x40000c00
 800859c:	40013400 	.word	0x40013400
 80085a0:	40014000 	.word	0x40014000
 80085a4:	00010007 	.word	0x00010007

080085a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e049      	b.n	800864e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7fa ff5c 	bl	800348c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4619      	mov	r1, r3
 80085e6:	4610      	mov	r0, r2
 80085e8:	f001 f89a 	bl	8009720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_TIM_PWM_Start_IT+0x24>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	bf14      	ite	ne
 8008674:	2301      	movne	r3, #1
 8008676:	2300      	moveq	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	e03c      	b.n	80086f6 <HAL_TIM_PWM_Start_IT+0x9e>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b04      	cmp	r3, #4
 8008680:	d109      	bne.n	8008696 <HAL_TIM_PWM_Start_IT+0x3e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b01      	cmp	r3, #1
 800868c:	bf14      	ite	ne
 800868e:	2301      	movne	r3, #1
 8008690:	2300      	moveq	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	e02f      	b.n	80086f6 <HAL_TIM_PWM_Start_IT+0x9e>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b08      	cmp	r3, #8
 800869a:	d109      	bne.n	80086b0 <HAL_TIM_PWM_Start_IT+0x58>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	e022      	b.n	80086f6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b0c      	cmp	r3, #12
 80086b4:	d109      	bne.n	80086ca <HAL_TIM_PWM_Start_IT+0x72>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b01      	cmp	r3, #1
 80086c0:	bf14      	ite	ne
 80086c2:	2301      	movne	r3, #1
 80086c4:	2300      	moveq	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	e015      	b.n	80086f6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d109      	bne.n	80086e4 <HAL_TIM_PWM_Start_IT+0x8c>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b01      	cmp	r3, #1
 80086da:	bf14      	ite	ne
 80086dc:	2301      	movne	r3, #1
 80086de:	2300      	moveq	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	e008      	b.n	80086f6 <HAL_TIM_PWM_Start_IT+0x9e>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e0e2      	b.n	80088c4 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d104      	bne.n	800870e <HAL_TIM_PWM_Start_IT+0xb6>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2202      	movs	r2, #2
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870c:	e023      	b.n	8008756 <HAL_TIM_PWM_Start_IT+0xfe>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b04      	cmp	r3, #4
 8008712:	d104      	bne.n	800871e <HAL_TIM_PWM_Start_IT+0xc6>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800871c:	e01b      	b.n	8008756 <HAL_TIM_PWM_Start_IT+0xfe>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b08      	cmp	r3, #8
 8008722:	d104      	bne.n	800872e <HAL_TIM_PWM_Start_IT+0xd6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2202      	movs	r2, #2
 8008728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800872c:	e013      	b.n	8008756 <HAL_TIM_PWM_Start_IT+0xfe>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b0c      	cmp	r3, #12
 8008732:	d104      	bne.n	800873e <HAL_TIM_PWM_Start_IT+0xe6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800873c:	e00b      	b.n	8008756 <HAL_TIM_PWM_Start_IT+0xfe>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b10      	cmp	r3, #16
 8008742:	d104      	bne.n	800874e <HAL_TIM_PWM_Start_IT+0xf6>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800874c:	e003      	b.n	8008756 <HAL_TIM_PWM_Start_IT+0xfe>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b0c      	cmp	r3, #12
 800875a:	d841      	bhi.n	80087e0 <HAL_TIM_PWM_Start_IT+0x188>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <HAL_TIM_PWM_Start_IT+0x10c>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	08008799 	.word	0x08008799
 8008768:	080087e1 	.word	0x080087e1
 800876c:	080087e1 	.word	0x080087e1
 8008770:	080087e1 	.word	0x080087e1
 8008774:	080087ab 	.word	0x080087ab
 8008778:	080087e1 	.word	0x080087e1
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080087e1 	.word	0x080087e1
 8008784:	080087bd 	.word	0x080087bd
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087e1 	.word	0x080087e1
 8008790:	080087e1 	.word	0x080087e1
 8008794:	080087cf 	.word	0x080087cf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 0202 	orr.w	r2, r2, #2
 80087a6:	60da      	str	r2, [r3, #12]
      break;
 80087a8:	e01b      	b.n	80087e2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0204 	orr.w	r2, r2, #4
 80087b8:	60da      	str	r2, [r3, #12]
      break;
 80087ba:	e012      	b.n	80087e2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f042 0208 	orr.w	r2, r2, #8
 80087ca:	60da      	str	r2, [r3, #12]
      break;
 80087cc:	e009      	b.n	80087e2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0210 	orr.w	r2, r2, #16
 80087dc:	60da      	str	r2, [r3, #12]
      break;
 80087de:	e000      	b.n	80087e2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80087e0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2201      	movs	r2, #1
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 fb08 	bl	8009e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a35      	ldr	r2, [pc, #212]	; (80088cc <HAL_TIM_PWM_Start_IT+0x274>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <HAL_TIM_PWM_Start_IT+0x1ca>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a34      	ldr	r2, [pc, #208]	; (80088d0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00e      	beq.n	8008822 <HAL_TIM_PWM_Start_IT+0x1ca>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a32      	ldr	r2, [pc, #200]	; (80088d4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d009      	beq.n	8008822 <HAL_TIM_PWM_Start_IT+0x1ca>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a31      	ldr	r2, [pc, #196]	; (80088d8 <HAL_TIM_PWM_Start_IT+0x280>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d004      	beq.n	8008822 <HAL_TIM_PWM_Start_IT+0x1ca>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a2f      	ldr	r2, [pc, #188]	; (80088dc <HAL_TIM_PWM_Start_IT+0x284>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d101      	bne.n	8008826 <HAL_TIM_PWM_Start_IT+0x1ce>
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008826:	2300      	movs	r3, #0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d007      	beq.n	800883c <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800883a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a22      	ldr	r2, [pc, #136]	; (80088cc <HAL_TIM_PWM_Start_IT+0x274>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d01d      	beq.n	8008882 <HAL_TIM_PWM_Start_IT+0x22a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800884e:	d018      	beq.n	8008882 <HAL_TIM_PWM_Start_IT+0x22a>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a22      	ldr	r2, [pc, #136]	; (80088e0 <HAL_TIM_PWM_Start_IT+0x288>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d013      	beq.n	8008882 <HAL_TIM_PWM_Start_IT+0x22a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a21      	ldr	r2, [pc, #132]	; (80088e4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d00e      	beq.n	8008882 <HAL_TIM_PWM_Start_IT+0x22a>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1f      	ldr	r2, [pc, #124]	; (80088e8 <HAL_TIM_PWM_Start_IT+0x290>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d009      	beq.n	8008882 <HAL_TIM_PWM_Start_IT+0x22a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a17      	ldr	r2, [pc, #92]	; (80088d0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d004      	beq.n	8008882 <HAL_TIM_PWM_Start_IT+0x22a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a15      	ldr	r2, [pc, #84]	; (80088d4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d115      	bne.n	80088ae <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	4b18      	ldr	r3, [pc, #96]	; (80088ec <HAL_TIM_PWM_Start_IT+0x294>)
 800888a:	4013      	ands	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b06      	cmp	r3, #6
 8008892:	d015      	beq.n	80088c0 <HAL_TIM_PWM_Start_IT+0x268>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800889a:	d011      	beq.n	80088c0 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0201 	orr.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ac:	e008      	b.n	80088c0 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0201 	orr.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	e000      	b.n	80088c2 <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	40013400 	.word	0x40013400
 80088d4:	40014000 	.word	0x40014000
 80088d8:	40014400 	.word	0x40014400
 80088dc:	40014800 	.word	0x40014800
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40000800 	.word	0x40000800
 80088e8:	40000c00 	.word	0x40000c00
 80088ec:	00010007 	.word	0x00010007

080088f0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d841      	bhi.n	8008984 <HAL_TIM_PWM_Stop_IT+0x94>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <HAL_TIM_PWM_Stop_IT+0x18>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	0800893d 	.word	0x0800893d
 800890c:	08008985 	.word	0x08008985
 8008910:	08008985 	.word	0x08008985
 8008914:	08008985 	.word	0x08008985
 8008918:	0800894f 	.word	0x0800894f
 800891c:	08008985 	.word	0x08008985
 8008920:	08008985 	.word	0x08008985
 8008924:	08008985 	.word	0x08008985
 8008928:	08008961 	.word	0x08008961
 800892c:	08008985 	.word	0x08008985
 8008930:	08008985 	.word	0x08008985
 8008934:	08008985 	.word	0x08008985
 8008938:	08008973 	.word	0x08008973
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0202 	bic.w	r2, r2, #2
 800894a:	60da      	str	r2, [r3, #12]
      break;
 800894c:	e01b      	b.n	8008986 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0204 	bic.w	r2, r2, #4
 800895c:	60da      	str	r2, [r3, #12]
      break;
 800895e:	e012      	b.n	8008986 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0208 	bic.w	r2, r2, #8
 800896e:	60da      	str	r2, [r3, #12]
      break;
 8008970:	e009      	b.n	8008986 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0210 	bic.w	r2, r2, #16
 8008980:	60da      	str	r2, [r3, #12]
      break;
 8008982:	e000      	b.n	8008986 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8008984:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f001 fa36 	bl	8009e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a3e      	ldr	r2, [pc, #248]	; (8008a94 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d013      	beq.n	80089c6 <HAL_TIM_PWM_Stop_IT+0xd6>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a3d      	ldr	r2, [pc, #244]	; (8008a98 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d00e      	beq.n	80089c6 <HAL_TIM_PWM_Stop_IT+0xd6>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a3b      	ldr	r2, [pc, #236]	; (8008a9c <HAL_TIM_PWM_Stop_IT+0x1ac>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d009      	beq.n	80089c6 <HAL_TIM_PWM_Stop_IT+0xd6>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a3a      	ldr	r2, [pc, #232]	; (8008aa0 <HAL_TIM_PWM_Stop_IT+0x1b0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d004      	beq.n	80089c6 <HAL_TIM_PWM_Stop_IT+0xd6>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a38      	ldr	r2, [pc, #224]	; (8008aa4 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d101      	bne.n	80089ca <HAL_TIM_PWM_Stop_IT+0xda>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <HAL_TIM_PWM_Stop_IT+0xdc>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d017      	beq.n	8008a00 <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6a1a      	ldr	r2, [r3, #32]
 80089d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10f      	bne.n	8008a00 <HAL_TIM_PWM_Stop_IT+0x110>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	f240 4344 	movw	r3, #1092	; 0x444
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <HAL_TIM_PWM_Stop_IT+0x110>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10f      	bne.n	8008a30 <HAL_TIM_PWM_Stop_IT+0x140>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f240 4344 	movw	r3, #1092	; 0x444
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d107      	bne.n	8008a30 <HAL_TIM_PWM_Stop_IT+0x140>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_PWM_Stop_IT+0x150>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a3e:	e023      	b.n	8008a88 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d104      	bne.n	8008a50 <HAL_TIM_PWM_Stop_IT+0x160>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a4e:	e01b      	b.n	8008a88 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d104      	bne.n	8008a60 <HAL_TIM_PWM_Stop_IT+0x170>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a5e:	e013      	b.n	8008a88 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b0c      	cmp	r3, #12
 8008a64:	d104      	bne.n	8008a70 <HAL_TIM_PWM_Stop_IT+0x180>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a6e:	e00b      	b.n	8008a88 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b10      	cmp	r3, #16
 8008a74:	d104      	bne.n	8008a80 <HAL_TIM_PWM_Stop_IT+0x190>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a7e:	e003      	b.n	8008a88 <HAL_TIM_PWM_Stop_IT+0x198>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40012c00 	.word	0x40012c00
 8008a98:	40013400 	.word	0x40013400
 8008a9c:	40014000 	.word	0x40014000
 8008aa0:	40014400 	.word	0x40014400
 8008aa4:	40014800 	.word	0x40014800

08008aa8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d109      	bne.n	8008ad0 <HAL_TIM_PWM_Start_DMA+0x28>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	bf0c      	ite	eq
 8008ac8:	2301      	moveq	r3, #1
 8008aca:	2300      	movne	r3, #0
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	e03c      	b.n	8008b4a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d109      	bne.n	8008aea <HAL_TIM_PWM_Start_DMA+0x42>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	bf0c      	ite	eq
 8008ae2:	2301      	moveq	r3, #1
 8008ae4:	2300      	movne	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	e02f      	b.n	8008b4a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d109      	bne.n	8008b04 <HAL_TIM_PWM_Start_DMA+0x5c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	bf0c      	ite	eq
 8008afc:	2301      	moveq	r3, #1
 8008afe:	2300      	movne	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	e022      	b.n	8008b4a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b0c      	cmp	r3, #12
 8008b08:	d109      	bne.n	8008b1e <HAL_TIM_PWM_Start_DMA+0x76>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	bf0c      	ite	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	2300      	movne	r3, #0
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	e015      	b.n	8008b4a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d109      	bne.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x90>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	bf0c      	ite	eq
 8008b30:	2301      	moveq	r3, #1
 8008b32:	2300      	movne	r3, #0
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	e008      	b.n	8008b4a <HAL_TIM_PWM_Start_DMA+0xa2>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	bf0c      	ite	eq
 8008b44:	2301      	moveq	r3, #1
 8008b46:	2300      	movne	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	e1a6      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <HAL_TIM_PWM_Start_DMA+0xc4>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	e03c      	b.n	8008be6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d109      	bne.n	8008b86 <HAL_TIM_PWM_Start_DMA+0xde>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	bf0c      	ite	eq
 8008b7e:	2301      	moveq	r3, #1
 8008b80:	2300      	movne	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	e02f      	b.n	8008be6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d109      	bne.n	8008ba0 <HAL_TIM_PWM_Start_DMA+0xf8>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	e022      	b.n	8008be6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b0c      	cmp	r3, #12
 8008ba4:	d109      	bne.n	8008bba <HAL_TIM_PWM_Start_DMA+0x112>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	bf0c      	ite	eq
 8008bb2:	2301      	moveq	r3, #1
 8008bb4:	2300      	movne	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	e015      	b.n	8008be6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2b10      	cmp	r3, #16
 8008bbe:	d109      	bne.n	8008bd4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	bf0c      	ite	eq
 8008bcc:	2301      	moveq	r3, #1
 8008bce:	2300      	movne	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	e008      	b.n	8008be6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	bf0c      	ite	eq
 8008be0:	2301      	moveq	r3, #1
 8008be2:	2300      	movne	r3, #0
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d034      	beq.n	8008c54 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start_DMA+0x152>
 8008bf0:	887b      	ldrh	r3, [r7, #2]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e152      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_PWM_Start_DMA+0x162>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c08:	e026      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d104      	bne.n	8008c1a <HAL_TIM_PWM_Start_DMA+0x172>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c18:	e01e      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d104      	bne.n	8008c2a <HAL_TIM_PWM_Start_DMA+0x182>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c28:	e016      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b0c      	cmp	r3, #12
 8008c2e:	d104      	bne.n	8008c3a <HAL_TIM_PWM_Start_DMA+0x192>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c38:	e00e      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d104      	bne.n	8008c4a <HAL_TIM_PWM_Start_DMA+0x1a2>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c48:	e006      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c52:	e001      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e123      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2b0c      	cmp	r3, #12
 8008c5c:	f200 80ae 	bhi.w	8008dbc <HAL_TIM_PWM_Start_DMA+0x314>
 8008c60:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c9d 	.word	0x08008c9d
 8008c6c:	08008dbd 	.word	0x08008dbd
 8008c70:	08008dbd 	.word	0x08008dbd
 8008c74:	08008dbd 	.word	0x08008dbd
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008dbd 	.word	0x08008dbd
 8008c80:	08008dbd 	.word	0x08008dbd
 8008c84:	08008dbd 	.word	0x08008dbd
 8008c88:	08008d2d 	.word	0x08008d2d
 8008c8c:	08008dbd 	.word	0x08008dbd
 8008c90:	08008dbd 	.word	0x08008dbd
 8008c94:	08008dbd 	.word	0x08008dbd
 8008c98:	08008d75 	.word	0x08008d75
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	4a81      	ldr	r2, [pc, #516]	; (8008ea8 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	4a80      	ldr	r2, [pc, #512]	; (8008eac <HAL_TIM_PWM_Start_DMA+0x404>)
 8008caa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	4a7f      	ldr	r2, [pc, #508]	; (8008eb0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3334      	adds	r3, #52	; 0x34
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	887b      	ldrh	r3, [r7, #2]
 8008cc4:	f7fc fe68 	bl	8005998 <HAL_DMA_Start_IT>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e0e6      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce0:	60da      	str	r2, [r3, #12]
      break;
 8008ce2:	e06c      	b.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce8:	4a6f      	ldr	r2, [pc, #444]	; (8008ea8 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008cea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	4a6e      	ldr	r2, [pc, #440]	; (8008eac <HAL_TIM_PWM_Start_DMA+0x404>)
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	4a6d      	ldr	r2, [pc, #436]	; (8008eb0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008cfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3338      	adds	r3, #56	; 0x38
 8008d08:	461a      	mov	r2, r3
 8008d0a:	887b      	ldrh	r3, [r7, #2]
 8008d0c:	f7fc fe44 	bl	8005998 <HAL_DMA_Start_IT>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e0c2      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d28:	60da      	str	r2, [r3, #12]
      break;
 8008d2a:	e048      	b.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	4a5d      	ldr	r2, [pc, #372]	; (8008ea8 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008d32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	4a5c      	ldr	r2, [pc, #368]	; (8008eac <HAL_TIM_PWM_Start_DMA+0x404>)
 8008d3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4a5b      	ldr	r2, [pc, #364]	; (8008eb0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	333c      	adds	r3, #60	; 0x3c
 8008d50:	461a      	mov	r2, r3
 8008d52:	887b      	ldrh	r3, [r7, #2]
 8008d54:	f7fc fe20 	bl	8005998 <HAL_DMA_Start_IT>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e09e      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d70:	60da      	str	r2, [r3, #12]
      break;
 8008d72:	e024      	b.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d78:	4a4b      	ldr	r2, [pc, #300]	; (8008ea8 <HAL_TIM_PWM_Start_DMA+0x400>)
 8008d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	4a4a      	ldr	r2, [pc, #296]	; (8008eac <HAL_TIM_PWM_Start_DMA+0x404>)
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	4a49      	ldr	r2, [pc, #292]	; (8008eb0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3340      	adds	r3, #64	; 0x40
 8008d98:	461a      	mov	r2, r3
 8008d9a:	887b      	ldrh	r3, [r7, #2]
 8008d9c:	f7fc fdfc 	bl	8005998 <HAL_DMA_Start_IT>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e07a      	b.n	8008ea0 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008db8:	60da      	str	r2, [r3, #12]
      break;
 8008dba:	e000      	b.n	8008dbe <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8008dbc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 f81a 	bl	8009e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a38      	ldr	r2, [pc, #224]	; (8008eb4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <HAL_TIM_PWM_Start_DMA+0x356>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a37      	ldr	r2, [pc, #220]	; (8008eb8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00e      	beq.n	8008dfe <HAL_TIM_PWM_Start_DMA+0x356>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a35      	ldr	r2, [pc, #212]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x414>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d009      	beq.n	8008dfe <HAL_TIM_PWM_Start_DMA+0x356>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a34      	ldr	r2, [pc, #208]	; (8008ec0 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <HAL_TIM_PWM_Start_DMA+0x356>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a32      	ldr	r2, [pc, #200]	; (8008ec4 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d101      	bne.n	8008e02 <HAL_TIM_PWM_Start_DMA+0x35a>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <HAL_TIM_PWM_Start_DMA+0x35c>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d01d      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2a:	d018      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a25      	ldr	r2, [pc, #148]	; (8008ec8 <HAL_TIM_PWM_Start_DMA+0x420>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d013      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <HAL_TIM_PWM_Start_DMA+0x424>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d00e      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a22      	ldr	r2, [pc, #136]	; (8008ed0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d009      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a1a      	ldr	r2, [pc, #104]	; (8008eb8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d004      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a18      	ldr	r2, [pc, #96]	; (8008ebc <HAL_TIM_PWM_Start_DMA+0x414>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d115      	bne.n	8008e8a <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	4b1b      	ldr	r3, [pc, #108]	; (8008ed4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008e66:	4013      	ands	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	2b06      	cmp	r3, #6
 8008e6e:	d015      	beq.n	8008e9c <HAL_TIM_PWM_Start_DMA+0x3f4>
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d011      	beq.n	8008e9c <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e88:	e008      	b.n	8008e9c <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0201 	orr.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	e000      	b.n	8008e9e <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	0800960f 	.word	0x0800960f
 8008eac:	080096b7 	.word	0x080096b7
 8008eb0:	0800957d 	.word	0x0800957d
 8008eb4:	40012c00 	.word	0x40012c00
 8008eb8:	40013400 	.word	0x40013400
 8008ebc:	40014000 	.word	0x40014000
 8008ec0:	40014400 	.word	0x40014400
 8008ec4:	40014800 	.word	0x40014800
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800
 8008ed0:	40000c00 	.word	0x40000c00
 8008ed4:	00010007 	.word	0x00010007

08008ed8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b0c      	cmp	r3, #12
 8008ee6:	d855      	bhi.n	8008f94 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f25 	.word	0x08008f25
 8008ef4:	08008f95 	.word	0x08008f95
 8008ef8:	08008f95 	.word	0x08008f95
 8008efc:	08008f95 	.word	0x08008f95
 8008f00:	08008f41 	.word	0x08008f41
 8008f04:	08008f95 	.word	0x08008f95
 8008f08:	08008f95 	.word	0x08008f95
 8008f0c:	08008f95 	.word	0x08008f95
 8008f10:	08008f5d 	.word	0x08008f5d
 8008f14:	08008f95 	.word	0x08008f95
 8008f18:	08008f95 	.word	0x08008f95
 8008f1c:	08008f95 	.word	0x08008f95
 8008f20:	08008f79 	.word	0x08008f79
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fc fd8d 	bl	8005a58 <HAL_DMA_Abort_IT>
      break;
 8008f3e:	e02a      	b.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fc fd7f 	bl	8005a58 <HAL_DMA_Abort_IT>
      break;
 8008f5a:	e01c      	b.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fc fd71 	bl	8005a58 <HAL_DMA_Abort_IT>
      break;
 8008f76:	e00e      	b.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fc fd63 	bl	8005a58 <HAL_DMA_Abort_IT>
      break;
 8008f92:	e000      	b.n	8008f96 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8008f94:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 ff2e 	bl	8009e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a3e      	ldr	r2, [pc, #248]	; (80090a4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a3d      	ldr	r2, [pc, #244]	; (80090a8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a3b      	ldr	r2, [pc, #236]	; (80090ac <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a3a      	ldr	r2, [pc, #232]	; (80090b0 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a38      	ldr	r2, [pc, #224]	; (80090b4 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d101      	bne.n	8008fda <HAL_TIM_PWM_Stop_DMA+0x102>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e000      	b.n	8008fdc <HAL_TIM_PWM_Stop_DMA+0x104>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d017      	beq.n	8009010 <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6a1a      	ldr	r2, [r3, #32]
 8008fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fea:	4013      	ands	r3, r2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10f      	bne.n	8009010 <HAL_TIM_PWM_Stop_DMA+0x138>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6a1a      	ldr	r2, [r3, #32]
 8008ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d107      	bne.n	8009010 <HAL_TIM_PWM_Stop_DMA+0x138>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800900e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6a1a      	ldr	r2, [r3, #32]
 8009016:	f241 1311 	movw	r3, #4369	; 0x1111
 800901a:	4013      	ands	r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10f      	bne.n	8009040 <HAL_TIM_PWM_Stop_DMA+0x168>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	f240 4344 	movw	r3, #1092	; 0x444
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d107      	bne.n	8009040 <HAL_TIM_PWM_Stop_DMA+0x168>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0201 	bic.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <HAL_TIM_PWM_Stop_DMA+0x178>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800904e:	e023      	b.n	8009098 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b04      	cmp	r3, #4
 8009054:	d104      	bne.n	8009060 <HAL_TIM_PWM_Stop_DMA+0x188>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800905e:	e01b      	b.n	8009098 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b08      	cmp	r3, #8
 8009064:	d104      	bne.n	8009070 <HAL_TIM_PWM_Stop_DMA+0x198>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800906e:	e013      	b.n	8009098 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b0c      	cmp	r3, #12
 8009074:	d104      	bne.n	8009080 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2201      	movs	r2, #1
 800907a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800907e:	e00b      	b.n	8009098 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b10      	cmp	r3, #16
 8009084:	d104      	bne.n	8009090 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800908e:	e003      	b.n	8009098 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40013400 	.word	0x40013400
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40014400 	.word	0x40014400
 80090b4:	40014800 	.word	0x40014800

080090b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d122      	bne.n	8009114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d11b      	bne.n	8009114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0202 	mvn.w	r2, #2
 80090e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa16 	bl	800952c <HAL_TIM_IC_CaptureCallback>
 8009100:	e005      	b.n	800910e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa08 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7fa fe09 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b04      	cmp	r3, #4
 8009120:	d122      	bne.n	8009168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b04      	cmp	r3, #4
 800912e:	d11b      	bne.n	8009168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0204 	mvn.w	r2, #4
 8009138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9ec 	bl	800952c <HAL_TIM_IC_CaptureCallback>
 8009154:	e005      	b.n	8009162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9de 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7fa fddf 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b08      	cmp	r3, #8
 8009174:	d122      	bne.n	80091bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b08      	cmp	r3, #8
 8009182:	d11b      	bne.n	80091bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f06f 0208 	mvn.w	r2, #8
 800918c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2204      	movs	r2, #4
 8009192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f9c2 	bl	800952c <HAL_TIM_IC_CaptureCallback>
 80091a8:	e005      	b.n	80091b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9b4 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7fa fdb5 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	f003 0310 	and.w	r3, r3, #16
 80091c6:	2b10      	cmp	r3, #16
 80091c8:	d122      	bne.n	8009210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f003 0310 	and.w	r3, r3, #16
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d11b      	bne.n	8009210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0210 	mvn.w	r2, #16
 80091e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2208      	movs	r2, #8
 80091e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f998 	bl	800952c <HAL_TIM_IC_CaptureCallback>
 80091fc:	e005      	b.n	800920a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f98a 	bl	8009518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7fa fd8b 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10e      	bne.n	800923c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b01      	cmp	r3, #1
 800922a:	d107      	bne.n	800923c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f06f 0201 	mvn.w	r2, #1
 8009234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7f9 fa8a 	bl	8002750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009246:	2b80      	cmp	r3, #128	; 0x80
 8009248:	d10e      	bne.n	8009268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009254:	2b80      	cmp	r3, #128	; 0x80
 8009256:	d107      	bne.n	8009268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 ff02 	bl	800a06c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009276:	d10e      	bne.n	8009296 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009282:	2b80      	cmp	r3, #128	; 0x80
 8009284:	d107      	bne.n	8009296 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fef5 	bl	800a080 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b40      	cmp	r3, #64	; 0x40
 80092a2:	d10e      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ae:	2b40      	cmp	r3, #64	; 0x40
 80092b0:	d107      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f949 	bl	8009554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d10e      	bne.n	80092ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d107      	bne.n	80092ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f06f 0220 	mvn.w	r2, #32
 80092e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 feb5 	bl	800a058 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800930e:	2302      	movs	r3, #2
 8009310:	e0fd      	b.n	800950e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b14      	cmp	r3, #20
 800931e:	f200 80f0 	bhi.w	8009502 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009322:	a201      	add	r2, pc, #4	; (adr r2, 8009328 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009328:	0800937d 	.word	0x0800937d
 800932c:	08009503 	.word	0x08009503
 8009330:	08009503 	.word	0x08009503
 8009334:	08009503 	.word	0x08009503
 8009338:	080093bd 	.word	0x080093bd
 800933c:	08009503 	.word	0x08009503
 8009340:	08009503 	.word	0x08009503
 8009344:	08009503 	.word	0x08009503
 8009348:	080093ff 	.word	0x080093ff
 800934c:	08009503 	.word	0x08009503
 8009350:	08009503 	.word	0x08009503
 8009354:	08009503 	.word	0x08009503
 8009358:	0800943f 	.word	0x0800943f
 800935c:	08009503 	.word	0x08009503
 8009360:	08009503 	.word	0x08009503
 8009364:	08009503 	.word	0x08009503
 8009368:	08009481 	.word	0x08009481
 800936c:	08009503 	.word	0x08009503
 8009370:	08009503 	.word	0x08009503
 8009374:	08009503 	.word	0x08009503
 8009378:	080094c1 	.word	0x080094c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fa66 	bl	8009854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0208 	orr.w	r2, r2, #8
 8009396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0204 	bic.w	r2, r2, #4
 80093a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6999      	ldr	r1, [r3, #24]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691a      	ldr	r2, [r3, #16]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	619a      	str	r2, [r3, #24]
      break;
 80093ba:	e0a3      	b.n	8009504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68b9      	ldr	r1, [r7, #8]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fad6 	bl	8009974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6999      	ldr	r1, [r3, #24]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	021a      	lsls	r2, r3, #8
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	619a      	str	r2, [r3, #24]
      break;
 80093fc:	e082      	b.n	8009504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fb3f 	bl	8009a88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0208 	orr.w	r2, r2, #8
 8009418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0204 	bic.w	r2, r2, #4
 8009428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	61da      	str	r2, [r3, #28]
      break;
 800943c:	e062      	b.n	8009504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fba7 	bl	8009b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69d9      	ldr	r1, [r3, #28]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	021a      	lsls	r2, r3, #8
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	61da      	str	r2, [r3, #28]
      break;
 800947e:	e041      	b.n	8009504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fbf0 	bl	8009c6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0208 	orr.w	r2, r2, #8
 800949a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0204 	bic.w	r2, r2, #4
 80094aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	691a      	ldr	r2, [r3, #16]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	430a      	orrs	r2, r1
 80094bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094be:	e021      	b.n	8009504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fc34 	bl	8009d34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	021a      	lsls	r2, r3, #8
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009500:	e000      	b.n	8009504 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop

08009518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d107      	bne.n	80095a4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2201      	movs	r2, #1
 8009598:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095a2:	e02a      	b.n	80095fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d107      	bne.n	80095be <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2202      	movs	r2, #2
 80095b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095bc:	e01d      	b.n	80095fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d107      	bne.n	80095d8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2204      	movs	r2, #4
 80095cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095d6:	e010      	b.n	80095fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d107      	bne.n	80095f2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2208      	movs	r2, #8
 80095e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095f0:	e003      	b.n	80095fa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f7ff ffb4 	bl	8009568 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	771a      	strb	r2, [r3, #28]
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	429a      	cmp	r2, r3
 8009624:	d10b      	bne.n	800963e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d136      	bne.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800963c:	e031      	b.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d10b      	bne.n	8009660 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2202      	movs	r2, #2
 800964c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d125      	bne.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800965e:	e020      	b.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d10b      	bne.n	8009682 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2204      	movs	r2, #4
 800966e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d114      	bne.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009680:	e00f      	b.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	429a      	cmp	r2, r3
 800968a:	d10a      	bne.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2208      	movs	r2, #8
 8009690:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f7fa fb3c 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	771a      	strb	r2, [r3, #28]
}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d103      	bne.n	80096d6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	771a      	strb	r2, [r3, #28]
 80096d4:	e019      	b.n	800970a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d103      	bne.n	80096e8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2202      	movs	r2, #2
 80096e4:	771a      	strb	r2, [r3, #28]
 80096e6:	e010      	b.n	800970a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d103      	bne.n	80096fa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2204      	movs	r2, #4
 80096f6:	771a      	strb	r2, [r3, #28]
 80096f8:	e007      	b.n	800970a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d102      	bne.n	800970a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2208      	movs	r2, #8
 8009708:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7ff ff18 	bl	8009540 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	771a      	strb	r2, [r3, #28]
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a40      	ldr	r2, [pc, #256]	; (8009834 <TIM_Base_SetConfig+0x114>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d013      	beq.n	8009760 <TIM_Base_SetConfig+0x40>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973e:	d00f      	beq.n	8009760 <TIM_Base_SetConfig+0x40>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a3d      	ldr	r2, [pc, #244]	; (8009838 <TIM_Base_SetConfig+0x118>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00b      	beq.n	8009760 <TIM_Base_SetConfig+0x40>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a3c      	ldr	r2, [pc, #240]	; (800983c <TIM_Base_SetConfig+0x11c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d007      	beq.n	8009760 <TIM_Base_SetConfig+0x40>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a3b      	ldr	r2, [pc, #236]	; (8009840 <TIM_Base_SetConfig+0x120>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d003      	beq.n	8009760 <TIM_Base_SetConfig+0x40>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a3a      	ldr	r2, [pc, #232]	; (8009844 <TIM_Base_SetConfig+0x124>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d108      	bne.n	8009772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a2f      	ldr	r2, [pc, #188]	; (8009834 <TIM_Base_SetConfig+0x114>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d01f      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009780:	d01b      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a2c      	ldr	r2, [pc, #176]	; (8009838 <TIM_Base_SetConfig+0x118>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d017      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a2b      	ldr	r2, [pc, #172]	; (800983c <TIM_Base_SetConfig+0x11c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d013      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a2a      	ldr	r2, [pc, #168]	; (8009840 <TIM_Base_SetConfig+0x120>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00f      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a29      	ldr	r2, [pc, #164]	; (8009844 <TIM_Base_SetConfig+0x124>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d00b      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a28      	ldr	r2, [pc, #160]	; (8009848 <TIM_Base_SetConfig+0x128>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d007      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a27      	ldr	r2, [pc, #156]	; (800984c <TIM_Base_SetConfig+0x12c>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d003      	beq.n	80097ba <TIM_Base_SetConfig+0x9a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a26      	ldr	r2, [pc, #152]	; (8009850 <TIM_Base_SetConfig+0x130>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d108      	bne.n	80097cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a10      	ldr	r2, [pc, #64]	; (8009834 <TIM_Base_SetConfig+0x114>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d00f      	beq.n	8009818 <TIM_Base_SetConfig+0xf8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a12      	ldr	r2, [pc, #72]	; (8009844 <TIM_Base_SetConfig+0x124>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00b      	beq.n	8009818 <TIM_Base_SetConfig+0xf8>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a11      	ldr	r2, [pc, #68]	; (8009848 <TIM_Base_SetConfig+0x128>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d007      	beq.n	8009818 <TIM_Base_SetConfig+0xf8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a10      	ldr	r2, [pc, #64]	; (800984c <TIM_Base_SetConfig+0x12c>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d003      	beq.n	8009818 <TIM_Base_SetConfig+0xf8>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a0f      	ldr	r2, [pc, #60]	; (8009850 <TIM_Base_SetConfig+0x130>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d103      	bne.n	8009820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	615a      	str	r2, [r3, #20]
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	40012c00 	.word	0x40012c00
 8009838:	40000400 	.word	0x40000400
 800983c:	40000800 	.word	0x40000800
 8009840:	40000c00 	.word	0x40000c00
 8009844:	40013400 	.word	0x40013400
 8009848:	40014000 	.word	0x40014000
 800984c:	40014400 	.word	0x40014400
 8009850:	40014800 	.word	0x40014800

08009854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f023 0201 	bic.w	r2, r3, #1
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0303 	bic.w	r3, r3, #3
 800988e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f023 0302 	bic.w	r3, r3, #2
 80098a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a2c      	ldr	r2, [pc, #176]	; (8009960 <TIM_OC1_SetConfig+0x10c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d00f      	beq.n	80098d4 <TIM_OC1_SetConfig+0x80>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a2b      	ldr	r2, [pc, #172]	; (8009964 <TIM_OC1_SetConfig+0x110>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00b      	beq.n	80098d4 <TIM_OC1_SetConfig+0x80>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a2a      	ldr	r2, [pc, #168]	; (8009968 <TIM_OC1_SetConfig+0x114>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d007      	beq.n	80098d4 <TIM_OC1_SetConfig+0x80>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a29      	ldr	r2, [pc, #164]	; (800996c <TIM_OC1_SetConfig+0x118>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d003      	beq.n	80098d4 <TIM_OC1_SetConfig+0x80>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a28      	ldr	r2, [pc, #160]	; (8009970 <TIM_OC1_SetConfig+0x11c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d10c      	bne.n	80098ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	f023 0308 	bic.w	r3, r3, #8
 80098da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f023 0304 	bic.w	r3, r3, #4
 80098ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a1b      	ldr	r2, [pc, #108]	; (8009960 <TIM_OC1_SetConfig+0x10c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00f      	beq.n	8009916 <TIM_OC1_SetConfig+0xc2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <TIM_OC1_SetConfig+0x110>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00b      	beq.n	8009916 <TIM_OC1_SetConfig+0xc2>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a19      	ldr	r2, [pc, #100]	; (8009968 <TIM_OC1_SetConfig+0x114>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d007      	beq.n	8009916 <TIM_OC1_SetConfig+0xc2>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a18      	ldr	r2, [pc, #96]	; (800996c <TIM_OC1_SetConfig+0x118>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d003      	beq.n	8009916 <TIM_OC1_SetConfig+0xc2>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a17      	ldr	r2, [pc, #92]	; (8009970 <TIM_OC1_SetConfig+0x11c>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d111      	bne.n	800993a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800991c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4313      	orrs	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	621a      	str	r2, [r3, #32]
}
 8009954:	bf00      	nop
 8009956:	371c      	adds	r7, #28
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	40012c00 	.word	0x40012c00
 8009964:	40013400 	.word	0x40013400
 8009968:	40014000 	.word	0x40014000
 800996c:	40014400 	.word	0x40014400
 8009970:	40014800 	.word	0x40014800

08009974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	f023 0210 	bic.w	r2, r3, #16
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a1b      	ldr	r3, [r3, #32]
 800998e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f023 0320 	bic.w	r3, r3, #32
 80099c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a28      	ldr	r2, [pc, #160]	; (8009a74 <TIM_OC2_SetConfig+0x100>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_OC2_SetConfig+0x6c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a27      	ldr	r2, [pc, #156]	; (8009a78 <TIM_OC2_SetConfig+0x104>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10d      	bne.n	80099fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1d      	ldr	r2, [pc, #116]	; (8009a74 <TIM_OC2_SetConfig+0x100>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00f      	beq.n	8009a24 <TIM_OC2_SetConfig+0xb0>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1c      	ldr	r2, [pc, #112]	; (8009a78 <TIM_OC2_SetConfig+0x104>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d00b      	beq.n	8009a24 <TIM_OC2_SetConfig+0xb0>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	; (8009a7c <TIM_OC2_SetConfig+0x108>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d007      	beq.n	8009a24 <TIM_OC2_SetConfig+0xb0>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <TIM_OC2_SetConfig+0x10c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d003      	beq.n	8009a24 <TIM_OC2_SetConfig+0xb0>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a19      	ldr	r2, [pc, #100]	; (8009a84 <TIM_OC2_SetConfig+0x110>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d113      	bne.n	8009a4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40014400 	.word	0x40014400
 8009a84:	40014800 	.word	0x40014800

08009a88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a27      	ldr	r2, [pc, #156]	; (8009b84 <TIM_OC3_SetConfig+0xfc>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d003      	beq.n	8009af2 <TIM_OC3_SetConfig+0x6a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a26      	ldr	r2, [pc, #152]	; (8009b88 <TIM_OC3_SetConfig+0x100>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d10d      	bne.n	8009b0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <TIM_OC3_SetConfig+0xfc>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00f      	beq.n	8009b36 <TIM_OC3_SetConfig+0xae>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a1b      	ldr	r2, [pc, #108]	; (8009b88 <TIM_OC3_SetConfig+0x100>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00b      	beq.n	8009b36 <TIM_OC3_SetConfig+0xae>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a1a      	ldr	r2, [pc, #104]	; (8009b8c <TIM_OC3_SetConfig+0x104>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d007      	beq.n	8009b36 <TIM_OC3_SetConfig+0xae>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a19      	ldr	r2, [pc, #100]	; (8009b90 <TIM_OC3_SetConfig+0x108>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d003      	beq.n	8009b36 <TIM_OC3_SetConfig+0xae>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a18      	ldr	r2, [pc, #96]	; (8009b94 <TIM_OC3_SetConfig+0x10c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d113      	bne.n	8009b5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	621a      	str	r2, [r3, #32]
}
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40013400 	.word	0x40013400
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40014400 	.word	0x40014400
 8009b94:	40014800 	.word	0x40014800

08009b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	021b      	lsls	r3, r3, #8
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	031b      	lsls	r3, r3, #12
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <TIM_OC4_SetConfig+0xc0>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00f      	beq.n	8009c1c <TIM_OC4_SetConfig+0x84>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <TIM_OC4_SetConfig+0xc4>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00b      	beq.n	8009c1c <TIM_OC4_SetConfig+0x84>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <TIM_OC4_SetConfig+0xc8>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d007      	beq.n	8009c1c <TIM_OC4_SetConfig+0x84>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a15      	ldr	r2, [pc, #84]	; (8009c64 <TIM_OC4_SetConfig+0xcc>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d003      	beq.n	8009c1c <TIM_OC4_SetConfig+0x84>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a14      	ldr	r2, [pc, #80]	; (8009c68 <TIM_OC4_SetConfig+0xd0>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d109      	bne.n	8009c30 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	019b      	lsls	r3, r3, #6
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	621a      	str	r2, [r3, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40012c00 	.word	0x40012c00
 8009c5c:	40013400 	.word	0x40013400
 8009c60:	40014000 	.word	0x40014000
 8009c64:	40014400 	.word	0x40014400
 8009c68:	40014800 	.word	0x40014800

08009c6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68fa      	ldr	r2, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a17      	ldr	r2, [pc, #92]	; (8009d20 <TIM_OC5_SetConfig+0xb4>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00f      	beq.n	8009ce6 <TIM_OC5_SetConfig+0x7a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <TIM_OC5_SetConfig+0xb8>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d00b      	beq.n	8009ce6 <TIM_OC5_SetConfig+0x7a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <TIM_OC5_SetConfig+0xbc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d007      	beq.n	8009ce6 <TIM_OC5_SetConfig+0x7a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a14      	ldr	r2, [pc, #80]	; (8009d2c <TIM_OC5_SetConfig+0xc0>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d003      	beq.n	8009ce6 <TIM_OC5_SetConfig+0x7a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a13      	ldr	r2, [pc, #76]	; (8009d30 <TIM_OC5_SetConfig+0xc4>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d109      	bne.n	8009cfa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	685a      	ldr	r2, [r3, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	621a      	str	r2, [r3, #32]
}
 8009d14:	bf00      	nop
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	40012c00 	.word	0x40012c00
 8009d24:	40013400 	.word	0x40013400
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	40014400 	.word	0x40014400
 8009d30:	40014800 	.word	0x40014800

08009d34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	051b      	lsls	r3, r3, #20
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a18      	ldr	r2, [pc, #96]	; (8009dec <TIM_OC6_SetConfig+0xb8>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d00f      	beq.n	8009db0 <TIM_OC6_SetConfig+0x7c>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a17      	ldr	r2, [pc, #92]	; (8009df0 <TIM_OC6_SetConfig+0xbc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00b      	beq.n	8009db0 <TIM_OC6_SetConfig+0x7c>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a16      	ldr	r2, [pc, #88]	; (8009df4 <TIM_OC6_SetConfig+0xc0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d007      	beq.n	8009db0 <TIM_OC6_SetConfig+0x7c>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a15      	ldr	r2, [pc, #84]	; (8009df8 <TIM_OC6_SetConfig+0xc4>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_OC6_SetConfig+0x7c>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a14      	ldr	r2, [pc, #80]	; (8009dfc <TIM_OC6_SetConfig+0xc8>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d109      	bne.n	8009dc4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	029b      	lsls	r3, r3, #10
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	40013400 	.word	0x40013400
 8009df4:	40014000 	.word	0x40014000
 8009df8:	40014400 	.word	0x40014400
 8009dfc:	40014800 	.word	0x40014800

08009e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 031f 	and.w	r3, r3, #31
 8009e12:	2201      	movs	r2, #1
 8009e14:	fa02 f303 	lsl.w	r3, r2, r3
 8009e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6a1a      	ldr	r2, [r3, #32]
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	43db      	mvns	r3, r3
 8009e22:	401a      	ands	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f003 031f 	and.w	r3, r3, #31
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	fa01 f303 	lsl.w	r3, r1, r3
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	621a      	str	r2, [r3, #32]
}
 8009e3e:	bf00      	nop
 8009e40:	371c      	adds	r7, #28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr
	...

08009e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d101      	bne.n	8009e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e60:	2302      	movs	r3, #2
 8009e62:	e068      	b.n	8009f36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a2e      	ldr	r2, [pc, #184]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d004      	beq.n	8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a2d      	ldr	r2, [pc, #180]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d108      	bne.n	8009eaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a1e      	ldr	r2, [pc, #120]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d01d      	beq.n	8009f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed6:	d018      	beq.n	8009f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a1b      	ldr	r2, [pc, #108]	; (8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d013      	beq.n	8009f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a1a      	ldr	r2, [pc, #104]	; (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00e      	beq.n	8009f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a18      	ldr	r2, [pc, #96]	; (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d009      	beq.n	8009f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a13      	ldr	r2, [pc, #76]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d004      	beq.n	8009f0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a14      	ldr	r2, [pc, #80]	; (8009f58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d10c      	bne.n	8009f24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40012c00 	.word	0x40012c00
 8009f48:	40013400 	.word	0x40013400
 8009f4c:	40000400 	.word	0x40000400
 8009f50:	40000800 	.word	0x40000800
 8009f54:	40000c00 	.word	0x40000c00
 8009f58:	40014000 	.word	0x40014000

08009f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d101      	bne.n	8009f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e065      	b.n	800a044 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	041b      	lsls	r3, r3, #16
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a16      	ldr	r2, [pc, #88]	; (800a050 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d004      	beq.n	800a006 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a14      	ldr	r2, [pc, #80]	; (800a054 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d115      	bne.n	800a032 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	051b      	lsls	r3, r3, #20
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	40012c00 	.word	0x40012c00
 800a054:	40013400 	.word	0x40013400

0800a058 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e040      	b.n	800a128 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d106      	bne.n	800a0bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7f9 fc4c 	bl	8003954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2224      	movs	r2, #36	; 0x24
 800a0c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f022 0201 	bic.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f8c0 	bl	800a258 <UART_SetConfig>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e022      	b.n	800a128 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fb3e 	bl	800a76c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a10e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0201 	orr.w	r2, r2, #1
 800a11e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 fbc5 	bl	800a8b0 <UART_CheckIdleState>
 800a126:	4603      	mov	r3, r0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	; 0x28
 800a134:	af02      	add	r7, sp, #8
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	4613      	mov	r3, r2
 800a13e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a144:	2b20      	cmp	r3, #32
 800a146:	f040 8082 	bne.w	800a24e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_UART_Transmit+0x26>
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e07a      	b.n	800a250 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_UART_Transmit+0x38>
 800a164:	2302      	movs	r3, #2
 800a166:	e073      	b.n	800a250 <HAL_UART_Transmit+0x120>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2221      	movs	r2, #33	; 0x21
 800a17c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a17e:	f7fa f855 	bl	800422c <HAL_GetTick>
 800a182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	88fa      	ldrh	r2, [r7, #6]
 800a188:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	88fa      	ldrh	r2, [r7, #6]
 800a190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a19c:	d108      	bne.n	800a1b0 <HAL_UART_Transmit+0x80>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d104      	bne.n	800a1b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	e003      	b.n	800a1b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a1c0:	e02d      	b.n	800a21e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2180      	movs	r1, #128	; 0x80
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f000 fbb8 	bl	800a942 <UART_WaitOnFlagUntilTimeout>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e039      	b.n	800a250 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10b      	bne.n	800a1fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	881a      	ldrh	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1ee:	b292      	uxth	r2, r2
 800a1f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	3302      	adds	r3, #2
 800a1f6:	61bb      	str	r3, [r7, #24]
 800a1f8:	e008      	b.n	800a20c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	b292      	uxth	r2, r2
 800a204:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	3301      	adds	r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a224:	b29b      	uxth	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1cb      	bne.n	800a1c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2200      	movs	r2, #0
 800a232:	2140      	movs	r1, #64	; 0x40
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fb84 	bl	800a942 <UART_WaitOnFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e005      	b.n	800a250 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2220      	movs	r2, #32
 800a248:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	e000      	b.n	800a250 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a24e:	2302      	movs	r3, #2
  }
}
 800a250:	4618      	mov	r0, r3
 800a252:	3720      	adds	r7, #32
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a258:	b5b0      	push	{r4, r5, r7, lr}
 800a25a:	b088      	sub	sp, #32
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	4313      	orrs	r3, r2
 800a27a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	4bad      	ldr	r3, [pc, #692]	; (800a538 <UART_SetConfig+0x2e0>)
 800a284:	4013      	ands	r3, r2
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6812      	ldr	r2, [r2, #0]
 800a28a:	69f9      	ldr	r1, [r7, #28]
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68da      	ldr	r2, [r3, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4aa2      	ldr	r2, [pc, #648]	; (800a53c <UART_SetConfig+0x2e4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d004      	beq.n	800a2c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	69fa      	ldr	r2, [r7, #28]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a99      	ldr	r2, [pc, #612]	; (800a540 <UART_SetConfig+0x2e8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d121      	bne.n	800a322 <UART_SetConfig+0xca>
 800a2de:	4b99      	ldr	r3, [pc, #612]	; (800a544 <UART_SetConfig+0x2ec>)
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e4:	f003 0303 	and.w	r3, r3, #3
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d817      	bhi.n	800a31c <UART_SetConfig+0xc4>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <UART_SetConfig+0x9c>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a311 	.word	0x0800a311
 800a2fc:	0800a30b 	.word	0x0800a30b
 800a300:	0800a317 	.word	0x0800a317
 800a304:	2301      	movs	r3, #1
 800a306:	76fb      	strb	r3, [r7, #27]
 800a308:	e0e7      	b.n	800a4da <UART_SetConfig+0x282>
 800a30a:	2302      	movs	r3, #2
 800a30c:	76fb      	strb	r3, [r7, #27]
 800a30e:	e0e4      	b.n	800a4da <UART_SetConfig+0x282>
 800a310:	2304      	movs	r3, #4
 800a312:	76fb      	strb	r3, [r7, #27]
 800a314:	e0e1      	b.n	800a4da <UART_SetConfig+0x282>
 800a316:	2308      	movs	r3, #8
 800a318:	76fb      	strb	r3, [r7, #27]
 800a31a:	e0de      	b.n	800a4da <UART_SetConfig+0x282>
 800a31c:	2310      	movs	r3, #16
 800a31e:	76fb      	strb	r3, [r7, #27]
 800a320:	e0db      	b.n	800a4da <UART_SetConfig+0x282>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a88      	ldr	r2, [pc, #544]	; (800a548 <UART_SetConfig+0x2f0>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d132      	bne.n	800a392 <UART_SetConfig+0x13a>
 800a32c:	4b85      	ldr	r3, [pc, #532]	; (800a544 <UART_SetConfig+0x2ec>)
 800a32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a332:	f003 030c 	and.w	r3, r3, #12
 800a336:	2b0c      	cmp	r3, #12
 800a338:	d828      	bhi.n	800a38c <UART_SetConfig+0x134>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <UART_SetConfig+0xe8>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a375 	.word	0x0800a375
 800a344:	0800a38d 	.word	0x0800a38d
 800a348:	0800a38d 	.word	0x0800a38d
 800a34c:	0800a38d 	.word	0x0800a38d
 800a350:	0800a381 	.word	0x0800a381
 800a354:	0800a38d 	.word	0x0800a38d
 800a358:	0800a38d 	.word	0x0800a38d
 800a35c:	0800a38d 	.word	0x0800a38d
 800a360:	0800a37b 	.word	0x0800a37b
 800a364:	0800a38d 	.word	0x0800a38d
 800a368:	0800a38d 	.word	0x0800a38d
 800a36c:	0800a38d 	.word	0x0800a38d
 800a370:	0800a387 	.word	0x0800a387
 800a374:	2300      	movs	r3, #0
 800a376:	76fb      	strb	r3, [r7, #27]
 800a378:	e0af      	b.n	800a4da <UART_SetConfig+0x282>
 800a37a:	2302      	movs	r3, #2
 800a37c:	76fb      	strb	r3, [r7, #27]
 800a37e:	e0ac      	b.n	800a4da <UART_SetConfig+0x282>
 800a380:	2304      	movs	r3, #4
 800a382:	76fb      	strb	r3, [r7, #27]
 800a384:	e0a9      	b.n	800a4da <UART_SetConfig+0x282>
 800a386:	2308      	movs	r3, #8
 800a388:	76fb      	strb	r3, [r7, #27]
 800a38a:	e0a6      	b.n	800a4da <UART_SetConfig+0x282>
 800a38c:	2310      	movs	r3, #16
 800a38e:	76fb      	strb	r3, [r7, #27]
 800a390:	e0a3      	b.n	800a4da <UART_SetConfig+0x282>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a6d      	ldr	r2, [pc, #436]	; (800a54c <UART_SetConfig+0x2f4>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d120      	bne.n	800a3de <UART_SetConfig+0x186>
 800a39c:	4b69      	ldr	r3, [pc, #420]	; (800a544 <UART_SetConfig+0x2ec>)
 800a39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3a6:	2b30      	cmp	r3, #48	; 0x30
 800a3a8:	d013      	beq.n	800a3d2 <UART_SetConfig+0x17a>
 800a3aa:	2b30      	cmp	r3, #48	; 0x30
 800a3ac:	d814      	bhi.n	800a3d8 <UART_SetConfig+0x180>
 800a3ae:	2b20      	cmp	r3, #32
 800a3b0:	d009      	beq.n	800a3c6 <UART_SetConfig+0x16e>
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	d810      	bhi.n	800a3d8 <UART_SetConfig+0x180>
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <UART_SetConfig+0x168>
 800a3ba:	2b10      	cmp	r3, #16
 800a3bc:	d006      	beq.n	800a3cc <UART_SetConfig+0x174>
 800a3be:	e00b      	b.n	800a3d8 <UART_SetConfig+0x180>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	76fb      	strb	r3, [r7, #27]
 800a3c4:	e089      	b.n	800a4da <UART_SetConfig+0x282>
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	76fb      	strb	r3, [r7, #27]
 800a3ca:	e086      	b.n	800a4da <UART_SetConfig+0x282>
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	76fb      	strb	r3, [r7, #27]
 800a3d0:	e083      	b.n	800a4da <UART_SetConfig+0x282>
 800a3d2:	2308      	movs	r3, #8
 800a3d4:	76fb      	strb	r3, [r7, #27]
 800a3d6:	e080      	b.n	800a4da <UART_SetConfig+0x282>
 800a3d8:	2310      	movs	r3, #16
 800a3da:	76fb      	strb	r3, [r7, #27]
 800a3dc:	e07d      	b.n	800a4da <UART_SetConfig+0x282>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a5b      	ldr	r2, [pc, #364]	; (800a550 <UART_SetConfig+0x2f8>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d120      	bne.n	800a42a <UART_SetConfig+0x1d2>
 800a3e8:	4b56      	ldr	r3, [pc, #344]	; (800a544 <UART_SetConfig+0x2ec>)
 800a3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3f2:	2bc0      	cmp	r3, #192	; 0xc0
 800a3f4:	d013      	beq.n	800a41e <UART_SetConfig+0x1c6>
 800a3f6:	2bc0      	cmp	r3, #192	; 0xc0
 800a3f8:	d814      	bhi.n	800a424 <UART_SetConfig+0x1cc>
 800a3fa:	2b80      	cmp	r3, #128	; 0x80
 800a3fc:	d009      	beq.n	800a412 <UART_SetConfig+0x1ba>
 800a3fe:	2b80      	cmp	r3, #128	; 0x80
 800a400:	d810      	bhi.n	800a424 <UART_SetConfig+0x1cc>
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <UART_SetConfig+0x1b4>
 800a406:	2b40      	cmp	r3, #64	; 0x40
 800a408:	d006      	beq.n	800a418 <UART_SetConfig+0x1c0>
 800a40a:	e00b      	b.n	800a424 <UART_SetConfig+0x1cc>
 800a40c:	2300      	movs	r3, #0
 800a40e:	76fb      	strb	r3, [r7, #27]
 800a410:	e063      	b.n	800a4da <UART_SetConfig+0x282>
 800a412:	2302      	movs	r3, #2
 800a414:	76fb      	strb	r3, [r7, #27]
 800a416:	e060      	b.n	800a4da <UART_SetConfig+0x282>
 800a418:	2304      	movs	r3, #4
 800a41a:	76fb      	strb	r3, [r7, #27]
 800a41c:	e05d      	b.n	800a4da <UART_SetConfig+0x282>
 800a41e:	2308      	movs	r3, #8
 800a420:	76fb      	strb	r3, [r7, #27]
 800a422:	e05a      	b.n	800a4da <UART_SetConfig+0x282>
 800a424:	2310      	movs	r3, #16
 800a426:	76fb      	strb	r3, [r7, #27]
 800a428:	e057      	b.n	800a4da <UART_SetConfig+0x282>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a49      	ldr	r2, [pc, #292]	; (800a554 <UART_SetConfig+0x2fc>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d125      	bne.n	800a480 <UART_SetConfig+0x228>
 800a434:	4b43      	ldr	r3, [pc, #268]	; (800a544 <UART_SetConfig+0x2ec>)
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a442:	d017      	beq.n	800a474 <UART_SetConfig+0x21c>
 800a444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a448:	d817      	bhi.n	800a47a <UART_SetConfig+0x222>
 800a44a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a44e:	d00b      	beq.n	800a468 <UART_SetConfig+0x210>
 800a450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a454:	d811      	bhi.n	800a47a <UART_SetConfig+0x222>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <UART_SetConfig+0x20a>
 800a45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a45e:	d006      	beq.n	800a46e <UART_SetConfig+0x216>
 800a460:	e00b      	b.n	800a47a <UART_SetConfig+0x222>
 800a462:	2300      	movs	r3, #0
 800a464:	76fb      	strb	r3, [r7, #27]
 800a466:	e038      	b.n	800a4da <UART_SetConfig+0x282>
 800a468:	2302      	movs	r3, #2
 800a46a:	76fb      	strb	r3, [r7, #27]
 800a46c:	e035      	b.n	800a4da <UART_SetConfig+0x282>
 800a46e:	2304      	movs	r3, #4
 800a470:	76fb      	strb	r3, [r7, #27]
 800a472:	e032      	b.n	800a4da <UART_SetConfig+0x282>
 800a474:	2308      	movs	r3, #8
 800a476:	76fb      	strb	r3, [r7, #27]
 800a478:	e02f      	b.n	800a4da <UART_SetConfig+0x282>
 800a47a:	2310      	movs	r3, #16
 800a47c:	76fb      	strb	r3, [r7, #27]
 800a47e:	e02c      	b.n	800a4da <UART_SetConfig+0x282>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a2d      	ldr	r2, [pc, #180]	; (800a53c <UART_SetConfig+0x2e4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d125      	bne.n	800a4d6 <UART_SetConfig+0x27e>
 800a48a:	4b2e      	ldr	r3, [pc, #184]	; (800a544 <UART_SetConfig+0x2ec>)
 800a48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a498:	d017      	beq.n	800a4ca <UART_SetConfig+0x272>
 800a49a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a49e:	d817      	bhi.n	800a4d0 <UART_SetConfig+0x278>
 800a4a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4a4:	d00b      	beq.n	800a4be <UART_SetConfig+0x266>
 800a4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4aa:	d811      	bhi.n	800a4d0 <UART_SetConfig+0x278>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d003      	beq.n	800a4b8 <UART_SetConfig+0x260>
 800a4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4b4:	d006      	beq.n	800a4c4 <UART_SetConfig+0x26c>
 800a4b6:	e00b      	b.n	800a4d0 <UART_SetConfig+0x278>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	76fb      	strb	r3, [r7, #27]
 800a4bc:	e00d      	b.n	800a4da <UART_SetConfig+0x282>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	76fb      	strb	r3, [r7, #27]
 800a4c2:	e00a      	b.n	800a4da <UART_SetConfig+0x282>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	76fb      	strb	r3, [r7, #27]
 800a4c8:	e007      	b.n	800a4da <UART_SetConfig+0x282>
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	76fb      	strb	r3, [r7, #27]
 800a4ce:	e004      	b.n	800a4da <UART_SetConfig+0x282>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	76fb      	strb	r3, [r7, #27]
 800a4d4:	e001      	b.n	800a4da <UART_SetConfig+0x282>
 800a4d6:	2310      	movs	r3, #16
 800a4d8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a17      	ldr	r2, [pc, #92]	; (800a53c <UART_SetConfig+0x2e4>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	f040 8087 	bne.w	800a5f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4e6:	7efb      	ldrb	r3, [r7, #27]
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d837      	bhi.n	800a55c <UART_SetConfig+0x304>
 800a4ec:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <UART_SetConfig+0x29c>)
 800a4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f2:	bf00      	nop
 800a4f4:	0800a519 	.word	0x0800a519
 800a4f8:	0800a55d 	.word	0x0800a55d
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a55d 	.word	0x0800a55d
 800a504:	0800a527 	.word	0x0800a527
 800a508:	0800a55d 	.word	0x0800a55d
 800a50c:	0800a55d 	.word	0x0800a55d
 800a510:	0800a55d 	.word	0x0800a55d
 800a514:	0800a52f 	.word	0x0800a52f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a518:	f7fc fc80 	bl	8006e1c <HAL_RCC_GetPCLK1Freq>
 800a51c:	6178      	str	r0, [r7, #20]
        break;
 800a51e:	e022      	b.n	800a566 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a520:	4b0d      	ldr	r3, [pc, #52]	; (800a558 <UART_SetConfig+0x300>)
 800a522:	617b      	str	r3, [r7, #20]
        break;
 800a524:	e01f      	b.n	800a566 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a526:	f7fc fbe3 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 800a52a:	6178      	str	r0, [r7, #20]
        break;
 800a52c:	e01b      	b.n	800a566 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a52e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a532:	617b      	str	r3, [r7, #20]
        break;
 800a534:	e017      	b.n	800a566 <UART_SetConfig+0x30e>
 800a536:	bf00      	nop
 800a538:	efff69f3 	.word	0xefff69f3
 800a53c:	40008000 	.word	0x40008000
 800a540:	40013800 	.word	0x40013800
 800a544:	40021000 	.word	0x40021000
 800a548:	40004400 	.word	0x40004400
 800a54c:	40004800 	.word	0x40004800
 800a550:	40004c00 	.word	0x40004c00
 800a554:	40005000 	.word	0x40005000
 800a558:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	76bb      	strb	r3, [r7, #26]
        break;
 800a564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 80f1 	beq.w	800a750 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	4613      	mov	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d305      	bcc.n	800a58a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	429a      	cmp	r2, r3
 800a588:	d902      	bls.n	800a590 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	76bb      	strb	r3, [r7, #26]
 800a58e:	e0df      	b.n	800a750 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	4618      	mov	r0, r3
 800a594:	f04f 0100 	mov.w	r1, #0
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	020b      	lsls	r3, r1, #8
 800a5a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5a6:	0202      	lsls	r2, r0, #8
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	6849      	ldr	r1, [r1, #4]
 800a5ac:	0849      	lsrs	r1, r1, #1
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	f04f 0100 	mov.w	r1, #0
 800a5b4:	1814      	adds	r4, r2, r0
 800a5b6:	eb43 0501 	adc.w	r5, r3, r1
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f04f 0300 	mov.w	r3, #0
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f6 fb40 	bl	8000c4c <__aeabi_uldivmod>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5da:	d308      	bcc.n	800a5ee <UART_SetConfig+0x396>
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e2:	d204      	bcs.n	800a5ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	60da      	str	r2, [r3, #12]
 800a5ec:	e0b0      	b.n	800a750 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	76bb      	strb	r3, [r7, #26]
 800a5f2:	e0ad      	b.n	800a750 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5fc:	d15c      	bne.n	800a6b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a5fe:	7efb      	ldrb	r3, [r7, #27]
 800a600:	2b08      	cmp	r3, #8
 800a602:	d828      	bhi.n	800a656 <UART_SetConfig+0x3fe>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <UART_SetConfig+0x3b4>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a631 	.word	0x0800a631
 800a610:	0800a639 	.word	0x0800a639
 800a614:	0800a641 	.word	0x0800a641
 800a618:	0800a657 	.word	0x0800a657
 800a61c:	0800a647 	.word	0x0800a647
 800a620:	0800a657 	.word	0x0800a657
 800a624:	0800a657 	.word	0x0800a657
 800a628:	0800a657 	.word	0x0800a657
 800a62c:	0800a64f 	.word	0x0800a64f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a630:	f7fc fbf4 	bl	8006e1c <HAL_RCC_GetPCLK1Freq>
 800a634:	6178      	str	r0, [r7, #20]
        break;
 800a636:	e013      	b.n	800a660 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a638:	f7fc fc06 	bl	8006e48 <HAL_RCC_GetPCLK2Freq>
 800a63c:	6178      	str	r0, [r7, #20]
        break;
 800a63e:	e00f      	b.n	800a660 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a640:	4b49      	ldr	r3, [pc, #292]	; (800a768 <UART_SetConfig+0x510>)
 800a642:	617b      	str	r3, [r7, #20]
        break;
 800a644:	e00c      	b.n	800a660 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a646:	f7fc fb53 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 800a64a:	6178      	str	r0, [r7, #20]
        break;
 800a64c:	e008      	b.n	800a660 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a64e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a652:	617b      	str	r3, [r7, #20]
        break;
 800a654:	e004      	b.n	800a660 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	76bb      	strb	r3, [r7, #26]
        break;
 800a65e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d074      	beq.n	800a750 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	005a      	lsls	r2, r3, #1
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	441a      	add	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	2b0f      	cmp	r3, #15
 800a682:	d916      	bls.n	800a6b2 <UART_SetConfig+0x45a>
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68a:	d212      	bcs.n	800a6b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	f023 030f 	bic.w	r3, r3, #15
 800a694:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	085b      	lsrs	r3, r3, #1
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	89fb      	ldrh	r3, [r7, #14]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	89fa      	ldrh	r2, [r7, #14]
 800a6ae:	60da      	str	r2, [r3, #12]
 800a6b0:	e04e      	b.n	800a750 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	76bb      	strb	r3, [r7, #26]
 800a6b6:	e04b      	b.n	800a750 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6b8:	7efb      	ldrb	r3, [r7, #27]
 800a6ba:	2b08      	cmp	r3, #8
 800a6bc:	d827      	bhi.n	800a70e <UART_SetConfig+0x4b6>
 800a6be:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <UART_SetConfig+0x46c>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a6e9 	.word	0x0800a6e9
 800a6c8:	0800a6f1 	.word	0x0800a6f1
 800a6cc:	0800a6f9 	.word	0x0800a6f9
 800a6d0:	0800a70f 	.word	0x0800a70f
 800a6d4:	0800a6ff 	.word	0x0800a6ff
 800a6d8:	0800a70f 	.word	0x0800a70f
 800a6dc:	0800a70f 	.word	0x0800a70f
 800a6e0:	0800a70f 	.word	0x0800a70f
 800a6e4:	0800a707 	.word	0x0800a707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e8:	f7fc fb98 	bl	8006e1c <HAL_RCC_GetPCLK1Freq>
 800a6ec:	6178      	str	r0, [r7, #20]
        break;
 800a6ee:	e013      	b.n	800a718 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6f0:	f7fc fbaa 	bl	8006e48 <HAL_RCC_GetPCLK2Freq>
 800a6f4:	6178      	str	r0, [r7, #20]
        break;
 800a6f6:	e00f      	b.n	800a718 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6f8:	4b1b      	ldr	r3, [pc, #108]	; (800a768 <UART_SetConfig+0x510>)
 800a6fa:	617b      	str	r3, [r7, #20]
        break;
 800a6fc:	e00c      	b.n	800a718 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6fe:	f7fc faf7 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 800a702:	6178      	str	r0, [r7, #20]
        break;
 800a704:	e008      	b.n	800a718 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a70a:	617b      	str	r3, [r7, #20]
        break;
 800a70c:	e004      	b.n	800a718 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	76bb      	strb	r3, [r7, #26]
        break;
 800a716:	bf00      	nop
    }

    if (pclk != 0U)
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d018      	beq.n	800a750 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	085a      	lsrs	r2, r3, #1
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	441a      	add	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a730:	b29b      	uxth	r3, r3
 800a732:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	2b0f      	cmp	r3, #15
 800a738:	d908      	bls.n	800a74c <UART_SetConfig+0x4f4>
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a740:	d204      	bcs.n	800a74c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	e001      	b.n	800a750 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a75c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3720      	adds	r7, #32
 800a762:	46bd      	mov	sp, r7
 800a764:	bdb0      	pop	{r4, r5, r7, pc}
 800a766:	bf00      	nop
 800a768:	00f42400 	.word	0x00f42400

0800a76c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00a      	beq.n	800a7b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	430a      	orrs	r2, r1
 800a7b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d00a      	beq.n	800a7da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	f003 0308 	and.w	r3, r3, #8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	430a      	orrs	r2, r1
 800a7fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a800:	f003 0310 	and.w	r3, r3, #16
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00a      	beq.n	800a81e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	f003 0320 	and.w	r3, r3, #32
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00a      	beq.n	800a840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	430a      	orrs	r2, r1
 800a83e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d01a      	beq.n	800a882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	430a      	orrs	r2, r1
 800a860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a86a:	d10a      	bne.n	800a882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	430a      	orrs	r2, r1
 800a880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	605a      	str	r2, [r3, #4]
  }
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af02      	add	r7, sp, #8
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8c0:	f7f9 fcb4 	bl	800422c <HAL_GetTick>
 800a8c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0308 	and.w	r3, r3, #8
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d10e      	bne.n	800a8f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f82d 	bl	800a942 <UART_WaitOnFlagUntilTimeout>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e023      	b.n	800a93a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0304 	and.w	r3, r3, #4
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d10e      	bne.n	800a91e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f817 	bl	800a942 <UART_WaitOnFlagUntilTimeout>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e00d      	b.n	800a93a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2220      	movs	r2, #32
 800a922:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2220      	movs	r2, #32
 800a928:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	60f8      	str	r0, [r7, #12]
 800a94a:	60b9      	str	r1, [r7, #8]
 800a94c:	603b      	str	r3, [r7, #0]
 800a94e:	4613      	mov	r3, r2
 800a950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a952:	e05e      	b.n	800aa12 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a95a:	d05a      	beq.n	800aa12 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a95c:	f7f9 fc66 	bl	800422c <HAL_GetTick>
 800a960:	4602      	mov	r2, r0
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d302      	bcc.n	800a972 <UART_WaitOnFlagUntilTimeout+0x30>
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d11b      	bne.n	800a9aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a980:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0201 	bic.w	r2, r2, #1
 800a990:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2220      	movs	r2, #32
 800a996:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2220      	movs	r2, #32
 800a99c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e043      	b.n	800aa32 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d02c      	beq.n	800aa12 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c6:	d124      	bne.n	800aa12 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 0201 	bic.w	r2, r2, #1
 800a9f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e00f      	b.n	800aa32 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	69da      	ldr	r2, [r3, #28]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	bf0c      	ite	eq
 800aa22:	2301      	moveq	r3, #1
 800aa24:	2300      	movne	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	461a      	mov	r2, r3
 800aa2a:	79fb      	ldrb	r3, [r7, #7]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d091      	beq.n	800a954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
	...

0800aa3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa40:	4904      	ldr	r1, [pc, #16]	; (800aa54 <MX_FATFS_Init+0x18>)
 800aa42:	4805      	ldr	r0, [pc, #20]	; (800aa58 <MX_FATFS_Init+0x1c>)
 800aa44:	f000 f8ae 	bl	800aba4 <FATFS_LinkDriver>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	4b03      	ldr	r3, [pc, #12]	; (800aa5c <MX_FATFS_Init+0x20>)
 800aa4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa50:	bf00      	nop
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	2000dfcc 	.word	0x2000dfcc
 800aa58:	20000148 	.word	0x20000148
 800aa5c:	2000dfd0 	.word	0x2000dfd0

0800aa60 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7f6 fc1d 	bl	80012ac <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800aa72:	bf00      	nop
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7f6 fcf5 	bl	8001478 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800aa8e:	bf00      	nop
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	607a      	str	r2, [r7, #4]
 800aaa2:	603b      	str	r3, [r7, #0]
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 800aaa8:	7bf8      	ldrb	r0, [r7, #15]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	f7f6 fcf8 	bl	80014a4 <SD_disk_read>
  /* USER CODE END READ */
}
 800aab4:	bf00      	nop
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b084      	sub	sp, #16
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 800aace:	7bf8      	ldrb	r0, [r7, #15]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	f7f6 fd4f 	bl	8001578 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800aada:	bf00      	nop
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	603a      	str	r2, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	79b9      	ldrb	r1, [r7, #6]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7f6 fdc0 	bl	8001680 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800ab00:	bf00      	nop
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	4613      	mov	r3, r2
 800ab18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ab22:	4b1f      	ldr	r3, [pc, #124]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab24:	7a5b      	ldrb	r3, [r3, #9]
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d131      	bne.n	800ab90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab2e:	7a5b      	ldrb	r3, [r3, #9]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	461a      	mov	r2, r3
 800ab34:	4b1a      	ldr	r3, [pc, #104]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab36:	2100      	movs	r1, #0
 800ab38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab3a:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab3c:	7a5b      	ldrb	r3, [r3, #9]
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	4a17      	ldr	r2, [pc, #92]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab4a:	4b15      	ldr	r3, [pc, #84]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab4c:	7a5b      	ldrb	r3, [r3, #9]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	4b13      	ldr	r3, [pc, #76]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab54:	4413      	add	r3, r2
 800ab56:	79fa      	ldrb	r2, [r7, #7]
 800ab58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab5a:	4b11      	ldr	r3, [pc, #68]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab5c:	7a5b      	ldrb	r3, [r3, #9]
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	b2d1      	uxtb	r1, r2
 800ab64:	4a0e      	ldr	r2, [pc, #56]	; (800aba0 <FATFS_LinkDriverEx+0x94>)
 800ab66:	7251      	strb	r1, [r2, #9]
 800ab68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab6a:	7dbb      	ldrb	r3, [r7, #22]
 800ab6c:	3330      	adds	r3, #48	; 0x30
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	3301      	adds	r3, #1
 800ab78:	223a      	movs	r2, #58	; 0x3a
 800ab7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	3302      	adds	r3, #2
 800ab80:	222f      	movs	r2, #47	; 0x2f
 800ab82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	3303      	adds	r3, #3
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	371c      	adds	r7, #28
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	20000230 	.word	0x20000230

0800aba4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800abae:	2200      	movs	r2, #0
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff ffaa 	bl	800ab0c <FATFS_LinkDriverEx>
 800abb8:	4603      	mov	r3, r0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <__NVIC_SetPriority>:
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	4603      	mov	r3, r0
 800abcc:	6039      	str	r1, [r7, #0]
 800abce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	db0a      	blt.n	800abee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	490c      	ldr	r1, [pc, #48]	; (800ac10 <__NVIC_SetPriority+0x4c>)
 800abde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abe2:	0112      	lsls	r2, r2, #4
 800abe4:	b2d2      	uxtb	r2, r2
 800abe6:	440b      	add	r3, r1
 800abe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800abec:	e00a      	b.n	800ac04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	4908      	ldr	r1, [pc, #32]	; (800ac14 <__NVIC_SetPriority+0x50>)
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	f003 030f 	and.w	r3, r3, #15
 800abfa:	3b04      	subs	r3, #4
 800abfc:	0112      	lsls	r2, r2, #4
 800abfe:	b2d2      	uxtb	r2, r2
 800ac00:	440b      	add	r3, r1
 800ac02:	761a      	strb	r2, [r3, #24]
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	e000e100 	.word	0xe000e100
 800ac14:	e000ed00 	.word	0xe000ed00

0800ac18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <SysTick_Handler+0x1c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ac20:	f001 ffcc 	bl	800cbbc <xTaskGetSchedulerState>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d001      	beq.n	800ac2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ac2a:	f002 fdcd 	bl	800d7c8 <xPortSysTickHandler>
  }
}
 800ac2e:	bf00      	nop
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	e000e010 	.word	0xe000e010

0800ac38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	f06f 0004 	mvn.w	r0, #4
 800ac42:	f7ff ffbf 	bl	800abc4 <__NVIC_SetPriority>
#endif
}
 800ac46:	bf00      	nop
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac52:	f3ef 8305 	mrs	r3, IPSR
 800ac56:	603b      	str	r3, [r7, #0]
  return(result);
 800ac58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac5e:	f06f 0305 	mvn.w	r3, #5
 800ac62:	607b      	str	r3, [r7, #4]
 800ac64:	e00c      	b.n	800ac80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac66:	4b0a      	ldr	r3, [pc, #40]	; (800ac90 <osKernelInitialize+0x44>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d105      	bne.n	800ac7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac6e:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <osKernelInitialize+0x44>)
 800ac70:	2201      	movs	r2, #1
 800ac72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	607b      	str	r3, [r7, #4]
 800ac78:	e002      	b.n	800ac80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac80:	687b      	ldr	r3, [r7, #4]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	2000023c 	.word	0x2000023c

0800ac94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac9a:	f3ef 8305 	mrs	r3, IPSR
 800ac9e:	603b      	str	r3, [r7, #0]
  return(result);
 800aca0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <osKernelStart+0x1a>
    stat = osErrorISR;
 800aca6:	f06f 0305 	mvn.w	r3, #5
 800acaa:	607b      	str	r3, [r7, #4]
 800acac:	e010      	b.n	800acd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <osKernelStart+0x48>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d109      	bne.n	800acca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800acb6:	f7ff ffbf 	bl	800ac38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800acba:	4b08      	ldr	r3, [pc, #32]	; (800acdc <osKernelStart+0x48>)
 800acbc:	2202      	movs	r2, #2
 800acbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800acc0:	f001 faf8 	bl	800c2b4 <vTaskStartScheduler>
      stat = osOK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	607b      	str	r3, [r7, #4]
 800acc8:	e002      	b.n	800acd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800acca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800acd0:	687b      	ldr	r3, [r7, #4]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2000023c 	.word	0x2000023c

0800ace0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	; 0x38
 800ace4:	af04      	add	r7, sp, #16
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800acec:	2300      	movs	r3, #0
 800acee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acf0:	f3ef 8305 	mrs	r3, IPSR
 800acf4:	617b      	str	r3, [r7, #20]
  return(result);
 800acf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d17e      	bne.n	800adfa <osThreadNew+0x11a>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d07b      	beq.n	800adfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad02:	2380      	movs	r3, #128	; 0x80
 800ad04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad06:	2318      	movs	r3, #24
 800ad08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d045      	beq.n	800ada6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <osThreadNew+0x48>
        name = attr->name;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d008      	beq.n	800ad4e <osThreadNew+0x6e>
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2b38      	cmp	r3, #56	; 0x38
 800ad40:	d805      	bhi.n	800ad4e <osThreadNew+0x6e>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <osThreadNew+0x72>
        return (NULL);
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e054      	b.n	800adfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	089b      	lsrs	r3, r3, #2
 800ad60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00e      	beq.n	800ad88 <osThreadNew+0xa8>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	2b5b      	cmp	r3, #91	; 0x5b
 800ad70:	d90a      	bls.n	800ad88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d006      	beq.n	800ad88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <osThreadNew+0xa8>
        mem = 1;
 800ad82:	2301      	movs	r3, #1
 800ad84:	61bb      	str	r3, [r7, #24]
 800ad86:	e010      	b.n	800adaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10c      	bne.n	800adaa <osThreadNew+0xca>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68db      	ldr	r3, [r3, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d108      	bne.n	800adaa <osThreadNew+0xca>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d104      	bne.n	800adaa <osThreadNew+0xca>
          mem = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	e001      	b.n	800adaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d110      	bne.n	800add2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800adb8:	9202      	str	r2, [sp, #8]
 800adba:	9301      	str	r3, [sp, #4]
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	6a3a      	ldr	r2, [r7, #32]
 800adc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f001 f820 	bl	800be0c <xTaskCreateStatic>
 800adcc:	4603      	mov	r3, r0
 800adce:	613b      	str	r3, [r7, #16]
 800add0:	e013      	b.n	800adfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d110      	bne.n	800adfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	b29a      	uxth	r2, r3
 800addc:	f107 0310 	add.w	r3, r7, #16
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f001 f86b 	bl	800bec6 <xTaskCreate>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d001      	beq.n	800adfa <osThreadNew+0x11a>
            hTask = NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800adfa:	693b      	ldr	r3, [r7, #16]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3728      	adds	r7, #40	; 0x28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae0c:	f3ef 8305 	mrs	r3, IPSR
 800ae10:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <osDelay+0x1c>
    stat = osErrorISR;
 800ae18:	f06f 0305 	mvn.w	r3, #5
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	e007      	b.n	800ae30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f001 fa0e 	bl	800c24c <vTaskDelay>
    }
  }

  return (stat);
 800ae30:	68fb      	ldr	r3, [r7, #12]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b086      	sub	sp, #24
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae42:	f3ef 8305 	mrs	r3, IPSR
 800ae46:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae48:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ae4e:	f06f 0305 	mvn.w	r3, #5
 800ae52:	617b      	str	r3, [r7, #20]
 800ae54:	e019      	b.n	800ae8a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ae5a:	f001 fb3d 	bl	800c4d8 <xTaskGetTickCount>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <osDelayUntil+0x4a>
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	db06      	blt.n	800ae84 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ae76:	f107 0308 	add.w	r3, r7, #8
 800ae7a:	6939      	ldr	r1, [r7, #16]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f001 f967 	bl	800c150 <vTaskDelayUntil>
 800ae82:	e002      	b.n	800ae8a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ae84:	f06f 0303 	mvn.w	r3, #3
 800ae88:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ae8a:	697b      	ldr	r3, [r7, #20]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aea0:	f3ef 8305 	mrs	r3, IPSR
 800aea4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d12d      	bne.n	800af08 <osEventFlagsNew+0x74>
    mem = -1;
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeb0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d015      	beq.n	800aee4 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d006      	beq.n	800aece <osEventFlagsNew+0x3a>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	2b1f      	cmp	r3, #31
 800aec6:	d902      	bls.n	800aece <osEventFlagsNew+0x3a>
        mem = 1;
 800aec8:	2301      	movs	r3, #1
 800aeca:	613b      	str	r3, [r7, #16]
 800aecc:	e00c      	b.n	800aee8 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d108      	bne.n	800aee8 <osEventFlagsNew+0x54>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d104      	bne.n	800aee8 <osEventFlagsNew+0x54>
          mem = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	613b      	str	r3, [r7, #16]
 800aee2:	e001      	b.n	800aee8 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d106      	bne.n	800aefc <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 f8a8 	bl	800b048 <xEventGroupCreateStatic>
 800aef8:	6178      	str	r0, [r7, #20]
 800aefa:	e005      	b.n	800af08 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800af02:	f000 f8d8 	bl	800b0b6 <xEventGroupCreate>
 800af06:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800af08:	697b      	ldr	r3, [r7, #20]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800af12:	b580      	push	{r7, lr}
 800af14:	b08c      	sub	sp, #48	; 0x30
 800af16:	af02      	add	r7, sp, #8
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
 800af1e:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d004      	beq.n	800af34 <osEventFlagsWait+0x22>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d003      	beq.n	800af3c <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800af34:	f06f 0303 	mvn.w	r3, #3
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	e04b      	b.n	800afd4 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af3c:	f3ef 8305 	mrs	r3, IPSR
 800af40:	617b      	str	r3, [r7, #20]
  return(result);
 800af42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800af48:	f06f 0305 	mvn.w	r3, #5
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	e041      	b.n	800afd4 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800af5a:	2301      	movs	r3, #1
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
 800af5e:	e001      	b.n	800af64 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800af60:	2300      	movs	r3, #0
 800af62:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d002      	beq.n	800af74 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800af6e:	2300      	movs	r3, #0
 800af70:	623b      	str	r3, [r7, #32]
 800af72:	e001      	b.n	800af78 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800af74:	2301      	movs	r3, #1
 800af76:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	6a3a      	ldr	r2, [r7, #32]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	69b8      	ldr	r0, [r7, #24]
 800af84:	f000 f8b2 	bl	800b0ec <xEventGroupWaitBits>
 800af88:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f003 0301 	and.w	r3, r3, #1
 800af90:	2b00      	cmp	r3, #0
 800af92:	d010      	beq.n	800afb6 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	4013      	ands	r3, r2
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d019      	beq.n	800afd4 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800afa6:	f06f 0301 	mvn.w	r3, #1
 800afaa:	61fb      	str	r3, [r7, #28]
 800afac:	e012      	b.n	800afd4 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800afae:	f06f 0302 	mvn.w	r3, #2
 800afb2:	61fb      	str	r3, [r7, #28]
 800afb4:	e00e      	b.n	800afd4 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	4013      	ands	r3, r2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d109      	bne.n	800afd4 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800afc6:	f06f 0301 	mvn.w	r3, #1
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	e002      	b.n	800afd4 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800afce:	f06f 0302 	mvn.w	r3, #2
 800afd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800afd4:	69fb      	ldr	r3, [r7, #28]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3728      	adds	r7, #40	; 0x28
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800afe0:	b480      	push	{r7}
 800afe2:	b085      	sub	sp, #20
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4a07      	ldr	r2, [pc, #28]	; (800b00c <vApplicationGetIdleTaskMemory+0x2c>)
 800aff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	4a06      	ldr	r2, [pc, #24]	; (800b010 <vApplicationGetIdleTaskMemory+0x30>)
 800aff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2280      	movs	r2, #128	; 0x80
 800affc:	601a      	str	r2, [r3, #0]
}
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	20000240 	.word	0x20000240
 800b010:	2000029c 	.word	0x2000029c

0800b014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4a07      	ldr	r2, [pc, #28]	; (800b040 <vApplicationGetTimerTaskMemory+0x2c>)
 800b024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4a06      	ldr	r2, [pc, #24]	; (800b044 <vApplicationGetTimerTaskMemory+0x30>)
 800b02a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b032:	601a      	str	r2, [r3, #0]
}
 800b034:	bf00      	nop
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	2000049c 	.word	0x2000049c
 800b044:	200004f8 	.word	0x200004f8

0800b048 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b068:	bf00      	nop
 800b06a:	e7fe      	b.n	800b06a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b06c:	2320      	movs	r3, #32
 800b06e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2b20      	cmp	r3, #32
 800b074:	d00a      	beq.n	800b08c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800b076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	60fb      	str	r3, [r7, #12]
}
 800b088:	bf00      	nop
 800b08a:	e7fe      	b.n	800b08a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00a      	beq.n	800b0ac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f000 f913 	bl	800b2cc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b0ac:	697b      	ldr	r3, [r7, #20]
	}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b0bc:	2020      	movs	r0, #32
 800b0be:	f002 fc13 	bl	800d8e8 <pvPortMalloc>
 800b0c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 f8f9 	bl	800b2cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b0e0:	687b      	ldr	r3, [r7, #4]
	}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b090      	sub	sp, #64	; 0x40
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b102:	2300      	movs	r3, #0
 800b104:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <xEventGroupWaitBits+0x36>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	623b      	str	r3, [r7, #32]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <xEventGroupWaitBits+0x56>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	61fb      	str	r3, [r7, #28]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <xEventGroupWaitBits+0x72>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	61bb      	str	r3, [r7, #24]
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b15e:	f001 fd2d 	bl	800cbbc <xTaskGetSchedulerState>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <xEventGroupWaitBits+0x82>
 800b168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <xEventGroupWaitBits+0x86>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <xEventGroupWaitBits+0x88>
 800b172:	2300      	movs	r3, #0
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10a      	bne.n	800b18e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800b178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	617b      	str	r3, [r7, #20]
}
 800b18a:	bf00      	nop
 800b18c:	e7fe      	b.n	800b18c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800b18e:	f001 f8f7 	bl	800c380 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b19e:	f000 f873 	bl	800b288 <prvTestWaitCondition>
 800b1a2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00e      	beq.n	800b1c8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d028      	beq.n	800b20a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	43db      	mvns	r3, r3
 800b1c0:	401a      	ands	r2, r3
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e020      	b.n	800b20a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b1c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d104      	bne.n	800b1d8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	633b      	str	r3, [r7, #48]	; 0x30
 800b1d6:	e018      	b.n	800b20a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1e4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1f2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f6:	1d18      	adds	r0, r3, #4
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b200:	4619      	mov	r1, r3
 800b202:	f001 fab5 	bl	800c770 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b20a:	f001 f8c7 	bl	800c39c <xTaskResumeAll>
 800b20e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b212:	2b00      	cmp	r3, #0
 800b214:	d031      	beq.n	800b27a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d107      	bne.n	800b22c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800b21c:	4b19      	ldr	r3, [pc, #100]	; (800b284 <xEventGroupWaitBits+0x198>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b22c:	f001 fd52 	bl	800ccd4 <uxTaskResetEventItemValue>
 800b230:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d11a      	bne.n	800b272 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800b23c:	f002 fa32 	bl	800d6a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b24c:	f000 f81c 	bl	800b288 <prvTestWaitCondition>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d009      	beq.n	800b26a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	43db      	mvns	r3, r3
 800b264:	401a      	ands	r2, r3
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800b26a:	2301      	movs	r3, #1
 800b26c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800b26e:	f002 fa49 	bl	800d704 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800b272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b274:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b278:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800b27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3740      	adds	r7, #64	; 0x40
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d107      	bne.n	800b2ae <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00a      	beq.n	800b2be <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e007      	b.n	800b2be <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d101      	bne.n	800b2be <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800b2be:	697b      	ldr	r3, [r7, #20]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	371c      	adds	r7, #28
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f103 0208 	add.w	r2, r3, #8
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f103 0208 	add.w	r2, r3, #8
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f103 0208 	add.w	r2, r3, #8
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b31a:	bf00      	nop
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b326:	b480      	push	{r7}
 800b328:	b085      	sub	sp, #20
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
}
 800b362:	bf00      	nop
 800b364:	3714      	adds	r7, #20
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b384:	d103      	bne.n	800b38e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	e00c      	b.n	800b3a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3308      	adds	r3, #8
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	e002      	b.n	800b39c <vListInsert+0x2e>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d2f6      	bcs.n	800b396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	1c5a      	adds	r2, r3, #1
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	601a      	str	r2, [r3, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	6892      	ldr	r2, [r2, #8]
 800b3f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	6852      	ldr	r2, [r2, #4]
 800b400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d103      	bne.n	800b414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	1e5a      	subs	r2, r3, #1
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3714      	adds	r7, #20
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10a      	bne.n	800b45e <xQueueGenericReset+0x2a>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	60bb      	str	r3, [r7, #8]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b45e:	f002 f921 	bl	800d6a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46a:	68f9      	ldr	r1, [r7, #12]
 800b46c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b46e:	fb01 f303 	mul.w	r3, r1, r3
 800b472:	441a      	add	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b48e:	3b01      	subs	r3, #1
 800b490:	68f9      	ldr	r1, [r7, #12]
 800b492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b494:	fb01 f303 	mul.w	r3, r1, r3
 800b498:	441a      	add	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	22ff      	movs	r2, #255	; 0xff
 800b4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	22ff      	movs	r2, #255	; 0xff
 800b4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d114      	bne.n	800b4de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01a      	beq.n	800b4f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3310      	adds	r3, #16
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f001 f9bd 	bl	800c840 <xTaskRemoveFromEventList>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d012      	beq.n	800b4f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4cc:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <xQueueGenericReset+0xcc>)
 800b4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	f3bf 8f4f 	dsb	sy
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	e009      	b.n	800b4f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3310      	adds	r3, #16
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fef2 	bl	800b2cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3324      	adds	r3, #36	; 0x24
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff feed 	bl	800b2cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4f2:	f002 f907 	bl	800d704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4f6:	2301      	movs	r3, #1
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	e000ed04 	.word	0xe000ed04

0800b504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b504:	b580      	push	{r7, lr}
 800b506:	b08e      	sub	sp, #56	; 0x38
 800b508:	af02      	add	r7, sp, #8
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d10a      	bne.n	800b52e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <xQueueGenericCreateStatic+0x52>
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <xQueueGenericCreateStatic+0x56>
 800b556:	2301      	movs	r3, #1
 800b558:	e000      	b.n	800b55c <xQueueGenericCreateStatic+0x58>
 800b55a:	2300      	movs	r3, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	623b      	str	r3, [r7, #32]
}
 800b572:	bf00      	nop
 800b574:	e7fe      	b.n	800b574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <xQueueGenericCreateStatic+0x7e>
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <xQueueGenericCreateStatic+0x82>
 800b582:	2301      	movs	r3, #1
 800b584:	e000      	b.n	800b588 <xQueueGenericCreateStatic+0x84>
 800b586:	2300      	movs	r3, #0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	61fb      	str	r3, [r7, #28]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b5a2:	2350      	movs	r3, #80	; 0x50
 800b5a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b50      	cmp	r3, #80	; 0x50
 800b5aa:	d00a      	beq.n	800b5c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	61bb      	str	r3, [r7, #24]
}
 800b5be:	bf00      	nop
 800b5c0:	e7fe      	b.n	800b5c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00d      	beq.n	800b5ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f000 f805 	bl	800b5f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3730      	adds	r7, #48	; 0x30
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d103      	bne.n	800b610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	e002      	b.n	800b616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b622:	2101      	movs	r1, #1
 800b624:	69b8      	ldr	r0, [r7, #24]
 800b626:	f7ff ff05 	bl	800b434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	78fa      	ldrb	r2, [r7, #3]
 800b62e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b08e      	sub	sp, #56	; 0x38
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b64a:	2300      	movs	r3, #0
 800b64c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <xQueueGenericSend+0x32>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d103      	bne.n	800b67c <xQueueGenericSend+0x40>
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <xQueueGenericSend+0x44>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e000      	b.n	800b682 <xQueueGenericSend+0x46>
 800b680:	2300      	movs	r3, #0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <xQueueGenericSend+0x60>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d103      	bne.n	800b6aa <xQueueGenericSend+0x6e>
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d101      	bne.n	800b6ae <xQueueGenericSend+0x72>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e000      	b.n	800b6b0 <xQueueGenericSend+0x74>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d10a      	bne.n	800b6ca <xQueueGenericSend+0x8e>
	__asm volatile
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	623b      	str	r3, [r7, #32]
}
 800b6c6:	bf00      	nop
 800b6c8:	e7fe      	b.n	800b6c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6ca:	f001 fa77 	bl	800cbbc <xTaskGetSchedulerState>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <xQueueGenericSend+0x9e>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d101      	bne.n	800b6de <xQueueGenericSend+0xa2>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <xQueueGenericSend+0xa4>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10a      	bne.n	800b6fa <xQueueGenericSend+0xbe>
	__asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	61fb      	str	r3, [r7, #28]
}
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6fa:	f001 ffd3 	bl	800d6a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b706:	429a      	cmp	r2, r3
 800b708:	d302      	bcc.n	800b710 <xQueueGenericSend+0xd4>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d129      	bne.n	800b764 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	68b9      	ldr	r1, [r7, #8]
 800b714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b716:	f000 fa0b 	bl	800bb30 <prvCopyDataToQueue>
 800b71a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	d010      	beq.n	800b746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	3324      	adds	r3, #36	; 0x24
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 f889 	bl	800c840 <xTaskRemoveFromEventList>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d013      	beq.n	800b75c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b734:	4b3f      	ldr	r3, [pc, #252]	; (800b834 <xQueueGenericSend+0x1f8>)
 800b736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	e00a      	b.n	800b75c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d007      	beq.n	800b75c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b74c:	4b39      	ldr	r3, [pc, #228]	; (800b834 <xQueueGenericSend+0x1f8>)
 800b74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b75c:	f001 ffd2 	bl	800d704 <vPortExitCritical>
				return pdPASS;
 800b760:	2301      	movs	r3, #1
 800b762:	e063      	b.n	800b82c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d103      	bne.n	800b772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b76a:	f001 ffcb 	bl	800d704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b76e:	2300      	movs	r3, #0
 800b770:	e05c      	b.n	800b82c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b774:	2b00      	cmp	r3, #0
 800b776:	d106      	bne.n	800b786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b778:	f107 0314 	add.w	r3, r7, #20
 800b77c:	4618      	mov	r0, r3
 800b77e:	f001 f8c3 	bl	800c908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b782:	2301      	movs	r3, #1
 800b784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b786:	f001 ffbd 	bl	800d704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b78a:	f000 fdf9 	bl	800c380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b78e:	f001 ff89 	bl	800d6a4 <vPortEnterCritical>
 800b792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b798:	b25b      	sxtb	r3, r3
 800b79a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b79e:	d103      	bne.n	800b7a8 <xQueueGenericSend+0x16c>
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ae:	b25b      	sxtb	r3, r3
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7b4:	d103      	bne.n	800b7be <xQueueGenericSend+0x182>
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7be:	f001 ffa1 	bl	800d704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b7c2:	1d3a      	adds	r2, r7, #4
 800b7c4:	f107 0314 	add.w	r3, r7, #20
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f001 f8b2 	bl	800c934 <xTaskCheckForTimeOut>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d124      	bne.n	800b820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b7d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7d8:	f000 faa2 	bl	800bd20 <prvIsQueueFull>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d018      	beq.n	800b814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e4:	3310      	adds	r3, #16
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 ff9c 	bl	800c728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b7f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b7f2:	f000 fa2d 	bl	800bc50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b7f6:	f000 fdd1 	bl	800c39c <xTaskResumeAll>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f47f af7c 	bne.w	800b6fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <xQueueGenericSend+0x1f8>)
 800b804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b808:	601a      	str	r2, [r3, #0]
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	e772      	b.n	800b6fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b816:	f000 fa1b 	bl	800bc50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b81a:	f000 fdbf 	bl	800c39c <xTaskResumeAll>
 800b81e:	e76c      	b.n	800b6fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b822:	f000 fa15 	bl	800bc50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b826:	f000 fdb9 	bl	800c39c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b82a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3738      	adds	r7, #56	; 0x38
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	e000ed04 	.word	0xe000ed04

0800b838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b090      	sub	sp, #64	; 0x40
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d103      	bne.n	800b874 <xQueueGenericSendFromISR+0x3c>
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <xQueueGenericSendFromISR+0x40>
 800b874:	2301      	movs	r3, #1
 800b876:	e000      	b.n	800b87a <xQueueGenericSendFromISR+0x42>
 800b878:	2300      	movs	r3, #0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10a      	bne.n	800b894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d103      	bne.n	800b8a2 <xQueueGenericSendFromISR+0x6a>
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d101      	bne.n	800b8a6 <xQueueGenericSendFromISR+0x6e>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e000      	b.n	800b8a8 <xQueueGenericSendFromISR+0x70>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d10a      	bne.n	800b8c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	623b      	str	r3, [r7, #32]
}
 800b8be:	bf00      	nop
 800b8c0:	e7fe      	b.n	800b8c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8c2:	f001 ffd1 	bl	800d868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b8c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	61fa      	str	r2, [r7, #28]
 800b8dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b8de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d302      	bcc.n	800b8f4 <xQueueGenericSendFromISR+0xbc>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d12f      	bne.n	800b954 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b90a:	f000 f911 	bl	800bb30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b90e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b916:	d112      	bne.n	800b93e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d016      	beq.n	800b94e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	3324      	adds	r3, #36	; 0x24
 800b924:	4618      	mov	r0, r3
 800b926:	f000 ff8b 	bl	800c840 <xTaskRemoveFromEventList>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00e      	beq.n	800b94e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00b      	beq.n	800b94e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	e007      	b.n	800b94e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b93e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b942:	3301      	adds	r3, #1
 800b944:	b2db      	uxtb	r3, r3
 800b946:	b25a      	sxtb	r2, r3
 800b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b94e:	2301      	movs	r3, #1
 800b950:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b952:	e001      	b.n	800b958 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b954:	2300      	movs	r3, #0
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b966:	4618      	mov	r0, r3
 800b968:	3740      	adds	r7, #64	; 0x40
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b08c      	sub	sp, #48	; 0x30
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b97c:	2300      	movs	r3, #0
 800b97e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10a      	bne.n	800b9a0 <xQueueReceive+0x30>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	623b      	str	r3, [r7, #32]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d103      	bne.n	800b9ae <xQueueReceive+0x3e>
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <xQueueReceive+0x42>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e000      	b.n	800b9b4 <xQueueReceive+0x44>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10a      	bne.n	800b9ce <xQueueReceive+0x5e>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	61fb      	str	r3, [r7, #28]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9ce:	f001 f8f5 	bl	800cbbc <xTaskGetSchedulerState>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d102      	bne.n	800b9de <xQueueReceive+0x6e>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <xQueueReceive+0x72>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e000      	b.n	800b9e4 <xQueueReceive+0x74>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10a      	bne.n	800b9fe <xQueueReceive+0x8e>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	61bb      	str	r3, [r7, #24]
}
 800b9fa:	bf00      	nop
 800b9fc:	e7fe      	b.n	800b9fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9fe:	f001 fe51 	bl	800d6a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d01f      	beq.n	800ba4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba0e:	68b9      	ldr	r1, [r7, #8]
 800ba10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba12:	f000 f8f7 	bl	800bc04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	1e5a      	subs	r2, r3, #1
 800ba1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00f      	beq.n	800ba46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	3310      	adds	r3, #16
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 ff08 	bl	800c840 <xTaskRemoveFromEventList>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba36:	4b3d      	ldr	r3, [pc, #244]	; (800bb2c <xQueueReceive+0x1bc>)
 800ba38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba46:	f001 fe5d 	bl	800d704 <vPortExitCritical>
				return pdPASS;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e069      	b.n	800bb22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba54:	f001 fe56 	bl	800d704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e062      	b.n	800bb22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba62:	f107 0310 	add.w	r3, r7, #16
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 ff4e 	bl	800c908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba70:	f001 fe48 	bl	800d704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba74:	f000 fc84 	bl	800c380 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba78:	f001 fe14 	bl	800d6a4 <vPortEnterCritical>
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba88:	d103      	bne.n	800ba92 <xQueueReceive+0x122>
 800ba8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba98:	b25b      	sxtb	r3, r3
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba9e:	d103      	bne.n	800baa8 <xQueueReceive+0x138>
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800baa8:	f001 fe2c 	bl	800d704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baac:	1d3a      	adds	r2, r7, #4
 800baae:	f107 0310 	add.w	r3, r7, #16
 800bab2:	4611      	mov	r1, r2
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 ff3d 	bl	800c934 <xTaskCheckForTimeOut>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d123      	bne.n	800bb08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bac2:	f000 f917 	bl	800bcf4 <prvIsQueueEmpty>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d017      	beq.n	800bafc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	4611      	mov	r1, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 fe27 	bl	800c728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800badc:	f000 f8b8 	bl	800bc50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bae0:	f000 fc5c 	bl	800c39c <xTaskResumeAll>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d189      	bne.n	800b9fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800baea:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <xQueueReceive+0x1bc>)
 800baec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	e780      	b.n	800b9fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bafe:	f000 f8a7 	bl	800bc50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb02:	f000 fc4b 	bl	800c39c <xTaskResumeAll>
 800bb06:	e77a      	b.n	800b9fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0a:	f000 f8a1 	bl	800bc50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb0e:	f000 fc45 	bl	800c39c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb14:	f000 f8ee 	bl	800bcf4 <prvIsQueueEmpty>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f43f af6f 	beq.w	800b9fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3730      	adds	r7, #48	; 0x30
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	e000ed04 	.word	0xe000ed04

0800bb30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10d      	bne.n	800bb6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d14d      	bne.n	800bbf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f001 f84c 	bl	800cbf8 <xTaskPriorityDisinherit>
 800bb60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	609a      	str	r2, [r3, #8]
 800bb68:	e043      	b.n	800bbf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d119      	bne.n	800bba4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6858      	ldr	r0, [r3, #4]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb78:	461a      	mov	r2, r3
 800bb7a:	68b9      	ldr	r1, [r7, #8]
 800bb7c:	f002 f8c8 	bl	800dd10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	685a      	ldr	r2, [r3, #4]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb88:	441a      	add	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d32b      	bcc.n	800bbf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	605a      	str	r2, [r3, #4]
 800bba2:	e026      	b.n	800bbf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	68d8      	ldr	r0, [r3, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	461a      	mov	r2, r3
 800bbae:	68b9      	ldr	r1, [r7, #8]
 800bbb0:	f002 f8ae 	bl	800dd10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	68da      	ldr	r2, [r3, #12]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbbc:	425b      	negs	r3, r3
 800bbbe:	441a      	add	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	68da      	ldr	r2, [r3, #12]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d207      	bcs.n	800bbe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	689a      	ldr	r2, [r3, #8]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd8:	425b      	negs	r3, r3
 800bbda:	441a      	add	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d105      	bne.n	800bbf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bbfa:	697b      	ldr	r3, [r7, #20]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d018      	beq.n	800bc48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68da      	ldr	r2, [r3, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1e:	441a      	add	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68da      	ldr	r2, [r3, #12]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d303      	bcc.n	800bc38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68d9      	ldr	r1, [r3, #12]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	461a      	mov	r2, r3
 800bc42:	6838      	ldr	r0, [r7, #0]
 800bc44:	f002 f864 	bl	800dd10 <memcpy>
	}
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc58:	f001 fd24 	bl	800d6a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc64:	e011      	b.n	800bc8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d012      	beq.n	800bc94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3324      	adds	r3, #36	; 0x24
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fde4 	bl	800c840 <xTaskRemoveFromEventList>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc7e:	f000 febb 	bl	800c9f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	dce9      	bgt.n	800bc66 <prvUnlockQueue+0x16>
 800bc92:	e000      	b.n	800bc96 <prvUnlockQueue+0x46>
					break;
 800bc94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	22ff      	movs	r2, #255	; 0xff
 800bc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bc9e:	f001 fd31 	bl	800d704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bca2:	f001 fcff 	bl	800d6a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcae:	e011      	b.n	800bcd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d012      	beq.n	800bcde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3310      	adds	r3, #16
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 fdbf 	bl	800c840 <xTaskRemoveFromEventList>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcc8:	f000 fe96 	bl	800c9f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	dce9      	bgt.n	800bcb0 <prvUnlockQueue+0x60>
 800bcdc:	e000      	b.n	800bce0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bcde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	22ff      	movs	r2, #255	; 0xff
 800bce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bce8:	f001 fd0c 	bl	800d704 <vPortExitCritical>
}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcfc:	f001 fcd2 	bl	800d6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d102      	bne.n	800bd0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	e001      	b.n	800bd12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd12:	f001 fcf7 	bl	800d704 <vPortExitCritical>

	return xReturn;
 800bd16:	68fb      	ldr	r3, [r7, #12]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd28:	f001 fcbc 	bl	800d6a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d102      	bne.n	800bd3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	e001      	b.n	800bd42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd42:	f001 fcdf 	bl	800d704 <vPortExitCritical>

	return xReturn;
 800bd46:	68fb      	ldr	r3, [r7, #12]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]
 800bd5e:	e014      	b.n	800bd8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd60:	4a0f      	ldr	r2, [pc, #60]	; (800bda0 <vQueueAddToRegistry+0x50>)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10b      	bne.n	800bd84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd6c:	490c      	ldr	r1, [pc, #48]	; (800bda0 <vQueueAddToRegistry+0x50>)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd76:	4a0a      	ldr	r2, [pc, #40]	; (800bda0 <vQueueAddToRegistry+0x50>)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	4413      	add	r3, r2
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd82:	e006      	b.n	800bd92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3301      	adds	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2b07      	cmp	r3, #7
 800bd8e:	d9e7      	bls.n	800bd60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	20010040 	.word	0x20010040

0800bda4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bdb4:	f001 fc76 	bl	800d6a4 <vPortEnterCritical>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdbe:	b25b      	sxtb	r3, r3
 800bdc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdc4:	d103      	bne.n	800bdce <vQueueWaitForMessageRestricted+0x2a>
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdd4:	b25b      	sxtb	r3, r3
 800bdd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdda:	d103      	bne.n	800bde4 <vQueueWaitForMessageRestricted+0x40>
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bde4:	f001 fc8e 	bl	800d704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d106      	bne.n	800bdfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	3324      	adds	r3, #36	; 0x24
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fcf5 	bl	800c7e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	f7ff ff26 	bl	800bc50 <prvUnlockQueue>
	}
 800be04:	bf00      	nop
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b08e      	sub	sp, #56	; 0x38
 800be10:	af04      	add	r7, sp, #16
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10a      	bne.n	800be36 <xTaskCreateStatic+0x2a>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	623b      	str	r3, [r7, #32]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10a      	bne.n	800be52 <xTaskCreateStatic+0x46>
	__asm volatile
 800be3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	61fb      	str	r3, [r7, #28]
}
 800be4e:	bf00      	nop
 800be50:	e7fe      	b.n	800be50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be52:	235c      	movs	r3, #92	; 0x5c
 800be54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2b5c      	cmp	r3, #92	; 0x5c
 800be5a:	d00a      	beq.n	800be72 <xTaskCreateStatic+0x66>
	__asm volatile
 800be5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be60:	f383 8811 	msr	BASEPRI, r3
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	f3bf 8f4f 	dsb	sy
 800be6c:	61bb      	str	r3, [r7, #24]
}
 800be6e:	bf00      	nop
 800be70:	e7fe      	b.n	800be70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	2b00      	cmp	r3, #0
 800be78:	d01e      	beq.n	800beb8 <xTaskCreateStatic+0xac>
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d01b      	beq.n	800beb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	2202      	movs	r2, #2
 800be8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be92:	2300      	movs	r3, #0
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	9302      	str	r3, [sp, #8]
 800be9a:	f107 0314 	add.w	r3, r7, #20
 800be9e:	9301      	str	r3, [sp, #4]
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f000 f850 	bl	800bf50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800beb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beb2:	f000 f8dd 	bl	800c070 <prvAddNewTaskToReadyList>
 800beb6:	e001      	b.n	800bebc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bebc:	697b      	ldr	r3, [r7, #20]
	}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3728      	adds	r7, #40	; 0x28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b08c      	sub	sp, #48	; 0x30
 800beca:	af04      	add	r7, sp, #16
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	603b      	str	r3, [r7, #0]
 800bed2:	4613      	mov	r3, r2
 800bed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4618      	mov	r0, r3
 800bedc:	f001 fd04 	bl	800d8e8 <pvPortMalloc>
 800bee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00e      	beq.n	800bf06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bee8:	205c      	movs	r0, #92	; 0x5c
 800beea:	f001 fcfd 	bl	800d8e8 <pvPortMalloc>
 800beee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	631a      	str	r2, [r3, #48]	; 0x30
 800befc:	e005      	b.n	800bf0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800befe:	6978      	ldr	r0, [r7, #20]
 800bf00:	f001 fdbe 	bl	800da80 <vPortFree>
 800bf04:	e001      	b.n	800bf0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d017      	beq.n	800bf40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf18:	88fa      	ldrh	r2, [r7, #6]
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	9303      	str	r3, [sp, #12]
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	9302      	str	r3, [sp, #8]
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f80e 	bl	800bf50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf34:	69f8      	ldr	r0, [r7, #28]
 800bf36:	f000 f89b 	bl	800c070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	e002      	b.n	800bf46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf46:	69bb      	ldr	r3, [r7, #24]
	}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3720      	adds	r7, #32
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	461a      	mov	r2, r3
 800bf68:	21a5      	movs	r1, #165	; 0xa5
 800bf6a:	f001 fedf 	bl	800dd2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf78:	3b01      	subs	r3, #1
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	4413      	add	r3, r2
 800bf7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	f023 0307 	bic.w	r3, r3, #7
 800bf86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	f003 0307 	and.w	r3, r3, #7
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00a      	beq.n	800bfa8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617b      	str	r3, [r7, #20]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d01f      	beq.n	800bfee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfae:	2300      	movs	r3, #0
 800bfb0:	61fb      	str	r3, [r7, #28]
 800bfb2:	e012      	b.n	800bfda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfb4:	68ba      	ldr	r2, [r7, #8]
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	4413      	add	r3, r2
 800bfba:	7819      	ldrb	r1, [r3, #0]
 800bfbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	3334      	adds	r3, #52	; 0x34
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	4413      	add	r3, r2
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d006      	beq.n	800bfe2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	61fb      	str	r3, [r7, #28]
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	2b0f      	cmp	r3, #15
 800bfde:	d9e9      	bls.n	800bfb4 <prvInitialiseNewTask+0x64>
 800bfe0:	e000      	b.n	800bfe4 <prvInitialiseNewTask+0x94>
			{
				break;
 800bfe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfec:	e003      	b.n	800bff6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	2b37      	cmp	r3, #55	; 0x37
 800bffa:	d901      	bls.n	800c000 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bffc:	2337      	movs	r3, #55	; 0x37
 800bffe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c00a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	2200      	movs	r2, #0
 800c010:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7ff f978 	bl	800b30c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	3318      	adds	r3, #24
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff f973 	bl	800b30c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c02a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c03a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	2200      	movs	r2, #0
 800c040:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	68f9      	ldr	r1, [r7, #12]
 800c04e:	69b8      	ldr	r0, [r7, #24]
 800c050:	f001 f9fa 	bl	800d448 <pxPortInitialiseStack>
 800c054:	4602      	mov	r2, r0
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c066:	bf00      	nop
 800c068:	3720      	adds	r7, #32
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c078:	f001 fb14 	bl	800d6a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c07c:	4b2d      	ldr	r3, [pc, #180]	; (800c134 <prvAddNewTaskToReadyList+0xc4>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	4a2c      	ldr	r2, [pc, #176]	; (800c134 <prvAddNewTaskToReadyList+0xc4>)
 800c084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c086:	4b2c      	ldr	r3, [pc, #176]	; (800c138 <prvAddNewTaskToReadyList+0xc8>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c08e:	4a2a      	ldr	r2, [pc, #168]	; (800c138 <prvAddNewTaskToReadyList+0xc8>)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c094:	4b27      	ldr	r3, [pc, #156]	; (800c134 <prvAddNewTaskToReadyList+0xc4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d110      	bne.n	800c0be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c09c:	f000 fcd0 	bl	800ca40 <prvInitialiseTaskLists>
 800c0a0:	e00d      	b.n	800c0be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0a2:	4b26      	ldr	r3, [pc, #152]	; (800c13c <prvAddNewTaskToReadyList+0xcc>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d109      	bne.n	800c0be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0aa:	4b23      	ldr	r3, [pc, #140]	; (800c138 <prvAddNewTaskToReadyList+0xc8>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d802      	bhi.n	800c0be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0b8:	4a1f      	ldr	r2, [pc, #124]	; (800c138 <prvAddNewTaskToReadyList+0xc8>)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0be:	4b20      	ldr	r3, [pc, #128]	; (800c140 <prvAddNewTaskToReadyList+0xd0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	4a1e      	ldr	r2, [pc, #120]	; (800c140 <prvAddNewTaskToReadyList+0xd0>)
 800c0c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <prvAddNewTaskToReadyList+0xd0>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d4:	4b1b      	ldr	r3, [pc, #108]	; (800c144 <prvAddNewTaskToReadyList+0xd4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d903      	bls.n	800c0e4 <prvAddNewTaskToReadyList+0x74>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	4a18      	ldr	r2, [pc, #96]	; (800c144 <prvAddNewTaskToReadyList+0xd4>)
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4a15      	ldr	r2, [pc, #84]	; (800c148 <prvAddNewTaskToReadyList+0xd8>)
 800c0f2:	441a      	add	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7ff f913 	bl	800b326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c100:	f001 fb00 	bl	800d704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <prvAddNewTaskToReadyList+0xcc>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00e      	beq.n	800c12a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <prvAddNewTaskToReadyList+0xc8>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c116:	429a      	cmp	r2, r3
 800c118:	d207      	bcs.n	800c12a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <prvAddNewTaskToReadyList+0xdc>)
 800c11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20000dcc 	.word	0x20000dcc
 800c138:	200008f8 	.word	0x200008f8
 800c13c:	20000dd8 	.word	0x20000dd8
 800c140:	20000de8 	.word	0x20000de8
 800c144:	20000dd4 	.word	0x20000dd4
 800c148:	200008fc 	.word	0x200008fc
 800c14c:	e000ed04 	.word	0xe000ed04

0800c150 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08a      	sub	sp, #40	; 0x28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c15a:	2300      	movs	r3, #0
 800c15c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <vTaskDelayUntil+0x2a>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	617b      	str	r3, [r7, #20]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10a      	bne.n	800c196 <vTaskDelayUntil+0x46>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	613b      	str	r3, [r7, #16]
}
 800c192:	bf00      	nop
 800c194:	e7fe      	b.n	800c194 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c196:	4b2a      	ldr	r3, [pc, #168]	; (800c240 <vTaskDelayUntil+0xf0>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00a      	beq.n	800c1b4 <vTaskDelayUntil+0x64>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c1b4:	f000 f8e4 	bl	800c380 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c1b8:	4b22      	ldr	r3, [pc, #136]	; (800c244 <vTaskDelayUntil+0xf4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6a3a      	ldr	r2, [r7, #32]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d20b      	bcs.n	800c1ea <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	69fa      	ldr	r2, [r7, #28]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d211      	bcs.n	800c200 <vTaskDelayUntil+0xb0>
 800c1dc:	69fa      	ldr	r2, [r7, #28]
 800c1de:	6a3b      	ldr	r3, [r7, #32]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d90d      	bls.n	800c200 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1e8:	e00a      	b.n	800c200 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d303      	bcc.n	800c1fc <vTaskDelayUntil+0xac>
 800c1f4:	69fa      	ldr	r2, [r7, #28]
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d901      	bls.n	800c200 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	69fa      	ldr	r2, [r7, #28]
 800c204:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d006      	beq.n	800c21a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	2100      	movs	r1, #0
 800c214:	4618      	mov	r0, r3
 800c216:	f000 fd75 	bl	800cd04 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c21a:	f000 f8bf 	bl	800c39c <xTaskResumeAll>
 800c21e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d107      	bne.n	800c236 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c226:	4b08      	ldr	r3, [pc, #32]	; (800c248 <vTaskDelayUntil+0xf8>)
 800c228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c236:	bf00      	nop
 800c238:	3728      	adds	r7, #40	; 0x28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000df4 	.word	0x20000df4
 800c244:	20000dd0 	.word	0x20000dd0
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d017      	beq.n	800c28e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c25e:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <vTaskDelay+0x60>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d00a      	beq.n	800c27c <vTaskDelay+0x30>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c27c:	f000 f880 	bl	800c380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c280:	2100      	movs	r1, #0
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fd3e 	bl	800cd04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c288:	f000 f888 	bl	800c39c <xTaskResumeAll>
 800c28c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d107      	bne.n	800c2a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c294:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <vTaskDelay+0x64>)
 800c296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2a4:	bf00      	nop
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20000df4 	.word	0x20000df4
 800c2b0:	e000ed04 	.word	0xe000ed04

0800c2b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b08a      	sub	sp, #40	; 0x28
 800c2b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c2c2:	463a      	mov	r2, r7
 800c2c4:	1d39      	adds	r1, r7, #4
 800c2c6:	f107 0308 	add.w	r3, r7, #8
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fe88 	bl	800afe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	9202      	str	r2, [sp, #8]
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	460a      	mov	r2, r1
 800c2e2:	4921      	ldr	r1, [pc, #132]	; (800c368 <vTaskStartScheduler+0xb4>)
 800c2e4:	4821      	ldr	r0, [pc, #132]	; (800c36c <vTaskStartScheduler+0xb8>)
 800c2e6:	f7ff fd91 	bl	800be0c <xTaskCreateStatic>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	4a20      	ldr	r2, [pc, #128]	; (800c370 <vTaskStartScheduler+0xbc>)
 800c2ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c2f0:	4b1f      	ldr	r3, [pc, #124]	; (800c370 <vTaskStartScheduler+0xbc>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d002      	beq.n	800c2fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	e001      	b.n	800c302 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d102      	bne.n	800c30e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c308:	f000 fd50 	bl	800cdac <xTimerCreateTimerTask>
 800c30c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d116      	bne.n	800c342 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	613b      	str	r3, [r7, #16]
}
 800c326:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c328:	4b12      	ldr	r3, [pc, #72]	; (800c374 <vTaskStartScheduler+0xc0>)
 800c32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c32e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c330:	4b11      	ldr	r3, [pc, #68]	; (800c378 <vTaskStartScheduler+0xc4>)
 800c332:	2201      	movs	r2, #1
 800c334:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c336:	4b11      	ldr	r3, [pc, #68]	; (800c37c <vTaskStartScheduler+0xc8>)
 800c338:	2200      	movs	r2, #0
 800c33a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c33c:	f001 f910 	bl	800d560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c340:	e00e      	b.n	800c360 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c348:	d10a      	bne.n	800c360 <vTaskStartScheduler+0xac>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	60fb      	str	r3, [r7, #12]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <vTaskStartScheduler+0xaa>
}
 800c360:	bf00      	nop
 800c362:	3718      	adds	r7, #24
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	08010334 	.word	0x08010334
 800c36c:	0800ca11 	.word	0x0800ca11
 800c370:	20000df0 	.word	0x20000df0
 800c374:	20000dec 	.word	0x20000dec
 800c378:	20000dd8 	.word	0x20000dd8
 800c37c:	20000dd0 	.word	0x20000dd0

0800c380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c380:	b480      	push	{r7}
 800c382:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c384:	4b04      	ldr	r3, [pc, #16]	; (800c398 <vTaskSuspendAll+0x18>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3301      	adds	r3, #1
 800c38a:	4a03      	ldr	r2, [pc, #12]	; (800c398 <vTaskSuspendAll+0x18>)
 800c38c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c38e:	bf00      	nop
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20000df4 	.word	0x20000df4

0800c39c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c3aa:	4b42      	ldr	r3, [pc, #264]	; (800c4b4 <xTaskResumeAll+0x118>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10a      	bne.n	800c3c8 <xTaskResumeAll+0x2c>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	603b      	str	r3, [r7, #0]
}
 800c3c4:	bf00      	nop
 800c3c6:	e7fe      	b.n	800c3c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c3c8:	f001 f96c 	bl	800d6a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c3cc:	4b39      	ldr	r3, [pc, #228]	; (800c4b4 <xTaskResumeAll+0x118>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	4a38      	ldr	r2, [pc, #224]	; (800c4b4 <xTaskResumeAll+0x118>)
 800c3d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d6:	4b37      	ldr	r3, [pc, #220]	; (800c4b4 <xTaskResumeAll+0x118>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d162      	bne.n	800c4a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c3de:	4b36      	ldr	r3, [pc, #216]	; (800c4b8 <xTaskResumeAll+0x11c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d05e      	beq.n	800c4a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3e6:	e02f      	b.n	800c448 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e8:	4b34      	ldr	r3, [pc, #208]	; (800c4bc <xTaskResumeAll+0x120>)
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	3318      	adds	r3, #24
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fe fff3 	bl	800b3e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fe ffee 	bl	800b3e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c408:	4b2d      	ldr	r3, [pc, #180]	; (800c4c0 <xTaskResumeAll+0x124>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d903      	bls.n	800c418 <xTaskResumeAll+0x7c>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c414:	4a2a      	ldr	r2, [pc, #168]	; (800c4c0 <xTaskResumeAll+0x124>)
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c41c:	4613      	mov	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4a27      	ldr	r2, [pc, #156]	; (800c4c4 <xTaskResumeAll+0x128>)
 800c426:	441a      	add	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	3304      	adds	r3, #4
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f7fe ff79 	bl	800b326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c438:	4b23      	ldr	r3, [pc, #140]	; (800c4c8 <xTaskResumeAll+0x12c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43e:	429a      	cmp	r2, r3
 800c440:	d302      	bcc.n	800c448 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c442:	4b22      	ldr	r3, [pc, #136]	; (800c4cc <xTaskResumeAll+0x130>)
 800c444:	2201      	movs	r2, #1
 800c446:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c448:	4b1c      	ldr	r3, [pc, #112]	; (800c4bc <xTaskResumeAll+0x120>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1cb      	bne.n	800c3e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d001      	beq.n	800c45a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c456:	f000 fb91 	bl	800cb7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c45a:	4b1d      	ldr	r3, [pc, #116]	; (800c4d0 <xTaskResumeAll+0x134>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d010      	beq.n	800c488 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c466:	f000 f847 	bl	800c4f8 <xTaskIncrementTick>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c470:	4b16      	ldr	r3, [pc, #88]	; (800c4cc <xTaskResumeAll+0x130>)
 800c472:	2201      	movs	r2, #1
 800c474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3b01      	subs	r3, #1
 800c47a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f1      	bne.n	800c466 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c482:	4b13      	ldr	r3, [pc, #76]	; (800c4d0 <xTaskResumeAll+0x134>)
 800c484:	2200      	movs	r2, #0
 800c486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c488:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <xTaskResumeAll+0x130>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d009      	beq.n	800c4a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c490:	2301      	movs	r3, #1
 800c492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <xTaskResumeAll+0x138>)
 800c496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4a4:	f001 f92e 	bl	800d704 <vPortExitCritical>

	return xAlreadyYielded;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000df4 	.word	0x20000df4
 800c4b8:	20000dcc 	.word	0x20000dcc
 800c4bc:	20000d8c 	.word	0x20000d8c
 800c4c0:	20000dd4 	.word	0x20000dd4
 800c4c4:	200008fc 	.word	0x200008fc
 800c4c8:	200008f8 	.word	0x200008f8
 800c4cc:	20000de0 	.word	0x20000de0
 800c4d0:	20000ddc 	.word	0x20000ddc
 800c4d4:	e000ed04 	.word	0xe000ed04

0800c4d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <xTaskGetTickCount+0x1c>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c4e4:	687b      	ldr	r3, [r7, #4]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	20000dd0 	.word	0x20000dd0

0800c4f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c502:	4b4f      	ldr	r3, [pc, #316]	; (800c640 <xTaskIncrementTick+0x148>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	f040 808f 	bne.w	800c62a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c50c:	4b4d      	ldr	r3, [pc, #308]	; (800c644 <xTaskIncrementTick+0x14c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3301      	adds	r3, #1
 800c512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c514:	4a4b      	ldr	r2, [pc, #300]	; (800c644 <xTaskIncrementTick+0x14c>)
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d120      	bne.n	800c562 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c520:	4b49      	ldr	r3, [pc, #292]	; (800c648 <xTaskIncrementTick+0x150>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00a      	beq.n	800c540 <xTaskIncrementTick+0x48>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	603b      	str	r3, [r7, #0]
}
 800c53c:	bf00      	nop
 800c53e:	e7fe      	b.n	800c53e <xTaskIncrementTick+0x46>
 800c540:	4b41      	ldr	r3, [pc, #260]	; (800c648 <xTaskIncrementTick+0x150>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	4b41      	ldr	r3, [pc, #260]	; (800c64c <xTaskIncrementTick+0x154>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a3f      	ldr	r2, [pc, #252]	; (800c648 <xTaskIncrementTick+0x150>)
 800c54c:	6013      	str	r3, [r2, #0]
 800c54e:	4a3f      	ldr	r2, [pc, #252]	; (800c64c <xTaskIncrementTick+0x154>)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	4b3e      	ldr	r3, [pc, #248]	; (800c650 <xTaskIncrementTick+0x158>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	3301      	adds	r3, #1
 800c55a:	4a3d      	ldr	r2, [pc, #244]	; (800c650 <xTaskIncrementTick+0x158>)
 800c55c:	6013      	str	r3, [r2, #0]
 800c55e:	f000 fb0d 	bl	800cb7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c562:	4b3c      	ldr	r3, [pc, #240]	; (800c654 <xTaskIncrementTick+0x15c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d349      	bcc.n	800c600 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c56c:	4b36      	ldr	r3, [pc, #216]	; (800c648 <xTaskIncrementTick+0x150>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d104      	bne.n	800c580 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c576:	4b37      	ldr	r3, [pc, #220]	; (800c654 <xTaskIncrementTick+0x15c>)
 800c578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c57c:	601a      	str	r2, [r3, #0]
					break;
 800c57e:	e03f      	b.n	800c600 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c580:	4b31      	ldr	r3, [pc, #196]	; (800c648 <xTaskIncrementTick+0x150>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	429a      	cmp	r2, r3
 800c596:	d203      	bcs.n	800c5a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c598:	4a2e      	ldr	r2, [pc, #184]	; (800c654 <xTaskIncrementTick+0x15c>)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c59e:	e02f      	b.n	800c600 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe ff1b 	bl	800b3e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	3318      	adds	r3, #24
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe ff12 	bl	800b3e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c0:	4b25      	ldr	r3, [pc, #148]	; (800c658 <xTaskIncrementTick+0x160>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d903      	bls.n	800c5d0 <xTaskIncrementTick+0xd8>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5cc:	4a22      	ldr	r2, [pc, #136]	; (800c658 <xTaskIncrementTick+0x160>)
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4a1f      	ldr	r2, [pc, #124]	; (800c65c <xTaskIncrementTick+0x164>)
 800c5de:	441a      	add	r2, r3
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	f7fe fe9d 	bl	800b326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f0:	4b1b      	ldr	r3, [pc, #108]	; (800c660 <xTaskIncrementTick+0x168>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d3b8      	bcc.n	800c56c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5fe:	e7b5      	b.n	800c56c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c600:	4b17      	ldr	r3, [pc, #92]	; (800c660 <xTaskIncrementTick+0x168>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c606:	4915      	ldr	r1, [pc, #84]	; (800c65c <xTaskIncrementTick+0x164>)
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	440b      	add	r3, r1
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d901      	bls.n	800c61c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c61c:	4b11      	ldr	r3, [pc, #68]	; (800c664 <xTaskIncrementTick+0x16c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c624:	2301      	movs	r3, #1
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	e004      	b.n	800c634 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c62a:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <xTaskIncrementTick+0x170>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3301      	adds	r3, #1
 800c630:	4a0d      	ldr	r2, [pc, #52]	; (800c668 <xTaskIncrementTick+0x170>)
 800c632:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c634:	697b      	ldr	r3, [r7, #20]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	20000df4 	.word	0x20000df4
 800c644:	20000dd0 	.word	0x20000dd0
 800c648:	20000d84 	.word	0x20000d84
 800c64c:	20000d88 	.word	0x20000d88
 800c650:	20000de4 	.word	0x20000de4
 800c654:	20000dec 	.word	0x20000dec
 800c658:	20000dd4 	.word	0x20000dd4
 800c65c:	200008fc 	.word	0x200008fc
 800c660:	200008f8 	.word	0x200008f8
 800c664:	20000de0 	.word	0x20000de0
 800c668:	20000ddc 	.word	0x20000ddc

0800c66c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c672:	4b28      	ldr	r3, [pc, #160]	; (800c714 <vTaskSwitchContext+0xa8>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d003      	beq.n	800c682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c67a:	4b27      	ldr	r3, [pc, #156]	; (800c718 <vTaskSwitchContext+0xac>)
 800c67c:	2201      	movs	r2, #1
 800c67e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c680:	e041      	b.n	800c706 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c682:	4b25      	ldr	r3, [pc, #148]	; (800c718 <vTaskSwitchContext+0xac>)
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c688:	4b24      	ldr	r3, [pc, #144]	; (800c71c <vTaskSwitchContext+0xb0>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
 800c68e:	e010      	b.n	800c6b2 <vTaskSwitchContext+0x46>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <vTaskSwitchContext+0x40>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	607b      	str	r3, [r7, #4]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <vTaskSwitchContext+0x3e>
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	60fb      	str	r3, [r7, #12]
 800c6b2:	491b      	ldr	r1, [pc, #108]	; (800c720 <vTaskSwitchContext+0xb4>)
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	440b      	add	r3, r1
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0e4      	beq.n	800c690 <vTaskSwitchContext+0x24>
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4a13      	ldr	r2, [pc, #76]	; (800c720 <vTaskSwitchContext+0xb4>)
 800c6d2:	4413      	add	r3, r2
 800c6d4:	60bb      	str	r3, [r7, #8]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	605a      	str	r2, [r3, #4]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	685a      	ldr	r2, [r3, #4]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	3308      	adds	r3, #8
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d104      	bne.n	800c6f6 <vTaskSwitchContext+0x8a>
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	605a      	str	r2, [r3, #4]
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	4a09      	ldr	r2, [pc, #36]	; (800c724 <vTaskSwitchContext+0xb8>)
 800c6fe:	6013      	str	r3, [r2, #0]
 800c700:	4a06      	ldr	r2, [pc, #24]	; (800c71c <vTaskSwitchContext+0xb0>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6013      	str	r3, [r2, #0]
}
 800c706:	bf00      	nop
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	20000df4 	.word	0x20000df4
 800c718:	20000de0 	.word	0x20000de0
 800c71c:	20000dd4 	.word	0x20000dd4
 800c720:	200008fc 	.word	0x200008fc
 800c724:	200008f8 	.word	0x200008f8

0800c728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10a      	bne.n	800c74e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	60fb      	str	r3, [r7, #12]
}
 800c74a:	bf00      	nop
 800c74c:	e7fe      	b.n	800c74c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c74e:	4b07      	ldr	r3, [pc, #28]	; (800c76c <vTaskPlaceOnEventList+0x44>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3318      	adds	r3, #24
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7fe fe09 	bl	800b36e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c75c:	2101      	movs	r1, #1
 800c75e:	6838      	ldr	r0, [r7, #0]
 800c760:	f000 fad0 	bl	800cd04 <prvAddCurrentTaskToDelayedList>
}
 800c764:	bf00      	nop
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	200008f8 	.word	0x200008f8

0800c770 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10a      	bne.n	800c798 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	617b      	str	r3, [r7, #20]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800c798:	4b11      	ldr	r3, [pc, #68]	; (800c7e0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	613b      	str	r3, [r7, #16]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800c7b6:	4b0b      	ldr	r3, [pc, #44]	; (800c7e4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c7c0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7c2:	4b08      	ldr	r3, [pc, #32]	; (800c7e4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3318      	adds	r3, #24
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7fe fdab 	bl	800b326 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fa96 	bl	800cd04 <prvAddCurrentTaskToDelayedList>
}
 800c7d8:	bf00      	nop
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20000df4 	.word	0x20000df4
 800c7e4:	200008f8 	.word	0x200008f8

0800c7e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10a      	bne.n	800c810 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	617b      	str	r3, [r7, #20]
}
 800c80c:	bf00      	nop
 800c80e:	e7fe      	b.n	800c80e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <vTaskPlaceOnEventListRestricted+0x54>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3318      	adds	r3, #24
 800c816:	4619      	mov	r1, r3
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7fe fd84 	bl	800b326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c828:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	68b8      	ldr	r0, [r7, #8]
 800c82e:	f000 fa69 	bl	800cd04 <prvAddCurrentTaskToDelayedList>
	}
 800c832:	bf00      	nop
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	200008f8 	.word	0x200008f8

0800c840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10a      	bne.n	800c86c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	60fb      	str	r3, [r7, #12]
}
 800c868:	bf00      	nop
 800c86a:	e7fe      	b.n	800c86a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	3318      	adds	r3, #24
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe fdb5 	bl	800b3e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c876:	4b1e      	ldr	r3, [pc, #120]	; (800c8f0 <xTaskRemoveFromEventList+0xb0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d11d      	bne.n	800c8ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	3304      	adds	r3, #4
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fdac 	bl	800b3e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	4b19      	ldr	r3, [pc, #100]	; (800c8f4 <xTaskRemoveFromEventList+0xb4>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	d903      	bls.n	800c89c <xTaskRemoveFromEventList+0x5c>
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	4a16      	ldr	r2, [pc, #88]	; (800c8f4 <xTaskRemoveFromEventList+0xb4>)
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4a13      	ldr	r2, [pc, #76]	; (800c8f8 <xTaskRemoveFromEventList+0xb8>)
 800c8aa:	441a      	add	r2, r3
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	3304      	adds	r3, #4
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	4610      	mov	r0, r2
 800c8b4:	f7fe fd37 	bl	800b326 <vListInsertEnd>
 800c8b8:	e005      	b.n	800c8c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	3318      	adds	r3, #24
 800c8be:	4619      	mov	r1, r3
 800c8c0:	480e      	ldr	r0, [pc, #56]	; (800c8fc <xTaskRemoveFromEventList+0xbc>)
 800c8c2:	f7fe fd30 	bl	800b326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ca:	4b0d      	ldr	r3, [pc, #52]	; (800c900 <xTaskRemoveFromEventList+0xc0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d905      	bls.n	800c8e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <xTaskRemoveFromEventList+0xc4>)
 800c8da:	2201      	movs	r2, #1
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e001      	b.n	800c8e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c8e4:	697b      	ldr	r3, [r7, #20]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20000df4 	.word	0x20000df4
 800c8f4:	20000dd4 	.word	0x20000dd4
 800c8f8:	200008fc 	.word	0x200008fc
 800c8fc:	20000d8c 	.word	0x20000d8c
 800c900:	200008f8 	.word	0x200008f8
 800c904:	20000de0 	.word	0x20000de0

0800c908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c910:	4b06      	ldr	r3, [pc, #24]	; (800c92c <vTaskInternalSetTimeOutState+0x24>)
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c918:	4b05      	ldr	r3, [pc, #20]	; (800c930 <vTaskInternalSetTimeOutState+0x28>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	605a      	str	r2, [r3, #4]
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	20000de4 	.word	0x20000de4
 800c930:	20000dd0 	.word	0x20000dd0

0800c934 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10a      	bne.n	800c95a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	613b      	str	r3, [r7, #16]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	60fb      	str	r3, [r7, #12]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c976:	f000 fe95 	bl	800d6a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c97a:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <xTaskCheckForTimeOut+0xbc>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c992:	d102      	bne.n	800c99a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]
 800c998:	e023      	b.n	800c9e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <xTaskCheckForTimeOut+0xc0>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d007      	beq.n	800c9b6 <xTaskCheckForTimeOut+0x82>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d302      	bcc.n	800c9b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	61fb      	str	r3, [r7, #28]
 800c9b4:	e015      	b.n	800c9e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d20b      	bcs.n	800c9d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	1ad2      	subs	r2, r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff ff9b 	bl	800c908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	61fb      	str	r3, [r7, #28]
 800c9d6:	e004      	b.n	800c9e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c9e2:	f000 fe8f 	bl	800d704 <vPortExitCritical>

	return xReturn;
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	20000dd0 	.word	0x20000dd0
 800c9f4:	20000de4 	.word	0x20000de4

0800c9f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9fc:	4b03      	ldr	r3, [pc, #12]	; (800ca0c <vTaskMissedYield+0x14>)
 800c9fe:	2201      	movs	r2, #1
 800ca00:	601a      	str	r2, [r3, #0]
}
 800ca02:	bf00      	nop
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	20000de0 	.word	0x20000de0

0800ca10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ca18:	f000 f852 	bl	800cac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ca1c:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <prvIdleTask+0x28>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d9f9      	bls.n	800ca18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <prvIdleTask+0x2c>)
 800ca26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ca34:	e7f0      	b.n	800ca18 <prvIdleTask+0x8>
 800ca36:	bf00      	nop
 800ca38:	200008fc 	.word	0x200008fc
 800ca3c:	e000ed04 	.word	0xe000ed04

0800ca40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca46:	2300      	movs	r3, #0
 800ca48:	607b      	str	r3, [r7, #4]
 800ca4a:	e00c      	b.n	800ca66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4a12      	ldr	r2, [pc, #72]	; (800caa0 <prvInitialiseTaskLists+0x60>)
 800ca58:	4413      	add	r3, r2
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	f7fe fc36 	bl	800b2cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3301      	adds	r3, #1
 800ca64:	607b      	str	r3, [r7, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b37      	cmp	r3, #55	; 0x37
 800ca6a:	d9ef      	bls.n	800ca4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca6c:	480d      	ldr	r0, [pc, #52]	; (800caa4 <prvInitialiseTaskLists+0x64>)
 800ca6e:	f7fe fc2d 	bl	800b2cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca72:	480d      	ldr	r0, [pc, #52]	; (800caa8 <prvInitialiseTaskLists+0x68>)
 800ca74:	f7fe fc2a 	bl	800b2cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca78:	480c      	ldr	r0, [pc, #48]	; (800caac <prvInitialiseTaskLists+0x6c>)
 800ca7a:	f7fe fc27 	bl	800b2cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca7e:	480c      	ldr	r0, [pc, #48]	; (800cab0 <prvInitialiseTaskLists+0x70>)
 800ca80:	f7fe fc24 	bl	800b2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca84:	480b      	ldr	r0, [pc, #44]	; (800cab4 <prvInitialiseTaskLists+0x74>)
 800ca86:	f7fe fc21 	bl	800b2cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca8a:	4b0b      	ldr	r3, [pc, #44]	; (800cab8 <prvInitialiseTaskLists+0x78>)
 800ca8c:	4a05      	ldr	r2, [pc, #20]	; (800caa4 <prvInitialiseTaskLists+0x64>)
 800ca8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca90:	4b0a      	ldr	r3, [pc, #40]	; (800cabc <prvInitialiseTaskLists+0x7c>)
 800ca92:	4a05      	ldr	r2, [pc, #20]	; (800caa8 <prvInitialiseTaskLists+0x68>)
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	200008fc 	.word	0x200008fc
 800caa4:	20000d5c 	.word	0x20000d5c
 800caa8:	20000d70 	.word	0x20000d70
 800caac:	20000d8c 	.word	0x20000d8c
 800cab0:	20000da0 	.word	0x20000da0
 800cab4:	20000db8 	.word	0x20000db8
 800cab8:	20000d84 	.word	0x20000d84
 800cabc:	20000d88 	.word	0x20000d88

0800cac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cac6:	e019      	b.n	800cafc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cac8:	f000 fdec 	bl	800d6a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cacc:	4b10      	ldr	r3, [pc, #64]	; (800cb10 <prvCheckTasksWaitingTermination+0x50>)
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fe fc81 	bl	800b3e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <prvCheckTasksWaitingTermination+0x54>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	4a0b      	ldr	r2, [pc, #44]	; (800cb14 <prvCheckTasksWaitingTermination+0x54>)
 800cae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cae8:	4b0b      	ldr	r3, [pc, #44]	; (800cb18 <prvCheckTasksWaitingTermination+0x58>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3b01      	subs	r3, #1
 800caee:	4a0a      	ldr	r2, [pc, #40]	; (800cb18 <prvCheckTasksWaitingTermination+0x58>)
 800caf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800caf2:	f000 fe07 	bl	800d704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f810 	bl	800cb1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cafc:	4b06      	ldr	r3, [pc, #24]	; (800cb18 <prvCheckTasksWaitingTermination+0x58>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1e1      	bne.n	800cac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20000da0 	.word	0x20000da0
 800cb14:	20000dcc 	.word	0x20000dcc
 800cb18:	20000db4 	.word	0x20000db4

0800cb1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d108      	bne.n	800cb40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 ffa4 	bl	800da80 <vPortFree>
				vPortFree( pxTCB );
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 ffa1 	bl	800da80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cb3e:	e018      	b.n	800cb72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d103      	bne.n	800cb52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 ff98 	bl	800da80 <vPortFree>
	}
 800cb50:	e00f      	b.n	800cb72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d00a      	beq.n	800cb72 <prvDeleteTCB+0x56>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60fb      	str	r3, [r7, #12]
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <prvDeleteTCB+0x54>
	}
 800cb72:	bf00      	nop
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
	...

0800cb7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb82:	4b0c      	ldr	r3, [pc, #48]	; (800cbb4 <prvResetNextTaskUnblockTime+0x38>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d104      	bne.n	800cb96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800cb8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb94:	e008      	b.n	800cba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb96:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <prvResetNextTaskUnblockTime+0x38>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	4a04      	ldr	r2, [pc, #16]	; (800cbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800cba6:	6013      	str	r3, [r2, #0]
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	20000d84 	.word	0x20000d84
 800cbb8:	20000dec 	.word	0x20000dec

0800cbbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <xTaskGetSchedulerState+0x34>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d102      	bne.n	800cbd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	607b      	str	r3, [r7, #4]
 800cbce:	e008      	b.n	800cbe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbd0:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <xTaskGetSchedulerState+0x38>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d102      	bne.n	800cbde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cbd8:	2302      	movs	r3, #2
 800cbda:	607b      	str	r3, [r7, #4]
 800cbdc:	e001      	b.n	800cbe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cbe2:	687b      	ldr	r3, [r7, #4]
	}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	20000dd8 	.word	0x20000dd8
 800cbf4:	20000df4 	.word	0x20000df4

0800cbf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d056      	beq.n	800ccbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc0e:	4b2e      	ldr	r3, [pc, #184]	; (800ccc8 <xTaskPriorityDisinherit+0xd0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d00a      	beq.n	800cc2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	60fb      	str	r3, [r7, #12]
}
 800cc2a:	bf00      	nop
 800cc2c:	e7fe      	b.n	800cc2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	60bb      	str	r3, [r7, #8]
}
 800cc48:	bf00      	nop
 800cc4a:	e7fe      	b.n	800cc4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc50:	1e5a      	subs	r2, r3, #1
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d02c      	beq.n	800ccbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d128      	bne.n	800ccbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	3304      	adds	r3, #4
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fbb6 	bl	800b3e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	4b0f      	ldr	r3, [pc, #60]	; (800cccc <xTaskPriorityDisinherit+0xd4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d903      	bls.n	800cc9c <xTaskPriorityDisinherit+0xa4>
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	4a0c      	ldr	r2, [pc, #48]	; (800cccc <xTaskPriorityDisinherit+0xd4>)
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4a09      	ldr	r2, [pc, #36]	; (800ccd0 <xTaskPriorityDisinherit+0xd8>)
 800ccaa:	441a      	add	r2, r3
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	3304      	adds	r3, #4
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	f7fe fb37 	bl	800b326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccbc:	697b      	ldr	r3, [r7, #20]
	}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200008f8 	.word	0x200008f8
 800cccc:	20000dd4 	.word	0x20000dd4
 800ccd0:	200008fc 	.word	0x200008fc

0800ccd4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ccda:	4b09      	ldr	r3, [pc, #36]	; (800cd00 <uxTaskResetEventItemValue+0x2c>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce2:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <uxTaskResetEventItemValue+0x2c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce8:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <uxTaskResetEventItemValue+0x2c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ccf0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ccf2:	687b      	ldr	r3, [r7, #4]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	200008f8 	.word	0x200008f8

0800cd04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd0e:	4b21      	ldr	r3, [pc, #132]	; (800cd94 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd14:	4b20      	ldr	r3, [pc, #128]	; (800cd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	3304      	adds	r3, #4
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fe fb60 	bl	800b3e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd26:	d10a      	bne.n	800cd3e <prvAddCurrentTaskToDelayedList+0x3a>
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d007      	beq.n	800cd3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd2e:	4b1a      	ldr	r3, [pc, #104]	; (800cd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	3304      	adds	r3, #4
 800cd34:	4619      	mov	r1, r3
 800cd36:	4819      	ldr	r0, [pc, #100]	; (800cd9c <prvAddCurrentTaskToDelayedList+0x98>)
 800cd38:	f7fe faf5 	bl	800b326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd3c:	e026      	b.n	800cd8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4413      	add	r3, r2
 800cd44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d209      	bcs.n	800cd6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd56:	4b12      	ldr	r3, [pc, #72]	; (800cda0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	; (800cd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	4619      	mov	r1, r3
 800cd62:	4610      	mov	r0, r2
 800cd64:	f7fe fb03 	bl	800b36e <vListInsert>
}
 800cd68:	e010      	b.n	800cd8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd6a:	4b0e      	ldr	r3, [pc, #56]	; (800cda4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3304      	adds	r3, #4
 800cd74:	4619      	mov	r1, r3
 800cd76:	4610      	mov	r0, r2
 800cd78:	f7fe faf9 	bl	800b36e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d202      	bcs.n	800cd8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cd86:	4a08      	ldr	r2, [pc, #32]	; (800cda8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	6013      	str	r3, [r2, #0]
}
 800cd8c:	bf00      	nop
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	20000dd0 	.word	0x20000dd0
 800cd98:	200008f8 	.word	0x200008f8
 800cd9c:	20000db8 	.word	0x20000db8
 800cda0:	20000d88 	.word	0x20000d88
 800cda4:	20000d84 	.word	0x20000d84
 800cda8:	20000dec 	.word	0x20000dec

0800cdac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	; 0x28
 800cdb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cdb6:	f000 fb07 	bl	800d3c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdba:	4b1c      	ldr	r3, [pc, #112]	; (800ce2c <xTimerCreateTimerTask+0x80>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d021      	beq.n	800ce06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cdca:	1d3a      	adds	r2, r7, #4
 800cdcc:	f107 0108 	add.w	r1, r7, #8
 800cdd0:	f107 030c 	add.w	r3, r7, #12
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe f91d 	bl	800b014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	9202      	str	r2, [sp, #8]
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	2302      	movs	r3, #2
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	2300      	movs	r3, #0
 800cdea:	460a      	mov	r2, r1
 800cdec:	4910      	ldr	r1, [pc, #64]	; (800ce30 <xTimerCreateTimerTask+0x84>)
 800cdee:	4811      	ldr	r0, [pc, #68]	; (800ce34 <xTimerCreateTimerTask+0x88>)
 800cdf0:	f7ff f80c 	bl	800be0c <xTaskCreateStatic>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4a10      	ldr	r2, [pc, #64]	; (800ce38 <xTimerCreateTimerTask+0x8c>)
 800cdf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cdfa:	4b0f      	ldr	r3, [pc, #60]	; (800ce38 <xTimerCreateTimerTask+0x8c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce02:	2301      	movs	r3, #1
 800ce04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10a      	bne.n	800ce22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	613b      	str	r3, [r7, #16]
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce22:	697b      	ldr	r3, [r7, #20]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3718      	adds	r7, #24
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20000e28 	.word	0x20000e28
 800ce30:	0801033c 	.word	0x0801033c
 800ce34:	0800cf71 	.word	0x0800cf71
 800ce38:	20000e2c 	.word	0x20000e2c

0800ce3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	; 0x28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d10a      	bne.n	800ce6a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce58:	f383 8811 	msr	BASEPRI, r3
 800ce5c:	f3bf 8f6f 	isb	sy
 800ce60:	f3bf 8f4f 	dsb	sy
 800ce64:	623b      	str	r3, [r7, #32]
}
 800ce66:	bf00      	nop
 800ce68:	e7fe      	b.n	800ce68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce6a:	4b1a      	ldr	r3, [pc, #104]	; (800ced4 <xTimerGenericCommand+0x98>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d02a      	beq.n	800cec8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	dc18      	bgt.n	800ceb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce84:	f7ff fe9a 	bl	800cbbc <xTaskGetSchedulerState>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d109      	bne.n	800cea2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce8e:	4b11      	ldr	r3, [pc, #68]	; (800ced4 <xTimerGenericCommand+0x98>)
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	f107 0110 	add.w	r1, r7, #16
 800ce96:	2300      	movs	r3, #0
 800ce98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce9a:	f7fe fbcf 	bl	800b63c <xQueueGenericSend>
 800ce9e:	6278      	str	r0, [r7, #36]	; 0x24
 800cea0:	e012      	b.n	800cec8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cea2:	4b0c      	ldr	r3, [pc, #48]	; (800ced4 <xTimerGenericCommand+0x98>)
 800cea4:	6818      	ldr	r0, [r3, #0]
 800cea6:	f107 0110 	add.w	r1, r7, #16
 800ceaa:	2300      	movs	r3, #0
 800ceac:	2200      	movs	r2, #0
 800ceae:	f7fe fbc5 	bl	800b63c <xQueueGenericSend>
 800ceb2:	6278      	str	r0, [r7, #36]	; 0x24
 800ceb4:	e008      	b.n	800cec8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ceb6:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <xTimerGenericCommand+0x98>)
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	f107 0110 	add.w	r1, r7, #16
 800cebe:	2300      	movs	r3, #0
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	f7fe fcb9 	bl	800b838 <xQueueGenericSendFromISR>
 800cec6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3728      	adds	r7, #40	; 0x28
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	20000e28 	.word	0x20000e28

0800ced8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b088      	sub	sp, #32
 800cedc:	af02      	add	r7, sp, #8
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cee2:	4b22      	ldr	r3, [pc, #136]	; (800cf6c <prvProcessExpiredTimer+0x94>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fe fa75 	bl	800b3e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cefc:	f003 0304 	and.w	r3, r3, #4
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d022      	beq.n	800cf4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	699a      	ldr	r2, [r3, #24]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	18d1      	adds	r1, r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	6978      	ldr	r0, [r7, #20]
 800cf12:	f000 f8d1 	bl	800d0b8 <prvInsertTimerInActiveList>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d01f      	beq.n	800cf5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	2300      	movs	r3, #0
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	2100      	movs	r1, #0
 800cf26:	6978      	ldr	r0, [r7, #20]
 800cf28:	f7ff ff88 	bl	800ce3c <xTimerGenericCommand>
 800cf2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d113      	bne.n	800cf5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	60fb      	str	r3, [r7, #12]
}
 800cf46:	bf00      	nop
 800cf48:	e7fe      	b.n	800cf48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf50:	f023 0301 	bic.w	r3, r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	6978      	ldr	r0, [r7, #20]
 800cf62:	4798      	blx	r3
}
 800cf64:	bf00      	nop
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20000e20 	.word	0x20000e20

0800cf70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf78:	f107 0308 	add.w	r3, r7, #8
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f000 f857 	bl	800d030 <prvGetNextExpireTime>
 800cf82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	4619      	mov	r1, r3
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f000 f803 	bl	800cf94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf8e:	f000 f8d5 	bl	800d13c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf92:	e7f1      	b.n	800cf78 <prvTimerTask+0x8>

0800cf94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf9e:	f7ff f9ef 	bl	800c380 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfa2:	f107 0308 	add.w	r3, r7, #8
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f000 f866 	bl	800d078 <prvSampleTimeNow>
 800cfac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d130      	bne.n	800d016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10a      	bne.n	800cfd0 <prvProcessTimerOrBlockTask+0x3c>
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d806      	bhi.n	800cfd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cfc2:	f7ff f9eb 	bl	800c39c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cfc6:	68f9      	ldr	r1, [r7, #12]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f7ff ff85 	bl	800ced8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cfce:	e024      	b.n	800d01a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d008      	beq.n	800cfe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cfd6:	4b13      	ldr	r3, [pc, #76]	; (800d024 <prvProcessTimerOrBlockTask+0x90>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <prvProcessTimerOrBlockTask+0x50>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e000      	b.n	800cfe6 <prvProcessTimerOrBlockTask+0x52>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cfe8:	4b0f      	ldr	r3, [pc, #60]	; (800d028 <prvProcessTimerOrBlockTask+0x94>)
 800cfea:	6818      	ldr	r0, [r3, #0]
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	4619      	mov	r1, r3
 800cff6:	f7fe fed5 	bl	800bda4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cffa:	f7ff f9cf 	bl	800c39c <xTaskResumeAll>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10a      	bne.n	800d01a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d004:	4b09      	ldr	r3, [pc, #36]	; (800d02c <prvProcessTimerOrBlockTask+0x98>)
 800d006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	f3bf 8f6f 	isb	sy
}
 800d014:	e001      	b.n	800d01a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d016:	f7ff f9c1 	bl	800c39c <xTaskResumeAll>
}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20000e24 	.word	0x20000e24
 800d028:	20000e28 	.word	0x20000e28
 800d02c:	e000ed04 	.word	0xe000ed04

0800d030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d038:	4b0e      	ldr	r3, [pc, #56]	; (800d074 <prvGetNextExpireTime+0x44>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d101      	bne.n	800d046 <prvGetNextExpireTime+0x16>
 800d042:	2201      	movs	r2, #1
 800d044:	e000      	b.n	800d048 <prvGetNextExpireTime+0x18>
 800d046:	2200      	movs	r2, #0
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d054:	4b07      	ldr	r3, [pc, #28]	; (800d074 <prvGetNextExpireTime+0x44>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	60fb      	str	r3, [r7, #12]
 800d05e:	e001      	b.n	800d064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d060:	2300      	movs	r3, #0
 800d062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d064:	68fb      	ldr	r3, [r7, #12]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000e20 	.word	0x20000e20

0800d078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d080:	f7ff fa2a 	bl	800c4d8 <xTaskGetTickCount>
 800d084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d086:	4b0b      	ldr	r3, [pc, #44]	; (800d0b4 <prvSampleTimeNow+0x3c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d205      	bcs.n	800d09c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d090:	f000 f936 	bl	800d300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	601a      	str	r2, [r3, #0]
 800d09a:	e002      	b.n	800d0a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0a2:	4a04      	ldr	r2, [pc, #16]	; (800d0b4 <prvSampleTimeNow+0x3c>)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000e30 	.word	0x20000e30

0800d0b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d812      	bhi.n	800d104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	1ad2      	subs	r2, r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d302      	bcc.n	800d0f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	617b      	str	r3, [r7, #20]
 800d0f0:	e01b      	b.n	800d12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d0f2:	4b10      	ldr	r3, [pc, #64]	; (800d134 <prvInsertTimerInActiveList+0x7c>)
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f7fe f936 	bl	800b36e <vListInsert>
 800d102:	e012      	b.n	800d12a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d206      	bcs.n	800d11a <prvInsertTimerInActiveList+0x62>
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	429a      	cmp	r2, r3
 800d112:	d302      	bcc.n	800d11a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d114:	2301      	movs	r3, #1
 800d116:	617b      	str	r3, [r7, #20]
 800d118:	e007      	b.n	800d12a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d11a:	4b07      	ldr	r3, [pc, #28]	; (800d138 <prvInsertTimerInActiveList+0x80>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3304      	adds	r3, #4
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7fe f922 	bl	800b36e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d12a:	697b      	ldr	r3, [r7, #20]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3718      	adds	r7, #24
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20000e24 	.word	0x20000e24
 800d138:	20000e20 	.word	0x20000e20

0800d13c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08e      	sub	sp, #56	; 0x38
 800d140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d142:	e0ca      	b.n	800d2da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	da18      	bge.n	800d17c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d14a:	1d3b      	adds	r3, r7, #4
 800d14c:	3304      	adds	r3, #4
 800d14e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10a      	bne.n	800d16c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	61fb      	str	r3, [r7, #28]
}
 800d168:	bf00      	nop
 800d16a:	e7fe      	b.n	800d16a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d172:	6850      	ldr	r0, [r2, #4]
 800d174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d176:	6892      	ldr	r2, [r2, #8]
 800d178:	4611      	mov	r1, r2
 800d17a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f2c0 80aa 	blt.w	800d2d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	3304      	adds	r3, #4
 800d194:	4618      	mov	r0, r3
 800d196:	f7fe f923 	bl	800b3e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d19a:	463b      	mov	r3, r7
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff ff6b 	bl	800d078 <prvSampleTimeNow>
 800d1a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	f200 8097 	bhi.w	800d2da <prvProcessReceivedCommands+0x19e>
 800d1ac:	a201      	add	r2, pc, #4	; (adr r2, 800d1b4 <prvProcessReceivedCommands+0x78>)
 800d1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b2:	bf00      	nop
 800d1b4:	0800d1dd 	.word	0x0800d1dd
 800d1b8:	0800d1dd 	.word	0x0800d1dd
 800d1bc:	0800d1dd 	.word	0x0800d1dd
 800d1c0:	0800d251 	.word	0x0800d251
 800d1c4:	0800d265 	.word	0x0800d265
 800d1c8:	0800d2af 	.word	0x0800d2af
 800d1cc:	0800d1dd 	.word	0x0800d1dd
 800d1d0:	0800d1dd 	.word	0x0800d1dd
 800d1d4:	0800d251 	.word	0x0800d251
 800d1d8:	0800d265 	.word	0x0800d265
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1e2:	f043 0301 	orr.w	r3, r3, #1
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	18d1      	adds	r1, r2, r3
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1fc:	f7ff ff5c 	bl	800d0b8 <prvInsertTimerInActiveList>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d069      	beq.n	800d2da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d20c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d214:	f003 0304 	and.w	r3, r3, #4
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d05e      	beq.n	800d2da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	441a      	add	r2, r3
 800d224:	2300      	movs	r3, #0
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	2300      	movs	r3, #0
 800d22a:	2100      	movs	r1, #0
 800d22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d22e:	f7ff fe05 	bl	800ce3c <xTimerGenericCommand>
 800d232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d14f      	bne.n	800d2da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	61bb      	str	r3, [r7, #24]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d256:	f023 0301 	bic.w	r3, r3, #1
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d262:	e03a      	b.n	800d2da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d26a:	f043 0301 	orr.w	r3, r3, #1
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d276:	68ba      	ldr	r2, [r7, #8]
 800d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d10a      	bne.n	800d29a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	617b      	str	r3, [r7, #20]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	699a      	ldr	r2, [r3, #24]
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	18d1      	adds	r1, r2, r3
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a8:	f7ff ff06 	bl	800d0b8 <prvInsertTimerInActiveList>
					break;
 800d2ac:	e015      	b.n	800d2da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d103      	bne.n	800d2c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2be:	f000 fbdf 	bl	800da80 <vPortFree>
 800d2c2:	e00a      	b.n	800d2da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2ca:	f023 0301 	bic.w	r3, r3, #1
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d2d6:	e000      	b.n	800d2da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d2d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2da:	4b08      	ldr	r3, [pc, #32]	; (800d2fc <prvProcessReceivedCommands+0x1c0>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	1d39      	adds	r1, r7, #4
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fe fb44 	bl	800b970 <xQueueReceive>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f47f af2a 	bne.w	800d144 <prvProcessReceivedCommands+0x8>
	}
}
 800d2f0:	bf00      	nop
 800d2f2:	bf00      	nop
 800d2f4:	3730      	adds	r7, #48	; 0x30
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20000e28 	.word	0x20000e28

0800d300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d306:	e048      	b.n	800d39a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d308:	4b2d      	ldr	r3, [pc, #180]	; (800d3c0 <prvSwitchTimerLists+0xc0>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d312:	4b2b      	ldr	r3, [pc, #172]	; (800d3c0 <prvSwitchTimerLists+0xc0>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3304      	adds	r3, #4
 800d320:	4618      	mov	r0, r3
 800d322:	f7fe f85d 	bl	800b3e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d02e      	beq.n	800d39a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	4413      	add	r3, r2
 800d344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d346:	68ba      	ldr	r2, [r7, #8]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d90e      	bls.n	800d36c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d35a:	4b19      	ldr	r3, [pc, #100]	; (800d3c0 <prvSwitchTimerLists+0xc0>)
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	3304      	adds	r3, #4
 800d362:	4619      	mov	r1, r3
 800d364:	4610      	mov	r0, r2
 800d366:	f7fe f802 	bl	800b36e <vListInsert>
 800d36a:	e016      	b.n	800d39a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d36c:	2300      	movs	r3, #0
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	2300      	movs	r3, #0
 800d372:	693a      	ldr	r2, [r7, #16]
 800d374:	2100      	movs	r1, #0
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7ff fd60 	bl	800ce3c <xTimerGenericCommand>
 800d37c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	603b      	str	r3, [r7, #0]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d39a:	4b09      	ldr	r3, [pc, #36]	; (800d3c0 <prvSwitchTimerLists+0xc0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d1b1      	bne.n	800d308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3a4:	4b06      	ldr	r3, [pc, #24]	; (800d3c0 <prvSwitchTimerLists+0xc0>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3aa:	4b06      	ldr	r3, [pc, #24]	; (800d3c4 <prvSwitchTimerLists+0xc4>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a04      	ldr	r2, [pc, #16]	; (800d3c0 <prvSwitchTimerLists+0xc0>)
 800d3b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d3b2:	4a04      	ldr	r2, [pc, #16]	; (800d3c4 <prvSwitchTimerLists+0xc4>)
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	6013      	str	r3, [r2, #0]
}
 800d3b8:	bf00      	nop
 800d3ba:	3718      	adds	r7, #24
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20000e20 	.word	0x20000e20
 800d3c4:	20000e24 	.word	0x20000e24

0800d3c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d3ce:	f000 f969 	bl	800d6a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d3d2:	4b15      	ldr	r3, [pc, #84]	; (800d428 <prvCheckForValidListAndQueue+0x60>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d120      	bne.n	800d41c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d3da:	4814      	ldr	r0, [pc, #80]	; (800d42c <prvCheckForValidListAndQueue+0x64>)
 800d3dc:	f7fd ff76 	bl	800b2cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d3e0:	4813      	ldr	r0, [pc, #76]	; (800d430 <prvCheckForValidListAndQueue+0x68>)
 800d3e2:	f7fd ff73 	bl	800b2cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d3e6:	4b13      	ldr	r3, [pc, #76]	; (800d434 <prvCheckForValidListAndQueue+0x6c>)
 800d3e8:	4a10      	ldr	r2, [pc, #64]	; (800d42c <prvCheckForValidListAndQueue+0x64>)
 800d3ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d3ec:	4b12      	ldr	r3, [pc, #72]	; (800d438 <prvCheckForValidListAndQueue+0x70>)
 800d3ee:	4a10      	ldr	r2, [pc, #64]	; (800d430 <prvCheckForValidListAndQueue+0x68>)
 800d3f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	4b11      	ldr	r3, [pc, #68]	; (800d43c <prvCheckForValidListAndQueue+0x74>)
 800d3f8:	4a11      	ldr	r2, [pc, #68]	; (800d440 <prvCheckForValidListAndQueue+0x78>)
 800d3fa:	2110      	movs	r1, #16
 800d3fc:	200a      	movs	r0, #10
 800d3fe:	f7fe f881 	bl	800b504 <xQueueGenericCreateStatic>
 800d402:	4603      	mov	r3, r0
 800d404:	4a08      	ldr	r2, [pc, #32]	; (800d428 <prvCheckForValidListAndQueue+0x60>)
 800d406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d408:	4b07      	ldr	r3, [pc, #28]	; (800d428 <prvCheckForValidListAndQueue+0x60>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d005      	beq.n	800d41c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <prvCheckForValidListAndQueue+0x60>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	490b      	ldr	r1, [pc, #44]	; (800d444 <prvCheckForValidListAndQueue+0x7c>)
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fc9a 	bl	800bd50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d41c:	f000 f972 	bl	800d704 <vPortExitCritical>
}
 800d420:	bf00      	nop
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000e28 	.word	0x20000e28
 800d42c:	20000df8 	.word	0x20000df8
 800d430:	20000e0c 	.word	0x20000e0c
 800d434:	20000e20 	.word	0x20000e20
 800d438:	20000e24 	.word	0x20000e24
 800d43c:	20000ed4 	.word	0x20000ed4
 800d440:	20000e34 	.word	0x20000e34
 800d444:	08010344 	.word	0x08010344

0800d448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d448:	b480      	push	{r7}
 800d44a:	b085      	sub	sp, #20
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	3b04      	subs	r3, #4
 800d458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	3b04      	subs	r3, #4
 800d466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f023 0201 	bic.w	r2, r3, #1
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	3b04      	subs	r3, #4
 800d476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d478:	4a0c      	ldr	r2, [pc, #48]	; (800d4ac <pxPortInitialiseStack+0x64>)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	3b14      	subs	r3, #20
 800d482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3b04      	subs	r3, #4
 800d48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f06f 0202 	mvn.w	r2, #2
 800d496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	3b20      	subs	r3, #32
 800d49c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d49e:	68fb      	ldr	r3, [r7, #12]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	0800d4b1 	.word	0x0800d4b1

0800d4b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4ba:	4b12      	ldr	r3, [pc, #72]	; (800d504 <prvTaskExitError+0x54>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4c2:	d00a      	beq.n	800d4da <prvTaskExitError+0x2a>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	60fb      	str	r3, [r7, #12]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <prvTaskExitError+0x28>
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	60bb      	str	r3, [r7, #8]
}
 800d4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4ee:	bf00      	nop
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0fc      	beq.n	800d4f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4f6:	bf00      	nop
 800d4f8:	bf00      	nop
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	2000015c 	.word	0x2000015c
	...

0800d510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d510:	4b07      	ldr	r3, [pc, #28]	; (800d530 <pxCurrentTCBConst2>)
 800d512:	6819      	ldr	r1, [r3, #0]
 800d514:	6808      	ldr	r0, [r1, #0]
 800d516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d51a:	f380 8809 	msr	PSP, r0
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f04f 0000 	mov.w	r0, #0
 800d526:	f380 8811 	msr	BASEPRI, r0
 800d52a:	4770      	bx	lr
 800d52c:	f3af 8000 	nop.w

0800d530 <pxCurrentTCBConst2>:
 800d530:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d534:	bf00      	nop
 800d536:	bf00      	nop

0800d538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d538:	4808      	ldr	r0, [pc, #32]	; (800d55c <prvPortStartFirstTask+0x24>)
 800d53a:	6800      	ldr	r0, [r0, #0]
 800d53c:	6800      	ldr	r0, [r0, #0]
 800d53e:	f380 8808 	msr	MSP, r0
 800d542:	f04f 0000 	mov.w	r0, #0
 800d546:	f380 8814 	msr	CONTROL, r0
 800d54a:	b662      	cpsie	i
 800d54c:	b661      	cpsie	f
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	df00      	svc	0
 800d558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d55a:	bf00      	nop
 800d55c:	e000ed08 	.word	0xe000ed08

0800d560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d566:	4b46      	ldr	r3, [pc, #280]	; (800d680 <xPortStartScheduler+0x120>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a46      	ldr	r2, [pc, #280]	; (800d684 <xPortStartScheduler+0x124>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d10a      	bne.n	800d586 <xPortStartScheduler+0x26>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	613b      	str	r3, [r7, #16]
}
 800d582:	bf00      	nop
 800d584:	e7fe      	b.n	800d584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d586:	4b3e      	ldr	r3, [pc, #248]	; (800d680 <xPortStartScheduler+0x120>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a3f      	ldr	r2, [pc, #252]	; (800d688 <xPortStartScheduler+0x128>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d10a      	bne.n	800d5a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	60fb      	str	r3, [r7, #12]
}
 800d5a2:	bf00      	nop
 800d5a4:	e7fe      	b.n	800d5a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5a6:	4b39      	ldr	r3, [pc, #228]	; (800d68c <xPortStartScheduler+0x12c>)
 800d5a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	22ff      	movs	r2, #255	; 0xff
 800d5b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	4b31      	ldr	r3, [pc, #196]	; (800d690 <xPortStartScheduler+0x130>)
 800d5cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5ce:	4b31      	ldr	r3, [pc, #196]	; (800d694 <xPortStartScheduler+0x134>)
 800d5d0:	2207      	movs	r2, #7
 800d5d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5d4:	e009      	b.n	800d5ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d5d6:	4b2f      	ldr	r3, [pc, #188]	; (800d694 <xPortStartScheduler+0x134>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	4a2d      	ldr	r2, [pc, #180]	; (800d694 <xPortStartScheduler+0x134>)
 800d5de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d5ea:	78fb      	ldrb	r3, [r7, #3]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f2:	2b80      	cmp	r3, #128	; 0x80
 800d5f4:	d0ef      	beq.n	800d5d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d5f6:	4b27      	ldr	r3, [pc, #156]	; (800d694 <xPortStartScheduler+0x134>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f1c3 0307 	rsb	r3, r3, #7
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d00a      	beq.n	800d618 <xPortStartScheduler+0xb8>
	__asm volatile
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	60bb      	str	r3, [r7, #8]
}
 800d614:	bf00      	nop
 800d616:	e7fe      	b.n	800d616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d618:	4b1e      	ldr	r3, [pc, #120]	; (800d694 <xPortStartScheduler+0x134>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	021b      	lsls	r3, r3, #8
 800d61e:	4a1d      	ldr	r2, [pc, #116]	; (800d694 <xPortStartScheduler+0x134>)
 800d620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d622:	4b1c      	ldr	r3, [pc, #112]	; (800d694 <xPortStartScheduler+0x134>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d62a:	4a1a      	ldr	r2, [pc, #104]	; (800d694 <xPortStartScheduler+0x134>)
 800d62c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	b2da      	uxtb	r2, r3
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d636:	4b18      	ldr	r3, [pc, #96]	; (800d698 <xPortStartScheduler+0x138>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a17      	ldr	r2, [pc, #92]	; (800d698 <xPortStartScheduler+0x138>)
 800d63c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d642:	4b15      	ldr	r3, [pc, #84]	; (800d698 <xPortStartScheduler+0x138>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a14      	ldr	r2, [pc, #80]	; (800d698 <xPortStartScheduler+0x138>)
 800d648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d64c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d64e:	f000 f8dd 	bl	800d80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d652:	4b12      	ldr	r3, [pc, #72]	; (800d69c <xPortStartScheduler+0x13c>)
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d658:	f000 f8fc 	bl	800d854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d65c:	4b10      	ldr	r3, [pc, #64]	; (800d6a0 <xPortStartScheduler+0x140>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a0f      	ldr	r2, [pc, #60]	; (800d6a0 <xPortStartScheduler+0x140>)
 800d662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d668:	f7ff ff66 	bl	800d538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d66c:	f7fe fffe 	bl	800c66c <vTaskSwitchContext>
	prvTaskExitError();
 800d670:	f7ff ff1e 	bl	800d4b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d674:	2300      	movs	r3, #0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3718      	adds	r7, #24
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	e000ed00 	.word	0xe000ed00
 800d684:	410fc271 	.word	0x410fc271
 800d688:	410fc270 	.word	0x410fc270
 800d68c:	e000e400 	.word	0xe000e400
 800d690:	20000f24 	.word	0x20000f24
 800d694:	20000f28 	.word	0x20000f28
 800d698:	e000ed20 	.word	0xe000ed20
 800d69c:	2000015c 	.word	0x2000015c
 800d6a0:	e000ef34 	.word	0xe000ef34

0800d6a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	607b      	str	r3, [r7, #4]
}
 800d6bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6be:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <vPortEnterCritical+0x58>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	4a0d      	ldr	r2, [pc, #52]	; (800d6fc <vPortEnterCritical+0x58>)
 800d6c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6c8:	4b0c      	ldr	r3, [pc, #48]	; (800d6fc <vPortEnterCritical+0x58>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d10f      	bne.n	800d6f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d6d0:	4b0b      	ldr	r3, [pc, #44]	; (800d700 <vPortEnterCritical+0x5c>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	603b      	str	r3, [r7, #0]
}
 800d6ec:	bf00      	nop
 800d6ee:	e7fe      	b.n	800d6ee <vPortEnterCritical+0x4a>
	}
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	2000015c 	.word	0x2000015c
 800d700:	e000ed04 	.word	0xe000ed04

0800d704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d70a:	4b12      	ldr	r3, [pc, #72]	; (800d754 <vPortExitCritical+0x50>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10a      	bne.n	800d728 <vPortExitCritical+0x24>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	607b      	str	r3, [r7, #4]
}
 800d724:	bf00      	nop
 800d726:	e7fe      	b.n	800d726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d728:	4b0a      	ldr	r3, [pc, #40]	; (800d754 <vPortExitCritical+0x50>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	4a09      	ldr	r2, [pc, #36]	; (800d754 <vPortExitCritical+0x50>)
 800d730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d732:	4b08      	ldr	r3, [pc, #32]	; (800d754 <vPortExitCritical+0x50>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d105      	bne.n	800d746 <vPortExitCritical+0x42>
 800d73a:	2300      	movs	r3, #0
 800d73c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	f383 8811 	msr	BASEPRI, r3
}
 800d744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d746:	bf00      	nop
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	2000015c 	.word	0x2000015c
	...

0800d760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d760:	f3ef 8009 	mrs	r0, PSP
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	4b15      	ldr	r3, [pc, #84]	; (800d7c0 <pxCurrentTCBConst>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	f01e 0f10 	tst.w	lr, #16
 800d770:	bf08      	it	eq
 800d772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77a:	6010      	str	r0, [r2, #0]
 800d77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d780:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d784:	f380 8811 	msr	BASEPRI, r0
 800d788:	f3bf 8f4f 	dsb	sy
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f7fe ff6c 	bl	800c66c <vTaskSwitchContext>
 800d794:	f04f 0000 	mov.w	r0, #0
 800d798:	f380 8811 	msr	BASEPRI, r0
 800d79c:	bc09      	pop	{r0, r3}
 800d79e:	6819      	ldr	r1, [r3, #0]
 800d7a0:	6808      	ldr	r0, [r1, #0]
 800d7a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a6:	f01e 0f10 	tst.w	lr, #16
 800d7aa:	bf08      	it	eq
 800d7ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7b0:	f380 8809 	msr	PSP, r0
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	f3af 8000 	nop.w

0800d7c0 <pxCurrentTCBConst>:
 800d7c0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop

0800d7c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	607b      	str	r3, [r7, #4]
}
 800d7e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7e2:	f7fe fe89 	bl	800c4f8 <xTaskIncrementTick>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7ec:	4b06      	ldr	r3, [pc, #24]	; (800d808 <xPortSysTickHandler+0x40>)
 800d7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	f383 8811 	msr	BASEPRI, r3
}
 800d7fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	e000ed04 	.word	0xe000ed04

0800d80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d80c:	b480      	push	{r7}
 800d80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d810:	4b0b      	ldr	r3, [pc, #44]	; (800d840 <vPortSetupTimerInterrupt+0x34>)
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d816:	4b0b      	ldr	r3, [pc, #44]	; (800d844 <vPortSetupTimerInterrupt+0x38>)
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d81c:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <vPortSetupTimerInterrupt+0x3c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a0a      	ldr	r2, [pc, #40]	; (800d84c <vPortSetupTimerInterrupt+0x40>)
 800d822:	fba2 2303 	umull	r2, r3, r2, r3
 800d826:	099b      	lsrs	r3, r3, #6
 800d828:	4a09      	ldr	r2, [pc, #36]	; (800d850 <vPortSetupTimerInterrupt+0x44>)
 800d82a:	3b01      	subs	r3, #1
 800d82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d82e:	4b04      	ldr	r3, [pc, #16]	; (800d840 <vPortSetupTimerInterrupt+0x34>)
 800d830:	2207      	movs	r2, #7
 800d832:	601a      	str	r2, [r3, #0]
}
 800d834:	bf00      	nop
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	e000e010 	.word	0xe000e010
 800d844:	e000e018 	.word	0xe000e018
 800d848:	2000013c 	.word	0x2000013c
 800d84c:	10624dd3 	.word	0x10624dd3
 800d850:	e000e014 	.word	0xe000e014

0800d854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d864 <vPortEnableVFP+0x10>
 800d858:	6801      	ldr	r1, [r0, #0]
 800d85a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d85e:	6001      	str	r1, [r0, #0]
 800d860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d862:	bf00      	nop
 800d864:	e000ed88 	.word	0xe000ed88

0800d868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d86e:	f3ef 8305 	mrs	r3, IPSR
 800d872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b0f      	cmp	r3, #15
 800d878:	d914      	bls.n	800d8a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d87a:	4a17      	ldr	r2, [pc, #92]	; (800d8d8 <vPortValidateInterruptPriority+0x70>)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	4413      	add	r3, r2
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d884:	4b15      	ldr	r3, [pc, #84]	; (800d8dc <vPortValidateInterruptPriority+0x74>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	7afa      	ldrb	r2, [r7, #11]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d20a      	bcs.n	800d8a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	607b      	str	r3, [r7, #4]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8a4:	4b0e      	ldr	r3, [pc, #56]	; (800d8e0 <vPortValidateInterruptPriority+0x78>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8ac:	4b0d      	ldr	r3, [pc, #52]	; (800d8e4 <vPortValidateInterruptPriority+0x7c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d90a      	bls.n	800d8ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	603b      	str	r3, [r7, #0]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <vPortValidateInterruptPriority+0x60>
	}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	e000e3f0 	.word	0xe000e3f0
 800d8dc:	20000f24 	.word	0x20000f24
 800d8e0:	e000ed0c 	.word	0xe000ed0c
 800d8e4:	20000f28 	.word	0x20000f28

0800d8e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08a      	sub	sp, #40	; 0x28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8f4:	f7fe fd44 	bl	800c380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8f8:	4b5b      	ldr	r3, [pc, #364]	; (800da68 <pvPortMalloc+0x180>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d900:	f000 f920 	bl	800db44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d904:	4b59      	ldr	r3, [pc, #356]	; (800da6c <pvPortMalloc+0x184>)
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4013      	ands	r3, r2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f040 8093 	bne.w	800da38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d01d      	beq.n	800d954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d918:	2208      	movs	r2, #8
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4413      	add	r3, r2
 800d91e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f003 0307 	and.w	r3, r3, #7
 800d926:	2b00      	cmp	r3, #0
 800d928:	d014      	beq.n	800d954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f023 0307 	bic.w	r3, r3, #7
 800d930:	3308      	adds	r3, #8
 800d932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f003 0307 	and.w	r3, r3, #7
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00a      	beq.n	800d954 <pvPortMalloc+0x6c>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	617b      	str	r3, [r7, #20]
}
 800d950:	bf00      	nop
 800d952:	e7fe      	b.n	800d952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d06e      	beq.n	800da38 <pvPortMalloc+0x150>
 800d95a:	4b45      	ldr	r3, [pc, #276]	; (800da70 <pvPortMalloc+0x188>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	429a      	cmp	r2, r3
 800d962:	d869      	bhi.n	800da38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d964:	4b43      	ldr	r3, [pc, #268]	; (800da74 <pvPortMalloc+0x18c>)
 800d966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d968:	4b42      	ldr	r3, [pc, #264]	; (800da74 <pvPortMalloc+0x18c>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d96e:	e004      	b.n	800d97a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	429a      	cmp	r2, r3
 800d982:	d903      	bls.n	800d98c <pvPortMalloc+0xa4>
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1f1      	bne.n	800d970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d98c:	4b36      	ldr	r3, [pc, #216]	; (800da68 <pvPortMalloc+0x180>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d992:	429a      	cmp	r2, r3
 800d994:	d050      	beq.n	800da38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2208      	movs	r2, #8
 800d99c:	4413      	add	r3, r2
 800d99e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	1ad2      	subs	r2, r2, r3
 800d9b0:	2308      	movs	r3, #8
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d91f      	bls.n	800d9f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4413      	add	r3, r2
 800d9be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ce:	f383 8811 	msr	BASEPRI, r3
 800d9d2:	f3bf 8f6f 	isb	sy
 800d9d6:	f3bf 8f4f 	dsb	sy
 800d9da:	613b      	str	r3, [r7, #16]
}
 800d9dc:	bf00      	nop
 800d9de:	e7fe      	b.n	800d9de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	685a      	ldr	r2, [r3, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	1ad2      	subs	r2, r2, r3
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9f2:	69b8      	ldr	r0, [r7, #24]
 800d9f4:	f000 f908 	bl	800dc08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9f8:	4b1d      	ldr	r3, [pc, #116]	; (800da70 <pvPortMalloc+0x188>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	4a1b      	ldr	r2, [pc, #108]	; (800da70 <pvPortMalloc+0x188>)
 800da04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da06:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <pvPortMalloc+0x188>)
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	4b1b      	ldr	r3, [pc, #108]	; (800da78 <pvPortMalloc+0x190>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	429a      	cmp	r2, r3
 800da10:	d203      	bcs.n	800da1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da12:	4b17      	ldr	r3, [pc, #92]	; (800da70 <pvPortMalloc+0x188>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a18      	ldr	r2, [pc, #96]	; (800da78 <pvPortMalloc+0x190>)
 800da18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	4b13      	ldr	r3, [pc, #76]	; (800da6c <pvPortMalloc+0x184>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	431a      	orrs	r2, r3
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	2200      	movs	r2, #0
 800da2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da2e:	4b13      	ldr	r3, [pc, #76]	; (800da7c <pvPortMalloc+0x194>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	3301      	adds	r3, #1
 800da34:	4a11      	ldr	r2, [pc, #68]	; (800da7c <pvPortMalloc+0x194>)
 800da36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da38:	f7fe fcb0 	bl	800c39c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	f003 0307 	and.w	r3, r3, #7
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <pvPortMalloc+0x174>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	60fb      	str	r3, [r7, #12]
}
 800da58:	bf00      	nop
 800da5a:	e7fe      	b.n	800da5a <pvPortMalloc+0x172>
	return pvReturn;
 800da5c:	69fb      	ldr	r3, [r7, #28]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3728      	adds	r7, #40	; 0x28
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20003644 	.word	0x20003644
 800da6c:	20003658 	.word	0x20003658
 800da70:	20003648 	.word	0x20003648
 800da74:	2000363c 	.word	0x2000363c
 800da78:	2000364c 	.word	0x2000364c
 800da7c:	20003650 	.word	0x20003650

0800da80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d04d      	beq.n	800db2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da92:	2308      	movs	r3, #8
 800da94:	425b      	negs	r3, r3
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	4413      	add	r3, r2
 800da9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	4b24      	ldr	r3, [pc, #144]	; (800db38 <vPortFree+0xb8>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4013      	ands	r3, r2
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10a      	bne.n	800dac4 <vPortFree+0x44>
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	f383 8811 	msr	BASEPRI, r3
 800dab6:	f3bf 8f6f 	isb	sy
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	60fb      	str	r3, [r7, #12]
}
 800dac0:	bf00      	nop
 800dac2:	e7fe      	b.n	800dac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d00a      	beq.n	800dae2 <vPortFree+0x62>
	__asm volatile
 800dacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	60bb      	str	r3, [r7, #8]
}
 800dade:	bf00      	nop
 800dae0:	e7fe      	b.n	800dae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	685a      	ldr	r2, [r3, #4]
 800dae6:	4b14      	ldr	r3, [pc, #80]	; (800db38 <vPortFree+0xb8>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4013      	ands	r3, r2
 800daec:	2b00      	cmp	r3, #0
 800daee:	d01e      	beq.n	800db2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d11a      	bne.n	800db2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	4b0e      	ldr	r3, [pc, #56]	; (800db38 <vPortFree+0xb8>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	43db      	mvns	r3, r3
 800db02:	401a      	ands	r2, r3
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db08:	f7fe fc3a 	bl	800c380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	4b0a      	ldr	r3, [pc, #40]	; (800db3c <vPortFree+0xbc>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4413      	add	r3, r2
 800db16:	4a09      	ldr	r2, [pc, #36]	; (800db3c <vPortFree+0xbc>)
 800db18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db1a:	6938      	ldr	r0, [r7, #16]
 800db1c:	f000 f874 	bl	800dc08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db20:	4b07      	ldr	r3, [pc, #28]	; (800db40 <vPortFree+0xc0>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3301      	adds	r3, #1
 800db26:	4a06      	ldr	r2, [pc, #24]	; (800db40 <vPortFree+0xc0>)
 800db28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db2a:	f7fe fc37 	bl	800c39c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db2e:	bf00      	nop
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20003658 	.word	0x20003658
 800db3c:	20003648 	.word	0x20003648
 800db40:	20003654 	.word	0x20003654

0800db44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db4a:	f242 7310 	movw	r3, #10000	; 0x2710
 800db4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db50:	4b27      	ldr	r3, [pc, #156]	; (800dbf0 <prvHeapInit+0xac>)
 800db52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f003 0307 	and.w	r3, r3, #7
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00c      	beq.n	800db78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3307      	adds	r3, #7
 800db62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f023 0307 	bic.w	r3, r3, #7
 800db6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	4a1f      	ldr	r2, [pc, #124]	; (800dbf0 <prvHeapInit+0xac>)
 800db74:	4413      	add	r3, r2
 800db76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db7c:	4a1d      	ldr	r2, [pc, #116]	; (800dbf4 <prvHeapInit+0xb0>)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db82:	4b1c      	ldr	r3, [pc, #112]	; (800dbf4 <prvHeapInit+0xb0>)
 800db84:	2200      	movs	r2, #0
 800db86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	68ba      	ldr	r2, [r7, #8]
 800db8c:	4413      	add	r3, r2
 800db8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db90:	2208      	movs	r2, #8
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	1a9b      	subs	r3, r3, r2
 800db96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f023 0307 	bic.w	r3, r3, #7
 800db9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	4a15      	ldr	r2, [pc, #84]	; (800dbf8 <prvHeapInit+0xb4>)
 800dba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dba6:	4b14      	ldr	r3, [pc, #80]	; (800dbf8 <prvHeapInit+0xb4>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbae:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <prvHeapInit+0xb4>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	1ad2      	subs	r2, r2, r3
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dbc4:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <prvHeapInit+0xb4>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	4a0a      	ldr	r2, [pc, #40]	; (800dbfc <prvHeapInit+0xb8>)
 800dbd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	4a09      	ldr	r2, [pc, #36]	; (800dc00 <prvHeapInit+0xbc>)
 800dbda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dbdc:	4b09      	ldr	r3, [pc, #36]	; (800dc04 <prvHeapInit+0xc0>)
 800dbde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dbe2:	601a      	str	r2, [r3, #0]
}
 800dbe4:	bf00      	nop
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	20000f2c 	.word	0x20000f2c
 800dbf4:	2000363c 	.word	0x2000363c
 800dbf8:	20003644 	.word	0x20003644
 800dbfc:	2000364c 	.word	0x2000364c
 800dc00:	20003648 	.word	0x20003648
 800dc04:	20003658 	.word	0x20003658

0800dc08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc10:	4b28      	ldr	r3, [pc, #160]	; (800dcb4 <prvInsertBlockIntoFreeList+0xac>)
 800dc12:	60fb      	str	r3, [r7, #12]
 800dc14:	e002      	b.n	800dc1c <prvInsertBlockIntoFreeList+0x14>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d8f7      	bhi.n	800dc16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	4413      	add	r3, r2
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d108      	bne.n	800dc4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	685a      	ldr	r2, [r3, #4]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	441a      	add	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	441a      	add	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d118      	bne.n	800dc90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <prvInsertBlockIntoFreeList+0xb0>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d00d      	beq.n	800dc86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	441a      	add	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	e008      	b.n	800dc98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc86:	4b0c      	ldr	r3, [pc, #48]	; (800dcb8 <prvInsertBlockIntoFreeList+0xb0>)
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	601a      	str	r2, [r3, #0]
 800dc8e:	e003      	b.n	800dc98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d002      	beq.n	800dca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dca6:	bf00      	nop
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	2000363c 	.word	0x2000363c
 800dcb8:	20003644 	.word	0x20003644

0800dcbc <__errno>:
 800dcbc:	4b01      	ldr	r3, [pc, #4]	; (800dcc4 <__errno+0x8>)
 800dcbe:	6818      	ldr	r0, [r3, #0]
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop
 800dcc4:	20000160 	.word	0x20000160

0800dcc8 <__libc_init_array>:
 800dcc8:	b570      	push	{r4, r5, r6, lr}
 800dcca:	4d0d      	ldr	r5, [pc, #52]	; (800dd00 <__libc_init_array+0x38>)
 800dccc:	4c0d      	ldr	r4, [pc, #52]	; (800dd04 <__libc_init_array+0x3c>)
 800dcce:	1b64      	subs	r4, r4, r5
 800dcd0:	10a4      	asrs	r4, r4, #2
 800dcd2:	2600      	movs	r6, #0
 800dcd4:	42a6      	cmp	r6, r4
 800dcd6:	d109      	bne.n	800dcec <__libc_init_array+0x24>
 800dcd8:	4d0b      	ldr	r5, [pc, #44]	; (800dd08 <__libc_init_array+0x40>)
 800dcda:	4c0c      	ldr	r4, [pc, #48]	; (800dd0c <__libc_init_array+0x44>)
 800dcdc:	f002 fa22 	bl	8010124 <_init>
 800dce0:	1b64      	subs	r4, r4, r5
 800dce2:	10a4      	asrs	r4, r4, #2
 800dce4:	2600      	movs	r6, #0
 800dce6:	42a6      	cmp	r6, r4
 800dce8:	d105      	bne.n	800dcf6 <__libc_init_array+0x2e>
 800dcea:	bd70      	pop	{r4, r5, r6, pc}
 800dcec:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcf0:	4798      	blx	r3
 800dcf2:	3601      	adds	r6, #1
 800dcf4:	e7ee      	b.n	800dcd4 <__libc_init_array+0xc>
 800dcf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcfa:	4798      	blx	r3
 800dcfc:	3601      	adds	r6, #1
 800dcfe:	e7f2      	b.n	800dce6 <__libc_init_array+0x1e>
 800dd00:	08010698 	.word	0x08010698
 800dd04:	08010698 	.word	0x08010698
 800dd08:	08010698 	.word	0x08010698
 800dd0c:	0801069c 	.word	0x0801069c

0800dd10 <memcpy>:
 800dd10:	440a      	add	r2, r1
 800dd12:	4291      	cmp	r1, r2
 800dd14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dd18:	d100      	bne.n	800dd1c <memcpy+0xc>
 800dd1a:	4770      	bx	lr
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd26:	4291      	cmp	r1, r2
 800dd28:	d1f9      	bne.n	800dd1e <memcpy+0xe>
 800dd2a:	bd10      	pop	{r4, pc}

0800dd2c <memset>:
 800dd2c:	4402      	add	r2, r0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d100      	bne.n	800dd36 <memset+0xa>
 800dd34:	4770      	bx	lr
 800dd36:	f803 1b01 	strb.w	r1, [r3], #1
 800dd3a:	e7f9      	b.n	800dd30 <memset+0x4>

0800dd3c <iprintf>:
 800dd3c:	b40f      	push	{r0, r1, r2, r3}
 800dd3e:	4b0a      	ldr	r3, [pc, #40]	; (800dd68 <iprintf+0x2c>)
 800dd40:	b513      	push	{r0, r1, r4, lr}
 800dd42:	681c      	ldr	r4, [r3, #0]
 800dd44:	b124      	cbz	r4, 800dd50 <iprintf+0x14>
 800dd46:	69a3      	ldr	r3, [r4, #24]
 800dd48:	b913      	cbnz	r3, 800dd50 <iprintf+0x14>
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f000 fa7e 	bl	800e24c <__sinit>
 800dd50:	ab05      	add	r3, sp, #20
 800dd52:	9a04      	ldr	r2, [sp, #16]
 800dd54:	68a1      	ldr	r1, [r4, #8]
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f000 fdab 	bl	800e8b4 <_vfiprintf_r>
 800dd5e:	b002      	add	sp, #8
 800dd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd64:	b004      	add	sp, #16
 800dd66:	4770      	bx	lr
 800dd68:	20000160 	.word	0x20000160

0800dd6c <_puts_r>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	460e      	mov	r6, r1
 800dd70:	4605      	mov	r5, r0
 800dd72:	b118      	cbz	r0, 800dd7c <_puts_r+0x10>
 800dd74:	6983      	ldr	r3, [r0, #24]
 800dd76:	b90b      	cbnz	r3, 800dd7c <_puts_r+0x10>
 800dd78:	f000 fa68 	bl	800e24c <__sinit>
 800dd7c:	69ab      	ldr	r3, [r5, #24]
 800dd7e:	68ac      	ldr	r4, [r5, #8]
 800dd80:	b913      	cbnz	r3, 800dd88 <_puts_r+0x1c>
 800dd82:	4628      	mov	r0, r5
 800dd84:	f000 fa62 	bl	800e24c <__sinit>
 800dd88:	4b2c      	ldr	r3, [pc, #176]	; (800de3c <_puts_r+0xd0>)
 800dd8a:	429c      	cmp	r4, r3
 800dd8c:	d120      	bne.n	800ddd0 <_puts_r+0x64>
 800dd8e:	686c      	ldr	r4, [r5, #4]
 800dd90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd92:	07db      	lsls	r3, r3, #31
 800dd94:	d405      	bmi.n	800dda2 <_puts_r+0x36>
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	0598      	lsls	r0, r3, #22
 800dd9a:	d402      	bmi.n	800dda2 <_puts_r+0x36>
 800dd9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd9e:	f000 faf3 	bl	800e388 <__retarget_lock_acquire_recursive>
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	0719      	lsls	r1, r3, #28
 800dda6:	d51d      	bpl.n	800dde4 <_puts_r+0x78>
 800dda8:	6923      	ldr	r3, [r4, #16]
 800ddaa:	b1db      	cbz	r3, 800dde4 <_puts_r+0x78>
 800ddac:	3e01      	subs	r6, #1
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	60a3      	str	r3, [r4, #8]
 800ddb8:	bb39      	cbnz	r1, 800de0a <_puts_r+0x9e>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	da38      	bge.n	800de30 <_puts_r+0xc4>
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	210a      	movs	r1, #10
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f000 f868 	bl	800de98 <__swbuf_r>
 800ddc8:	3001      	adds	r0, #1
 800ddca:	d011      	beq.n	800ddf0 <_puts_r+0x84>
 800ddcc:	250a      	movs	r5, #10
 800ddce:	e011      	b.n	800ddf4 <_puts_r+0x88>
 800ddd0:	4b1b      	ldr	r3, [pc, #108]	; (800de40 <_puts_r+0xd4>)
 800ddd2:	429c      	cmp	r4, r3
 800ddd4:	d101      	bne.n	800ddda <_puts_r+0x6e>
 800ddd6:	68ac      	ldr	r4, [r5, #8]
 800ddd8:	e7da      	b.n	800dd90 <_puts_r+0x24>
 800ddda:	4b1a      	ldr	r3, [pc, #104]	; (800de44 <_puts_r+0xd8>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	bf08      	it	eq
 800dde0:	68ec      	ldreq	r4, [r5, #12]
 800dde2:	e7d5      	b.n	800dd90 <_puts_r+0x24>
 800dde4:	4621      	mov	r1, r4
 800dde6:	4628      	mov	r0, r5
 800dde8:	f000 f8a8 	bl	800df3c <__swsetup_r>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d0dd      	beq.n	800ddac <_puts_r+0x40>
 800ddf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ddf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddf6:	07da      	lsls	r2, r3, #31
 800ddf8:	d405      	bmi.n	800de06 <_puts_r+0x9a>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	059b      	lsls	r3, r3, #22
 800ddfe:	d402      	bmi.n	800de06 <_puts_r+0x9a>
 800de00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de02:	f000 fac2 	bl	800e38a <__retarget_lock_release_recursive>
 800de06:	4628      	mov	r0, r5
 800de08:	bd70      	pop	{r4, r5, r6, pc}
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da04      	bge.n	800de18 <_puts_r+0xac>
 800de0e:	69a2      	ldr	r2, [r4, #24]
 800de10:	429a      	cmp	r2, r3
 800de12:	dc06      	bgt.n	800de22 <_puts_r+0xb6>
 800de14:	290a      	cmp	r1, #10
 800de16:	d004      	beq.n	800de22 <_puts_r+0xb6>
 800de18:	6823      	ldr	r3, [r4, #0]
 800de1a:	1c5a      	adds	r2, r3, #1
 800de1c:	6022      	str	r2, [r4, #0]
 800de1e:	7019      	strb	r1, [r3, #0]
 800de20:	e7c5      	b.n	800ddae <_puts_r+0x42>
 800de22:	4622      	mov	r2, r4
 800de24:	4628      	mov	r0, r5
 800de26:	f000 f837 	bl	800de98 <__swbuf_r>
 800de2a:	3001      	adds	r0, #1
 800de2c:	d1bf      	bne.n	800ddae <_puts_r+0x42>
 800de2e:	e7df      	b.n	800ddf0 <_puts_r+0x84>
 800de30:	6823      	ldr	r3, [r4, #0]
 800de32:	250a      	movs	r5, #10
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	6022      	str	r2, [r4, #0]
 800de38:	701d      	strb	r5, [r3, #0]
 800de3a:	e7db      	b.n	800ddf4 <_puts_r+0x88>
 800de3c:	08010440 	.word	0x08010440
 800de40:	08010460 	.word	0x08010460
 800de44:	08010420 	.word	0x08010420

0800de48 <puts>:
 800de48:	4b02      	ldr	r3, [pc, #8]	; (800de54 <puts+0xc>)
 800de4a:	4601      	mov	r1, r0
 800de4c:	6818      	ldr	r0, [r3, #0]
 800de4e:	f7ff bf8d 	b.w	800dd6c <_puts_r>
 800de52:	bf00      	nop
 800de54:	20000160 	.word	0x20000160

0800de58 <siprintf>:
 800de58:	b40e      	push	{r1, r2, r3}
 800de5a:	b500      	push	{lr}
 800de5c:	b09c      	sub	sp, #112	; 0x70
 800de5e:	ab1d      	add	r3, sp, #116	; 0x74
 800de60:	9002      	str	r0, [sp, #8]
 800de62:	9006      	str	r0, [sp, #24]
 800de64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de68:	4809      	ldr	r0, [pc, #36]	; (800de90 <siprintf+0x38>)
 800de6a:	9107      	str	r1, [sp, #28]
 800de6c:	9104      	str	r1, [sp, #16]
 800de6e:	4909      	ldr	r1, [pc, #36]	; (800de94 <siprintf+0x3c>)
 800de70:	f853 2b04 	ldr.w	r2, [r3], #4
 800de74:	9105      	str	r1, [sp, #20]
 800de76:	6800      	ldr	r0, [r0, #0]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	a902      	add	r1, sp, #8
 800de7c:	f000 fbf0 	bl	800e660 <_svfiprintf_r>
 800de80:	9b02      	ldr	r3, [sp, #8]
 800de82:	2200      	movs	r2, #0
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	b01c      	add	sp, #112	; 0x70
 800de88:	f85d eb04 	ldr.w	lr, [sp], #4
 800de8c:	b003      	add	sp, #12
 800de8e:	4770      	bx	lr
 800de90:	20000160 	.word	0x20000160
 800de94:	ffff0208 	.word	0xffff0208

0800de98 <__swbuf_r>:
 800de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9a:	460e      	mov	r6, r1
 800de9c:	4614      	mov	r4, r2
 800de9e:	4605      	mov	r5, r0
 800dea0:	b118      	cbz	r0, 800deaa <__swbuf_r+0x12>
 800dea2:	6983      	ldr	r3, [r0, #24]
 800dea4:	b90b      	cbnz	r3, 800deaa <__swbuf_r+0x12>
 800dea6:	f000 f9d1 	bl	800e24c <__sinit>
 800deaa:	4b21      	ldr	r3, [pc, #132]	; (800df30 <__swbuf_r+0x98>)
 800deac:	429c      	cmp	r4, r3
 800deae:	d12b      	bne.n	800df08 <__swbuf_r+0x70>
 800deb0:	686c      	ldr	r4, [r5, #4]
 800deb2:	69a3      	ldr	r3, [r4, #24]
 800deb4:	60a3      	str	r3, [r4, #8]
 800deb6:	89a3      	ldrh	r3, [r4, #12]
 800deb8:	071a      	lsls	r2, r3, #28
 800deba:	d52f      	bpl.n	800df1c <__swbuf_r+0x84>
 800debc:	6923      	ldr	r3, [r4, #16]
 800debe:	b36b      	cbz	r3, 800df1c <__swbuf_r+0x84>
 800dec0:	6923      	ldr	r3, [r4, #16]
 800dec2:	6820      	ldr	r0, [r4, #0]
 800dec4:	1ac0      	subs	r0, r0, r3
 800dec6:	6963      	ldr	r3, [r4, #20]
 800dec8:	b2f6      	uxtb	r6, r6
 800deca:	4283      	cmp	r3, r0
 800decc:	4637      	mov	r7, r6
 800dece:	dc04      	bgt.n	800deda <__swbuf_r+0x42>
 800ded0:	4621      	mov	r1, r4
 800ded2:	4628      	mov	r0, r5
 800ded4:	f000 f926 	bl	800e124 <_fflush_r>
 800ded8:	bb30      	cbnz	r0, 800df28 <__swbuf_r+0x90>
 800deda:	68a3      	ldr	r3, [r4, #8]
 800dedc:	3b01      	subs	r3, #1
 800dede:	60a3      	str	r3, [r4, #8]
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	6022      	str	r2, [r4, #0]
 800dee6:	701e      	strb	r6, [r3, #0]
 800dee8:	6963      	ldr	r3, [r4, #20]
 800deea:	3001      	adds	r0, #1
 800deec:	4283      	cmp	r3, r0
 800deee:	d004      	beq.n	800defa <__swbuf_r+0x62>
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	07db      	lsls	r3, r3, #31
 800def4:	d506      	bpl.n	800df04 <__swbuf_r+0x6c>
 800def6:	2e0a      	cmp	r6, #10
 800def8:	d104      	bne.n	800df04 <__swbuf_r+0x6c>
 800defa:	4621      	mov	r1, r4
 800defc:	4628      	mov	r0, r5
 800defe:	f000 f911 	bl	800e124 <_fflush_r>
 800df02:	b988      	cbnz	r0, 800df28 <__swbuf_r+0x90>
 800df04:	4638      	mov	r0, r7
 800df06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df08:	4b0a      	ldr	r3, [pc, #40]	; (800df34 <__swbuf_r+0x9c>)
 800df0a:	429c      	cmp	r4, r3
 800df0c:	d101      	bne.n	800df12 <__swbuf_r+0x7a>
 800df0e:	68ac      	ldr	r4, [r5, #8]
 800df10:	e7cf      	b.n	800deb2 <__swbuf_r+0x1a>
 800df12:	4b09      	ldr	r3, [pc, #36]	; (800df38 <__swbuf_r+0xa0>)
 800df14:	429c      	cmp	r4, r3
 800df16:	bf08      	it	eq
 800df18:	68ec      	ldreq	r4, [r5, #12]
 800df1a:	e7ca      	b.n	800deb2 <__swbuf_r+0x1a>
 800df1c:	4621      	mov	r1, r4
 800df1e:	4628      	mov	r0, r5
 800df20:	f000 f80c 	bl	800df3c <__swsetup_r>
 800df24:	2800      	cmp	r0, #0
 800df26:	d0cb      	beq.n	800dec0 <__swbuf_r+0x28>
 800df28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800df2c:	e7ea      	b.n	800df04 <__swbuf_r+0x6c>
 800df2e:	bf00      	nop
 800df30:	08010440 	.word	0x08010440
 800df34:	08010460 	.word	0x08010460
 800df38:	08010420 	.word	0x08010420

0800df3c <__swsetup_r>:
 800df3c:	4b32      	ldr	r3, [pc, #200]	; (800e008 <__swsetup_r+0xcc>)
 800df3e:	b570      	push	{r4, r5, r6, lr}
 800df40:	681d      	ldr	r5, [r3, #0]
 800df42:	4606      	mov	r6, r0
 800df44:	460c      	mov	r4, r1
 800df46:	b125      	cbz	r5, 800df52 <__swsetup_r+0x16>
 800df48:	69ab      	ldr	r3, [r5, #24]
 800df4a:	b913      	cbnz	r3, 800df52 <__swsetup_r+0x16>
 800df4c:	4628      	mov	r0, r5
 800df4e:	f000 f97d 	bl	800e24c <__sinit>
 800df52:	4b2e      	ldr	r3, [pc, #184]	; (800e00c <__swsetup_r+0xd0>)
 800df54:	429c      	cmp	r4, r3
 800df56:	d10f      	bne.n	800df78 <__swsetup_r+0x3c>
 800df58:	686c      	ldr	r4, [r5, #4]
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df60:	0719      	lsls	r1, r3, #28
 800df62:	d42c      	bmi.n	800dfbe <__swsetup_r+0x82>
 800df64:	06dd      	lsls	r5, r3, #27
 800df66:	d411      	bmi.n	800df8c <__swsetup_r+0x50>
 800df68:	2309      	movs	r3, #9
 800df6a:	6033      	str	r3, [r6, #0]
 800df6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df70:	81a3      	strh	r3, [r4, #12]
 800df72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df76:	e03e      	b.n	800dff6 <__swsetup_r+0xba>
 800df78:	4b25      	ldr	r3, [pc, #148]	; (800e010 <__swsetup_r+0xd4>)
 800df7a:	429c      	cmp	r4, r3
 800df7c:	d101      	bne.n	800df82 <__swsetup_r+0x46>
 800df7e:	68ac      	ldr	r4, [r5, #8]
 800df80:	e7eb      	b.n	800df5a <__swsetup_r+0x1e>
 800df82:	4b24      	ldr	r3, [pc, #144]	; (800e014 <__swsetup_r+0xd8>)
 800df84:	429c      	cmp	r4, r3
 800df86:	bf08      	it	eq
 800df88:	68ec      	ldreq	r4, [r5, #12]
 800df8a:	e7e6      	b.n	800df5a <__swsetup_r+0x1e>
 800df8c:	0758      	lsls	r0, r3, #29
 800df8e:	d512      	bpl.n	800dfb6 <__swsetup_r+0x7a>
 800df90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df92:	b141      	cbz	r1, 800dfa6 <__swsetup_r+0x6a>
 800df94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df98:	4299      	cmp	r1, r3
 800df9a:	d002      	beq.n	800dfa2 <__swsetup_r+0x66>
 800df9c:	4630      	mov	r0, r6
 800df9e:	f000 fa59 	bl	800e454 <_free_r>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	6363      	str	r3, [r4, #52]	; 0x34
 800dfa6:	89a3      	ldrh	r3, [r4, #12]
 800dfa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfac:	81a3      	strh	r3, [r4, #12]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	6063      	str	r3, [r4, #4]
 800dfb2:	6923      	ldr	r3, [r4, #16]
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	89a3      	ldrh	r3, [r4, #12]
 800dfb8:	f043 0308 	orr.w	r3, r3, #8
 800dfbc:	81a3      	strh	r3, [r4, #12]
 800dfbe:	6923      	ldr	r3, [r4, #16]
 800dfc0:	b94b      	cbnz	r3, 800dfd6 <__swsetup_r+0x9a>
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfcc:	d003      	beq.n	800dfd6 <__swsetup_r+0x9a>
 800dfce:	4621      	mov	r1, r4
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f000 f9ff 	bl	800e3d4 <__smakebuf_r>
 800dfd6:	89a0      	ldrh	r0, [r4, #12]
 800dfd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfdc:	f010 0301 	ands.w	r3, r0, #1
 800dfe0:	d00a      	beq.n	800dff8 <__swsetup_r+0xbc>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	60a3      	str	r3, [r4, #8]
 800dfe6:	6963      	ldr	r3, [r4, #20]
 800dfe8:	425b      	negs	r3, r3
 800dfea:	61a3      	str	r3, [r4, #24]
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	b943      	cbnz	r3, 800e002 <__swsetup_r+0xc6>
 800dff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dff4:	d1ba      	bne.n	800df6c <__swsetup_r+0x30>
 800dff6:	bd70      	pop	{r4, r5, r6, pc}
 800dff8:	0781      	lsls	r1, r0, #30
 800dffa:	bf58      	it	pl
 800dffc:	6963      	ldrpl	r3, [r4, #20]
 800dffe:	60a3      	str	r3, [r4, #8]
 800e000:	e7f4      	b.n	800dfec <__swsetup_r+0xb0>
 800e002:	2000      	movs	r0, #0
 800e004:	e7f7      	b.n	800dff6 <__swsetup_r+0xba>
 800e006:	bf00      	nop
 800e008:	20000160 	.word	0x20000160
 800e00c:	08010440 	.word	0x08010440
 800e010:	08010460 	.word	0x08010460
 800e014:	08010420 	.word	0x08010420

0800e018 <__sflush_r>:
 800e018:	898a      	ldrh	r2, [r1, #12]
 800e01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01e:	4605      	mov	r5, r0
 800e020:	0710      	lsls	r0, r2, #28
 800e022:	460c      	mov	r4, r1
 800e024:	d458      	bmi.n	800e0d8 <__sflush_r+0xc0>
 800e026:	684b      	ldr	r3, [r1, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dc05      	bgt.n	800e038 <__sflush_r+0x20>
 800e02c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e02e:	2b00      	cmp	r3, #0
 800e030:	dc02      	bgt.n	800e038 <__sflush_r+0x20>
 800e032:	2000      	movs	r0, #0
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	d0f9      	beq.n	800e032 <__sflush_r+0x1a>
 800e03e:	2300      	movs	r3, #0
 800e040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e044:	682f      	ldr	r7, [r5, #0]
 800e046:	602b      	str	r3, [r5, #0]
 800e048:	d032      	beq.n	800e0b0 <__sflush_r+0x98>
 800e04a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	075a      	lsls	r2, r3, #29
 800e050:	d505      	bpl.n	800e05e <__sflush_r+0x46>
 800e052:	6863      	ldr	r3, [r4, #4]
 800e054:	1ac0      	subs	r0, r0, r3
 800e056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e058:	b10b      	cbz	r3, 800e05e <__sflush_r+0x46>
 800e05a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e05c:	1ac0      	subs	r0, r0, r3
 800e05e:	2300      	movs	r3, #0
 800e060:	4602      	mov	r2, r0
 800e062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e064:	6a21      	ldr	r1, [r4, #32]
 800e066:	4628      	mov	r0, r5
 800e068:	47b0      	blx	r6
 800e06a:	1c43      	adds	r3, r0, #1
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	d106      	bne.n	800e07e <__sflush_r+0x66>
 800e070:	6829      	ldr	r1, [r5, #0]
 800e072:	291d      	cmp	r1, #29
 800e074:	d82c      	bhi.n	800e0d0 <__sflush_r+0xb8>
 800e076:	4a2a      	ldr	r2, [pc, #168]	; (800e120 <__sflush_r+0x108>)
 800e078:	40ca      	lsrs	r2, r1
 800e07a:	07d6      	lsls	r6, r2, #31
 800e07c:	d528      	bpl.n	800e0d0 <__sflush_r+0xb8>
 800e07e:	2200      	movs	r2, #0
 800e080:	6062      	str	r2, [r4, #4]
 800e082:	04d9      	lsls	r1, r3, #19
 800e084:	6922      	ldr	r2, [r4, #16]
 800e086:	6022      	str	r2, [r4, #0]
 800e088:	d504      	bpl.n	800e094 <__sflush_r+0x7c>
 800e08a:	1c42      	adds	r2, r0, #1
 800e08c:	d101      	bne.n	800e092 <__sflush_r+0x7a>
 800e08e:	682b      	ldr	r3, [r5, #0]
 800e090:	b903      	cbnz	r3, 800e094 <__sflush_r+0x7c>
 800e092:	6560      	str	r0, [r4, #84]	; 0x54
 800e094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e096:	602f      	str	r7, [r5, #0]
 800e098:	2900      	cmp	r1, #0
 800e09a:	d0ca      	beq.n	800e032 <__sflush_r+0x1a>
 800e09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0a0:	4299      	cmp	r1, r3
 800e0a2:	d002      	beq.n	800e0aa <__sflush_r+0x92>
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f000 f9d5 	bl	800e454 <_free_r>
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	6360      	str	r0, [r4, #52]	; 0x34
 800e0ae:	e7c1      	b.n	800e034 <__sflush_r+0x1c>
 800e0b0:	6a21      	ldr	r1, [r4, #32]
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	47b0      	blx	r6
 800e0b8:	1c41      	adds	r1, r0, #1
 800e0ba:	d1c7      	bne.n	800e04c <__sflush_r+0x34>
 800e0bc:	682b      	ldr	r3, [r5, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0c4      	beq.n	800e04c <__sflush_r+0x34>
 800e0c2:	2b1d      	cmp	r3, #29
 800e0c4:	d001      	beq.n	800e0ca <__sflush_r+0xb2>
 800e0c6:	2b16      	cmp	r3, #22
 800e0c8:	d101      	bne.n	800e0ce <__sflush_r+0xb6>
 800e0ca:	602f      	str	r7, [r5, #0]
 800e0cc:	e7b1      	b.n	800e032 <__sflush_r+0x1a>
 800e0ce:	89a3      	ldrh	r3, [r4, #12]
 800e0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d4:	81a3      	strh	r3, [r4, #12]
 800e0d6:	e7ad      	b.n	800e034 <__sflush_r+0x1c>
 800e0d8:	690f      	ldr	r7, [r1, #16]
 800e0da:	2f00      	cmp	r7, #0
 800e0dc:	d0a9      	beq.n	800e032 <__sflush_r+0x1a>
 800e0de:	0793      	lsls	r3, r2, #30
 800e0e0:	680e      	ldr	r6, [r1, #0]
 800e0e2:	bf08      	it	eq
 800e0e4:	694b      	ldreq	r3, [r1, #20]
 800e0e6:	600f      	str	r7, [r1, #0]
 800e0e8:	bf18      	it	ne
 800e0ea:	2300      	movne	r3, #0
 800e0ec:	eba6 0807 	sub.w	r8, r6, r7
 800e0f0:	608b      	str	r3, [r1, #8]
 800e0f2:	f1b8 0f00 	cmp.w	r8, #0
 800e0f6:	dd9c      	ble.n	800e032 <__sflush_r+0x1a>
 800e0f8:	6a21      	ldr	r1, [r4, #32]
 800e0fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0fc:	4643      	mov	r3, r8
 800e0fe:	463a      	mov	r2, r7
 800e100:	4628      	mov	r0, r5
 800e102:	47b0      	blx	r6
 800e104:	2800      	cmp	r0, #0
 800e106:	dc06      	bgt.n	800e116 <__sflush_r+0xfe>
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10e:	81a3      	strh	r3, [r4, #12]
 800e110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e114:	e78e      	b.n	800e034 <__sflush_r+0x1c>
 800e116:	4407      	add	r7, r0
 800e118:	eba8 0800 	sub.w	r8, r8, r0
 800e11c:	e7e9      	b.n	800e0f2 <__sflush_r+0xda>
 800e11e:	bf00      	nop
 800e120:	20400001 	.word	0x20400001

0800e124 <_fflush_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	690b      	ldr	r3, [r1, #16]
 800e128:	4605      	mov	r5, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b913      	cbnz	r3, 800e134 <_fflush_r+0x10>
 800e12e:	2500      	movs	r5, #0
 800e130:	4628      	mov	r0, r5
 800e132:	bd38      	pop	{r3, r4, r5, pc}
 800e134:	b118      	cbz	r0, 800e13e <_fflush_r+0x1a>
 800e136:	6983      	ldr	r3, [r0, #24]
 800e138:	b90b      	cbnz	r3, 800e13e <_fflush_r+0x1a>
 800e13a:	f000 f887 	bl	800e24c <__sinit>
 800e13e:	4b14      	ldr	r3, [pc, #80]	; (800e190 <_fflush_r+0x6c>)
 800e140:	429c      	cmp	r4, r3
 800e142:	d11b      	bne.n	800e17c <_fflush_r+0x58>
 800e144:	686c      	ldr	r4, [r5, #4]
 800e146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0ef      	beq.n	800e12e <_fflush_r+0xa>
 800e14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e150:	07d0      	lsls	r0, r2, #31
 800e152:	d404      	bmi.n	800e15e <_fflush_r+0x3a>
 800e154:	0599      	lsls	r1, r3, #22
 800e156:	d402      	bmi.n	800e15e <_fflush_r+0x3a>
 800e158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e15a:	f000 f915 	bl	800e388 <__retarget_lock_acquire_recursive>
 800e15e:	4628      	mov	r0, r5
 800e160:	4621      	mov	r1, r4
 800e162:	f7ff ff59 	bl	800e018 <__sflush_r>
 800e166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e168:	07da      	lsls	r2, r3, #31
 800e16a:	4605      	mov	r5, r0
 800e16c:	d4e0      	bmi.n	800e130 <_fflush_r+0xc>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	059b      	lsls	r3, r3, #22
 800e172:	d4dd      	bmi.n	800e130 <_fflush_r+0xc>
 800e174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e176:	f000 f908 	bl	800e38a <__retarget_lock_release_recursive>
 800e17a:	e7d9      	b.n	800e130 <_fflush_r+0xc>
 800e17c:	4b05      	ldr	r3, [pc, #20]	; (800e194 <_fflush_r+0x70>)
 800e17e:	429c      	cmp	r4, r3
 800e180:	d101      	bne.n	800e186 <_fflush_r+0x62>
 800e182:	68ac      	ldr	r4, [r5, #8]
 800e184:	e7df      	b.n	800e146 <_fflush_r+0x22>
 800e186:	4b04      	ldr	r3, [pc, #16]	; (800e198 <_fflush_r+0x74>)
 800e188:	429c      	cmp	r4, r3
 800e18a:	bf08      	it	eq
 800e18c:	68ec      	ldreq	r4, [r5, #12]
 800e18e:	e7da      	b.n	800e146 <_fflush_r+0x22>
 800e190:	08010440 	.word	0x08010440
 800e194:	08010460 	.word	0x08010460
 800e198:	08010420 	.word	0x08010420

0800e19c <std>:
 800e19c:	2300      	movs	r3, #0
 800e19e:	b510      	push	{r4, lr}
 800e1a0:	4604      	mov	r4, r0
 800e1a2:	e9c0 3300 	strd	r3, r3, [r0]
 800e1a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1aa:	6083      	str	r3, [r0, #8]
 800e1ac:	8181      	strh	r1, [r0, #12]
 800e1ae:	6643      	str	r3, [r0, #100]	; 0x64
 800e1b0:	81c2      	strh	r2, [r0, #14]
 800e1b2:	6183      	str	r3, [r0, #24]
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	2208      	movs	r2, #8
 800e1b8:	305c      	adds	r0, #92	; 0x5c
 800e1ba:	f7ff fdb7 	bl	800dd2c <memset>
 800e1be:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <std+0x38>)
 800e1c0:	6263      	str	r3, [r4, #36]	; 0x24
 800e1c2:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <std+0x3c>)
 800e1c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1c6:	4b05      	ldr	r3, [pc, #20]	; (800e1dc <std+0x40>)
 800e1c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e1ca:	4b05      	ldr	r3, [pc, #20]	; (800e1e0 <std+0x44>)
 800e1cc:	6224      	str	r4, [r4, #32]
 800e1ce:	6323      	str	r3, [r4, #48]	; 0x30
 800e1d0:	bd10      	pop	{r4, pc}
 800e1d2:	bf00      	nop
 800e1d4:	0800ee5d 	.word	0x0800ee5d
 800e1d8:	0800ee7f 	.word	0x0800ee7f
 800e1dc:	0800eeb7 	.word	0x0800eeb7
 800e1e0:	0800eedb 	.word	0x0800eedb

0800e1e4 <_cleanup_r>:
 800e1e4:	4901      	ldr	r1, [pc, #4]	; (800e1ec <_cleanup_r+0x8>)
 800e1e6:	f000 b8af 	b.w	800e348 <_fwalk_reent>
 800e1ea:	bf00      	nop
 800e1ec:	0800e125 	.word	0x0800e125

0800e1f0 <__sfmoreglue>:
 800e1f0:	b570      	push	{r4, r5, r6, lr}
 800e1f2:	1e4a      	subs	r2, r1, #1
 800e1f4:	2568      	movs	r5, #104	; 0x68
 800e1f6:	4355      	muls	r5, r2
 800e1f8:	460e      	mov	r6, r1
 800e1fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1fe:	f000 f979 	bl	800e4f4 <_malloc_r>
 800e202:	4604      	mov	r4, r0
 800e204:	b140      	cbz	r0, 800e218 <__sfmoreglue+0x28>
 800e206:	2100      	movs	r1, #0
 800e208:	e9c0 1600 	strd	r1, r6, [r0]
 800e20c:	300c      	adds	r0, #12
 800e20e:	60a0      	str	r0, [r4, #8]
 800e210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e214:	f7ff fd8a 	bl	800dd2c <memset>
 800e218:	4620      	mov	r0, r4
 800e21a:	bd70      	pop	{r4, r5, r6, pc}

0800e21c <__sfp_lock_acquire>:
 800e21c:	4801      	ldr	r0, [pc, #4]	; (800e224 <__sfp_lock_acquire+0x8>)
 800e21e:	f000 b8b3 	b.w	800e388 <__retarget_lock_acquire_recursive>
 800e222:	bf00      	nop
 800e224:	20010088 	.word	0x20010088

0800e228 <__sfp_lock_release>:
 800e228:	4801      	ldr	r0, [pc, #4]	; (800e230 <__sfp_lock_release+0x8>)
 800e22a:	f000 b8ae 	b.w	800e38a <__retarget_lock_release_recursive>
 800e22e:	bf00      	nop
 800e230:	20010088 	.word	0x20010088

0800e234 <__sinit_lock_acquire>:
 800e234:	4801      	ldr	r0, [pc, #4]	; (800e23c <__sinit_lock_acquire+0x8>)
 800e236:	f000 b8a7 	b.w	800e388 <__retarget_lock_acquire_recursive>
 800e23a:	bf00      	nop
 800e23c:	20010083 	.word	0x20010083

0800e240 <__sinit_lock_release>:
 800e240:	4801      	ldr	r0, [pc, #4]	; (800e248 <__sinit_lock_release+0x8>)
 800e242:	f000 b8a2 	b.w	800e38a <__retarget_lock_release_recursive>
 800e246:	bf00      	nop
 800e248:	20010083 	.word	0x20010083

0800e24c <__sinit>:
 800e24c:	b510      	push	{r4, lr}
 800e24e:	4604      	mov	r4, r0
 800e250:	f7ff fff0 	bl	800e234 <__sinit_lock_acquire>
 800e254:	69a3      	ldr	r3, [r4, #24]
 800e256:	b11b      	cbz	r3, 800e260 <__sinit+0x14>
 800e258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e25c:	f7ff bff0 	b.w	800e240 <__sinit_lock_release>
 800e260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e264:	6523      	str	r3, [r4, #80]	; 0x50
 800e266:	4b13      	ldr	r3, [pc, #76]	; (800e2b4 <__sinit+0x68>)
 800e268:	4a13      	ldr	r2, [pc, #76]	; (800e2b8 <__sinit+0x6c>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e26e:	42a3      	cmp	r3, r4
 800e270:	bf04      	itt	eq
 800e272:	2301      	moveq	r3, #1
 800e274:	61a3      	streq	r3, [r4, #24]
 800e276:	4620      	mov	r0, r4
 800e278:	f000 f820 	bl	800e2bc <__sfp>
 800e27c:	6060      	str	r0, [r4, #4]
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 f81c 	bl	800e2bc <__sfp>
 800e284:	60a0      	str	r0, [r4, #8]
 800e286:	4620      	mov	r0, r4
 800e288:	f000 f818 	bl	800e2bc <__sfp>
 800e28c:	2200      	movs	r2, #0
 800e28e:	60e0      	str	r0, [r4, #12]
 800e290:	2104      	movs	r1, #4
 800e292:	6860      	ldr	r0, [r4, #4]
 800e294:	f7ff ff82 	bl	800e19c <std>
 800e298:	68a0      	ldr	r0, [r4, #8]
 800e29a:	2201      	movs	r2, #1
 800e29c:	2109      	movs	r1, #9
 800e29e:	f7ff ff7d 	bl	800e19c <std>
 800e2a2:	68e0      	ldr	r0, [r4, #12]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	2112      	movs	r1, #18
 800e2a8:	f7ff ff78 	bl	800e19c <std>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	61a3      	str	r3, [r4, #24]
 800e2b0:	e7d2      	b.n	800e258 <__sinit+0xc>
 800e2b2:	bf00      	nop
 800e2b4:	0801041c 	.word	0x0801041c
 800e2b8:	0800e1e5 	.word	0x0800e1e5

0800e2bc <__sfp>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	4607      	mov	r7, r0
 800e2c0:	f7ff ffac 	bl	800e21c <__sfp_lock_acquire>
 800e2c4:	4b1e      	ldr	r3, [pc, #120]	; (800e340 <__sfp+0x84>)
 800e2c6:	681e      	ldr	r6, [r3, #0]
 800e2c8:	69b3      	ldr	r3, [r6, #24]
 800e2ca:	b913      	cbnz	r3, 800e2d2 <__sfp+0x16>
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f7ff ffbd 	bl	800e24c <__sinit>
 800e2d2:	3648      	adds	r6, #72	; 0x48
 800e2d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	d503      	bpl.n	800e2e4 <__sfp+0x28>
 800e2dc:	6833      	ldr	r3, [r6, #0]
 800e2de:	b30b      	cbz	r3, 800e324 <__sfp+0x68>
 800e2e0:	6836      	ldr	r6, [r6, #0]
 800e2e2:	e7f7      	b.n	800e2d4 <__sfp+0x18>
 800e2e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2e8:	b9d5      	cbnz	r5, 800e320 <__sfp+0x64>
 800e2ea:	4b16      	ldr	r3, [pc, #88]	; (800e344 <__sfp+0x88>)
 800e2ec:	60e3      	str	r3, [r4, #12]
 800e2ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2f2:	6665      	str	r5, [r4, #100]	; 0x64
 800e2f4:	f000 f847 	bl	800e386 <__retarget_lock_init_recursive>
 800e2f8:	f7ff ff96 	bl	800e228 <__sfp_lock_release>
 800e2fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e304:	6025      	str	r5, [r4, #0]
 800e306:	61a5      	str	r5, [r4, #24]
 800e308:	2208      	movs	r2, #8
 800e30a:	4629      	mov	r1, r5
 800e30c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e310:	f7ff fd0c 	bl	800dd2c <memset>
 800e314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e31c:	4620      	mov	r0, r4
 800e31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e320:	3468      	adds	r4, #104	; 0x68
 800e322:	e7d9      	b.n	800e2d8 <__sfp+0x1c>
 800e324:	2104      	movs	r1, #4
 800e326:	4638      	mov	r0, r7
 800e328:	f7ff ff62 	bl	800e1f0 <__sfmoreglue>
 800e32c:	4604      	mov	r4, r0
 800e32e:	6030      	str	r0, [r6, #0]
 800e330:	2800      	cmp	r0, #0
 800e332:	d1d5      	bne.n	800e2e0 <__sfp+0x24>
 800e334:	f7ff ff78 	bl	800e228 <__sfp_lock_release>
 800e338:	230c      	movs	r3, #12
 800e33a:	603b      	str	r3, [r7, #0]
 800e33c:	e7ee      	b.n	800e31c <__sfp+0x60>
 800e33e:	bf00      	nop
 800e340:	0801041c 	.word	0x0801041c
 800e344:	ffff0001 	.word	0xffff0001

0800e348 <_fwalk_reent>:
 800e348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e34c:	4606      	mov	r6, r0
 800e34e:	4688      	mov	r8, r1
 800e350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e354:	2700      	movs	r7, #0
 800e356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e35a:	f1b9 0901 	subs.w	r9, r9, #1
 800e35e:	d505      	bpl.n	800e36c <_fwalk_reent+0x24>
 800e360:	6824      	ldr	r4, [r4, #0]
 800e362:	2c00      	cmp	r4, #0
 800e364:	d1f7      	bne.n	800e356 <_fwalk_reent+0xe>
 800e366:	4638      	mov	r0, r7
 800e368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e36c:	89ab      	ldrh	r3, [r5, #12]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d907      	bls.n	800e382 <_fwalk_reent+0x3a>
 800e372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e376:	3301      	adds	r3, #1
 800e378:	d003      	beq.n	800e382 <_fwalk_reent+0x3a>
 800e37a:	4629      	mov	r1, r5
 800e37c:	4630      	mov	r0, r6
 800e37e:	47c0      	blx	r8
 800e380:	4307      	orrs	r7, r0
 800e382:	3568      	adds	r5, #104	; 0x68
 800e384:	e7e9      	b.n	800e35a <_fwalk_reent+0x12>

0800e386 <__retarget_lock_init_recursive>:
 800e386:	4770      	bx	lr

0800e388 <__retarget_lock_acquire_recursive>:
 800e388:	4770      	bx	lr

0800e38a <__retarget_lock_release_recursive>:
 800e38a:	4770      	bx	lr

0800e38c <__swhatbuf_r>:
 800e38c:	b570      	push	{r4, r5, r6, lr}
 800e38e:	460e      	mov	r6, r1
 800e390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e394:	2900      	cmp	r1, #0
 800e396:	b096      	sub	sp, #88	; 0x58
 800e398:	4614      	mov	r4, r2
 800e39a:	461d      	mov	r5, r3
 800e39c:	da07      	bge.n	800e3ae <__swhatbuf_r+0x22>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	602b      	str	r3, [r5, #0]
 800e3a2:	89b3      	ldrh	r3, [r6, #12]
 800e3a4:	061a      	lsls	r2, r3, #24
 800e3a6:	d410      	bmi.n	800e3ca <__swhatbuf_r+0x3e>
 800e3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ac:	e00e      	b.n	800e3cc <__swhatbuf_r+0x40>
 800e3ae:	466a      	mov	r2, sp
 800e3b0:	f000 fdba 	bl	800ef28 <_fstat_r>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	dbf2      	blt.n	800e39e <__swhatbuf_r+0x12>
 800e3b8:	9a01      	ldr	r2, [sp, #4]
 800e3ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3c2:	425a      	negs	r2, r3
 800e3c4:	415a      	adcs	r2, r3
 800e3c6:	602a      	str	r2, [r5, #0]
 800e3c8:	e7ee      	b.n	800e3a8 <__swhatbuf_r+0x1c>
 800e3ca:	2340      	movs	r3, #64	; 0x40
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	6023      	str	r3, [r4, #0]
 800e3d0:	b016      	add	sp, #88	; 0x58
 800e3d2:	bd70      	pop	{r4, r5, r6, pc}

0800e3d4 <__smakebuf_r>:
 800e3d4:	898b      	ldrh	r3, [r1, #12]
 800e3d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3d8:	079d      	lsls	r5, r3, #30
 800e3da:	4606      	mov	r6, r0
 800e3dc:	460c      	mov	r4, r1
 800e3de:	d507      	bpl.n	800e3f0 <__smakebuf_r+0x1c>
 800e3e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	6123      	str	r3, [r4, #16]
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	6163      	str	r3, [r4, #20]
 800e3ec:	b002      	add	sp, #8
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	ab01      	add	r3, sp, #4
 800e3f2:	466a      	mov	r2, sp
 800e3f4:	f7ff ffca 	bl	800e38c <__swhatbuf_r>
 800e3f8:	9900      	ldr	r1, [sp, #0]
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f000 f879 	bl	800e4f4 <_malloc_r>
 800e402:	b948      	cbnz	r0, 800e418 <__smakebuf_r+0x44>
 800e404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e408:	059a      	lsls	r2, r3, #22
 800e40a:	d4ef      	bmi.n	800e3ec <__smakebuf_r+0x18>
 800e40c:	f023 0303 	bic.w	r3, r3, #3
 800e410:	f043 0302 	orr.w	r3, r3, #2
 800e414:	81a3      	strh	r3, [r4, #12]
 800e416:	e7e3      	b.n	800e3e0 <__smakebuf_r+0xc>
 800e418:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <__smakebuf_r+0x7c>)
 800e41a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	6020      	str	r0, [r4, #0]
 800e420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e424:	81a3      	strh	r3, [r4, #12]
 800e426:	9b00      	ldr	r3, [sp, #0]
 800e428:	6163      	str	r3, [r4, #20]
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	6120      	str	r0, [r4, #16]
 800e42e:	b15b      	cbz	r3, 800e448 <__smakebuf_r+0x74>
 800e430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e434:	4630      	mov	r0, r6
 800e436:	f000 fd89 	bl	800ef4c <_isatty_r>
 800e43a:	b128      	cbz	r0, 800e448 <__smakebuf_r+0x74>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f023 0303 	bic.w	r3, r3, #3
 800e442:	f043 0301 	orr.w	r3, r3, #1
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	89a0      	ldrh	r0, [r4, #12]
 800e44a:	4305      	orrs	r5, r0
 800e44c:	81a5      	strh	r5, [r4, #12]
 800e44e:	e7cd      	b.n	800e3ec <__smakebuf_r+0x18>
 800e450:	0800e1e5 	.word	0x0800e1e5

0800e454 <_free_r>:
 800e454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e456:	2900      	cmp	r1, #0
 800e458:	d048      	beq.n	800e4ec <_free_r+0x98>
 800e45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e45e:	9001      	str	r0, [sp, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	f1a1 0404 	sub.w	r4, r1, #4
 800e466:	bfb8      	it	lt
 800e468:	18e4      	addlt	r4, r4, r3
 800e46a:	f000 fdab 	bl	800efc4 <__malloc_lock>
 800e46e:	4a20      	ldr	r2, [pc, #128]	; (800e4f0 <_free_r+0x9c>)
 800e470:	9801      	ldr	r0, [sp, #4]
 800e472:	6813      	ldr	r3, [r2, #0]
 800e474:	4615      	mov	r5, r2
 800e476:	b933      	cbnz	r3, 800e486 <_free_r+0x32>
 800e478:	6063      	str	r3, [r4, #4]
 800e47a:	6014      	str	r4, [r2, #0]
 800e47c:	b003      	add	sp, #12
 800e47e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e482:	f000 bda5 	b.w	800efd0 <__malloc_unlock>
 800e486:	42a3      	cmp	r3, r4
 800e488:	d90b      	bls.n	800e4a2 <_free_r+0x4e>
 800e48a:	6821      	ldr	r1, [r4, #0]
 800e48c:	1862      	adds	r2, r4, r1
 800e48e:	4293      	cmp	r3, r2
 800e490:	bf04      	itt	eq
 800e492:	681a      	ldreq	r2, [r3, #0]
 800e494:	685b      	ldreq	r3, [r3, #4]
 800e496:	6063      	str	r3, [r4, #4]
 800e498:	bf04      	itt	eq
 800e49a:	1852      	addeq	r2, r2, r1
 800e49c:	6022      	streq	r2, [r4, #0]
 800e49e:	602c      	str	r4, [r5, #0]
 800e4a0:	e7ec      	b.n	800e47c <_free_r+0x28>
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	b10b      	cbz	r3, 800e4ac <_free_r+0x58>
 800e4a8:	42a3      	cmp	r3, r4
 800e4aa:	d9fa      	bls.n	800e4a2 <_free_r+0x4e>
 800e4ac:	6811      	ldr	r1, [r2, #0]
 800e4ae:	1855      	adds	r5, r2, r1
 800e4b0:	42a5      	cmp	r5, r4
 800e4b2:	d10b      	bne.n	800e4cc <_free_r+0x78>
 800e4b4:	6824      	ldr	r4, [r4, #0]
 800e4b6:	4421      	add	r1, r4
 800e4b8:	1854      	adds	r4, r2, r1
 800e4ba:	42a3      	cmp	r3, r4
 800e4bc:	6011      	str	r1, [r2, #0]
 800e4be:	d1dd      	bne.n	800e47c <_free_r+0x28>
 800e4c0:	681c      	ldr	r4, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	6053      	str	r3, [r2, #4]
 800e4c6:	4421      	add	r1, r4
 800e4c8:	6011      	str	r1, [r2, #0]
 800e4ca:	e7d7      	b.n	800e47c <_free_r+0x28>
 800e4cc:	d902      	bls.n	800e4d4 <_free_r+0x80>
 800e4ce:	230c      	movs	r3, #12
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	e7d3      	b.n	800e47c <_free_r+0x28>
 800e4d4:	6825      	ldr	r5, [r4, #0]
 800e4d6:	1961      	adds	r1, r4, r5
 800e4d8:	428b      	cmp	r3, r1
 800e4da:	bf04      	itt	eq
 800e4dc:	6819      	ldreq	r1, [r3, #0]
 800e4de:	685b      	ldreq	r3, [r3, #4]
 800e4e0:	6063      	str	r3, [r4, #4]
 800e4e2:	bf04      	itt	eq
 800e4e4:	1949      	addeq	r1, r1, r5
 800e4e6:	6021      	streq	r1, [r4, #0]
 800e4e8:	6054      	str	r4, [r2, #4]
 800e4ea:	e7c7      	b.n	800e47c <_free_r+0x28>
 800e4ec:	b003      	add	sp, #12
 800e4ee:	bd30      	pop	{r4, r5, pc}
 800e4f0:	2000365c 	.word	0x2000365c

0800e4f4 <_malloc_r>:
 800e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f6:	1ccd      	adds	r5, r1, #3
 800e4f8:	f025 0503 	bic.w	r5, r5, #3
 800e4fc:	3508      	adds	r5, #8
 800e4fe:	2d0c      	cmp	r5, #12
 800e500:	bf38      	it	cc
 800e502:	250c      	movcc	r5, #12
 800e504:	2d00      	cmp	r5, #0
 800e506:	4606      	mov	r6, r0
 800e508:	db01      	blt.n	800e50e <_malloc_r+0x1a>
 800e50a:	42a9      	cmp	r1, r5
 800e50c:	d903      	bls.n	800e516 <_malloc_r+0x22>
 800e50e:	230c      	movs	r3, #12
 800e510:	6033      	str	r3, [r6, #0]
 800e512:	2000      	movs	r0, #0
 800e514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e516:	f000 fd55 	bl	800efc4 <__malloc_lock>
 800e51a:	4921      	ldr	r1, [pc, #132]	; (800e5a0 <_malloc_r+0xac>)
 800e51c:	680a      	ldr	r2, [r1, #0]
 800e51e:	4614      	mov	r4, r2
 800e520:	b99c      	cbnz	r4, 800e54a <_malloc_r+0x56>
 800e522:	4f20      	ldr	r7, [pc, #128]	; (800e5a4 <_malloc_r+0xb0>)
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	b923      	cbnz	r3, 800e532 <_malloc_r+0x3e>
 800e528:	4621      	mov	r1, r4
 800e52a:	4630      	mov	r0, r6
 800e52c:	f000 fc86 	bl	800ee3c <_sbrk_r>
 800e530:	6038      	str	r0, [r7, #0]
 800e532:	4629      	mov	r1, r5
 800e534:	4630      	mov	r0, r6
 800e536:	f000 fc81 	bl	800ee3c <_sbrk_r>
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	d123      	bne.n	800e586 <_malloc_r+0x92>
 800e53e:	230c      	movs	r3, #12
 800e540:	6033      	str	r3, [r6, #0]
 800e542:	4630      	mov	r0, r6
 800e544:	f000 fd44 	bl	800efd0 <__malloc_unlock>
 800e548:	e7e3      	b.n	800e512 <_malloc_r+0x1e>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	1b5b      	subs	r3, r3, r5
 800e54e:	d417      	bmi.n	800e580 <_malloc_r+0x8c>
 800e550:	2b0b      	cmp	r3, #11
 800e552:	d903      	bls.n	800e55c <_malloc_r+0x68>
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	441c      	add	r4, r3
 800e558:	6025      	str	r5, [r4, #0]
 800e55a:	e004      	b.n	800e566 <_malloc_r+0x72>
 800e55c:	6863      	ldr	r3, [r4, #4]
 800e55e:	42a2      	cmp	r2, r4
 800e560:	bf0c      	ite	eq
 800e562:	600b      	streq	r3, [r1, #0]
 800e564:	6053      	strne	r3, [r2, #4]
 800e566:	4630      	mov	r0, r6
 800e568:	f000 fd32 	bl	800efd0 <__malloc_unlock>
 800e56c:	f104 000b 	add.w	r0, r4, #11
 800e570:	1d23      	adds	r3, r4, #4
 800e572:	f020 0007 	bic.w	r0, r0, #7
 800e576:	1ac2      	subs	r2, r0, r3
 800e578:	d0cc      	beq.n	800e514 <_malloc_r+0x20>
 800e57a:	1a1b      	subs	r3, r3, r0
 800e57c:	50a3      	str	r3, [r4, r2]
 800e57e:	e7c9      	b.n	800e514 <_malloc_r+0x20>
 800e580:	4622      	mov	r2, r4
 800e582:	6864      	ldr	r4, [r4, #4]
 800e584:	e7cc      	b.n	800e520 <_malloc_r+0x2c>
 800e586:	1cc4      	adds	r4, r0, #3
 800e588:	f024 0403 	bic.w	r4, r4, #3
 800e58c:	42a0      	cmp	r0, r4
 800e58e:	d0e3      	beq.n	800e558 <_malloc_r+0x64>
 800e590:	1a21      	subs	r1, r4, r0
 800e592:	4630      	mov	r0, r6
 800e594:	f000 fc52 	bl	800ee3c <_sbrk_r>
 800e598:	3001      	adds	r0, #1
 800e59a:	d1dd      	bne.n	800e558 <_malloc_r+0x64>
 800e59c:	e7cf      	b.n	800e53e <_malloc_r+0x4a>
 800e59e:	bf00      	nop
 800e5a0:	2000365c 	.word	0x2000365c
 800e5a4:	20003660 	.word	0x20003660

0800e5a8 <__ssputs_r>:
 800e5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ac:	688e      	ldr	r6, [r1, #8]
 800e5ae:	429e      	cmp	r6, r3
 800e5b0:	4682      	mov	sl, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	4690      	mov	r8, r2
 800e5b6:	461f      	mov	r7, r3
 800e5b8:	d838      	bhi.n	800e62c <__ssputs_r+0x84>
 800e5ba:	898a      	ldrh	r2, [r1, #12]
 800e5bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e5c0:	d032      	beq.n	800e628 <__ssputs_r+0x80>
 800e5c2:	6825      	ldr	r5, [r4, #0]
 800e5c4:	6909      	ldr	r1, [r1, #16]
 800e5c6:	eba5 0901 	sub.w	r9, r5, r1
 800e5ca:	6965      	ldr	r5, [r4, #20]
 800e5cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e5d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	444b      	add	r3, r9
 800e5d8:	106d      	asrs	r5, r5, #1
 800e5da:	429d      	cmp	r5, r3
 800e5dc:	bf38      	it	cc
 800e5de:	461d      	movcc	r5, r3
 800e5e0:	0553      	lsls	r3, r2, #21
 800e5e2:	d531      	bpl.n	800e648 <__ssputs_r+0xa0>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7ff ff85 	bl	800e4f4 <_malloc_r>
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	b950      	cbnz	r0, 800e604 <__ssputs_r+0x5c>
 800e5ee:	230c      	movs	r3, #12
 800e5f0:	f8ca 3000 	str.w	r3, [sl]
 800e5f4:	89a3      	ldrh	r3, [r4, #12]
 800e5f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5fa:	81a3      	strh	r3, [r4, #12]
 800e5fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e604:	6921      	ldr	r1, [r4, #16]
 800e606:	464a      	mov	r2, r9
 800e608:	f7ff fb82 	bl	800dd10 <memcpy>
 800e60c:	89a3      	ldrh	r3, [r4, #12]
 800e60e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e616:	81a3      	strh	r3, [r4, #12]
 800e618:	6126      	str	r6, [r4, #16]
 800e61a:	6165      	str	r5, [r4, #20]
 800e61c:	444e      	add	r6, r9
 800e61e:	eba5 0509 	sub.w	r5, r5, r9
 800e622:	6026      	str	r6, [r4, #0]
 800e624:	60a5      	str	r5, [r4, #8]
 800e626:	463e      	mov	r6, r7
 800e628:	42be      	cmp	r6, r7
 800e62a:	d900      	bls.n	800e62e <__ssputs_r+0x86>
 800e62c:	463e      	mov	r6, r7
 800e62e:	4632      	mov	r2, r6
 800e630:	6820      	ldr	r0, [r4, #0]
 800e632:	4641      	mov	r1, r8
 800e634:	f000 fcac 	bl	800ef90 <memmove>
 800e638:	68a3      	ldr	r3, [r4, #8]
 800e63a:	6822      	ldr	r2, [r4, #0]
 800e63c:	1b9b      	subs	r3, r3, r6
 800e63e:	4432      	add	r2, r6
 800e640:	60a3      	str	r3, [r4, #8]
 800e642:	6022      	str	r2, [r4, #0]
 800e644:	2000      	movs	r0, #0
 800e646:	e7db      	b.n	800e600 <__ssputs_r+0x58>
 800e648:	462a      	mov	r2, r5
 800e64a:	f000 fcc7 	bl	800efdc <_realloc_r>
 800e64e:	4606      	mov	r6, r0
 800e650:	2800      	cmp	r0, #0
 800e652:	d1e1      	bne.n	800e618 <__ssputs_r+0x70>
 800e654:	6921      	ldr	r1, [r4, #16]
 800e656:	4650      	mov	r0, sl
 800e658:	f7ff fefc 	bl	800e454 <_free_r>
 800e65c:	e7c7      	b.n	800e5ee <__ssputs_r+0x46>
	...

0800e660 <_svfiprintf_r>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	4698      	mov	r8, r3
 800e666:	898b      	ldrh	r3, [r1, #12]
 800e668:	061b      	lsls	r3, r3, #24
 800e66a:	b09d      	sub	sp, #116	; 0x74
 800e66c:	4607      	mov	r7, r0
 800e66e:	460d      	mov	r5, r1
 800e670:	4614      	mov	r4, r2
 800e672:	d50e      	bpl.n	800e692 <_svfiprintf_r+0x32>
 800e674:	690b      	ldr	r3, [r1, #16]
 800e676:	b963      	cbnz	r3, 800e692 <_svfiprintf_r+0x32>
 800e678:	2140      	movs	r1, #64	; 0x40
 800e67a:	f7ff ff3b 	bl	800e4f4 <_malloc_r>
 800e67e:	6028      	str	r0, [r5, #0]
 800e680:	6128      	str	r0, [r5, #16]
 800e682:	b920      	cbnz	r0, 800e68e <_svfiprintf_r+0x2e>
 800e684:	230c      	movs	r3, #12
 800e686:	603b      	str	r3, [r7, #0]
 800e688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e68c:	e0d1      	b.n	800e832 <_svfiprintf_r+0x1d2>
 800e68e:	2340      	movs	r3, #64	; 0x40
 800e690:	616b      	str	r3, [r5, #20]
 800e692:	2300      	movs	r3, #0
 800e694:	9309      	str	r3, [sp, #36]	; 0x24
 800e696:	2320      	movs	r3, #32
 800e698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6a0:	2330      	movs	r3, #48	; 0x30
 800e6a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e84c <_svfiprintf_r+0x1ec>
 800e6a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6aa:	f04f 0901 	mov.w	r9, #1
 800e6ae:	4623      	mov	r3, r4
 800e6b0:	469a      	mov	sl, r3
 800e6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6b6:	b10a      	cbz	r2, 800e6bc <_svfiprintf_r+0x5c>
 800e6b8:	2a25      	cmp	r2, #37	; 0x25
 800e6ba:	d1f9      	bne.n	800e6b0 <_svfiprintf_r+0x50>
 800e6bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e6c0:	d00b      	beq.n	800e6da <_svfiprintf_r+0x7a>
 800e6c2:	465b      	mov	r3, fp
 800e6c4:	4622      	mov	r2, r4
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	f7ff ff6d 	bl	800e5a8 <__ssputs_r>
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	f000 80aa 	beq.w	800e828 <_svfiprintf_r+0x1c8>
 800e6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6d6:	445a      	add	r2, fp
 800e6d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e6da:	f89a 3000 	ldrb.w	r3, [sl]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f000 80a2 	beq.w	800e828 <_svfiprintf_r+0x1c8>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6ee:	f10a 0a01 	add.w	sl, sl, #1
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	9307      	str	r3, [sp, #28]
 800e6f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e6fc:	4654      	mov	r4, sl
 800e6fe:	2205      	movs	r2, #5
 800e700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e704:	4851      	ldr	r0, [pc, #324]	; (800e84c <_svfiprintf_r+0x1ec>)
 800e706:	f7f1 fd63 	bl	80001d0 <memchr>
 800e70a:	9a04      	ldr	r2, [sp, #16]
 800e70c:	b9d8      	cbnz	r0, 800e746 <_svfiprintf_r+0xe6>
 800e70e:	06d0      	lsls	r0, r2, #27
 800e710:	bf44      	itt	mi
 800e712:	2320      	movmi	r3, #32
 800e714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e718:	0711      	lsls	r1, r2, #28
 800e71a:	bf44      	itt	mi
 800e71c:	232b      	movmi	r3, #43	; 0x2b
 800e71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e722:	f89a 3000 	ldrb.w	r3, [sl]
 800e726:	2b2a      	cmp	r3, #42	; 0x2a
 800e728:	d015      	beq.n	800e756 <_svfiprintf_r+0xf6>
 800e72a:	9a07      	ldr	r2, [sp, #28]
 800e72c:	4654      	mov	r4, sl
 800e72e:	2000      	movs	r0, #0
 800e730:	f04f 0c0a 	mov.w	ip, #10
 800e734:	4621      	mov	r1, r4
 800e736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e73a:	3b30      	subs	r3, #48	; 0x30
 800e73c:	2b09      	cmp	r3, #9
 800e73e:	d94e      	bls.n	800e7de <_svfiprintf_r+0x17e>
 800e740:	b1b0      	cbz	r0, 800e770 <_svfiprintf_r+0x110>
 800e742:	9207      	str	r2, [sp, #28]
 800e744:	e014      	b.n	800e770 <_svfiprintf_r+0x110>
 800e746:	eba0 0308 	sub.w	r3, r0, r8
 800e74a:	fa09 f303 	lsl.w	r3, r9, r3
 800e74e:	4313      	orrs	r3, r2
 800e750:	9304      	str	r3, [sp, #16]
 800e752:	46a2      	mov	sl, r4
 800e754:	e7d2      	b.n	800e6fc <_svfiprintf_r+0x9c>
 800e756:	9b03      	ldr	r3, [sp, #12]
 800e758:	1d19      	adds	r1, r3, #4
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	9103      	str	r1, [sp, #12]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	bfbb      	ittet	lt
 800e762:	425b      	neglt	r3, r3
 800e764:	f042 0202 	orrlt.w	r2, r2, #2
 800e768:	9307      	strge	r3, [sp, #28]
 800e76a:	9307      	strlt	r3, [sp, #28]
 800e76c:	bfb8      	it	lt
 800e76e:	9204      	strlt	r2, [sp, #16]
 800e770:	7823      	ldrb	r3, [r4, #0]
 800e772:	2b2e      	cmp	r3, #46	; 0x2e
 800e774:	d10c      	bne.n	800e790 <_svfiprintf_r+0x130>
 800e776:	7863      	ldrb	r3, [r4, #1]
 800e778:	2b2a      	cmp	r3, #42	; 0x2a
 800e77a:	d135      	bne.n	800e7e8 <_svfiprintf_r+0x188>
 800e77c:	9b03      	ldr	r3, [sp, #12]
 800e77e:	1d1a      	adds	r2, r3, #4
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	9203      	str	r2, [sp, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	bfb8      	it	lt
 800e788:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e78c:	3402      	adds	r4, #2
 800e78e:	9305      	str	r3, [sp, #20]
 800e790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e85c <_svfiprintf_r+0x1fc>
 800e794:	7821      	ldrb	r1, [r4, #0]
 800e796:	2203      	movs	r2, #3
 800e798:	4650      	mov	r0, sl
 800e79a:	f7f1 fd19 	bl	80001d0 <memchr>
 800e79e:	b140      	cbz	r0, 800e7b2 <_svfiprintf_r+0x152>
 800e7a0:	2340      	movs	r3, #64	; 0x40
 800e7a2:	eba0 000a 	sub.w	r0, r0, sl
 800e7a6:	fa03 f000 	lsl.w	r0, r3, r0
 800e7aa:	9b04      	ldr	r3, [sp, #16]
 800e7ac:	4303      	orrs	r3, r0
 800e7ae:	3401      	adds	r4, #1
 800e7b0:	9304      	str	r3, [sp, #16]
 800e7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7b6:	4826      	ldr	r0, [pc, #152]	; (800e850 <_svfiprintf_r+0x1f0>)
 800e7b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7bc:	2206      	movs	r2, #6
 800e7be:	f7f1 fd07 	bl	80001d0 <memchr>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d038      	beq.n	800e838 <_svfiprintf_r+0x1d8>
 800e7c6:	4b23      	ldr	r3, [pc, #140]	; (800e854 <_svfiprintf_r+0x1f4>)
 800e7c8:	bb1b      	cbnz	r3, 800e812 <_svfiprintf_r+0x1b2>
 800e7ca:	9b03      	ldr	r3, [sp, #12]
 800e7cc:	3307      	adds	r3, #7
 800e7ce:	f023 0307 	bic.w	r3, r3, #7
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	9303      	str	r3, [sp, #12]
 800e7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7d8:	4433      	add	r3, r6
 800e7da:	9309      	str	r3, [sp, #36]	; 0x24
 800e7dc:	e767      	b.n	800e6ae <_svfiprintf_r+0x4e>
 800e7de:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	e7a5      	b.n	800e734 <_svfiprintf_r+0xd4>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	3401      	adds	r4, #1
 800e7ec:	9305      	str	r3, [sp, #20]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	f04f 0c0a 	mov.w	ip, #10
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7fa:	3a30      	subs	r2, #48	; 0x30
 800e7fc:	2a09      	cmp	r2, #9
 800e7fe:	d903      	bls.n	800e808 <_svfiprintf_r+0x1a8>
 800e800:	2b00      	cmp	r3, #0
 800e802:	d0c5      	beq.n	800e790 <_svfiprintf_r+0x130>
 800e804:	9105      	str	r1, [sp, #20]
 800e806:	e7c3      	b.n	800e790 <_svfiprintf_r+0x130>
 800e808:	fb0c 2101 	mla	r1, ip, r1, r2
 800e80c:	4604      	mov	r4, r0
 800e80e:	2301      	movs	r3, #1
 800e810:	e7f0      	b.n	800e7f4 <_svfiprintf_r+0x194>
 800e812:	ab03      	add	r3, sp, #12
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	462a      	mov	r2, r5
 800e818:	4b0f      	ldr	r3, [pc, #60]	; (800e858 <_svfiprintf_r+0x1f8>)
 800e81a:	a904      	add	r1, sp, #16
 800e81c:	4638      	mov	r0, r7
 800e81e:	f3af 8000 	nop.w
 800e822:	1c42      	adds	r2, r0, #1
 800e824:	4606      	mov	r6, r0
 800e826:	d1d6      	bne.n	800e7d6 <_svfiprintf_r+0x176>
 800e828:	89ab      	ldrh	r3, [r5, #12]
 800e82a:	065b      	lsls	r3, r3, #25
 800e82c:	f53f af2c 	bmi.w	800e688 <_svfiprintf_r+0x28>
 800e830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e832:	b01d      	add	sp, #116	; 0x74
 800e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e838:	ab03      	add	r3, sp, #12
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	462a      	mov	r2, r5
 800e83e:	4b06      	ldr	r3, [pc, #24]	; (800e858 <_svfiprintf_r+0x1f8>)
 800e840:	a904      	add	r1, sp, #16
 800e842:	4638      	mov	r0, r7
 800e844:	f000 f9d4 	bl	800ebf0 <_printf_i>
 800e848:	e7eb      	b.n	800e822 <_svfiprintf_r+0x1c2>
 800e84a:	bf00      	nop
 800e84c:	08010480 	.word	0x08010480
 800e850:	0801048a 	.word	0x0801048a
 800e854:	00000000 	.word	0x00000000
 800e858:	0800e5a9 	.word	0x0800e5a9
 800e85c:	08010486 	.word	0x08010486

0800e860 <__sfputc_r>:
 800e860:	6893      	ldr	r3, [r2, #8]
 800e862:	3b01      	subs	r3, #1
 800e864:	2b00      	cmp	r3, #0
 800e866:	b410      	push	{r4}
 800e868:	6093      	str	r3, [r2, #8]
 800e86a:	da08      	bge.n	800e87e <__sfputc_r+0x1e>
 800e86c:	6994      	ldr	r4, [r2, #24]
 800e86e:	42a3      	cmp	r3, r4
 800e870:	db01      	blt.n	800e876 <__sfputc_r+0x16>
 800e872:	290a      	cmp	r1, #10
 800e874:	d103      	bne.n	800e87e <__sfputc_r+0x1e>
 800e876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e87a:	f7ff bb0d 	b.w	800de98 <__swbuf_r>
 800e87e:	6813      	ldr	r3, [r2, #0]
 800e880:	1c58      	adds	r0, r3, #1
 800e882:	6010      	str	r0, [r2, #0]
 800e884:	7019      	strb	r1, [r3, #0]
 800e886:	4608      	mov	r0, r1
 800e888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88c:	4770      	bx	lr

0800e88e <__sfputs_r>:
 800e88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e890:	4606      	mov	r6, r0
 800e892:	460f      	mov	r7, r1
 800e894:	4614      	mov	r4, r2
 800e896:	18d5      	adds	r5, r2, r3
 800e898:	42ac      	cmp	r4, r5
 800e89a:	d101      	bne.n	800e8a0 <__sfputs_r+0x12>
 800e89c:	2000      	movs	r0, #0
 800e89e:	e007      	b.n	800e8b0 <__sfputs_r+0x22>
 800e8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8a4:	463a      	mov	r2, r7
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f7ff ffda 	bl	800e860 <__sfputc_r>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d1f3      	bne.n	800e898 <__sfputs_r+0xa>
 800e8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8b4 <_vfiprintf_r>:
 800e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	b09d      	sub	sp, #116	; 0x74
 800e8bc:	4614      	mov	r4, r2
 800e8be:	4698      	mov	r8, r3
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	b118      	cbz	r0, 800e8cc <_vfiprintf_r+0x18>
 800e8c4:	6983      	ldr	r3, [r0, #24]
 800e8c6:	b90b      	cbnz	r3, 800e8cc <_vfiprintf_r+0x18>
 800e8c8:	f7ff fcc0 	bl	800e24c <__sinit>
 800e8cc:	4b89      	ldr	r3, [pc, #548]	; (800eaf4 <_vfiprintf_r+0x240>)
 800e8ce:	429d      	cmp	r5, r3
 800e8d0:	d11b      	bne.n	800e90a <_vfiprintf_r+0x56>
 800e8d2:	6875      	ldr	r5, [r6, #4]
 800e8d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8d6:	07d9      	lsls	r1, r3, #31
 800e8d8:	d405      	bmi.n	800e8e6 <_vfiprintf_r+0x32>
 800e8da:	89ab      	ldrh	r3, [r5, #12]
 800e8dc:	059a      	lsls	r2, r3, #22
 800e8de:	d402      	bmi.n	800e8e6 <_vfiprintf_r+0x32>
 800e8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8e2:	f7ff fd51 	bl	800e388 <__retarget_lock_acquire_recursive>
 800e8e6:	89ab      	ldrh	r3, [r5, #12]
 800e8e8:	071b      	lsls	r3, r3, #28
 800e8ea:	d501      	bpl.n	800e8f0 <_vfiprintf_r+0x3c>
 800e8ec:	692b      	ldr	r3, [r5, #16]
 800e8ee:	b9eb      	cbnz	r3, 800e92c <_vfiprintf_r+0x78>
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f7ff fb22 	bl	800df3c <__swsetup_r>
 800e8f8:	b1c0      	cbz	r0, 800e92c <_vfiprintf_r+0x78>
 800e8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8fc:	07dc      	lsls	r4, r3, #31
 800e8fe:	d50e      	bpl.n	800e91e <_vfiprintf_r+0x6a>
 800e900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e904:	b01d      	add	sp, #116	; 0x74
 800e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90a:	4b7b      	ldr	r3, [pc, #492]	; (800eaf8 <_vfiprintf_r+0x244>)
 800e90c:	429d      	cmp	r5, r3
 800e90e:	d101      	bne.n	800e914 <_vfiprintf_r+0x60>
 800e910:	68b5      	ldr	r5, [r6, #8]
 800e912:	e7df      	b.n	800e8d4 <_vfiprintf_r+0x20>
 800e914:	4b79      	ldr	r3, [pc, #484]	; (800eafc <_vfiprintf_r+0x248>)
 800e916:	429d      	cmp	r5, r3
 800e918:	bf08      	it	eq
 800e91a:	68f5      	ldreq	r5, [r6, #12]
 800e91c:	e7da      	b.n	800e8d4 <_vfiprintf_r+0x20>
 800e91e:	89ab      	ldrh	r3, [r5, #12]
 800e920:	0598      	lsls	r0, r3, #22
 800e922:	d4ed      	bmi.n	800e900 <_vfiprintf_r+0x4c>
 800e924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e926:	f7ff fd30 	bl	800e38a <__retarget_lock_release_recursive>
 800e92a:	e7e9      	b.n	800e900 <_vfiprintf_r+0x4c>
 800e92c:	2300      	movs	r3, #0
 800e92e:	9309      	str	r3, [sp, #36]	; 0x24
 800e930:	2320      	movs	r3, #32
 800e932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e936:	f8cd 800c 	str.w	r8, [sp, #12]
 800e93a:	2330      	movs	r3, #48	; 0x30
 800e93c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb00 <_vfiprintf_r+0x24c>
 800e940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e944:	f04f 0901 	mov.w	r9, #1
 800e948:	4623      	mov	r3, r4
 800e94a:	469a      	mov	sl, r3
 800e94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e950:	b10a      	cbz	r2, 800e956 <_vfiprintf_r+0xa2>
 800e952:	2a25      	cmp	r2, #37	; 0x25
 800e954:	d1f9      	bne.n	800e94a <_vfiprintf_r+0x96>
 800e956:	ebba 0b04 	subs.w	fp, sl, r4
 800e95a:	d00b      	beq.n	800e974 <_vfiprintf_r+0xc0>
 800e95c:	465b      	mov	r3, fp
 800e95e:	4622      	mov	r2, r4
 800e960:	4629      	mov	r1, r5
 800e962:	4630      	mov	r0, r6
 800e964:	f7ff ff93 	bl	800e88e <__sfputs_r>
 800e968:	3001      	adds	r0, #1
 800e96a:	f000 80aa 	beq.w	800eac2 <_vfiprintf_r+0x20e>
 800e96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e970:	445a      	add	r2, fp
 800e972:	9209      	str	r2, [sp, #36]	; 0x24
 800e974:	f89a 3000 	ldrb.w	r3, [sl]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 80a2 	beq.w	800eac2 <_vfiprintf_r+0x20e>
 800e97e:	2300      	movs	r3, #0
 800e980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e988:	f10a 0a01 	add.w	sl, sl, #1
 800e98c:	9304      	str	r3, [sp, #16]
 800e98e:	9307      	str	r3, [sp, #28]
 800e990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e994:	931a      	str	r3, [sp, #104]	; 0x68
 800e996:	4654      	mov	r4, sl
 800e998:	2205      	movs	r2, #5
 800e99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e99e:	4858      	ldr	r0, [pc, #352]	; (800eb00 <_vfiprintf_r+0x24c>)
 800e9a0:	f7f1 fc16 	bl	80001d0 <memchr>
 800e9a4:	9a04      	ldr	r2, [sp, #16]
 800e9a6:	b9d8      	cbnz	r0, 800e9e0 <_vfiprintf_r+0x12c>
 800e9a8:	06d1      	lsls	r1, r2, #27
 800e9aa:	bf44      	itt	mi
 800e9ac:	2320      	movmi	r3, #32
 800e9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b2:	0713      	lsls	r3, r2, #28
 800e9b4:	bf44      	itt	mi
 800e9b6:	232b      	movmi	r3, #43	; 0x2b
 800e9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e9c2:	d015      	beq.n	800e9f0 <_vfiprintf_r+0x13c>
 800e9c4:	9a07      	ldr	r2, [sp, #28]
 800e9c6:	4654      	mov	r4, sl
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	f04f 0c0a 	mov.w	ip, #10
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9d4:	3b30      	subs	r3, #48	; 0x30
 800e9d6:	2b09      	cmp	r3, #9
 800e9d8:	d94e      	bls.n	800ea78 <_vfiprintf_r+0x1c4>
 800e9da:	b1b0      	cbz	r0, 800ea0a <_vfiprintf_r+0x156>
 800e9dc:	9207      	str	r2, [sp, #28]
 800e9de:	e014      	b.n	800ea0a <_vfiprintf_r+0x156>
 800e9e0:	eba0 0308 	sub.w	r3, r0, r8
 800e9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	9304      	str	r3, [sp, #16]
 800e9ec:	46a2      	mov	sl, r4
 800e9ee:	e7d2      	b.n	800e996 <_vfiprintf_r+0xe2>
 800e9f0:	9b03      	ldr	r3, [sp, #12]
 800e9f2:	1d19      	adds	r1, r3, #4
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	9103      	str	r1, [sp, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	bfbb      	ittet	lt
 800e9fc:	425b      	neglt	r3, r3
 800e9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800ea02:	9307      	strge	r3, [sp, #28]
 800ea04:	9307      	strlt	r3, [sp, #28]
 800ea06:	bfb8      	it	lt
 800ea08:	9204      	strlt	r2, [sp, #16]
 800ea0a:	7823      	ldrb	r3, [r4, #0]
 800ea0c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea0e:	d10c      	bne.n	800ea2a <_vfiprintf_r+0x176>
 800ea10:	7863      	ldrb	r3, [r4, #1]
 800ea12:	2b2a      	cmp	r3, #42	; 0x2a
 800ea14:	d135      	bne.n	800ea82 <_vfiprintf_r+0x1ce>
 800ea16:	9b03      	ldr	r3, [sp, #12]
 800ea18:	1d1a      	adds	r2, r3, #4
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	9203      	str	r2, [sp, #12]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	bfb8      	it	lt
 800ea22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea26:	3402      	adds	r4, #2
 800ea28:	9305      	str	r3, [sp, #20]
 800ea2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb10 <_vfiprintf_r+0x25c>
 800ea2e:	7821      	ldrb	r1, [r4, #0]
 800ea30:	2203      	movs	r2, #3
 800ea32:	4650      	mov	r0, sl
 800ea34:	f7f1 fbcc 	bl	80001d0 <memchr>
 800ea38:	b140      	cbz	r0, 800ea4c <_vfiprintf_r+0x198>
 800ea3a:	2340      	movs	r3, #64	; 0x40
 800ea3c:	eba0 000a 	sub.w	r0, r0, sl
 800ea40:	fa03 f000 	lsl.w	r0, r3, r0
 800ea44:	9b04      	ldr	r3, [sp, #16]
 800ea46:	4303      	orrs	r3, r0
 800ea48:	3401      	adds	r4, #1
 800ea4a:	9304      	str	r3, [sp, #16]
 800ea4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea50:	482c      	ldr	r0, [pc, #176]	; (800eb04 <_vfiprintf_r+0x250>)
 800ea52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea56:	2206      	movs	r2, #6
 800ea58:	f7f1 fbba 	bl	80001d0 <memchr>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d03f      	beq.n	800eae0 <_vfiprintf_r+0x22c>
 800ea60:	4b29      	ldr	r3, [pc, #164]	; (800eb08 <_vfiprintf_r+0x254>)
 800ea62:	bb1b      	cbnz	r3, 800eaac <_vfiprintf_r+0x1f8>
 800ea64:	9b03      	ldr	r3, [sp, #12]
 800ea66:	3307      	adds	r3, #7
 800ea68:	f023 0307 	bic.w	r3, r3, #7
 800ea6c:	3308      	adds	r3, #8
 800ea6e:	9303      	str	r3, [sp, #12]
 800ea70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea72:	443b      	add	r3, r7
 800ea74:	9309      	str	r3, [sp, #36]	; 0x24
 800ea76:	e767      	b.n	800e948 <_vfiprintf_r+0x94>
 800ea78:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea7c:	460c      	mov	r4, r1
 800ea7e:	2001      	movs	r0, #1
 800ea80:	e7a5      	b.n	800e9ce <_vfiprintf_r+0x11a>
 800ea82:	2300      	movs	r3, #0
 800ea84:	3401      	adds	r4, #1
 800ea86:	9305      	str	r3, [sp, #20]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	f04f 0c0a 	mov.w	ip, #10
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea94:	3a30      	subs	r2, #48	; 0x30
 800ea96:	2a09      	cmp	r2, #9
 800ea98:	d903      	bls.n	800eaa2 <_vfiprintf_r+0x1ee>
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d0c5      	beq.n	800ea2a <_vfiprintf_r+0x176>
 800ea9e:	9105      	str	r1, [sp, #20]
 800eaa0:	e7c3      	b.n	800ea2a <_vfiprintf_r+0x176>
 800eaa2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e7f0      	b.n	800ea8e <_vfiprintf_r+0x1da>
 800eaac:	ab03      	add	r3, sp, #12
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	462a      	mov	r2, r5
 800eab2:	4b16      	ldr	r3, [pc, #88]	; (800eb0c <_vfiprintf_r+0x258>)
 800eab4:	a904      	add	r1, sp, #16
 800eab6:	4630      	mov	r0, r6
 800eab8:	f3af 8000 	nop.w
 800eabc:	4607      	mov	r7, r0
 800eabe:	1c78      	adds	r0, r7, #1
 800eac0:	d1d6      	bne.n	800ea70 <_vfiprintf_r+0x1bc>
 800eac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eac4:	07d9      	lsls	r1, r3, #31
 800eac6:	d405      	bmi.n	800ead4 <_vfiprintf_r+0x220>
 800eac8:	89ab      	ldrh	r3, [r5, #12]
 800eaca:	059a      	lsls	r2, r3, #22
 800eacc:	d402      	bmi.n	800ead4 <_vfiprintf_r+0x220>
 800eace:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ead0:	f7ff fc5b 	bl	800e38a <__retarget_lock_release_recursive>
 800ead4:	89ab      	ldrh	r3, [r5, #12]
 800ead6:	065b      	lsls	r3, r3, #25
 800ead8:	f53f af12 	bmi.w	800e900 <_vfiprintf_r+0x4c>
 800eadc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eade:	e711      	b.n	800e904 <_vfiprintf_r+0x50>
 800eae0:	ab03      	add	r3, sp, #12
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	462a      	mov	r2, r5
 800eae6:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <_vfiprintf_r+0x258>)
 800eae8:	a904      	add	r1, sp, #16
 800eaea:	4630      	mov	r0, r6
 800eaec:	f000 f880 	bl	800ebf0 <_printf_i>
 800eaf0:	e7e4      	b.n	800eabc <_vfiprintf_r+0x208>
 800eaf2:	bf00      	nop
 800eaf4:	08010440 	.word	0x08010440
 800eaf8:	08010460 	.word	0x08010460
 800eafc:	08010420 	.word	0x08010420
 800eb00:	08010480 	.word	0x08010480
 800eb04:	0801048a 	.word	0x0801048a
 800eb08:	00000000 	.word	0x00000000
 800eb0c:	0800e88f 	.word	0x0800e88f
 800eb10:	08010486 	.word	0x08010486

0800eb14 <_printf_common>:
 800eb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb18:	4616      	mov	r6, r2
 800eb1a:	4699      	mov	r9, r3
 800eb1c:	688a      	ldr	r2, [r1, #8]
 800eb1e:	690b      	ldr	r3, [r1, #16]
 800eb20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb24:	4293      	cmp	r3, r2
 800eb26:	bfb8      	it	lt
 800eb28:	4613      	movlt	r3, r2
 800eb2a:	6033      	str	r3, [r6, #0]
 800eb2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb30:	4607      	mov	r7, r0
 800eb32:	460c      	mov	r4, r1
 800eb34:	b10a      	cbz	r2, 800eb3a <_printf_common+0x26>
 800eb36:	3301      	adds	r3, #1
 800eb38:	6033      	str	r3, [r6, #0]
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	0699      	lsls	r1, r3, #26
 800eb3e:	bf42      	ittt	mi
 800eb40:	6833      	ldrmi	r3, [r6, #0]
 800eb42:	3302      	addmi	r3, #2
 800eb44:	6033      	strmi	r3, [r6, #0]
 800eb46:	6825      	ldr	r5, [r4, #0]
 800eb48:	f015 0506 	ands.w	r5, r5, #6
 800eb4c:	d106      	bne.n	800eb5c <_printf_common+0x48>
 800eb4e:	f104 0a19 	add.w	sl, r4, #25
 800eb52:	68e3      	ldr	r3, [r4, #12]
 800eb54:	6832      	ldr	r2, [r6, #0]
 800eb56:	1a9b      	subs	r3, r3, r2
 800eb58:	42ab      	cmp	r3, r5
 800eb5a:	dc26      	bgt.n	800ebaa <_printf_common+0x96>
 800eb5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb60:	1e13      	subs	r3, r2, #0
 800eb62:	6822      	ldr	r2, [r4, #0]
 800eb64:	bf18      	it	ne
 800eb66:	2301      	movne	r3, #1
 800eb68:	0692      	lsls	r2, r2, #26
 800eb6a:	d42b      	bmi.n	800ebc4 <_printf_common+0xb0>
 800eb6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb70:	4649      	mov	r1, r9
 800eb72:	4638      	mov	r0, r7
 800eb74:	47c0      	blx	r8
 800eb76:	3001      	adds	r0, #1
 800eb78:	d01e      	beq.n	800ebb8 <_printf_common+0xa4>
 800eb7a:	6823      	ldr	r3, [r4, #0]
 800eb7c:	68e5      	ldr	r5, [r4, #12]
 800eb7e:	6832      	ldr	r2, [r6, #0]
 800eb80:	f003 0306 	and.w	r3, r3, #6
 800eb84:	2b04      	cmp	r3, #4
 800eb86:	bf08      	it	eq
 800eb88:	1aad      	subeq	r5, r5, r2
 800eb8a:	68a3      	ldr	r3, [r4, #8]
 800eb8c:	6922      	ldr	r2, [r4, #16]
 800eb8e:	bf0c      	ite	eq
 800eb90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb94:	2500      	movne	r5, #0
 800eb96:	4293      	cmp	r3, r2
 800eb98:	bfc4      	itt	gt
 800eb9a:	1a9b      	subgt	r3, r3, r2
 800eb9c:	18ed      	addgt	r5, r5, r3
 800eb9e:	2600      	movs	r6, #0
 800eba0:	341a      	adds	r4, #26
 800eba2:	42b5      	cmp	r5, r6
 800eba4:	d11a      	bne.n	800ebdc <_printf_common+0xc8>
 800eba6:	2000      	movs	r0, #0
 800eba8:	e008      	b.n	800ebbc <_printf_common+0xa8>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	4652      	mov	r2, sl
 800ebae:	4649      	mov	r1, r9
 800ebb0:	4638      	mov	r0, r7
 800ebb2:	47c0      	blx	r8
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	d103      	bne.n	800ebc0 <_printf_common+0xac>
 800ebb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebc0:	3501      	adds	r5, #1
 800ebc2:	e7c6      	b.n	800eb52 <_printf_common+0x3e>
 800ebc4:	18e1      	adds	r1, r4, r3
 800ebc6:	1c5a      	adds	r2, r3, #1
 800ebc8:	2030      	movs	r0, #48	; 0x30
 800ebca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebce:	4422      	add	r2, r4
 800ebd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebd8:	3302      	adds	r3, #2
 800ebda:	e7c7      	b.n	800eb6c <_printf_common+0x58>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	4622      	mov	r2, r4
 800ebe0:	4649      	mov	r1, r9
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	47c0      	blx	r8
 800ebe6:	3001      	adds	r0, #1
 800ebe8:	d0e6      	beq.n	800ebb8 <_printf_common+0xa4>
 800ebea:	3601      	adds	r6, #1
 800ebec:	e7d9      	b.n	800eba2 <_printf_common+0x8e>
	...

0800ebf0 <_printf_i>:
 800ebf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	4691      	mov	r9, r2
 800ebf8:	7e27      	ldrb	r7, [r4, #24]
 800ebfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ebfc:	2f78      	cmp	r7, #120	; 0x78
 800ebfe:	4680      	mov	r8, r0
 800ec00:	469a      	mov	sl, r3
 800ec02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec06:	d807      	bhi.n	800ec18 <_printf_i+0x28>
 800ec08:	2f62      	cmp	r7, #98	; 0x62
 800ec0a:	d80a      	bhi.n	800ec22 <_printf_i+0x32>
 800ec0c:	2f00      	cmp	r7, #0
 800ec0e:	f000 80d8 	beq.w	800edc2 <_printf_i+0x1d2>
 800ec12:	2f58      	cmp	r7, #88	; 0x58
 800ec14:	f000 80a3 	beq.w	800ed5e <_printf_i+0x16e>
 800ec18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec20:	e03a      	b.n	800ec98 <_printf_i+0xa8>
 800ec22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec26:	2b15      	cmp	r3, #21
 800ec28:	d8f6      	bhi.n	800ec18 <_printf_i+0x28>
 800ec2a:	a001      	add	r0, pc, #4	; (adr r0, 800ec30 <_printf_i+0x40>)
 800ec2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ec30:	0800ec89 	.word	0x0800ec89
 800ec34:	0800ec9d 	.word	0x0800ec9d
 800ec38:	0800ec19 	.word	0x0800ec19
 800ec3c:	0800ec19 	.word	0x0800ec19
 800ec40:	0800ec19 	.word	0x0800ec19
 800ec44:	0800ec19 	.word	0x0800ec19
 800ec48:	0800ec9d 	.word	0x0800ec9d
 800ec4c:	0800ec19 	.word	0x0800ec19
 800ec50:	0800ec19 	.word	0x0800ec19
 800ec54:	0800ec19 	.word	0x0800ec19
 800ec58:	0800ec19 	.word	0x0800ec19
 800ec5c:	0800eda9 	.word	0x0800eda9
 800ec60:	0800eccd 	.word	0x0800eccd
 800ec64:	0800ed8b 	.word	0x0800ed8b
 800ec68:	0800ec19 	.word	0x0800ec19
 800ec6c:	0800ec19 	.word	0x0800ec19
 800ec70:	0800edcb 	.word	0x0800edcb
 800ec74:	0800ec19 	.word	0x0800ec19
 800ec78:	0800eccd 	.word	0x0800eccd
 800ec7c:	0800ec19 	.word	0x0800ec19
 800ec80:	0800ec19 	.word	0x0800ec19
 800ec84:	0800ed93 	.word	0x0800ed93
 800ec88:	680b      	ldr	r3, [r1, #0]
 800ec8a:	1d1a      	adds	r2, r3, #4
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	600a      	str	r2, [r1, #0]
 800ec90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ec94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e0a3      	b.n	800ede4 <_printf_i+0x1f4>
 800ec9c:	6825      	ldr	r5, [r4, #0]
 800ec9e:	6808      	ldr	r0, [r1, #0]
 800eca0:	062e      	lsls	r6, r5, #24
 800eca2:	f100 0304 	add.w	r3, r0, #4
 800eca6:	d50a      	bpl.n	800ecbe <_printf_i+0xce>
 800eca8:	6805      	ldr	r5, [r0, #0]
 800ecaa:	600b      	str	r3, [r1, #0]
 800ecac:	2d00      	cmp	r5, #0
 800ecae:	da03      	bge.n	800ecb8 <_printf_i+0xc8>
 800ecb0:	232d      	movs	r3, #45	; 0x2d
 800ecb2:	426d      	negs	r5, r5
 800ecb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecb8:	485e      	ldr	r0, [pc, #376]	; (800ee34 <_printf_i+0x244>)
 800ecba:	230a      	movs	r3, #10
 800ecbc:	e019      	b.n	800ecf2 <_printf_i+0x102>
 800ecbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ecc2:	6805      	ldr	r5, [r0, #0]
 800ecc4:	600b      	str	r3, [r1, #0]
 800ecc6:	bf18      	it	ne
 800ecc8:	b22d      	sxthne	r5, r5
 800ecca:	e7ef      	b.n	800ecac <_printf_i+0xbc>
 800eccc:	680b      	ldr	r3, [r1, #0]
 800ecce:	6825      	ldr	r5, [r4, #0]
 800ecd0:	1d18      	adds	r0, r3, #4
 800ecd2:	6008      	str	r0, [r1, #0]
 800ecd4:	0628      	lsls	r0, r5, #24
 800ecd6:	d501      	bpl.n	800ecdc <_printf_i+0xec>
 800ecd8:	681d      	ldr	r5, [r3, #0]
 800ecda:	e002      	b.n	800ece2 <_printf_i+0xf2>
 800ecdc:	0669      	lsls	r1, r5, #25
 800ecde:	d5fb      	bpl.n	800ecd8 <_printf_i+0xe8>
 800ece0:	881d      	ldrh	r5, [r3, #0]
 800ece2:	4854      	ldr	r0, [pc, #336]	; (800ee34 <_printf_i+0x244>)
 800ece4:	2f6f      	cmp	r7, #111	; 0x6f
 800ece6:	bf0c      	ite	eq
 800ece8:	2308      	moveq	r3, #8
 800ecea:	230a      	movne	r3, #10
 800ecec:	2100      	movs	r1, #0
 800ecee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecf2:	6866      	ldr	r6, [r4, #4]
 800ecf4:	60a6      	str	r6, [r4, #8]
 800ecf6:	2e00      	cmp	r6, #0
 800ecf8:	bfa2      	ittt	ge
 800ecfa:	6821      	ldrge	r1, [r4, #0]
 800ecfc:	f021 0104 	bicge.w	r1, r1, #4
 800ed00:	6021      	strge	r1, [r4, #0]
 800ed02:	b90d      	cbnz	r5, 800ed08 <_printf_i+0x118>
 800ed04:	2e00      	cmp	r6, #0
 800ed06:	d04d      	beq.n	800eda4 <_printf_i+0x1b4>
 800ed08:	4616      	mov	r6, r2
 800ed0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed0e:	fb03 5711 	mls	r7, r3, r1, r5
 800ed12:	5dc7      	ldrb	r7, [r0, r7]
 800ed14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed18:	462f      	mov	r7, r5
 800ed1a:	42bb      	cmp	r3, r7
 800ed1c:	460d      	mov	r5, r1
 800ed1e:	d9f4      	bls.n	800ed0a <_printf_i+0x11a>
 800ed20:	2b08      	cmp	r3, #8
 800ed22:	d10b      	bne.n	800ed3c <_printf_i+0x14c>
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	07df      	lsls	r7, r3, #31
 800ed28:	d508      	bpl.n	800ed3c <_printf_i+0x14c>
 800ed2a:	6923      	ldr	r3, [r4, #16]
 800ed2c:	6861      	ldr	r1, [r4, #4]
 800ed2e:	4299      	cmp	r1, r3
 800ed30:	bfde      	ittt	le
 800ed32:	2330      	movle	r3, #48	; 0x30
 800ed34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed38:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ed3c:	1b92      	subs	r2, r2, r6
 800ed3e:	6122      	str	r2, [r4, #16]
 800ed40:	f8cd a000 	str.w	sl, [sp]
 800ed44:	464b      	mov	r3, r9
 800ed46:	aa03      	add	r2, sp, #12
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4640      	mov	r0, r8
 800ed4c:	f7ff fee2 	bl	800eb14 <_printf_common>
 800ed50:	3001      	adds	r0, #1
 800ed52:	d14c      	bne.n	800edee <_printf_i+0x1fe>
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed58:	b004      	add	sp, #16
 800ed5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5e:	4835      	ldr	r0, [pc, #212]	; (800ee34 <_printf_i+0x244>)
 800ed60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed64:	6823      	ldr	r3, [r4, #0]
 800ed66:	680e      	ldr	r6, [r1, #0]
 800ed68:	061f      	lsls	r7, r3, #24
 800ed6a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed6e:	600e      	str	r6, [r1, #0]
 800ed70:	d514      	bpl.n	800ed9c <_printf_i+0x1ac>
 800ed72:	07d9      	lsls	r1, r3, #31
 800ed74:	bf44      	itt	mi
 800ed76:	f043 0320 	orrmi.w	r3, r3, #32
 800ed7a:	6023      	strmi	r3, [r4, #0]
 800ed7c:	b91d      	cbnz	r5, 800ed86 <_printf_i+0x196>
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	f023 0320 	bic.w	r3, r3, #32
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	2310      	movs	r3, #16
 800ed88:	e7b0      	b.n	800ecec <_printf_i+0xfc>
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	f043 0320 	orr.w	r3, r3, #32
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	2378      	movs	r3, #120	; 0x78
 800ed94:	4828      	ldr	r0, [pc, #160]	; (800ee38 <_printf_i+0x248>)
 800ed96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed9a:	e7e3      	b.n	800ed64 <_printf_i+0x174>
 800ed9c:	065e      	lsls	r6, r3, #25
 800ed9e:	bf48      	it	mi
 800eda0:	b2ad      	uxthmi	r5, r5
 800eda2:	e7e6      	b.n	800ed72 <_printf_i+0x182>
 800eda4:	4616      	mov	r6, r2
 800eda6:	e7bb      	b.n	800ed20 <_printf_i+0x130>
 800eda8:	680b      	ldr	r3, [r1, #0]
 800edaa:	6826      	ldr	r6, [r4, #0]
 800edac:	6960      	ldr	r0, [r4, #20]
 800edae:	1d1d      	adds	r5, r3, #4
 800edb0:	600d      	str	r5, [r1, #0]
 800edb2:	0635      	lsls	r5, r6, #24
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	d501      	bpl.n	800edbc <_printf_i+0x1cc>
 800edb8:	6018      	str	r0, [r3, #0]
 800edba:	e002      	b.n	800edc2 <_printf_i+0x1d2>
 800edbc:	0671      	lsls	r1, r6, #25
 800edbe:	d5fb      	bpl.n	800edb8 <_printf_i+0x1c8>
 800edc0:	8018      	strh	r0, [r3, #0]
 800edc2:	2300      	movs	r3, #0
 800edc4:	6123      	str	r3, [r4, #16]
 800edc6:	4616      	mov	r6, r2
 800edc8:	e7ba      	b.n	800ed40 <_printf_i+0x150>
 800edca:	680b      	ldr	r3, [r1, #0]
 800edcc:	1d1a      	adds	r2, r3, #4
 800edce:	600a      	str	r2, [r1, #0]
 800edd0:	681e      	ldr	r6, [r3, #0]
 800edd2:	6862      	ldr	r2, [r4, #4]
 800edd4:	2100      	movs	r1, #0
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7f1 f9fa 	bl	80001d0 <memchr>
 800eddc:	b108      	cbz	r0, 800ede2 <_printf_i+0x1f2>
 800edde:	1b80      	subs	r0, r0, r6
 800ede0:	6060      	str	r0, [r4, #4]
 800ede2:	6863      	ldr	r3, [r4, #4]
 800ede4:	6123      	str	r3, [r4, #16]
 800ede6:	2300      	movs	r3, #0
 800ede8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edec:	e7a8      	b.n	800ed40 <_printf_i+0x150>
 800edee:	6923      	ldr	r3, [r4, #16]
 800edf0:	4632      	mov	r2, r6
 800edf2:	4649      	mov	r1, r9
 800edf4:	4640      	mov	r0, r8
 800edf6:	47d0      	blx	sl
 800edf8:	3001      	adds	r0, #1
 800edfa:	d0ab      	beq.n	800ed54 <_printf_i+0x164>
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	079b      	lsls	r3, r3, #30
 800ee00:	d413      	bmi.n	800ee2a <_printf_i+0x23a>
 800ee02:	68e0      	ldr	r0, [r4, #12]
 800ee04:	9b03      	ldr	r3, [sp, #12]
 800ee06:	4298      	cmp	r0, r3
 800ee08:	bfb8      	it	lt
 800ee0a:	4618      	movlt	r0, r3
 800ee0c:	e7a4      	b.n	800ed58 <_printf_i+0x168>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	4632      	mov	r2, r6
 800ee12:	4649      	mov	r1, r9
 800ee14:	4640      	mov	r0, r8
 800ee16:	47d0      	blx	sl
 800ee18:	3001      	adds	r0, #1
 800ee1a:	d09b      	beq.n	800ed54 <_printf_i+0x164>
 800ee1c:	3501      	adds	r5, #1
 800ee1e:	68e3      	ldr	r3, [r4, #12]
 800ee20:	9903      	ldr	r1, [sp, #12]
 800ee22:	1a5b      	subs	r3, r3, r1
 800ee24:	42ab      	cmp	r3, r5
 800ee26:	dcf2      	bgt.n	800ee0e <_printf_i+0x21e>
 800ee28:	e7eb      	b.n	800ee02 <_printf_i+0x212>
 800ee2a:	2500      	movs	r5, #0
 800ee2c:	f104 0619 	add.w	r6, r4, #25
 800ee30:	e7f5      	b.n	800ee1e <_printf_i+0x22e>
 800ee32:	bf00      	nop
 800ee34:	08010491 	.word	0x08010491
 800ee38:	080104a2 	.word	0x080104a2

0800ee3c <_sbrk_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4d06      	ldr	r5, [pc, #24]	; (800ee58 <_sbrk_r+0x1c>)
 800ee40:	2300      	movs	r3, #0
 800ee42:	4604      	mov	r4, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	602b      	str	r3, [r5, #0]
 800ee48:	f7f4 ff02 	bl	8003c50 <_sbrk>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_sbrk_r+0x1a>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_sbrk_r+0x1a>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	2001008c 	.word	0x2001008c

0800ee5c <__sread>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	460c      	mov	r4, r1
 800ee60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee64:	f000 f8e0 	bl	800f028 <_read_r>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	bfab      	itete	ge
 800ee6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee70:	181b      	addge	r3, r3, r0
 800ee72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee76:	bfac      	ite	ge
 800ee78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee7a:	81a3      	strhlt	r3, [r4, #12]
 800ee7c:	bd10      	pop	{r4, pc}

0800ee7e <__swrite>:
 800ee7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee82:	461f      	mov	r7, r3
 800ee84:	898b      	ldrh	r3, [r1, #12]
 800ee86:	05db      	lsls	r3, r3, #23
 800ee88:	4605      	mov	r5, r0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	4616      	mov	r6, r2
 800ee8e:	d505      	bpl.n	800ee9c <__swrite+0x1e>
 800ee90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee94:	2302      	movs	r3, #2
 800ee96:	2200      	movs	r2, #0
 800ee98:	f000 f868 	bl	800ef6c <_lseek_r>
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eea6:	81a3      	strh	r3, [r4, #12]
 800eea8:	4632      	mov	r2, r6
 800eeaa:	463b      	mov	r3, r7
 800eeac:	4628      	mov	r0, r5
 800eeae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb2:	f000 b817 	b.w	800eee4 <_write_r>

0800eeb6 <__sseek>:
 800eeb6:	b510      	push	{r4, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eebe:	f000 f855 	bl	800ef6c <_lseek_r>
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	bf15      	itete	ne
 800eec8:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eed2:	81a3      	strheq	r3, [r4, #12]
 800eed4:	bf18      	it	ne
 800eed6:	81a3      	strhne	r3, [r4, #12]
 800eed8:	bd10      	pop	{r4, pc}

0800eeda <__sclose>:
 800eeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eede:	f000 b813 	b.w	800ef08 <_close_r>
	...

0800eee4 <_write_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d07      	ldr	r5, [pc, #28]	; (800ef04 <_write_r+0x20>)
 800eee8:	4604      	mov	r4, r0
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	2200      	movs	r2, #0
 800eef0:	602a      	str	r2, [r5, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	f7f4 fe5b 	bl	8003bae <_write>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_write_r+0x1e>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_write_r+0x1e>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	2001008c 	.word	0x2001008c

0800ef08 <_close_r>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	4d06      	ldr	r5, [pc, #24]	; (800ef24 <_close_r+0x1c>)
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	4604      	mov	r4, r0
 800ef10:	4608      	mov	r0, r1
 800ef12:	602b      	str	r3, [r5, #0]
 800ef14:	f7f4 fe67 	bl	8003be6 <_close>
 800ef18:	1c43      	adds	r3, r0, #1
 800ef1a:	d102      	bne.n	800ef22 <_close_r+0x1a>
 800ef1c:	682b      	ldr	r3, [r5, #0]
 800ef1e:	b103      	cbz	r3, 800ef22 <_close_r+0x1a>
 800ef20:	6023      	str	r3, [r4, #0]
 800ef22:	bd38      	pop	{r3, r4, r5, pc}
 800ef24:	2001008c 	.word	0x2001008c

0800ef28 <_fstat_r>:
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4d07      	ldr	r5, [pc, #28]	; (800ef48 <_fstat_r+0x20>)
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	4604      	mov	r4, r0
 800ef30:	4608      	mov	r0, r1
 800ef32:	4611      	mov	r1, r2
 800ef34:	602b      	str	r3, [r5, #0]
 800ef36:	f7f4 fe62 	bl	8003bfe <_fstat>
 800ef3a:	1c43      	adds	r3, r0, #1
 800ef3c:	d102      	bne.n	800ef44 <_fstat_r+0x1c>
 800ef3e:	682b      	ldr	r3, [r5, #0]
 800ef40:	b103      	cbz	r3, 800ef44 <_fstat_r+0x1c>
 800ef42:	6023      	str	r3, [r4, #0]
 800ef44:	bd38      	pop	{r3, r4, r5, pc}
 800ef46:	bf00      	nop
 800ef48:	2001008c 	.word	0x2001008c

0800ef4c <_isatty_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d06      	ldr	r5, [pc, #24]	; (800ef68 <_isatty_r+0x1c>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	602b      	str	r3, [r5, #0]
 800ef58:	f7f4 fe61 	bl	8003c1e <_isatty>
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	d102      	bne.n	800ef66 <_isatty_r+0x1a>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	b103      	cbz	r3, 800ef66 <_isatty_r+0x1a>
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	bd38      	pop	{r3, r4, r5, pc}
 800ef68:	2001008c 	.word	0x2001008c

0800ef6c <_lseek_r>:
 800ef6c:	b538      	push	{r3, r4, r5, lr}
 800ef6e:	4d07      	ldr	r5, [pc, #28]	; (800ef8c <_lseek_r+0x20>)
 800ef70:	4604      	mov	r4, r0
 800ef72:	4608      	mov	r0, r1
 800ef74:	4611      	mov	r1, r2
 800ef76:	2200      	movs	r2, #0
 800ef78:	602a      	str	r2, [r5, #0]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f7f4 fe5a 	bl	8003c34 <_lseek>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	d102      	bne.n	800ef8a <_lseek_r+0x1e>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	b103      	cbz	r3, 800ef8a <_lseek_r+0x1e>
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	bd38      	pop	{r3, r4, r5, pc}
 800ef8c:	2001008c 	.word	0x2001008c

0800ef90 <memmove>:
 800ef90:	4288      	cmp	r0, r1
 800ef92:	b510      	push	{r4, lr}
 800ef94:	eb01 0402 	add.w	r4, r1, r2
 800ef98:	d902      	bls.n	800efa0 <memmove+0x10>
 800ef9a:	4284      	cmp	r4, r0
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	d807      	bhi.n	800efb0 <memmove+0x20>
 800efa0:	1e43      	subs	r3, r0, #1
 800efa2:	42a1      	cmp	r1, r4
 800efa4:	d008      	beq.n	800efb8 <memmove+0x28>
 800efa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efae:	e7f8      	b.n	800efa2 <memmove+0x12>
 800efb0:	4402      	add	r2, r0
 800efb2:	4601      	mov	r1, r0
 800efb4:	428a      	cmp	r2, r1
 800efb6:	d100      	bne.n	800efba <memmove+0x2a>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efc2:	e7f7      	b.n	800efb4 <memmove+0x24>

0800efc4 <__malloc_lock>:
 800efc4:	4801      	ldr	r0, [pc, #4]	; (800efcc <__malloc_lock+0x8>)
 800efc6:	f7ff b9df 	b.w	800e388 <__retarget_lock_acquire_recursive>
 800efca:	bf00      	nop
 800efcc:	20010084 	.word	0x20010084

0800efd0 <__malloc_unlock>:
 800efd0:	4801      	ldr	r0, [pc, #4]	; (800efd8 <__malloc_unlock+0x8>)
 800efd2:	f7ff b9da 	b.w	800e38a <__retarget_lock_release_recursive>
 800efd6:	bf00      	nop
 800efd8:	20010084 	.word	0x20010084

0800efdc <_realloc_r>:
 800efdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efde:	4607      	mov	r7, r0
 800efe0:	4614      	mov	r4, r2
 800efe2:	460e      	mov	r6, r1
 800efe4:	b921      	cbnz	r1, 800eff0 <_realloc_r+0x14>
 800efe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800efea:	4611      	mov	r1, r2
 800efec:	f7ff ba82 	b.w	800e4f4 <_malloc_r>
 800eff0:	b922      	cbnz	r2, 800effc <_realloc_r+0x20>
 800eff2:	f7ff fa2f 	bl	800e454 <_free_r>
 800eff6:	4625      	mov	r5, r4
 800eff8:	4628      	mov	r0, r5
 800effa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800effc:	f000 f826 	bl	800f04c <_malloc_usable_size_r>
 800f000:	42a0      	cmp	r0, r4
 800f002:	d20f      	bcs.n	800f024 <_realloc_r+0x48>
 800f004:	4621      	mov	r1, r4
 800f006:	4638      	mov	r0, r7
 800f008:	f7ff fa74 	bl	800e4f4 <_malloc_r>
 800f00c:	4605      	mov	r5, r0
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0f2      	beq.n	800eff8 <_realloc_r+0x1c>
 800f012:	4631      	mov	r1, r6
 800f014:	4622      	mov	r2, r4
 800f016:	f7fe fe7b 	bl	800dd10 <memcpy>
 800f01a:	4631      	mov	r1, r6
 800f01c:	4638      	mov	r0, r7
 800f01e:	f7ff fa19 	bl	800e454 <_free_r>
 800f022:	e7e9      	b.n	800eff8 <_realloc_r+0x1c>
 800f024:	4635      	mov	r5, r6
 800f026:	e7e7      	b.n	800eff8 <_realloc_r+0x1c>

0800f028 <_read_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	4d07      	ldr	r5, [pc, #28]	; (800f048 <_read_r+0x20>)
 800f02c:	4604      	mov	r4, r0
 800f02e:	4608      	mov	r0, r1
 800f030:	4611      	mov	r1, r2
 800f032:	2200      	movs	r2, #0
 800f034:	602a      	str	r2, [r5, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f7f4 fd9c 	bl	8003b74 <_read>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	d102      	bne.n	800f046 <_read_r+0x1e>
 800f040:	682b      	ldr	r3, [r5, #0]
 800f042:	b103      	cbz	r3, 800f046 <_read_r+0x1e>
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	2001008c 	.word	0x2001008c

0800f04c <_malloc_usable_size_r>:
 800f04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f050:	1f18      	subs	r0, r3, #4
 800f052:	2b00      	cmp	r3, #0
 800f054:	bfbc      	itt	lt
 800f056:	580b      	ldrlt	r3, [r1, r0]
 800f058:	18c0      	addlt	r0, r0, r3
 800f05a:	4770      	bx	lr
 800f05c:	0000      	movs	r0, r0
	...

0800f060 <tan>:
 800f060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f062:	ec53 2b10 	vmov	r2, r3, d0
 800f066:	4814      	ldr	r0, [pc, #80]	; (800f0b8 <tan+0x58>)
 800f068:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f06c:	4281      	cmp	r1, r0
 800f06e:	dc05      	bgt.n	800f07c <tan+0x1c>
 800f070:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800f0b0 <tan+0x50>
 800f074:	2001      	movs	r0, #1
 800f076:	f000 fd6f 	bl	800fb58 <__kernel_tan>
 800f07a:	e009      	b.n	800f090 <tan+0x30>
 800f07c:	480f      	ldr	r0, [pc, #60]	; (800f0bc <tan+0x5c>)
 800f07e:	4281      	cmp	r1, r0
 800f080:	dd09      	ble.n	800f096 <tan+0x36>
 800f082:	ee10 0a10 	vmov	r0, s0
 800f086:	4619      	mov	r1, r3
 800f088:	f7f1 f8f6 	bl	8000278 <__aeabi_dsub>
 800f08c:	ec41 0b10 	vmov	d0, r0, r1
 800f090:	b005      	add	sp, #20
 800f092:	f85d fb04 	ldr.w	pc, [sp], #4
 800f096:	4668      	mov	r0, sp
 800f098:	f000 f812 	bl	800f0c0 <__ieee754_rem_pio2>
 800f09c:	0040      	lsls	r0, r0, #1
 800f09e:	f000 0002 	and.w	r0, r0, #2
 800f0a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f0a6:	ed9d 0b00 	vldr	d0, [sp]
 800f0aa:	f1c0 0001 	rsb	r0, r0, #1
 800f0ae:	e7e2      	b.n	800f076 <tan+0x16>
	...
 800f0b8:	3fe921fb 	.word	0x3fe921fb
 800f0bc:	7fefffff 	.word	0x7fefffff

0800f0c0 <__ieee754_rem_pio2>:
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	ed2d 8b02 	vpush	{d8}
 800f0c8:	ec55 4b10 	vmov	r4, r5, d0
 800f0cc:	4bca      	ldr	r3, [pc, #808]	; (800f3f8 <__ieee754_rem_pio2+0x338>)
 800f0ce:	b08b      	sub	sp, #44	; 0x2c
 800f0d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f0d4:	4598      	cmp	r8, r3
 800f0d6:	4682      	mov	sl, r0
 800f0d8:	9502      	str	r5, [sp, #8]
 800f0da:	dc08      	bgt.n	800f0ee <__ieee754_rem_pio2+0x2e>
 800f0dc:	2200      	movs	r2, #0
 800f0de:	2300      	movs	r3, #0
 800f0e0:	ed80 0b00 	vstr	d0, [r0]
 800f0e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f0e8:	f04f 0b00 	mov.w	fp, #0
 800f0ec:	e028      	b.n	800f140 <__ieee754_rem_pio2+0x80>
 800f0ee:	4bc3      	ldr	r3, [pc, #780]	; (800f3fc <__ieee754_rem_pio2+0x33c>)
 800f0f0:	4598      	cmp	r8, r3
 800f0f2:	dc78      	bgt.n	800f1e6 <__ieee754_rem_pio2+0x126>
 800f0f4:	9b02      	ldr	r3, [sp, #8]
 800f0f6:	4ec2      	ldr	r6, [pc, #776]	; (800f400 <__ieee754_rem_pio2+0x340>)
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	ee10 0a10 	vmov	r0, s0
 800f0fe:	a3b0      	add	r3, pc, #704	; (adr r3, 800f3c0 <__ieee754_rem_pio2+0x300>)
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	4629      	mov	r1, r5
 800f106:	dd39      	ble.n	800f17c <__ieee754_rem_pio2+0xbc>
 800f108:	f7f1 f8b6 	bl	8000278 <__aeabi_dsub>
 800f10c:	45b0      	cmp	r8, r6
 800f10e:	4604      	mov	r4, r0
 800f110:	460d      	mov	r5, r1
 800f112:	d01b      	beq.n	800f14c <__ieee754_rem_pio2+0x8c>
 800f114:	a3ac      	add	r3, pc, #688	; (adr r3, 800f3c8 <__ieee754_rem_pio2+0x308>)
 800f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11a:	f7f1 f8ad 	bl	8000278 <__aeabi_dsub>
 800f11e:	4602      	mov	r2, r0
 800f120:	460b      	mov	r3, r1
 800f122:	e9ca 2300 	strd	r2, r3, [sl]
 800f126:	4620      	mov	r0, r4
 800f128:	4629      	mov	r1, r5
 800f12a:	f7f1 f8a5 	bl	8000278 <__aeabi_dsub>
 800f12e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f3c8 <__ieee754_rem_pio2+0x308>)
 800f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f134:	f7f1 f8a0 	bl	8000278 <__aeabi_dsub>
 800f138:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f13c:	f04f 0b01 	mov.w	fp, #1
 800f140:	4658      	mov	r0, fp
 800f142:	b00b      	add	sp, #44	; 0x2c
 800f144:	ecbd 8b02 	vpop	{d8}
 800f148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f14c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f3d0 <__ieee754_rem_pio2+0x310>)
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	f7f1 f891 	bl	8000278 <__aeabi_dsub>
 800f156:	a3a0      	add	r3, pc, #640	; (adr r3, 800f3d8 <__ieee754_rem_pio2+0x318>)
 800f158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15c:	4604      	mov	r4, r0
 800f15e:	460d      	mov	r5, r1
 800f160:	f7f1 f88a 	bl	8000278 <__aeabi_dsub>
 800f164:	4602      	mov	r2, r0
 800f166:	460b      	mov	r3, r1
 800f168:	e9ca 2300 	strd	r2, r3, [sl]
 800f16c:	4620      	mov	r0, r4
 800f16e:	4629      	mov	r1, r5
 800f170:	f7f1 f882 	bl	8000278 <__aeabi_dsub>
 800f174:	a398      	add	r3, pc, #608	; (adr r3, 800f3d8 <__ieee754_rem_pio2+0x318>)
 800f176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17a:	e7db      	b.n	800f134 <__ieee754_rem_pio2+0x74>
 800f17c:	f7f1 f87e 	bl	800027c <__adddf3>
 800f180:	45b0      	cmp	r8, r6
 800f182:	4604      	mov	r4, r0
 800f184:	460d      	mov	r5, r1
 800f186:	d016      	beq.n	800f1b6 <__ieee754_rem_pio2+0xf6>
 800f188:	a38f      	add	r3, pc, #572	; (adr r3, 800f3c8 <__ieee754_rem_pio2+0x308>)
 800f18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18e:	f7f1 f875 	bl	800027c <__adddf3>
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	e9ca 2300 	strd	r2, r3, [sl]
 800f19a:	4620      	mov	r0, r4
 800f19c:	4629      	mov	r1, r5
 800f19e:	f7f1 f86b 	bl	8000278 <__aeabi_dsub>
 800f1a2:	a389      	add	r3, pc, #548	; (adr r3, 800f3c8 <__ieee754_rem_pio2+0x308>)
 800f1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a8:	f7f1 f868 	bl	800027c <__adddf3>
 800f1ac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f1b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f1b4:	e7c4      	b.n	800f140 <__ieee754_rem_pio2+0x80>
 800f1b6:	a386      	add	r3, pc, #536	; (adr r3, 800f3d0 <__ieee754_rem_pio2+0x310>)
 800f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1bc:	f7f1 f85e 	bl	800027c <__adddf3>
 800f1c0:	a385      	add	r3, pc, #532	; (adr r3, 800f3d8 <__ieee754_rem_pio2+0x318>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	460d      	mov	r5, r1
 800f1ca:	f7f1 f857 	bl	800027c <__adddf3>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	e9ca 2300 	strd	r2, r3, [sl]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	4629      	mov	r1, r5
 800f1da:	f7f1 f84d 	bl	8000278 <__aeabi_dsub>
 800f1de:	a37e      	add	r3, pc, #504	; (adr r3, 800f3d8 <__ieee754_rem_pio2+0x318>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	e7e0      	b.n	800f1a8 <__ieee754_rem_pio2+0xe8>
 800f1e6:	4b87      	ldr	r3, [pc, #540]	; (800f404 <__ieee754_rem_pio2+0x344>)
 800f1e8:	4598      	cmp	r8, r3
 800f1ea:	f300 80d9 	bgt.w	800f3a0 <__ieee754_rem_pio2+0x2e0>
 800f1ee:	f000 fe87 	bl	800ff00 <fabs>
 800f1f2:	ec55 4b10 	vmov	r4, r5, d0
 800f1f6:	ee10 0a10 	vmov	r0, s0
 800f1fa:	a379      	add	r3, pc, #484	; (adr r3, 800f3e0 <__ieee754_rem_pio2+0x320>)
 800f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f200:	4629      	mov	r1, r5
 800f202:	f7f1 f9f1 	bl	80005e8 <__aeabi_dmul>
 800f206:	4b80      	ldr	r3, [pc, #512]	; (800f408 <__ieee754_rem_pio2+0x348>)
 800f208:	2200      	movs	r2, #0
 800f20a:	f7f1 f837 	bl	800027c <__adddf3>
 800f20e:	f7f1 fc85 	bl	8000b1c <__aeabi_d2iz>
 800f212:	4683      	mov	fp, r0
 800f214:	f7f1 f97e 	bl	8000514 <__aeabi_i2d>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	ec43 2b18 	vmov	d8, r2, r3
 800f220:	a367      	add	r3, pc, #412	; (adr r3, 800f3c0 <__ieee754_rem_pio2+0x300>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f9df 	bl	80005e8 <__aeabi_dmul>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4620      	mov	r0, r4
 800f230:	4629      	mov	r1, r5
 800f232:	f7f1 f821 	bl	8000278 <__aeabi_dsub>
 800f236:	a364      	add	r3, pc, #400	; (adr r3, 800f3c8 <__ieee754_rem_pio2+0x308>)
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	4606      	mov	r6, r0
 800f23e:	460f      	mov	r7, r1
 800f240:	ec51 0b18 	vmov	r0, r1, d8
 800f244:	f7f1 f9d0 	bl	80005e8 <__aeabi_dmul>
 800f248:	f1bb 0f1f 	cmp.w	fp, #31
 800f24c:	4604      	mov	r4, r0
 800f24e:	460d      	mov	r5, r1
 800f250:	dc0d      	bgt.n	800f26e <__ieee754_rem_pio2+0x1ae>
 800f252:	4b6e      	ldr	r3, [pc, #440]	; (800f40c <__ieee754_rem_pio2+0x34c>)
 800f254:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f25c:	4543      	cmp	r3, r8
 800f25e:	d006      	beq.n	800f26e <__ieee754_rem_pio2+0x1ae>
 800f260:	4622      	mov	r2, r4
 800f262:	462b      	mov	r3, r5
 800f264:	4630      	mov	r0, r6
 800f266:	4639      	mov	r1, r7
 800f268:	f7f1 f806 	bl	8000278 <__aeabi_dsub>
 800f26c:	e00f      	b.n	800f28e <__ieee754_rem_pio2+0x1ce>
 800f26e:	462b      	mov	r3, r5
 800f270:	4622      	mov	r2, r4
 800f272:	4630      	mov	r0, r6
 800f274:	4639      	mov	r1, r7
 800f276:	f7f0 ffff 	bl	8000278 <__aeabi_dsub>
 800f27a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f27e:	9303      	str	r3, [sp, #12]
 800f280:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f284:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f288:	f1b8 0f10 	cmp.w	r8, #16
 800f28c:	dc02      	bgt.n	800f294 <__ieee754_rem_pio2+0x1d4>
 800f28e:	e9ca 0100 	strd	r0, r1, [sl]
 800f292:	e039      	b.n	800f308 <__ieee754_rem_pio2+0x248>
 800f294:	a34e      	add	r3, pc, #312	; (adr r3, 800f3d0 <__ieee754_rem_pio2+0x310>)
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	ec51 0b18 	vmov	r0, r1, d8
 800f29e:	f7f1 f9a3 	bl	80005e8 <__aeabi_dmul>
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	460d      	mov	r5, r1
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	4639      	mov	r1, r7
 800f2ae:	f7f0 ffe3 	bl	8000278 <__aeabi_dsub>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4680      	mov	r8, r0
 800f2b8:	4689      	mov	r9, r1
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	4639      	mov	r1, r7
 800f2be:	f7f0 ffdb 	bl	8000278 <__aeabi_dsub>
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	462b      	mov	r3, r5
 800f2c6:	f7f0 ffd7 	bl	8000278 <__aeabi_dsub>
 800f2ca:	a343      	add	r3, pc, #268	; (adr r3, 800f3d8 <__ieee754_rem_pio2+0x318>)
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	460d      	mov	r5, r1
 800f2d4:	ec51 0b18 	vmov	r0, r1, d8
 800f2d8:	f7f1 f986 	bl	80005e8 <__aeabi_dmul>
 800f2dc:	4622      	mov	r2, r4
 800f2de:	462b      	mov	r3, r5
 800f2e0:	f7f0 ffca 	bl	8000278 <__aeabi_dsub>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	460b      	mov	r3, r1
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	460d      	mov	r5, r1
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4649      	mov	r1, r9
 800f2f0:	f7f0 ffc2 	bl	8000278 <__aeabi_dsub>
 800f2f4:	9a03      	ldr	r2, [sp, #12]
 800f2f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	2b31      	cmp	r3, #49	; 0x31
 800f2fe:	dc24      	bgt.n	800f34a <__ieee754_rem_pio2+0x28a>
 800f300:	e9ca 0100 	strd	r0, r1, [sl]
 800f304:	4646      	mov	r6, r8
 800f306:	464f      	mov	r7, r9
 800f308:	e9da 8900 	ldrd	r8, r9, [sl]
 800f30c:	4630      	mov	r0, r6
 800f30e:	4642      	mov	r2, r8
 800f310:	464b      	mov	r3, r9
 800f312:	4639      	mov	r1, r7
 800f314:	f7f0 ffb0 	bl	8000278 <__aeabi_dsub>
 800f318:	462b      	mov	r3, r5
 800f31a:	4622      	mov	r2, r4
 800f31c:	f7f0 ffac 	bl	8000278 <__aeabi_dsub>
 800f320:	9b02      	ldr	r3, [sp, #8]
 800f322:	2b00      	cmp	r3, #0
 800f324:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f328:	f6bf af0a 	bge.w	800f140 <__ieee754_rem_pio2+0x80>
 800f32c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f330:	f8ca 3004 	str.w	r3, [sl, #4]
 800f334:	f8ca 8000 	str.w	r8, [sl]
 800f338:	f8ca 0008 	str.w	r0, [sl, #8]
 800f33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f340:	f8ca 300c 	str.w	r3, [sl, #12]
 800f344:	f1cb 0b00 	rsb	fp, fp, #0
 800f348:	e6fa      	b.n	800f140 <__ieee754_rem_pio2+0x80>
 800f34a:	a327      	add	r3, pc, #156	; (adr r3, 800f3e8 <__ieee754_rem_pio2+0x328>)
 800f34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f350:	ec51 0b18 	vmov	r0, r1, d8
 800f354:	f7f1 f948 	bl	80005e8 <__aeabi_dmul>
 800f358:	4604      	mov	r4, r0
 800f35a:	460d      	mov	r5, r1
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	4640      	mov	r0, r8
 800f362:	4649      	mov	r1, r9
 800f364:	f7f0 ff88 	bl	8000278 <__aeabi_dsub>
 800f368:	4602      	mov	r2, r0
 800f36a:	460b      	mov	r3, r1
 800f36c:	4606      	mov	r6, r0
 800f36e:	460f      	mov	r7, r1
 800f370:	4640      	mov	r0, r8
 800f372:	4649      	mov	r1, r9
 800f374:	f7f0 ff80 	bl	8000278 <__aeabi_dsub>
 800f378:	4622      	mov	r2, r4
 800f37a:	462b      	mov	r3, r5
 800f37c:	f7f0 ff7c 	bl	8000278 <__aeabi_dsub>
 800f380:	a31b      	add	r3, pc, #108	; (adr r3, 800f3f0 <__ieee754_rem_pio2+0x330>)
 800f382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f386:	4604      	mov	r4, r0
 800f388:	460d      	mov	r5, r1
 800f38a:	ec51 0b18 	vmov	r0, r1, d8
 800f38e:	f7f1 f92b 	bl	80005e8 <__aeabi_dmul>
 800f392:	4622      	mov	r2, r4
 800f394:	462b      	mov	r3, r5
 800f396:	f7f0 ff6f 	bl	8000278 <__aeabi_dsub>
 800f39a:	4604      	mov	r4, r0
 800f39c:	460d      	mov	r5, r1
 800f39e:	e75f      	b.n	800f260 <__ieee754_rem_pio2+0x1a0>
 800f3a0:	4b1b      	ldr	r3, [pc, #108]	; (800f410 <__ieee754_rem_pio2+0x350>)
 800f3a2:	4598      	cmp	r8, r3
 800f3a4:	dd36      	ble.n	800f414 <__ieee754_rem_pio2+0x354>
 800f3a6:	ee10 2a10 	vmov	r2, s0
 800f3aa:	462b      	mov	r3, r5
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	f7f0 ff62 	bl	8000278 <__aeabi_dsub>
 800f3b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3b8:	e9ca 0100 	strd	r0, r1, [sl]
 800f3bc:	e694      	b.n	800f0e8 <__ieee754_rem_pio2+0x28>
 800f3be:	bf00      	nop
 800f3c0:	54400000 	.word	0x54400000
 800f3c4:	3ff921fb 	.word	0x3ff921fb
 800f3c8:	1a626331 	.word	0x1a626331
 800f3cc:	3dd0b461 	.word	0x3dd0b461
 800f3d0:	1a600000 	.word	0x1a600000
 800f3d4:	3dd0b461 	.word	0x3dd0b461
 800f3d8:	2e037073 	.word	0x2e037073
 800f3dc:	3ba3198a 	.word	0x3ba3198a
 800f3e0:	6dc9c883 	.word	0x6dc9c883
 800f3e4:	3fe45f30 	.word	0x3fe45f30
 800f3e8:	2e000000 	.word	0x2e000000
 800f3ec:	3ba3198a 	.word	0x3ba3198a
 800f3f0:	252049c1 	.word	0x252049c1
 800f3f4:	397b839a 	.word	0x397b839a
 800f3f8:	3fe921fb 	.word	0x3fe921fb
 800f3fc:	4002d97b 	.word	0x4002d97b
 800f400:	3ff921fb 	.word	0x3ff921fb
 800f404:	413921fb 	.word	0x413921fb
 800f408:	3fe00000 	.word	0x3fe00000
 800f40c:	080104b4 	.word	0x080104b4
 800f410:	7fefffff 	.word	0x7fefffff
 800f414:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f418:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f41c:	ee10 0a10 	vmov	r0, s0
 800f420:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f424:	ee10 6a10 	vmov	r6, s0
 800f428:	460f      	mov	r7, r1
 800f42a:	f7f1 fb77 	bl	8000b1c <__aeabi_d2iz>
 800f42e:	f7f1 f871 	bl	8000514 <__aeabi_i2d>
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	4630      	mov	r0, r6
 800f438:	4639      	mov	r1, r7
 800f43a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f43e:	f7f0 ff1b 	bl	8000278 <__aeabi_dsub>
 800f442:	4b22      	ldr	r3, [pc, #136]	; (800f4cc <__ieee754_rem_pio2+0x40c>)
 800f444:	2200      	movs	r2, #0
 800f446:	f7f1 f8cf 	bl	80005e8 <__aeabi_dmul>
 800f44a:	460f      	mov	r7, r1
 800f44c:	4606      	mov	r6, r0
 800f44e:	f7f1 fb65 	bl	8000b1c <__aeabi_d2iz>
 800f452:	f7f1 f85f 	bl	8000514 <__aeabi_i2d>
 800f456:	4602      	mov	r2, r0
 800f458:	460b      	mov	r3, r1
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f462:	f7f0 ff09 	bl	8000278 <__aeabi_dsub>
 800f466:	4b19      	ldr	r3, [pc, #100]	; (800f4cc <__ieee754_rem_pio2+0x40c>)
 800f468:	2200      	movs	r2, #0
 800f46a:	f7f1 f8bd 	bl	80005e8 <__aeabi_dmul>
 800f46e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f472:	ad04      	add	r5, sp, #16
 800f474:	f04f 0803 	mov.w	r8, #3
 800f478:	46a9      	mov	r9, r5
 800f47a:	2600      	movs	r6, #0
 800f47c:	2700      	movs	r7, #0
 800f47e:	4632      	mov	r2, r6
 800f480:	463b      	mov	r3, r7
 800f482:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f486:	46c3      	mov	fp, r8
 800f488:	3d08      	subs	r5, #8
 800f48a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f48e:	f7f1 fb13 	bl	8000ab8 <__aeabi_dcmpeq>
 800f492:	2800      	cmp	r0, #0
 800f494:	d1f3      	bne.n	800f47e <__ieee754_rem_pio2+0x3be>
 800f496:	4b0e      	ldr	r3, [pc, #56]	; (800f4d0 <__ieee754_rem_pio2+0x410>)
 800f498:	9301      	str	r3, [sp, #4]
 800f49a:	2302      	movs	r3, #2
 800f49c:	9300      	str	r3, [sp, #0]
 800f49e:	4622      	mov	r2, r4
 800f4a0:	465b      	mov	r3, fp
 800f4a2:	4651      	mov	r1, sl
 800f4a4:	4648      	mov	r0, r9
 800f4a6:	f000 f817 	bl	800f4d8 <__kernel_rem_pio2>
 800f4aa:	9b02      	ldr	r3, [sp, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	4683      	mov	fp, r0
 800f4b0:	f6bf ae46 	bge.w	800f140 <__ieee754_rem_pio2+0x80>
 800f4b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f4b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4bc:	f8ca 3004 	str.w	r3, [sl, #4]
 800f4c0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f4c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4c8:	e73a      	b.n	800f340 <__ieee754_rem_pio2+0x280>
 800f4ca:	bf00      	nop
 800f4cc:	41700000 	.word	0x41700000
 800f4d0:	08010534 	.word	0x08010534
 800f4d4:	00000000 	.word	0x00000000

0800f4d8 <__kernel_rem_pio2>:
 800f4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4dc:	ed2d 8b02 	vpush	{d8}
 800f4e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f4e4:	f112 0f14 	cmn.w	r2, #20
 800f4e8:	9308      	str	r3, [sp, #32]
 800f4ea:	9101      	str	r1, [sp, #4]
 800f4ec:	4bc6      	ldr	r3, [pc, #792]	; (800f808 <__kernel_rem_pio2+0x330>)
 800f4ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f4f0:	9009      	str	r0, [sp, #36]	; 0x24
 800f4f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4f6:	9304      	str	r3, [sp, #16]
 800f4f8:	9b08      	ldr	r3, [sp, #32]
 800f4fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f4fe:	bfa8      	it	ge
 800f500:	1ed4      	subge	r4, r2, #3
 800f502:	9306      	str	r3, [sp, #24]
 800f504:	bfb2      	itee	lt
 800f506:	2400      	movlt	r4, #0
 800f508:	2318      	movge	r3, #24
 800f50a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f50e:	f06f 0317 	mvn.w	r3, #23
 800f512:	fb04 3303 	mla	r3, r4, r3, r3
 800f516:	eb03 0a02 	add.w	sl, r3, r2
 800f51a:	9b04      	ldr	r3, [sp, #16]
 800f51c:	9a06      	ldr	r2, [sp, #24]
 800f51e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f7f8 <__kernel_rem_pio2+0x320>
 800f522:	eb03 0802 	add.w	r8, r3, r2
 800f526:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f528:	1aa7      	subs	r7, r4, r2
 800f52a:	ae20      	add	r6, sp, #128	; 0x80
 800f52c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f530:	2500      	movs	r5, #0
 800f532:	4545      	cmp	r5, r8
 800f534:	dd18      	ble.n	800f568 <__kernel_rem_pio2+0x90>
 800f536:	9b08      	ldr	r3, [sp, #32]
 800f538:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f53c:	aa20      	add	r2, sp, #128	; 0x80
 800f53e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f7f8 <__kernel_rem_pio2+0x320>
 800f542:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f546:	f1c3 0301 	rsb	r3, r3, #1
 800f54a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f54e:	9307      	str	r3, [sp, #28]
 800f550:	9b07      	ldr	r3, [sp, #28]
 800f552:	9a04      	ldr	r2, [sp, #16]
 800f554:	4443      	add	r3, r8
 800f556:	429a      	cmp	r2, r3
 800f558:	db2f      	blt.n	800f5ba <__kernel_rem_pio2+0xe2>
 800f55a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f55e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f562:	462f      	mov	r7, r5
 800f564:	2600      	movs	r6, #0
 800f566:	e01b      	b.n	800f5a0 <__kernel_rem_pio2+0xc8>
 800f568:	42ef      	cmn	r7, r5
 800f56a:	d407      	bmi.n	800f57c <__kernel_rem_pio2+0xa4>
 800f56c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f570:	f7f0 ffd0 	bl	8000514 <__aeabi_i2d>
 800f574:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f578:	3501      	adds	r5, #1
 800f57a:	e7da      	b.n	800f532 <__kernel_rem_pio2+0x5a>
 800f57c:	ec51 0b18 	vmov	r0, r1, d8
 800f580:	e7f8      	b.n	800f574 <__kernel_rem_pio2+0x9c>
 800f582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f586:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f58a:	f7f1 f82d 	bl	80005e8 <__aeabi_dmul>
 800f58e:	4602      	mov	r2, r0
 800f590:	460b      	mov	r3, r1
 800f592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f596:	f7f0 fe71 	bl	800027c <__adddf3>
 800f59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f59e:	3601      	adds	r6, #1
 800f5a0:	9b06      	ldr	r3, [sp, #24]
 800f5a2:	429e      	cmp	r6, r3
 800f5a4:	f1a7 0708 	sub.w	r7, r7, #8
 800f5a8:	ddeb      	ble.n	800f582 <__kernel_rem_pio2+0xaa>
 800f5aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5ae:	3508      	adds	r5, #8
 800f5b0:	ecab 7b02 	vstmia	fp!, {d7}
 800f5b4:	f108 0801 	add.w	r8, r8, #1
 800f5b8:	e7ca      	b.n	800f550 <__kernel_rem_pio2+0x78>
 800f5ba:	9b04      	ldr	r3, [sp, #16]
 800f5bc:	aa0c      	add	r2, sp, #48	; 0x30
 800f5be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5c4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f5c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f5ca:	9c04      	ldr	r4, [sp, #16]
 800f5cc:	930a      	str	r3, [sp, #40]	; 0x28
 800f5ce:	ab98      	add	r3, sp, #608	; 0x260
 800f5d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5d4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f5d8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f5dc:	f8cd b008 	str.w	fp, [sp, #8]
 800f5e0:	4625      	mov	r5, r4
 800f5e2:	2d00      	cmp	r5, #0
 800f5e4:	dc78      	bgt.n	800f6d8 <__kernel_rem_pio2+0x200>
 800f5e6:	ec47 6b10 	vmov	d0, r6, r7
 800f5ea:	4650      	mov	r0, sl
 800f5ec:	f000 fd14 	bl	8010018 <scalbn>
 800f5f0:	ec57 6b10 	vmov	r6, r7, d0
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f5fa:	ee10 0a10 	vmov	r0, s0
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f0 fff2 	bl	80005e8 <__aeabi_dmul>
 800f604:	ec41 0b10 	vmov	d0, r0, r1
 800f608:	f000 fc86 	bl	800ff18 <floor>
 800f60c:	4b7f      	ldr	r3, [pc, #508]	; (800f80c <__kernel_rem_pio2+0x334>)
 800f60e:	ec51 0b10 	vmov	r0, r1, d0
 800f612:	2200      	movs	r2, #0
 800f614:	f7f0 ffe8 	bl	80005e8 <__aeabi_dmul>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	4630      	mov	r0, r6
 800f61e:	4639      	mov	r1, r7
 800f620:	f7f0 fe2a 	bl	8000278 <__aeabi_dsub>
 800f624:	460f      	mov	r7, r1
 800f626:	4606      	mov	r6, r0
 800f628:	f7f1 fa78 	bl	8000b1c <__aeabi_d2iz>
 800f62c:	9007      	str	r0, [sp, #28]
 800f62e:	f7f0 ff71 	bl	8000514 <__aeabi_i2d>
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	4630      	mov	r0, r6
 800f638:	4639      	mov	r1, r7
 800f63a:	f7f0 fe1d 	bl	8000278 <__aeabi_dsub>
 800f63e:	f1ba 0f00 	cmp.w	sl, #0
 800f642:	4606      	mov	r6, r0
 800f644:	460f      	mov	r7, r1
 800f646:	dd70      	ble.n	800f72a <__kernel_rem_pio2+0x252>
 800f648:	1e62      	subs	r2, r4, #1
 800f64a:	ab0c      	add	r3, sp, #48	; 0x30
 800f64c:	9d07      	ldr	r5, [sp, #28]
 800f64e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f652:	f1ca 0118 	rsb	r1, sl, #24
 800f656:	fa40 f301 	asr.w	r3, r0, r1
 800f65a:	441d      	add	r5, r3
 800f65c:	408b      	lsls	r3, r1
 800f65e:	1ac0      	subs	r0, r0, r3
 800f660:	ab0c      	add	r3, sp, #48	; 0x30
 800f662:	9507      	str	r5, [sp, #28]
 800f664:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f668:	f1ca 0317 	rsb	r3, sl, #23
 800f66c:	fa40 f303 	asr.w	r3, r0, r3
 800f670:	9302      	str	r3, [sp, #8]
 800f672:	9b02      	ldr	r3, [sp, #8]
 800f674:	2b00      	cmp	r3, #0
 800f676:	dd66      	ble.n	800f746 <__kernel_rem_pio2+0x26e>
 800f678:	9b07      	ldr	r3, [sp, #28]
 800f67a:	2200      	movs	r2, #0
 800f67c:	3301      	adds	r3, #1
 800f67e:	9307      	str	r3, [sp, #28]
 800f680:	4615      	mov	r5, r2
 800f682:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f686:	4294      	cmp	r4, r2
 800f688:	f300 8099 	bgt.w	800f7be <__kernel_rem_pio2+0x2e6>
 800f68c:	f1ba 0f00 	cmp.w	sl, #0
 800f690:	dd07      	ble.n	800f6a2 <__kernel_rem_pio2+0x1ca>
 800f692:	f1ba 0f01 	cmp.w	sl, #1
 800f696:	f000 80a5 	beq.w	800f7e4 <__kernel_rem_pio2+0x30c>
 800f69a:	f1ba 0f02 	cmp.w	sl, #2
 800f69e:	f000 80c1 	beq.w	800f824 <__kernel_rem_pio2+0x34c>
 800f6a2:	9b02      	ldr	r3, [sp, #8]
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d14e      	bne.n	800f746 <__kernel_rem_pio2+0x26e>
 800f6a8:	4632      	mov	r2, r6
 800f6aa:	463b      	mov	r3, r7
 800f6ac:	4958      	ldr	r1, [pc, #352]	; (800f810 <__kernel_rem_pio2+0x338>)
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	f7f0 fde2 	bl	8000278 <__aeabi_dsub>
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	460f      	mov	r7, r1
 800f6b8:	2d00      	cmp	r5, #0
 800f6ba:	d044      	beq.n	800f746 <__kernel_rem_pio2+0x26e>
 800f6bc:	4650      	mov	r0, sl
 800f6be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f800 <__kernel_rem_pio2+0x328>
 800f6c2:	f000 fca9 	bl	8010018 <scalbn>
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	ec53 2b10 	vmov	r2, r3, d0
 800f6ce:	f7f0 fdd3 	bl	8000278 <__aeabi_dsub>
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	460f      	mov	r7, r1
 800f6d6:	e036      	b.n	800f746 <__kernel_rem_pio2+0x26e>
 800f6d8:	4b4e      	ldr	r3, [pc, #312]	; (800f814 <__kernel_rem_pio2+0x33c>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	4630      	mov	r0, r6
 800f6de:	4639      	mov	r1, r7
 800f6e0:	f7f0 ff82 	bl	80005e8 <__aeabi_dmul>
 800f6e4:	f7f1 fa1a 	bl	8000b1c <__aeabi_d2iz>
 800f6e8:	f7f0 ff14 	bl	8000514 <__aeabi_i2d>
 800f6ec:	4b4a      	ldr	r3, [pc, #296]	; (800f818 <__kernel_rem_pio2+0x340>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	4680      	mov	r8, r0
 800f6f2:	4689      	mov	r9, r1
 800f6f4:	f7f0 ff78 	bl	80005e8 <__aeabi_dmul>
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	4639      	mov	r1, r7
 800f700:	f7f0 fdba 	bl	8000278 <__aeabi_dsub>
 800f704:	f7f1 fa0a 	bl	8000b1c <__aeabi_d2iz>
 800f708:	9b02      	ldr	r3, [sp, #8]
 800f70a:	f843 0b04 	str.w	r0, [r3], #4
 800f70e:	3d01      	subs	r5, #1
 800f710:	9302      	str	r3, [sp, #8]
 800f712:	ab70      	add	r3, sp, #448	; 0x1c0
 800f714:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71c:	4640      	mov	r0, r8
 800f71e:	4649      	mov	r1, r9
 800f720:	f7f0 fdac 	bl	800027c <__adddf3>
 800f724:	4606      	mov	r6, r0
 800f726:	460f      	mov	r7, r1
 800f728:	e75b      	b.n	800f5e2 <__kernel_rem_pio2+0x10a>
 800f72a:	d105      	bne.n	800f738 <__kernel_rem_pio2+0x260>
 800f72c:	1e63      	subs	r3, r4, #1
 800f72e:	aa0c      	add	r2, sp, #48	; 0x30
 800f730:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f734:	15c3      	asrs	r3, r0, #23
 800f736:	e79b      	b.n	800f670 <__kernel_rem_pio2+0x198>
 800f738:	4b38      	ldr	r3, [pc, #224]	; (800f81c <__kernel_rem_pio2+0x344>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	f7f1 f9da 	bl	8000af4 <__aeabi_dcmpge>
 800f740:	2800      	cmp	r0, #0
 800f742:	d139      	bne.n	800f7b8 <__kernel_rem_pio2+0x2e0>
 800f744:	9002      	str	r0, [sp, #8]
 800f746:	2200      	movs	r2, #0
 800f748:	2300      	movs	r3, #0
 800f74a:	4630      	mov	r0, r6
 800f74c:	4639      	mov	r1, r7
 800f74e:	f7f1 f9b3 	bl	8000ab8 <__aeabi_dcmpeq>
 800f752:	2800      	cmp	r0, #0
 800f754:	f000 80b4 	beq.w	800f8c0 <__kernel_rem_pio2+0x3e8>
 800f758:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800f75c:	465b      	mov	r3, fp
 800f75e:	2200      	movs	r2, #0
 800f760:	9904      	ldr	r1, [sp, #16]
 800f762:	428b      	cmp	r3, r1
 800f764:	da65      	bge.n	800f832 <__kernel_rem_pio2+0x35a>
 800f766:	2a00      	cmp	r2, #0
 800f768:	d07b      	beq.n	800f862 <__kernel_rem_pio2+0x38a>
 800f76a:	ab0c      	add	r3, sp, #48	; 0x30
 800f76c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f770:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f774:	2b00      	cmp	r3, #0
 800f776:	f000 80a0 	beq.w	800f8ba <__kernel_rem_pio2+0x3e2>
 800f77a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f800 <__kernel_rem_pio2+0x328>
 800f77e:	4650      	mov	r0, sl
 800f780:	f000 fc4a 	bl	8010018 <scalbn>
 800f784:	4f23      	ldr	r7, [pc, #140]	; (800f814 <__kernel_rem_pio2+0x33c>)
 800f786:	ec55 4b10 	vmov	r4, r5, d0
 800f78a:	46d8      	mov	r8, fp
 800f78c:	2600      	movs	r6, #0
 800f78e:	f1b8 0f00 	cmp.w	r8, #0
 800f792:	f280 80cf 	bge.w	800f934 <__kernel_rem_pio2+0x45c>
 800f796:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f7f8 <__kernel_rem_pio2+0x320>
 800f79a:	465f      	mov	r7, fp
 800f79c:	f04f 0800 	mov.w	r8, #0
 800f7a0:	2f00      	cmp	r7, #0
 800f7a2:	f2c0 80fd 	blt.w	800f9a0 <__kernel_rem_pio2+0x4c8>
 800f7a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800f7a8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f820 <__kernel_rem_pio2+0x348>
 800f7ac:	ec55 4b18 	vmov	r4, r5, d8
 800f7b0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	e0e5      	b.n	800f984 <__kernel_rem_pio2+0x4ac>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	9302      	str	r3, [sp, #8]
 800f7bc:	e75c      	b.n	800f678 <__kernel_rem_pio2+0x1a0>
 800f7be:	f8db 3000 	ldr.w	r3, [fp]
 800f7c2:	b955      	cbnz	r5, 800f7da <__kernel_rem_pio2+0x302>
 800f7c4:	b123      	cbz	r3, 800f7d0 <__kernel_rem_pio2+0x2f8>
 800f7c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f7ca:	f8cb 3000 	str.w	r3, [fp]
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	3201      	adds	r2, #1
 800f7d2:	f10b 0b04 	add.w	fp, fp, #4
 800f7d6:	461d      	mov	r5, r3
 800f7d8:	e755      	b.n	800f686 <__kernel_rem_pio2+0x1ae>
 800f7da:	1acb      	subs	r3, r1, r3
 800f7dc:	f8cb 3000 	str.w	r3, [fp]
 800f7e0:	462b      	mov	r3, r5
 800f7e2:	e7f5      	b.n	800f7d0 <__kernel_rem_pio2+0x2f8>
 800f7e4:	1e62      	subs	r2, r4, #1
 800f7e6:	ab0c      	add	r3, sp, #48	; 0x30
 800f7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f7f0:	a90c      	add	r1, sp, #48	; 0x30
 800f7f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f7f6:	e754      	b.n	800f6a2 <__kernel_rem_pio2+0x1ca>
	...
 800f804:	3ff00000 	.word	0x3ff00000
 800f808:	08010680 	.word	0x08010680
 800f80c:	40200000 	.word	0x40200000
 800f810:	3ff00000 	.word	0x3ff00000
 800f814:	3e700000 	.word	0x3e700000
 800f818:	41700000 	.word	0x41700000
 800f81c:	3fe00000 	.word	0x3fe00000
 800f820:	08010640 	.word	0x08010640
 800f824:	1e62      	subs	r2, r4, #1
 800f826:	ab0c      	add	r3, sp, #48	; 0x30
 800f828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f830:	e7de      	b.n	800f7f0 <__kernel_rem_pio2+0x318>
 800f832:	a90c      	add	r1, sp, #48	; 0x30
 800f834:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f838:	3b01      	subs	r3, #1
 800f83a:	430a      	orrs	r2, r1
 800f83c:	e790      	b.n	800f760 <__kernel_rem_pio2+0x288>
 800f83e:	3301      	adds	r3, #1
 800f840:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f844:	2900      	cmp	r1, #0
 800f846:	d0fa      	beq.n	800f83e <__kernel_rem_pio2+0x366>
 800f848:	9a08      	ldr	r2, [sp, #32]
 800f84a:	18e3      	adds	r3, r4, r3
 800f84c:	18a6      	adds	r6, r4, r2
 800f84e:	aa20      	add	r2, sp, #128	; 0x80
 800f850:	1c65      	adds	r5, r4, #1
 800f852:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f856:	9302      	str	r3, [sp, #8]
 800f858:	9b02      	ldr	r3, [sp, #8]
 800f85a:	42ab      	cmp	r3, r5
 800f85c:	da04      	bge.n	800f868 <__kernel_rem_pio2+0x390>
 800f85e:	461c      	mov	r4, r3
 800f860:	e6b5      	b.n	800f5ce <__kernel_rem_pio2+0xf6>
 800f862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f864:	2301      	movs	r3, #1
 800f866:	e7eb      	b.n	800f840 <__kernel_rem_pio2+0x368>
 800f868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f86a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f86e:	f7f0 fe51 	bl	8000514 <__aeabi_i2d>
 800f872:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f878:	46b3      	mov	fp, r6
 800f87a:	461c      	mov	r4, r3
 800f87c:	2700      	movs	r7, #0
 800f87e:	f04f 0800 	mov.w	r8, #0
 800f882:	f04f 0900 	mov.w	r9, #0
 800f886:	9b06      	ldr	r3, [sp, #24]
 800f888:	429f      	cmp	r7, r3
 800f88a:	dd06      	ble.n	800f89a <__kernel_rem_pio2+0x3c2>
 800f88c:	ab70      	add	r3, sp, #448	; 0x1c0
 800f88e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f892:	e9c3 8900 	strd	r8, r9, [r3]
 800f896:	3501      	adds	r5, #1
 800f898:	e7de      	b.n	800f858 <__kernel_rem_pio2+0x380>
 800f89a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f89e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f8a2:	f7f0 fea1 	bl	80005e8 <__aeabi_dmul>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	4640      	mov	r0, r8
 800f8ac:	4649      	mov	r1, r9
 800f8ae:	f7f0 fce5 	bl	800027c <__adddf3>
 800f8b2:	3701      	adds	r7, #1
 800f8b4:	4680      	mov	r8, r0
 800f8b6:	4689      	mov	r9, r1
 800f8b8:	e7e5      	b.n	800f886 <__kernel_rem_pio2+0x3ae>
 800f8ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f8be:	e754      	b.n	800f76a <__kernel_rem_pio2+0x292>
 800f8c0:	ec47 6b10 	vmov	d0, r6, r7
 800f8c4:	f1ca 0000 	rsb	r0, sl, #0
 800f8c8:	f000 fba6 	bl	8010018 <scalbn>
 800f8cc:	ec57 6b10 	vmov	r6, r7, d0
 800f8d0:	4b9f      	ldr	r3, [pc, #636]	; (800fb50 <__kernel_rem_pio2+0x678>)
 800f8d2:	ee10 0a10 	vmov	r0, s0
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	4639      	mov	r1, r7
 800f8da:	f7f1 f90b 	bl	8000af4 <__aeabi_dcmpge>
 800f8de:	b300      	cbz	r0, 800f922 <__kernel_rem_pio2+0x44a>
 800f8e0:	4b9c      	ldr	r3, [pc, #624]	; (800fb54 <__kernel_rem_pio2+0x67c>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	4639      	mov	r1, r7
 800f8e8:	f7f0 fe7e 	bl	80005e8 <__aeabi_dmul>
 800f8ec:	f7f1 f916 	bl	8000b1c <__aeabi_d2iz>
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	f7f0 fe0f 	bl	8000514 <__aeabi_i2d>
 800f8f6:	4b96      	ldr	r3, [pc, #600]	; (800fb50 <__kernel_rem_pio2+0x678>)
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f7f0 fe75 	bl	80005e8 <__aeabi_dmul>
 800f8fe:	460b      	mov	r3, r1
 800f900:	4602      	mov	r2, r0
 800f902:	4639      	mov	r1, r7
 800f904:	4630      	mov	r0, r6
 800f906:	f7f0 fcb7 	bl	8000278 <__aeabi_dsub>
 800f90a:	f7f1 f907 	bl	8000b1c <__aeabi_d2iz>
 800f90e:	f104 0b01 	add.w	fp, r4, #1
 800f912:	ab0c      	add	r3, sp, #48	; 0x30
 800f914:	f10a 0a18 	add.w	sl, sl, #24
 800f918:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f91c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f920:	e72b      	b.n	800f77a <__kernel_rem_pio2+0x2a2>
 800f922:	4630      	mov	r0, r6
 800f924:	4639      	mov	r1, r7
 800f926:	f7f1 f8f9 	bl	8000b1c <__aeabi_d2iz>
 800f92a:	ab0c      	add	r3, sp, #48	; 0x30
 800f92c:	46a3      	mov	fp, r4
 800f92e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f932:	e722      	b.n	800f77a <__kernel_rem_pio2+0x2a2>
 800f934:	ab70      	add	r3, sp, #448	; 0x1c0
 800f936:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f93a:	ab0c      	add	r3, sp, #48	; 0x30
 800f93c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f940:	f7f0 fde8 	bl	8000514 <__aeabi_i2d>
 800f944:	4622      	mov	r2, r4
 800f946:	462b      	mov	r3, r5
 800f948:	f7f0 fe4e 	bl	80005e8 <__aeabi_dmul>
 800f94c:	4632      	mov	r2, r6
 800f94e:	e9c9 0100 	strd	r0, r1, [r9]
 800f952:	463b      	mov	r3, r7
 800f954:	4620      	mov	r0, r4
 800f956:	4629      	mov	r1, r5
 800f958:	f7f0 fe46 	bl	80005e8 <__aeabi_dmul>
 800f95c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f960:	4604      	mov	r4, r0
 800f962:	460d      	mov	r5, r1
 800f964:	e713      	b.n	800f78e <__kernel_rem_pio2+0x2b6>
 800f966:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f96a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f96e:	f7f0 fe3b 	bl	80005e8 <__aeabi_dmul>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	4620      	mov	r0, r4
 800f978:	4629      	mov	r1, r5
 800f97a:	f7f0 fc7f 	bl	800027c <__adddf3>
 800f97e:	3601      	adds	r6, #1
 800f980:	4604      	mov	r4, r0
 800f982:	460d      	mov	r5, r1
 800f984:	9b04      	ldr	r3, [sp, #16]
 800f986:	429e      	cmp	r6, r3
 800f988:	dc01      	bgt.n	800f98e <__kernel_rem_pio2+0x4b6>
 800f98a:	45b0      	cmp	r8, r6
 800f98c:	daeb      	bge.n	800f966 <__kernel_rem_pio2+0x48e>
 800f98e:	ab48      	add	r3, sp, #288	; 0x120
 800f990:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f994:	e9c3 4500 	strd	r4, r5, [r3]
 800f998:	3f01      	subs	r7, #1
 800f99a:	f108 0801 	add.w	r8, r8, #1
 800f99e:	e6ff      	b.n	800f7a0 <__kernel_rem_pio2+0x2c8>
 800f9a0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f9a2:	2b02      	cmp	r3, #2
 800f9a4:	dc0b      	bgt.n	800f9be <__kernel_rem_pio2+0x4e6>
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	dc6e      	bgt.n	800fa88 <__kernel_rem_pio2+0x5b0>
 800f9aa:	d045      	beq.n	800fa38 <__kernel_rem_pio2+0x560>
 800f9ac:	9b07      	ldr	r3, [sp, #28]
 800f9ae:	f003 0007 	and.w	r0, r3, #7
 800f9b2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f9b6:	ecbd 8b02 	vpop	{d8}
 800f9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9be:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f9c0:	2b03      	cmp	r3, #3
 800f9c2:	d1f3      	bne.n	800f9ac <__kernel_rem_pio2+0x4d4>
 800f9c4:	ab48      	add	r3, sp, #288	; 0x120
 800f9c6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f9ca:	46d0      	mov	r8, sl
 800f9cc:	46d9      	mov	r9, fp
 800f9ce:	f1b9 0f00 	cmp.w	r9, #0
 800f9d2:	f1a8 0808 	sub.w	r8, r8, #8
 800f9d6:	dc64      	bgt.n	800faa2 <__kernel_rem_pio2+0x5ca>
 800f9d8:	465c      	mov	r4, fp
 800f9da:	2c01      	cmp	r4, #1
 800f9dc:	f1aa 0a08 	sub.w	sl, sl, #8
 800f9e0:	dc7e      	bgt.n	800fae0 <__kernel_rem_pio2+0x608>
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	f1bb 0f01 	cmp.w	fp, #1
 800f9ea:	f300 8097 	bgt.w	800fb1c <__kernel_rem_pio2+0x644>
 800f9ee:	9b02      	ldr	r3, [sp, #8]
 800f9f0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f9f4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f040 8099 	bne.w	800fb30 <__kernel_rem_pio2+0x658>
 800f9fe:	9b01      	ldr	r3, [sp, #4]
 800fa00:	e9c3 5600 	strd	r5, r6, [r3]
 800fa04:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fa08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fa0c:	e7ce      	b.n	800f9ac <__kernel_rem_pio2+0x4d4>
 800fa0e:	ab48      	add	r3, sp, #288	; 0x120
 800fa10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa18:	f7f0 fc30 	bl	800027c <__adddf3>
 800fa1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fa20:	f1bb 0f00 	cmp.w	fp, #0
 800fa24:	daf3      	bge.n	800fa0e <__kernel_rem_pio2+0x536>
 800fa26:	9b02      	ldr	r3, [sp, #8]
 800fa28:	b113      	cbz	r3, 800fa30 <__kernel_rem_pio2+0x558>
 800fa2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa2e:	4619      	mov	r1, r3
 800fa30:	9b01      	ldr	r3, [sp, #4]
 800fa32:	e9c3 0100 	strd	r0, r1, [r3]
 800fa36:	e7b9      	b.n	800f9ac <__kernel_rem_pio2+0x4d4>
 800fa38:	2000      	movs	r0, #0
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	e7f0      	b.n	800fa20 <__kernel_rem_pio2+0x548>
 800fa3e:	ab48      	add	r3, sp, #288	; 0x120
 800fa40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa48:	f7f0 fc18 	bl	800027c <__adddf3>
 800fa4c:	3c01      	subs	r4, #1
 800fa4e:	2c00      	cmp	r4, #0
 800fa50:	daf5      	bge.n	800fa3e <__kernel_rem_pio2+0x566>
 800fa52:	9b02      	ldr	r3, [sp, #8]
 800fa54:	b1e3      	cbz	r3, 800fa90 <__kernel_rem_pio2+0x5b8>
 800fa56:	4602      	mov	r2, r0
 800fa58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa5c:	9c01      	ldr	r4, [sp, #4]
 800fa5e:	e9c4 2300 	strd	r2, r3, [r4]
 800fa62:	4602      	mov	r2, r0
 800fa64:	460b      	mov	r3, r1
 800fa66:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800fa6a:	f7f0 fc05 	bl	8000278 <__aeabi_dsub>
 800fa6e:	ad4a      	add	r5, sp, #296	; 0x128
 800fa70:	2401      	movs	r4, #1
 800fa72:	45a3      	cmp	fp, r4
 800fa74:	da0f      	bge.n	800fa96 <__kernel_rem_pio2+0x5be>
 800fa76:	9b02      	ldr	r3, [sp, #8]
 800fa78:	b113      	cbz	r3, 800fa80 <__kernel_rem_pio2+0x5a8>
 800fa7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa7e:	4619      	mov	r1, r3
 800fa80:	9b01      	ldr	r3, [sp, #4]
 800fa82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800fa86:	e791      	b.n	800f9ac <__kernel_rem_pio2+0x4d4>
 800fa88:	465c      	mov	r4, fp
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	e7de      	b.n	800fa4e <__kernel_rem_pio2+0x576>
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
 800fa94:	e7e2      	b.n	800fa5c <__kernel_rem_pio2+0x584>
 800fa96:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fa9a:	f7f0 fbef 	bl	800027c <__adddf3>
 800fa9e:	3401      	adds	r4, #1
 800faa0:	e7e7      	b.n	800fa72 <__kernel_rem_pio2+0x59a>
 800faa2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800faa6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800faaa:	4620      	mov	r0, r4
 800faac:	4632      	mov	r2, r6
 800faae:	463b      	mov	r3, r7
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f0 fbe3 	bl	800027c <__adddf3>
 800fab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faba:	4602      	mov	r2, r0
 800fabc:	460b      	mov	r3, r1
 800fabe:	4620      	mov	r0, r4
 800fac0:	4629      	mov	r1, r5
 800fac2:	f7f0 fbd9 	bl	8000278 <__aeabi_dsub>
 800fac6:	4632      	mov	r2, r6
 800fac8:	463b      	mov	r3, r7
 800faca:	f7f0 fbd7 	bl	800027c <__adddf3>
 800face:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fad2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800fad6:	ed88 7b00 	vstr	d7, [r8]
 800fada:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fade:	e776      	b.n	800f9ce <__kernel_rem_pio2+0x4f6>
 800fae0:	e9da 8900 	ldrd	r8, r9, [sl]
 800fae4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fae8:	4640      	mov	r0, r8
 800faea:	4632      	mov	r2, r6
 800faec:	463b      	mov	r3, r7
 800faee:	4649      	mov	r1, r9
 800faf0:	f7f0 fbc4 	bl	800027c <__adddf3>
 800faf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faf8:	4602      	mov	r2, r0
 800fafa:	460b      	mov	r3, r1
 800fafc:	4640      	mov	r0, r8
 800fafe:	4649      	mov	r1, r9
 800fb00:	f7f0 fbba 	bl	8000278 <__aeabi_dsub>
 800fb04:	4632      	mov	r2, r6
 800fb06:	463b      	mov	r3, r7
 800fb08:	f7f0 fbb8 	bl	800027c <__adddf3>
 800fb0c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fb10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fb14:	ed8a 7b00 	vstr	d7, [sl]
 800fb18:	3c01      	subs	r4, #1
 800fb1a:	e75e      	b.n	800f9da <__kernel_rem_pio2+0x502>
 800fb1c:	ab48      	add	r3, sp, #288	; 0x120
 800fb1e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	f7f0 fba9 	bl	800027c <__adddf3>
 800fb2a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fb2e:	e75a      	b.n	800f9e6 <__kernel_rem_pio2+0x50e>
 800fb30:	9b01      	ldr	r3, [sp, #4]
 800fb32:	9a01      	ldr	r2, [sp, #4]
 800fb34:	601d      	str	r5, [r3, #0]
 800fb36:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fb3a:	605c      	str	r4, [r3, #4]
 800fb3c:	609f      	str	r7, [r3, #8]
 800fb3e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fb42:	60d3      	str	r3, [r2, #12]
 800fb44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb48:	6110      	str	r0, [r2, #16]
 800fb4a:	6153      	str	r3, [r2, #20]
 800fb4c:	e72e      	b.n	800f9ac <__kernel_rem_pio2+0x4d4>
 800fb4e:	bf00      	nop
 800fb50:	41700000 	.word	0x41700000
 800fb54:	3e700000 	.word	0x3e700000

0800fb58 <__kernel_tan>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	ed2d 8b04 	vpush	{d8-d9}
 800fb60:	ec5b ab10 	vmov	sl, fp, d0
 800fb64:	4be2      	ldr	r3, [pc, #904]	; (800fef0 <__kernel_tan+0x398>)
 800fb66:	b085      	sub	sp, #20
 800fb68:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800fb6c:	429f      	cmp	r7, r3
 800fb6e:	ed8d 1b00 	vstr	d1, [sp]
 800fb72:	4606      	mov	r6, r0
 800fb74:	f8cd b00c 	str.w	fp, [sp, #12]
 800fb78:	dc24      	bgt.n	800fbc4 <__kernel_tan+0x6c>
 800fb7a:	ee10 0a10 	vmov	r0, s0
 800fb7e:	4659      	mov	r1, fp
 800fb80:	f7f0 ffcc 	bl	8000b1c <__aeabi_d2iz>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	d148      	bne.n	800fc1a <__kernel_tan+0xc2>
 800fb88:	1c73      	adds	r3, r6, #1
 800fb8a:	4652      	mov	r2, sl
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	433b      	orrs	r3, r7
 800fb90:	d112      	bne.n	800fbb8 <__kernel_tan+0x60>
 800fb92:	ec4b ab10 	vmov	d0, sl, fp
 800fb96:	f000 f9b3 	bl	800ff00 <fabs>
 800fb9a:	49d6      	ldr	r1, [pc, #856]	; (800fef4 <__kernel_tan+0x39c>)
 800fb9c:	ec53 2b10 	vmov	r2, r3, d0
 800fba0:	2000      	movs	r0, #0
 800fba2:	f7f0 fe4b 	bl	800083c <__aeabi_ddiv>
 800fba6:	4682      	mov	sl, r0
 800fba8:	468b      	mov	fp, r1
 800fbaa:	ec4b ab10 	vmov	d0, sl, fp
 800fbae:	b005      	add	sp, #20
 800fbb0:	ecbd 8b04 	vpop	{d8-d9}
 800fbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb8:	2e01      	cmp	r6, #1
 800fbba:	d0f6      	beq.n	800fbaa <__kernel_tan+0x52>
 800fbbc:	49ce      	ldr	r1, [pc, #824]	; (800fef8 <__kernel_tan+0x3a0>)
 800fbbe:	465b      	mov	r3, fp
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	e7ee      	b.n	800fba2 <__kernel_tan+0x4a>
 800fbc4:	4bcd      	ldr	r3, [pc, #820]	; (800fefc <__kernel_tan+0x3a4>)
 800fbc6:	429f      	cmp	r7, r3
 800fbc8:	dd27      	ble.n	800fc1a <__kernel_tan+0xc2>
 800fbca:	9b03      	ldr	r3, [sp, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	da0a      	bge.n	800fbe6 <__kernel_tan+0x8e>
 800fbd0:	e9dd 2100 	ldrd	r2, r1, [sp]
 800fbd4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fbd8:	469b      	mov	fp, r3
 800fbda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbde:	e9cd 2300 	strd	r2, r3, [sp]
 800fbe2:	ee10 aa10 	vmov	sl, s0
 800fbe6:	4652      	mov	r2, sl
 800fbe8:	465b      	mov	r3, fp
 800fbea:	a1a1      	add	r1, pc, #644	; (adr r1, 800fe70 <__kernel_tan+0x318>)
 800fbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbf0:	f7f0 fb42 	bl	8000278 <__aeabi_dsub>
 800fbf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	460d      	mov	r5, r1
 800fbfc:	a19e      	add	r1, pc, #632	; (adr r1, 800fe78 <__kernel_tan+0x320>)
 800fbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc02:	f7f0 fb39 	bl	8000278 <__aeabi_dsub>
 800fc06:	4622      	mov	r2, r4
 800fc08:	462b      	mov	r3, r5
 800fc0a:	f7f0 fb37 	bl	800027c <__adddf3>
 800fc0e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800fe80 <__kernel_tan+0x328>
 800fc12:	ed8d 7b00 	vstr	d7, [sp]
 800fc16:	4682      	mov	sl, r0
 800fc18:	468b      	mov	fp, r1
 800fc1a:	4652      	mov	r2, sl
 800fc1c:	465b      	mov	r3, fp
 800fc1e:	4650      	mov	r0, sl
 800fc20:	4659      	mov	r1, fp
 800fc22:	f7f0 fce1 	bl	80005e8 <__aeabi_dmul>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4680      	mov	r8, r0
 800fc2c:	4689      	mov	r9, r1
 800fc2e:	f7f0 fcdb 	bl	80005e8 <__aeabi_dmul>
 800fc32:	4642      	mov	r2, r8
 800fc34:	4604      	mov	r4, r0
 800fc36:	460d      	mov	r5, r1
 800fc38:	464b      	mov	r3, r9
 800fc3a:	4650      	mov	r0, sl
 800fc3c:	4659      	mov	r1, fp
 800fc3e:	f7f0 fcd3 	bl	80005e8 <__aeabi_dmul>
 800fc42:	a391      	add	r3, pc, #580	; (adr r3, 800fe88 <__kernel_tan+0x330>)
 800fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc48:	ec41 0b18 	vmov	d8, r0, r1
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	4629      	mov	r1, r5
 800fc50:	f7f0 fcca 	bl	80005e8 <__aeabi_dmul>
 800fc54:	a38e      	add	r3, pc, #568	; (adr r3, 800fe90 <__kernel_tan+0x338>)
 800fc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5a:	f7f0 fb0f 	bl	800027c <__adddf3>
 800fc5e:	4622      	mov	r2, r4
 800fc60:	462b      	mov	r3, r5
 800fc62:	f7f0 fcc1 	bl	80005e8 <__aeabi_dmul>
 800fc66:	a38c      	add	r3, pc, #560	; (adr r3, 800fe98 <__kernel_tan+0x340>)
 800fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6c:	f7f0 fb06 	bl	800027c <__adddf3>
 800fc70:	4622      	mov	r2, r4
 800fc72:	462b      	mov	r3, r5
 800fc74:	f7f0 fcb8 	bl	80005e8 <__aeabi_dmul>
 800fc78:	a389      	add	r3, pc, #548	; (adr r3, 800fea0 <__kernel_tan+0x348>)
 800fc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7e:	f7f0 fafd 	bl	800027c <__adddf3>
 800fc82:	4622      	mov	r2, r4
 800fc84:	462b      	mov	r3, r5
 800fc86:	f7f0 fcaf 	bl	80005e8 <__aeabi_dmul>
 800fc8a:	a387      	add	r3, pc, #540	; (adr r3, 800fea8 <__kernel_tan+0x350>)
 800fc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc90:	f7f0 faf4 	bl	800027c <__adddf3>
 800fc94:	4622      	mov	r2, r4
 800fc96:	462b      	mov	r3, r5
 800fc98:	f7f0 fca6 	bl	80005e8 <__aeabi_dmul>
 800fc9c:	a384      	add	r3, pc, #528	; (adr r3, 800feb0 <__kernel_tan+0x358>)
 800fc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca2:	f7f0 faeb 	bl	800027c <__adddf3>
 800fca6:	4642      	mov	r2, r8
 800fca8:	464b      	mov	r3, r9
 800fcaa:	f7f0 fc9d 	bl	80005e8 <__aeabi_dmul>
 800fcae:	a382      	add	r3, pc, #520	; (adr r3, 800feb8 <__kernel_tan+0x360>)
 800fcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb4:	ec41 0b19 	vmov	d9, r0, r1
 800fcb8:	4620      	mov	r0, r4
 800fcba:	4629      	mov	r1, r5
 800fcbc:	f7f0 fc94 	bl	80005e8 <__aeabi_dmul>
 800fcc0:	a37f      	add	r3, pc, #508	; (adr r3, 800fec0 <__kernel_tan+0x368>)
 800fcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc6:	f7f0 fad9 	bl	800027c <__adddf3>
 800fcca:	4622      	mov	r2, r4
 800fccc:	462b      	mov	r3, r5
 800fcce:	f7f0 fc8b 	bl	80005e8 <__aeabi_dmul>
 800fcd2:	a37d      	add	r3, pc, #500	; (adr r3, 800fec8 <__kernel_tan+0x370>)
 800fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd8:	f7f0 fad0 	bl	800027c <__adddf3>
 800fcdc:	4622      	mov	r2, r4
 800fcde:	462b      	mov	r3, r5
 800fce0:	f7f0 fc82 	bl	80005e8 <__aeabi_dmul>
 800fce4:	a37a      	add	r3, pc, #488	; (adr r3, 800fed0 <__kernel_tan+0x378>)
 800fce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcea:	f7f0 fac7 	bl	800027c <__adddf3>
 800fcee:	4622      	mov	r2, r4
 800fcf0:	462b      	mov	r3, r5
 800fcf2:	f7f0 fc79 	bl	80005e8 <__aeabi_dmul>
 800fcf6:	a378      	add	r3, pc, #480	; (adr r3, 800fed8 <__kernel_tan+0x380>)
 800fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfc:	f7f0 fabe 	bl	800027c <__adddf3>
 800fd00:	4622      	mov	r2, r4
 800fd02:	462b      	mov	r3, r5
 800fd04:	f7f0 fc70 	bl	80005e8 <__aeabi_dmul>
 800fd08:	a375      	add	r3, pc, #468	; (adr r3, 800fee0 <__kernel_tan+0x388>)
 800fd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0e:	f7f0 fab5 	bl	800027c <__adddf3>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	ec51 0b19 	vmov	r0, r1, d9
 800fd1a:	f7f0 faaf 	bl	800027c <__adddf3>
 800fd1e:	ec53 2b18 	vmov	r2, r3, d8
 800fd22:	f7f0 fc61 	bl	80005e8 <__aeabi_dmul>
 800fd26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd2a:	f7f0 faa7 	bl	800027c <__adddf3>
 800fd2e:	4642      	mov	r2, r8
 800fd30:	464b      	mov	r3, r9
 800fd32:	f7f0 fc59 	bl	80005e8 <__aeabi_dmul>
 800fd36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd3a:	f7f0 fa9f 	bl	800027c <__adddf3>
 800fd3e:	a36a      	add	r3, pc, #424	; (adr r3, 800fee8 <__kernel_tan+0x390>)
 800fd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd44:	4604      	mov	r4, r0
 800fd46:	460d      	mov	r5, r1
 800fd48:	ec51 0b18 	vmov	r0, r1, d8
 800fd4c:	f7f0 fc4c 	bl	80005e8 <__aeabi_dmul>
 800fd50:	4622      	mov	r2, r4
 800fd52:	462b      	mov	r3, r5
 800fd54:	f7f0 fa92 	bl	800027c <__adddf3>
 800fd58:	460b      	mov	r3, r1
 800fd5a:	ec41 0b18 	vmov	d8, r0, r1
 800fd5e:	4602      	mov	r2, r0
 800fd60:	4659      	mov	r1, fp
 800fd62:	4650      	mov	r0, sl
 800fd64:	f7f0 fa8a 	bl	800027c <__adddf3>
 800fd68:	4b64      	ldr	r3, [pc, #400]	; (800fefc <__kernel_tan+0x3a4>)
 800fd6a:	429f      	cmp	r7, r3
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	460d      	mov	r5, r1
 800fd70:	dd3e      	ble.n	800fdf0 <__kernel_tan+0x298>
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7f0 fbce 	bl	8000514 <__aeabi_i2d>
 800fd78:	4622      	mov	r2, r4
 800fd7a:	4680      	mov	r8, r0
 800fd7c:	4689      	mov	r9, r1
 800fd7e:	462b      	mov	r3, r5
 800fd80:	4620      	mov	r0, r4
 800fd82:	4629      	mov	r1, r5
 800fd84:	f7f0 fc30 	bl	80005e8 <__aeabi_dmul>
 800fd88:	4642      	mov	r2, r8
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	460f      	mov	r7, r1
 800fd8e:	464b      	mov	r3, r9
 800fd90:	4620      	mov	r0, r4
 800fd92:	4629      	mov	r1, r5
 800fd94:	f7f0 fa72 	bl	800027c <__adddf3>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	4639      	mov	r1, r7
 800fda0:	f7f0 fd4c 	bl	800083c <__aeabi_ddiv>
 800fda4:	ec53 2b18 	vmov	r2, r3, d8
 800fda8:	f7f0 fa66 	bl	8000278 <__aeabi_dsub>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4650      	mov	r0, sl
 800fdb2:	4659      	mov	r1, fp
 800fdb4:	f7f0 fa60 	bl	8000278 <__aeabi_dsub>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	f7f0 fa5e 	bl	800027c <__adddf3>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	f7f0 fa56 	bl	8000278 <__aeabi_dsub>
 800fdcc:	9b03      	ldr	r3, [sp, #12]
 800fdce:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800fdd2:	f00a 0a02 	and.w	sl, sl, #2
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	f1ca 0001 	rsb	r0, sl, #1
 800fddc:	460d      	mov	r5, r1
 800fdde:	f7f0 fb99 	bl	8000514 <__aeabi_i2d>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	4620      	mov	r0, r4
 800fde8:	4629      	mov	r1, r5
 800fdea:	f7f0 fbfd 	bl	80005e8 <__aeabi_dmul>
 800fdee:	e6da      	b.n	800fba6 <__kernel_tan+0x4e>
 800fdf0:	2e01      	cmp	r6, #1
 800fdf2:	d038      	beq.n	800fe66 <__kernel_tan+0x30e>
 800fdf4:	460f      	mov	r7, r1
 800fdf6:	4689      	mov	r9, r1
 800fdf8:	4602      	mov	r2, r0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	493e      	ldr	r1, [pc, #248]	; (800fef8 <__kernel_tan+0x3a0>)
 800fe00:	f7f0 fd1c 	bl	800083c <__aeabi_ddiv>
 800fe04:	2600      	movs	r6, #0
 800fe06:	e9cd 0100 	strd	r0, r1, [sp]
 800fe0a:	4652      	mov	r2, sl
 800fe0c:	465b      	mov	r3, fp
 800fe0e:	4630      	mov	r0, r6
 800fe10:	4639      	mov	r1, r7
 800fe12:	f7f0 fa31 	bl	8000278 <__aeabi_dsub>
 800fe16:	e9dd 4500 	ldrd	r4, r5, [sp]
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	ec51 0b18 	vmov	r0, r1, d8
 800fe22:	f7f0 fa29 	bl	8000278 <__aeabi_dsub>
 800fe26:	4632      	mov	r2, r6
 800fe28:	462b      	mov	r3, r5
 800fe2a:	f7f0 fbdd 	bl	80005e8 <__aeabi_dmul>
 800fe2e:	46b0      	mov	r8, r6
 800fe30:	460f      	mov	r7, r1
 800fe32:	4606      	mov	r6, r0
 800fe34:	4642      	mov	r2, r8
 800fe36:	462b      	mov	r3, r5
 800fe38:	4640      	mov	r0, r8
 800fe3a:	4649      	mov	r1, r9
 800fe3c:	f7f0 fbd4 	bl	80005e8 <__aeabi_dmul>
 800fe40:	4b2c      	ldr	r3, [pc, #176]	; (800fef4 <__kernel_tan+0x39c>)
 800fe42:	2200      	movs	r2, #0
 800fe44:	f7f0 fa1a 	bl	800027c <__adddf3>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	4639      	mov	r1, r7
 800fe50:	f7f0 fa14 	bl	800027c <__adddf3>
 800fe54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe58:	f7f0 fbc6 	bl	80005e8 <__aeabi_dmul>
 800fe5c:	4642      	mov	r2, r8
 800fe5e:	462b      	mov	r3, r5
 800fe60:	f7f0 fa0c 	bl	800027c <__adddf3>
 800fe64:	e69f      	b.n	800fba6 <__kernel_tan+0x4e>
 800fe66:	4682      	mov	sl, r0
 800fe68:	468b      	mov	fp, r1
 800fe6a:	e69e      	b.n	800fbaa <__kernel_tan+0x52>
 800fe6c:	f3af 8000 	nop.w
 800fe70:	54442d18 	.word	0x54442d18
 800fe74:	3fe921fb 	.word	0x3fe921fb
 800fe78:	33145c07 	.word	0x33145c07
 800fe7c:	3c81a626 	.word	0x3c81a626
	...
 800fe88:	74bf7ad4 	.word	0x74bf7ad4
 800fe8c:	3efb2a70 	.word	0x3efb2a70
 800fe90:	32f0a7e9 	.word	0x32f0a7e9
 800fe94:	3f12b80f 	.word	0x3f12b80f
 800fe98:	1a8d1068 	.word	0x1a8d1068
 800fe9c:	3f3026f7 	.word	0x3f3026f7
 800fea0:	fee08315 	.word	0xfee08315
 800fea4:	3f57dbc8 	.word	0x3f57dbc8
 800fea8:	e96e8493 	.word	0xe96e8493
 800feac:	3f8226e3 	.word	0x3f8226e3
 800feb0:	1bb341fe 	.word	0x1bb341fe
 800feb4:	3faba1ba 	.word	0x3faba1ba
 800feb8:	db605373 	.word	0xdb605373
 800febc:	bef375cb 	.word	0xbef375cb
 800fec0:	a03792a6 	.word	0xa03792a6
 800fec4:	3f147e88 	.word	0x3f147e88
 800fec8:	f2f26501 	.word	0xf2f26501
 800fecc:	3f4344d8 	.word	0x3f4344d8
 800fed0:	c9560328 	.word	0xc9560328
 800fed4:	3f6d6d22 	.word	0x3f6d6d22
 800fed8:	8406d637 	.word	0x8406d637
 800fedc:	3f9664f4 	.word	0x3f9664f4
 800fee0:	1110fe7a 	.word	0x1110fe7a
 800fee4:	3fc11111 	.word	0x3fc11111
 800fee8:	55555563 	.word	0x55555563
 800feec:	3fd55555 	.word	0x3fd55555
 800fef0:	3e2fffff 	.word	0x3e2fffff
 800fef4:	3ff00000 	.word	0x3ff00000
 800fef8:	bff00000 	.word	0xbff00000
 800fefc:	3fe59427 	.word	0x3fe59427

0800ff00 <fabs>:
 800ff00:	ec51 0b10 	vmov	r0, r1, d0
 800ff04:	ee10 2a10 	vmov	r2, s0
 800ff08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff0c:	ec43 2b10 	vmov	d0, r2, r3
 800ff10:	4770      	bx	lr
 800ff12:	0000      	movs	r0, r0
 800ff14:	0000      	movs	r0, r0
	...

0800ff18 <floor>:
 800ff18:	ec51 0b10 	vmov	r0, r1, d0
 800ff1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ff24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ff28:	2e13      	cmp	r6, #19
 800ff2a:	ee10 5a10 	vmov	r5, s0
 800ff2e:	ee10 8a10 	vmov	r8, s0
 800ff32:	460c      	mov	r4, r1
 800ff34:	dc32      	bgt.n	800ff9c <floor+0x84>
 800ff36:	2e00      	cmp	r6, #0
 800ff38:	da14      	bge.n	800ff64 <floor+0x4c>
 800ff3a:	a333      	add	r3, pc, #204	; (adr r3, 8010008 <floor+0xf0>)
 800ff3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff40:	f7f0 f99c 	bl	800027c <__adddf3>
 800ff44:	2200      	movs	r2, #0
 800ff46:	2300      	movs	r3, #0
 800ff48:	f7f0 fdde 	bl	8000b08 <__aeabi_dcmpgt>
 800ff4c:	b138      	cbz	r0, 800ff5e <floor+0x46>
 800ff4e:	2c00      	cmp	r4, #0
 800ff50:	da57      	bge.n	8010002 <floor+0xea>
 800ff52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ff56:	431d      	orrs	r5, r3
 800ff58:	d001      	beq.n	800ff5e <floor+0x46>
 800ff5a:	4c2d      	ldr	r4, [pc, #180]	; (8010010 <floor+0xf8>)
 800ff5c:	2500      	movs	r5, #0
 800ff5e:	4621      	mov	r1, r4
 800ff60:	4628      	mov	r0, r5
 800ff62:	e025      	b.n	800ffb0 <floor+0x98>
 800ff64:	4f2b      	ldr	r7, [pc, #172]	; (8010014 <floor+0xfc>)
 800ff66:	4137      	asrs	r7, r6
 800ff68:	ea01 0307 	and.w	r3, r1, r7
 800ff6c:	4303      	orrs	r3, r0
 800ff6e:	d01f      	beq.n	800ffb0 <floor+0x98>
 800ff70:	a325      	add	r3, pc, #148	; (adr r3, 8010008 <floor+0xf0>)
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	f7f0 f981 	bl	800027c <__adddf3>
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	f7f0 fdc3 	bl	8000b08 <__aeabi_dcmpgt>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d0eb      	beq.n	800ff5e <floor+0x46>
 800ff86:	2c00      	cmp	r4, #0
 800ff88:	bfbe      	ittt	lt
 800ff8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ff8e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ff92:	19a4      	addlt	r4, r4, r6
 800ff94:	ea24 0407 	bic.w	r4, r4, r7
 800ff98:	2500      	movs	r5, #0
 800ff9a:	e7e0      	b.n	800ff5e <floor+0x46>
 800ff9c:	2e33      	cmp	r6, #51	; 0x33
 800ff9e:	dd0b      	ble.n	800ffb8 <floor+0xa0>
 800ffa0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ffa4:	d104      	bne.n	800ffb0 <floor+0x98>
 800ffa6:	ee10 2a10 	vmov	r2, s0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	f7f0 f966 	bl	800027c <__adddf3>
 800ffb0:	ec41 0b10 	vmov	d0, r0, r1
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ffbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffc0:	fa23 f707 	lsr.w	r7, r3, r7
 800ffc4:	4207      	tst	r7, r0
 800ffc6:	d0f3      	beq.n	800ffb0 <floor+0x98>
 800ffc8:	a30f      	add	r3, pc, #60	; (adr r3, 8010008 <floor+0xf0>)
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	f7f0 f955 	bl	800027c <__adddf3>
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	f7f0 fd97 	bl	8000b08 <__aeabi_dcmpgt>
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d0bf      	beq.n	800ff5e <floor+0x46>
 800ffde:	2c00      	cmp	r4, #0
 800ffe0:	da02      	bge.n	800ffe8 <floor+0xd0>
 800ffe2:	2e14      	cmp	r6, #20
 800ffe4:	d103      	bne.n	800ffee <floor+0xd6>
 800ffe6:	3401      	adds	r4, #1
 800ffe8:	ea25 0507 	bic.w	r5, r5, r7
 800ffec:	e7b7      	b.n	800ff5e <floor+0x46>
 800ffee:	2301      	movs	r3, #1
 800fff0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fff4:	fa03 f606 	lsl.w	r6, r3, r6
 800fff8:	4435      	add	r5, r6
 800fffa:	4545      	cmp	r5, r8
 800fffc:	bf38      	it	cc
 800fffe:	18e4      	addcc	r4, r4, r3
 8010000:	e7f2      	b.n	800ffe8 <floor+0xd0>
 8010002:	2500      	movs	r5, #0
 8010004:	462c      	mov	r4, r5
 8010006:	e7aa      	b.n	800ff5e <floor+0x46>
 8010008:	8800759c 	.word	0x8800759c
 801000c:	7e37e43c 	.word	0x7e37e43c
 8010010:	bff00000 	.word	0xbff00000
 8010014:	000fffff 	.word	0x000fffff

08010018 <scalbn>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	ec55 4b10 	vmov	r4, r5, d0
 801001e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010022:	4606      	mov	r6, r0
 8010024:	462b      	mov	r3, r5
 8010026:	b99a      	cbnz	r2, 8010050 <scalbn+0x38>
 8010028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801002c:	4323      	orrs	r3, r4
 801002e:	d036      	beq.n	801009e <scalbn+0x86>
 8010030:	4b39      	ldr	r3, [pc, #228]	; (8010118 <scalbn+0x100>)
 8010032:	4629      	mov	r1, r5
 8010034:	ee10 0a10 	vmov	r0, s0
 8010038:	2200      	movs	r2, #0
 801003a:	f7f0 fad5 	bl	80005e8 <__aeabi_dmul>
 801003e:	4b37      	ldr	r3, [pc, #220]	; (801011c <scalbn+0x104>)
 8010040:	429e      	cmp	r6, r3
 8010042:	4604      	mov	r4, r0
 8010044:	460d      	mov	r5, r1
 8010046:	da10      	bge.n	801006a <scalbn+0x52>
 8010048:	a32b      	add	r3, pc, #172	; (adr r3, 80100f8 <scalbn+0xe0>)
 801004a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801004e:	e03a      	b.n	80100c6 <scalbn+0xae>
 8010050:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010054:	428a      	cmp	r2, r1
 8010056:	d10c      	bne.n	8010072 <scalbn+0x5a>
 8010058:	ee10 2a10 	vmov	r2, s0
 801005c:	4620      	mov	r0, r4
 801005e:	4629      	mov	r1, r5
 8010060:	f7f0 f90c 	bl	800027c <__adddf3>
 8010064:	4604      	mov	r4, r0
 8010066:	460d      	mov	r5, r1
 8010068:	e019      	b.n	801009e <scalbn+0x86>
 801006a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801006e:	460b      	mov	r3, r1
 8010070:	3a36      	subs	r2, #54	; 0x36
 8010072:	4432      	add	r2, r6
 8010074:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010078:	428a      	cmp	r2, r1
 801007a:	dd08      	ble.n	801008e <scalbn+0x76>
 801007c:	2d00      	cmp	r5, #0
 801007e:	a120      	add	r1, pc, #128	; (adr r1, 8010100 <scalbn+0xe8>)
 8010080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010084:	da1c      	bge.n	80100c0 <scalbn+0xa8>
 8010086:	a120      	add	r1, pc, #128	; (adr r1, 8010108 <scalbn+0xf0>)
 8010088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801008c:	e018      	b.n	80100c0 <scalbn+0xa8>
 801008e:	2a00      	cmp	r2, #0
 8010090:	dd08      	ble.n	80100a4 <scalbn+0x8c>
 8010092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801009a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801009e:	ec45 4b10 	vmov	d0, r4, r5
 80100a2:	bd70      	pop	{r4, r5, r6, pc}
 80100a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80100a8:	da19      	bge.n	80100de <scalbn+0xc6>
 80100aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80100ae:	429e      	cmp	r6, r3
 80100b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80100b4:	dd0a      	ble.n	80100cc <scalbn+0xb4>
 80100b6:	a112      	add	r1, pc, #72	; (adr r1, 8010100 <scalbn+0xe8>)
 80100b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1e2      	bne.n	8010086 <scalbn+0x6e>
 80100c0:	a30f      	add	r3, pc, #60	; (adr r3, 8010100 <scalbn+0xe8>)
 80100c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c6:	f7f0 fa8f 	bl	80005e8 <__aeabi_dmul>
 80100ca:	e7cb      	b.n	8010064 <scalbn+0x4c>
 80100cc:	a10a      	add	r1, pc, #40	; (adr r1, 80100f8 <scalbn+0xe0>)
 80100ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d0b8      	beq.n	8010048 <scalbn+0x30>
 80100d6:	a10e      	add	r1, pc, #56	; (adr r1, 8010110 <scalbn+0xf8>)
 80100d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100dc:	e7b4      	b.n	8010048 <scalbn+0x30>
 80100de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80100e2:	3236      	adds	r2, #54	; 0x36
 80100e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80100e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80100ec:	4620      	mov	r0, r4
 80100ee:	4b0c      	ldr	r3, [pc, #48]	; (8010120 <scalbn+0x108>)
 80100f0:	2200      	movs	r2, #0
 80100f2:	e7e8      	b.n	80100c6 <scalbn+0xae>
 80100f4:	f3af 8000 	nop.w
 80100f8:	c2f8f359 	.word	0xc2f8f359
 80100fc:	01a56e1f 	.word	0x01a56e1f
 8010100:	8800759c 	.word	0x8800759c
 8010104:	7e37e43c 	.word	0x7e37e43c
 8010108:	8800759c 	.word	0x8800759c
 801010c:	fe37e43c 	.word	0xfe37e43c
 8010110:	c2f8f359 	.word	0xc2f8f359
 8010114:	81a56e1f 	.word	0x81a56e1f
 8010118:	43500000 	.word	0x43500000
 801011c:	ffff3cb0 	.word	0xffff3cb0
 8010120:	3c900000 	.word	0x3c900000

08010124 <_init>:
 8010124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010126:	bf00      	nop
 8010128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801012a:	bc08      	pop	{r3}
 801012c:	469e      	mov	lr, r3
 801012e:	4770      	bx	lr

08010130 <_fini>:
 8010130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010132:	bf00      	nop
 8010134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010136:	bc08      	pop	{r3}
 8010138:	469e      	mov	lr, r3
 801013a:	4770      	bx	lr
