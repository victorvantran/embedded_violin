
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800ff5c  0800ff5c  0001ff5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010860  08010860  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08010860  08010860  00020860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010868  08010868  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010868  08010868  00020868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801086c  0801086c  0002086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08010870  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f8d0  2000011c  0801098c  0003011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f9ec  0801098c  0003f9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f4ff  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056da  00000000  00000000  0005f64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002290  00000000  00000000  00064d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002078  00000000  00000000  00066fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e8c7  00000000  00000000  00069030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027def  00000000  00000000  000978f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011875c  00000000  00000000  000bf6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7e42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a8c  00000000  00000000  001d7e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff44 	.word	0x0800ff44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800ff44 	.word	0x0800ff44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <SELECT+0x18>)
 8000582:	f003 fd31 	bl	8003fe8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000586:	2001      	movs	r0, #1
 8000588:	f002 f82a 	bl	80025e0 <HAL_Delay>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	48000400 	.word	0x48000400

08000594 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <DESELECT+0x18>)
 800059e:	f003 fd23 	bl	8003fe8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f002 f81c 	bl	80025e0 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	48000400 	.word	0x48000400

080005b0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ba:	bf00      	nop
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <SPI_TxByte+0x30>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d1f8      	bne.n	80005bc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <SPI_TxByte+0x30>)
 80005d2:	f005 f902 	bl	80057da <HAL_SPI_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000c7bc 	.word	0x2000c7bc

080005e4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SPI_TxBuffer+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d1f8      	bne.n	80005f2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000600:	887a      	ldrh	r2, [r7, #2]
 8000602:	2364      	movs	r3, #100	; 0x64
 8000604:	6879      	ldr	r1, [r7, #4]
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <SPI_TxBuffer+0x30>)
 8000608:	f005 f8e7 	bl	80057da <HAL_SPI_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000c7bc 	.word	0x2000c7bc

08000618 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000622:	bf00      	nop
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <SPI_RxByte+0x34>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	2b02      	cmp	r3, #2
 8000630:	d1f8      	bne.n	8000624 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000632:	1dba      	adds	r2, r7, #6
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SPI_RxByte+0x34>)
 800063e:	f005 fa3a 	bl	8005ab6 <HAL_SPI_TransmitReceive>

	return data;
 8000642:	79bb      	ldrb	r3, [r7, #6]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000c7bc 	.word	0x2000c7bc

08000650 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000658:	f7ff ffde 	bl	8000618 <SPI_RxByte>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SD_ReadyWait+0x30>)
 8000674:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000678:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800067a:	f7ff ffcd 	bl	8000618 <SPI_RxByte>
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2bff      	cmp	r3, #255	; 0xff
 8000686:	d003      	beq.n	8000690 <SD_ReadyWait+0x24>
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <SD_ReadyWait+0x30>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f4      	bne.n	800067a <SD_ReadyWait+0xe>

	return res;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200035a0 	.word	0x200035a0

080006a0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006a6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006aa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006ac:	f7ff ff72 	bl	8000594 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	e005      	b.n	80006c2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006b6:	20ff      	movs	r0, #255	; 0xff
 80006b8:	f7ff ff7a 	bl	80005b0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3301      	adds	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	ddf6      	ble.n	80006b6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006c8:	f7ff ff56 	bl	8000578 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006e0:	2395      	movs	r3, #149	; 0x95
 80006e2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006e4:	463b      	mov	r3, r7
 80006e6:	2106      	movs	r1, #6
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff7b 	bl	80005e4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006ee:	e002      	b.n	80006f6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	f7ff ff8f 	bl	8000618 <SPI_RxByte>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d002      	beq.n	8000706 <SD_PowerOn+0x66>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000706:	f7ff ff45 	bl	8000594 <DESELECT>
	SPI_TxByte(0XFF);
 800070a:	20ff      	movs	r0, #255	; 0xff
 800070c:	f7ff ff50 	bl	80005b0 <SPI_TxByte>

	PowerFlag = 1;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <SD_PowerOn+0x80>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000139 	.word	0x20000139

08000724 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <SD_PowerOff+0x14>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	20000139 	.word	0x20000139

0800073c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <SD_CheckPower+0x14>)
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000139 	.word	0x20000139

08000754 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SD_RxDataBlock+0x58>)
 8000760:	22c8      	movs	r2, #200	; 0xc8
 8000762:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000764:	f7ff ff58 	bl	8000618 <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d103      	bne.n	800077a <SD_RxDataBlock+0x26>
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <SD_RxDataBlock+0x58>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2bfe      	cmp	r3, #254	; 0xfe
 800077e:	d001      	beq.n	8000784 <SD_RxDataBlock+0x30>
 8000780:	2300      	movs	r3, #0
 8000782:	e00f      	b.n	80007a4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff60 	bl	8000650 <SPI_RxBytePtr>
	} while(len--);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	603a      	str	r2, [r7, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f4      	bne.n	8000784 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800079a:	f7ff ff3d 	bl	8000618 <SPI_RxByte>
	SPI_RxByte();
 800079e:	f7ff ff3b 	bl	8000618 <SPI_RxByte>

	return TRUE;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200035a2 	.word	0x200035a2

080007b0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c0:	f7ff ff54 	bl	800066c <SD_ReadyWait>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2bff      	cmp	r3, #255	; 0xff
 80007c8:	d001      	beq.n	80007ce <SD_TxDataBlock+0x1e>
 80007ca:	2300      	movs	r3, #0
 80007cc:	e02f      	b.n	800082e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feed 	bl	80005b0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2bfd      	cmp	r3, #253	; 0xfd
 80007da:	d020      	beq.n	800081e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff feff 	bl	80005e4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007e6:	f7ff ff17 	bl	8000618 <SPI_RxByte>
		SPI_RxByte();
 80007ea:	f7ff ff15 	bl	8000618 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007ee:	e00b      	b.n	8000808 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007f0:	f7ff ff12 	bl	8000618 <SPI_RxByte>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d006      	beq.n	8000810 <SD_TxDataBlock+0x60>
			i++;
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	2b40      	cmp	r3, #64	; 0x40
 800080c:	d9f0      	bls.n	80007f0 <SD_TxDataBlock+0x40>
 800080e:	e000      	b.n	8000812 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000810:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000812:	bf00      	nop
 8000814:	f7ff ff00 	bl	8000618 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0fa      	beq.n	8000814 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	2b05      	cmp	r3, #5
 8000826:	d101      	bne.n	800082c <SD_TxDataBlock+0x7c>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <SD_TxDataBlock+0x7e>

	return FALSE;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	6039      	str	r1, [r7, #0]
 8000840:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000842:	f7ff ff13 	bl	800066c <SD_ReadyWait>
 8000846:	4603      	mov	r3, r0
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d001      	beq.n	8000850 <SD_SendCmd+0x1a>
 800084c:	23ff      	movs	r3, #255	; 0xff
 800084e:	e042      	b.n	80008d6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff feac 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fea6 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0c1b      	lsrs	r3, r3, #16
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fea0 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0a1b      	lsrs	r3, r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe9a 	bl	80005b0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe95 	bl	80005b0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b40      	cmp	r3, #64	; 0x40
 800088a:	d102      	bne.n	8000892 <SD_SendCmd+0x5c>
 800088c:	2395      	movs	r3, #149	; 0x95
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e007      	b.n	80008a2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b48      	cmp	r3, #72	; 0x48
 8000896:	d102      	bne.n	800089e <SD_SendCmd+0x68>
 8000898:	2387      	movs	r3, #135	; 0x87
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e001      	b.n	80008a2 <SD_SendCmd+0x6c>
	else crc = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe83 	bl	80005b0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b4c      	cmp	r3, #76	; 0x4c
 80008ae:	d101      	bne.n	80008b4 <SD_SendCmd+0x7e>
 80008b0:	f7ff feb2 	bl	8000618 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008b4:	230a      	movs	r3, #10
 80008b6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008b8:	f7ff feae 	bl	8000618 <SPI_RxByte>
 80008bc:	4603      	mov	r3, r0
 80008be:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008c0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da05      	bge.n	80008d4 <SD_SendCmd+0x9e>
 80008c8:	7bbb      	ldrb	r3, [r7, #14]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	73bb      	strb	r3, [r7, #14]
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f1      	bne.n	80008b8 <SD_SendCmd+0x82>

	return res;
 80008d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SD_disk_initialize+0x14>
 80008f0:	2301      	movs	r3, #1
 80008f2:	e0d1      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008f4:	4b6a      	ldr	r3, [pc, #424]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <SD_disk_initialize+0x2a>
 8000902:	4b67      	ldr	r3, [pc, #412]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	e0c6      	b.n	8000a98 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800090a:	f7ff fec9 	bl	80006a0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800090e:	f7ff fe33 	bl	8000578 <SELECT>

	/* check disk type */
	type = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000916:	2100      	movs	r1, #0
 8000918:	2040      	movs	r0, #64	; 0x40
 800091a:	f7ff ff8c 	bl	8000836 <SD_SendCmd>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	f040 80a1 	bne.w	8000a68 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000926:	4b5f      	ldr	r3, [pc, #380]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800092e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000932:	2048      	movs	r0, #72	; 0x48
 8000934:	f7ff ff7f 	bl	8000836 <SD_SendCmd>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d155      	bne.n	80009ea <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]
 8000942:	e00c      	b.n	800095e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000944:	7bfc      	ldrb	r4, [r7, #15]
 8000946:	f7ff fe67 	bl	8000618 <SPI_RxByte>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	4423      	add	r3, r4
 8000954:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	3301      	adds	r3, #1
 800095c:	73fb      	strb	r3, [r7, #15]
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d9ef      	bls.n	8000944 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000964:	7abb      	ldrb	r3, [r7, #10]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d17e      	bne.n	8000a68 <SD_disk_initialize+0x188>
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2baa      	cmp	r3, #170	; 0xaa
 800096e:	d17b      	bne.n	8000a68 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff5f 	bl	8000836 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d807      	bhi.n	800098e <SD_disk_initialize+0xae>
 800097e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000982:	2069      	movs	r0, #105	; 0x69
 8000984:	f7ff ff57 	bl	8000836 <SD_SendCmd>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d004      	beq.n	8000998 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1ec      	bne.n	8000970 <SD_disk_initialize+0x90>
 8000996:	e000      	b.n	800099a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000998:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800099a:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d062      	beq.n	8000a68 <SD_disk_initialize+0x188>
 80009a2:	2100      	movs	r1, #0
 80009a4:	207a      	movs	r0, #122	; 0x7a
 80009a6:	f7ff ff46 	bl	8000836 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d15b      	bne.n	8000a68 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e00c      	b.n	80009d0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009b6:	7bfc      	ldrb	r4, [r7, #15]
 80009b8:	f7ff fe2e 	bl	8000618 <SPI_RxByte>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4423      	add	r3, r4
 80009c6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d9ef      	bls.n	80009b6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009d6:	7a3b      	ldrb	r3, [r7, #8]
 80009d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SD_disk_initialize+0x104>
 80009e0:	230c      	movs	r3, #12
 80009e2:	e000      	b.n	80009e6 <SD_disk_initialize+0x106>
 80009e4:	2304      	movs	r3, #4
 80009e6:	73bb      	strb	r3, [r7, #14]
 80009e8:	e03e      	b.n	8000a68 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009ea:	2100      	movs	r1, #0
 80009ec:	2077      	movs	r0, #119	; 0x77
 80009ee:	f7ff ff22 	bl	8000836 <SD_SendCmd>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d808      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 80009f8:	2100      	movs	r1, #0
 80009fa:	2069      	movs	r0, #105	; 0x69
 80009fc:	f7ff ff1b 	bl	8000836 <SD_SendCmd>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d801      	bhi.n	8000a0a <SD_disk_initialize+0x12a>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e000      	b.n	8000a0c <SD_disk_initialize+0x12c>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d10e      	bne.n	8000a32 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a14:	2100      	movs	r1, #0
 8000a16:	2077      	movs	r0, #119	; 0x77
 8000a18:	f7ff ff0d 	bl	8000836 <SD_SendCmd>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d80e      	bhi.n	8000a40 <SD_disk_initialize+0x160>
 8000a22:	2100      	movs	r1, #0
 8000a24:	2069      	movs	r0, #105	; 0x69
 8000a26:	f7ff ff06 	bl	8000836 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d107      	bne.n	8000a40 <SD_disk_initialize+0x160>
 8000a30:	e00c      	b.n	8000a4c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a32:	2100      	movs	r1, #0
 8000a34:	2041      	movs	r0, #65	; 0x41
 8000a36:	f7ff fefe 	bl	8000836 <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d004      	beq.n	8000a4a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1e2      	bne.n	8000a0e <SD_disk_initialize+0x12e>
 8000a48:	e000      	b.n	8000a4c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a4a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SD_disk_initialize+0x1c4>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <SD_disk_initialize+0x184>
 8000a54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a58:	2050      	movs	r0, #80	; 0x50
 8000a5a:	f7ff feec 	bl	8000836 <SD_SendCmd>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_initialize+0x188>
 8000a64:	2300      	movs	r3, #0
 8000a66:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <SD_disk_initialize+0x1c8>)
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a6e:	f7ff fd91 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000a72:	f7ff fdd1 	bl	8000618 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f023 0301 	bic.w	r3, r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e001      	b.n	8000a92 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a8e:	f7ff fe49 	bl	8000724 <SD_PowerOff>
	}

	return Stat;
 8000a92:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <SD_disk_initialize+0x1c0>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	200035a2 	.word	0x200035a2
 8000aa8:	20000138 	.word	0x20000138

08000aac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SD_disk_status+0x14>
 8000abc:	2301      	movs	r3, #1
 8000abe:	e002      	b.n	8000ac6 <SD_disk_status+0x1a>
	return Stat;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <SD_disk_status+0x28>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <SD_disk_read+0x1c>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d101      	bne.n	8000af8 <SD_disk_read+0x20>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e051      	b.n	8000b9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <SD_disk_read+0xcc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SD_disk_read+0x32>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e048      	b.n	8000b9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <SD_disk_read+0xd0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <SD_disk_read+0x44>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b1c:	f7ff fd2c 	bl	8000578 <SELECT>

	if (count == 1)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d111      	bne.n	8000b4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2051      	movs	r0, #81	; 0x51
 8000b2a:	f7ff fe84 	bl	8000836 <SD_SendCmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d129      	bne.n	8000b88 <SD_disk_read+0xb0>
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f7ff fe0b 	bl	8000754 <SD_RxDataBlock>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d021      	beq.n	8000b88 <SD_disk_read+0xb0>
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	e01e      	b.n	8000b88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2052      	movs	r0, #82	; 0x52
 8000b4e:	f7ff fe72 	bl	8000836 <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d117      	bne.n	8000b88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fdf9 	bl	8000754 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00a      	beq.n	8000b7e <SD_disk_read+0xa6>
				buff += 512;
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1ed      	bne.n	8000b58 <SD_disk_read+0x80>
 8000b7c:	e000      	b.n	8000b80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	204c      	movs	r0, #76	; 0x4c
 8000b84:	f7ff fe57 	bl	8000836 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b88:	f7ff fd04 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000b8c:	f7ff fd44 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000138 	.word	0x20000138

08000bac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <SD_disk_write+0x1c>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <SD_disk_write+0x20>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e06b      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <SD_disk_write+0x100>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SD_disk_write+0x32>
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e062      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bde:	4b33      	ldr	r3, [pc, #204]	; (8000cac <SD_disk_write+0x100>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SD_disk_write+0x44>
 8000bec:	2302      	movs	r3, #2
 8000bee:	e059      	b.n	8000ca4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <SD_disk_write+0x104>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <SD_disk_write+0x56>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	025b      	lsls	r3, r3, #9
 8000c00:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c02:	f7ff fcb9 	bl	8000578 <SELECT>

	if (count == 1)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d110      	bne.n	8000c2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2058      	movs	r0, #88	; 0x58
 8000c10:	f7ff fe11 	bl	8000836 <SD_SendCmd>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d13a      	bne.n	8000c90 <SD_disk_write+0xe4>
 8000c1a:	21fe      	movs	r1, #254	; 0xfe
 8000c1c:	68b8      	ldr	r0, [r7, #8]
 8000c1e:	f7ff fdc7 	bl	80007b0 <SD_TxDataBlock>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d033      	beq.n	8000c90 <SD_disk_write+0xe4>
			count = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	e030      	b.n	8000c90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SD_disk_write+0x104>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2077      	movs	r0, #119	; 0x77
 8000c3e:	f7ff fdfa 	bl	8000836 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	2057      	movs	r0, #87	; 0x57
 8000c46:	f7ff fdf6 	bl	8000836 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2059      	movs	r0, #89	; 0x59
 8000c4e:	f7ff fdf2 	bl	8000836 <SD_SendCmd>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11b      	bne.n	8000c90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c58:	21fc      	movs	r1, #252	; 0xfc
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	f7ff fda8 	bl	80007b0 <SD_TxDataBlock>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00a      	beq.n	8000c7c <SD_disk_write+0xd0>
				buff += 512;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1ee      	bne.n	8000c58 <SD_disk_write+0xac>
 8000c7a:	e000      	b.n	8000c7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c7e:	21fd      	movs	r1, #253	; 0xfd
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff fd95 	bl	80007b0 <SD_TxDataBlock>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c90:	f7ff fc80 	bl	8000594 <DESELECT>
	SPI_RxByte();
 8000c94:	f7ff fcc0 	bl	8000618 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000138 	.word	0x20000138

08000cb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b08b      	sub	sp, #44	; 0x2c
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	603a      	str	r2, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SD_disk_ioctl+0x1e>
 8000cce:	2304      	movs	r3, #4
 8000cd0:	e115      	b.n	8000efe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b05      	cmp	r3, #5
 8000cdc:	d124      	bne.n	8000d28 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d012      	beq.n	8000d0c <SD_disk_ioctl+0x58>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	dc1a      	bgt.n	8000d20 <SD_disk_ioctl+0x6c>
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <SD_disk_ioctl+0x40>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d006      	beq.n	8000d00 <SD_disk_ioctl+0x4c>
 8000cf2:	e015      	b.n	8000d20 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cf4:	f7ff fd16 	bl	8000724 <SD_PowerOff>
			res = RES_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfe:	e0fc      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d00:	f7ff fcce 	bl	80006a0 <SD_PowerOn>
			res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0a:	e0f6      	b.n	8000efa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	1c5c      	adds	r4, r3, #1
 8000d10:	f7ff fd14 	bl	800073c <SD_CheckPower>
 8000d14:	4603      	mov	r3, r0
 8000d16:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d1e:	e0ec      	b.n	8000efa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d20:	2304      	movs	r3, #4
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d26:	e0e8      	b.n	8000efa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d28:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <SD_disk_ioctl+0x254>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SD_disk_ioctl+0x86>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0e1      	b.n	8000efe <SD_disk_ioctl+0x24a>

		SELECT();
 8000d3a:	f7ff fc1d 	bl	8000578 <SELECT>

		switch (ctrl)
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b0d      	cmp	r3, #13
 8000d42:	f200 80cb 	bhi.w	8000edc <SD_disk_ioctl+0x228>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <SD_disk_ioctl+0x98>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000e47 	.word	0x08000e47
 8000d50:	08000d85 	.word	0x08000d85
 8000d54:	08000e37 	.word	0x08000e37
 8000d58:	08000edd 	.word	0x08000edd
 8000d5c:	08000edd 	.word	0x08000edd
 8000d60:	08000edd 	.word	0x08000edd
 8000d64:	08000edd 	.word	0x08000edd
 8000d68:	08000edd 	.word	0x08000edd
 8000d6c:	08000edd 	.word	0x08000edd
 8000d70:	08000edd 	.word	0x08000edd
 8000d74:	08000edd 	.word	0x08000edd
 8000d78:	08000e59 	.word	0x08000e59
 8000d7c:	08000e7d 	.word	0x08000e7d
 8000d80:	08000ea1 	.word	0x08000ea1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d84:	2100      	movs	r1, #0
 8000d86:	2049      	movs	r0, #73	; 0x49
 8000d88:	f7ff fd55 	bl	8000836 <SD_SendCmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 80a8 	bne.w	8000ee4 <SD_disk_ioctl+0x230>
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fcda 	bl	8000754 <SD_RxDataBlock>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 809e 	beq.w	8000ee4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	099b      	lsrs	r3, r3, #6
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10e      	bne.n	8000dd0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000db2:	7d7b      	ldrb	r3, [r7, #21]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	7d3b      	ldrb	r3, [r7, #20]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dc6:	8bfb      	ldrh	r3, [r7, #30]
 8000dc8:	029a      	lsls	r2, r3, #10
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e02e      	b.n	8000e2e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dd0:	7c7b      	ldrb	r3, [r7, #17]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	7dbb      	ldrb	r3, [r7, #22]
 8000dda:	09db      	lsrs	r3, r3, #7
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	7d7b      	ldrb	r3, [r7, #21]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0306 	and.w	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3302      	adds	r3, #2
 8000df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000df8:	7d3b      	ldrb	r3, [r7, #20]
 8000dfa:	099b      	lsrs	r3, r3, #6
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	7cfb      	ldrb	r3, [r7, #19]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	7cbb      	ldrb	r3, [r7, #18]
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e20:	8bfa      	ldrh	r2, [r7, #30]
 8000e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e26:	3b09      	subs	r3, #9
 8000e28:	409a      	lsls	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e34:	e056      	b.n	8000ee4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e3c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e44:	e055      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e46:	f7ff fc11 	bl	800066c <SD_ReadyWait>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2bff      	cmp	r3, #255	; 0xff
 8000e4e:	d14b      	bne.n	8000ee8 <SD_disk_ioctl+0x234>
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e56:	e047      	b.n	8000ee8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2049      	movs	r0, #73	; 0x49
 8000e5c:	f7ff fceb 	bl	8000836 <SD_SendCmd>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d142      	bne.n	8000eec <SD_disk_ioctl+0x238>
 8000e66:	2110      	movs	r1, #16
 8000e68:	6a38      	ldr	r0, [r7, #32]
 8000e6a:	f7ff fc73 	bl	8000754 <SD_RxDataBlock>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d03b      	beq.n	8000eec <SD_disk_ioctl+0x238>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e037      	b.n	8000eec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	204a      	movs	r0, #74	; 0x4a
 8000e80:	f7ff fcd9 	bl	8000836 <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d132      	bne.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc61 	bl	8000754 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <SD_disk_ioctl+0x23c>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e027      	b.n	8000ef0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	207a      	movs	r0, #122	; 0x7a
 8000ea4:	f7ff fcc7 	bl	8000836 <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb4:	e00b      	b.n	8000ece <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eb6:	6a3c      	ldr	r4, [r7, #32]
 8000eb8:	1c63      	adds	r3, r4, #1
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	f7ff fbac 	bl	8000618 <SPI_RxByte>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d9ef      	bls.n	8000eb6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ee2:	e006      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee4:	bf00      	nop
 8000ee6:	e004      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ee8:	bf00      	nop
 8000eea:	e002      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000eec:	bf00      	nop
 8000eee:	e000      	b.n	8000ef2 <SD_disk_ioctl+0x23e>
			break;
 8000ef0:	bf00      	nop
		}

		DESELECT();
 8000ef2:	f7ff fb4f 	bl	8000594 <DESELECT>
		SPI_RxByte();
 8000ef6:	f7ff fb8f 	bl	8000618 <SPI_RxByte>
	}

	return res;
 8000efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000

08000f0c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4804      	ldr	r0, [pc, #16]	; (8000f2c <__io_putchar+0x20>)
 8000f1c:	f006 fb64 	bl	80075e8 <HAL_UART_Transmit>
	return ch;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000c820 	.word	0x2000c820

08000f30 <transmit_uart>:

void transmit_uart(char *string) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff f949 	bl	80001d0 <strlen>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, pdMS_TO_TICKS(100));
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <transmit_uart+0x28>)
 8000f4c:	f006 fb4c 	bl	80075e8 <HAL_UART_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000c820 	.word	0x2000c820

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f001 fafe 	bl	8002560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f846 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f000 fa40 	bl	80013ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 fa0e 	bl	800138c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f70:	f000 f8c8 	bl	8001104 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f74:	f000 f97a 	bl	800126c <MX_TIM1_Init>
  MX_FATFS_Init();
 8000f78:	f006 ffbc 	bl	8007ef4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000f7c:	f000 f938 	bl	80011f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f80:	f00a f8a2 	bl	800b0c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <main+0x6c>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4810      	ldr	r0, [pc, #64]	; (8000fcc <main+0x70>)
 8000f8a:	f00a f8fc 	bl	800b186 <osThreadNew>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <main+0x74>)
 8000f92:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8000f94:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <main+0x78>)
 8000f96:	2100      	movs	r1, #0
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <main+0x7c>)
 8000f9a:	f00a f8f4 	bl	800b186 <osThreadNew>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <main+0x80>)
 8000fa2:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <main+0x84>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <main+0x88>)
 8000faa:	f00a f8ec 	bl	800b186 <osThreadNew>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <main+0x8c>)
 8000fb2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <main+0x90>)
 8000fb6:	f00a f9c0 	bl	800b33a <osEventFlagsNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <main+0x94>)
 8000fbe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc0:	f00a f8a6 	bl	800b110 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x68>
 8000fc6:	bf00      	nop
 8000fc8:	080102b8 	.word	0x080102b8
 8000fcc:	08001499 	.word	0x08001499
 8000fd0:	20004658 	.word	0x20004658
 8000fd4:	080102dc 	.word	0x080102dc
 8000fd8:	080015f9 	.word	0x080015f9
 8000fdc:	200035a8 	.word	0x200035a8
 8000fe0:	08010300 	.word	0x08010300
 8000fe4:	0800165d 	.word	0x0800165d
 8000fe8:	2000c7b4 	.word	0x2000c7b4
 8000fec:	08010324 	.word	0x08010324
 8000ff0:	200035ac 	.word	0x200035ac

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0b8      	sub	sp, #224	; 0xe0
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffe:	2244      	movs	r2, #68	; 0x44
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00d ffca 	bl	800ef9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2288      	movs	r2, #136	; 0x88
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00d ffbc 	bl	800ef9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001032:	2310      	movs	r3, #16
 8001034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800104a:	230a      	movs	r3, #10
 800104c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001050:	2307      	movs	r3, #7
 8001052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001066:	4618      	mov	r0, r3
 8001068:	f003 f83a 	bl	80040e0 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001072:	f000 fb27 	bl	80016c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001076:	230f      	movs	r3, #15
 8001078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001094:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fc06 	bl	80048ac <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010a6:	f000 fb0d 	bl	80016c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80010aa:	f244 0302 	movw	r3, #16386	; 0x4002
 80010ae:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010b8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010c2:	2308      	movs	r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010d6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fe1e 	bl	8004d1c <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010e6:	f000 faed 	bl	80016c4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ee:	f002 ffa1 	bl	8004034 <HAL_PWREx_ControlVoltageScaling>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x108>
  {
    Error_Handler();
 80010f8:	f000 fae4 	bl	80016c4 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	37e0      	adds	r7, #224	; 0xe0
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800112a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_ADC1_Init+0xe0>)
 800112e:	2200      	movs	r2, #0
 8001130:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_ADC1_Init+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001146:	2204      	movs	r2, #4
 8001148:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_ADC1_Init+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001152:	2200      	movs	r2, #0
 8001154:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001158:	2201      	movs	r2, #1
 800115a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_ADC1_Init+0xe0>)
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_ADC1_Init+0xe0>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_ADC1_Init+0xe0>)
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001186:	4817      	ldr	r0, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xe0>)
 8001188:	f001 fc1c 	bl	80029c4 <HAL_ADC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001192:	f000 fa97 	bl	80016c4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <MX_ADC1_Init+0xe0>)
 80011a2:	f002 fbe5 	bl	8003970 <HAL_ADCEx_MultiModeConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011ac:	f000 fa8a 	bl	80016c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_ADC1_Init+0xe8>)
 80011b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b4:	2306      	movs	r3, #6
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011bc:	237f      	movs	r3, #127	; 0x7f
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011c0:	2304      	movs	r3, #4
 80011c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_ADC1_Init+0xe0>)
 80011ce:	f001 ff87 	bl	80030e0 <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011d8:	f000 fa74 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200045f4 	.word	0x200045f4
 80011e8:	50040000 	.word	0x50040000
 80011ec:	14f00020 	.word	0x14f00020

080011f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_SPI1_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_SPI1_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_SPI1_Init+0x74>)
 80011fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_SPI1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI1_Init+0x74>)
 800120a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800120e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_SPI1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_SPI1_Init+0x74>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI1_Init+0x74>)
 8001226:	2220      	movs	r2, #32
 8001228:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_SPI1_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI1_Init+0x74>)
 800123e:	2207      	movs	r2, #7
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_SPI1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI1_Init+0x74>)
 800124a:	2208      	movs	r2, #8
 800124c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_SPI1_Init+0x74>)
 8001250:	f004 fa20 	bl	8005694 <HAL_SPI_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 fa33 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000c7bc 	.word	0x2000c7bc
 8001268:	40013000 	.word	0x40013000

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	; 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001272:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	222c      	movs	r2, #44	; 0x2c
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f00d fe7f 	bl	800ef9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129e:	4b39      	ldr	r3, [pc, #228]	; (8001384 <MX_TIM1_Init+0x118>)
 80012a0:	4a39      	ldr	r2, [pc, #228]	; (8001388 <MX_TIM1_Init+0x11c>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <MX_TIM1_Init+0x118>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <MX_TIM1_Init+0x118>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <MX_TIM1_Init+0x118>)
 80012b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b32      	ldr	r3, [pc, #200]	; (8001384 <MX_TIM1_Init+0x118>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <MX_TIM1_Init+0x118>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <MX_TIM1_Init+0x118>)
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ca:	482e      	ldr	r0, [pc, #184]	; (8001384 <MX_TIM1_Init+0x118>)
 80012cc:	f005 f838 	bl	8006340 <HAL_TIM_PWM_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 f9f5 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4825      	ldr	r0, [pc, #148]	; (8001384 <MX_TIM1_Init+0x118>)
 80012ee:	f006 f809 	bl	8007304 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 f9e4 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fc:	2360      	movs	r3, #96	; 0x60
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001304:	2300      	movs	r3, #0
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <MX_TIM1_Init+0x118>)
 8001322:	f005 fb21 	bl	8006968 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f000 f9ca 	bl	80016c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <MX_TIM1_Init+0x118>)
 8001366:	f006 f855 	bl	8007414 <HAL_TIMEx_ConfigBreakDeadTime>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001370:	f000 f9a8 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <MX_TIM1_Init+0x118>)
 8001376:	f000 fee1 	bl	800213c <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3758      	adds	r7, #88	; 0x58
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000c764 	.word	0x2000c764
 8001388:	40012c00 	.word	0x40012c00

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <MX_USART2_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013d0:	f006 f8bc 	bl	800754c <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f000 f973 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000c820 	.word	0x2000c820
 80013e8:	40004400 	.word	0x40004400

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a22      	ldr	r2, [pc, #136]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_GPIO_Init+0xa4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_GPIO_Init+0xa4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_GPIO_Init+0xa4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	480b      	ldr	r0, [pc, #44]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001468:	f002 fdbe 	bl	8003fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	2301      	movs	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0xa8>)
 8001484:	f002 fc06 	bl	8003c94 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	48000400 	.word	0x48000400

08001498 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 80014a0:	4841      	ldr	r0, [pc, #260]	; (80015a8 <StartMainMenuTask+0x110>)
 80014a2:	f00d fe09 	bl	800f0b8 <puts>
    osDelay(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014aa:	f009 fefe 	bl	800b2aa <osDelay>

    printf("Reading song\r\n");
 80014ae:	483f      	ldr	r0, [pc, #252]	; (80015ac <StartMainMenuTask+0x114>)
 80014b0:	f00d fe02 	bl	800f0b8 <puts>
    osDelay(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b8:	f009 fef7 	bl	800b2aa <osDelay>



    // Mount
		fres = f_mount(&fs, "", 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	493c      	ldr	r1, [pc, #240]	; (80015b0 <StartMainMenuTask+0x118>)
 80014c0:	483c      	ldr	r0, [pc, #240]	; (80015b4 <StartMainMenuTask+0x11c>)
 80014c2:	f008 ffab 	bl	800a41c <f_mount>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <StartMainMenuTask+0x120>)
 80014cc:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <StartMainMenuTask+0x120>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <StartMainMenuTask+0x46>
			transmit_uart("Micro SD card is mounted successfully!\n");
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <StartMainMenuTask+0x124>)
 80014d8:	f7ff fd2a 	bl	8000f30 <transmit_uart>
 80014dc:	e006      	b.n	80014ec <StartMainMenuTask+0x54>
		} else if (fres != FR_OK) {
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <StartMainMenuTask+0x120>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <StartMainMenuTask+0x54>
			transmit_uart("Micro SD card's mount error!\n");
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <StartMainMenuTask+0x128>)
 80014e8:	f7ff fd22 	bl	8000f30 <transmit_uart>



		//fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
		//fres = f_open(&fil, "glazunov.txt", FA_READ);
		fres = f_open(&fil, "test2.bin", FA_READ);
 80014ec:	2201      	movs	r2, #1
 80014ee:	4935      	ldr	r1, [pc, #212]	; (80015c4 <StartMainMenuTask+0x12c>)
 80014f0:	4835      	ldr	r0, [pc, #212]	; (80015c8 <StartMainMenuTask+0x130>)
 80014f2:	f008 fff7 	bl	800a4e4 <f_open>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <StartMainMenuTask+0x120>)
 80014fc:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <StartMainMenuTask+0x120>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <StartMainMenuTask+0x76>
			transmit_uart("File opened for reading.\n");
 8001506:	4831      	ldr	r0, [pc, #196]	; (80015cc <StartMainMenuTask+0x134>)
 8001508:	f7ff fd12 	bl	8000f30 <transmit_uart>
 800150c:	e006      	b.n	800151c <StartMainMenuTask+0x84>
		} else if (fres != FR_OK) {
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <StartMainMenuTask+0x120>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <StartMainMenuTask+0x84>
			transmit_uart("File was not opened for reading!\n");
 8001516:	482e      	ldr	r0, [pc, #184]	; (80015d0 <StartMainMenuTask+0x138>)
 8001518:	f7ff fd0a 	bl	8000f30 <transmit_uart>





		Piece_vInit(&xPiece, &fil);
 800151c:	492a      	ldr	r1, [pc, #168]	; (80015c8 <StartMainMenuTask+0x130>)
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <StartMainMenuTask+0x13c>)
 8001520:	f000 f8d6 	bl	80016d0 <Piece_vInit>
		Piece_vSetComposition(&xPiece, &fil);
 8001524:	4928      	ldr	r1, [pc, #160]	; (80015c8 <StartMainMenuTask+0x130>)
 8001526:	482b      	ldr	r0, [pc, #172]	; (80015d4 <StartMainMenuTask+0x13c>)
 8001528:	f000 f908 	bl	800173c <Piece_vSetComposition>


		/* Close file */
		fres = f_close(&fil);
 800152c:	4826      	ldr	r0, [pc, #152]	; (80015c8 <StartMainMenuTask+0x130>)
 800152e:	f009 fbd8 	bl	800ace2 <f_close>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <StartMainMenuTask+0x120>)
 8001538:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <StartMainMenuTask+0x120>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <StartMainMenuTask+0xb2>
			transmit_uart("The file is closed.\n");
 8001542:	4825      	ldr	r0, [pc, #148]	; (80015d8 <StartMainMenuTask+0x140>)
 8001544:	f7ff fcf4 	bl	8000f30 <transmit_uart>
 8001548:	e006      	b.n	8001558 <StartMainMenuTask+0xc0>
		} else if (fres != FR_OK) {
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <StartMainMenuTask+0x120>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <StartMainMenuTask+0xc0>
			transmit_uart("The file was not closed.\n");
 8001552:	4822      	ldr	r0, [pc, #136]	; (80015dc <StartMainMenuTask+0x144>)
 8001554:	f7ff fcec 	bl	8000f30 <transmit_uart>
		}

		f_mount(NULL, "", 1);
 8001558:	2201      	movs	r2, #1
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <StartMainMenuTask+0x118>)
 800155c:	2000      	movs	r0, #0
 800155e:	f008 ff5d 	bl	800a41c <f_mount>
		if (fres == FR_OK) {
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <StartMainMenuTask+0x120>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <StartMainMenuTask+0xda>
			transmit_uart("The Micro SD card is unmounted!\n");
 800156a:	481d      	ldr	r0, [pc, #116]	; (80015e0 <StartMainMenuTask+0x148>)
 800156c:	f7ff fce0 	bl	8000f30 <transmit_uart>
 8001570:	e006      	b.n	8001580 <StartMainMenuTask+0xe8>
		} else if (fres != FR_OK) {
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <StartMainMenuTask+0x120>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <StartMainMenuTask+0xe8>
			transmit_uart("The Micro SD was not unmounted!");
 800157a:	481a      	ldr	r0, [pc, #104]	; (80015e4 <StartMainMenuTask+0x14c>)
 800157c:	f7ff fcd8 	bl	8000f30 <transmit_uart>
		}



		// Initial Command
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001580:	2100      	movs	r1, #0
 8001582:	4819      	ldr	r0, [pc, #100]	; (80015e8 <StartMainMenuTask+0x150>)
 8001584:	f004 ff34 	bl	80063f0 <HAL_TIM_PWM_Start>
		xSynchWakeTime = xTaskGetTickCount();
 8001588:	f00b ff4e 	bl	800d428 <xTaskGetTickCount>
 800158c:	4603      	mov	r3, r0
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <StartMainMenuTask+0x154>)
 8001590:	6013      	str	r3, [r2, #0]
		osEventFlagsSet(xEmbeddedViolinEventGroupHandle, (EB_PLAY_TICK | EB_PLAY_STATE));
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <StartMainMenuTask+0x158>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2106      	movs	r1, #6
 8001598:	4618      	mov	r0, r3
 800159a:	f009 ff0d 	bl	800b3b8 <osEventFlagsSet>


		// WAIT EVENT SYNCHRONIZE?

    osDelay(7000000000);
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <StartMainMenuTask+0x15c>)
 80015a0:	f009 fe83 	bl	800b2aa <osDelay>
  	printf("Main Menu\r\n");
 80015a4:	e77c      	b.n	80014a0 <StartMainMenuTask+0x8>
 80015a6:	bf00      	nop
 80015a8:	0800ffa8 	.word	0x0800ffa8
 80015ac:	0800ffb4 	.word	0x0800ffb4
 80015b0:	0800ffc4 	.word	0x0800ffc4
 80015b4:	200035b0 	.word	0x200035b0
 80015b8:	2000c8a4 	.word	0x2000c8a4
 80015bc:	0800ffc8 	.word	0x0800ffc8
 80015c0:	0800fff0 	.word	0x0800fff0
 80015c4:	08010010 	.word	0x08010010
 80015c8:	2000c8a8 	.word	0x2000c8a8
 80015cc:	0801001c 	.word	0x0801001c
 80015d0:	08010038 	.word	0x08010038
 80015d4:	200046c0 	.word	0x200046c0
 80015d8:	0801005c 	.word	0x0801005c
 80015dc:	08010074 	.word	0x08010074
 80015e0:	08010090 	.word	0x08010090
 80015e4:	080100b4 	.word	0x080100b4
 80015e8:	2000c764 	.word	0x2000c764
 80015ec:	200045ec 	.word	0x200045ec
 80015f0:	200035ac 	.word	0x200035ac
 80015f4:	a13b8600 	.word	0xa13b8600

080015f8 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <StartPlayTickTask+0x4c>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	4b10      	ldr	r3, [pc, #64]	; (8001648 <StartPlayTickTask+0x50>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	2200      	movs	r2, #0
 8001610:	f009 ff16 	bl	800b440 <osEventFlagsWait>
 8001614:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	dbf1      	blt.n	8001600 <StartPlayTickTask+0x8>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ec      	beq.n	8001600 <StartPlayTickTask+0x8>
		{
			while (running)
 8001626:	e008      	b.n	800163a <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <StartPlayTickTask+0x54>)
 800162a:	f00d fd45 	bl	800f0b8 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <StartPlayTickTask+0x58>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <StartPlayTickTask+0x5c>)
 8001636:	f00b fd33 	bl	800d0a0 <vTaskDelayUntil>
			while (running)
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <StartPlayTickTask+0x60>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f2      	bne.n	8001628 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001642:	e7dd      	b.n	8001600 <StartPlayTickTask+0x8>
 8001644:	200035ac 	.word	0x200035ac
 8001648:	08010334 	.word	0x08010334
 800164c:	080100d4 	.word	0x080100d4
 8001650:	08010338 	.word	0x08010338
 8001654:	200045ec 	.word	0x200045ec
 8001658:	2000013c 	.word	0x2000013c

0800165c <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <StartPlayState+0x38>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <StartPlayState+0x3c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	2200      	movs	r2, #0
 8001674:	f009 fee4 	bl	800b440 <osEventFlagsWait>
 8001678:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dbf1      	blt.n	8001664 <StartPlayState+0x8>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ec      	beq.n	8001664 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 800168a:	4804      	ldr	r0, [pc, #16]	; (800169c <StartPlayState+0x40>)
 800168c:	f000 f886 	bl	800179c <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001690:	e7e8      	b.n	8001664 <StartPlayState+0x8>
 8001692:	bf00      	nop
 8001694:	200035ac 	.word	0x200035ac
 8001698:	0801033c 	.word	0x0801033c
 800169c:	200046c0 	.word	0x200046c0

080016a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016b2:	f000 ff75 	bl	80025a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40001000 	.word	0x40001000

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <Piece_vInit>:
};



void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f103 0108 	add.w	r1, r3, #8
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	6838      	ldr	r0, [r7, #0]
 80016e8:	f009 f8e4 	bl	800a8b4 <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3308      	adds	r3, #8
 80016f0:	4619      	mov	r1, r3
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <Piece_vInit+0x30>)
 80016f4:	f00d fc5a 	bl	800efac <iprintf>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	080100e4 	.word	0x080100e4

08001704 <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2204      	movs	r2, #4
 800171a:	6838      	ldr	r0, [r7, #0]
 800171c:	f009 f8ca 	bl	800a8b4 <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	4619      	mov	r1, r3
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <Piece_vSetCompositionByteSize+0x34>)
 800172a:	f00d fc3f 	bl	800efac <iprintf>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	080100f0 	.word	0x080100f0

0800173c <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffdb 	bl	8001704 <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175e:	bf28      	it	cs
 8001760:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001764:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f009 f8a2 	bl	800a8b4 <f_read>
			&ulNumBytesRead);


	printf("Number of bytes read: %lu\r\n", ulNumBytesRead);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4619      	mov	r1, r3
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <Piece_vSetComposition+0x5c>)
 8001776:	f00d fc19 	bl	800efac <iprintf>

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

	pxPiece->xCapture.ulTick = osKernelGetTickCount();
 8001780:	f009 fcec 	bl	800b15c <osKernelGetTickCount>
 8001784:	4602      	mov	r2, r0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800178c:	33a0      	adds	r3, #160	; 0xa0
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	08010108 	.word	0x08010108

0800179c <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3304      	adds	r3, #4
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	f102 0194 	add.w	r1, r2, #148	; 0x94
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	440a      	add	r2, r1
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]

	printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4820      	ldr	r0, [pc, #128]	; (800184c <Piece_vParseCommand+0xb0>)
 80017ca:	f00d fbef 	bl	800efac <iprintf>
	printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	4619      	mov	r1, r3
 80017d4:	481e      	ldr	r0, [pc, #120]	; (8001850 <Piece_vParseCommand+0xb4>)
 80017d6:	f00d fbe9 	bl	800efac <iprintf>

	switch (pxPiece->xPieceInstruction.usCommand)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	791b      	ldrb	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <Piece_vParseCommand+0x4c>
 80017e2:	2b7f      	cmp	r3, #127	; 0x7f
 80017e4:	d008      	beq.n	80017f8 <Piece_vParseCommand+0x5c>
 80017e6:	e00b      	b.n	8001800 <Piece_vParseCommand+0x64>
	{
	case 0b00000000:
		printf("END OF COMPOSITION\r\n");
 80017e8:	481a      	ldr	r0, [pc, #104]	; (8001854 <Piece_vParseCommand+0xb8>)
 80017ea:	f00d fc65 	bl	800f0b8 <puts>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4819      	ldr	r0, [pc, #100]	; (8001858 <Piece_vParseCommand+0xbc>)
 80017f2:	f004 ff03 	bl	80065fc <HAL_TIM_PWM_Stop>

		return;
 80017f6:	e025      	b.n	8001844 <Piece_vParseCommand+0xa8>
	case 0b01111111:
		Piece_vConfigureAll(pxPiece);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f879 	bl	80018f0 <Piece_vConfigureAll>
		break;
 80017fe:	e01e      	b.n	800183e <Piece_vParseCommand+0xa2>
	default:
		if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fae1 	bl	8001dcc <bIsPlayCommand>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d012      	beq.n	8001836 <Piece_vParseCommand+0x9a>
		{
			uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	73fb      	strb	r3, [r7, #15]
			uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	791b      	ldrb	r3, [r3, #4]
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	73bb      	strb	r3, [r7, #14]
			Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f9be 	bl	8001bb0 <Piece_vPlayNotes>
		}
		else
		{
			printf("UNKNOWN COMMAND\r\n");
		}
		break;
 8001834:	e002      	b.n	800183c <Piece_vParseCommand+0xa0>
			printf("UNKNOWN COMMAND\r\n");
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <Piece_vParseCommand+0xc0>)
 8001838:	f00d fc3e 	bl	800f0b8 <puts>
		break;
 800183c:	bf00      	nop
	}

	Piece_vParseCommand(pxPiece);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffac 	bl	800179c <Piece_vParseCommand>
}
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	08010124 	.word	0x08010124
 8001850:	08010138 	.word	0x08010138
 8001854:	08010148 	.word	0x08010148
 8001858:	2000c764 	.word	0x2000c764
 800185c:	0801015c 	.word	0x0801015c

08001860 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800187a:	4619      	mov	r1, r3
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <Piece_vSetMovement+0x2c>)
 800187e:	f00d fb95 	bl	800efac <iprintf>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08010170 	.word	0x08010170

08001890 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80018aa:	4619      	mov	r1, r3
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <Piece_vSetBPM+0x2c>)
 80018ae:	f00d fb7d 	bl	800efac <iprintf>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	08010180 	.word	0x08010180

080018c0 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80018da:	4619      	mov	r1, r3
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <Piece_vSetDynamic+0x2c>)
 80018de:	f00d fb65 	bl	800efac <iprintf>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	0801018c 	.word	0x0801018c

080018f0 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 80018f8:	481e      	ldr	r0, [pc, #120]	; (8001974 <Piece_vConfigureAll+0x84>)
 80018fa:	f00d fbdd 	bl	800f0b8 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	1c9a      	adds	r2, r3, #2
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4619      	mov	r1, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff84 	bl	8001860 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8001958:	89bb      	ldrh	r3, [r7, #12]
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff97 	bl	8001890 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffaa 	bl	80018c0 <Piece_vSetDynamic>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0801019c 	.word	0x0801019c

08001978 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	int count = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001986:	e01e      	b.n	80019c6 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800198e:	33a0      	adds	r3, #160	; 0xa0
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800199c:	33a0      	adds	r3, #160	; 0xa0
 800199e:	601a      	str	r2, [r3, #0]
		count++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	3b32      	subs	r3, #50	; 0x32
 80019aa:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 80019ac:	2232      	movs	r2, #50	; 0x32
 80019ae:	68f9      	ldr	r1, [r7, #12]
 80019b0:	4819      	ldr	r0, [pc, #100]	; (8001a18 <Piece_vCaptureFragment+0xa0>)
 80019b2:	f00d fafb 	bl	800efac <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019bc:	33a0      	adds	r3, #160	; 0xa0
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f009 fc8d 	bl	800b2e0 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b31      	cmp	r3, #49	; 0x31
 80019ca:	dcdd      	bgt.n	8001988 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dd1b      	ble.n	8001a0a <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019d8:	33a0      	adds	r3, #160	; 0xa0
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	441a      	add	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019e6:	33a0      	adds	r3, #160	; 0xa0
 80019e8:	601a      	str	r2, [r3, #0]

		count++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <Piece_vCaptureFragment+0xa0>)
 80019f6:	f00d fad9 	bl	800efac <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a00:	33a0      	adds	r3, #160	; 0xa0
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f009 fc6b 	bl	800b2e0 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	080101b8 	.word	0x080101b8

08001a1c <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a2a:	3394      	adds	r3, #148	; 0x94
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a36:	3397      	adds	r3, #151	; 0x97
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a42:	339a      	adds	r3, #154	; 0x9a
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a4e:	339d      	adds	r3, #157	; 0x9d
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <Piece_vSetNoteGoal>:




void Piece_vSetNoteGoal(PieceHandle_t *pxPiece)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3306      	adds	r3, #6
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	440a      	add	r2, r1
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1c9a      	adds	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	88db      	ldrh	r3, [r3, #6]
 8001a8c:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	88db      	ldrh	r3, [r3, #6]
 8001a92:	0b9b      	lsrs	r3, r3, #14
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	88db      	ldrh	r3, [r3, #6]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aa6:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d856      	bhi.n	8001b5c <Piece_vSetNoteGoal+0xfc>
 8001aae:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <Piece_vSetNoteGoal+0x54>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001aeb 	.word	0x08001aeb
 8001abc:	08001b11 	.word	0x08001b11
 8001ac0:	08001b37 	.word	0x08001b37
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001aca:	3394      	adds	r3, #148	; 0x94
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad6:	3395      	adds	r3, #149	; 0x95
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ae2:	3396      	adds	r3, #150	; 0x96
 8001ae4:	7b7a      	ldrb	r2, [r7, #13]
 8001ae6:	701a      	strb	r2, [r3, #0]
		break;
 8001ae8:	e039      	b.n	8001b5e <Piece_vSetNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001af0:	3397      	adds	r3, #151	; 0x97
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001afc:	3398      	adds	r3, #152	; 0x98
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b08:	3399      	adds	r3, #153	; 0x99
 8001b0a:	7b7a      	ldrb	r2, [r7, #13]
 8001b0c:	701a      	strb	r2, [r3, #0]
		break;
 8001b0e:	e026      	b.n	8001b5e <Piece_vSetNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b16:	339a      	adds	r3, #154	; 0x9a
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b22:	339b      	adds	r3, #155	; 0x9b
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b2e:	339c      	adds	r3, #156	; 0x9c
 8001b30:	7b7a      	ldrb	r2, [r7, #13]
 8001b32:	701a      	strb	r2, [r3, #0]
		break;
 8001b34:	e013      	b.n	8001b5e <Piece_vSetNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b3c:	339d      	adds	r3, #157	; 0x9d
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b48:	339e      	adds	r3, #158	; 0x9e
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b54:	339f      	adds	r3, #159	; 0x9f
 8001b56:	7b7a      	ldrb	r2, [r7, #13]
 8001b58:	701a      	strb	r2, [r3, #0]
		break;
 8001b5a:	e000      	b.n	8001b5e <Piece_vSetNoteGoal+0xfe>
	default:
		break;
 8001b5c:	bf00      	nop
	}
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <Piece_vSetGoal>:


void Piece_vSetGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d901      	bls.n	8001b82 <Piece_vSetGoal+0x16>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	81fb      	strh	r3, [r7, #14]
 8001b86:	e008      	b.n	8001b9a <Piece_vSetGoal+0x2e>
	{
		Piece_vSetNoteGoal(pxPiece);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff69 	bl	8001a60 <Piece_vSetNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 8001b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	81fb      	strh	r3, [r7, #14]
 8001b9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbf1      	blt.n	8001b88 <Piece_vSetGoal+0x1c>
	}
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 8001bc0:	78bb      	ldrb	r3, [r7, #2]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4878      	ldr	r0, [pc, #480]	; (8001da8 <Piece_vPlayNotes+0x1f8>)
 8001bc6:	f00d f9f1 	bl	800efac <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4877      	ldr	r0, [pc, #476]	; (8001dac <Piece_vPlayNotes+0x1fc>)
 8001bd0:	f00d f9ec 	bl	800efac <iprintf>

	Piece_vResetGoal(pxPiece);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff21 	bl	8001a1c <Piece_vResetGoal>
	Piece_vSetGoal(pxPiece, ucNumNotes);
 8001bda:	78bb      	ldrb	r3, [r7, #2]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffc4 	bl	8001b6c <Piece_vSetGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f93b 	bl	8001e60 <Piece_Debug_vPrintGoal>

	if (ucNumNotes == 0)
 8001bea:	78bb      	ldrb	r3, [r7, #2]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <Piece_vPlayNotes+0x46>
	{
		printf("REST\r\n");
 8001bf0:	486f      	ldr	r0, [pc, #444]	; (8001db0 <Piece_vPlayNotes+0x200>)
 8001bf2:	f00d fa61 	bl	800f0b8 <puts>
	}


	// Wait until
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c04:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001db4 <Piece_vPlayNotes+0x204>
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001db8 <Piece_vPlayNotes+0x208>
 8001c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c14:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	2b0b      	cmp	r3, #11
 8001c1c:	f200 80be 	bhi.w	8001d9c <Piece_vPlayNotes+0x1ec>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <Piece_vPlayNotes+0x78>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c59 	.word	0x08001c59
 8001c2c:	08001c75 	.word	0x08001c75
 8001c30:	08001c91 	.word	0x08001c91
 8001c34:	08001cad 	.word	0x08001cad
 8001c38:	08001cc9 	.word	0x08001cc9
 8001c3c:	08001ce1 	.word	0x08001ce1
 8001c40:	08001cf5 	.word	0x08001cf5
 8001c44:	08001d11 	.word	0x08001d11
 8001c48:	08001d2d 	.word	0x08001d2d
 8001c4c:	08001d49 	.word	0x08001d49
 8001c50:	08001d65 	.word	0x08001d65
 8001c54:	08001d81 	.word	0x08001d81
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*32.0f));
 8001c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001dbc <Piece_vPlayNotes+0x20c>
 8001c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	ee17 1a90 	vmov	r1, s15
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fe83 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001c72:	e094      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case LONG:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*16.0f));
 8001c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c78:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 1a90 	vmov	r1, s15
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fe75 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001c8e:	e086      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case BREVE:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*8.0f));
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca0:	ee17 1a90 	vmov	r1, s15
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fe67 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001caa:	e078      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case SEMIBREVE:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*4.0f));
 8001cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cbc:	ee17 1a90 	vmov	r1, s15
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fe59 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001cc6:	e06a      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case MINIM:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*2.0f));
 8001cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ccc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd4:	ee17 1a90 	vmov	r1, s15
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff fe4d 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001cde:	e05e      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case CROTCHET:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*1.0f));
 8001ce0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce8:	ee17 1a90 	vmov	r1, s15
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fe43 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001cf2:	e054      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case QUAVER:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*0.5f));
 8001cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d04:	ee17 1a90 	vmov	r1, s15
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fe35 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001d0e:	e046      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case SEMIQUAVER:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*0.25f));
 8001d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d14:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d20:	ee17 1a90 	vmov	r1, s15
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fe27 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001d2a:	e038      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case DEMISEMIQUAVER:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*0.125f));
 8001d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d30:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8001d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3c:	ee17 1a90 	vmov	r1, s15
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff fe19 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001d46:	e02a      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case HEMIDEMISEMIQUAVER:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*0.0625f));
 8001d48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d4c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001dc0 <Piece_vPlayNotes+0x210>
 8001d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d58:	ee17 1a90 	vmov	r1, s15
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe0b 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001d62:	e01c      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case SEMIHEMIDEMISEMIQUAVER:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*0.03125f));
 8001d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d68:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001dc4 <Piece_vPlayNotes+0x214>
 8001d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d74:	ee17 1a90 	vmov	r1, s15
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff fdfd 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001d7e:	e00e      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		Piece_vCaptureFragment(pxPiece, (int32_t)(fMSPerChrochet*0.015625f));
 8001d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d84:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001dc8 <Piece_vPlayNotes+0x218>
 8001d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d90:	ee17 1a90 	vmov	r1, s15
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fdef 	bl	8001978 <Piece_vCaptureFragment>
		break;
 8001d9a:	e000      	b.n	8001d9e <Piece_vPlayNotes+0x1ee>
	default:
		break;
 8001d9c:	bf00      	nop
	}
}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	080101d0 	.word	0x080101d0
 8001dac:	080101e4 	.word	0x080101e4
 8001db0:	080101f8 	.word	0x080101f8
 8001db4:	42700000 	.word	0x42700000
 8001db8:	447a0000 	.word	0x447a0000
 8001dbc:	42000000 	.word	0x42000000
 8001dc0:	3d800000 	.word	0x3d800000
 8001dc4:	3d000000 	.word	0x3d000000
 8001dc8:	3c800000 	.word	0x3c800000

08001dcc <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	09db      	lsrs	r3, r3, #7
 8001dde:	b2db      	uxtb	r3, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	460a      	mov	r2, r1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d816      	bhi.n	8001e30 <Piece_usGetPitchTick+0x44>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <Piece_usGetPitchTick+0x1c>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e1f 	.word	0x08001e1f
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e2b 	.word	0x08001e2b
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e1c:	e00b      	b.n	8001e36 <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	73fb      	strb	r3, [r7, #15]
		break;
 8001e22:	e008      	b.n	8001e36 <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 8001e24:	2314      	movs	r3, #20
 8001e26:	73fb      	strb	r3, [r7, #15]
		break;
 8001e28:	e005      	b.n	8001e36 <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 8001e2a:	231e      	movs	r3, #30
 8001e2c:	73fb      	strb	r3, [r7, #15]
		break;
 8001e2e:	e002      	b.n	8001e36 <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
		break;
 8001e34:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b47      	cmp	r3, #71	; 0x47
 8001e42:	bf28      	it	cs
 8001e44:	2347      	movcs	r3, #71	; 0x47
 8001e46:	73fb      	strb	r3, [r7, #15]

	return pusPitchTickMap[ucPitchTickIndex];
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <Piece_usGetPitchTick+0x70>)
 8001e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	20000004 	.word	0x20000004

08001e60 <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 8001e68:	4845      	ldr	r0, [pc, #276]	; (8001f80 <Piece_Debug_vPrintGoal+0x120>)
 8001e6a:	f00d f925 	bl	800f0b8 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e74:	3394      	adds	r3, #148	; 0x94
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d029      	beq.n	8001ed0 <Piece_Debug_vPrintGoal+0x70>
	{
		htim1.Instance->CCR1 = TIM1->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e82:	3396      	adds	r3, #150	; 0x96
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4619      	mov	r1, r3
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff ffaf 	bl	8001dec <Piece_usGetPitchTick>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <Piece_Debug_vPrintGoal+0x124>)
 8001e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e94:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <Piece_Debug_vPrintGoal+0x128>)
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	6353      	str	r3, [r2, #52]	; 0x34
		htim1.Instance->CCR1 = TIM1->ARR/2;
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <Piece_Debug_vPrintGoal+0x124>)
 8001e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <Piece_Debug_vPrintGoal+0x128>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0852      	lsrs	r2, r2, #1
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34

		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001eac:	3396      	adds	r3, #150	; 0x96
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001eb8:	3396      	adds	r3, #150	; 0x96
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff ff94 	bl	8001dec <Piece_usGetPitchTick>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4621      	mov	r1, r4
 8001eca:	4830      	ldr	r0, [pc, #192]	; (8001f8c <Piece_Debug_vPrintGoal+0x12c>)
 8001ecc:	f00d f86e 	bl	800efac <iprintf>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ed6:	3397      	adds	r3, #151	; 0x97
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <Piece_Debug_vPrintGoal+0xa8>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ee4:	3399      	adds	r3, #153	; 0x99
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461c      	mov	r4, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ef0:	3399      	adds	r3, #153	; 0x99
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7ff ff78 	bl	8001dec <Piece_usGetPitchTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4621      	mov	r1, r4
 8001f02:	4823      	ldr	r0, [pc, #140]	; (8001f90 <Piece_Debug_vPrintGoal+0x130>)
 8001f04:	f00d f852 	bl	800efac <iprintf>
	}

	if (pxPiece->xGoal.xAString.bActive)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f0e:	339a      	adds	r3, #154	; 0x9a
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d014      	beq.n	8001f40 <Piece_Debug_vPrintGoal+0xe0>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f1c:	339c      	adds	r3, #156	; 0x9c
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461c      	mov	r4, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f28:	339c      	adds	r3, #156	; 0x9c
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff ff5c 	bl	8001dec <Piece_usGetPitchTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4816      	ldr	r0, [pc, #88]	; (8001f94 <Piece_Debug_vPrintGoal+0x134>)
 8001f3c:	f00d f836 	bl	800efac <iprintf>
	}

	if (pxPiece->xGoal.xEString.bActive)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f46:	339d      	adds	r3, #157	; 0x9d
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d014      	beq.n	8001f78 <Piece_Debug_vPrintGoal+0x118>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f54:	339f      	adds	r3, #159	; 0x9f
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461c      	mov	r4, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f60:	339f      	adds	r3, #159	; 0x9f
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	2003      	movs	r0, #3
 8001f68:	f7ff ff40 	bl	8001dec <Piece_usGetPitchTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4621      	mov	r1, r4
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <Piece_Debug_vPrintGoal+0x138>)
 8001f74:	f00d f81a 	bl	800efac <iprintf>
	}
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	08010210 	.word	0x08010210
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	2000c764 	.word	0x2000c764
 8001f8c:	08010218 	.word	0x08010218
 8001f90:	08010228 	.word	0x08010228
 8001f94:	08010238 	.word	0x08010238
 8001f98:	08010248 	.word	0x08010248

08001f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6613      	str	r3, [r2, #96]	; 0x60
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f001 fe31 	bl	8003c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_ADC_MspInit+0x84>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12c      	bne.n	8002068 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_ADC_MspInit+0x88>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_ADC_MspInit+0x88>)
 8002014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_ADC_MspInit+0x88>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_ADC_MspInit+0x88>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_ADC_MspInit+0x88>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_ADC_MspInit+0x88>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800203e:	2301      	movs	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002042:	230b      	movs	r3, #11
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002054:	f001 fe1e 	bl	8003c94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2105      	movs	r1, #5
 800205c:	2012      	movs	r0, #18
 800205e:	f001 fdef 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002062:	2012      	movs	r0, #18
 8002064:	f001 fe08 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	50040000 	.word	0x50040000
 8002074:	40021000 	.word	0x40021000

08002078 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_SPI_MspInit+0x7c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d128      	bne.n	80020ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_SPI_MspInit+0x80>)
 800209c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209e:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_SPI_MspInit+0x80>)
 80020a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a4:	6613      	str	r3, [r2, #96]	; 0x60
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_SPI_MspInit+0x80>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_SPI_MspInit+0x80>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_SPI_MspInit+0x80>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_SPI_MspInit+0x80>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23e0      	movs	r3, #224	; 0xe0
 80020cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020da:	2305      	movs	r3, #5
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020de:	f107 0314 	add.w	r3, r7, #20
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	f001 fdd4 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_TIM_PWM_MspInit+0x38>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10b      	bne.n	8002126 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_PWM_MspInit+0x3c>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_TIM_PWM_MspInit+0x3c>)
 8002114:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002118:	6613      	str	r3, [r2, #96]	; 0x60
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_TIM_PWM_MspInit+0x3c>)
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40012c00 	.word	0x40012c00
 8002138:	40021000 	.word	0x40021000

0800213c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <HAL_TIM_MspPostInit+0x68>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11d      	bne.n	800219a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_TIM_MspPostInit+0x6c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_TIM_MspPostInit+0x6c>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_TIM_MspPostInit+0x6c>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002188:	2301      	movs	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4619      	mov	r1, r3
 8002192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002196:	f001 fd7d 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_UART_MspInit+0x7c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d128      	bne.n	8002220 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_UART_MspInit+0x80>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_UART_MspInit+0x80>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_UART_MspInit+0x80>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_UART_MspInit+0x80>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_UART_MspInit+0x80>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_UART_MspInit+0x80>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021fe:	230c      	movs	r3, #12
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220e:	2307      	movs	r3, #7
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221c:	f001 fd3a 	bl	8003c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002220:	bf00      	nop
 8002222:	3728      	adds	r7, #40	; 0x28
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40004400 	.word	0x40004400
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002240:	2200      	movs	r2, #0
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	2036      	movs	r0, #54	; 0x36
 8002246:	f001 fcfb 	bl	8003c40 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800224a:	2036      	movs	r0, #54	; 0x36
 800224c:	f001 fd14 	bl	8003c78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_InitTick+0x9c>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_InitTick+0x9c>)
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	6593      	str	r3, [r2, #88]	; 0x58
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_InitTick+0x9c>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002268:	f107 0210 	add.w	r2, r7, #16
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fcc0 	bl	8004bf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002278:	f002 fc92 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 800227c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	4a13      	ldr	r2, [pc, #76]	; (80022d0 <HAL_InitTick+0xa0>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9b      	lsrs	r3, r3, #18
 8002288:	3b01      	subs	r3, #1
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_InitTick+0xa4>)
 800228e:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <HAL_InitTick+0xa8>)
 8002290:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_InitTick+0xa4>)
 8002294:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002298:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_InitTick+0xa4>)
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_InitTick+0xa4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_InitTick+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80022ac:	4809      	ldr	r0, [pc, #36]	; (80022d4 <HAL_InitTick+0xa4>)
 80022ae:	f003 ff75 	bl	800619c <HAL_TIM_Base_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80022b8:	4806      	ldr	r0, [pc, #24]	; (80022d4 <HAL_InitTick+0xa4>)
 80022ba:	f003 ffd1 	bl	8006260 <HAL_TIM_Base_Start_IT>
 80022be:	4603      	mov	r3, r0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3730      	adds	r7, #48	; 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	2000d8d8 	.word	0x2000d8d8
 80022d8:	40001000 	.word	0x40001000

080022dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <NMI_Handler+0x4>

080022e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <HardFault_Handler+0x4>

080022e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <MemManage_Handler+0x4>

080022ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <BusFault_Handler+0x4>

080022f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <UsageFault_Handler+0x4>

080022fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <ADC1_2_IRQHandler+0x10>)
 800230e:	f000 fcaf 	bl	8002c70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200045f4 	.word	0x200045f4

0800231c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <TIM6_DAC_IRQHandler+0x38>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <TIM6_DAC_IRQHandler+0x38>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <TIM6_DAC_IRQHandler+0x38>)
 8002332:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <TIM6_DAC_IRQHandler+0x3c>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <TIM6_DAC_IRQHandler+0x3c>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <TIM6_DAC_IRQHandler+0x3c>)
 8002346:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002348:	4804      	ldr	r0, [pc, #16]	; (800235c <TIM6_DAC_IRQHandler+0x40>)
 800234a:	f004 f9ed 	bl	8006728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200035a2 	.word	0x200035a2
 8002358:	200035a0 	.word	0x200035a0
 800235c:	2000d8d8 	.word	0x2000d8d8

08002360 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e00a      	b.n	8002388 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002372:	f3af 8000 	nop.w
 8002376:	4601      	mov	r1, r0
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	b2ca      	uxtb	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	dbf0      	blt.n	8002372 <_read+0x12>
	}

return len;
 8002390:	687b      	ldr	r3, [r7, #4]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e009      	b.n	80023c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	60ba      	str	r2, [r7, #8]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fda9 	bl	8000f0c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3301      	adds	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	dbf1      	blt.n	80023ac <_write+0x12>
	}
	return len;
 80023c8:	687b      	ldr	r3, [r7, #4]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_close>:

int _close(int file)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
	return -1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023de:	4618      	mov	r0, r3
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023fa:	605a      	str	r2, [r3, #4]
	return 0;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_isatty>:

int _isatty(int file)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	return 1;
 8002412:	2301      	movs	r3, #1
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
	return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002444:	4a14      	ldr	r2, [pc, #80]	; (8002498 <_sbrk+0x5c>)
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <_sbrk+0x60>)
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <_sbrk+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <_sbrk+0x64>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <_sbrk+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	429a      	cmp	r2, r3
 800246a:	d207      	bcs.n	800247c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800246c:	f00c fd5e 	bl	800ef2c <__errno>
 8002470:	4603      	mov	r3, r0
 8002472:	220c      	movs	r2, #12
 8002474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247a:	e009      	b.n	8002490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <_sbrk+0x64>)
 800248c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248e:	68fb      	ldr	r3, [r7, #12]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20018000 	.word	0x20018000
 800249c:	00000400 	.word	0x00000400
 80024a0:	20000140 	.word	0x20000140
 80024a4:	2000f9f0 	.word	0x2000f9f0

080024a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <SystemInit+0x5c>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <SystemInit+0x5c>)
 80024b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <SystemInit+0x60>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <SystemInit+0x60>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <SystemInit+0x60>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <SystemInit+0x60>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <SystemInit+0x60>)
 80024d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <SystemInit+0x60>)
 80024e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <SystemInit+0x60>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a07      	ldr	r2, [pc, #28]	; (8002508 <SystemInit+0x60>)
 80024ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SystemInit+0x60>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00
 8002508:	40021000 	.word	0x40021000

0800250c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800250c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002544 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002510:	f7ff ffca 	bl	80024a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002514:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002516:	e003      	b.n	8002520 <LoopCopyDataInit>

08002518 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800251a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800251c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800251e:	3104      	adds	r1, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002524:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002526:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002528:	d3f6      	bcc.n	8002518 <CopyDataInit>
	ldr	r2, =_sbss
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <LoopForever+0x12>)
	b	LoopFillZerobss
 800252c:	e002      	b.n	8002534 <LoopFillZerobss>

0800252e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800252e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002530:	f842 3b04 	str.w	r3, [r2], #4

08002534 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <LoopForever+0x16>)
	cmp	r2, r3
 8002536:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002538:	d3f9      	bcc.n	800252e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800253a:	f00c fcfd 	bl	800ef38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800253e:	f7fe fd0d 	bl	8000f5c <main>

08002542 <LoopForever>:

LoopForever:
    b LoopForever
 8002542:	e7fe      	b.n	8002542 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002544:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002548:	08010870 	.word	0x08010870
	ldr	r0, =_sdata
 800254c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002550:	2000011c 	.word	0x2000011c
	ldr	r2, =_sbss
 8002554:	2000011c 	.word	0x2000011c
	ldr	r3, = _ebss
 8002558:	2000f9ec 	.word	0x2000f9ec

0800255c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800255c:	e7fe      	b.n	800255c <ADC3_IRQHandler>
	...

08002560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_Init+0x3c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_Init+0x3c>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002576:	2003      	movs	r0, #3
 8002578:	f001 fb57 	bl	8003c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff fe57 	bl	8002230 <HAL_InitTick>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	e001      	b.n	8002592 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800258e:	f7ff fd05 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002592:	79fb      	ldrb	r3, [r7, #7]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40022000 	.word	0x40022000

080025a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_IncTick+0x20>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_IncTick+0x24>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_IncTick+0x24>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000009c 	.word	0x2000009c
 80025c4:	2000d924 	.word	0x2000d924

080025c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return uwTick;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_GetTick+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000d924 	.word	0x2000d924

080025e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e8:	f7ff ffee 	bl	80025c8 <HAL_GetTick>
 80025ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f8:	d005      	beq.n	8002606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_Delay+0x44>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002606:	bf00      	nop
 8002608:	f7ff ffde 	bl	80025c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	429a      	cmp	r2, r3
 8002616:	d8f7      	bhi.n	8002608 <HAL_Delay+0x28>
  {
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000009c 	.word	0x2000009c

08002628 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3360      	adds	r3, #96	; 0x60
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <LL_ADC_SetOffset+0x44>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	4313      	orrs	r3, r2
 80026c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	03fff000 	.word	0x03fff000

080026d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3360      	adds	r3, #96	; 0x60
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3360      	adds	r3, #96	; 0x60
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3330      	adds	r3, #48	; 0x30
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	4413      	add	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	211f      	movs	r1, #31
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	f003 011f 	and.w	r1, r3, #31
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ac:	bf00      	nop
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3314      	adds	r3, #20
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0e5b      	lsrs	r3, r3, #25
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	0d1b      	lsrs	r3, r3, #20
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2107      	movs	r1, #7
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	401a      	ands	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	0d1b      	lsrs	r3, r3, #20
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	431a      	orrs	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0318 	and.w	r3, r3, #24
 8002856:	4908      	ldr	r1, [pc, #32]	; (8002878 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002858:	40d9      	lsrs	r1, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	400b      	ands	r3, r1
 800285e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002862:	431a      	orrs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	0007ffff 	.word	0x0007ffff

0800287c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 031f 	and.w	r3, r3, #31
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6093      	str	r3, [r2, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ec:	d101      	bne.n	80028f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800293c:	d101      	bne.n	8002942 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <LL_ADC_IsEnabled+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_ADC_IsEnabled+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d101      	bne.n	800298e <LL_ADC_REG_IsConversionOngoing+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d101      	bne.n	80029b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e136      	b.n	8002c4c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fafd 	bl	8001fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff67 	bl	80028d8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff4d 	bl	80028b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff82 	bl	8002928 <LL_ADC_IsInternalRegulatorEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d115      	bne.n	8002a56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff66 	bl	8002900 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a34:	4b87      	ldr	r3, [pc, #540]	; (8002c54 <HAL_ADC_Init+0x290>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	4a87      	ldr	r2, [pc, #540]	; (8002c58 <HAL_ADC_Init+0x294>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a48:	e002      	b.n	8002a50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f9      	bne.n	8002a4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff64 	bl	8002928 <LL_ADC_IsInternalRegulatorEnabled>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10d      	bne.n	8002a82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	f043 0210 	orr.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff75 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002a8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 80cf 	bne.w	8002c3a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80cb 	bne.w	8002c3a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002aac:	f043 0202 	orr.w	r2, r3, #2
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff49 	bl	8002950 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d115      	bne.n	8002af0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ac4:	4865      	ldr	r0, [pc, #404]	; (8002c5c <HAL_ADC_Init+0x298>)
 8002ac6:	f7ff ff43 	bl	8002950 <LL_ADC_IsEnabled>
 8002aca:	4604      	mov	r4, r0
 8002acc:	4864      	ldr	r0, [pc, #400]	; (8002c60 <HAL_ADC_Init+0x29c>)
 8002ace:	f7ff ff3f 	bl	8002950 <LL_ADC_IsEnabled>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	431c      	orrs	r4, r3
 8002ad6:	4863      	ldr	r0, [pc, #396]	; (8002c64 <HAL_ADC_Init+0x2a0>)
 8002ad8:	f7ff ff3a 	bl	8002950 <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	485f      	ldr	r0, [pc, #380]	; (8002c68 <HAL_ADC_Init+0x2a4>)
 8002aec:	f7ff fd9c 	bl	8002628 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7e5b      	ldrb	r3, [r3, #25]
 8002af4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d106      	bne.n	8002b2c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	3b01      	subs	r3, #1
 8002b24:	045b      	lsls	r3, r3, #17
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_ADC_Init+0x2a8>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff08 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002b66:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff15 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002b72:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d13d      	bne.n	8002bf6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d13a      	bne.n	8002bf6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b84:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9c:	f023 0302 	bic.w	r3, r3, #2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	69b9      	ldr	r1, [r7, #24]
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d118      	bne.n	8002be6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	611a      	str	r2, [r3, #16]
 8002be4:	e007      	b.n	8002bf6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10c      	bne.n	8002c18 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	f023 010f 	bic.w	r1, r3, #15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
 8002c16:	e007      	b.n	8002c28 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 020f 	bic.w	r2, r2, #15
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f023 0303 	bic.w	r3, r3, #3
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3724      	adds	r7, #36	; 0x24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	20000094 	.word	0x20000094
 8002c58:	053e2d63 	.word	0x053e2d63
 8002c5c:	50040000 	.word	0x50040000
 8002c60:	50040100 	.word	0x50040100
 8002c64:	50040200 	.word	0x50040200
 8002c68:	50040300 	.word	0x50040300
 8002c6c:	fff0c007 	.word	0xfff0c007

08002c70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c8c:	4882      	ldr	r0, [pc, #520]	; (8002e98 <HAL_ADC_IRQHandler+0x228>)
 8002c8e:	f7ff fdf5 	bl	800287c <LL_ADC_GetMultimode>
 8002c92:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d017      	beq.n	8002cce <HAL_ADC_IRQHandler+0x5e>
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d012      	beq.n	8002cce <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fe4b 	bl	800395c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_ADC_IRQHandler+0x72>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8083 	beq.w	8002df4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d07d      	beq.n	8002df4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fd10 	bl	800273a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d062      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_ADC_IRQHandler+0x22c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d002      	beq.n	8002d30 <HAL_ADC_IRQHandler+0xc0>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_IRQHandler+0xc2>
 8002d30:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_ADC_IRQHandler+0x230>)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d008      	beq.n	8002d4c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d002      	beq.n	8002d4c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	d104      	bne.n	8002d56 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	e00c      	b.n	8002d70 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_ADC_IRQHandler+0x22c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d002      	beq.n	8002d66 <HAL_ADC_IRQHandler+0xf6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_IRQHandler+0xf8>
 8002d66:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_ADC_IRQHandler+0x230>)
 8002d68:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d135      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d12e      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fdf2 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11a      	bne.n	8002dce <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 020c 	bic.w	r2, r2, #12
 8002da6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d112      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
 8002dcc:	e00b      	b.n	8002de6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd2:	f043 0210 	orr.w	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f95c 	bl	80030a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	220c      	movs	r2, #12
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x198>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10b      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 809f 	beq.w	8002f52 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8099 	beq.w	8002f52 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fcbb 	bl	80027b8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e42:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fc76 	bl	800273a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e4e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <HAL_ADC_IRQHandler+0x22c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d002      	beq.n	8002e60 <HAL_ADC_IRQHandler+0x1f0>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	e000      	b.n	8002e62 <HAL_ADC_IRQHandler+0x1f2>
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_ADC_IRQHandler+0x230>)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d008      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d002      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b07      	cmp	r3, #7
 8002e7a:	d104      	bne.n	8002e86 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	e013      	b.n	8002eae <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_ADC_IRQHandler+0x22c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_ADC_IRQHandler+0x234>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	e007      	b.n	8002ea6 <HAL_ADC_IRQHandler+0x236>
 8002e96:	bf00      	nop
 8002e98:	50040300 	.word	0x50040300
 8002e9c:	50040100 	.word	0x50040100
 8002ea0:	50040000 	.word	0x50040000
 8002ea4:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_ADC_IRQHandler+0x42c>)
 8002ea6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d047      	beq.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_ADC_IRQHandler+0x25e>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d03f      	beq.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13a      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d133      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d12e      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fd56 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11a      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f04:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d112      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
 8002f2a:	e00b      	b.n	8002f44 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f043 0210 	orr.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fce1 	bl	800390c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2260      	movs	r2, #96	; 0x60
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x310>
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f8a0 	bl	80030b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <HAL_ADC_IRQHandler+0x340>
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fcc7 	bl	8003934 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x370>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fcb9 	bl	8003948 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d036      	beq.n	8003058 <HAL_ADC_IRQHandler+0x3e8>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d031      	beq.n	8003058 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	e014      	b.n	800302c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003008:	4825      	ldr	r0, [pc, #148]	; (80030a0 <HAL_ADC_IRQHandler+0x430>)
 800300a:	f7ff fc45 	bl	8002898 <LL_ADC_GetMultiDMATransfer>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003014:	2301      	movs	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e008      	b.n	800302c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003028:	2301      	movs	r3, #1
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10e      	bne.n	8003050 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f83e 	bl	80030cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <HAL_ADC_IRQHandler+0x424>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f043 0208 	orr.w	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fc46 	bl	8003920 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003094:	bf00      	nop
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	50040000 	.word	0x50040000
 80030a0:	50040300 	.word	0x50040300

080030a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b0b6      	sub	sp, #216	; 0xd8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x22>
 80030fe:	2302      	movs	r3, #2
 8003100:	e3c7      	b.n	8003892 <HAL_ADC_ConfigChannel+0x7b2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fc31 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 83a8 	bne.w	800386c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d824      	bhi.n	800316e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	3b02      	subs	r3, #2
 800312a:	2b03      	cmp	r3, #3
 800312c:	d81b      	bhi.n	8003166 <HAL_ADC_ConfigChannel+0x86>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <HAL_ADC_ConfigChannel+0x54>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003145 	.word	0x08003145
 8003138:	0800314d 	.word	0x0800314d
 800313c:	08003155 	.word	0x08003155
 8003140:	0800315d 	.word	0x0800315d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	220c      	movs	r2, #12
 8003148:	605a      	str	r2, [r3, #4]
          break;
 800314a:	e011      	b.n	8003170 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2212      	movs	r2, #18
 8003150:	605a      	str	r2, [r3, #4]
          break;
 8003152:	e00d      	b.n	8003170 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2218      	movs	r2, #24
 8003158:	605a      	str	r2, [r3, #4]
          break;
 800315a:	e009      	b.n	8003170 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003162:	605a      	str	r2, [r3, #4]
          break;
 8003164:	e004      	b.n	8003170 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2206      	movs	r2, #6
 800316a:	605a      	str	r2, [r3, #4]
          break;
 800316c:	e000      	b.n	8003170 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800316e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f7ff faef 	bl	8002760 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fbf5 	bl	8002976 <LL_ADC_REG_IsConversionOngoing>
 800318c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fc01 	bl	800299c <LL_ADC_INJ_IsConversionOngoing>
 800319a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800319e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f040 81a6 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 81a1 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	461a      	mov	r2, r3
 80031c0:	f7ff fb0d 	bl	80027de <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	08db      	lsrs	r3, r3, #3
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00a      	beq.n	80031fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6919      	ldr	r1, [r3, #16]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f6:	f7ff fa4b 	bl	8002690 <LL_ADC_SetOffset>
 80031fa:	e17b      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fa68 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003208:	4603      	mov	r3, r0
 800320a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x148>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fa5d 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	e01e      	b.n	8003266 <HAL_ADC_ConfigChannel+0x186>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fa52 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800324a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800324e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003256:	2320      	movs	r3, #32
 8003258:	e004      	b.n	8003264 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800325a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_ADC_ConfigChannel+0x19e>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	e018      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1d0>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800329a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e004      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80032a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d106      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fa21 	bl	8002704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fa05 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x20e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f9fa 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80032e4:	4603      	mov	r3, r0
 80032e6:	0e9b      	lsrs	r3, r3, #26
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	e01e      	b.n	800332c <HAL_ADC_ConfigChannel+0x24c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff f9ef 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800330c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e004      	b.n	800332a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x264>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	e018      	b.n	8003376 <HAL_ADC_ConfigChannel+0x296>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003358:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800335c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e004      	b.n	8003376 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800336c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003376:	429a      	cmp	r2, r3
 8003378:	d106      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	2101      	movs	r1, #1
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff f9be 	bl	8002704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2102      	movs	r1, #2
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f9a2 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003394:	4603      	mov	r3, r0
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x2d4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2102      	movs	r1, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f997 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	0e9b      	lsrs	r3, r3, #26
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	e01e      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x312>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff f98c 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e004      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80033e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_ADC_ConfigChannel+0x32a>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	e016      	b.n	8003438 <HAL_ADC_ConfigChannel+0x358>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800341c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800341e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800342a:	2320      	movs	r3, #32
 800342c:	e004      	b.n	8003438 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800342e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003438:	429a      	cmp	r2, r3
 800343a:	d106      	bne.n	800344a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2200      	movs	r2, #0
 8003442:	2102      	movs	r1, #2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f95d 	bl	8002704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2103      	movs	r1, #3
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f941 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003456:	4603      	mov	r3, r0
 8003458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x396>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2103      	movs	r1, #3
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f936 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 800346c:	4603      	mov	r3, r0
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	e017      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x3c6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2103      	movs	r1, #3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f92b 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800348e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003490:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800349c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_ADC_ConfigChannel+0x3de>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0e9b      	lsrs	r3, r3, #26
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	e011      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x402>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80034cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e003      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d106      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2103      	movs	r1, #3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f908 	bl	8002704 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fa29 	bl	8002950 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 813f 	bne.w	8003784 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	461a      	mov	r2, r3
 8003514:	f7ff f98e 	bl	8002834 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a8e      	ldr	r2, [pc, #568]	; (8003758 <HAL_ADC_ConfigChannel+0x678>)
 800351e:	4293      	cmp	r3, r2
 8003520:	f040 8130 	bne.w	8003784 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_ADC_ConfigChannel+0x46c>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	0e9b      	lsrs	r3, r3, #26
 800353a:	3301      	adds	r3, #1
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2b09      	cmp	r3, #9
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e019      	b.n	8003580 <HAL_ADC_ConfigChannel+0x4a0>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800355a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800355e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2b09      	cmp	r3, #9
 8003578:	bf94      	ite	ls
 800357a:	2301      	movls	r3, #1
 800357c:	2300      	movhi	r3, #0
 800357e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	2b00      	cmp	r3, #0
 8003582:	d079      	beq.n	8003678 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x4c0>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359e:	e015      	b.n	80035cc <HAL_ADC_ConfigChannel+0x4ec>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80035b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80035b8:	2320      	movs	r3, #32
 80035ba:	e003      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80035bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	069b      	lsls	r3, r3, #26
 80035c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x50c>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	e017      	b.n	800361c <HAL_ADC_ConfigChannel+0x53c>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x562>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	051b      	lsls	r3, r3, #20
 8003640:	e018      	b.n	8003674 <HAL_ADC_ConfigChannel+0x594>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	430b      	orrs	r3, r1
 8003676:	e080      	b.n	800377a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x5b4>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	069b      	lsls	r3, r3, #26
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003692:	e015      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x5e0>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	069b      	lsls	r3, r3, #26
 80036bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x600>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x630>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	61fb      	str	r3, [r7, #28]
  return result;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	ea42 0103 	orr.w	r1, r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_ADC_ConfigChannel+0x65c>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	3b1e      	subs	r3, #30
 8003734:	051b      	lsls	r3, r3, #20
 8003736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800373a:	e01d      	b.n	8003778 <HAL_ADC_ConfigChannel+0x698>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	613b      	str	r3, [r7, #16]
  return result;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003754:	2320      	movs	r3, #32
 8003756:	e005      	b.n	8003764 <HAL_ADC_ConfigChannel+0x684>
 8003758:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	3b1e      	subs	r3, #30
 8003772:	051b      	lsls	r3, r3, #20
 8003774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003778:	430b      	orrs	r3, r1
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	6892      	ldr	r2, [r2, #8]
 800377e:	4619      	mov	r1, r3
 8003780:	f7ff f82d 	bl	80027de <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b44      	ldr	r3, [pc, #272]	; (800389c <HAL_ADC_ConfigChannel+0x7bc>)
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d07a      	beq.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003790:	4843      	ldr	r0, [pc, #268]	; (80038a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003792:	f7fe ff6f 	bl	8002674 <LL_ADC_GetCommonPathInternalCh>
 8003796:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a41      	ldr	r2, [pc, #260]	; (80038a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d12c      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d126      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a3c      	ldr	r2, [pc, #240]	; (80038a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x6e4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <HAL_ADC_ConfigChannel+0x7cc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d15d      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037cc:	4619      	mov	r1, r3
 80037ce:	4834      	ldr	r0, [pc, #208]	; (80038a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80037d0:	f7fe ff3d 	bl	800264e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037d4:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	4a36      	ldr	r2, [pc, #216]	; (80038b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	099b      	lsrs	r3, r3, #6
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	4613      	mov	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ee:	e002      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f9      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037fc:	e040      	b.n	8003880 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2d      	ldr	r2, [pc, #180]	; (80038b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d118      	bne.n	800383a <HAL_ADC_ConfigChannel+0x75a>
 8003808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800380c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d112      	bne.n	800383a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_ADC_ConfigChannel+0x7c8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x748>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_ADC_ConfigChannel+0x7cc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d12d      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003830:	4619      	mov	r1, r3
 8003832:	481b      	ldr	r0, [pc, #108]	; (80038a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003834:	f7fe ff0b 	bl	800264e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003838:	e024      	b.n	8003884 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <HAL_ADC_ConfigChannel+0x7dc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d120      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11a      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d115      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800385a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800385e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003862:	4619      	mov	r1, r3
 8003864:	480e      	ldr	r0, [pc, #56]	; (80038a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003866:	f7fe fef2 	bl	800264e <LL_ADC_SetCommonPathInternalCh>
 800386a:	e00c      	b.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800387e:	e002      	b.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003880:	bf00      	nop
 8003882:	e000      	b.n	8003886 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003884:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800388e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003892:	4618      	mov	r0, r3
 8003894:	37d8      	adds	r7, #216	; 0xd8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	80080000 	.word	0x80080000
 80038a0:	50040300 	.word	0x50040300
 80038a4:	c7520000 	.word	0xc7520000
 80038a8:	50040000 	.word	0x50040000
 80038ac:	50040200 	.word	0x50040200
 80038b0:	20000094 	.word	0x20000094
 80038b4:	053e2d63 	.word	0x053e2d63
 80038b8:	cb840000 	.word	0xcb840000
 80038bc:	80000001 	.word	0x80000001

080038c0 <LL_ADC_IsEnabled>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_IsEnabled+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_IsEnabled+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d101      	bne.n	80038fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b09f      	sub	sp, #124	; 0x7c
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800398a:	2302      	movs	r3, #2
 800398c:	e093      	b.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003996:	2300      	movs	r3, #0
 8003998:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800399a:	2300      	movs	r3, #0
 800399c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a47      	ldr	r2, [pc, #284]	; (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d102      	bne.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039a8:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	e001      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e072      	b.n	8003ab6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ff87 	bl	80038e6 <LL_ADC_REG_IsConversionOngoing>
 80039d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ff81 	bl	80038e6 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d154      	bne.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d151      	bne.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039f0:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80039f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02c      	beq.n	8003a56 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a0e:	035b      	lsls	r3, r3, #13
 8003a10:	430b      	orrs	r3, r1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a18:	4829      	ldr	r0, [pc, #164]	; (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a1a:	f7ff ff51 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a1e:	4604      	mov	r4, r0
 8003a20:	4828      	ldr	r0, [pc, #160]	; (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a22:	f7ff ff4d 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a26:	4603      	mov	r3, r0
 8003a28:	431c      	orrs	r4, r3
 8003a2a:	4828      	ldr	r0, [pc, #160]	; (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a2c:	f7ff ff48 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4323      	orrs	r3, r4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d137      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a40:	f023 030f 	bic.w	r3, r3, #15
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	6811      	ldr	r1, [r2, #0]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	6892      	ldr	r2, [r2, #8]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a52:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a54:	e028      	b.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a62:	4817      	ldr	r0, [pc, #92]	; (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a64:	f7ff ff2c 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a68:	4604      	mov	r4, r0
 8003a6a:	4816      	ldr	r0, [pc, #88]	; (8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a6c:	f7ff ff28 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a70:	4603      	mov	r3, r0
 8003a72:	431c      	orrs	r4, r3
 8003a74:	4815      	ldr	r0, [pc, #84]	; (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a76:	f7ff ff23 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4323      	orrs	r3, r4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d112      	bne.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a8a:	f023 030f 	bic.w	r3, r3, #15
 8003a8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a92:	e009      	b.n	8003aa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003aa6:	e000      	b.n	8003aaa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ab2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	377c      	adds	r7, #124	; 0x7c
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	50040000 	.word	0x50040000
 8003ac4:	50040100 	.word	0x50040100
 8003ac8:	50040300 	.word	0x50040300
 8003acc:	50040200 	.word	0x50040200

08003ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aec:	4013      	ands	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b02:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <__NVIC_SetPriorityGrouping+0x44>)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	60d3      	str	r3, [r2, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <__NVIC_GetPriorityGrouping+0x18>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 0307 	and.w	r3, r3, #7
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db0b      	blt.n	8003b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <__NVIC_EnableIRQ+0x38>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	6039      	str	r1, [r7, #0]
 8003b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	db0a      	blt.n	8003b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	490c      	ldr	r1, [pc, #48]	; (8003bbc <__NVIC_SetPriority+0x4c>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	0112      	lsls	r2, r2, #4
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	440b      	add	r3, r1
 8003b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b98:	e00a      	b.n	8003bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4908      	ldr	r1, [pc, #32]	; (8003bc0 <__NVIC_SetPriority+0x50>)
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	3b04      	subs	r3, #4
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	440b      	add	r3, r1
 8003bae:	761a      	strb	r2, [r3, #24]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f1c3 0307 	rsb	r3, r3, #7
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf28      	it	cs
 8003be2:	2304      	movcs	r3, #4
 8003be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3304      	adds	r3, #4
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d902      	bls.n	8003bf4 <NVIC_EncodePriority+0x30>
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3b03      	subs	r3, #3
 8003bf2:	e000      	b.n	8003bf6 <NVIC_EncodePriority+0x32>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43da      	mvns	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	401a      	ands	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	4313      	orrs	r3, r2
         );
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3724      	adds	r7, #36	; 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ff4c 	bl	8003ad0 <__NVIC_SetPriorityGrouping>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c52:	f7ff ff61 	bl	8003b18 <__NVIC_GetPriorityGrouping>
 8003c56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	6978      	ldr	r0, [r7, #20]
 8003c5e:	f7ff ffb1 	bl	8003bc4 <NVIC_EncodePriority>
 8003c62:	4602      	mov	r2, r0
 8003c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff ff80 	bl	8003b70 <__NVIC_SetPriority>
}
 8003c70:	bf00      	nop
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ff54 	bl	8003b34 <__NVIC_EnableIRQ>
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca2:	e17f      	b.n	8003fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8171 	beq.w	8003f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d00b      	beq.n	8003cdc <HAL_GPIO_Init+0x48>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d007      	beq.n	8003cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cd0:	2b11      	cmp	r3, #17
 8003cd2:	d003      	beq.n	8003cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b12      	cmp	r3, #18
 8003cda:	d130      	bne.n	8003d3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d12:	2201      	movs	r2, #1
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0201 	and.w	r2, r3, #1
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	d118      	bne.n	8003d7c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003d50:	2201      	movs	r2, #1
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	08db      	lsrs	r3, r3, #3
 8003d66:	f003 0201 	and.w	r2, r3, #1
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x128>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d123      	bne.n	8003e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	220f      	movs	r2, #15
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	08da      	lsrs	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3208      	adds	r2, #8
 8003dfe:	6939      	ldr	r1, [r7, #16]
 8003e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0203 	and.w	r2, r3, #3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80ac 	beq.w	8003f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_GPIO_Init+0x330>)
 8003e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_GPIO_Init+0x330>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6613      	str	r3, [r2, #96]	; 0x60
 8003e52:	4b5c      	ldr	r3, [pc, #368]	; (8003fc4 <HAL_GPIO_Init+0x330>)
 8003e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e5e:	4a5a      	ldr	r2, [pc, #360]	; (8003fc8 <HAL_GPIO_Init+0x334>)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	3302      	adds	r3, #2
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	220f      	movs	r2, #15
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_Init+0x242>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	; (8003fcc <HAL_GPIO_Init+0x338>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_Init+0x23e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4e      	ldr	r2, [pc, #312]	; (8003fd0 <HAL_GPIO_Init+0x33c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_Init+0x23a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4d      	ldr	r2, [pc, #308]	; (8003fd4 <HAL_GPIO_Init+0x340>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x236>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4c      	ldr	r2, [pc, #304]	; (8003fd8 <HAL_GPIO_Init+0x344>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x232>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4b      	ldr	r2, [pc, #300]	; (8003fdc <HAL_GPIO_Init+0x348>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x22e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4a      	ldr	r2, [pc, #296]	; (8003fe0 <HAL_GPIO_Init+0x34c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x22a>
 8003eba:	2306      	movs	r3, #6
 8003ebc:	e00c      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003ebe:	2307      	movs	r3, #7
 8003ec0:	e00a      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e008      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e004      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_GPIO_Init+0x244>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	f002 0203 	and.w	r2, r2, #3
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ee8:	4937      	ldr	r1, [pc, #220]	; (8003fc8 <HAL_GPIO_Init+0x334>)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f1a:	4a32      	ldr	r2, [pc, #200]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f44:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f98:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <HAL_GPIO_Init+0x350>)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f47f ae78 	bne.w	8003ca4 <HAL_GPIO_Init+0x10>
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	48000400 	.word	0x48000400
 8003fd0:	48000800 	.word	0x48000800
 8003fd4:	48000c00 	.word	0x48000c00
 8003fd8:	48001000 	.word	0x48001000
 8003fdc:	48001400 	.word	0x48001400
 8003fe0:	48001800 	.word	0x48001800
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff8:	787b      	ldrb	r3, [r7, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004004:	e002      	b.n	800400c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_PWREx_GetVoltageRange+0x18>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40007000 	.word	0x40007000

08004034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004042:	d130      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800404c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004050:	d038      	beq.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2232      	movs	r2, #50	; 0x32
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0c9b      	lsrs	r3, r3, #18
 8004074:	3301      	adds	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004078:	e002      	b.n	8004080 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b01      	subs	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408c:	d102      	bne.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x60>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d110      	bne.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e00f      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d007      	beq.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040bc:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000
 80040d8:	20000094 	.word	0x20000094
 80040dc:	431bde83 	.word	0x431bde83

080040e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e3d4      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4ba1      	ldr	r3, [pc, #644]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80e4 	beq.w	80042dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_RCC_OscConfig+0x4a>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	f040 808b 	bne.w	8004238 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 8087 	bne.w	8004238 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800412a:	4b93      	ldr	r3, [pc, #588]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e3ac      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	4b8c      	ldr	r3, [pc, #560]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <HAL_RCC_OscConfig+0x7c>
 8004152:	4b89      	ldr	r3, [pc, #548]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415a:	e005      	b.n	8004168 <HAL_RCC_OscConfig+0x88>
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004168:	4293      	cmp	r3, r2
 800416a:	d223      	bcs.n	80041b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fd73 	bl	8004c5c <RCC_SetFlashLatencyFromMSIRange>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e38d      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	4b7d      	ldr	r3, [pc, #500]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a7c      	ldr	r2, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004186:	f043 0308 	orr.w	r3, r3, #8
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4977      	ldr	r1, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419e:	4b76      	ldr	r3, [pc, #472]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	4972      	ldr	r1, [pc, #456]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
 80041b2:	e025      	b.n	8004200 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b4:	4b70      	ldr	r3, [pc, #448]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a6f      	ldr	r2, [pc, #444]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041ba:	f043 0308 	orr.w	r3, r3, #8
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	496a      	ldr	r1, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d2:	4b69      	ldr	r3, [pc, #420]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	4965      	ldr	r1, [pc, #404]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fd33 	bl	8004c5c <RCC_SetFlashLatencyFromMSIRange>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e34d      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004200:	f000 fc36 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	495a      	ldr	r1, [pc, #360]	; (800437c <HAL_RCC_OscConfig+0x29c>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_OscConfig+0x2a0>)
 800421e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004220:	4b58      	ldr	r3, [pc, #352]	; (8004384 <HAL_RCC_OscConfig+0x2a4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe f803 	bl	8002230 <HAL_InitTick>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d052      	beq.n	80042da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	e331      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d032      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004240:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a4c      	ldr	r2, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800424c:	f7fe f9bc 	bl	80025c8 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004254:	f7fe f9b8 	bl	80025c8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e31a      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004266:	4b44      	ldr	r3, [pc, #272]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004272:	4b41      	ldr	r3, [pc, #260]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a40      	ldr	r2, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	493b      	ldr	r1, [pc, #236]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	4936      	ldr	r1, [pc, #216]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
 80042a4:	e01a      	b.n	80042dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a33      	ldr	r2, [pc, #204]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042b2:	f7fe f989 	bl	80025c8 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ba:	f7fe f985 	bl	80025c8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e2e7      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x1da>
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d074      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x21a>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d10e      	bne.n	8004312 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d064      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2f0>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d160      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e2c4      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x24a>
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e01d      	b.n	8004366 <HAL_RCC_OscConfig+0x286>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x26e>
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0f      	ldr	r2, [pc, #60]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800433a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0x286>
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a06      	ldr	r2, [pc, #24]	; (8004378 <HAL_RCC_OscConfig+0x298>)
 8004360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004364:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01c      	beq.n	80043a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fe f92b 	bl	80025c8 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004374:	e011      	b.n	800439a <HAL_RCC_OscConfig+0x2ba>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	08010340 	.word	0x08010340
 8004380:	20000094 	.word	0x20000094
 8004384:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004388:	f7fe f91e 	bl	80025c8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e280      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439a:	4baf      	ldr	r3, [pc, #700]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x2a8>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe f90e 	bl	80025c8 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fe f90a 	bl	80025c8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e26c      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043c2:	4ba5      	ldr	r3, [pc, #660]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2d0>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d060      	beq.n	80044a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x310>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d119      	bne.n	800441e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d116      	bne.n	800441e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f0:	4b99      	ldr	r3, [pc, #612]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_OscConfig+0x328>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e249      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4b93      	ldr	r3, [pc, #588]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	4990      	ldr	r1, [pc, #576]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441c:	e040      	b.n	80044a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004426:	4b8c      	ldr	r3, [pc, #560]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a8b      	ldr	r2, [pc, #556]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fe f8c9 	bl	80025c8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fe f8c5 	bl	80025c8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e227      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444c:	4b82      	ldr	r3, [pc, #520]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	497c      	ldr	r1, [pc, #496]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
 800446c:	e018      	b.n	80044a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b7a      	ldr	r3, [pc, #488]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a79      	ldr	r2, [pc, #484]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fe f8a5 	bl	80025c8 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe f8a1 	bl	80025c8 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e203      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004494:	4b70      	ldr	r3, [pc, #448]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03c      	beq.n	8004526 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01c      	beq.n	80044ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b4:	4b68      	ldr	r3, [pc, #416]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ba:	4a67      	ldr	r2, [pc, #412]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fe f880 	bl	80025c8 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fe f87c 	bl	80025c8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1de      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044de:	4b5e      	ldr	r3, [pc, #376]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <HAL_RCC_OscConfig+0x3ec>
 80044ec:	e01b      	b.n	8004526 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ee:	4b5a      	ldr	r3, [pc, #360]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80044f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f4:	4a58      	ldr	r2, [pc, #352]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fe:	f7fe f863 	bl	80025c8 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004506:	f7fe f85f 	bl	80025c8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1c1      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004518:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ef      	bne.n	8004506 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a6 	beq.w	8004680 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004538:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10d      	bne.n	8004560 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b44      	ldr	r3, [pc, #272]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	4a43      	ldr	r2, [pc, #268]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454e:	6593      	str	r3, [r2, #88]	; 0x58
 8004550:	4b41      	ldr	r3, [pc, #260]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455c:	2301      	movs	r3, #1
 800455e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004560:	4b3e      	ldr	r3, [pc, #248]	; (800465c <HAL_RCC_OscConfig+0x57c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d118      	bne.n	800459e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800456c:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x57c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a3a      	ldr	r2, [pc, #232]	; (800465c <HAL_RCC_OscConfig+0x57c>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004578:	f7fe f826 	bl	80025c8 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fe f822 	bl	80025c8 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e184      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004592:	4b32      	ldr	r3, [pc, #200]	; (800465c <HAL_RCC_OscConfig+0x57c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d108      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4d8>
 80045a6:	4b2c      	ldr	r3, [pc, #176]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ac:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b6:	e024      	b.n	8004602 <HAL_RCC_OscConfig+0x522>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d110      	bne.n	80045e2 <HAL_RCC_OscConfig+0x502>
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c6:	4a24      	ldr	r2, [pc, #144]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045d0:	4b21      	ldr	r3, [pc, #132]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	4a20      	ldr	r2, [pc, #128]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045e0:	e00f      	b.n	8004602 <HAL_RCC_OscConfig+0x522>
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	4a17      	ldr	r2, [pc, #92]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd ffdd 	bl	80025c8 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd ffd9 	bl	80025c8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e139      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_OscConfig+0x578>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ed      	beq.n	8004612 <HAL_RCC_OscConfig+0x532>
 8004636:	e01a      	b.n	800466e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd ffc6 	bl	80025c8 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800463e:	e00f      	b.n	8004660 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd ffc2 	bl	80025c8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	; 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d906      	bls.n	8004660 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e122      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000
 800465c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	4b90      	ldr	r3, [pc, #576]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e8      	bne.n	8004640 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b8b      	ldr	r3, [pc, #556]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	4a8a      	ldr	r2, [pc, #552]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8108 	beq.w	800489a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 80d0 	bne.w	8004834 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004694:	4b83      	ldr	r3, [pc, #524]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0203 	and.w	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d130      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	3b01      	subs	r3, #1
 80046b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d127      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d11f      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046d4:	2a07      	cmp	r2, #7
 80046d6:	bf14      	ite	ne
 80046d8:	2201      	movne	r2, #1
 80046da:	2200      	moveq	r2, #0
 80046dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046de:	4293      	cmp	r3, r2
 80046e0:	d113      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	3b01      	subs	r3, #1
 80046f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d109      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	3b01      	subs	r3, #1
 8004704:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d06e      	beq.n	80047e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	d069      	beq.n	80047e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004710:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800471c:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0b7      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800472c:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a5c      	ldr	r2, [pc, #368]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004738:	f7fd ff46 	bl	80025c8 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd ff42 	bl	80025c8 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0a4      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004752:	4b54      	ldr	r3, [pc, #336]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475e:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <HAL_RCC_OscConfig+0x7c8>)
 8004764:	4013      	ands	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800476e:	3a01      	subs	r2, #1
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004778:	0212      	lsls	r2, r2, #8
 800477a:	4311      	orrs	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004780:	0852      	lsrs	r2, r2, #1
 8004782:	3a01      	subs	r2, #1
 8004784:	0552      	lsls	r2, r2, #21
 8004786:	4311      	orrs	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800478c:	0852      	lsrs	r2, r2, #1
 800478e:	3a01      	subs	r2, #1
 8004790:	0652      	lsls	r2, r2, #25
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004798:	0912      	lsrs	r2, r2, #4
 800479a:	0452      	lsls	r2, r2, #17
 800479c:	430a      	orrs	r2, r1
 800479e:	4941      	ldr	r1, [pc, #260]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047a4:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	4b3c      	ldr	r3, [pc, #240]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a3b      	ldr	r2, [pc, #236]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047bc:	f7fd ff04 	bl	80025c8 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd ff00 	bl	80025c8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e062      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047e2:	e05a      	b.n	800489a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e059      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e8:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d152      	bne.n	800489a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047f4:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a27      	ldr	r2, [pc, #156]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800480c:	f7fd fedc 	bl	80025c8 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fd fed8 	bl	80025c8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e03a      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x734>
 8004832:	e032      	b.n	800489a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d02d      	beq.n	8004896 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483a:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004844:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d105      	bne.n	800485e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004858:	f023 0303 	bic.w	r3, r3, #3
 800485c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 8004864:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fd feab 	bl	80025c8 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd fea7 	bl	80025c8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e009      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_OscConfig+0x7c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x796>
 8004894:	e001      	b.n	800489a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	f99d808c 	.word	0xf99d808c

080048ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0c8      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c0:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d910      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b63      	ldr	r3, [pc, #396]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4961      	ldr	r1, [pc, #388]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b5f      	ldr	r3, [pc, #380]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b0      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d04c      	beq.n	8004996 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d107      	bne.n	8004914 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004904:	4b56      	ldr	r3, [pc, #344]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d121      	bne.n	8004954 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e09e      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d107      	bne.n	800492c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491c:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d115      	bne.n	8004954 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e092      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d107      	bne.n	8004944 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004934:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d109      	bne.n	8004954 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e086      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004944:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e07e      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004954:	4b42      	ldr	r3, [pc, #264]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 0203 	bic.w	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	493f      	ldr	r1, [pc, #252]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004966:	f7fd fe2f 	bl	80025c8 <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496c:	e00a      	b.n	8004984 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496e:	f7fd fe2b 	bl	80025c8 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	; 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e066      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 020c 	and.w	r2, r3, #12
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	429a      	cmp	r2, r3
 8004994:	d1eb      	bne.n	800496e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a2:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	492c      	ldr	r1, [pc, #176]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d210      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 0207 	bic.w	r2, r3, #7
 80049ca:	4924      	ldr	r1, [pc, #144]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <HAL_RCC_ClockConfig+0x1b0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e036      	b.n	8004a52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4918      	ldr	r1, [pc, #96]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0e:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4910      	ldr	r1, [pc, #64]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a22:	f000 f825 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_RCC_ClockConfig+0x1b4>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	091b      	lsrs	r3, r3, #4
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	490c      	ldr	r1, [pc, #48]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	5ccb      	ldrb	r3, [r1, r3]
 8004a36:	f003 031f 	and.w	r3, r3, #31
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fbf2 	bl	8002230 <HAL_InitTick>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a50:	7afb      	ldrb	r3, [r7, #11]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40022000 	.word	0x40022000
 8004a60:	40021000 	.word	0x40021000
 8004a64:	08010340 	.word	0x08010340
 8004a68:	20000094 	.word	0x20000094
 8004a6c:	20000098 	.word	0x20000098

08004a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d121      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d11e      	bne.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ab0:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e005      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004acc:	4a2b      	ldr	r2, [pc, #172]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d102      	bne.n	8004aee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e004      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004af6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d134      	bne.n	8004b68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004afe:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d003      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0xac>
 8004b14:	e005      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b18:	617b      	str	r3, [r7, #20]
      break;
 8004b1a:	e005      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b1e:	617b      	str	r3, [r7, #20]
      break;
 8004b20:	e002      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	617b      	str	r3, [r7, #20]
      break;
 8004b26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	3301      	adds	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	fb02 f203 	mul.w	r2, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	0e5b      	lsrs	r3, r3, #25
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b68:	69bb      	ldr	r3, [r7, #24]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	; 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	08010358 	.word	0x08010358
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000094 	.word	0x20000094

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	08010350 	.word	0x08010350

08004bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bd0:	f7ff ffda 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	0adb      	lsrs	r3, r3, #11
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004be2:	5ccb      	ldrb	r3, [r1, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	08010350 	.word	0x08010350

08004bf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	220f      	movs	r2, #15
 8004c06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0203 	and.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	08db      	lsrs	r3, r3, #3
 8004c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCC_GetClockConfig+0x60>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0207 	and.w	r2, r3, #7
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	601a      	str	r2, [r3, #0]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40022000 	.word	0x40022000

08004c5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c74:	f7ff f9d0 	bl	8004018 <HAL_PWREx_GetVoltageRange>
 8004c78:	6178      	str	r0, [r7, #20]
 8004c7a:	e014      	b.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	4a24      	ldr	r2, [pc, #144]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c86:	6593      	str	r3, [r2, #88]	; 0x58
 8004c88:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c94:	f7ff f9c0 	bl	8004018 <HAL_PWREx_GetVoltageRange>
 8004c98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cac:	d10b      	bne.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b80      	cmp	r3, #128	; 0x80
 8004cb2:	d919      	bls.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cb8:	d902      	bls.n	8004cc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cba:	2302      	movs	r3, #2
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	e013      	b.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e010      	b.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d902      	bls.n	8004cd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ccc:	2303      	movs	r3, #3
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e00a      	b.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d102      	bne.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cd8:	2302      	movs	r3, #2
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	e004      	b.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b70      	cmp	r3, #112	; 0x70
 8004ce2:	d101      	bne.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 0207 	bic.w	r2, r3, #7
 8004cf0:	4909      	ldr	r1, [pc, #36]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d001      	beq.n	8004d0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40022000 	.word	0x40022000

08004d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d24:	2300      	movs	r3, #0
 8004d26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d28:	2300      	movs	r3, #0
 8004d2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d041      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d40:	d02a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d46:	d824      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d4c:	d008      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d52:	d81e      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d5c:	d010      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d5e:	e018      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d60:	4b86      	ldr	r3, [pc, #536]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a85      	ldr	r2, [pc, #532]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d6c:	e015      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fabb 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d7e:	e00c      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3320      	adds	r3, #32
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fba6 	bl	80054d8 <RCCEx_PLLSAI2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	74fb      	strb	r3, [r7, #19]
      break;
 8004d96:	e000      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da0:	4b76      	ldr	r3, [pc, #472]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dae:	4973      	ldr	r1, [pc, #460]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004db6:	e001      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d041      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dcc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dd0:	d02a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dd6:	d824      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ddc:	d008      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de2:	d81e      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dec:	d010      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dee:	e018      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004df0:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a61      	ldr	r2, [pc, #388]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dfc:	e015      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fa73 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e0e:	e00c      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3320      	adds	r3, #32
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fb5e 	bl	80054d8 <RCCEx_PLLSAI2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e20:	e003      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	74fb      	strb	r3, [r7, #19]
      break;
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e30:	4b52      	ldr	r3, [pc, #328]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3e:	494f      	ldr	r1, [pc, #316]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e46:	e001      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80a0 	beq.w	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e5e:	4b47      	ldr	r3, [pc, #284]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	4a40      	ldr	r2, [pc, #256]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e80:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e9c:	f7fd fb94 	bl	80025c8 <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ea2:	e009      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fd fb90 	bl	80025c8 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d902      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb6:	e005      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb8:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ef      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d15c      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eca:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01f      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d019      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f26:	f7fd fb4f 	bl	80025c8 <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2c:	e00b      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fd fb4b 	bl	80025c8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d902      	bls.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	74fb      	strb	r3, [r7, #19]
            break;
 8004f44:	e006      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ec      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f6a:	4904      	ldr	r1, [pc, #16]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f72:	e009      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	74bb      	strb	r3, [r7, #18]
 8004f78:	e006      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f88:	7c7b      	ldrb	r3, [r7, #17]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d105      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8e:	4b9e      	ldr	r3, [pc, #632]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	4a9d      	ldr	r2, [pc, #628]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa6:	4b98      	ldr	r3, [pc, #608]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f023 0203 	bic.w	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	4994      	ldr	r1, [pc, #592]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f023 020c 	bic.w	r2, r3, #12
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	498c      	ldr	r1, [pc, #560]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fea:	4b87      	ldr	r3, [pc, #540]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	4983      	ldr	r1, [pc, #524]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500c:	4b7e      	ldr	r3, [pc, #504]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	497b      	ldr	r1, [pc, #492]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800502e:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503c:	4972      	ldr	r1, [pc, #456]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005050:	4b6d      	ldr	r3, [pc, #436]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	496a      	ldr	r1, [pc, #424]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005072:	4b65      	ldr	r3, [pc, #404]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005080:	4961      	ldr	r1, [pc, #388]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005094:	4b5c      	ldr	r3, [pc, #368]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	4959      	ldr	r1, [pc, #356]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b6:	4b54      	ldr	r3, [pc, #336]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c4:	4950      	ldr	r1, [pc, #320]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050d8:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	4948      	ldr	r1, [pc, #288]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050fa:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	493f      	ldr	r1, [pc, #252]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d028      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800511c:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512a:	4937      	ldr	r1, [pc, #220]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513a:	d106      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800513c:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a31      	ldr	r2, [pc, #196]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005146:	60d3      	str	r3, [r2, #12]
 8005148:	e011      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005152:	d10c      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	2101      	movs	r1, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f8c8 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d028      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	491f      	ldr	r1, [pc, #124]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005198:	d106      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a4:	60d3      	str	r3, [r2, #12]
 80051a6:	e011      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051b0:	d10c      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 f899 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
 80051ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02b      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e6:	4908      	ldr	r1, [pc, #32]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051f6:	d109      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f8:	4b03      	ldr	r3, [pc, #12]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4a02      	ldr	r2, [pc, #8]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005202:	60d3      	str	r3, [r2, #12]
 8005204:	e014      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3304      	adds	r3, #4
 800521a:	2101      	movs	r1, #1
 800521c:	4618      	mov	r0, r3
 800521e:	f000 f867 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8005222:	4603      	mov	r3, r0
 8005224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005226:	7cfb      	ldrb	r3, [r7, #19]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02f      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800523c:	4b2b      	ldr	r3, [pc, #172]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524a:	4928      	ldr	r1, [pc, #160]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525a:	d10d      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	2102      	movs	r1, #2
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f844 	bl	80052f0 <RCCEx_PLLSAI1_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d014      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	74bb      	strb	r3, [r7, #18]
 8005276:	e011      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005280:	d10c      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3320      	adds	r3, #32
 8005286:	2102      	movs	r1, #2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f925 	bl	80054d8 <RCCEx_PLLSAI2_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005292:	7cfb      	ldrb	r3, [r7, #19]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b6:	490d      	ldr	r1, [pc, #52]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00b      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052da:	4904      	ldr	r1, [pc, #16]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000

080052f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052fe:	4b75      	ldr	r3, [pc, #468]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d018      	beq.n	800533c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800530a:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d10d      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
       ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005322:	4b6c      	ldr	r3, [pc, #432]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
       ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d047      	beq.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	e044      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d018      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x86>
 8005344:	2b03      	cmp	r3, #3
 8005346:	d825      	bhi.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
 8005348:	2b01      	cmp	r3, #1
 800534a:	d002      	beq.n	8005352 <RCCEx_PLLSAI1_Config+0x62>
 800534c:	2b02      	cmp	r3, #2
 800534e:	d009      	beq.n	8005364 <RCCEx_PLLSAI1_Config+0x74>
 8005350:	e020      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005352:	4b60      	ldr	r3, [pc, #384]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d11d      	bne.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005362:	e01a      	b.n	800539a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005364:	4b5b      	ldr	r3, [pc, #364]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d116      	bne.n	800539e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e013      	b.n	800539e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005376:	4b57      	ldr	r3, [pc, #348]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005382:	4b54      	ldr	r3, [pc, #336]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005392:	e006      	b.n	80053a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      break;
 8005398:	e004      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053aa:	4b4a      	ldr	r3, [pc, #296]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	430b      	orrs	r3, r1
 80053c0:	4944      	ldr	r1, [pc, #272]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d17d      	bne.n	80054c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053cc:	4b41      	ldr	r3, [pc, #260]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a40      	ldr	r2, [pc, #256]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d8:	f7fd f8f6 	bl	80025c8 <HAL_GetTick>
 80053dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053de:	e009      	b.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053e0:	f7fd f8f2 	bl	80025c8 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d902      	bls.n	80053f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	73fb      	strb	r3, [r7, #15]
        break;
 80053f2:	e005      	b.n	8005400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053f4:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ef      	bne.n	80053e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d160      	bne.n	80054c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d111      	bne.n	8005430 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	0211      	lsls	r1, r2, #8
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	0912      	lsrs	r2, r2, #4
 8005424:	0452      	lsls	r2, r2, #17
 8005426:	430a      	orrs	r2, r1
 8005428:	492a      	ldr	r1, [pc, #168]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	610b      	str	r3, [r1, #16]
 800542e:	e027      	b.n	8005480 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d112      	bne.n	800545c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800543e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	0211      	lsls	r1, r2, #8
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6912      	ldr	r2, [r2, #16]
 800544c:	0852      	lsrs	r2, r2, #1
 800544e:	3a01      	subs	r2, #1
 8005450:	0552      	lsls	r2, r2, #21
 8005452:	430a      	orrs	r2, r1
 8005454:	491f      	ldr	r1, [pc, #124]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005456:	4313      	orrs	r3, r2
 8005458:	610b      	str	r3, [r1, #16]
 800545a:	e011      	b.n	8005480 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545c:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005464:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6892      	ldr	r2, [r2, #8]
 800546c:	0211      	lsls	r1, r2, #8
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6952      	ldr	r2, [r2, #20]
 8005472:	0852      	lsrs	r2, r2, #1
 8005474:	3a01      	subs	r2, #1
 8005476:	0652      	lsls	r2, r2, #25
 8005478:	430a      	orrs	r2, r1
 800547a:	4916      	ldr	r1, [pc, #88]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005486:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800548a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548c:	f7fd f89c 	bl	80025c8 <HAL_GetTick>
 8005490:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005492:	e009      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005494:	f7fd f898 	bl	80025c8 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d902      	bls.n	80054a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	73fb      	strb	r3, [r7, #15]
          break;
 80054a6:	e005      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ef      	beq.n	8005494 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	4904      	ldr	r1, [pc, #16]	; (80054d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000

080054d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054e6:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d018      	beq.n	8005524 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054f2:	4b67      	ldr	r3, [pc, #412]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0203 	and.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d10d      	bne.n	800551e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
       ||
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800550a:	4b61      	ldr	r3, [pc, #388]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
       ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d047      	beq.n	80055ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
 8005522:	e044      	b.n	80055ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d018      	beq.n	800555e <RCCEx_PLLSAI2_Config+0x86>
 800552c:	2b03      	cmp	r3, #3
 800552e:	d825      	bhi.n	800557c <RCCEx_PLLSAI2_Config+0xa4>
 8005530:	2b01      	cmp	r3, #1
 8005532:	d002      	beq.n	800553a <RCCEx_PLLSAI2_Config+0x62>
 8005534:	2b02      	cmp	r3, #2
 8005536:	d009      	beq.n	800554c <RCCEx_PLLSAI2_Config+0x74>
 8005538:	e020      	b.n	800557c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800553a:	4b55      	ldr	r3, [pc, #340]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d11d      	bne.n	8005582 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800554a:	e01a      	b.n	8005582 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800554c:	4b50      	ldr	r3, [pc, #320]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	2b00      	cmp	r3, #0
 8005556:	d116      	bne.n	8005586 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800555c:	e013      	b.n	8005586 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800555e:	4b4c      	ldr	r3, [pc, #304]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10f      	bne.n	800558a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800556a:	4b49      	ldr	r3, [pc, #292]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800557a:	e006      	b.n	800558a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	e004      	b.n	800558c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800558a:	bf00      	nop
    }

    if(status == HAL_OK)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	430b      	orrs	r3, r1
 80055a8:	4939      	ldr	r1, [pc, #228]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d167      	bne.n	8005684 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055b4:	4b36      	ldr	r3, [pc, #216]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a35      	ldr	r2, [pc, #212]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c0:	f7fd f802 	bl	80025c8 <HAL_GetTick>
 80055c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055c6:	e009      	b.n	80055dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055c8:	f7fc fffe 	bl	80025c8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d902      	bls.n	80055dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	73fb      	strb	r3, [r7, #15]
        break;
 80055da:	e005      	b.n	80055e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055dc:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1ef      	bne.n	80055c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d14a      	bne.n	8005684 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d111      	bne.n	8005618 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055f4:	4b26      	ldr	r3, [pc, #152]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6892      	ldr	r2, [r2, #8]
 8005604:	0211      	lsls	r1, r2, #8
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	68d2      	ldr	r2, [r2, #12]
 800560a:	0912      	lsrs	r2, r2, #4
 800560c:	0452      	lsls	r2, r2, #17
 800560e:	430a      	orrs	r2, r1
 8005610:	491f      	ldr	r1, [pc, #124]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005612:	4313      	orrs	r3, r2
 8005614:	614b      	str	r3, [r1, #20]
 8005616:	e011      	b.n	800563c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	0211      	lsls	r1, r2, #8
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6912      	ldr	r2, [r2, #16]
 800562e:	0852      	lsrs	r2, r2, #1
 8005630:	3a01      	subs	r2, #1
 8005632:	0652      	lsls	r2, r2, #25
 8005634:	430a      	orrs	r2, r1
 8005636:	4916      	ldr	r1, [pc, #88]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005638:	4313      	orrs	r3, r2
 800563a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a13      	ldr	r2, [pc, #76]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fc ffbe 	bl	80025c8 <HAL_GetTick>
 800564c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800564e:	e009      	b.n	8005664 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005650:	f7fc ffba 	bl	80025c8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d902      	bls.n	8005664 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	73fb      	strb	r3, [r7, #15]
          break;
 8005662:	e005      	b.n	8005670 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ef      	beq.n	8005650 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	4904      	ldr	r1, [pc, #16]	; (8005690 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005680:	4313      	orrs	r3, r2
 8005682:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000

08005694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e095      	b.n	80057d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d009      	beq.n	80056cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	e005      	b.n	80056cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc fcc6 	bl	8002078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800570c:	d902      	bls.n	8005714 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	e002      	b.n	800571a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005718:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005722:	d007      	beq.n	8005734 <HAL_SPI_Init+0xa0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800572c:	d002      	beq.n	8005734 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	ea42 0103 	orr.w	r1, r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	0c1b      	lsrs	r3, r3, #16
 8005790:	f003 0204 	and.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80057b0:	ea42 0103 	orr.w	r1, r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b088      	sub	sp, #32
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	603b      	str	r3, [r7, #0]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_SPI_Transmit+0x22>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e158      	b.n	8005aae <HAL_SPI_Transmit+0x2d4>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005804:	f7fc fee0 	bl	80025c8 <HAL_GetTick>
 8005808:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	d002      	beq.n	8005820 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800581e:	e13d      	b.n	8005a9c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_SPI_Transmit+0x52>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005830:	e134      	b.n	8005a9c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2203      	movs	r2, #3
 8005836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587c:	d10f      	bne.n	800589e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d007      	beq.n	80058bc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c4:	d94b      	bls.n	800595e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_SPI_Transmit+0xfa>
 80058ce:	8afb      	ldrh	r3, [r7, #22]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d13e      	bne.n	8005952 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	881a      	ldrh	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	1c9a      	adds	r2, r3, #2
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058f8:	e02b      	b.n	8005952 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b02      	cmp	r3, #2
 8005906:	d112      	bne.n	800592e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	881a      	ldrh	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800592c:	e011      	b.n	8005952 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800592e:	f7fc fe4b 	bl	80025c8 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d803      	bhi.n	8005946 <HAL_SPI_Transmit+0x16c>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005944:	d102      	bne.n	800594c <HAL_SPI_Transmit+0x172>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005950:	e0a4      	b.n	8005a9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ce      	bne.n	80058fa <HAL_SPI_Transmit+0x120>
 800595c:	e07c      	b.n	8005a58 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_SPI_Transmit+0x192>
 8005966:	8afb      	ldrh	r3, [r7, #22]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d170      	bne.n	8005a4e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d912      	bls.n	800599c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	881a      	ldrh	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b02      	subs	r3, #2
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	87da      	strh	r2, [r3, #62]	; 0x3e
 800599a:	e058      	b.n	8005a4e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059c2:	e044      	b.n	8005a4e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d12b      	bne.n	8005a2a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d912      	bls.n	8005a02 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	881a      	ldrh	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b02      	subs	r3, #2
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a00:	e025      	b.n	8005a4e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	7812      	ldrb	r2, [r2, #0]
 8005a0e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a28:	e011      	b.n	8005a4e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a2a:	f7fc fdcd 	bl	80025c8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d803      	bhi.n	8005a42 <HAL_SPI_Transmit+0x268>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a40:	d102      	bne.n	8005a48 <HAL_SPI_Transmit+0x26e>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a4c:	e026      	b.n	8005a9c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1b5      	bne.n	80059c4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fb57 	bl	8006110 <SPI_EndRxTxTransaction>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e000      	b.n	8005a9c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08a      	sub	sp, #40	; 0x28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x26>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e1fb      	b.n	8005ed4 <HAL_SPI_TransmitReceive+0x41e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae4:	f7fc fd70 	bl	80025c8 <HAL_GetTick>
 8005ae8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005af0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005af8:	887b      	ldrh	r3, [r7, #2]
 8005afa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005afc:	887b      	ldrh	r3, [r7, #2]
 8005afe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b00:	7efb      	ldrb	r3, [r7, #27]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d00e      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x6e>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0c:	d106      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x66>
 8005b16:	7efb      	ldrb	r3, [r7, #27]
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d003      	beq.n	8005b24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b22:	e1cd      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x80>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_TransmitReceive+0x80>
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005b3c:	e1c0      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d003      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2205      	movs	r2, #5
 8005b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	887a      	ldrh	r2, [r7, #2]
 8005b62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	887a      	ldrh	r2, [r7, #2]
 8005b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	887a      	ldrh	r2, [r7, #2]
 8005b78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	887a      	ldrh	r2, [r7, #2]
 8005b7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b94:	d802      	bhi.n	8005b9c <HAL_SPI_TransmitReceive+0xe6>
 8005b96:	8a3b      	ldrh	r3, [r7, #16]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d908      	bls.n	8005bae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005baa:	605a      	str	r2, [r3, #4]
 8005bac:	e007      	b.n	8005bbe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d007      	beq.n	8005bdc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005be4:	d97c      	bls.n	8005ce0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x13e>
 8005bee:	8a7b      	ldrh	r3, [r7, #18]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d169      	bne.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	881a      	ldrh	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	1c9a      	adds	r2, r3, #2
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c18:	e056      	b.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d11b      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x1aa>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <HAL_SPI_TransmitReceive+0x1aa>
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d113      	bne.n	8005c60 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	881a      	ldrh	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	1c9a      	adds	r2, r3, #2
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d11c      	bne.n	8005ca8 <HAL_SPI_TransmitReceive+0x1f2>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	b292      	uxth	r2, r2
 8005c86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	1c9a      	adds	r2, r3, #2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ca8:	f7fc fc8e 	bl	80025c8 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d807      	bhi.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cbe:	d003      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005cc6:	e0fb      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1a3      	bne.n	8005c1a <HAL_SPI_TransmitReceive+0x164>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d19d      	bne.n	8005c1a <HAL_SPI_TransmitReceive+0x164>
 8005cde:	e0df      	b.n	8005ea0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x23a>
 8005ce8:	8a7b      	ldrh	r3, [r7, #18]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	f040 80cb 	bne.w	8005e86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d912      	bls.n	8005d20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	881a      	ldrh	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b02      	subs	r3, #2
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d1e:	e0b2      	b.n	8005e86 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	7812      	ldrb	r2, [r2, #0]
 8005d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d46:	e09e      	b.n	8005e86 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d134      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x30a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02f      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x30a>
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d12c      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d912      	bls.n	8005d96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b02      	subs	r3, #2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d94:	e012      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d148      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x3aa>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d042      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d923      	bls.n	8005e2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	b292      	uxth	r2, r2
 8005df2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	1c9a      	adds	r2, r3, #2
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b02      	subs	r3, #2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d81f      	bhi.n	8005e5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e2a:	605a      	str	r2, [r3, #4]
 8005e2c:	e016      	b.n	8005e5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f103 020c 	add.w	r2, r3, #12
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e60:	f7fc fbb2 	bl	80025c8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d803      	bhi.n	8005e78 <HAL_SPI_TransmitReceive+0x3c2>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e76:	d102      	bne.n	8005e7e <HAL_SPI_TransmitReceive+0x3c8>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005e84:	e01c      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f af5b 	bne.w	8005d48 <HAL_SPI_TransmitReceive+0x292>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f47f af54 	bne.w	8005d48 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f933 	bl	8006110 <SPI_EndRxTxTransaction>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d006      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	661a      	str	r2, [r3, #96]	; 0x60
 8005ebc:	e000      	b.n	8005ec0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ebe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3728      	adds	r7, #40	; 0x28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005eec:	f7fc fb6c 	bl	80025c8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	4413      	add	r3, r2
 8005efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005efc:	f7fc fb64 	bl	80025c8 <HAL_GetTick>
 8005f00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f02:	4b39      	ldr	r3, [pc, #228]	; (8005fe8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	015b      	lsls	r3, r3, #5
 8005f08:	0d1b      	lsrs	r3, r3, #20
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
 8005f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f12:	e054      	b.n	8005fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f1a:	d050      	beq.n	8005fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f1c:	f7fc fb54 	bl	80025c8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d902      	bls.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d13d      	bne.n	8005fae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4a:	d111      	bne.n	8005f70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	d004      	beq.n	8005f60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5e:	d107      	bne.n	8005f70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f78:	d10f      	bne.n	8005f9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e017      	b.n	8005fde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d19b      	bne.n	8005f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3720      	adds	r7, #32
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000094 	.word	0x20000094

08005fec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005ffa:	f7fc fae5 	bl	80025c8 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	4413      	add	r3, r2
 8006008:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800600a:	f7fc fadd 	bl	80025c8 <HAL_GetTick>
 800600e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006010:	4b3e      	ldr	r3, [pc, #248]	; (800610c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	00da      	lsls	r2, r3, #3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	0d1b      	lsrs	r3, r3, #20
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006028:	e062      	b.n	80060f0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006030:	d109      	bne.n	8006046 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006044:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800604c:	d050      	beq.n	80060f0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800604e:	f7fc fabb 	bl	80025c8 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	429a      	cmp	r2, r3
 800605c:	d902      	bls.n	8006064 <SPI_WaitFifoStateUntilTimeout+0x78>
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d13d      	bne.n	80060e0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607c:	d111      	bne.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006086:	d004      	beq.n	8006092 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006090:	d107      	bne.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d10f      	bne.n	80060cc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e010      	b.n	8006102 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d194      	bne.n	800602a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000094 	.word	0x20000094

08006110 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2200      	movs	r2, #0
 8006124:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ff5f 	bl	8005fec <SPI_WaitFifoStateUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d007      	beq.n	8006144 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006138:	f043 0220 	orr.w	r2, r3, #32
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e027      	b.n	8006194 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2200      	movs	r2, #0
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fec4 	bl	8005edc <SPI_WaitFlagStateUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e014      	b.n	8006194 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff38 	bl	8005fec <SPI_WaitFifoStateUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006186:	f043 0220 	orr.w	r2, r3, #32
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e000      	b.n	8006194 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e049      	b.n	8006242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f841 	bl	800624a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 fcfc 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	d001      	beq.n	8006278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e04f      	b.n	8006318 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a23      	ldr	r2, [pc, #140]	; (8006324 <HAL_TIM_Base_Start_IT+0xc4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01d      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a2:	d018      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_TIM_Base_Start_IT+0xc8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d013      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_TIM_Base_Start_IT+0xcc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00e      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_TIM_Base_Start_IT+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <HAL_TIM_Base_Start_IT+0xd4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_TIM_Base_Start_IT+0x76>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_TIM_Base_Start_IT+0xd8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d115      	bne.n	8006302 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	4b17      	ldr	r3, [pc, #92]	; (800633c <HAL_TIM_Base_Start_IT+0xdc>)
 80062de:	4013      	ands	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b06      	cmp	r3, #6
 80062e6:	d015      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0xb4>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d011      	beq.n	8006314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006300:	e008      	b.n	8006314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0201 	orr.w	r2, r2, #1
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	e000      	b.n	8006316 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	40012c00 	.word	0x40012c00
 8006328:	40000400 	.word	0x40000400
 800632c:	40000800 	.word	0x40000800
 8006330:	40000c00 	.word	0x40000c00
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	00010007 	.word	0x00010007

08006340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e049      	b.n	80063e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fb fec8 	bl	80020fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4619      	mov	r1, r3
 800637e:	4610      	mov	r0, r2
 8006380:	f000 fc2a 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <HAL_TIM_PWM_Start+0x24>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	bf14      	ite	ne
 800640c:	2301      	movne	r3, #1
 800640e:	2300      	moveq	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e03c      	b.n	800648e <HAL_TIM_PWM_Start+0x9e>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b04      	cmp	r3, #4
 8006418:	d109      	bne.n	800642e <HAL_TIM_PWM_Start+0x3e>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	bf14      	ite	ne
 8006426:	2301      	movne	r3, #1
 8006428:	2300      	moveq	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	e02f      	b.n	800648e <HAL_TIM_PWM_Start+0x9e>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d109      	bne.n	8006448 <HAL_TIM_PWM_Start+0x58>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	bf14      	ite	ne
 8006440:	2301      	movne	r3, #1
 8006442:	2300      	moveq	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	e022      	b.n	800648e <HAL_TIM_PWM_Start+0x9e>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b0c      	cmp	r3, #12
 800644c:	d109      	bne.n	8006462 <HAL_TIM_PWM_Start+0x72>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e015      	b.n	800648e <HAL_TIM_PWM_Start+0x9e>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b10      	cmp	r3, #16
 8006466:	d109      	bne.n	800647c <HAL_TIM_PWM_Start+0x8c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e008      	b.n	800648e <HAL_TIM_PWM_Start+0x9e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	bf14      	ite	ne
 8006488:	2301      	movne	r3, #1
 800648a:	2300      	moveq	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e09c      	b.n	80065d0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0xb6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	e023      	b.n	80064ee <HAL_TIM_PWM_Start+0xfe>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0xc6>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b4:	e01b      	b.n	80064ee <HAL_TIM_PWM_Start+0xfe>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xd6>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c4:	e013      	b.n	80064ee <HAL_TIM_PWM_Start+0xfe>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b0c      	cmp	r3, #12
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0xe6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064d4:	e00b      	b.n	80064ee <HAL_TIM_PWM_Start+0xfe>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b10      	cmp	r3, #16
 80064da:	d104      	bne.n	80064e6 <HAL_TIM_PWM_Start+0xf6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064e4:	e003      	b.n	80064ee <HAL_TIM_PWM_Start+0xfe>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2201      	movs	r2, #1
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fede 	bl	80072b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a35      	ldr	r2, [pc, #212]	; (80065d8 <HAL_TIM_PWM_Start+0x1e8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_TIM_PWM_Start+0x13e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a34      	ldr	r2, [pc, #208]	; (80065dc <HAL_TIM_PWM_Start+0x1ec>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_TIM_PWM_Start+0x13e>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <HAL_TIM_PWM_Start+0x1f0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_TIM_PWM_Start+0x13e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a31      	ldr	r2, [pc, #196]	; (80065e4 <HAL_TIM_PWM_Start+0x1f4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_TIM_PWM_Start+0x13e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <HAL_TIM_PWM_Start+0x1f8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <HAL_TIM_PWM_Start+0x142>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <HAL_TIM_PWM_Start+0x144>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006546:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <HAL_TIM_PWM_Start+0x1e8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01d      	beq.n	800658e <HAL_TIM_PWM_Start+0x19e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655a:	d018      	beq.n	800658e <HAL_TIM_PWM_Start+0x19e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_TIM_PWM_Start+0x1fc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_TIM_PWM_Start+0x19e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <HAL_TIM_PWM_Start+0x200>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_TIM_PWM_Start+0x19e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_TIM_PWM_Start+0x204>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d009      	beq.n	800658e <HAL_TIM_PWM_Start+0x19e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a17      	ldr	r2, [pc, #92]	; (80065dc <HAL_TIM_PWM_Start+0x1ec>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_TIM_PWM_Start+0x19e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <HAL_TIM_PWM_Start+0x1f0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d115      	bne.n	80065ba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <HAL_TIM_PWM_Start+0x208>)
 8006596:	4013      	ands	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b06      	cmp	r3, #6
 800659e:	d015      	beq.n	80065cc <HAL_TIM_PWM_Start+0x1dc>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a6:	d011      	beq.n	80065cc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b8:	e008      	b.n	80065cc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e000      	b.n	80065ce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40013400 	.word	0x40013400
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	00010007 	.word	0x00010007

080065fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f000 fe52 	bl	80072b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a3e      	ldr	r2, [pc, #248]	; (8006714 <HAL_TIM_PWM_Stop+0x118>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <HAL_TIM_PWM_Stop+0x4a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a3d      	ldr	r2, [pc, #244]	; (8006718 <HAL_TIM_PWM_Stop+0x11c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <HAL_TIM_PWM_Stop+0x4a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a3b      	ldr	r2, [pc, #236]	; (800671c <HAL_TIM_PWM_Stop+0x120>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_TIM_PWM_Stop+0x4a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3a      	ldr	r2, [pc, #232]	; (8006720 <HAL_TIM_PWM_Stop+0x124>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <HAL_TIM_PWM_Stop+0x4a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a38      	ldr	r2, [pc, #224]	; (8006724 <HAL_TIM_PWM_Stop+0x128>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <HAL_TIM_PWM_Stop+0x4e>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <HAL_TIM_PWM_Stop+0x50>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d017      	beq.n	8006680 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	f241 1311 	movw	r3, #4369	; 0x1111
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10f      	bne.n	8006680 <HAL_TIM_PWM_Stop+0x84>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	f240 4344 	movw	r3, #1092	; 0x444
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d107      	bne.n	8006680 <HAL_TIM_PWM_Stop+0x84>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a1a      	ldr	r2, [r3, #32]
 8006686:	f241 1311 	movw	r3, #4369	; 0x1111
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10f      	bne.n	80066b0 <HAL_TIM_PWM_Stop+0xb4>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	f240 4344 	movw	r3, #1092	; 0x444
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_PWM_Stop+0xb4>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d104      	bne.n	80066c0 <HAL_TIM_PWM_Stop+0xc4>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066be:	e023      	b.n	8006708 <HAL_TIM_PWM_Stop+0x10c>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d104      	bne.n	80066d0 <HAL_TIM_PWM_Stop+0xd4>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ce:	e01b      	b.n	8006708 <HAL_TIM_PWM_Stop+0x10c>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d104      	bne.n	80066e0 <HAL_TIM_PWM_Stop+0xe4>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066de:	e013      	b.n	8006708 <HAL_TIM_PWM_Stop+0x10c>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b0c      	cmp	r3, #12
 80066e4:	d104      	bne.n	80066f0 <HAL_TIM_PWM_Stop+0xf4>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066ee:	e00b      	b.n	8006708 <HAL_TIM_PWM_Stop+0x10c>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d104      	bne.n	8006700 <HAL_TIM_PWM_Stop+0x104>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066fe:	e003      	b.n	8006708 <HAL_TIM_PWM_Stop+0x10c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40013400 	.word	0x40013400
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d122      	bne.n	8006784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b02      	cmp	r3, #2
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0202 	mvn.w	r2, #2
 8006754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa16 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa08 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa19 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0304 	and.w	r3, r3, #4
 800678e:	2b04      	cmp	r3, #4
 8006790:	d122      	bne.n	80067d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b04      	cmp	r3, #4
 800679e:	d11b      	bne.n	80067d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f06f 0204 	mvn.w	r2, #4
 80067a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f9ec 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 80067c4:	e005      	b.n	80067d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9de 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f9ef 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d122      	bne.n	800682c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d11b      	bne.n	800682c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0208 	mvn.w	r2, #8
 80067fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2204      	movs	r2, #4
 8006802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9c2 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 8006818:	e005      	b.n	8006826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f9b4 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f9c5 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b10      	cmp	r3, #16
 8006838:	d122      	bne.n	8006880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b10      	cmp	r3, #16
 8006846:	d11b      	bne.n	8006880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0210 	mvn.w	r2, #16
 8006850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2208      	movs	r2, #8
 8006856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f998 	bl	8006b9c <HAL_TIM_IC_CaptureCallback>
 800686c:	e005      	b.n	800687a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f98a 	bl	8006b88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f99b 	bl	8006bb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10e      	bne.n	80068ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	d107      	bne.n	80068ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0201 	mvn.w	r2, #1
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fa fefa 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d10e      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c4:	2b80      	cmp	r3, #128	; 0x80
 80068c6:	d107      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fe26 	bl	8007524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e6:	d10e      	bne.n	8006906 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b80      	cmp	r3, #128	; 0x80
 80068f4:	d107      	bne.n	8006906 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fe19 	bl	8007538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d10e      	bne.n	8006932 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d107      	bne.n	8006932 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800692a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f949 	bl	8006bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d10e      	bne.n	800695e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d107      	bne.n	800695e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f06f 0220 	mvn.w	r2, #32
 8006956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fdd9 	bl	8007510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800697e:	2302      	movs	r3, #2
 8006980:	e0fd      	b.n	8006b7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b14      	cmp	r3, #20
 800698e:	f200 80f0 	bhi.w	8006b72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006992:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069ed 	.word	0x080069ed
 800699c:	08006b73 	.word	0x08006b73
 80069a0:	08006b73 	.word	0x08006b73
 80069a4:	08006b73 	.word	0x08006b73
 80069a8:	08006a2d 	.word	0x08006a2d
 80069ac:	08006b73 	.word	0x08006b73
 80069b0:	08006b73 	.word	0x08006b73
 80069b4:	08006b73 	.word	0x08006b73
 80069b8:	08006a6f 	.word	0x08006a6f
 80069bc:	08006b73 	.word	0x08006b73
 80069c0:	08006b73 	.word	0x08006b73
 80069c4:	08006b73 	.word	0x08006b73
 80069c8:	08006aaf 	.word	0x08006aaf
 80069cc:	08006b73 	.word	0x08006b73
 80069d0:	08006b73 	.word	0x08006b73
 80069d4:	08006b73 	.word	0x08006b73
 80069d8:	08006af1 	.word	0x08006af1
 80069dc:	08006b73 	.word	0x08006b73
 80069e0:	08006b73 	.word	0x08006b73
 80069e4:	08006b73 	.word	0x08006b73
 80069e8:	08006b31 	.word	0x08006b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f98a 	bl	8006d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0208 	orr.w	r2, r2, #8
 8006a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699a      	ldr	r2, [r3, #24]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f022 0204 	bic.w	r2, r2, #4
 8006a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6999      	ldr	r1, [r3, #24]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	619a      	str	r2, [r3, #24]
      break;
 8006a2a:	e0a3      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68b9      	ldr	r1, [r7, #8]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f9fa 	bl	8006e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6999      	ldr	r1, [r3, #24]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	021a      	lsls	r2, r3, #8
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	619a      	str	r2, [r3, #24]
      break;
 8006a6c:	e082      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fa63 	bl	8006f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0208 	orr.w	r2, r2, #8
 8006a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0204 	bic.w	r2, r2, #4
 8006a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69d9      	ldr	r1, [r3, #28]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	61da      	str	r2, [r3, #28]
      break;
 8006aac:	e062      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 facb 	bl	8007050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69d9      	ldr	r1, [r3, #28]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	021a      	lsls	r2, r3, #8
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	61da      	str	r2, [r3, #28]
      break;
 8006aee:	e041      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fb14 	bl	8007124 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0208 	orr.w	r2, r2, #8
 8006b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0204 	bic.w	r2, r2, #4
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b2e:	e021      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fb58 	bl	80071ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	021a      	lsls	r2, r3, #8
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b70:	e000      	b.n	8006b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006b72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a40      	ldr	r2, [pc, #256]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf6:	d00f      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3b      	ldr	r2, [pc, #236]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3a      	ldr	r2, [pc, #232]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d108      	bne.n	8006c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01f      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c38:	d01b      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d017      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00f      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00b      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <TIM_Base_SetConfig+0x128>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d007      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <TIM_Base_SetConfig+0x12c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d003      	beq.n	8006c72 <TIM_Base_SetConfig+0x9a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <TIM_Base_SetConfig+0x130>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d108      	bne.n	8006c84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a10      	ldr	r2, [pc, #64]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <TIM_Base_SetConfig+0x128>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a10      	ldr	r2, [pc, #64]	; (8006d04 <TIM_Base_SetConfig+0x12c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0f      	ldr	r2, [pc, #60]	; (8006d08 <TIM_Base_SetConfig+0x130>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d103      	bne.n	8006cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	615a      	str	r2, [r3, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40013400 	.word	0x40013400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800

08006d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f023 0302 	bic.w	r3, r3, #2
 8006d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a2c      	ldr	r2, [pc, #176]	; (8006e18 <TIM_OC1_SetConfig+0x10c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00f      	beq.n	8006d8c <TIM_OC1_SetConfig+0x80>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a2b      	ldr	r2, [pc, #172]	; (8006e1c <TIM_OC1_SetConfig+0x110>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <TIM_OC1_SetConfig+0x80>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <TIM_OC1_SetConfig+0x114>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d007      	beq.n	8006d8c <TIM_OC1_SetConfig+0x80>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a29      	ldr	r2, [pc, #164]	; (8006e24 <TIM_OC1_SetConfig+0x118>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_OC1_SetConfig+0x80>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a28      	ldr	r2, [pc, #160]	; (8006e28 <TIM_OC1_SetConfig+0x11c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10c      	bne.n	8006da6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0308 	bic.w	r3, r3, #8
 8006d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1b      	ldr	r2, [pc, #108]	; (8006e18 <TIM_OC1_SetConfig+0x10c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00f      	beq.n	8006dce <TIM_OC1_SetConfig+0xc2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <TIM_OC1_SetConfig+0x110>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_OC1_SetConfig+0xc2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <TIM_OC1_SetConfig+0x114>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d007      	beq.n	8006dce <TIM_OC1_SetConfig+0xc2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <TIM_OC1_SetConfig+0x118>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_OC1_SetConfig+0xc2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <TIM_OC1_SetConfig+0x11c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d111      	bne.n	8006df2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0210 	bic.w	r2, r3, #16
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f023 0320 	bic.w	r3, r3, #32
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a28      	ldr	r2, [pc, #160]	; (8006f2c <TIM_OC2_SetConfig+0x100>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_OC2_SetConfig+0x6c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a27      	ldr	r2, [pc, #156]	; (8006f30 <TIM_OC2_SetConfig+0x104>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d10d      	bne.n	8006eb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a1d      	ldr	r2, [pc, #116]	; (8006f2c <TIM_OC2_SetConfig+0x100>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00f      	beq.n	8006edc <TIM_OC2_SetConfig+0xb0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a1c      	ldr	r2, [pc, #112]	; (8006f30 <TIM_OC2_SetConfig+0x104>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00b      	beq.n	8006edc <TIM_OC2_SetConfig+0xb0>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1b      	ldr	r2, [pc, #108]	; (8006f34 <TIM_OC2_SetConfig+0x108>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d007      	beq.n	8006edc <TIM_OC2_SetConfig+0xb0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a1a      	ldr	r2, [pc, #104]	; (8006f38 <TIM_OC2_SetConfig+0x10c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC2_SetConfig+0xb0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <TIM_OC2_SetConfig+0x110>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d113      	bne.n	8006f04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	621a      	str	r2, [r3, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40012c00 	.word	0x40012c00
 8006f30:	40013400 	.word	0x40013400
 8006f34:	40014000 	.word	0x40014000
 8006f38:	40014400 	.word	0x40014400
 8006f3c:	40014800 	.word	0x40014800

08006f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a27      	ldr	r2, [pc, #156]	; (800703c <TIM_OC3_SetConfig+0xfc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC3_SetConfig+0x6a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a26      	ldr	r2, [pc, #152]	; (8007040 <TIM_OC3_SetConfig+0x100>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d10d      	bne.n	8006fc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a1c      	ldr	r2, [pc, #112]	; (800703c <TIM_OC3_SetConfig+0xfc>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_OC3_SetConfig+0xae>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <TIM_OC3_SetConfig+0x100>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_OC3_SetConfig+0xae>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <TIM_OC3_SetConfig+0x104>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_OC3_SetConfig+0xae>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a19      	ldr	r2, [pc, #100]	; (8007048 <TIM_OC3_SetConfig+0x108>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC3_SetConfig+0xae>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a18      	ldr	r2, [pc, #96]	; (800704c <TIM_OC3_SetConfig+0x10c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d113      	bne.n	8007016 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	621a      	str	r2, [r3, #32]
}
 8007030:	bf00      	nop
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	40012c00 	.word	0x40012c00
 8007040:	40013400 	.word	0x40013400
 8007044:	40014000 	.word	0x40014000
 8007048:	40014400 	.word	0x40014400
 800704c:	40014800 	.word	0x40014800

08007050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4313      	orrs	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800709e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	031b      	lsls	r3, r3, #12
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a18      	ldr	r2, [pc, #96]	; (8007110 <TIM_OC4_SetConfig+0xc0>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00f      	beq.n	80070d4 <TIM_OC4_SetConfig+0x84>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a17      	ldr	r2, [pc, #92]	; (8007114 <TIM_OC4_SetConfig+0xc4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00b      	beq.n	80070d4 <TIM_OC4_SetConfig+0x84>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a16      	ldr	r2, [pc, #88]	; (8007118 <TIM_OC4_SetConfig+0xc8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d007      	beq.n	80070d4 <TIM_OC4_SetConfig+0x84>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a15      	ldr	r2, [pc, #84]	; (800711c <TIM_OC4_SetConfig+0xcc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_OC4_SetConfig+0x84>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a14      	ldr	r2, [pc, #80]	; (8007120 <TIM_OC4_SetConfig+0xd0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d109      	bne.n	80070e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	019b      	lsls	r3, r3, #6
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800

08007124 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007168:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	041b      	lsls	r3, r3, #16
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4313      	orrs	r3, r2
 8007174:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a17      	ldr	r2, [pc, #92]	; (80071d8 <TIM_OC5_SetConfig+0xb4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00f      	beq.n	800719e <TIM_OC5_SetConfig+0x7a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a16      	ldr	r2, [pc, #88]	; (80071dc <TIM_OC5_SetConfig+0xb8>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00b      	beq.n	800719e <TIM_OC5_SetConfig+0x7a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a15      	ldr	r2, [pc, #84]	; (80071e0 <TIM_OC5_SetConfig+0xbc>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d007      	beq.n	800719e <TIM_OC5_SetConfig+0x7a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a14      	ldr	r2, [pc, #80]	; (80071e4 <TIM_OC5_SetConfig+0xc0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_OC5_SetConfig+0x7a>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <TIM_OC5_SetConfig+0xc4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d109      	bne.n	80071b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	621a      	str	r2, [r3, #32]
}
 80071cc:	bf00      	nop
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40013400 	.word	0x40013400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800

080071ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	051b      	lsls	r3, r3, #20
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <TIM_OC6_SetConfig+0xb8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00f      	beq.n	8007268 <TIM_OC6_SetConfig+0x7c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_OC6_SetConfig+0xbc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00b      	beq.n	8007268 <TIM_OC6_SetConfig+0x7c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_OC6_SetConfig+0xc0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d007      	beq.n	8007268 <TIM_OC6_SetConfig+0x7c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <TIM_OC6_SetConfig+0xc4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d003      	beq.n	8007268 <TIM_OC6_SetConfig+0x7c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a14      	ldr	r2, [pc, #80]	; (80072b4 <TIM_OC6_SetConfig+0xc8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d109      	bne.n	800727c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800726e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40013400 	.word	0x40013400
 80072ac:	40014000 	.word	0x40014000
 80072b0:	40014400 	.word	0x40014400
 80072b4:	40014800 	.word	0x40014800

080072b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f003 031f 	and.w	r3, r3, #31
 80072ca:	2201      	movs	r2, #1
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1a      	ldr	r2, [r3, #32]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	43db      	mvns	r3, r3
 80072da:	401a      	ands	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	fa01 f303 	lsl.w	r3, r1, r3
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
}
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007314:	2b01      	cmp	r3, #1
 8007316:	d101      	bne.n	800731c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007318:	2302      	movs	r3, #2
 800731a:	e068      	b.n	80073ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a2e      	ldr	r2, [pc, #184]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a2d      	ldr	r2, [pc, #180]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d108      	bne.n	8007362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	4313      	orrs	r3, r2
 8007372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1e      	ldr	r2, [pc, #120]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d01d      	beq.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738e:	d018      	beq.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1a      	ldr	r2, [pc, #104]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00e      	beq.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a13      	ldr	r2, [pc, #76]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a14      	ldr	r2, [pc, #80]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d10c      	bne.n	80073dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40013400 	.word	0x40013400
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	40014000 	.word	0x40014000

08007414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800742c:	2302      	movs	r3, #2
 800742e:	e065      	b.n	80074fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a16      	ldr	r2, [pc, #88]	; (8007508 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a14      	ldr	r2, [pc, #80]	; (800750c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d115      	bne.n	80074ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	051b      	lsls	r3, r3, #20
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	4313      	orrs	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	40012c00 	.word	0x40012c00
 800750c:	40013400 	.word	0x40013400

08007510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e040      	b.n	80075e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa fe1c 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2224      	movs	r2, #36	; 0x24
 8007578:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8c0 	bl	8007710 <UART_SetConfig>
 8007590:	4603      	mov	r3, r0
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e022      	b.n	80075e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb3e 	bl	8007c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0201 	orr.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fbc5 	bl	8007d68 <UART_CheckIdleState>
 80075de:	4603      	mov	r3, r0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	4613      	mov	r3, r2
 80075f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	f040 8082 	bne.w	8007706 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <HAL_UART_Transmit+0x26>
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e07a      	b.n	8007708 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_UART_Transmit+0x38>
 800761c:	2302      	movs	r3, #2
 800761e:	e073      	b.n	8007708 <HAL_UART_Transmit+0x120>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2221      	movs	r2, #33	; 0x21
 8007634:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007636:	f7fa ffc7 	bl	80025c8 <HAL_GetTick>
 800763a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007654:	d108      	bne.n	8007668 <HAL_UART_Transmit+0x80>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	e003      	b.n	8007670 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007678:	e02d      	b.n	80076d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2200      	movs	r2, #0
 8007682:	2180      	movs	r1, #128	; 0x80
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fbb8 	bl	8007dfa <UART_WaitOnFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e039      	b.n	8007708 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	881a      	ldrh	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a6:	b292      	uxth	r2, r2
 80076a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	3302      	adds	r3, #2
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e008      	b.n	80076c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b292      	uxth	r2, r2
 80076bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1cb      	bne.n	800767a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2200      	movs	r2, #0
 80076ea:	2140      	movs	r1, #64	; 0x40
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fb84 	bl	8007dfa <UART_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e005      	b.n	8007708 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2220      	movs	r2, #32
 8007700:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e000      	b.n	8007708 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007710:	b5b0      	push	{r4, r5, r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	4313      	orrs	r3, r2
 8007732:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	4bad      	ldr	r3, [pc, #692]	; (80079f0 <UART_SetConfig+0x2e0>)
 800773c:	4013      	ands	r3, r2
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6812      	ldr	r2, [r2, #0]
 8007742:	69f9      	ldr	r1, [r7, #28]
 8007744:	430b      	orrs	r3, r1
 8007746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4aa2      	ldr	r2, [pc, #648]	; (80079f4 <UART_SetConfig+0x2e4>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d004      	beq.n	8007778 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	4313      	orrs	r3, r2
 8007776:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	430a      	orrs	r2, r1
 800778a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a99      	ldr	r2, [pc, #612]	; (80079f8 <UART_SetConfig+0x2e8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d121      	bne.n	80077da <UART_SetConfig+0xca>
 8007796:	4b99      	ldr	r3, [pc, #612]	; (80079fc <UART_SetConfig+0x2ec>)
 8007798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d817      	bhi.n	80077d4 <UART_SetConfig+0xc4>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <UART_SetConfig+0x9c>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077bd 	.word	0x080077bd
 80077b0:	080077c9 	.word	0x080077c9
 80077b4:	080077c3 	.word	0x080077c3
 80077b8:	080077cf 	.word	0x080077cf
 80077bc:	2301      	movs	r3, #1
 80077be:	76fb      	strb	r3, [r7, #27]
 80077c0:	e0e7      	b.n	8007992 <UART_SetConfig+0x282>
 80077c2:	2302      	movs	r3, #2
 80077c4:	76fb      	strb	r3, [r7, #27]
 80077c6:	e0e4      	b.n	8007992 <UART_SetConfig+0x282>
 80077c8:	2304      	movs	r3, #4
 80077ca:	76fb      	strb	r3, [r7, #27]
 80077cc:	e0e1      	b.n	8007992 <UART_SetConfig+0x282>
 80077ce:	2308      	movs	r3, #8
 80077d0:	76fb      	strb	r3, [r7, #27]
 80077d2:	e0de      	b.n	8007992 <UART_SetConfig+0x282>
 80077d4:	2310      	movs	r3, #16
 80077d6:	76fb      	strb	r3, [r7, #27]
 80077d8:	e0db      	b.n	8007992 <UART_SetConfig+0x282>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a88      	ldr	r2, [pc, #544]	; (8007a00 <UART_SetConfig+0x2f0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d132      	bne.n	800784a <UART_SetConfig+0x13a>
 80077e4:	4b85      	ldr	r3, [pc, #532]	; (80079fc <UART_SetConfig+0x2ec>)
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ea:	f003 030c 	and.w	r3, r3, #12
 80077ee:	2b0c      	cmp	r3, #12
 80077f0:	d828      	bhi.n	8007844 <UART_SetConfig+0x134>
 80077f2:	a201      	add	r2, pc, #4	; (adr r2, 80077f8 <UART_SetConfig+0xe8>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	0800782d 	.word	0x0800782d
 80077fc:	08007845 	.word	0x08007845
 8007800:	08007845 	.word	0x08007845
 8007804:	08007845 	.word	0x08007845
 8007808:	08007839 	.word	0x08007839
 800780c:	08007845 	.word	0x08007845
 8007810:	08007845 	.word	0x08007845
 8007814:	08007845 	.word	0x08007845
 8007818:	08007833 	.word	0x08007833
 800781c:	08007845 	.word	0x08007845
 8007820:	08007845 	.word	0x08007845
 8007824:	08007845 	.word	0x08007845
 8007828:	0800783f 	.word	0x0800783f
 800782c:	2300      	movs	r3, #0
 800782e:	76fb      	strb	r3, [r7, #27]
 8007830:	e0af      	b.n	8007992 <UART_SetConfig+0x282>
 8007832:	2302      	movs	r3, #2
 8007834:	76fb      	strb	r3, [r7, #27]
 8007836:	e0ac      	b.n	8007992 <UART_SetConfig+0x282>
 8007838:	2304      	movs	r3, #4
 800783a:	76fb      	strb	r3, [r7, #27]
 800783c:	e0a9      	b.n	8007992 <UART_SetConfig+0x282>
 800783e:	2308      	movs	r3, #8
 8007840:	76fb      	strb	r3, [r7, #27]
 8007842:	e0a6      	b.n	8007992 <UART_SetConfig+0x282>
 8007844:	2310      	movs	r3, #16
 8007846:	76fb      	strb	r3, [r7, #27]
 8007848:	e0a3      	b.n	8007992 <UART_SetConfig+0x282>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a6d      	ldr	r2, [pc, #436]	; (8007a04 <UART_SetConfig+0x2f4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d120      	bne.n	8007896 <UART_SetConfig+0x186>
 8007854:	4b69      	ldr	r3, [pc, #420]	; (80079fc <UART_SetConfig+0x2ec>)
 8007856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800785e:	2b30      	cmp	r3, #48	; 0x30
 8007860:	d013      	beq.n	800788a <UART_SetConfig+0x17a>
 8007862:	2b30      	cmp	r3, #48	; 0x30
 8007864:	d814      	bhi.n	8007890 <UART_SetConfig+0x180>
 8007866:	2b20      	cmp	r3, #32
 8007868:	d009      	beq.n	800787e <UART_SetConfig+0x16e>
 800786a:	2b20      	cmp	r3, #32
 800786c:	d810      	bhi.n	8007890 <UART_SetConfig+0x180>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <UART_SetConfig+0x168>
 8007872:	2b10      	cmp	r3, #16
 8007874:	d006      	beq.n	8007884 <UART_SetConfig+0x174>
 8007876:	e00b      	b.n	8007890 <UART_SetConfig+0x180>
 8007878:	2300      	movs	r3, #0
 800787a:	76fb      	strb	r3, [r7, #27]
 800787c:	e089      	b.n	8007992 <UART_SetConfig+0x282>
 800787e:	2302      	movs	r3, #2
 8007880:	76fb      	strb	r3, [r7, #27]
 8007882:	e086      	b.n	8007992 <UART_SetConfig+0x282>
 8007884:	2304      	movs	r3, #4
 8007886:	76fb      	strb	r3, [r7, #27]
 8007888:	e083      	b.n	8007992 <UART_SetConfig+0x282>
 800788a:	2308      	movs	r3, #8
 800788c:	76fb      	strb	r3, [r7, #27]
 800788e:	e080      	b.n	8007992 <UART_SetConfig+0x282>
 8007890:	2310      	movs	r3, #16
 8007892:	76fb      	strb	r3, [r7, #27]
 8007894:	e07d      	b.n	8007992 <UART_SetConfig+0x282>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a5b      	ldr	r2, [pc, #364]	; (8007a08 <UART_SetConfig+0x2f8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d120      	bne.n	80078e2 <UART_SetConfig+0x1d2>
 80078a0:	4b56      	ldr	r3, [pc, #344]	; (80079fc <UART_SetConfig+0x2ec>)
 80078a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078aa:	2bc0      	cmp	r3, #192	; 0xc0
 80078ac:	d013      	beq.n	80078d6 <UART_SetConfig+0x1c6>
 80078ae:	2bc0      	cmp	r3, #192	; 0xc0
 80078b0:	d814      	bhi.n	80078dc <UART_SetConfig+0x1cc>
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d009      	beq.n	80078ca <UART_SetConfig+0x1ba>
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d810      	bhi.n	80078dc <UART_SetConfig+0x1cc>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <UART_SetConfig+0x1b4>
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d006      	beq.n	80078d0 <UART_SetConfig+0x1c0>
 80078c2:	e00b      	b.n	80078dc <UART_SetConfig+0x1cc>
 80078c4:	2300      	movs	r3, #0
 80078c6:	76fb      	strb	r3, [r7, #27]
 80078c8:	e063      	b.n	8007992 <UART_SetConfig+0x282>
 80078ca:	2302      	movs	r3, #2
 80078cc:	76fb      	strb	r3, [r7, #27]
 80078ce:	e060      	b.n	8007992 <UART_SetConfig+0x282>
 80078d0:	2304      	movs	r3, #4
 80078d2:	76fb      	strb	r3, [r7, #27]
 80078d4:	e05d      	b.n	8007992 <UART_SetConfig+0x282>
 80078d6:	2308      	movs	r3, #8
 80078d8:	76fb      	strb	r3, [r7, #27]
 80078da:	e05a      	b.n	8007992 <UART_SetConfig+0x282>
 80078dc:	2310      	movs	r3, #16
 80078de:	76fb      	strb	r3, [r7, #27]
 80078e0:	e057      	b.n	8007992 <UART_SetConfig+0x282>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a49      	ldr	r2, [pc, #292]	; (8007a0c <UART_SetConfig+0x2fc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d125      	bne.n	8007938 <UART_SetConfig+0x228>
 80078ec:	4b43      	ldr	r3, [pc, #268]	; (80079fc <UART_SetConfig+0x2ec>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fa:	d017      	beq.n	800792c <UART_SetConfig+0x21c>
 80078fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007900:	d817      	bhi.n	8007932 <UART_SetConfig+0x222>
 8007902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007906:	d00b      	beq.n	8007920 <UART_SetConfig+0x210>
 8007908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800790c:	d811      	bhi.n	8007932 <UART_SetConfig+0x222>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <UART_SetConfig+0x20a>
 8007912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007916:	d006      	beq.n	8007926 <UART_SetConfig+0x216>
 8007918:	e00b      	b.n	8007932 <UART_SetConfig+0x222>
 800791a:	2300      	movs	r3, #0
 800791c:	76fb      	strb	r3, [r7, #27]
 800791e:	e038      	b.n	8007992 <UART_SetConfig+0x282>
 8007920:	2302      	movs	r3, #2
 8007922:	76fb      	strb	r3, [r7, #27]
 8007924:	e035      	b.n	8007992 <UART_SetConfig+0x282>
 8007926:	2304      	movs	r3, #4
 8007928:	76fb      	strb	r3, [r7, #27]
 800792a:	e032      	b.n	8007992 <UART_SetConfig+0x282>
 800792c:	2308      	movs	r3, #8
 800792e:	76fb      	strb	r3, [r7, #27]
 8007930:	e02f      	b.n	8007992 <UART_SetConfig+0x282>
 8007932:	2310      	movs	r3, #16
 8007934:	76fb      	strb	r3, [r7, #27]
 8007936:	e02c      	b.n	8007992 <UART_SetConfig+0x282>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2d      	ldr	r2, [pc, #180]	; (80079f4 <UART_SetConfig+0x2e4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d125      	bne.n	800798e <UART_SetConfig+0x27e>
 8007942:	4b2e      	ldr	r3, [pc, #184]	; (80079fc <UART_SetConfig+0x2ec>)
 8007944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800794c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007950:	d017      	beq.n	8007982 <UART_SetConfig+0x272>
 8007952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007956:	d817      	bhi.n	8007988 <UART_SetConfig+0x278>
 8007958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795c:	d00b      	beq.n	8007976 <UART_SetConfig+0x266>
 800795e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007962:	d811      	bhi.n	8007988 <UART_SetConfig+0x278>
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <UART_SetConfig+0x260>
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d006      	beq.n	800797c <UART_SetConfig+0x26c>
 800796e:	e00b      	b.n	8007988 <UART_SetConfig+0x278>
 8007970:	2300      	movs	r3, #0
 8007972:	76fb      	strb	r3, [r7, #27]
 8007974:	e00d      	b.n	8007992 <UART_SetConfig+0x282>
 8007976:	2302      	movs	r3, #2
 8007978:	76fb      	strb	r3, [r7, #27]
 800797a:	e00a      	b.n	8007992 <UART_SetConfig+0x282>
 800797c:	2304      	movs	r3, #4
 800797e:	76fb      	strb	r3, [r7, #27]
 8007980:	e007      	b.n	8007992 <UART_SetConfig+0x282>
 8007982:	2308      	movs	r3, #8
 8007984:	76fb      	strb	r3, [r7, #27]
 8007986:	e004      	b.n	8007992 <UART_SetConfig+0x282>
 8007988:	2310      	movs	r3, #16
 800798a:	76fb      	strb	r3, [r7, #27]
 800798c:	e001      	b.n	8007992 <UART_SetConfig+0x282>
 800798e:	2310      	movs	r3, #16
 8007990:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a17      	ldr	r2, [pc, #92]	; (80079f4 <UART_SetConfig+0x2e4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	f040 8087 	bne.w	8007aac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800799e:	7efb      	ldrb	r3, [r7, #27]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d837      	bhi.n	8007a14 <UART_SetConfig+0x304>
 80079a4:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <UART_SetConfig+0x29c>)
 80079a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079aa:	bf00      	nop
 80079ac:	080079d1 	.word	0x080079d1
 80079b0:	08007a15 	.word	0x08007a15
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	08007a15 	.word	0x08007a15
 80079bc:	080079df 	.word	0x080079df
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007a15 	.word	0x08007a15
 80079c8:	08007a15 	.word	0x08007a15
 80079cc:	080079e7 	.word	0x080079e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d0:	f7fd f8e6 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 80079d4:	6178      	str	r0, [r7, #20]
        break;
 80079d6:	e022      	b.n	8007a1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d8:	4b0d      	ldr	r3, [pc, #52]	; (8007a10 <UART_SetConfig+0x300>)
 80079da:	617b      	str	r3, [r7, #20]
        break;
 80079dc:	e01f      	b.n	8007a1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079de:	f7fd f847 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 80079e2:	6178      	str	r0, [r7, #20]
        break;
 80079e4:	e01b      	b.n	8007a1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ea:	617b      	str	r3, [r7, #20]
        break;
 80079ec:	e017      	b.n	8007a1e <UART_SetConfig+0x30e>
 80079ee:	bf00      	nop
 80079f0:	efff69f3 	.word	0xefff69f3
 80079f4:	40008000 	.word	0x40008000
 80079f8:	40013800 	.word	0x40013800
 80079fc:	40021000 	.word	0x40021000
 8007a00:	40004400 	.word	0x40004400
 8007a04:	40004800 	.word	0x40004800
 8007a08:	40004c00 	.word	0x40004c00
 8007a0c:	40005000 	.word	0x40005000
 8007a10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	76bb      	strb	r3, [r7, #26]
        break;
 8007a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80f1 	beq.w	8007c08 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d305      	bcc.n	8007a42 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d902      	bls.n	8007a48 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	76bb      	strb	r3, [r7, #26]
 8007a46:	e0df      	b.n	8007c08 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f04f 0100 	mov.w	r1, #0
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	020b      	lsls	r3, r1, #8
 8007a5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a5e:	0202      	lsls	r2, r0, #8
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	6849      	ldr	r1, [r1, #4]
 8007a64:	0849      	lsrs	r1, r1, #1
 8007a66:	4608      	mov	r0, r1
 8007a68:	f04f 0100 	mov.w	r1, #0
 8007a6c:	1814      	adds	r4, r2, r0
 8007a6e:	eb43 0501 	adc.w	r5, r3, r1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fbfe 	bl	8000280 <__aeabi_uldivmod>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4613      	mov	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a92:	d308      	bcc.n	8007aa6 <UART_SetConfig+0x396>
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9a:	d204      	bcs.n	8007aa6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	60da      	str	r2, [r3, #12]
 8007aa4:	e0b0      	b.n	8007c08 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	76bb      	strb	r3, [r7, #26]
 8007aaa:	e0ad      	b.n	8007c08 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab4:	d15c      	bne.n	8007b70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007ab6:	7efb      	ldrb	r3, [r7, #27]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d828      	bhi.n	8007b0e <UART_SetConfig+0x3fe>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x3b4>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b0f 	.word	0x08007b0f
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007b0f 	.word	0x08007b0f
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	08007b0f 	.word	0x08007b0f
 8007ae4:	08007b07 	.word	0x08007b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae8:	f7fd f85a 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8007aec:	6178      	str	r0, [r7, #20]
        break;
 8007aee:	e013      	b.n	8007b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fd f86c 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 8007af4:	6178      	str	r0, [r7, #20]
        break;
 8007af6:	e00f      	b.n	8007b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af8:	4b49      	ldr	r3, [pc, #292]	; (8007c20 <UART_SetConfig+0x510>)
 8007afa:	617b      	str	r3, [r7, #20]
        break;
 8007afc:	e00c      	b.n	8007b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afe:	f7fc ffb7 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 8007b02:	6178      	str	r0, [r7, #20]
        break;
 8007b04:	e008      	b.n	8007b18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0a:	617b      	str	r3, [r7, #20]
        break;
 8007b0c:	e004      	b.n	8007b18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	76bb      	strb	r3, [r7, #26]
        break;
 8007b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d074      	beq.n	8007c08 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	005a      	lsls	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	441a      	add	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b0f      	cmp	r3, #15
 8007b3a:	d916      	bls.n	8007b6a <UART_SetConfig+0x45a>
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b42:	d212      	bcs.n	8007b6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f023 030f 	bic.w	r3, r3, #15
 8007b4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f003 0307 	and.w	r3, r3, #7
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	89fa      	ldrh	r2, [r7, #14]
 8007b66:	60da      	str	r2, [r3, #12]
 8007b68:	e04e      	b.n	8007c08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	76bb      	strb	r3, [r7, #26]
 8007b6e:	e04b      	b.n	8007c08 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b70:	7efb      	ldrb	r3, [r7, #27]
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d827      	bhi.n	8007bc6 <UART_SetConfig+0x4b6>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <UART_SetConfig+0x46c>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007ba9 	.word	0x08007ba9
 8007b84:	08007bb1 	.word	0x08007bb1
 8007b88:	08007bc7 	.word	0x08007bc7
 8007b8c:	08007bb7 	.word	0x08007bb7
 8007b90:	08007bc7 	.word	0x08007bc7
 8007b94:	08007bc7 	.word	0x08007bc7
 8007b98:	08007bc7 	.word	0x08007bc7
 8007b9c:	08007bbf 	.word	0x08007bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba0:	f7fc fffe 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8007ba4:	6178      	str	r0, [r7, #20]
        break;
 8007ba6:	e013      	b.n	8007bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ba8:	f7fd f810 	bl	8004bcc <HAL_RCC_GetPCLK2Freq>
 8007bac:	6178      	str	r0, [r7, #20]
        break;
 8007bae:	e00f      	b.n	8007bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <UART_SetConfig+0x510>)
 8007bb2:	617b      	str	r3, [r7, #20]
        break;
 8007bb4:	e00c      	b.n	8007bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb6:	f7fc ff5b 	bl	8004a70 <HAL_RCC_GetSysClockFreq>
 8007bba:	6178      	str	r0, [r7, #20]
        break;
 8007bbc:	e008      	b.n	8007bd0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bc2:	617b      	str	r3, [r7, #20]
        break;
 8007bc4:	e004      	b.n	8007bd0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	76bb      	strb	r3, [r7, #26]
        break;
 8007bce:	bf00      	nop
    }

    if (pclk != 0U)
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d018      	beq.n	8007c08 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	085a      	lsrs	r2, r3, #1
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	441a      	add	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d908      	bls.n	8007c04 <UART_SetConfig+0x4f4>
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf8:	d204      	bcs.n	8007c04 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	60da      	str	r2, [r3, #12]
 8007c02:	e001      	b.n	8007c08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c14:	7ebb      	ldrb	r3, [r7, #26]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	00f42400 	.word	0x00f42400

08007c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d22:	d10a      	bne.n	8007d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d78:	f7fa fc26 	bl	80025c8 <HAL_GetTick>
 8007d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d10e      	bne.n	8007daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f82d 	bl	8007dfa <UART_WaitOnFlagUntilTimeout>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e023      	b.n	8007df2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d10e      	bne.n	8007dd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f817 	bl	8007dfa <UART_WaitOnFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e00d      	b.n	8007df2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	603b      	str	r3, [r7, #0]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0a:	e05e      	b.n	8007eca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e12:	d05a      	beq.n	8007eca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e14:	f7fa fbd8 	bl	80025c8 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d302      	bcc.n	8007e2a <UART_WaitOnFlagUntilTimeout+0x30>
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d11b      	bne.n	8007e62 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0201 	bic.w	r2, r2, #1
 8007e48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2220      	movs	r2, #32
 8007e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e043      	b.n	8007eea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02c      	beq.n	8007eca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7e:	d124      	bne.n	8007eca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e88:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e98:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 0201 	bic.w	r2, r2, #1
 8007ea8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e00f      	b.n	8007eea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	bf0c      	ite	eq
 8007eda:	2301      	moveq	r3, #1
 8007edc:	2300      	movne	r3, #0
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d091      	beq.n	8007e0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007ef8:	4904      	ldr	r1, [pc, #16]	; (8007f0c <MX_FATFS_Init+0x18>)
 8007efa:	4805      	ldr	r0, [pc, #20]	; (8007f10 <MX_FATFS_Init+0x1c>)
 8007efc:	f002 ff6c 	bl	800add8 <FATFS_LinkDriver>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <MX_FATFS_Init+0x20>)
 8007f06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f08:	bf00      	nop
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	2000d928 	.word	0x2000d928
 8007f10:	200000a0 	.word	0x200000a0
 8007f14:	2000d92c 	.word	0x2000d92c

08007f18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7f8 fcd3 	bl	80008e0 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8007f3a:	bf00      	nop
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7f8 fdab 	bl	8000aac <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007f56:	bf00      	nop
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 8007f70:	7bf8      	ldrb	r0, [r7, #15]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	f7f8 fdae 	bl	8000ad8 <SD_disk_read>
  /* USER CODE END READ */
}
 8007f7c:	bf00      	nop
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 8007f96:	7bf8      	ldrb	r0, [r7, #15]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	f7f8 fe05 	bl	8000bac <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007fa2:	bf00      	nop
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	603a      	str	r2, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	79b9      	ldrb	r1, [r7, #6]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7f8 fe76 	bl	8000cb4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8007fc8:	bf00      	nop
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	4a08      	ldr	r2, [pc, #32]	; (8008004 <disk_status+0x30>)
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	79fa      	ldrb	r2, [r7, #7]
 8007fec:	4905      	ldr	r1, [pc, #20]	; (8008004 <disk_status+0x30>)
 8007fee:	440a      	add	r2, r1
 8007ff0:	7a12      	ldrb	r2, [r2, #8]
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4798      	blx	r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	2000016c 	.word	0x2000016c

08008008 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	4a0d      	ldr	r2, [pc, #52]	; (8008050 <disk_initialize+0x48>)
 800801a:	5cd3      	ldrb	r3, [r2, r3]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d111      	bne.n	8008044 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	4a0b      	ldr	r2, [pc, #44]	; (8008050 <disk_initialize+0x48>)
 8008024:	2101      	movs	r1, #1
 8008026:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	4a09      	ldr	r2, [pc, #36]	; (8008050 <disk_initialize+0x48>)
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	79fa      	ldrb	r2, [r7, #7]
 8008036:	4906      	ldr	r1, [pc, #24]	; (8008050 <disk_initialize+0x48>)
 8008038:	440a      	add	r2, r1
 800803a:	7a12      	ldrb	r2, [r2, #8]
 800803c:	4610      	mov	r0, r2
 800803e:	4798      	blx	r3
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	2000016c 	.word	0x2000016c

08008054 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4a0a      	ldr	r2, [pc, #40]	; (8008090 <disk_read+0x3c>)
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	689c      	ldr	r4, [r3, #8]
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	4a07      	ldr	r2, [pc, #28]	; (8008090 <disk_read+0x3c>)
 8008074:	4413      	add	r3, r2
 8008076:	7a18      	ldrb	r0, [r3, #8]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	68b9      	ldr	r1, [r7, #8]
 800807e:	47a0      	blx	r4
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]
  return res;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
}
 8008086:	4618      	mov	r0, r3
 8008088:	371c      	adds	r7, #28
 800808a:	46bd      	mov	sp, r7
 800808c:	bd90      	pop	{r4, r7, pc}
 800808e:	bf00      	nop
 8008090:	2000016c 	.word	0x2000016c

08008094 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <disk_write+0x3c>)
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	68dc      	ldr	r4, [r3, #12]
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	4a07      	ldr	r2, [pc, #28]	; (80080d0 <disk_write+0x3c>)
 80080b4:	4413      	add	r3, r2
 80080b6:	7a18      	ldrb	r0, [r3, #8]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	47a0      	blx	r4
 80080c0:	4603      	mov	r3, r0
 80080c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd90      	pop	{r4, r7, pc}
 80080ce:	bf00      	nop
 80080d0:	2000016c 	.word	0x2000016c

080080d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	603a      	str	r2, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
 80080e0:	460b      	mov	r3, r1
 80080e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	4a09      	ldr	r2, [pc, #36]	; (800810c <disk_ioctl+0x38>)
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	79fa      	ldrb	r2, [r7, #7]
 80080f2:	4906      	ldr	r1, [pc, #24]	; (800810c <disk_ioctl+0x38>)
 80080f4:	440a      	add	r2, r1
 80080f6:	7a10      	ldrb	r0, [r2, #8]
 80080f8:	79b9      	ldrb	r1, [r7, #6]
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	4798      	blx	r3
 80080fe:	4603      	mov	r3, r0
 8008100:	73fb      	strb	r3, [r7, #15]
  return res;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	2000016c 	.word	0x2000016c

08008110 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3301      	adds	r3, #1
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008120:	89fb      	ldrh	r3, [r7, #14]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	b21a      	sxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	b21b      	sxth	r3, r3
 800812c:	4313      	orrs	r3, r2
 800812e:	b21b      	sxth	r3, r3
 8008130:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008132:	89fb      	ldrh	r3, [r7, #14]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3303      	adds	r3, #3
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	3202      	adds	r2, #2
 8008158:	7812      	ldrb	r2, [r2, #0]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	3201      	adds	r2, #1
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7812      	ldrb	r2, [r2, #0]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
	return rv;
 8008178:	68fb      	ldr	r3, [r7, #12]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	887a      	ldrh	r2, [r7, #2]
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	887b      	ldrh	r3, [r7, #2]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	887a      	ldrh	r2, [r7, #2]
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	701a      	strb	r2, [r3, #0]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	607a      	str	r2, [r7, #4]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	0a1b      	lsrs	r3, r3, #8
 80081fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	1c53      	adds	r3, r2, #1
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	1c59      	adds	r1, r3, #1
 8008238:	6179      	str	r1, [r7, #20]
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3b01      	subs	r3, #1
 8008242:	607b      	str	r3, [r7, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f1      	bne.n	800822e <mem_cpy+0x1a>
	}
}
 800824a:	bf00      	nop
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008256:	b480      	push	{r7}
 8008258:	b087      	sub	sp, #28
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	617a      	str	r2, [r7, #20]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3b01      	subs	r3, #1
 8008276:	607b      	str	r3, [r7, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1f3      	bne.n	8008266 <mem_set+0x10>
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800828c:	b480      	push	{r7}
 800828e:	b089      	sub	sp, #36	; 0x24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	61fa      	str	r2, [r7, #28]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	61ba      	str	r2, [r7, #24]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	1acb      	subs	r3, r1, r3
 80082b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3b01      	subs	r3, #1
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <mem_cmp+0x40>
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0eb      	beq.n	80082a4 <mem_cmp+0x18>

	return r;
 80082cc:	697b      	ldr	r3, [r7, #20]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3724      	adds	r7, #36	; 0x24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80082e4:	e002      	b.n	80082ec <chk_chr+0x12>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3301      	adds	r3, #1
 80082ea:	607b      	str	r3, [r7, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <chk_chr+0x26>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d1f2      	bne.n	80082e6 <chk_chr+0xc>
	return *str;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	781b      	ldrb	r3, [r3, #0]
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <lock_fs+0x22>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	4618      	mov	r0, r3
 8008324:	f002 fe55 	bl	800afd2 <ff_req_grant>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <lock_fs+0x22>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <lock_fs+0x24>
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00d      	beq.n	800836a <unlock_fs+0x2e>
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	2b0c      	cmp	r3, #12
 8008352:	d00a      	beq.n	800836a <unlock_fs+0x2e>
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b0b      	cmp	r3, #11
 8008358:	d007      	beq.n	800836a <unlock_fs+0x2e>
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	2b0f      	cmp	r3, #15
 800835e:	d004      	beq.n	800836a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	4618      	mov	r0, r3
 8008366:	f002 fe49 	bl	800affc <ff_rel_grant>
	}
}
 800836a:	bf00      	nop
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e029      	b.n	80083dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008388:	4a27      	ldr	r2, [pc, #156]	; (8008428 <chk_lock+0xb4>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	4413      	add	r3, r2
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01d      	beq.n	80083d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008396:	4a24      	ldr	r2, [pc, #144]	; (8008428 <chk_lock+0xb4>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	4413      	add	r3, r2
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d116      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <chk_lock+0xb4>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d10c      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083bc:	4a1a      	ldr	r2, [pc, #104]	; (8008428 <chk_lock+0xb4>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	4413      	add	r3, r2
 80083c4:	3308      	adds	r3, #8
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d102      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083d0:	e007      	b.n	80083e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d9d2      	bls.n	8008388 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d109      	bne.n	80083fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <chk_lock+0x80>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d101      	bne.n	80083f8 <chk_lock+0x84>
 80083f4:	2300      	movs	r3, #0
 80083f6:	e010      	b.n	800841a <chk_lock+0xa6>
 80083f8:	2312      	movs	r3, #18
 80083fa:	e00e      	b.n	800841a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d108      	bne.n	8008414 <chk_lock+0xa0>
 8008402:	4a09      	ldr	r2, [pc, #36]	; (8008428 <chk_lock+0xb4>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	4413      	add	r3, r2
 800840a:	330c      	adds	r3, #12
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	d101      	bne.n	8008418 <chk_lock+0xa4>
 8008414:	2310      	movs	r3, #16
 8008416:	e000      	b.n	800841a <chk_lock+0xa6>
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	2000014c 	.word	0x2000014c

0800842c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	e002      	b.n	800843e <enq_lock+0x12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3301      	adds	r3, #1
 800843c:	607b      	str	r3, [r7, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d806      	bhi.n	8008452 <enq_lock+0x26>
 8008444:	4a09      	ldr	r2, [pc, #36]	; (800846c <enq_lock+0x40>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	4413      	add	r3, r2
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f2      	bne.n	8008438 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b02      	cmp	r3, #2
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	2000014c 	.word	0x2000014c

08008470 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e01f      	b.n	80084c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008480:	4a41      	ldr	r2, [pc, #260]	; (8008588 <inc_lock+0x118>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	4413      	add	r3, r2
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d113      	bne.n	80084ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008492:	4a3d      	ldr	r2, [pc, #244]	; (8008588 <inc_lock+0x118>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	3304      	adds	r3, #4
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d109      	bne.n	80084ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084a6:	4a38      	ldr	r2, [pc, #224]	; (8008588 <inc_lock+0x118>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	3308      	adds	r3, #8
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d006      	beq.n	80084c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3301      	adds	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d9dc      	bls.n	8008480 <inc_lock+0x10>
 80084c6:	e000      	b.n	80084ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80084c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d132      	bne.n	8008536 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e002      	b.n	80084dc <inc_lock+0x6c>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d806      	bhi.n	80084f0 <inc_lock+0x80>
 80084e2:	4a29      	ldr	r2, [pc, #164]	; (8008588 <inc_lock+0x118>)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	4413      	add	r3, r2
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f2      	bne.n	80084d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d101      	bne.n	80084fa <inc_lock+0x8a>
 80084f6:	2300      	movs	r3, #0
 80084f8:	e040      	b.n	800857c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4922      	ldr	r1, [pc, #136]	; (8008588 <inc_lock+0x118>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	440b      	add	r3, r1
 8008506:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	491e      	ldr	r1, [pc, #120]	; (8008588 <inc_lock+0x118>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	440b      	add	r3, r1
 8008514:	3304      	adds	r3, #4
 8008516:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695a      	ldr	r2, [r3, #20]
 800851c:	491a      	ldr	r1, [pc, #104]	; (8008588 <inc_lock+0x118>)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	440b      	add	r3, r1
 8008524:	3308      	adds	r3, #8
 8008526:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <inc_lock+0x118>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	4413      	add	r3, r2
 8008530:	330c      	adds	r3, #12
 8008532:	2200      	movs	r2, #0
 8008534:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <inc_lock+0xe0>
 800853c:	4a12      	ldr	r2, [pc, #72]	; (8008588 <inc_lock+0x118>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4413      	add	r3, r2
 8008544:	330c      	adds	r3, #12
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <inc_lock+0xe0>
 800854c:	2300      	movs	r3, #0
 800854e:	e015      	b.n	800857c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d108      	bne.n	8008568 <inc_lock+0xf8>
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <inc_lock+0x118>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	4413      	add	r3, r2
 800855e:	330c      	adds	r3, #12
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	e001      	b.n	800856c <inc_lock+0xfc>
 8008568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800856c:	4906      	ldr	r1, [pc, #24]	; (8008588 <inc_lock+0x118>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	440b      	add	r3, r1
 8008574:	330c      	adds	r3, #12
 8008576:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	2000014c 	.word	0x2000014c

0800858c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3b01      	subs	r3, #1
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d825      	bhi.n	80085ec <dec_lock+0x60>
		n = Files[i].ctr;
 80085a0:	4a17      	ldr	r2, [pc, #92]	; (8008600 <dec_lock+0x74>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	4413      	add	r3, r2
 80085a8:	330c      	adds	r3, #12
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80085ae:	89fb      	ldrh	r3, [r7, #14]
 80085b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b4:	d101      	bne.n	80085ba <dec_lock+0x2e>
 80085b6:	2300      	movs	r3, #0
 80085b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80085ba:	89fb      	ldrh	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <dec_lock+0x3a>
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80085c6:	4a0e      	ldr	r2, [pc, #56]	; (8008600 <dec_lock+0x74>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	4413      	add	r3, r2
 80085ce:	330c      	adds	r3, #12
 80085d0:	89fa      	ldrh	r2, [r7, #14]
 80085d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80085d4:	89fb      	ldrh	r3, [r7, #14]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <dec_lock+0x5a>
 80085da:	4a09      	ldr	r2, [pc, #36]	; (8008600 <dec_lock+0x74>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	4413      	add	r3, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	737b      	strb	r3, [r7, #13]
 80085ea:	e001      	b.n	80085f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80085ec:	2302      	movs	r3, #2
 80085ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80085f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	2000014c 	.word	0x2000014c

08008604 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e010      	b.n	8008634 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008612:	4a0d      	ldr	r2, [pc, #52]	; (8008648 <clear_lock+0x44>)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	4413      	add	r3, r2
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d105      	bne.n	800862e <clear_lock+0x2a>
 8008622:	4a09      	ldr	r2, [pc, #36]	; (8008648 <clear_lock+0x44>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	4413      	add	r3, r2
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d9eb      	bls.n	8008612 <clear_lock+0xe>
	}
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	2000014c 	.word	0x2000014c

0800864c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	78db      	ldrb	r3, [r3, #3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d034      	beq.n	80086ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7858      	ldrb	r0, [r3, #1]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008670:	2301      	movs	r3, #1
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	f7ff fd0e 	bl	8008094 <disk_write>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <sync_window+0x38>
			res = FR_DISK_ERR;
 800867e:	2301      	movs	r3, #1
 8008680:	73fb      	strb	r3, [r7, #15]
 8008682:	e022      	b.n	80086ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	429a      	cmp	r2, r3
 8008698:	d217      	bcs.n	80086ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	789b      	ldrb	r3, [r3, #2]
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	e010      	b.n	80086c4 <sync_window+0x78>
					wsect += fs->fsize;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7858      	ldrb	r0, [r3, #1]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80086b6:	2301      	movs	r3, #1
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	f7ff fceb 	bl	8008094 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d8eb      	bhi.n	80086a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d01b      	beq.n	8008724 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ffad 	bl	800864c <sync_window>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d113      	bne.n	8008724 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7858      	ldrb	r0, [r3, #1]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008706:	2301      	movs	r3, #1
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	f7ff fca3 	bl	8008054 <disk_read>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008718:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800871a:	2301      	movs	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ff87 	bl	800864c <sync_window>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d159      	bne.n	80087fc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d149      	bne.n	80087e4 <sync_fs+0xb4>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	791b      	ldrb	r3, [r3, #4]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d145      	bne.n	80087e4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	899b      	ldrh	r3, [r3, #12]
 8008762:	461a      	mov	r2, r3
 8008764:	2100      	movs	r1, #0
 8008766:	f7ff fd76 	bl	8008256 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	333c      	adds	r3, #60	; 0x3c
 800876e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008772:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fd05 	bl	8008186 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	333c      	adds	r3, #60	; 0x3c
 8008780:	4921      	ldr	r1, [pc, #132]	; (8008808 <sync_fs+0xd8>)
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fd1a 	bl	80081bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	333c      	adds	r3, #60	; 0x3c
 800878c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008790:	491e      	ldr	r1, [pc, #120]	; (800880c <sync_fs+0xdc>)
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fd12 	bl	80081bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	333c      	adds	r3, #60	; 0x3c
 800879c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4619      	mov	r1, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	f7ff fd08 	bl	80081bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	333c      	adds	r3, #60	; 0x3c
 80087b0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7ff fcfe 	bl	80081bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7858      	ldrb	r0, [r3, #1]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d8:	2301      	movs	r3, #1
 80087da:	f7ff fc5b 	bl	8008094 <disk_write>
			fs->fsi_flag = 0;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fc71 	bl	80080d4 <disk_ioctl>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <sync_fs+0xcc>
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	41615252 	.word	0x41615252
 800880c:	61417272 	.word	0x61417272

08008810 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	3b02      	subs	r3, #2
 800881e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	3b02      	subs	r3, #2
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d301      	bcc.n	8008830 <clust2sect+0x20>
 800882c:	2300      	movs	r3, #0
 800882e:	e008      	b.n	8008842 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	461a      	mov	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	fb03 f202 	mul.w	r2, r3, r2
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	4413      	add	r3, r2
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d904      	bls.n	800886e <get_fat+0x20>
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <get_fat+0x26>
		val = 1;	/* Internal error */
 800886e:	2301      	movs	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	e0bb      	b.n	80089ec <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008878:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b03      	cmp	r3, #3
 8008880:	f000 8083 	beq.w	800898a <get_fat+0x13c>
 8008884:	2b03      	cmp	r3, #3
 8008886:	f300 80a7 	bgt.w	80089d8 <get_fat+0x18a>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d002      	beq.n	8008894 <get_fat+0x46>
 800888e:	2b02      	cmp	r3, #2
 8008890:	d056      	beq.n	8008940 <get_fat+0xf2>
 8008892:	e0a1      	b.n	80089d8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	899b      	ldrh	r3, [r3, #12]
 80088aa:	4619      	mov	r1, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80088b2:	4413      	add	r3, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	6938      	ldr	r0, [r7, #16]
 80088b8:	f7ff ff0c 	bl	80086d4 <move_window>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 808d 	bne.w	80089de <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	60fa      	str	r2, [r7, #12]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	8992      	ldrh	r2, [r2, #12]
 80088ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d2:	fb02 f201 	mul.w	r2, r2, r1
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4413      	add	r3, r2
 80088dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	899b      	ldrh	r3, [r3, #12]
 80088ea:	4619      	mov	r1, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80088f2:	4413      	add	r3, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	6938      	ldr	r0, [r7, #16]
 80088f8:	f7ff feec 	bl	80086d4 <move_window>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d16f      	bne.n	80089e2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	899b      	ldrh	r3, [r3, #12]
 8008906:	461a      	mov	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	fbb3 f1f2 	udiv	r1, r3, r2
 800890e:	fb02 f201 	mul.w	r2, r2, r1
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4413      	add	r3, r2
 8008918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	461a      	mov	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4313      	orrs	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <get_fat+0xe8>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	e002      	b.n	800893c <get_fat+0xee>
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800893c:	617b      	str	r3, [r7, #20]
			break;
 800893e:	e055      	b.n	80089ec <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	899b      	ldrh	r3, [r3, #12]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	b29b      	uxth	r3, r3
 800894c:	4619      	mov	r1, r3
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	fbb3 f3f1 	udiv	r3, r3, r1
 8008954:	4413      	add	r3, r2
 8008956:	4619      	mov	r1, r3
 8008958:	6938      	ldr	r0, [r7, #16]
 800895a:	f7ff febb 	bl	80086d4 <move_window>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d140      	bne.n	80089e6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	8992      	ldrh	r2, [r2, #12]
 8008972:	fbb3 f0f2 	udiv	r0, r3, r2
 8008976:	fb02 f200 	mul.w	r2, r2, r0
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	440b      	add	r3, r1
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fbc6 	bl	8008110 <ld_word>
 8008984:	4603      	mov	r3, r0
 8008986:	617b      	str	r3, [r7, #20]
			break;
 8008988:	e030      	b.n	80089ec <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	089b      	lsrs	r3, r3, #2
 8008994:	b29b      	uxth	r3, r3
 8008996:	4619      	mov	r1, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	fbb3 f3f1 	udiv	r3, r3, r1
 800899e:	4413      	add	r3, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	6938      	ldr	r0, [r7, #16]
 80089a4:	f7ff fe96 	bl	80086d4 <move_window>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d11d      	bne.n	80089ea <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	8992      	ldrh	r2, [r2, #12]
 80089bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80089c0:	fb02 f200 	mul.w	r2, r2, r0
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	440b      	add	r3, r1
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff fbb9 	bl	8008140 <ld_dword>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089d4:	617b      	str	r3, [r7, #20]
			break;
 80089d6:	e009      	b.n	80089ec <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089d8:	2301      	movs	r3, #1
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	e006      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089de:	bf00      	nop
 80089e0:	e004      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e2:	bf00      	nop
 80089e4:	e002      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089ea:	bf00      	nop
		}
	}

	return val;
 80089ec:	697b      	ldr	r3, [r7, #20]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089f6:	b590      	push	{r4, r7, lr}
 80089f8:	b089      	sub	sp, #36	; 0x24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a02:	2302      	movs	r3, #2
 8008a04:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f240 8102 	bls.w	8008c12 <put_fat+0x21c>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	f080 80fc 	bcs.w	8008c12 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f000 80b6 	beq.w	8008b90 <put_fat+0x19a>
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	f300 80fd 	bgt.w	8008c24 <put_fat+0x22e>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d003      	beq.n	8008a36 <put_fat+0x40>
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	f000 8083 	beq.w	8008b3a <put_fat+0x144>
 8008a34:	e0f6      	b.n	8008c24 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	085b      	lsrs	r3, r3, #1
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4413      	add	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	899b      	ldrh	r3, [r3, #12]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a54:	4413      	add	r3, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fe3b 	bl	80086d4 <move_window>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a62:	7ffb      	ldrb	r3, [r7, #31]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f040 80d6 	bne.w	8008c16 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	61ba      	str	r2, [r7, #24]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	8992      	ldrh	r2, [r2, #12]
 8008a7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a7e:	fb02 f200 	mul.w	r2, r2, r0
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	440b      	add	r3, r1
 8008a86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00d      	beq.n	8008aae <put_fat+0xb8>
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	b25a      	sxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	e001      	b.n	8008ab2 <put_fat+0xbc>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	899b      	ldrh	r3, [r3, #12]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008acc:	4413      	add	r3, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fdff 	bl	80086d4 <move_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ada:	7ffb      	ldrb	r3, [r7, #31]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 809c 	bne.w	8008c1a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	899b      	ldrh	r3, [r3, #12]
 8008aec:	461a      	mov	r2, r3
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008af4:	fb02 f200 	mul.w	r2, r2, r0
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	440b      	add	r3, r1
 8008afc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <put_fat+0x11a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	091b      	lsrs	r3, r3, #4
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	e00e      	b.n	8008b2e <put_fat+0x138>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	f023 030f 	bic.w	r3, r3, #15
 8008b1a:	b25a      	sxtb	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	b25b      	sxtb	r3, r3
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	70da      	strb	r2, [r3, #3]
			break;
 8008b38:	e074      	b.n	8008c24 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	899b      	ldrh	r3, [r3, #12]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4619      	mov	r1, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b4e:	4413      	add	r3, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fdbe 	bl	80086d4 <move_window>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b5c:	7ffb      	ldrb	r3, [r7, #31]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d15d      	bne.n	8008c1e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	8992      	ldrh	r2, [r2, #12]
 8008b70:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b74:	fb02 f200 	mul.w	r2, r2, r0
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	b292      	uxth	r2, r2
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff faff 	bl	8008186 <st_word>
			fs->wflag = 1;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	70da      	strb	r2, [r3, #3]
			break;
 8008b8e:	e049      	b.n	8008c24 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	899b      	ldrh	r3, [r3, #12]
 8008b98:	089b      	lsrs	r3, r3, #2
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fd93 	bl	80086d4 <move_window>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bb2:	7ffb      	ldrb	r3, [r7, #31]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d134      	bne.n	8008c22 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	8992      	ldrh	r2, [r2, #12]
 8008bcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bd0:	fb02 f200 	mul.w	r2, r2, r0
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fab1 	bl	8008140 <ld_dword>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008be4:	4323      	orrs	r3, r4
 8008be6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	8992      	ldrh	r2, [r2, #12]
 8008bf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bfa:	fb02 f200 	mul.w	r2, r2, r0
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	440b      	add	r3, r1
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fad9 	bl	80081bc <st_dword>
			fs->wflag = 1;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	70da      	strb	r2, [r3, #3]
			break;
 8008c10:	e008      	b.n	8008c24 <put_fat+0x22e>
		}
	}
 8008c12:	bf00      	nop
 8008c14:	e006      	b.n	8008c24 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c16:	bf00      	nop
 8008c18:	e004      	b.n	8008c24 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c1a:	bf00      	nop
 8008c1c:	e002      	b.n	8008c24 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008c22:	bf00      	nop
	return res;
 8008c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3724      	adds	r7, #36	; 0x24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd90      	pop	{r4, r7, pc}

08008c2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d904      	bls.n	8008c54 <remove_chain+0x26>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d301      	bcc.n	8008c58 <remove_chain+0x2a>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e04b      	b.n	8008cf0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	69b8      	ldr	r0, [r7, #24]
 8008c66:	f7ff fec6 	bl	80089f6 <put_fat>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c6e:	7ffb      	ldrb	r3, [r7, #31]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <remove_chain+0x4a>
 8008c74:	7ffb      	ldrb	r3, [r7, #31]
 8008c76:	e03b      	b.n	8008cf0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c78:	68b9      	ldr	r1, [r7, #8]
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f7ff fde7 	bl	800884e <get_fat>
 8008c80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d031      	beq.n	8008cec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <remove_chain+0x64>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e02e      	b.n	8008cf0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c98:	d101      	bne.n	8008c9e <remove_chain+0x70>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e028      	b.n	8008cf0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	69b8      	ldr	r0, [r7, #24]
 8008ca4:	f7ff fea7 	bl	80089f6 <put_fat>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008cac:	7ffb      	ldrb	r3, [r7, #31]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <remove_chain+0x88>
 8008cb2:	7ffb      	ldrb	r3, [r7, #31]
 8008cb4:	e01c      	b.n	8008cf0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	69da      	ldr	r2, [r3, #28]
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	3b02      	subs	r3, #2
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d20b      	bcs.n	8008cdc <remove_chain+0xae>
			fs->free_clst++;
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	1c5a      	adds	r2, r3, #1
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	791b      	ldrb	r3, [r3, #4]
 8008cd2:	f043 0301 	orr.w	r3, r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d3c6      	bcc.n	8008c78 <remove_chain+0x4a>
 8008cea:	e000      	b.n	8008cee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008cec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3720      	adds	r7, #32
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10d      	bne.n	8008d2a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <create_chain+0x2c>
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d31b      	bcc.n	8008d5c <create_chain+0x64>
 8008d24:	2301      	movs	r3, #1
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	e018      	b.n	8008d5c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff fd8e 	bl	800884e <get_fat>
 8008d32:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d801      	bhi.n	8008d3e <create_chain+0x46>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e070      	b.n	8008e20 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d44:	d101      	bne.n	8008d4a <create_chain+0x52>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	e06a      	b.n	8008e20 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d201      	bcs.n	8008d58 <create_chain+0x60>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	e063      	b.n	8008e20 <create_chain+0x128>
		scl = clst;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	3301      	adds	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d307      	bcc.n	8008d80 <create_chain+0x88>
				ncl = 2;
 8008d70:	2302      	movs	r3, #2
 8008d72:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d901      	bls.n	8008d80 <create_chain+0x88>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e04f      	b.n	8008e20 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff fd63 	bl	800884e <get_fat>
 8008d88:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00e      	beq.n	8008dae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d003      	beq.n	8008d9e <create_chain+0xa6>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d9c:	d101      	bne.n	8008da2 <create_chain+0xaa>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	e03e      	b.n	8008e20 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d1da      	bne.n	8008d60 <create_chain+0x68>
 8008daa:	2300      	movs	r3, #0
 8008dac:	e038      	b.n	8008e20 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008dae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008db4:	69f9      	ldr	r1, [r7, #28]
 8008db6:	6938      	ldr	r0, [r7, #16]
 8008db8:	f7ff fe1d 	bl	80089f6 <put_fat>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d109      	bne.n	8008dda <create_chain+0xe2>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d006      	beq.n	8008dda <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6938      	ldr	r0, [r7, #16]
 8008dd2:	f7ff fe10 	bl	80089f6 <put_fat>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008dda:	7dfb      	ldrb	r3, [r7, #23]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d116      	bne.n	8008e0e <create_chain+0x116>
		fs->last_clst = ncl;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	69da      	ldr	r2, [r3, #28]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	3b02      	subs	r3, #2
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d804      	bhi.n	8008dfe <create_chain+0x106>
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	791b      	ldrb	r3, [r3, #4]
 8008e02:	f043 0301 	orr.w	r3, r3, #1
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	711a      	strb	r2, [r3, #4]
 8008e0c:	e007      	b.n	8008e1e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d102      	bne.n	8008e1a <create_chain+0x122>
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e18:	e000      	b.n	8008e1c <create_chain+0x124>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e1e:	69fb      	ldr	r3, [r7, #28]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b087      	sub	sp, #28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	899b      	ldrh	r3, [r3, #12]
 8008e44:	461a      	mov	r2, r3
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	8952      	ldrh	r2, [r2, #10]
 8008e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	1d1a      	adds	r2, r3, #4
 8008e5a:	613a      	str	r2, [r7, #16]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <clmt_clust+0x42>
 8008e66:	2300      	movs	r3, #0
 8008e68:	e010      	b.n	8008e8c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d307      	bcc.n	8008e82 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	617b      	str	r3, [r7, #20]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e80:	e7e9      	b.n	8008e56 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008e82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	4413      	add	r3, r2
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eae:	d204      	bcs.n	8008eba <dir_sdi+0x22>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f003 031f 	and.w	r3, r3, #31
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d001      	beq.n	8008ebe <dir_sdi+0x26>
		return FR_INT_ERR;
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e071      	b.n	8008fa2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <dir_sdi+0x46>
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d902      	bls.n	8008ede <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008edc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10c      	bne.n	8008efe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	8912      	ldrh	r2, [r2, #8]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d301      	bcc.n	8008ef4 <dir_sdi+0x5c>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e056      	b.n	8008fa2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	61da      	str	r2, [r3, #28]
 8008efc:	e02d      	b.n	8008f5a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	895b      	ldrh	r3, [r3, #10]
 8008f02:	461a      	mov	r2, r3
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	899b      	ldrh	r3, [r3, #12]
 8008f08:	fb03 f302 	mul.w	r3, r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f0e:	e019      	b.n	8008f44 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6979      	ldr	r1, [r7, #20]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff fc9a 	bl	800884e <get_fat>
 8008f1a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f22:	d101      	bne.n	8008f28 <dir_sdi+0x90>
 8008f24:	2301      	movs	r3, #1
 8008f26:	e03c      	b.n	8008fa2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d904      	bls.n	8008f38 <dir_sdi+0xa0>
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d301      	bcc.n	8008f3c <dir_sdi+0xa4>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e032      	b.n	8008fa2 <dir_sdi+0x10a>
			ofs -= csz;
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d2e1      	bcs.n	8008f10 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008f4c:	6979      	ldr	r1, [r7, #20]
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f7ff fc5e 	bl	8008810 <clust2sect>
 8008f54:	4602      	mov	r2, r0
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <dir_sdi+0xd4>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e01a      	b.n	8008fa2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	69da      	ldr	r2, [r3, #28]
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	899b      	ldrh	r3, [r3, #12]
 8008f74:	4619      	mov	r1, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f7c:	441a      	add	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	899b      	ldrh	r3, [r3, #12]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f94:	fb02 f200 	mul.w	r2, r2, r0
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	18ca      	adds	r2, r1, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b086      	sub	sp, #24
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	3320      	adds	r3, #32
 8008fc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <dir_next+0x28>
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fd0:	d301      	bcc.n	8008fd6 <dir_next+0x2c>
 8008fd2:	2304      	movs	r3, #4
 8008fd4:	e0bb      	b.n	800914e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fe2:	fb02 f201 	mul.w	r2, r2, r1
 8008fe6:	1a9b      	subs	r3, r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 809d 	bne.w	8009128 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	8912      	ldrh	r2, [r2, #8]
 8009008:	4293      	cmp	r3, r2
 800900a:	f0c0 808d 	bcc.w	8009128 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	61da      	str	r2, [r3, #28]
 8009014:	2304      	movs	r3, #4
 8009016:	e09a      	b.n	800914e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	899b      	ldrh	r3, [r3, #12]
 800901c:	461a      	mov	r2, r3
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	fbb3 f3f2 	udiv	r3, r3, r2
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	8952      	ldrh	r2, [r2, #10]
 8009028:	3a01      	subs	r2, #1
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d17b      	bne.n	8009128 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	4619      	mov	r1, r3
 8009038:	4610      	mov	r0, r2
 800903a:	f7ff fc08 	bl	800884e <get_fat>
 800903e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d801      	bhi.n	800904a <dir_next+0xa0>
 8009046:	2302      	movs	r3, #2
 8009048:	e081      	b.n	800914e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009050:	d101      	bne.n	8009056 <dir_next+0xac>
 8009052:	2301      	movs	r3, #1
 8009054:	e07b      	b.n	800914e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	429a      	cmp	r2, r3
 800905e:	d359      	bcc.n	8009114 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	61da      	str	r2, [r3, #28]
 800906c:	2304      	movs	r3, #4
 800906e:	e06e      	b.n	800914e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f7ff fe3d 	bl	8008cf8 <create_chain>
 800907e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <dir_next+0xe0>
 8009086:	2307      	movs	r3, #7
 8009088:	e061      	b.n	800914e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <dir_next+0xea>
 8009090:	2302      	movs	r3, #2
 8009092:	e05c      	b.n	800914e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800909a:	d101      	bne.n	80090a0 <dir_next+0xf6>
 800909c:	2301      	movs	r3, #1
 800909e:	e056      	b.n	800914e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff fad3 	bl	800864c <sync_window>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <dir_next+0x106>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e04e      	b.n	800914e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	899b      	ldrh	r3, [r3, #12]
 80090ba:	461a      	mov	r2, r3
 80090bc:	2100      	movs	r1, #0
 80090be:	f7ff f8ca 	bl	8008256 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090c2:	2300      	movs	r3, #0
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	6979      	ldr	r1, [r7, #20]
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7ff fba1 	bl	8008810 <clust2sect>
 80090ce:	4602      	mov	r2, r0
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	639a      	str	r2, [r3, #56]	; 0x38
 80090d4:	e012      	b.n	80090fc <dir_next+0x152>
						fs->wflag = 1;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff fab5 	bl	800864c <sync_window>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <dir_next+0x142>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e030      	b.n	800914e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3301      	adds	r3, #1
 80090f0:	613b      	str	r3, [r7, #16]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	895b      	ldrh	r3, [r3, #10]
 8009100:	461a      	mov	r2, r3
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4293      	cmp	r3, r2
 8009106:	d3e6      	bcc.n	80090d6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800911a:	6979      	ldr	r1, [r7, #20]
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fb77 	bl	8008810 <clust2sect>
 8009122:	4602      	mov	r2, r0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	899b      	ldrh	r3, [r3, #12]
 8009138:	461a      	mov	r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009140:	fb02 f200 	mul.w	r2, r2, r0
 8009144:	1a9b      	subs	r3, r3, r2
 8009146:	18ca      	adds	r2, r1, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009166:	2100      	movs	r1, #0
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7ff fe95 	bl	8008e98 <dir_sdi>
 800916e:	4603      	mov	r3, r0
 8009170:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d12b      	bne.n	80091d0 <dir_alloc+0x7a>
		n = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	4619      	mov	r1, r3
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff faa6 	bl	80086d4 <move_window>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d11d      	bne.n	80091ce <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2be5      	cmp	r3, #229	; 0xe5
 800919a:	d004      	beq.n	80091a6 <dir_alloc+0x50>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d107      	bne.n	80091b6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3301      	adds	r3, #1
 80091aa:	613b      	str	r3, [r7, #16]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d102      	bne.n	80091ba <dir_alloc+0x64>
 80091b4:	e00c      	b.n	80091d0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091b6:	2300      	movs	r3, #0
 80091b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091ba:	2101      	movs	r1, #1
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fef4 	bl	8008faa <dir_next>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0d7      	beq.n	800917c <dir_alloc+0x26>
 80091cc:	e000      	b.n	80091d0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091d0:	7dfb      	ldrb	r3, [r7, #23]
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d101      	bne.n	80091da <dir_alloc+0x84>
 80091d6:	2307      	movs	r3, #7
 80091d8:	75fb      	strb	r3, [r7, #23]
	return res;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	331a      	adds	r3, #26
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fe ff8c 	bl	8008110 <ld_word>
 80091f8:	4603      	mov	r3, r0
 80091fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b03      	cmp	r3, #3
 8009202:	d109      	bne.n	8009218 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	3314      	adds	r3, #20
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe ff81 	bl	8008110 <ld_word>
 800920e:	4603      	mov	r3, r0
 8009210:	041b      	lsls	r3, r3, #16
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009218:	68fb      	ldr	r3, [r7, #12]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	331a      	adds	r3, #26
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	b292      	uxth	r2, r2
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe ffa4 	bl	8008186 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d109      	bne.n	800925a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f103 0214 	add.w	r2, r3, #20
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	b29b      	uxth	r3, r3
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f7fe ff96 	bl	8008186 <st_word>
	}
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009264:	b590      	push	{r4, r7, lr}
 8009266:	b087      	sub	sp, #28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	331a      	adds	r3, #26
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe ff4c 	bl	8008110 <ld_word>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <cmp_lfn+0x1e>
 800927e:	2300      	movs	r3, #0
 8009280:	e059      	b.n	8009336 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800928a:	1e5a      	subs	r2, r3, #1
 800928c:	4613      	mov	r3, r2
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009298:	2301      	movs	r3, #1
 800929a:	81fb      	strh	r3, [r7, #14]
 800929c:	2300      	movs	r3, #0
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	e033      	b.n	800930a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80092a2:	4a27      	ldr	r2, [pc, #156]	; (8009340 <cmp_lfn+0xdc>)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4413      	add	r3, r2
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	4413      	add	r3, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7fe ff2d 	bl	8008110 <ld_word>
 80092b6:	4603      	mov	r3, r0
 80092b8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01a      	beq.n	80092f6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2bfe      	cmp	r3, #254	; 0xfe
 80092c4:	d812      	bhi.n	80092ec <cmp_lfn+0x88>
 80092c6:	89bb      	ldrh	r3, [r7, #12]
 80092c8:	4618      	mov	r0, r3
 80092ca:	f001 fdd1 	bl	800ae70 <ff_wtoupper>
 80092ce:	4603      	mov	r3, r0
 80092d0:	461c      	mov	r4, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	617a      	str	r2, [r7, #20]
 80092d8:	005b      	lsls	r3, r3, #1
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4413      	add	r3, r2
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 fdc5 	bl	800ae70 <ff_wtoupper>
 80092e6:	4603      	mov	r3, r0
 80092e8:	429c      	cmp	r4, r3
 80092ea:	d001      	beq.n	80092f0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80092ec:	2300      	movs	r3, #0
 80092ee:	e022      	b.n	8009336 <cmp_lfn+0xd2>
			}
			wc = uc;
 80092f0:	89bb      	ldrh	r3, [r7, #12]
 80092f2:	81fb      	strh	r3, [r7, #14]
 80092f4:	e006      	b.n	8009304 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80092f6:	89bb      	ldrh	r3, [r7, #12]
 80092f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d001      	beq.n	8009304 <cmp_lfn+0xa0>
 8009300:	2300      	movs	r3, #0
 8009302:	e018      	b.n	8009336 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3301      	adds	r3, #1
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b0c      	cmp	r3, #12
 800930e:	d9c8      	bls.n	80092a2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <cmp_lfn+0xd0>
 800931c:	89fb      	ldrh	r3, [r7, #14]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d008      	beq.n	8009334 <cmp_lfn+0xd0>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <cmp_lfn+0xd0>
 8009330:	2300      	movs	r3, #0
 8009332:	e000      	b.n	8009336 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009334:	2301      	movs	r3, #1
}
 8009336:	4618      	mov	r0, r3
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	bd90      	pop	{r4, r7, pc}
 800933e:	bf00      	nop
 8009340:	08010408 	.word	0x08010408

08009344 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4611      	mov	r1, r2
 8009350:	461a      	mov	r2, r3
 8009352:	460b      	mov	r3, r1
 8009354:	71fb      	strb	r3, [r7, #7]
 8009356:	4613      	mov	r3, r2
 8009358:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	330d      	adds	r3, #13
 800935e:	79ba      	ldrb	r2, [r7, #6]
 8009360:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	330b      	adds	r3, #11
 8009366:	220f      	movs	r2, #15
 8009368:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	330c      	adds	r3, #12
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	331a      	adds	r3, #26
 8009376:	2100      	movs	r1, #0
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe ff04 	bl	8008186 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	1e5a      	subs	r2, r3, #1
 8009382:	4613      	mov	r3, r2
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	82fb      	strh	r3, [r7, #22]
 8009392:	2300      	movs	r3, #0
 8009394:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009396:	8afb      	ldrh	r3, [r7, #22]
 8009398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800939c:	4293      	cmp	r3, r2
 800939e:	d007      	beq.n	80093b0 <put_lfn+0x6c>
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	61fa      	str	r2, [r7, #28]
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80093b0:	4a17      	ldr	r2, [pc, #92]	; (8009410 <put_lfn+0xcc>)
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	4413      	add	r3, r2
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	4413      	add	r3, r2
 80093be:	8afa      	ldrh	r2, [r7, #22]
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fedf 	bl	8008186 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80093c8:	8afb      	ldrh	r3, [r7, #22]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <put_lfn+0x90>
 80093ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093d2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b0c      	cmp	r3, #12
 80093de:	d9da      	bls.n	8009396 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80093e0:	8afb      	ldrh	r3, [r7, #22]
 80093e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d006      	beq.n	80093f8 <put_lfn+0xb4>
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d103      	bne.n	8009400 <put_lfn+0xbc>
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	79fa      	ldrb	r2, [r7, #7]
 8009404:	701a      	strb	r2, [r3, #0]
}
 8009406:	bf00      	nop
 8009408:	3720      	adds	r7, #32
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	08010408 	.word	0x08010408

08009414 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	; 0x30
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009422:	220b      	movs	r2, #11
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7fe fef4 	bl	8008214 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	2b05      	cmp	r3, #5
 8009430:	d92b      	bls.n	800948a <gen_numname+0x76>
		sr = seq;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009436:	e022      	b.n	800947e <gen_numname+0x6a>
			wc = *lfn++;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	1c9a      	adds	r2, r3, #2
 800943c:	607a      	str	r2, [r7, #4]
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009442:	2300      	movs	r3, #0
 8009444:	62bb      	str	r3, [r7, #40]	; 0x28
 8009446:	e017      	b.n	8009478 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	005a      	lsls	r2, r3, #1
 800944c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	4413      	add	r3, r2
 8009454:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <gen_numname+0x5e>
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800946c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009470:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	3301      	adds	r3, #1
 8009476:	62bb      	str	r3, [r7, #40]	; 0x28
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	2b0f      	cmp	r3, #15
 800947c:	d9e4      	bls.n	8009448 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1d8      	bne.n	8009438 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800948a:	2307      	movs	r3, #7
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	b2db      	uxtb	r3, r3
 8009498:	3330      	adds	r3, #48	; 0x30
 800949a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800949e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a2:	2b39      	cmp	r3, #57	; 0x39
 80094a4:	d904      	bls.n	80094b0 <gen_numname+0x9c>
 80094a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094aa:	3307      	adds	r3, #7
 80094ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	1e5a      	subs	r2, r3, #1
 80094b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80094b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80094ba:	4413      	add	r3, r2
 80094bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80094c0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	091b      	lsrs	r3, r3, #4
 80094c8:	603b      	str	r3, [r7, #0]
	} while (seq);
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1de      	bne.n	800948e <gen_numname+0x7a>
	ns[i] = '~';
 80094d0:	f107 0214 	add.w	r2, r7, #20
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	4413      	add	r3, r2
 80094d8:	227e      	movs	r2, #126	; 0x7e
 80094da:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80094dc:	2300      	movs	r3, #0
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
 80094e0:	e002      	b.n	80094e8 <gen_numname+0xd4>
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	3301      	adds	r3, #1
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
 80094e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d205      	bcs.n	80094fc <gen_numname+0xe8>
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	4413      	add	r3, r2
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	d1f2      	bne.n	80094e2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	2b07      	cmp	r3, #7
 8009500:	d808      	bhi.n	8009514 <gen_numname+0x100>
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	62ba      	str	r2, [r7, #40]	; 0x28
 8009508:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800950c:	4413      	add	r3, r2
 800950e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009512:	e000      	b.n	8009516 <gen_numname+0x102>
 8009514:	2120      	movs	r1, #32
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	627a      	str	r2, [r7, #36]	; 0x24
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4413      	add	r3, r2
 8009520:	460a      	mov	r2, r1
 8009522:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009526:	2b07      	cmp	r3, #7
 8009528:	d9e8      	bls.n	80094fc <gen_numname+0xe8>
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	3730      	adds	r7, #48	; 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009540:	230b      	movs	r3, #11
 8009542:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	b2da      	uxtb	r2, r3
 8009548:	0852      	lsrs	r2, r2, #1
 800954a:	01db      	lsls	r3, r3, #7
 800954c:	4313      	orrs	r3, r2
 800954e:	b2da      	uxtb	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	1c59      	adds	r1, r3, #1
 8009554:	6079      	str	r1, [r7, #4]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	4413      	add	r3, r2
 800955a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	3b01      	subs	r3, #1
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1ed      	bne.n	8009544 <sum_sfn+0x10>
	return sum;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b086      	sub	sp, #24
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fc86 	bl	8008e98 <dir_sdi>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <dir_find+0x24>
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	e0a9      	b.n	80096ee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800959a:	23ff      	movs	r3, #255	; 0xff
 800959c:	753b      	strb	r3, [r7, #20]
 800959e:	7d3b      	ldrb	r3, [r7, #20]
 80095a0:	757b      	strb	r3, [r7, #21]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6938      	ldr	r0, [r7, #16]
 80095b2:	f7ff f88f 	bl	80086d4 <move_window>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8090 	bne.w	80096e2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095ca:	7dbb      	ldrb	r3, [r7, #22]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <dir_find+0x60>
 80095d0:	2304      	movs	r3, #4
 80095d2:	75fb      	strb	r3, [r7, #23]
 80095d4:	e08a      	b.n	80096ec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	330b      	adds	r3, #11
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7bfa      	ldrb	r2, [r7, #15]
 80095e8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80095ea:	7dbb      	ldrb	r3, [r7, #22]
 80095ec:	2be5      	cmp	r3, #229	; 0xe5
 80095ee:	d007      	beq.n	8009600 <dir_find+0x8a>
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <dir_find+0x98>
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	2b0f      	cmp	r3, #15
 80095fe:	d006      	beq.n	800960e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009600:	23ff      	movs	r3, #255	; 0xff
 8009602:	757b      	strb	r3, [r7, #21]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960a:	631a      	str	r2, [r3, #48]	; 0x30
 800960c:	e05e      	b.n	80096cc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800960e:	7bfb      	ldrb	r3, [r7, #15]
 8009610:	2b0f      	cmp	r3, #15
 8009612:	d136      	bne.n	8009682 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	d154      	bne.n	80096cc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009622:	7dbb      	ldrb	r3, [r7, #22]
 8009624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00d      	beq.n	8009648 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	7b5b      	ldrb	r3, [r3, #13]
 8009632:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800963a:	75bb      	strb	r3, [r7, #22]
 800963c:	7dbb      	ldrb	r3, [r7, #22]
 800963e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009648:	7dba      	ldrb	r2, [r7, #22]
 800964a:	7d7b      	ldrb	r3, [r7, #21]
 800964c:	429a      	cmp	r2, r3
 800964e:	d115      	bne.n	800967c <dir_find+0x106>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	330d      	adds	r3, #13
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7d3a      	ldrb	r2, [r7, #20]
 800965a:	429a      	cmp	r2, r3
 800965c:	d10e      	bne.n	800967c <dir_find+0x106>
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7ff fdfb 	bl	8009264 <cmp_lfn>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <dir_find+0x106>
 8009674:	7d7b      	ldrb	r3, [r7, #21]
 8009676:	3b01      	subs	r3, #1
 8009678:	b2db      	uxtb	r3, r3
 800967a:	e000      	b.n	800967e <dir_find+0x108>
 800967c:	23ff      	movs	r3, #255	; 0xff
 800967e:	757b      	strb	r3, [r7, #21]
 8009680:	e024      	b.n	80096cc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009682:	7d7b      	ldrb	r3, [r7, #21]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <dir_find+0x126>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	4618      	mov	r0, r3
 800968e:	f7ff ff51 	bl	8009534 <sum_sfn>
 8009692:	4603      	mov	r3, r0
 8009694:	461a      	mov	r2, r3
 8009696:	7d3b      	ldrb	r3, [r7, #20]
 8009698:	4293      	cmp	r3, r2
 800969a:	d024      	beq.n	80096e6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <dir_find+0x14a>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a18      	ldr	r0, [r3, #32]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3324      	adds	r3, #36	; 0x24
 80096b2:	220b      	movs	r2, #11
 80096b4:	4619      	mov	r1, r3
 80096b6:	f7fe fde9 	bl	800828c <mem_cmp>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d014      	beq.n	80096ea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096c0:	23ff      	movs	r3, #255	; 0xff
 80096c2:	757b      	strb	r3, [r7, #21]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80096cc:	2100      	movs	r1, #0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fc6b 	bl	8008faa <dir_next>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f43f af65 	beq.w	80095aa <dir_find+0x34>
 80096e0:	e004      	b.n	80096ec <dir_find+0x176>
		if (res != FR_OK) break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80096ea:	bf00      	nop

	return res;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08c      	sub	sp, #48	; 0x30
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800970c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <dir_register+0x20>
 8009714:	2306      	movs	r3, #6
 8009716:	e0e0      	b.n	80098da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009718:	2300      	movs	r3, #0
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
 800971c:	e002      	b.n	8009724 <dir_register+0x2c>
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	3301      	adds	r3, #1
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f4      	bne.n	800971e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	220c      	movs	r2, #12
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fd67 	bl	8008214 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d032      	beq.n	80097b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2240      	movs	r2, #64	; 0x40
 8009754:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009758:	2301      	movs	r3, #1
 800975a:	62bb      	str	r3, [r7, #40]	; 0x28
 800975c:	e016      	b.n	800978c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	f107 010c 	add.w	r1, r7, #12
 800976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976e:	f7ff fe51 	bl	8009414 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff feff 	bl	8009576 <dir_find>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800977e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009782:	2b00      	cmp	r3, #0
 8009784:	d106      	bne.n	8009794 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	3301      	adds	r3, #1
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	2b63      	cmp	r3, #99	; 0x63
 8009790:	d9e5      	bls.n	800975e <dir_register+0x66>
 8009792:	e000      	b.n	8009796 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009794:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	2b64      	cmp	r3, #100	; 0x64
 800979a:	d101      	bne.n	80097a0 <dir_register+0xa8>
 800979c:	2307      	movs	r3, #7
 800979e:	e09c      	b.n	80098da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80097a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d002      	beq.n	80097ae <dir_register+0xb6>
 80097a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097ac:	e095      	b.n	80098da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80097ae:	7dfa      	ldrb	r2, [r7, #23]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <dir_register+0xd8>
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	330c      	adds	r3, #12
 80097c4:	4a47      	ldr	r2, [pc, #284]	; (80098e4 <dir_register+0x1ec>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	089b      	lsrs	r3, r3, #2
 80097cc:	3301      	adds	r3, #1
 80097ce:	e000      	b.n	80097d2 <dir_register+0xda>
 80097d0:	2301      	movs	r3, #1
 80097d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80097d4:	6a39      	ldr	r1, [r7, #32]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff fcbd 	bl	8009156 <dir_alloc>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80097e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d148      	bne.n	800987c <dir_register+0x184>
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	623b      	str	r3, [r7, #32]
 80097f0:	6a3b      	ldr	r3, [r7, #32]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d042      	beq.n	800987c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	695a      	ldr	r2, [r3, #20]
 80097fa:	6a3b      	ldr	r3, [r7, #32]
 80097fc:	015b      	lsls	r3, r3, #5
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff fb48 	bl	8008e98 <dir_sdi>
 8009808:	4603      	mov	r3, r0
 800980a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800980e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009812:	2b00      	cmp	r3, #0
 8009814:	d132      	bne.n	800987c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3324      	adds	r3, #36	; 0x24
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fe8a 	bl	8009534 <sum_sfn>
 8009820:	4603      	mov	r3, r0
 8009822:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	4619      	mov	r1, r3
 800982a:	69f8      	ldr	r0, [r7, #28]
 800982c:	f7fe ff52 	bl	80086d4 <move_window>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800983a:	2b00      	cmp	r3, #0
 800983c:	d11d      	bne.n	800987a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	6918      	ldr	r0, [r3, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a19      	ldr	r1, [r3, #32]
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	7efb      	ldrb	r3, [r7, #27]
 800984c:	f7ff fd7a 	bl	8009344 <put_lfn>
				fs->wflag = 1;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	2201      	movs	r2, #1
 8009854:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009856:	2100      	movs	r1, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7ff fba6 	bl	8008faa <dir_next>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009868:	2b00      	cmp	r3, #0
 800986a:	d107      	bne.n	800987c <dir_register+0x184>
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	3b01      	subs	r3, #1
 8009870:	623b      	str	r3, [r7, #32]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1d5      	bne.n	8009824 <dir_register+0x12c>
 8009878:	e000      	b.n	800987c <dir_register+0x184>
				if (res != FR_OK) break;
 800987a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800987c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009880:	2b00      	cmp	r3, #0
 8009882:	d128      	bne.n	80098d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	4619      	mov	r1, r3
 800988a:	69f8      	ldr	r0, [r7, #28]
 800988c:	f7fe ff22 	bl	80086d4 <move_window>
 8009890:	4603      	mov	r3, r0
 8009892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11b      	bne.n	80098d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	2220      	movs	r2, #32
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fcd5 	bl	8008256 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a18      	ldr	r0, [r3, #32]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	220b      	movs	r2, #11
 80098b6:	4619      	mov	r1, r3
 80098b8:	f7fe fcac 	bl	8008214 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	330c      	adds	r3, #12
 80098c8:	f002 0218 	and.w	r2, r2, #24
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2201      	movs	r2, #1
 80098d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80098d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3730      	adds	r7, #48	; 0x30
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	4ec4ec4f 	.word	0x4ec4ec4f

080098e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08a      	sub	sp, #40	; 0x28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	61ba      	str	r2, [r7, #24]
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4413      	add	r3, r2
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009918:	2b1f      	cmp	r3, #31
 800991a:	d940      	bls.n	800999e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800991c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991e:	2b2f      	cmp	r3, #47	; 0x2f
 8009920:	d006      	beq.n	8009930 <create_name+0x48>
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	2b5c      	cmp	r3, #92	; 0x5c
 8009926:	d110      	bne.n	800994a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009928:	e002      	b.n	8009930 <create_name+0x48>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	3301      	adds	r3, #1
 800992e:	61bb      	str	r3, [r7, #24]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	4413      	add	r3, r2
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	2b2f      	cmp	r3, #47	; 0x2f
 800993a:	d0f6      	beq.n	800992a <create_name+0x42>
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	4413      	add	r3, r2
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b5c      	cmp	r3, #92	; 0x5c
 8009946:	d0f0      	beq.n	800992a <create_name+0x42>
			break;
 8009948:	e02a      	b.n	80099a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2bfe      	cmp	r3, #254	; 0xfe
 800994e:	d901      	bls.n	8009954 <create_name+0x6c>
 8009950:	2306      	movs	r3, #6
 8009952:	e177      	b.n	8009c44 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009956:	b2db      	uxtb	r3, r3
 8009958:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800995a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800995c:	2101      	movs	r1, #1
 800995e:	4618      	mov	r0, r3
 8009960:	f001 fa4a 	bl	800adf8 <ff_convert>
 8009964:	4603      	mov	r3, r0
 8009966:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <create_name+0x8a>
 800996e:	2306      	movs	r3, #6
 8009970:	e168      	b.n	8009c44 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009974:	2b7f      	cmp	r3, #127	; 0x7f
 8009976:	d809      	bhi.n	800998c <create_name+0xa4>
 8009978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800997a:	4619      	mov	r1, r3
 800997c:	48b3      	ldr	r0, [pc, #716]	; (8009c4c <create_name+0x364>)
 800997e:	f7fe fcac 	bl	80082da <chk_chr>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <create_name+0xa4>
 8009988:	2306      	movs	r3, #6
 800998a:	e15b      	b.n	8009c44 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	617a      	str	r2, [r7, #20]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800999a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800999c:	e7b4      	b.n	8009908 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800999e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	441a      	add	r2, r3
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ac:	2b1f      	cmp	r3, #31
 80099ae:	d801      	bhi.n	80099b4 <create_name+0xcc>
 80099b0:	2304      	movs	r3, #4
 80099b2:	e000      	b.n	80099b6 <create_name+0xce>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099ba:	e011      	b.n	80099e0 <create_name+0xf8>
		w = lfn[di - 1];
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099c2:	3b01      	subs	r3, #1
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80099ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d002      	beq.n	80099da <create_name+0xf2>
 80099d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d106      	bne.n	80099e8 <create_name+0x100>
		di--;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3b01      	subs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1ea      	bne.n	80099bc <create_name+0xd4>
 80099e6:	e000      	b.n	80099ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80099e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	2200      	movs	r2, #0
 80099f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <create_name+0x118>
 80099fc:	2306      	movs	r3, #6
 80099fe:	e121      	b.n	8009c44 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3324      	adds	r3, #36	; 0x24
 8009a04:	220b      	movs	r2, #11
 8009a06:	2120      	movs	r1, #32
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe fc24 	bl	8008256 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	e002      	b.n	8009a1a <create_name+0x132>
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	d0f5      	beq.n	8009a14 <create_name+0x12c>
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	2b2e      	cmp	r3, #46	; 0x2e
 8009a34:	d0ee      	beq.n	8009a14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d009      	beq.n	8009a50 <create_name+0x168>
 8009a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a40:	f043 0303 	orr.w	r3, r3, #3
 8009a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a48:	e002      	b.n	8009a50 <create_name+0x168>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d009      	beq.n	8009a6a <create_name+0x182>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	2b2e      	cmp	r3, #46	; 0x2e
 8009a68:	d1ef      	bne.n	8009a4a <create_name+0x162>

	i = b = 0; ni = 8;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a70:	2300      	movs	r3, #0
 8009a72:	623b      	str	r3, [r7, #32]
 8009a74:	2308      	movs	r3, #8
 8009a76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	1c5a      	adds	r2, r3, #1
 8009a7c:	61ba      	str	r2, [r7, #24]
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8090 	beq.w	8009bb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d006      	beq.n	8009aa4 <create_name+0x1bc>
 8009a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a98:	2b2e      	cmp	r3, #46	; 0x2e
 8009a9a:	d10a      	bne.n	8009ab2 <create_name+0x1ca>
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d006      	beq.n	8009ab2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa8:	f043 0303 	orr.w	r3, r3, #3
 8009aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ab0:	e07d      	b.n	8009bae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009ab2:	6a3a      	ldr	r2, [r7, #32]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d203      	bcs.n	8009ac2 <create_name+0x1da>
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d123      	bne.n	8009b0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b0b      	cmp	r3, #11
 8009ac6:	d106      	bne.n	8009ad6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009acc:	f043 0303 	orr.w	r3, r3, #3
 8009ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ad4:	e06f      	b.n	8009bb6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d005      	beq.n	8009aea <create_name+0x202>
 8009ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ae2:	f043 0303 	orr.w	r3, r3, #3
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d860      	bhi.n	8009bb4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	2308      	movs	r3, #8
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	230b      	movs	r3, #11
 8009afc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009afe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b08:	e051      	b.n	8009bae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b0e:	d914      	bls.n	8009b3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 f96f 	bl	800adf8 <ff_convert>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <create_name+0x246>
 8009b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b26:	3b80      	subs	r3, #128	; 0x80
 8009b28:	4a49      	ldr	r2, [pc, #292]	; (8009c50 <create_name+0x368>)
 8009b2a:	5cd3      	ldrb	r3, [r2, r3]
 8009b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d007      	beq.n	8009b50 <create_name+0x268>
 8009b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b42:	4619      	mov	r1, r3
 8009b44:	4843      	ldr	r0, [pc, #268]	; (8009c54 <create_name+0x36c>)
 8009b46:	f7fe fbc8 	bl	80082da <chk_chr>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d008      	beq.n	8009b62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b50:	235f      	movs	r3, #95	; 0x5f
 8009b52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b58:	f043 0303 	orr.w	r3, r3, #3
 8009b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b60:	e01b      	b.n	8009b9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b64:	2b40      	cmp	r3, #64	; 0x40
 8009b66:	d909      	bls.n	8009b7c <create_name+0x294>
 8009b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b6a:	2b5a      	cmp	r3, #90	; 0x5a
 8009b6c:	d806      	bhi.n	8009b7c <create_name+0x294>
					b |= 2;
 8009b6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b72:	f043 0302 	orr.w	r3, r3, #2
 8009b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b7a:	e00e      	b.n	8009b9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b7e:	2b60      	cmp	r3, #96	; 0x60
 8009b80:	d90b      	bls.n	8009b9a <create_name+0x2b2>
 8009b82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b84:	2b7a      	cmp	r3, #122	; 0x7a
 8009b86:	d808      	bhi.n	8009b9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b96:	3b20      	subs	r3, #32
 8009b98:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	623a      	str	r2, [r7, #32]
 8009ba0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ba2:	b2d1      	uxtb	r1, r2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	460a      	mov	r2, r1
 8009baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009bae:	e763      	b.n	8009a78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009bb0:	bf00      	nop
 8009bb2:	e000      	b.n	8009bb6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009bb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bbc:	2be5      	cmp	r3, #229	; 0xe5
 8009bbe:	d103      	bne.n	8009bc8 <create_name+0x2e0>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2205      	movs	r2, #5
 8009bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	d104      	bne.n	8009bd8 <create_name+0x2f0>
 8009bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bdc:	f003 030c 	and.w	r3, r3, #12
 8009be0:	2b0c      	cmp	r3, #12
 8009be2:	d005      	beq.n	8009bf0 <create_name+0x308>
 8009be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d105      	bne.n	8009bfc <create_name+0x314>
 8009bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf4:	f043 0302 	orr.w	r3, r3, #2
 8009bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d117      	bne.n	8009c38 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d105      	bne.n	8009c20 <create_name+0x338>
 8009c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c18:	f043 0310 	orr.w	r3, r3, #16
 8009c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009c20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c24:	f003 030c 	and.w	r3, r3, #12
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d105      	bne.n	8009c38 <create_name+0x350>
 8009c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c30:	f043 0308 	orr.w	r3, r3, #8
 8009c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009c42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3728      	adds	r7, #40	; 0x28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	08010258 	.word	0x08010258
 8009c50:	08010388 	.word	0x08010388
 8009c54:	08010264 	.word	0x08010264

08009c58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c6c:	e002      	b.n	8009c74 <follow_path+0x1c>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b2f      	cmp	r3, #47	; 0x2f
 8009c7a:	d0f8      	beq.n	8009c6e <follow_path+0x16>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b5c      	cmp	r3, #92	; 0x5c
 8009c82:	d0f4      	beq.n	8009c6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	2200      	movs	r2, #0
 8009c88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b1f      	cmp	r3, #31
 8009c90:	d80a      	bhi.n	8009ca8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2280      	movs	r2, #128	; 0x80
 8009c96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7ff f8fb 	bl	8008e98 <dir_sdi>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
 8009ca6:	e048      	b.n	8009d3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ca8:	463b      	mov	r3, r7
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff fe1b 	bl	80098e8 <create_name>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d139      	bne.n	8009d30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff fc5a 	bl	8009576 <dir_find>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ccc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00a      	beq.n	8009cea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d12c      	bne.n	8009d34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009cda:	7afb      	ldrb	r3, [r7, #11]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d127      	bne.n	8009d34 <follow_path+0xdc>
 8009ce4:	2305      	movs	r3, #5
 8009ce6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ce8:	e024      	b.n	8009d34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d121      	bne.n	8009d38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	799b      	ldrb	r3, [r3, #6]
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009d00:	2305      	movs	r3, #5
 8009d02:	75fb      	strb	r3, [r7, #23]
 8009d04:	e019      	b.n	8009d3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	8992      	ldrh	r2, [r2, #12]
 8009d14:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d18:	fb02 f200 	mul.w	r2, r2, r0
 8009d1c:	1a9b      	subs	r3, r3, r2
 8009d1e:	440b      	add	r3, r1
 8009d20:	4619      	mov	r1, r3
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff fa5e 	bl	80091e4 <ld_clust>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d2e:	e7bb      	b.n	8009ca8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009d30:	bf00      	nop
 8009d32:	e002      	b.n	8009d3a <follow_path+0xe2>
				break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d38:	bf00      	nop
			}
		}
	}

	return res;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d031      	beq.n	8009dbe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	e002      	b.n	8009d68 <get_ldnumber+0x24>
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	3301      	adds	r3, #1
 8009d66:	617b      	str	r3, [r7, #20]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b1f      	cmp	r3, #31
 8009d6e:	d903      	bls.n	8009d78 <get_ldnumber+0x34>
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b3a      	cmp	r3, #58	; 0x3a
 8009d76:	d1f4      	bne.n	8009d62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b3a      	cmp	r3, #58	; 0x3a
 8009d7e:	d11c      	bne.n	8009dba <get_ldnumber+0x76>
			tp = *path;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	60fa      	str	r2, [r7, #12]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	3b30      	subs	r3, #48	; 0x30
 8009d90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b09      	cmp	r3, #9
 8009d96:	d80e      	bhi.n	8009db6 <get_ldnumber+0x72>
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d10a      	bne.n	8009db6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d107      	bne.n	8009db6 <get_ldnumber+0x72>
					vol = (int)i;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	3301      	adds	r3, #1
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	e002      	b.n	8009dc0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009dbe:	693b      	ldr	r3, [r7, #16]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	70da      	strb	r2, [r3, #3]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009de2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fe fc74 	bl	80086d4 <move_window>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <check_fs+0x2a>
 8009df2:	2304      	movs	r3, #4
 8009df4:	e038      	b.n	8009e68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	333c      	adds	r3, #60	; 0x3c
 8009dfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe f986 	bl	8008110 <ld_word>
 8009e04:	4603      	mov	r3, r0
 8009e06:	461a      	mov	r2, r3
 8009e08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d001      	beq.n	8009e14 <check_fs+0x48>
 8009e10:	2303      	movs	r3, #3
 8009e12:	e029      	b.n	8009e68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1a:	2be9      	cmp	r3, #233	; 0xe9
 8009e1c:	d009      	beq.n	8009e32 <check_fs+0x66>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e24:	2beb      	cmp	r3, #235	; 0xeb
 8009e26:	d11e      	bne.n	8009e66 <check_fs+0x9a>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e2e:	2b90      	cmp	r3, #144	; 0x90
 8009e30:	d119      	bne.n	8009e66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	333c      	adds	r3, #60	; 0x3c
 8009e36:	3336      	adds	r3, #54	; 0x36
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe f981 	bl	8008140 <ld_dword>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e44:	4a0a      	ldr	r2, [pc, #40]	; (8009e70 <check_fs+0xa4>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d101      	bne.n	8009e4e <check_fs+0x82>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e00c      	b.n	8009e68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	333c      	adds	r3, #60	; 0x3c
 8009e52:	3352      	adds	r3, #82	; 0x52
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fe f973 	bl	8008140 <ld_dword>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4a05      	ldr	r2, [pc, #20]	; (8009e74 <check_fs+0xa8>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d101      	bne.n	8009e66 <check_fs+0x9a>
 8009e62:	2300      	movs	r3, #0
 8009e64:	e000      	b.n	8009e68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e66:	2302      	movs	r3, #2
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	00544146 	.word	0x00544146
 8009e74:	33544146 	.word	0x33544146

08009e78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b096      	sub	sp, #88	; 0x58
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	4613      	mov	r3, r2
 8009e84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7ff ff59 	bl	8009d44 <get_ldnumber>
 8009e92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	da01      	bge.n	8009e9e <find_volume+0x26>
 8009e9a:	230b      	movs	r3, #11
 8009e9c:	e26c      	b.n	800a378 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e9e:	4aa4      	ldr	r2, [pc, #656]	; (800a130 <find_volume+0x2b8>)
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ea6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <find_volume+0x3a>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	e262      	b.n	800a378 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8009eb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009eb4:	f7fe fa2c 	bl	8008310 <lock_fs>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <find_volume+0x4a>
 8009ebe:	230f      	movs	r3, #15
 8009ec0:	e25a      	b.n	800a378 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	f023 0301 	bic.w	r3, r3, #1
 8009ece:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01a      	beq.n	8009f0e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe f879 	bl	8007fd4 <disk_status>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10c      	bne.n	8009f0e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ef4:	79fb      	ldrb	r3, [r7, #7]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <find_volume+0x92>
 8009efa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009efe:	f003 0304 	and.w	r3, r3, #4
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009f06:	230a      	movs	r3, #10
 8009f08:	e236      	b.n	800a378 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e234      	b.n	800a378 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f10:	2200      	movs	r2, #0
 8009f12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fe f871 	bl	8008008 <disk_initialize>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e21d      	b.n	800a378 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <find_volume+0xda>
 8009f42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009f4e:	230a      	movs	r3, #10
 8009f50:	e212      	b.n	800a378 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	7858      	ldrb	r0, [r3, #1]
 8009f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f58:	330c      	adds	r3, #12
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	f7fe f8b9 	bl	80080d4 <disk_ioctl>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <find_volume+0xf4>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e205      	b.n	800a378 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	899b      	ldrh	r3, [r3, #12]
 8009f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f74:	d80d      	bhi.n	8009f92 <find_volume+0x11a>
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7e:	d308      	bcc.n	8009f92 <find_volume+0x11a>
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	899b      	ldrh	r3, [r3, #12]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f88:	899b      	ldrh	r3, [r3, #12]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <find_volume+0x11e>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e1f0      	b.n	800a378 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f9e:	f7ff ff15 	bl	8009dcc <check_fs>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d14b      	bne.n	800a048 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb4:	e01f      	b.n	8009ff6 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009fc4:	4413      	add	r3, r2
 8009fc6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	3304      	adds	r3, #4
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d006      	beq.n	8009fe0 <find_volume+0x168>
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe f8b2 	bl	8008140 <ld_dword>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	e000      	b.n	8009fe2 <find_volume+0x16a>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009fea:	440b      	add	r3, r1
 8009fec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8009ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d9dc      	bls.n	8009fb6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <find_volume+0x194>
 800a006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a008:	3b01      	subs	r3, #1
 800a00a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a014:	4413      	add	r3, r2
 800a016:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a01a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a01c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d005      	beq.n	800a02e <find_volume+0x1b6>
 800a022:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a026:	f7ff fed1 	bl	8009dcc <check_fs>
 800a02a:	4603      	mov	r3, r0
 800a02c:	e000      	b.n	800a030 <find_volume+0x1b8>
 800a02e:	2303      	movs	r3, #3
 800a030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d905      	bls.n	800a048 <find_volume+0x1d0>
 800a03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03e:	3301      	adds	r3, #1
 800a040:	643b      	str	r3, [r7, #64]	; 0x40
 800a042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a044:	2b03      	cmp	r3, #3
 800a046:	d9e1      	bls.n	800a00c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d101      	bne.n	800a054 <find_volume+0x1dc>
 800a050:	2301      	movs	r3, #1
 800a052:	e191      	b.n	800a378 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d901      	bls.n	800a060 <find_volume+0x1e8>
 800a05c:	230d      	movs	r3, #13
 800a05e:	e18b      	b.n	800a378 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	333c      	adds	r3, #60	; 0x3c
 800a064:	330b      	adds	r3, #11
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe f852 	bl	8008110 <ld_word>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a072:	899b      	ldrh	r3, [r3, #12]
 800a074:	429a      	cmp	r2, r3
 800a076:	d001      	beq.n	800a07c <find_volume+0x204>
 800a078:	230d      	movs	r3, #13
 800a07a:	e17d      	b.n	800a378 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	333c      	adds	r3, #60	; 0x3c
 800a080:	3316      	adds	r3, #22
 800a082:	4618      	mov	r0, r3
 800a084:	f7fe f844 	bl	8008110 <ld_word>
 800a088:	4603      	mov	r3, r0
 800a08a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <find_volume+0x228>
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	333c      	adds	r3, #60	; 0x3c
 800a096:	3324      	adds	r3, #36	; 0x24
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fe f851 	bl	8008140 <ld_dword>
 800a09e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0a4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b2:	789b      	ldrb	r3, [r3, #2]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d005      	beq.n	800a0c4 <find_volume+0x24c>
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	789b      	ldrb	r3, [r3, #2]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d001      	beq.n	800a0c4 <find_volume+0x24c>
 800a0c0:	230d      	movs	r3, #13
 800a0c2:	e159      	b.n	800a378 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	789b      	ldrb	r3, [r3, #2]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0cc:	fb02 f303 	mul.w	r3, r2, r3
 800a0d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	895b      	ldrh	r3, [r3, #10]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d008      	beq.n	800a0f8 <find_volume+0x280>
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	895b      	ldrh	r3, [r3, #10]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	895b      	ldrh	r3, [r3, #10]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <find_volume+0x284>
 800a0f8:	230d      	movs	r3, #13
 800a0fa:	e13d      	b.n	800a378 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	333c      	adds	r3, #60	; 0x3c
 800a100:	3311      	adds	r3, #17
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe f804 	bl	8008110 <ld_word>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	891b      	ldrh	r3, [r3, #8]
 800a114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a116:	8992      	ldrh	r2, [r2, #12]
 800a118:	0952      	lsrs	r2, r2, #5
 800a11a:	b292      	uxth	r2, r2
 800a11c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a120:	fb02 f201 	mul.w	r2, r2, r1
 800a124:	1a9b      	subs	r3, r3, r2
 800a126:	b29b      	uxth	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <find_volume+0x2bc>
 800a12c:	230d      	movs	r3, #13
 800a12e:	e123      	b.n	800a378 <find_volume+0x500>
 800a130:	20000144 	.word	0x20000144

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	333c      	adds	r3, #60	; 0x3c
 800a138:	3313      	adds	r3, #19
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fd ffe8 	bl	8008110 <ld_word>
 800a140:	4603      	mov	r3, r0
 800a142:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a146:	2b00      	cmp	r3, #0
 800a148:	d106      	bne.n	800a158 <find_volume+0x2e0>
 800a14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14c:	333c      	adds	r3, #60	; 0x3c
 800a14e:	3320      	adds	r3, #32
 800a150:	4618      	mov	r0, r3
 800a152:	f7fd fff5 	bl	8008140 <ld_dword>
 800a156:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	333c      	adds	r3, #60	; 0x3c
 800a15c:	330e      	adds	r3, #14
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fd ffd6 	bl	8008110 <ld_word>
 800a164:	4603      	mov	r3, r0
 800a166:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a168:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <find_volume+0x2fa>
 800a16e:	230d      	movs	r3, #13
 800a170:	e102      	b.n	800a378 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a172:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a176:	4413      	add	r3, r2
 800a178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a17a:	8911      	ldrh	r1, [r2, #8]
 800a17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a17e:	8992      	ldrh	r2, [r2, #12]
 800a180:	0952      	lsrs	r2, r2, #5
 800a182:	b292      	uxth	r2, r2
 800a184:	fbb1 f2f2 	udiv	r2, r1, r2
 800a188:	b292      	uxth	r2, r2
 800a18a:	4413      	add	r3, r2
 800a18c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a18e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	429a      	cmp	r2, r3
 800a194:	d201      	bcs.n	800a19a <find_volume+0x322>
 800a196:	230d      	movs	r3, #13
 800a198:	e0ee      	b.n	800a378 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a19a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1a2:	8952      	ldrh	r2, [r2, #10]
 800a1a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d101      	bne.n	800a1b4 <find_volume+0x33c>
 800a1b0:	230d      	movs	r3, #13
 800a1b2:	e0e1      	b.n	800a378 <find_volume+0x500>
		fmt = FS_FAT32;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d802      	bhi.n	800a1ca <find_volume+0x352>
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d802      	bhi.n	800a1da <find_volume+0x362>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	1c9a      	adds	r2, r3, #2
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1e6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a1e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ec:	441a      	add	r2, r3
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a1f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	441a      	add	r2, r3
 800a1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fa:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a200:	2b03      	cmp	r3, #3
 800a202:	d11e      	bne.n	800a242 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	333c      	adds	r3, #60	; 0x3c
 800a208:	332a      	adds	r3, #42	; 0x2a
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fd ff80 	bl	8008110 <ld_word>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <find_volume+0x3a2>
 800a216:	230d      	movs	r3, #13
 800a218:	e0ae      	b.n	800a378 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	891b      	ldrh	r3, [r3, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <find_volume+0x3ae>
 800a222:	230d      	movs	r3, #13
 800a224:	e0a8      	b.n	800a378 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	333c      	adds	r3, #60	; 0x3c
 800a22a:	332c      	adds	r3, #44	; 0x2c
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fd ff87 	bl	8008140 <ld_dword>
 800a232:	4602      	mov	r2, r0
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	647b      	str	r3, [r7, #68]	; 0x44
 800a240:	e01f      	b.n	800a282 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	891b      	ldrh	r3, [r3, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <find_volume+0x3d6>
 800a24a:	230d      	movs	r3, #13
 800a24c:	e094      	b.n	800a378 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a254:	441a      	add	r2, r3
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a25a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d103      	bne.n	800a26a <find_volume+0x3f2>
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	e00a      	b.n	800a280 <find_volume+0x408>
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	6a1a      	ldr	r2, [r3, #32]
 800a26e:	4613      	mov	r3, r2
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	4413      	add	r3, r2
 800a274:	085a      	lsrs	r2, r3, #1
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a280:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	899b      	ldrh	r3, [r3, #12]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a28e:	440b      	add	r3, r1
 800a290:	3b01      	subs	r3, #1
 800a292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a294:	8989      	ldrh	r1, [r1, #12]
 800a296:	fbb3 f3f1 	udiv	r3, r3, r1
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d201      	bcs.n	800a2a2 <find_volume+0x42a>
 800a29e:	230d      	movs	r3, #13
 800a2a0:	e06a      	b.n	800a378 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2a8:	61da      	str	r2, [r3, #28]
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	69da      	ldr	r2, [r3, #28]
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	2280      	movs	r2, #128	; 0x80
 800a2b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a2b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d149      	bne.n	800a354 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	333c      	adds	r3, #60	; 0x3c
 800a2c4:	3330      	adds	r3, #48	; 0x30
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd ff22 	bl	8008110 <ld_word>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d140      	bne.n	800a354 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2da:	f7fe f9fb 	bl	80086d4 <move_window>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d137      	bne.n	800a354 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	333c      	adds	r3, #60	; 0x3c
 800a2ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd ff0c 	bl	8008110 <ld_word>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a300:	429a      	cmp	r2, r3
 800a302:	d127      	bne.n	800a354 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	333c      	adds	r3, #60	; 0x3c
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fd ff19 	bl	8008140 <ld_dword>
 800a30e:	4603      	mov	r3, r0
 800a310:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <find_volume+0x508>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d11e      	bne.n	800a354 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	333c      	adds	r3, #60	; 0x3c
 800a31a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd ff0e 	bl	8008140 <ld_dword>
 800a324:	4603      	mov	r3, r0
 800a326:	4a17      	ldr	r2, [pc, #92]	; (800a384 <find_volume+0x50c>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d113      	bne.n	800a354 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	333c      	adds	r3, #60	; 0x3c
 800a330:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a334:	4618      	mov	r0, r3
 800a336:	f7fd ff03 	bl	8008140 <ld_dword>
 800a33a:	4602      	mov	r2, r0
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	333c      	adds	r3, #60	; 0x3c
 800a344:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fd fef9 	bl	8008140 <ld_dword>
 800a34e:	4602      	mov	r2, r0
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a35a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <find_volume+0x510>)
 800a35e:	881b      	ldrh	r3, [r3, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	b29a      	uxth	r2, r3
 800a364:	4b08      	ldr	r3, [pc, #32]	; (800a388 <find_volume+0x510>)
 800a366:	801a      	strh	r2, [r3, #0]
 800a368:	4b07      	ldr	r3, [pc, #28]	; (800a388 <find_volume+0x510>)
 800a36a:	881a      	ldrh	r2, [r3, #0]
 800a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a370:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a372:	f7fe f947 	bl	8008604 <clear_lock>
#endif
	return FR_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3758      	adds	r7, #88	; 0x58
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	41615252 	.word	0x41615252
 800a384:	61417272 	.word	0x61417272
 800a388:	20000148 	.word	0x20000148

0800a38c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a396:	2309      	movs	r3, #9
 800a398:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d02e      	beq.n	800a3fe <validate+0x72>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d02a      	beq.n	800a3fe <validate+0x72>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d025      	beq.n	800a3fe <validate+0x72>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	889a      	ldrh	r2, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	88db      	ldrh	r3, [r3, #6]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d11e      	bne.n	800a3fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd ffa3 	bl	8008310 <lock_fs>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d014      	beq.n	800a3fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	785b      	ldrb	r3, [r3, #1]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fd fdfc 	bl	8007fd4 <disk_status>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <validate+0x60>
				res = FR_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	e008      	b.n	800a3fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fd ffa2 	bl	800833c <unlock_fs>
 800a3f8:	e001      	b.n	800a3fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a3fa:	230f      	movs	r3, #15
 800a3fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <validate+0x7e>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	e000      	b.n	800a40c <validate+0x80>
 800a40a:	2300      	movs	r3, #0
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	6013      	str	r3, [r2, #0]
	return res;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
	...

0800a41c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b088      	sub	sp, #32
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a42e:	f107 0310 	add.w	r3, r7, #16
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff fc86 	bl	8009d44 <get_ldnumber>
 800a438:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da01      	bge.n	800a444 <f_mount+0x28>
 800a440:	230b      	movs	r3, #11
 800a442:	e048      	b.n	800a4d6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a444:	4a26      	ldr	r2, [pc, #152]	; (800a4e0 <f_mount+0xc4>)
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a44c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00f      	beq.n	800a474 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a454:	69b8      	ldr	r0, [r7, #24]
 800a456:	f7fe f8d5 	bl	8008604 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fdab 	bl	800afba <ff_del_syncobj>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <f_mount+0x52>
 800a46a:	2302      	movs	r3, #2
 800a46c:	e033      	b.n	800a4d6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00f      	beq.n	800a49a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	3314      	adds	r3, #20
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f000 fd7a 	bl	800af84 <ff_cre_syncobj>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <f_mount+0x7e>
 800a496:	2302      	movs	r3, #2
 800a498:	e01d      	b.n	800a4d6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4910      	ldr	r1, [pc, #64]	; (800a4e0 <f_mount+0xc4>)
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <f_mount+0x94>
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d001      	beq.n	800a4b4 <f_mount+0x98>
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	e010      	b.n	800a4d6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a4b4:	f107 010c 	add.w	r1, r7, #12
 800a4b8:	f107 0308 	add.w	r3, r7, #8
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff fcda 	bl	8009e78 <find_volume>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	7dfa      	ldrb	r2, [r7, #23]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fd ff34 	bl	800833c <unlock_fs>
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20000144 	.word	0x20000144

0800a4e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b09a      	sub	sp, #104	; 0x68
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <f_open+0x18>
 800a4f8:	2309      	movs	r3, #9
 800a4fa:	e1d7      	b.n	800a8ac <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a502:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a504:	79fa      	ldrb	r2, [r7, #7]
 800a506:	f107 0110 	add.w	r1, r7, #16
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fcb2 	bl	8009e78 <find_volume>
 800a514:	4603      	mov	r3, r0
 800a516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a51a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f040 81b4 	bne.w	800a88c <f_open+0x3a8>
		dj.obj.fs = fs;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800a528:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a52c:	f000 fd71 	bl	800b012 <ff_memalloc>
 800a530:	65b8      	str	r0, [r7, #88]	; 0x58
 800a532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <f_open+0x62>
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2111      	movs	r1, #17
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd fefd 	bl	800833c <unlock_fs>
 800a542:	2311      	movs	r3, #17
 800a544:	e1b2      	b.n	800a8ac <f_open+0x3c8>
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a54a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	f107 0314 	add.w	r3, r7, #20
 800a552:	4611      	mov	r1, r2
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff fb7f 	bl	8009c58 <follow_path>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a560:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11a      	bne.n	800a59e <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a568:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a56c:	b25b      	sxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	da03      	bge.n	800a57a <f_open+0x96>
				res = FR_INVALID_NAME;
 800a572:	2306      	movs	r3, #6
 800a574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a578:	e011      	b.n	800a59e <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	bf14      	ite	ne
 800a584:	2301      	movne	r3, #1
 800a586:	2300      	moveq	r3, #0
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	461a      	mov	r2, r3
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd feee 	bl	8008374 <chk_lock>
 800a598:	4603      	mov	r3, r0
 800a59a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	f003 031c 	and.w	r3, r3, #28
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d07f      	beq.n	800a6a8 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800a5a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d017      	beq.n	800a5e0 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a5b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5b4:	2b04      	cmp	r3, #4
 800a5b6:	d10e      	bne.n	800a5d6 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a5b8:	f7fd ff38 	bl	800842c <enq_lock>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d006      	beq.n	800a5d0 <f_open+0xec>
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff f896 	bl	80096f8 <dir_register>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	e000      	b.n	800a5d2 <f_open+0xee>
 800a5d0:	2312      	movs	r3, #18
 800a5d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	f043 0308 	orr.w	r3, r3, #8
 800a5dc:	71fb      	strb	r3, [r7, #7]
 800a5de:	e010      	b.n	800a602 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a5e0:	7ebb      	ldrb	r3, [r7, #26]
 800a5e2:	f003 0311 	and.w	r3, r3, #17
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <f_open+0x10e>
					res = FR_DENIED;
 800a5ea:	2307      	movs	r3, #7
 800a5ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a5f0:	e007      	b.n	800a602 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a5f2:	79fb      	ldrb	r3, [r7, #7]
 800a5f4:	f003 0304 	and.w	r3, r3, #4
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <f_open+0x11e>
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a606:	2b00      	cmp	r3, #0
 800a608:	d168      	bne.n	800a6dc <f_open+0x1f8>
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	f003 0308 	and.w	r3, r3, #8
 800a610:	2b00      	cmp	r3, #0
 800a612:	d063      	beq.n	800a6dc <f_open+0x1f8>
				dw = GET_FATTIME();
 800a614:	f7fd fc80 	bl	8007f18 <get_fattime>
 800a618:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	330e      	adds	r3, #14
 800a61e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a620:	4618      	mov	r0, r3
 800a622:	f7fd fdcb 	bl	80081bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a628:	3316      	adds	r3, #22
 800a62a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fd fdc5 	bl	80081bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a634:	330b      	adds	r3, #11
 800a636:	2220      	movs	r2, #32
 800a638:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a63e:	4611      	mov	r1, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fdcf 	bl	80091e4 <ld_clust>
 800a646:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a64c:	2200      	movs	r2, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe fde7 	bl	8009222 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a656:	331c      	adds	r3, #28
 800a658:	2100      	movs	r1, #0
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fd fdae 	bl	80081bc <st_dword>
					fs->wflag = 1;
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2201      	movs	r2, #1
 800a664:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d037      	beq.n	800a6dc <f_open+0x1f8>
						dw = fs->winsect;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800a672:	f107 0314 	add.w	r3, r7, #20
 800a676:	2200      	movs	r2, #0
 800a678:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fe fad7 	bl	8008c2e <remove_chain>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a686:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d126      	bne.n	800a6dc <f_open+0x1f8>
							res = move_window(fs, dw);
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe f81e 	bl	80086d4 <move_window>
 800a698:	4603      	mov	r3, r0
 800a69a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6a2:	3a01      	subs	r2, #1
 800a6a4:	619a      	str	r2, [r3, #24]
 800a6a6:	e019      	b.n	800a6dc <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a6a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d115      	bne.n	800a6dc <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a6b0:	7ebb      	ldrb	r3, [r7, #26]
 800a6b2:	f003 0310 	and.w	r3, r3, #16
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <f_open+0x1de>
					res = FR_NO_FILE;
 800a6ba:	2304      	movs	r3, #4
 800a6bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a6c0:	e00c      	b.n	800a6dc <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	f003 0302 	and.w	r3, r3, #2
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d007      	beq.n	800a6dc <f_open+0x1f8>
 800a6cc:	7ebb      	ldrb	r3, [r7, #26]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <f_open+0x1f8>
						res = FR_DENIED;
 800a6d6:	2307      	movs	r3, #7
 800a6d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a6dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d128      	bne.n	800a736 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	f003 0308 	and.w	r3, r3, #8
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <f_open+0x212>
				mode |= FA_MODIFIED;
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a6fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	bf14      	ite	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	2300      	moveq	r3, #0
 800a712:	b2db      	uxtb	r3, r3
 800a714:	461a      	mov	r2, r3
 800a716:	f107 0314 	add.w	r3, r7, #20
 800a71a:	4611      	mov	r1, r2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fd fea7 	bl	8008470 <inc_lock>
 800a722:	4602      	mov	r2, r0
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <f_open+0x252>
 800a730:	2302      	movs	r3, #2
 800a732:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f040 80a3 	bne.w	800a886 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fd4c 	bl	80091e4 <ld_clust>
 800a74c:	4602      	mov	r2, r0
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a754:	331c      	adds	r3, #28
 800a756:	4618      	mov	r0, r3
 800a758:	f7fd fcf2 	bl	8008140 <ld_dword>
 800a75c:	4602      	mov	r2, r0
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	88da      	ldrh	r2, [r3, #6]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	79fa      	ldrb	r2, [r7, #7]
 800a77a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3330      	adds	r3, #48	; 0x30
 800a792:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a796:	2100      	movs	r1, #0
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fd fd5c 	bl	8008256 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d06e      	beq.n	800a886 <f_open+0x3a2>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d06a      	beq.n	800a886 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	895b      	ldrh	r3, [r3, #10]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	899b      	ldrh	r3, [r3, #12]
 800a7c2:	fb03 f302 	mul.w	r3, r3, r2
 800a7c6:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7d4:	e016      	b.n	800a804 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fe f837 	bl	800884e <get_fat>
 800a7e0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a7e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d802      	bhi.n	800a7ee <f_open+0x30a>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a7ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7f4:	d102      	bne.n	800a7fc <f_open+0x318>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a7fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <f_open+0x330>
 800a80c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a810:	429a      	cmp	r2, r3
 800a812:	d8e0      	bhi.n	800a7d6 <f_open+0x2f2>
				}
				fp->clust = clst;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a818:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a81a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d131      	bne.n	800a886 <f_open+0x3a2>
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	899b      	ldrh	r3, [r3, #12]
 800a826:	461a      	mov	r2, r3
 800a828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a82a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a82e:	fb02 f201 	mul.w	r2, r2, r1
 800a832:	1a9b      	subs	r3, r3, r2
 800a834:	2b00      	cmp	r3, #0
 800a836:	d026      	beq.n	800a886 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fd ffe7 	bl	8008810 <clust2sect>
 800a842:	64b8      	str	r0, [r7, #72]	; 0x48
 800a844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a846:	2b00      	cmp	r3, #0
 800a848:	d103      	bne.n	800a852 <f_open+0x36e>
						res = FR_INT_ERR;
 800a84a:	2302      	movs	r3, #2
 800a84c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a850:	e019      	b.n	800a886 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	899b      	ldrh	r3, [r3, #12]
 800a856:	461a      	mov	r2, r3
 800a858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a85a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a860:	441a      	add	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	7858      	ldrb	r0, [r3, #1]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	2301      	movs	r3, #1
 800a876:	f7fd fbed 	bl	8008054 <disk_read>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <f_open+0x3a2>
 800a880:	2301      	movs	r3, #1
 800a882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800a886:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a888:	f000 fbcf 	bl	800b02a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a88c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <f_open+0x3b6>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fd4a 	bl	800833c <unlock_fs>
 800a8a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3768      	adds	r7, #104	; 0x68
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08e      	sub	sp, #56	; 0x38
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f107 0214 	add.w	r2, r7, #20
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fd59 	bl	800a38c <validate>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a8e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d107      	bne.n	800a8f8 <f_read+0x44>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	7d5b      	ldrb	r3, [r3, #21]
 800a8ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a8f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d009      	beq.n	800a90c <f_read+0x58>
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f7fd fd1b 	bl	800833c <unlock_fs>
 800a906:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a90a:	e15d      	b.n	800abc8 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	7d1b      	ldrb	r3, [r3, #20]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d106      	bne.n	800a926 <f_read+0x72>
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2107      	movs	r1, #7
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fd fd0d 	bl	800833c <unlock_fs>
 800a922:	2307      	movs	r3, #7
 800a924:	e150      	b.n	800abc8 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68da      	ldr	r2, [r3, #12]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	429a      	cmp	r2, r3
 800a938:	f240 813c 	bls.w	800abb4 <f_read+0x300>
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a940:	e138      	b.n	800abb4 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	8992      	ldrh	r2, [r2, #12]
 800a94a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a94e:	fb02 f201 	mul.w	r2, r2, r1
 800a952:	1a9b      	subs	r3, r3, r2
 800a954:	2b00      	cmp	r3, #0
 800a956:	f040 80f3 	bne.w	800ab40 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	697a      	ldr	r2, [r7, #20]
 800a960:	8992      	ldrh	r2, [r2, #12]
 800a962:	fbb3 f3f2 	udiv	r3, r3, r2
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	8952      	ldrh	r2, [r2, #10]
 800a96a:	3a01      	subs	r2, #1
 800a96c:	4013      	ands	r3, r2
 800a96e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d139      	bne.n	800a9ea <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d103      	bne.n	800a986 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	633b      	str	r3, [r7, #48]	; 0x30
 800a984:	e013      	b.n	800a9ae <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d007      	beq.n	800a99e <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	4619      	mov	r1, r3
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7fe fa47 	bl	8008e28 <clmt_clust>
 800a99a:	6338      	str	r0, [r7, #48]	; 0x30
 800a99c:	e007      	b.n	800a9ae <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7fd ff51 	bl	800884e <get_fat>
 800a9ac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d809      	bhi.n	800a9c8 <f_read+0x114>
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	755a      	strb	r2, [r3, #21]
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2102      	movs	r1, #2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fd fcbc 	bl	800833c <unlock_fs>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e0ff      	b.n	800abc8 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ce:	d109      	bne.n	800a9e4 <f_read+0x130>
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	755a      	strb	r2, [r3, #21]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2101      	movs	r1, #1
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fd fcae 	bl	800833c <unlock_fs>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e0f1      	b.n	800abc8 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9e8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	69db      	ldr	r3, [r3, #28]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4610      	mov	r0, r2
 800a9f4:	f7fd ff0c 	bl	8008810 <clust2sect>
 800a9f8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d109      	bne.n	800aa14 <f_read+0x160>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2202      	movs	r2, #2
 800aa04:	755a      	strb	r2, [r3, #21]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2102      	movs	r1, #2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fd fc96 	bl	800833c <unlock_fs>
 800aa10:	2302      	movs	r3, #2
 800aa12:	e0d9      	b.n	800abc8 <f_read+0x314>
			sect += csect;
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	4413      	add	r3, r2
 800aa1a:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	899b      	ldrh	r3, [r3, #12]
 800aa20:	461a      	mov	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa28:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d046      	beq.n	800aabe <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	4413      	add	r3, r2
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	8952      	ldrh	r2, [r2, #10]
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d905      	bls.n	800aa4a <f_read+0x196>
					cc = fs->csize - csect;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	895b      	ldrh	r3, [r3, #10]
 800aa42:	461a      	mov	r2, r3
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	7858      	ldrb	r0, [r3, #1]
 800aa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa54:	f7fd fafe 	bl	8008054 <disk_read>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d009      	beq.n	800aa72 <f_read+0x1be>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2201      	movs	r2, #1
 800aa62:	755a      	strb	r2, [r3, #21]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2101      	movs	r1, #1
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fd fc67 	bl	800833c <unlock_fs>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e0aa      	b.n	800abc8 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	7d1b      	ldrb	r3, [r3, #20]
 800aa76:	b25b      	sxtb	r3, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	da18      	bge.n	800aaae <f_read+0x1fa>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a1a      	ldr	r2, [r3, #32]
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d911      	bls.n	800aaae <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a1a      	ldr	r2, [r3, #32]
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	8992      	ldrh	r2, [r2, #12]
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
 800aa9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9c:	18d0      	adds	r0, r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	899b      	ldrh	r3, [r3, #12]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f7fd fbb3 	bl	8008214 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	899b      	ldrh	r3, [r3, #12]
 800aab2:	461a      	mov	r2, r3
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	fb02 f303 	mul.w	r3, r2, r3
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aabc:	e066      	b.n	800ab8c <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d038      	beq.n	800ab3a <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	7d1b      	ldrb	r3, [r3, #20]
 800aacc:	b25b      	sxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	da1d      	bge.n	800ab0e <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	7858      	ldrb	r0, [r3, #1]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6a1a      	ldr	r2, [r3, #32]
 800aae0:	2301      	movs	r3, #1
 800aae2:	f7fd fad7 	bl	8008094 <disk_write>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d009      	beq.n	800ab00 <f_read+0x24c>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	755a      	strb	r2, [r3, #21]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fd fc20 	bl	800833c <unlock_fs>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e063      	b.n	800abc8 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	7d1b      	ldrb	r3, [r3, #20]
 800ab04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	7858      	ldrb	r0, [r3, #1]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab18:	2301      	movs	r3, #1
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	f7fd fa9a 	bl	8008054 <disk_read>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <f_read+0x286>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	755a      	strb	r2, [r3, #21]
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2101      	movs	r1, #1
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fd fc03 	bl	800833c <unlock_fs>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e046      	b.n	800abc8 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	899b      	ldrh	r3, [r3, #12]
 800ab44:	4618      	mov	r0, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	8992      	ldrh	r2, [r2, #12]
 800ab4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab52:	fb02 f201 	mul.w	r2, r2, r1
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	1ac3      	subs	r3, r0, r3
 800ab5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ab5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d901      	bls.n	800ab68 <f_read+0x2b4>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	8992      	ldrh	r2, [r2, #12]
 800ab76:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab7a:	fb02 f200 	mul.w	r2, r2, r0
 800ab7e:	1a9b      	subs	r3, r3, r2
 800ab80:	440b      	add	r3, r1
 800ab82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab84:	4619      	mov	r1, r3
 800ab86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab88:	f7fd fb44 	bl	8008214 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	4413      	add	r3, r2
 800ab92:	627b      	str	r3, [r7, #36]	; 0x24
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	699a      	ldr	r2, [r3, #24]
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	441a      	add	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	619a      	str	r2, [r3, #24]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	441a      	add	r2, r3
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f47f aec3 	bne.w	800a942 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2100      	movs	r1, #0
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fd fbbb 	bl	800833c <unlock_fs>
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3738      	adds	r7, #56	; 0x38
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f107 0208 	add.w	r2, r7, #8
 800abde:	4611      	mov	r1, r2
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7ff fbd3 	bl	800a38c <validate>
 800abe6:	4603      	mov	r3, r0
 800abe8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800abea:	7dfb      	ldrb	r3, [r7, #23]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d16d      	bne.n	800accc <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7d1b      	ldrb	r3, [r3, #20]
 800abf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d067      	beq.n	800accc <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7d1b      	ldrb	r3, [r3, #20]
 800ac00:	b25b      	sxtb	r3, r3
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	da1a      	bge.n	800ac3c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	7858      	ldrb	r0, [r3, #1]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a1a      	ldr	r2, [r3, #32]
 800ac14:	2301      	movs	r3, #1
 800ac16:	f7fd fa3d 	bl	8008094 <disk_write>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d006      	beq.n	800ac2e <f_sync+0x5e>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2101      	movs	r1, #1
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd fb89 	bl	800833c <unlock_fs>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e055      	b.n	800acda <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7d1b      	ldrb	r3, [r3, #20]
 800ac32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ac3c:	f7fd f96c 	bl	8007f18 <get_fattime>
 800ac40:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	4619      	mov	r1, r3
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	f7fd fd42 	bl	80086d4 <move_window>
 800ac50:	4603      	mov	r3, r0
 800ac52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d138      	bne.n	800accc <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	330b      	adds	r3, #11
 800ac64:	781a      	ldrb	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	330b      	adds	r3, #11
 800ac6a:	f042 0220 	orr.w	r2, r2, #32
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	68f9      	ldr	r1, [r7, #12]
 800ac7e:	f7fe fad0 	bl	8009222 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f103 021c 	add.w	r2, r3, #28
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f7fd fa94 	bl	80081bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3316      	adds	r3, #22
 800ac98:	6939      	ldr	r1, [r7, #16]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fd fa8e 	bl	80081bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3312      	adds	r3, #18
 800aca4:	2100      	movs	r1, #0
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fd fa6d 	bl	8008186 <st_word>
					fs->wflag = 1;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2201      	movs	r2, #1
 800acb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fd fd3b 	bl	8008730 <sync_fs>
 800acba:	4603      	mov	r3, r0
 800acbc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7d1b      	ldrb	r3, [r3, #20]
 800acc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	7dfa      	ldrb	r2, [r7, #23]
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fd fb32 	bl	800833c <unlock_fs>
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff ff70 	bl	800abd0 <f_sync>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d11d      	bne.n	800ad36 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f107 0208 	add.w	r2, r7, #8
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fb42 	bl	800a38c <validate>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d111      	bne.n	800ad36 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fd fc38 	bl	800858c <dec_lock>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd fb03 	bl	800833c <unlock_fs>
#endif
		}
	}
	return res;
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad56:	4b1f      	ldr	r3, [pc, #124]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad58:	7a5b      	ldrb	r3, [r3, #9]
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d131      	bne.n	800adc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad60:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad62:	7a5b      	ldrb	r3, [r3, #9]
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	461a      	mov	r2, r3
 800ad68:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad6e:	4b19      	ldr	r3, [pc, #100]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad70:	7a5b      	ldrb	r3, [r3, #9]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	4a17      	ldr	r2, [pc, #92]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad7e:	4b15      	ldr	r3, [pc, #84]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad80:	7a5b      	ldrb	r3, [r3, #9]
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad88:	4413      	add	r3, r2
 800ad8a:	79fa      	ldrb	r2, [r7, #7]
 800ad8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad8e:	4b11      	ldr	r3, [pc, #68]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad90:	7a5b      	ldrb	r3, [r3, #9]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	1c5a      	adds	r2, r3, #1
 800ad96:	b2d1      	uxtb	r1, r2
 800ad98:	4a0e      	ldr	r2, [pc, #56]	; (800add4 <FATFS_LinkDriverEx+0x94>)
 800ad9a:	7251      	strb	r1, [r2, #9]
 800ad9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad9e:	7dbb      	ldrb	r3, [r7, #22]
 800ada0:	3330      	adds	r3, #48	; 0x30
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	3301      	adds	r3, #1
 800adac:	223a      	movs	r2, #58	; 0x3a
 800adae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	3302      	adds	r3, #2
 800adb4:	222f      	movs	r2, #47	; 0x2f
 800adb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3303      	adds	r3, #3
 800adbc:	2200      	movs	r2, #0
 800adbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	371c      	adds	r7, #28
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	2000016c 	.word	0x2000016c

0800add8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ade2:	2200      	movs	r2, #0
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff ffaa 	bl	800ad40 <FATFS_LinkDriverEx>
 800adec:	4603      	mov	r3, r0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
	...

0800adf8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ae04:	88fb      	ldrh	r3, [r7, #6]
 800ae06:	2b7f      	cmp	r3, #127	; 0x7f
 800ae08:	d802      	bhi.n	800ae10 <ff_convert+0x18>
		c = chr;
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	81fb      	strh	r3, [r7, #14]
 800ae0e:	e025      	b.n	800ae5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00b      	beq.n	800ae2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ae16:	88fb      	ldrh	r3, [r7, #6]
 800ae18:	2bff      	cmp	r3, #255	; 0xff
 800ae1a:	d805      	bhi.n	800ae28 <ff_convert+0x30>
 800ae1c:	88fb      	ldrh	r3, [r7, #6]
 800ae1e:	3b80      	subs	r3, #128	; 0x80
 800ae20:	4a12      	ldr	r2, [pc, #72]	; (800ae6c <ff_convert+0x74>)
 800ae22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae26:	e000      	b.n	800ae2a <ff_convert+0x32>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	81fb      	strh	r3, [r7, #14]
 800ae2c:	e016      	b.n	800ae5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ae2e:	2300      	movs	r3, #0
 800ae30:	81fb      	strh	r3, [r7, #14]
 800ae32:	e009      	b.n	800ae48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ae34:	89fb      	ldrh	r3, [r7, #14]
 800ae36:	4a0d      	ldr	r2, [pc, #52]	; (800ae6c <ff_convert+0x74>)
 800ae38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae3c:	88fa      	ldrh	r2, [r7, #6]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d006      	beq.n	800ae50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ae42:	89fb      	ldrh	r3, [r7, #14]
 800ae44:	3301      	adds	r3, #1
 800ae46:	81fb      	strh	r3, [r7, #14]
 800ae48:	89fb      	ldrh	r3, [r7, #14]
 800ae4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ae4c:	d9f2      	bls.n	800ae34 <ff_convert+0x3c>
 800ae4e:	e000      	b.n	800ae52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ae50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ae52:	89fb      	ldrh	r3, [r7, #14]
 800ae54:	3380      	adds	r3, #128	; 0x80
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ae5c:	89fb      	ldrh	r3, [r7, #14]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3714      	adds	r7, #20
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	08010418 	.word	0x08010418

0800ae70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ae7a:	88fb      	ldrh	r3, [r7, #6]
 800ae7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae80:	d201      	bcs.n	800ae86 <ff_wtoupper+0x16>
 800ae82:	4b3e      	ldr	r3, [pc, #248]	; (800af7c <ff_wtoupper+0x10c>)
 800ae84:	e000      	b.n	800ae88 <ff_wtoupper+0x18>
 800ae86:	4b3e      	ldr	r3, [pc, #248]	; (800af80 <ff_wtoupper+0x110>)
 800ae88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	1c9a      	adds	r2, r3, #2
 800ae8e:	617a      	str	r2, [r7, #20]
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ae94:	8a7b      	ldrh	r3, [r7, #18]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d068      	beq.n	800af6c <ff_wtoupper+0xfc>
 800ae9a:	88fa      	ldrh	r2, [r7, #6]
 800ae9c:	8a7b      	ldrh	r3, [r7, #18]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d364      	bcc.n	800af6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	1c9a      	adds	r2, r3, #2
 800aea6:	617a      	str	r2, [r7, #20]
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	823b      	strh	r3, [r7, #16]
 800aeac:	8a3b      	ldrh	r3, [r7, #16]
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	81fb      	strh	r3, [r7, #14]
 800aeb2:	8a3b      	ldrh	r3, [r7, #16]
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800aeb8:	88fa      	ldrh	r2, [r7, #6]
 800aeba:	8a79      	ldrh	r1, [r7, #18]
 800aebc:	8a3b      	ldrh	r3, [r7, #16]
 800aebe:	440b      	add	r3, r1
 800aec0:	429a      	cmp	r2, r3
 800aec2:	da49      	bge.n	800af58 <ff_wtoupper+0xe8>
			switch (cmd) {
 800aec4:	89fb      	ldrh	r3, [r7, #14]
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d84f      	bhi.n	800af6a <ff_wtoupper+0xfa>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <ff_wtoupper+0x60>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800aef5 	.word	0x0800aef5
 800aed4:	0800af07 	.word	0x0800af07
 800aed8:	0800af1d 	.word	0x0800af1d
 800aedc:	0800af25 	.word	0x0800af25
 800aee0:	0800af2d 	.word	0x0800af2d
 800aee4:	0800af35 	.word	0x0800af35
 800aee8:	0800af3d 	.word	0x0800af3d
 800aeec:	0800af45 	.word	0x0800af45
 800aef0:	0800af4d 	.word	0x0800af4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800aef4:	88fa      	ldrh	r2, [r7, #6]
 800aef6:	8a7b      	ldrh	r3, [r7, #18]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	697a      	ldr	r2, [r7, #20]
 800aefe:	4413      	add	r3, r2
 800af00:	881b      	ldrh	r3, [r3, #0]
 800af02:	80fb      	strh	r3, [r7, #6]
 800af04:	e027      	b.n	800af56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800af06:	88fa      	ldrh	r2, [r7, #6]
 800af08:	8a7b      	ldrh	r3, [r7, #18]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	b29b      	uxth	r3, r3
 800af14:	88fa      	ldrh	r2, [r7, #6]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	80fb      	strh	r3, [r7, #6]
 800af1a:	e01c      	b.n	800af56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800af1c:	88fb      	ldrh	r3, [r7, #6]
 800af1e:	3b10      	subs	r3, #16
 800af20:	80fb      	strh	r3, [r7, #6]
 800af22:	e018      	b.n	800af56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800af24:	88fb      	ldrh	r3, [r7, #6]
 800af26:	3b20      	subs	r3, #32
 800af28:	80fb      	strh	r3, [r7, #6]
 800af2a:	e014      	b.n	800af56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800af2c:	88fb      	ldrh	r3, [r7, #6]
 800af2e:	3b30      	subs	r3, #48	; 0x30
 800af30:	80fb      	strh	r3, [r7, #6]
 800af32:	e010      	b.n	800af56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800af34:	88fb      	ldrh	r3, [r7, #6]
 800af36:	3b1a      	subs	r3, #26
 800af38:	80fb      	strh	r3, [r7, #6]
 800af3a:	e00c      	b.n	800af56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	3308      	adds	r3, #8
 800af40:	80fb      	strh	r3, [r7, #6]
 800af42:	e008      	b.n	800af56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800af44:	88fb      	ldrh	r3, [r7, #6]
 800af46:	3b50      	subs	r3, #80	; 0x50
 800af48:	80fb      	strh	r3, [r7, #6]
 800af4a:	e004      	b.n	800af56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800af52:	80fb      	strh	r3, [r7, #6]
 800af54:	bf00      	nop
			}
			break;
 800af56:	e008      	b.n	800af6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800af58:	89fb      	ldrh	r3, [r7, #14]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d195      	bne.n	800ae8a <ff_wtoupper+0x1a>
 800af5e:	8a3b      	ldrh	r3, [r7, #16]
 800af60:	005b      	lsls	r3, r3, #1
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	4413      	add	r3, r2
 800af66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800af68:	e78f      	b.n	800ae8a <ff_wtoupper+0x1a>
			break;
 800af6a:	bf00      	nop
	}

	return chr;
 800af6c:	88fb      	ldrh	r3, [r7, #6]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	08010518 	.word	0x08010518
 800af80:	0801070c 	.word	0x0801070c

0800af84 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	6039      	str	r1, [r7, #0]
 800af8e:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800af90:	2200      	movs	r2, #0
 800af92:	2101      	movs	r1, #1
 800af94:	2001      	movs	r0, #1
 800af96:	f000 fab9 	bl	800b50c <osSemaphoreNew>
 800af9a:	4602      	mov	r2, r0
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bf14      	ite	ne
 800afa8:	2301      	movne	r3, #1
 800afaa:	2300      	moveq	r3, #0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	60fb      	str	r3, [r7, #12]

    return ret;
 800afb0:	68fb      	ldr	r3, [r7, #12]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fbc2 	bl	800b74c <osSemaphoreDelete>
#endif
    return 1;
 800afc8:	2301      	movs	r3, #1
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800afde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb1c 	bl	800b620 <osSemaphoreAcquire>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800afee:	2301      	movs	r3, #1
 800aff0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aff2:	68fb      	ldr	r3, [r7, #12]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fb5d 	bl	800b6c4 <osSemaphoreRelease>
#endif
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f003 fd9c 	bl	800eb58 <pvPortMalloc>
 800b020:	4603      	mov	r3, r0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b082      	sub	sp, #8
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f003 fe5c 	bl	800ecf0 <vPortFree>
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <__NVIC_SetPriority>:
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	4603      	mov	r3, r0
 800b048:	6039      	str	r1, [r7, #0]
 800b04a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b04c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b050:	2b00      	cmp	r3, #0
 800b052:	db0a      	blt.n	800b06a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	b2da      	uxtb	r2, r3
 800b058:	490c      	ldr	r1, [pc, #48]	; (800b08c <__NVIC_SetPriority+0x4c>)
 800b05a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b05e:	0112      	lsls	r2, r2, #4
 800b060:	b2d2      	uxtb	r2, r2
 800b062:	440b      	add	r3, r1
 800b064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b068:	e00a      	b.n	800b080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	4908      	ldr	r1, [pc, #32]	; (800b090 <__NVIC_SetPriority+0x50>)
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	3b04      	subs	r3, #4
 800b078:	0112      	lsls	r2, r2, #4
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	440b      	add	r3, r1
 800b07e:	761a      	strb	r2, [r3, #24]
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	e000e100 	.word	0xe000e100
 800b090:	e000ed00 	.word	0xe000ed00

0800b094 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <SysTick_Handler+0x1c>)
 800b09a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b09c:	f002 fdaa 	bl	800dbf4 <xTaskGetSchedulerState>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d001      	beq.n	800b0aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b0a6:	f003 fcc7 	bl	800ea38 <xPortSysTickHandler>
  }
}
 800b0aa:	bf00      	nop
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	e000e010 	.word	0xe000e010

0800b0b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	f06f 0004 	mvn.w	r0, #4
 800b0be:	f7ff ffbf 	bl	800b040 <__NVIC_SetPriority>
#endif
}
 800b0c2:	bf00      	nop
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0ce:	f3ef 8305 	mrs	r3, IPSR
 800b0d2:	603b      	str	r3, [r7, #0]
  return(result);
 800b0d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b0da:	f06f 0305 	mvn.w	r3, #5
 800b0de:	607b      	str	r3, [r7, #4]
 800b0e0:	e00c      	b.n	800b0fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b0e2:	4b0a      	ldr	r3, [pc, #40]	; (800b10c <osKernelInitialize+0x44>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b0ea:	4b08      	ldr	r3, [pc, #32]	; (800b10c <osKernelInitialize+0x44>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	607b      	str	r3, [r7, #4]
 800b0f4:	e002      	b.n	800b0fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b0f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0fc:	687b      	ldr	r3, [r7, #4]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	20000178 	.word	0x20000178

0800b110 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b116:	f3ef 8305 	mrs	r3, IPSR
 800b11a:	603b      	str	r3, [r7, #0]
  return(result);
 800b11c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b122:	f06f 0305 	mvn.w	r3, #5
 800b126:	607b      	str	r3, [r7, #4]
 800b128:	e010      	b.n	800b14c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <osKernelStart+0x48>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d109      	bne.n	800b146 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b132:	f7ff ffbf 	bl	800b0b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b136:	4b08      	ldr	r3, [pc, #32]	; (800b158 <osKernelStart+0x48>)
 800b138:	2202      	movs	r2, #2
 800b13a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b13c:	f002 f862 	bl	800d204 <vTaskStartScheduler>
      stat = osOK;
 800b140:	2300      	movs	r3, #0
 800b142:	607b      	str	r3, [r7, #4]
 800b144:	e002      	b.n	800b14c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b14a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b14c:	687b      	ldr	r3, [r7, #4]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20000178 	.word	0x20000178

0800b15c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b162:	f3ef 8305 	mrs	r3, IPSR
 800b166:	603b      	str	r3, [r7, #0]
  return(result);
 800b168:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d003      	beq.n	800b176 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b16e:	f002 f96b 	bl	800d448 <xTaskGetTickCountFromISR>
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	e002      	b.n	800b17c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b176:	f002 f957 	bl	800d428 <xTaskGetTickCount>
 800b17a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b17c:	687b      	ldr	r3, [r7, #4]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b186:	b580      	push	{r7, lr}
 800b188:	b08e      	sub	sp, #56	; 0x38
 800b18a:	af04      	add	r7, sp, #16
 800b18c:	60f8      	str	r0, [r7, #12]
 800b18e:	60b9      	str	r1, [r7, #8]
 800b190:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b192:	2300      	movs	r3, #0
 800b194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b196:	f3ef 8305 	mrs	r3, IPSR
 800b19a:	617b      	str	r3, [r7, #20]
  return(result);
 800b19c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d17e      	bne.n	800b2a0 <osThreadNew+0x11a>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d07b      	beq.n	800b2a0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b1ac:	2318      	movs	r3, #24
 800b1ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d045      	beq.n	800b24c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <osThreadNew+0x48>
        name = attr->name;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d002      	beq.n	800b1dc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d008      	beq.n	800b1f4 <osThreadNew+0x6e>
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	2b38      	cmp	r3, #56	; 0x38
 800b1e6:	d805      	bhi.n	800b1f4 <osThreadNew+0x6e>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	f003 0301 	and.w	r3, r3, #1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <osThreadNew+0x72>
        return (NULL);
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	e054      	b.n	800b2a2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	089b      	lsrs	r3, r3, #2
 800b206:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00e      	beq.n	800b22e <osThreadNew+0xa8>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	2b5b      	cmp	r3, #91	; 0x5b
 800b216:	d90a      	bls.n	800b22e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d006      	beq.n	800b22e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <osThreadNew+0xa8>
        mem = 1;
 800b228:	2301      	movs	r3, #1
 800b22a:	61bb      	str	r3, [r7, #24]
 800b22c:	e010      	b.n	800b250 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10c      	bne.n	800b250 <osThreadNew+0xca>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d108      	bne.n	800b250 <osThreadNew+0xca>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <osThreadNew+0xca>
          mem = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	61bb      	str	r3, [r7, #24]
 800b24a:	e001      	b.n	800b250 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b24c:	2300      	movs	r3, #0
 800b24e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d110      	bne.n	800b278 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b25e:	9202      	str	r2, [sp, #8]
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6a3a      	ldr	r2, [r7, #32]
 800b26a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f001 fd75 	bl	800cd5c <xTaskCreateStatic>
 800b272:	4603      	mov	r3, r0
 800b274:	613b      	str	r3, [r7, #16]
 800b276:	e013      	b.n	800b2a0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d110      	bne.n	800b2a0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	b29a      	uxth	r2, r3
 800b282:	f107 0310 	add.w	r3, r7, #16
 800b286:	9301      	str	r3, [sp, #4]
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f001 fdc0 	bl	800ce16 <xTaskCreate>
 800b296:	4603      	mov	r3, r0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d001      	beq.n	800b2a0 <osThreadNew+0x11a>
            hTask = NULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b2a0:	693b      	ldr	r3, [r7, #16]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3728      	adds	r7, #40	; 0x28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2b2:	f3ef 8305 	mrs	r3, IPSR
 800b2b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <osDelay+0x1c>
    stat = osErrorISR;
 800b2be:	f06f 0305 	mvn.w	r3, #5
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e007      	b.n	800b2d6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 ff63 	bl	800d19c <vTaskDelay>
    }
  }

  return (stat);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2e8:	f3ef 8305 	mrs	r3, IPSR
 800b2ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <osDelayUntil+0x1c>
    stat = osErrorISR;
 800b2f4:	f06f 0305 	mvn.w	r3, #5
 800b2f8:	617b      	str	r3, [r7, #20]
 800b2fa:	e019      	b.n	800b330 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800b300:	f002 f892 	bl	800d428 <xTaskGetTickCount>
 800b304:	4603      	mov	r3, r0
 800b306:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d009      	beq.n	800b32a <osDelayUntil+0x4a>
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	db06      	blt.n	800b32a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800b31c:	f107 0308 	add.w	r3, r7, #8
 800b320:	6939      	ldr	r1, [r7, #16]
 800b322:	4618      	mov	r0, r3
 800b324:	f001 febc 	bl	800d0a0 <vTaskDelayUntil>
 800b328:	e002      	b.n	800b330 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b32a:	f06f 0303 	mvn.w	r3, #3
 800b32e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b330:	697b      	ldr	r3, [r7, #20]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3718      	adds	r7, #24
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b346:	f3ef 8305 	mrs	r3, IPSR
 800b34a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b34c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d12d      	bne.n	800b3ae <osEventFlagsNew+0x74>
    mem = -1;
 800b352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b356:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d015      	beq.n	800b38a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d006      	beq.n	800b374 <osEventFlagsNew+0x3a>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	2b1f      	cmp	r3, #31
 800b36c:	d902      	bls.n	800b374 <osEventFlagsNew+0x3a>
        mem = 1;
 800b36e:	2301      	movs	r3, #1
 800b370:	613b      	str	r3, [r7, #16]
 800b372:	e00c      	b.n	800b38e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d108      	bne.n	800b38e <osEventFlagsNew+0x54>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d104      	bne.n	800b38e <osEventFlagsNew+0x54>
          mem = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	613b      	str	r3, [r7, #16]
 800b388:	e001      	b.n	800b38e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d106      	bne.n	800b3a2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 fa2f 	bl	800b7fc <xEventGroupCreateStatic>
 800b39e:	6178      	str	r0, [r7, #20]
 800b3a0:	e005      	b.n	800b3ae <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800b3a8:	f000 fa5f 	bl	800b86a <xEventGroupCreate>
 800b3ac:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800b3ae:	697b      	ldr	r3, [r7, #20]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <osEventFlagsSet+0x1e>
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800b3d6:	f06f 0303 	mvn.w	r3, #3
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	e028      	b.n	800b430 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3de:	f3ef 8305 	mrs	r3, IPSR
 800b3e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d01d      	beq.n	800b426 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800b3ee:	f107 0308 	add.w	r3, r7, #8
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6938      	ldr	r0, [r7, #16]
 800b3f8:	f000 fbda 	bl	800bbb0 <xEventGroupSetBitsFromISR>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d103      	bne.n	800b40a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800b402:	f06f 0302 	mvn.w	r3, #2
 800b406:	617b      	str	r3, [r7, #20]
 800b408:	e012      	b.n	800b430 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00d      	beq.n	800b430 <osEventFlagsSet+0x78>
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <osEventFlagsSet+0x84>)
 800b416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	e004      	b.n	800b430 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6938      	ldr	r0, [r7, #16]
 800b42a:	f000 fb07 	bl	800ba3c <xEventGroupSetBits>
 800b42e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800b430:	697b      	ldr	r3, [r7, #20]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	e000ed04 	.word	0xe000ed04

0800b440 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af02      	add	r7, sp, #8
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <osEventFlagsWait+0x22>
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800b462:	f06f 0303 	mvn.w	r3, #3
 800b466:	61fb      	str	r3, [r7, #28]
 800b468:	e04b      	b.n	800b502 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b46a:	f3ef 8305 	mrs	r3, IPSR
 800b46e:	617b      	str	r3, [r7, #20]
  return(result);
 800b470:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800b476:	f06f 0305 	mvn.w	r3, #5
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e041      	b.n	800b502 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	627b      	str	r3, [r7, #36]	; 0x24
 800b48c:	e001      	b.n	800b492 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800b48e:	2300      	movs	r3, #0
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800b49c:	2300      	movs	r3, #0
 800b49e:	623b      	str	r3, [r7, #32]
 800b4a0:	e001      	b.n	800b4a6 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	69b8      	ldr	r0, [r7, #24]
 800b4b2:	f000 f9f5 	bl	800b8a0 <xEventGroupWaitBits>
 800b4b6:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d010      	beq.n	800b4e4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d019      	beq.n	800b502 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800b4d4:	f06f 0301 	mvn.w	r3, #1
 800b4d8:	61fb      	str	r3, [r7, #28]
 800b4da:	e012      	b.n	800b502 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b4dc:	f06f 0302 	mvn.w	r3, #2
 800b4e0:	61fb      	str	r3, [r7, #28]
 800b4e2:	e00e      	b.n	800b502 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d109      	bne.n	800b502 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800b4f4:	f06f 0301 	mvn.w	r3, #1
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	e002      	b.n	800b502 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b4fc:	f06f 0302 	mvn.w	r3, #2
 800b500:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800b502:	69fb      	ldr	r3, [r7, #28]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3728      	adds	r7, #40	; 0x28
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b08a      	sub	sp, #40	; 0x28
 800b510:	af02      	add	r7, sp, #8
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b51c:	f3ef 8305 	mrs	r3, IPSR
 800b520:	613b      	str	r3, [r7, #16]
  return(result);
 800b522:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b524:	2b00      	cmp	r3, #0
 800b526:	d175      	bne.n	800b614 <osSemaphoreNew+0x108>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d072      	beq.n	800b614 <osSemaphoreNew+0x108>
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	429a      	cmp	r2, r3
 800b534:	d86e      	bhi.n	800b614 <osSemaphoreNew+0x108>
    mem = -1;
 800b536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b53a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d015      	beq.n	800b56e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d006      	beq.n	800b558 <osSemaphoreNew+0x4c>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	2b4f      	cmp	r3, #79	; 0x4f
 800b550:	d902      	bls.n	800b558 <osSemaphoreNew+0x4c>
        mem = 1;
 800b552:	2301      	movs	r3, #1
 800b554:	61bb      	str	r3, [r7, #24]
 800b556:	e00c      	b.n	800b572 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d108      	bne.n	800b572 <osSemaphoreNew+0x66>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d104      	bne.n	800b572 <osSemaphoreNew+0x66>
          mem = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	61bb      	str	r3, [r7, #24]
 800b56c:	e001      	b.n	800b572 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b578:	d04c      	beq.n	800b614 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d128      	bne.n	800b5d2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d10a      	bne.n	800b59c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	2203      	movs	r2, #3
 800b58c:	9200      	str	r2, [sp, #0]
 800b58e:	2200      	movs	r2, #0
 800b590:	2100      	movs	r1, #0
 800b592:	2001      	movs	r0, #1
 800b594:	f000 fc3c 	bl	800be10 <xQueueGenericCreateStatic>
 800b598:	61f8      	str	r0, [r7, #28]
 800b59a:	e005      	b.n	800b5a8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b59c:	2203      	movs	r2, #3
 800b59e:	2100      	movs	r1, #0
 800b5a0:	2001      	movs	r0, #1
 800b5a2:	f000 fcad 	bl	800bf00 <xQueueGenericCreate>
 800b5a6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d022      	beq.n	800b5f4 <osSemaphoreNew+0xe8>
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01f      	beq.n	800b5f4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	69f8      	ldr	r0, [r7, #28]
 800b5bc:	f000 fd68 	bl	800c090 <xQueueGenericSend>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d016      	beq.n	800b5f4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b5c6:	69f8      	ldr	r0, [r7, #28]
 800b5c8:	f001 f9f4 	bl	800c9b4 <vQueueDelete>
            hSemaphore = NULL;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	e010      	b.n	800b5f4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d108      	bne.n	800b5ea <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 fcea 	bl	800bfba <xQueueCreateCountingSemaphoreStatic>
 800b5e6:	61f8      	str	r0, [r7, #28]
 800b5e8:	e004      	b.n	800b5f4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b5ea:	68b9      	ldr	r1, [r7, #8]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 fd1b 	bl	800c028 <xQueueCreateCountingSemaphore>
 800b5f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00c      	beq.n	800b614 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	617b      	str	r3, [r7, #20]
 800b606:	e001      	b.n	800b60c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b60c:	6979      	ldr	r1, [r7, #20]
 800b60e:	69f8      	ldr	r0, [r7, #28]
 800b610:	f001 fb1c 	bl	800cc4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b614:	69fb      	ldr	r3, [r7, #28]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3720      	adds	r7, #32
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b62e:	2300      	movs	r3, #0
 800b630:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b638:	f06f 0303 	mvn.w	r3, #3
 800b63c:	617b      	str	r3, [r7, #20]
 800b63e:	e039      	b.n	800b6b4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b640:	f3ef 8305 	mrs	r3, IPSR
 800b644:	60fb      	str	r3, [r7, #12]
  return(result);
 800b646:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d022      	beq.n	800b692 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b652:	f06f 0303 	mvn.w	r3, #3
 800b656:	617b      	str	r3, [r7, #20]
 800b658:	e02c      	b.n	800b6b4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b65e:	f107 0308 	add.w	r3, r7, #8
 800b662:	461a      	mov	r2, r3
 800b664:	2100      	movs	r1, #0
 800b666:	6938      	ldr	r0, [r7, #16]
 800b668:	f001 f924 	bl	800c8b4 <xQueueReceiveFromISR>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d003      	beq.n	800b67a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b672:	f06f 0302 	mvn.w	r3, #2
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	e01c      	b.n	800b6b4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d019      	beq.n	800b6b4 <osSemaphoreAcquire+0x94>
 800b680:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <osSemaphoreAcquire+0xa0>)
 800b682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	e010      	b.n	800b6b4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6938      	ldr	r0, [r7, #16]
 800b696:	f001 f801 	bl	800c69c <xQueueSemaphoreTake>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d009      	beq.n	800b6b4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b6a6:	f06f 0301 	mvn.w	r3, #1
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e002      	b.n	800b6b4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b6ae:	f06f 0302 	mvn.w	r3, #2
 800b6b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b6b4:	697b      	ldr	r3, [r7, #20]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	e000ed04 	.word	0xe000ed04

0800b6c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d103      	bne.n	800b6e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b6da:	f06f 0303 	mvn.w	r3, #3
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	e02c      	b.n	800b73c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6e2:	f3ef 8305 	mrs	r3, IPSR
 800b6e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d01a      	beq.n	800b724 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b6f2:	f107 0308 	add.w	r3, r7, #8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6938      	ldr	r0, [r7, #16]
 800b6fa:	f000 fe62 	bl	800c3c2 <xQueueGiveFromISR>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b01      	cmp	r3, #1
 800b702:	d003      	beq.n	800b70c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b704:	f06f 0302 	mvn.w	r3, #2
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	e017      	b.n	800b73c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d014      	beq.n	800b73c <osSemaphoreRelease+0x78>
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <osSemaphoreRelease+0x84>)
 800b714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	e00b      	b.n	800b73c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b724:	2300      	movs	r3, #0
 800b726:	2200      	movs	r2, #0
 800b728:	2100      	movs	r1, #0
 800b72a:	6938      	ldr	r0, [r7, #16]
 800b72c:	f000 fcb0 	bl	800c090 <xQueueGenericSend>
 800b730:	4603      	mov	r3, r0
 800b732:	2b01      	cmp	r3, #1
 800b734:	d002      	beq.n	800b73c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b736:	f06f 0302 	mvn.w	r3, #2
 800b73a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b73c:	697b      	ldr	r3, [r7, #20]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b758:	f3ef 8305 	mrs	r3, IPSR
 800b75c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b75e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b760:	2b00      	cmp	r3, #0
 800b762:	d003      	beq.n	800b76c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b764:	f06f 0305 	mvn.w	r3, #5
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e00e      	b.n	800b78a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d103      	bne.n	800b77a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b772:	f06f 0303 	mvn.w	r3, #3
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	e007      	b.n	800b78a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b77a:	6938      	ldr	r0, [r7, #16]
 800b77c:	f001 fa90 	bl	800cca0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b780:	2300      	movs	r3, #0
 800b782:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b784:	6938      	ldr	r0, [r7, #16]
 800b786:	f001 f915 	bl	800c9b4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b78a:	697b      	ldr	r3, [r7, #20]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3718      	adds	r7, #24
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b794:	b480      	push	{r7}
 800b796:	b085      	sub	sp, #20
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	4a07      	ldr	r2, [pc, #28]	; (800b7c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b7a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	4a06      	ldr	r2, [pc, #24]	; (800b7c4 <vApplicationGetIdleTaskMemory+0x30>)
 800b7aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2280      	movs	r2, #128	; 0x80
 800b7b0:	601a      	str	r2, [r3, #0]
}
 800b7b2:	bf00      	nop
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	2000017c 	.word	0x2000017c
 800b7c4:	200001d8 	.word	0x200001d8

0800b7c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	4a07      	ldr	r2, [pc, #28]	; (800b7f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b7d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	4a06      	ldr	r2, [pc, #24]	; (800b7f8 <vApplicationGetTimerTaskMemory+0x30>)
 800b7de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e6:	601a      	str	r2, [r3, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	3714      	adds	r7, #20
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	200003d8 	.word	0x200003d8
 800b7f8:	20000434 	.word	0x20000434

0800b7fc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b81c:	bf00      	nop
 800b81e:	e7fe      	b.n	800b81e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800b820:	2320      	movs	r3, #32
 800b822:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b20      	cmp	r3, #32
 800b828:	d00a      	beq.n	800b840 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60fb      	str	r3, [r7, #12]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3304      	adds	r3, #4
 800b854:	4618      	mov	r0, r3
 800b856:	f000 f9bf 	bl	800bbd8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2201      	movs	r2, #1
 800b85e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800b860:	697b      	ldr	r3, [r7, #20]
	}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800b870:	2020      	movs	r0, #32
 800b872:	f003 f971 	bl	800eb58 <pvPortMalloc>
 800b876:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3304      	adds	r3, #4
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 f9a5 	bl	800bbd8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800b894:	687b      	ldr	r3, [r7, #4]
	}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b090      	sub	sp, #64	; 0x40
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10a      	bne.n	800b8d6 <xEventGroupWaitBits+0x36>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	623b      	str	r3, [r7, #32]
}
 800b8d2:	bf00      	nop
 800b8d4:	e7fe      	b.n	800b8d4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00a      	beq.n	800b8f6 <xEventGroupWaitBits+0x56>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	61fb      	str	r3, [r7, #28]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10a      	bne.n	800b912 <xEventGroupWaitBits+0x72>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	61bb      	str	r3, [r7, #24]
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b912:	f002 f96f 	bl	800dbf4 <xTaskGetSchedulerState>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <xEventGroupWaitBits+0x82>
 800b91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <xEventGroupWaitBits+0x86>
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <xEventGroupWaitBits+0x88>
 800b926:	2300      	movs	r3, #0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	617b      	str	r3, [r7, #20]
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800b942:	f001 fcc5 	bl	800d2d0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800b946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b952:	f000 f90b 	bl	800bb6c <prvTestWaitCondition>
 800b956:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800b958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00e      	beq.n	800b97c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800b962:	2300      	movs	r3, #0
 800b964:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d028      	beq.n	800b9be <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800b96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	43db      	mvns	r3, r3
 800b974:	401a      	ands	r2, r3
 800b976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e020      	b.n	800b9be <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800b97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d104      	bne.n	800b98c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800b986:	2301      	movs	r3, #1
 800b988:	633b      	str	r3, [r7, #48]	; 0x30
 800b98a:	e018      	b.n	800b9be <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800b992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b998:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9a6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9aa:	1d18      	adds	r0, r3, #4
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	f001 fe95 	bl	800d6e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800b9be:	f001 fc95 	bl	800d2ec <xTaskResumeAll>
 800b9c2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800b9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d031      	beq.n	800ba2e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d107      	bne.n	800b9e0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800b9d0:	4b19      	ldr	r3, [pc, #100]	; (800ba38 <xEventGroupWaitBits+0x198>)
 800b9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800b9e0:	f002 fa7e 	bl	800dee0 <uxTaskResetEventItemValue>
 800b9e4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800b9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d11a      	bne.n	800ba26 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800b9f0:	f002 ff90 	bl	800e914 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	68b9      	ldr	r1, [r7, #8]
 800b9fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba00:	f000 f8b4 	bl	800bb6c <prvTestWaitCondition>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d009      	beq.n	800ba1e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d006      	beq.n	800ba1e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	43db      	mvns	r3, r3
 800ba18:	401a      	ands	r2, r3
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800ba22:	f002 ffa7 	bl	800e974 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ba26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ba2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ba2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3740      	adds	r7, #64	; 0x40
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08e      	sub	sp, #56	; 0x38
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ba46:	2300      	movs	r3, #0
 800ba48:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10a      	bne.n	800ba6e <xEventGroupSetBits+0x32>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	613b      	str	r3, [r7, #16]
}
 800ba6a:	bf00      	nop
 800ba6c:	e7fe      	b.n	800ba6c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d00a      	beq.n	800ba8e <xEventGroupSetBits+0x52>
	__asm volatile
 800ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7c:	f383 8811 	msr	BASEPRI, r3
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	60fb      	str	r3, [r7, #12]
}
 800ba8a:	bf00      	nop
 800ba8c:	e7fe      	b.n	800ba8c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ba8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba90:	3304      	adds	r3, #4
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	3308      	adds	r3, #8
 800ba98:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ba9a:	f001 fc19 	bl	800d2d0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	431a      	orrs	r2, r3
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800bab0:	e03c      	b.n	800bb2c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800bab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800bab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800babe:	2300      	movs	r3, #0
 800bac0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bac8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bad0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d108      	bne.n	800baee <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	4013      	ands	r3, r2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baec:	e008      	b.n	800bb00 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	4013      	ands	r3, r2
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d101      	bne.n	800bb00 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800bafc:	2301      	movs	r3, #1
 800bafe:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d010      	beq.n	800bb28 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800bb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bb20:	4619      	mov	r1, r3
 800bb22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb24:	f001 feaa 	bl	800d87c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800bb2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d1be      	bne.n	800bab2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	43db      	mvns	r3, r3
 800bb3c:	401a      	ands	r2, r3
 800bb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb40:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800bb42:	f001 fbd3 	bl	800d2ec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb48:	681b      	ldr	r3, [r3, #0]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3738      	adds	r7, #56	; 0x38
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff ff6c 	bl	800ba3c <xEventGroupSetBits>
}
 800bb64:	bf00      	nop
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d107      	bne.n	800bb92 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	4013      	ands	r3, r2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00a      	beq.n	800bba2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e007      	b.n	800bba2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	4013      	ands	r3, r2
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d101      	bne.n	800bba2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800bba2:	697b      	ldr	r3, [r7, #20]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	371c      	adds	r7, #28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	68f9      	ldr	r1, [r7, #12]
 800bbc2:	4804      	ldr	r0, [pc, #16]	; (800bbd4 <xEventGroupSetBitsFromISR+0x24>)
 800bbc4:	f002 fd5a 	bl	800e67c <xTimerPendFunctionCallFromISR>
 800bbc8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800bbca:	697b      	ldr	r3, [r7, #20]
	}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	0800bb53 	.word	0x0800bb53

0800bbd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f103 0208 	add.w	r2, r3, #8
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f103 0208 	add.w	r2, r3, #8
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f103 0208 	add.w	r2, r3, #8
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc26:	bf00      	nop
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc32:	b480      	push	{r7}
 800bc34:	b085      	sub	sp, #20
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	689a      	ldr	r2, [r3, #8]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	601a      	str	r2, [r3, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b085      	sub	sp, #20
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc90:	d103      	bne.n	800bc9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	691b      	ldr	r3, [r3, #16]
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	e00c      	b.n	800bcb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	3308      	adds	r3, #8
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	e002      	b.n	800bca8 <vListInsert+0x2e>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	60fb      	str	r3, [r7, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d2f6      	bcs.n	800bca2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	685a      	ldr	r2, [r3, #4]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	1c5a      	adds	r2, r3, #1
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	601a      	str	r2, [r3, #0]
}
 800bce0:	bf00      	nop
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6892      	ldr	r2, [r2, #8]
 800bd02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	6852      	ldr	r2, [r2, #4]
 800bd0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d103      	bne.n	800bd20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	689a      	ldr	r2, [r3, #8]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	1e5a      	subs	r2, r3, #1
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3714      	adds	r7, #20
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <xQueueGenericReset+0x2a>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	60bb      	str	r3, [r7, #8]
}
 800bd66:	bf00      	nop
 800bd68:	e7fe      	b.n	800bd68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd6a:	f002 fdd3 	bl	800e914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	68f9      	ldr	r1, [r7, #12]
 800bd78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd7a:	fb01 f303 	mul.w	r3, r1, r3
 800bd7e:	441a      	add	r2, r3
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	68f9      	ldr	r1, [r7, #12]
 800bd9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bda0:	fb01 f303 	mul.w	r3, r1, r3
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	22ff      	movs	r2, #255	; 0xff
 800bdae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	22ff      	movs	r2, #255	; 0xff
 800bdb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d114      	bne.n	800bdea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01a      	beq.n	800bdfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3310      	adds	r3, #16
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f001 fcf1 	bl	800d7b4 <xTaskRemoveFromEventList>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d012      	beq.n	800bdfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdd8:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <xQueueGenericReset+0xcc>)
 800bdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdde:	601a      	str	r2, [r3, #0]
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	e009      	b.n	800bdfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3310      	adds	r3, #16
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff fef2 	bl	800bbd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3324      	adds	r3, #36	; 0x24
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff feed 	bl	800bbd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bdfe:	f002 fdb9 	bl	800e974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be02:	2301      	movs	r3, #1
}
 800be04:	4618      	mov	r0, r3
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	e000ed04 	.word	0xe000ed04

0800be10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08e      	sub	sp, #56	; 0x38
 800be14:	af02      	add	r7, sp, #8
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <xQueueGenericCreateStatic+0x52>
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d001      	beq.n	800be66 <xQueueGenericCreateStatic+0x56>
 800be62:	2301      	movs	r3, #1
 800be64:	e000      	b.n	800be68 <xQueueGenericCreateStatic+0x58>
 800be66:	2300      	movs	r3, #0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10a      	bne.n	800be82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	623b      	str	r3, [r7, #32]
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d102      	bne.n	800be8e <xQueueGenericCreateStatic+0x7e>
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <xQueueGenericCreateStatic+0x82>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <xQueueGenericCreateStatic+0x84>
 800be92:	2300      	movs	r3, #0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61fb      	str	r3, [r7, #28]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800beae:	2350      	movs	r3, #80	; 0x50
 800beb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b50      	cmp	r3, #80	; 0x50
 800beb6:	d00a      	beq.n	800bece <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	61bb      	str	r3, [r7, #24]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bece:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00d      	beq.n	800bef6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800beda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bedc:	2201      	movs	r2, #1
 800bede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bee2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	4613      	mov	r3, r2
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f000 f83f 	bl	800bf74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bef8:	4618      	mov	r0, r3
 800befa:	3730      	adds	r7, #48	; 0x30
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08a      	sub	sp, #40	; 0x28
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10a      	bne.n	800bf2a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	613b      	str	r3, [r7, #16]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	fb02 f303 	mul.w	r3, r2, r3
 800bf32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	3350      	adds	r3, #80	; 0x50
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f002 fe0d 	bl	800eb58 <pvPortMalloc>
 800bf3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d011      	beq.n	800bf6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	3350      	adds	r3, #80	; 0x50
 800bf4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf58:	79fa      	ldrb	r2, [r7, #7]
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	697a      	ldr	r2, [r7, #20]
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 f805 	bl	800bf74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d103      	bne.n	800bf90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	e002      	b.n	800bf96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	69b8      	ldr	r0, [r7, #24]
 800bfa6:	f7ff fecb 	bl	800bd40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	78fa      	ldrb	r2, [r7, #3]
 800bfae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfb2:	bf00      	nop
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b08a      	sub	sp, #40	; 0x28
 800bfbe:	af02      	add	r7, sp, #8
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10a      	bne.n	800bfe2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	61bb      	str	r3, [r7, #24]
}
 800bfde:	bf00      	nop
 800bfe0:	e7fe      	b.n	800bfe0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d90a      	bls.n	800c000 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	617b      	str	r3, [r7, #20]
}
 800bffc:	bf00      	nop
 800bffe:	e7fe      	b.n	800bffe <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c000:	2302      	movs	r3, #2
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	2100      	movs	r1, #0
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff ff00 	bl	800be10 <xQueueGenericCreateStatic>
 800c010:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d002      	beq.n	800c01e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c01e:	69fb      	ldr	r3, [r7, #28]
	}
 800c020:	4618      	mov	r0, r3
 800c022:	3720      	adds	r7, #32
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	613b      	str	r3, [r7, #16]
}
 800c04a:	bf00      	nop
 800c04c:	e7fe      	b.n	800c04c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c04e:	683a      	ldr	r2, [r7, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d90a      	bls.n	800c06c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	60fb      	str	r3, [r7, #12]
}
 800c068:	bf00      	nop
 800c06a:	e7fe      	b.n	800c06a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c06c:	2202      	movs	r2, #2
 800c06e:	2100      	movs	r1, #0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff ff45 	bl	800bf00 <xQueueGenericCreate>
 800c076:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c084:	697b      	ldr	r3, [r7, #20]
	}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08e      	sub	sp, #56	; 0x38
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xQueueGenericSend+0x32>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0be:	bf00      	nop
 800c0c0:	e7fe      	b.n	800c0c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d103      	bne.n	800c0d0 <xQueueGenericSend+0x40>
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <xQueueGenericSend+0x44>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e000      	b.n	800c0d6 <xQueueGenericSend+0x46>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10a      	bne.n	800c0f0 <xQueueGenericSend+0x60>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d103      	bne.n	800c0fe <xQueueGenericSend+0x6e>
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <xQueueGenericSend+0x72>
 800c0fe:	2301      	movs	r3, #1
 800c100:	e000      	b.n	800c104 <xQueueGenericSend+0x74>
 800c102:	2300      	movs	r3, #0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <xQueueGenericSend+0x8e>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	623b      	str	r3, [r7, #32]
}
 800c11a:	bf00      	nop
 800c11c:	e7fe      	b.n	800c11c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c11e:	f001 fd69 	bl	800dbf4 <xTaskGetSchedulerState>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d102      	bne.n	800c12e <xQueueGenericSend+0x9e>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <xQueueGenericSend+0xa2>
 800c12e:	2301      	movs	r3, #1
 800c130:	e000      	b.n	800c134 <xQueueGenericSend+0xa4>
 800c132:	2300      	movs	r3, #0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <xQueueGenericSend+0xbe>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	61fb      	str	r3, [r7, #28]
}
 800c14a:	bf00      	nop
 800c14c:	e7fe      	b.n	800c14c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c14e:	f002 fbe1 	bl	800e914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <xQueueGenericSend+0xd4>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d129      	bne.n	800c1b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	68b9      	ldr	r1, [r7, #8]
 800c168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16a:	f000 fc5e 	bl	800ca2a <prvCopyDataToQueue>
 800c16e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b00      	cmp	r3, #0
 800c176:	d010      	beq.n	800c19a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	3324      	adds	r3, #36	; 0x24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f001 fb19 	bl	800d7b4 <xTaskRemoveFromEventList>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d013      	beq.n	800c1b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c188:	4b3f      	ldr	r3, [pc, #252]	; (800c288 <xQueueGenericSend+0x1f8>)
 800c18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	e00a      	b.n	800c1b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1a0:	4b39      	ldr	r3, [pc, #228]	; (800c288 <xQueueGenericSend+0x1f8>)
 800c1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1b0:	f002 fbe0 	bl	800e974 <vPortExitCritical>
				return pdPASS;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e063      	b.n	800c280 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1be:	f002 fbd9 	bl	800e974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e05c      	b.n	800c280 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f001 fbb5 	bl	800d940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1da:	f002 fbcb 	bl	800e974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1de:	f001 f877 	bl	800d2d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1e2:	f002 fb97 	bl	800e914 <vPortEnterCritical>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ec:	b25b      	sxtb	r3, r3
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1f2:	d103      	bne.n	800c1fc <xQueueGenericSend+0x16c>
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c202:	b25b      	sxtb	r3, r3
 800c204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c208:	d103      	bne.n	800c212 <xQueueGenericSend+0x182>
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c212:	f002 fbaf 	bl	800e974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c216:	1d3a      	adds	r2, r7, #4
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 fba4 	bl	800d96c <xTaskCheckForTimeOut>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d124      	bne.n	800c274 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c22c:	f000 fcf5 	bl	800cc1a <prvIsQueueFull>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d018      	beq.n	800c268 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	3310      	adds	r3, #16
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	4611      	mov	r1, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 fa2c 	bl	800d69c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c246:	f000 fc80 	bl	800cb4a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c24a:	f001 f84f 	bl	800d2ec <xTaskResumeAll>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	f47f af7c 	bne.w	800c14e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <xQueueGenericSend+0x1f8>)
 800c258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	e772      	b.n	800c14e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c26a:	f000 fc6e 	bl	800cb4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c26e:	f001 f83d 	bl	800d2ec <xTaskResumeAll>
 800c272:	e76c      	b.n	800c14e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c276:	f000 fc68 	bl	800cb4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c27a:	f001 f837 	bl	800d2ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c27e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c280:	4618      	mov	r0, r3
 800c282:	3738      	adds	r7, #56	; 0x38
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b090      	sub	sp, #64	; 0x40
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10a      	bne.n	800c2ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d103      	bne.n	800c2c8 <xQueueGenericSendFromISR+0x3c>
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <xQueueGenericSendFromISR+0x40>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <xQueueGenericSendFromISR+0x42>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10a      	bne.n	800c2e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d103      	bne.n	800c2f6 <xQueueGenericSendFromISR+0x6a>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d101      	bne.n	800c2fa <xQueueGenericSendFromISR+0x6e>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <xQueueGenericSendFromISR+0x70>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10a      	bne.n	800c316 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	623b      	str	r3, [r7, #32]
}
 800c312:	bf00      	nop
 800c314:	e7fe      	b.n	800c314 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c316:	f002 fbdf 	bl	800ead8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c31a:	f3ef 8211 	mrs	r2, BASEPRI
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	61fa      	str	r2, [r7, #28]
 800c330:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c332:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c334:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c33e:	429a      	cmp	r2, r3
 800c340:	d302      	bcc.n	800c348 <xQueueGenericSendFromISR+0xbc>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b02      	cmp	r3, #2
 800c346:	d12f      	bne.n	800c3a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c356:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c358:	683a      	ldr	r2, [r7, #0]
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c35e:	f000 fb64 	bl	800ca2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c362:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c36a:	d112      	bne.n	800c392 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	2b00      	cmp	r3, #0
 800c372:	d016      	beq.n	800c3a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	3324      	adds	r3, #36	; 0x24
 800c378:	4618      	mov	r0, r3
 800c37a:	f001 fa1b 	bl	800d7b4 <xTaskRemoveFromEventList>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00e      	beq.n	800c3a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00b      	beq.n	800c3a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2201      	movs	r2, #1
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e007      	b.n	800c3a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c392:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c396:	3301      	adds	r3, #1
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	b25a      	sxtb	r2, r3
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c3a6:	e001      	b.n	800c3ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3740      	adds	r7, #64	; 0x40
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b08e      	sub	sp, #56	; 0x38
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
 800c3ca:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10a      	bne.n	800c3ec <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	623b      	str	r3, [r7, #32]
}
 800c3e8:	bf00      	nop
 800c3ea:	e7fe      	b.n	800c3ea <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <xQueueGiveFromISR+0x48>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	61fb      	str	r3, [r7, #28]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d103      	bne.n	800c41a <xQueueGiveFromISR+0x58>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <xQueueGiveFromISR+0x5c>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <xQueueGiveFromISR+0x5e>
 800c41e:	2300      	movs	r3, #0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <xQueueGiveFromISR+0x78>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	61bb      	str	r3, [r7, #24]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c43a:	f002 fb4d 	bl	800ead8 <vPortValidateInterruptPriority>
	__asm volatile
 800c43e:	f3ef 8211 	mrs	r2, BASEPRI
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	617a      	str	r2, [r7, #20]
 800c454:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c456:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c466:	429a      	cmp	r2, r3
 800c468:	d22b      	bcs.n	800c4c2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c47c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c484:	d112      	bne.n	800c4ac <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d016      	beq.n	800c4bc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	3324      	adds	r3, #36	; 0x24
 800c492:	4618      	mov	r0, r3
 800c494:	f001 f98e 	bl	800d7b4 <xTaskRemoveFromEventList>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00e      	beq.n	800c4bc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	e007      	b.n	800c4bc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	b25a      	sxtb	r2, r3
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c0:	e001      	b.n	800c4c6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f383 8811 	msr	BASEPRI, r3
}
 800c4d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3738      	adds	r7, #56	; 0x38
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08c      	sub	sp, #48	; 0x30
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10a      	bne.n	800c50c <xQueueReceive+0x30>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	623b      	str	r3, [r7, #32]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d103      	bne.n	800c51a <xQueueReceive+0x3e>
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <xQueueReceive+0x42>
 800c51a:	2301      	movs	r3, #1
 800c51c:	e000      	b.n	800c520 <xQueueReceive+0x44>
 800c51e:	2300      	movs	r3, #0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10a      	bne.n	800c53a <xQueueReceive+0x5e>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	61fb      	str	r3, [r7, #28]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c53a:	f001 fb5b 	bl	800dbf4 <xTaskGetSchedulerState>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d102      	bne.n	800c54a <xQueueReceive+0x6e>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <xQueueReceive+0x72>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e000      	b.n	800c550 <xQueueReceive+0x74>
 800c54e:	2300      	movs	r3, #0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <xQueueReceive+0x8e>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	61bb      	str	r3, [r7, #24]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c56a:	f002 f9d3 	bl	800e914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	2b00      	cmp	r3, #0
 800c578:	d01f      	beq.n	800c5ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c57a:	68b9      	ldr	r1, [r7, #8]
 800c57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c57e:	f000 fabe 	bl	800cafe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c588:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00f      	beq.n	800c5b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	3310      	adds	r3, #16
 800c596:	4618      	mov	r0, r3
 800c598:	f001 f90c 	bl	800d7b4 <xTaskRemoveFromEventList>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d007      	beq.n	800c5b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5a2:	4b3d      	ldr	r3, [pc, #244]	; (800c698 <xQueueReceive+0x1bc>)
 800c5a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5a8:	601a      	str	r2, [r3, #0]
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5b2:	f002 f9df 	bl	800e974 <vPortExitCritical>
				return pdPASS;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e069      	b.n	800c68e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5c0:	f002 f9d8 	bl	800e974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e062      	b.n	800c68e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5ce:	f107 0310 	add.w	r3, r7, #16
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f001 f9b4 	bl	800d940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5dc:	f002 f9ca 	bl	800e974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5e0:	f000 fe76 	bl	800d2d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5e4:	f002 f996 	bl	800e914 <vPortEnterCritical>
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5ee:	b25b      	sxtb	r3, r3
 800c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f4:	d103      	bne.n	800c5fe <xQueueReceive+0x122>
 800c5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c604:	b25b      	sxtb	r3, r3
 800c606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c60a:	d103      	bne.n	800c614 <xQueueReceive+0x138>
 800c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c614:	f002 f9ae 	bl	800e974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c618:	1d3a      	adds	r2, r7, #4
 800c61a:	f107 0310 	add.w	r3, r7, #16
 800c61e:	4611      	mov	r1, r2
 800c620:	4618      	mov	r0, r3
 800c622:	f001 f9a3 	bl	800d96c <xTaskCheckForTimeOut>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d123      	bne.n	800c674 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c62e:	f000 fade 	bl	800cbee <prvIsQueueEmpty>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d017      	beq.n	800c668 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	3324      	adds	r3, #36	; 0x24
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	4611      	mov	r1, r2
 800c640:	4618      	mov	r0, r3
 800c642:	f001 f82b 	bl	800d69c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c648:	f000 fa7f 	bl	800cb4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c64c:	f000 fe4e 	bl	800d2ec <xTaskResumeAll>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d189      	bne.n	800c56a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c656:	4b10      	ldr	r3, [pc, #64]	; (800c698 <xQueueReceive+0x1bc>)
 800c658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	e780      	b.n	800c56a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c66a:	f000 fa6e 	bl	800cb4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c66e:	f000 fe3d 	bl	800d2ec <xTaskResumeAll>
 800c672:	e77a      	b.n	800c56a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c676:	f000 fa68 	bl	800cb4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c67a:	f000 fe37 	bl	800d2ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c680:	f000 fab5 	bl	800cbee <prvIsQueueEmpty>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	f43f af6f 	beq.w	800c56a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c68c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3730      	adds	r7, #48	; 0x30
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08e      	sub	sp, #56	; 0x38
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10a      	bne.n	800c6ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	623b      	str	r3, [r7, #32]
}
 800c6ca:	bf00      	nop
 800c6cc:	e7fe      	b.n	800c6cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00a      	beq.n	800c6ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	61fb      	str	r3, [r7, #28]
}
 800c6e8:	bf00      	nop
 800c6ea:	e7fe      	b.n	800c6ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6ec:	f001 fa82 	bl	800dbf4 <xTaskGetSchedulerState>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <xQueueSemaphoreTake+0x60>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <xQueueSemaphoreTake+0x64>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <xQueueSemaphoreTake+0x66>
 800c700:	2300      	movs	r3, #0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	61bb      	str	r3, [r7, #24]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c71c:	f002 f8fa 	bl	800e914 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c724:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d024      	beq.n	800c776 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	1e5a      	subs	r2, r3, #1
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d104      	bne.n	800c746 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c73c:	f001 fbe8 	bl	800df10 <pvTaskIncrementMutexHeldCount>
 800c740:	4602      	mov	r2, r0
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00f      	beq.n	800c76e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	3310      	adds	r3, #16
 800c752:	4618      	mov	r0, r3
 800c754:	f001 f82e 	bl	800d7b4 <xTaskRemoveFromEventList>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d007      	beq.n	800c76e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c75e:	4b54      	ldr	r3, [pc, #336]	; (800c8b0 <xQueueSemaphoreTake+0x214>)
 800c760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c76e:	f002 f901 	bl	800e974 <vPortExitCritical>
				return pdPASS;
 800c772:	2301      	movs	r3, #1
 800c774:	e097      	b.n	800c8a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d111      	bne.n	800c7a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00a      	beq.n	800c798 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	617b      	str	r3, [r7, #20]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c798:	f002 f8ec 	bl	800e974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e082      	b.n	800c8a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d106      	bne.n	800c7b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7a6:	f107 030c 	add.w	r3, r7, #12
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f001 f8c8 	bl	800d940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7b4:	f002 f8de 	bl	800e974 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7b8:	f000 fd8a 	bl	800d2d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7bc:	f002 f8aa 	bl	800e914 <vPortEnterCritical>
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c6:	b25b      	sxtb	r3, r3
 800c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7cc:	d103      	bne.n	800c7d6 <xQueueSemaphoreTake+0x13a>
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7dc:	b25b      	sxtb	r3, r3
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e2:	d103      	bne.n	800c7ec <xQueueSemaphoreTake+0x150>
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7ec:	f002 f8c2 	bl	800e974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7f0:	463a      	mov	r2, r7
 800c7f2:	f107 030c 	add.w	r3, r7, #12
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 f8b7 	bl	800d96c <xTaskCheckForTimeOut>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d132      	bne.n	800c86a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c806:	f000 f9f2 	bl	800cbee <prvIsQueueEmpty>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d026      	beq.n	800c85e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d109      	bne.n	800c82c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c818:	f002 f87c 	bl	800e914 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	4618      	mov	r0, r3
 800c822:	f001 fa05 	bl	800dc30 <xTaskPriorityInherit>
 800c826:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c828:	f002 f8a4 	bl	800e974 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	3324      	adds	r3, #36	; 0x24
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	4611      	mov	r1, r2
 800c834:	4618      	mov	r0, r3
 800c836:	f000 ff31 	bl	800d69c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c83a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c83c:	f000 f985 	bl	800cb4a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c840:	f000 fd54 	bl	800d2ec <xTaskResumeAll>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	f47f af68 	bne.w	800c71c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c84c:	4b18      	ldr	r3, [pc, #96]	; (800c8b0 <xQueueSemaphoreTake+0x214>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	e75e      	b.n	800c71c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c860:	f000 f973 	bl	800cb4a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c864:	f000 fd42 	bl	800d2ec <xTaskResumeAll>
 800c868:	e758      	b.n	800c71c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c86c:	f000 f96d 	bl	800cb4a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c870:	f000 fd3c 	bl	800d2ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c876:	f000 f9ba 	bl	800cbee <prvIsQueueEmpty>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f43f af4d 	beq.w	800c71c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00d      	beq.n	800c8a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c888:	f002 f844 	bl	800e914 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c88e:	f000 f8b4 	bl	800c9fa <prvGetDisinheritPriorityAfterTimeout>
 800c892:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c89a:	4618      	mov	r0, r3
 800c89c:	f001 fa9e 	bl	800dddc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c8a0:	f002 f868 	bl	800e974 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3738      	adds	r7, #56	; 0x38
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	e000ed04 	.word	0xe000ed04

0800c8b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08e      	sub	sp, #56	; 0x38
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	623b      	str	r3, [r7, #32]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <xQueueReceiveFromISR+0x3a>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <xQueueReceiveFromISR+0x3e>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e000      	b.n	800c8f4 <xQueueReceiveFromISR+0x40>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	61fb      	str	r3, [r7, #28]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c90e:	f002 f8e3 	bl	800ead8 <vPortValidateInterruptPriority>
	__asm volatile
 800c912:	f3ef 8211 	mrs	r2, BASEPRI
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	61ba      	str	r2, [r7, #24]
 800c928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c92a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c92c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	2b00      	cmp	r3, #0
 800c938:	d02f      	beq.n	800c99a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c944:	68b9      	ldr	r1, [r7, #8]
 800c946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c948:	f000 f8d9 	bl	800cafe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94e:	1e5a      	subs	r2, r3, #1
 800c950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c95c:	d112      	bne.n	800c984 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d016      	beq.n	800c994 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	3310      	adds	r3, #16
 800c96a:	4618      	mov	r0, r3
 800c96c:	f000 ff22 	bl	800d7b4 <xTaskRemoveFromEventList>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00e      	beq.n	800c994 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	e007      	b.n	800c994 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c988:	3301      	adds	r3, #1
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	b25a      	sxtb	r2, r3
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c994:	2301      	movs	r3, #1
 800c996:	637b      	str	r3, [r7, #52]	; 0x34
 800c998:	e001      	b.n	800c99e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c99a:	2300      	movs	r3, #0
 800c99c:	637b      	str	r3, [r7, #52]	; 0x34
 800c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f383 8811 	msr	BASEPRI, r3
}
 800c9a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3738      	adds	r7, #56	; 0x38
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10a      	bne.n	800c9dc <vQueueDelete+0x28>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60bb      	str	r3, [r7, #8]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f000 f95f 	bl	800cca0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d102      	bne.n	800c9f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f002 f97f 	bl	800ecf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c9f2:	bf00      	nop
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d006      	beq.n	800ca18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e001      	b.n	800ca1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
	}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b086      	sub	sp, #24
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10d      	bne.n	800ca64 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d14d      	bne.n	800caec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 f953 	bl	800dd00 <xTaskPriorityDisinherit>
 800ca5a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	609a      	str	r2, [r3, #8]
 800ca62:	e043      	b.n	800caec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d119      	bne.n	800ca9e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6858      	ldr	r0, [r3, #4]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca72:	461a      	mov	r2, r3
 800ca74:	68b9      	ldr	r1, [r7, #8]
 800ca76:	f002 fa83 	bl	800ef80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca82:	441a      	add	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d32b      	bcc.n	800caec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	605a      	str	r2, [r3, #4]
 800ca9c:	e026      	b.n	800caec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	68d8      	ldr	r0, [r3, #12]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	461a      	mov	r2, r3
 800caa8:	68b9      	ldr	r1, [r7, #8]
 800caaa:	f002 fa69 	bl	800ef80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68da      	ldr	r2, [r3, #12]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab6:	425b      	negs	r3, r3
 800cab8:	441a      	add	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d207      	bcs.n	800cada <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	689a      	ldr	r2, [r3, #8]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	425b      	negs	r3, r3
 800cad4:	441a      	add	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d105      	bne.n	800caec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	3b01      	subs	r3, #1
 800caea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	1c5a      	adds	r2, r3, #1
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800caf4:	697b      	ldr	r3, [r7, #20]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b082      	sub	sp, #8
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
 800cb06:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d018      	beq.n	800cb42 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68da      	ldr	r2, [r3, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb18:	441a      	add	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68da      	ldr	r2, [r3, #12]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	689b      	ldr	r3, [r3, #8]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d303      	bcc.n	800cb32 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68d9      	ldr	r1, [r3, #12]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6838      	ldr	r0, [r7, #0]
 800cb3e:	f002 fa1f 	bl	800ef80 <memcpy>
	}
}
 800cb42:	bf00      	nop
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb52:	f001 fedf 	bl	800e914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb5c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb5e:	e011      	b.n	800cb84 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d012      	beq.n	800cb8e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	3324      	adds	r3, #36	; 0x24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 fe21 	bl	800d7b4 <xTaskRemoveFromEventList>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb78:	f000 ff5a 	bl	800da30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
 800cb7e:	3b01      	subs	r3, #1
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	dce9      	bgt.n	800cb60 <prvUnlockQueue+0x16>
 800cb8c:	e000      	b.n	800cb90 <prvUnlockQueue+0x46>
					break;
 800cb8e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	22ff      	movs	r2, #255	; 0xff
 800cb94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb98:	f001 feec 	bl	800e974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb9c:	f001 feba 	bl	800e914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cba6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cba8:	e011      	b.n	800cbce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d012      	beq.n	800cbd8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3310      	adds	r3, #16
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 fdfc 	bl	800d7b4 <xTaskRemoveFromEventList>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbc2:	f000 ff35 	bl	800da30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbc6:	7bbb      	ldrb	r3, [r7, #14]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	dce9      	bgt.n	800cbaa <prvUnlockQueue+0x60>
 800cbd6:	e000      	b.n	800cbda <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbd8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	22ff      	movs	r2, #255	; 0xff
 800cbde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cbe2:	f001 fec7 	bl	800e974 <vPortExitCritical>
}
 800cbe6:	bf00      	nop
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbf6:	f001 fe8d 	bl	800e914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d102      	bne.n	800cc08 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc02:	2301      	movs	r3, #1
 800cc04:	60fb      	str	r3, [r7, #12]
 800cc06:	e001      	b.n	800cc0c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc0c:	f001 feb2 	bl	800e974 <vPortExitCritical>

	return xReturn;
 800cc10:	68fb      	ldr	r3, [r7, #12]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc22:	f001 fe77 	bl	800e914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d102      	bne.n	800cc38 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc32:	2301      	movs	r3, #1
 800cc34:	60fb      	str	r3, [r7, #12]
 800cc36:	e001      	b.n	800cc3c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc3c:	f001 fe9a 	bl	800e974 <vPortExitCritical>

	return xReturn;
 800cc40:	68fb      	ldr	r3, [r7, #12]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc56:	2300      	movs	r3, #0
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e014      	b.n	800cc86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc5c:	4a0f      	ldr	r2, [pc, #60]	; (800cc9c <vQueueAddToRegistry+0x50>)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10b      	bne.n	800cc80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc68:	490c      	ldr	r1, [pc, #48]	; (800cc9c <vQueueAddToRegistry+0x50>)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc72:	4a0a      	ldr	r2, [pc, #40]	; (800cc9c <vQueueAddToRegistry+0x50>)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	4413      	add	r3, r2
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc7e:	e006      	b.n	800cc8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3301      	adds	r3, #1
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b07      	cmp	r3, #7
 800cc8a:	d9e7      	bls.n	800cc5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc8c:	bf00      	nop
 800cc8e:	bf00      	nop
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	2000f99c 	.word	0x2000f99c

0800cca0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cca8:	2300      	movs	r3, #0
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e016      	b.n	800ccdc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ccae:	4a10      	ldr	r2, [pc, #64]	; (800ccf0 <vQueueUnregisterQueue+0x50>)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	00db      	lsls	r3, r3, #3
 800ccb4:	4413      	add	r3, r2
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d10b      	bne.n	800ccd6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ccbe:	4a0c      	ldr	r2, [pc, #48]	; (800ccf0 <vQueueUnregisterQueue+0x50>)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ccc8:	4a09      	ldr	r2, [pc, #36]	; (800ccf0 <vQueueUnregisterQueue+0x50>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	4413      	add	r3, r2
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	605a      	str	r2, [r3, #4]
				break;
 800ccd4:	e006      	b.n	800cce4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2b07      	cmp	r3, #7
 800cce0:	d9e5      	bls.n	800ccae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cce2:	bf00      	nop
 800cce4:	bf00      	nop
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	2000f99c 	.word	0x2000f99c

0800ccf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cd04:	f001 fe06 	bl	800e914 <vPortEnterCritical>
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd0e:	b25b      	sxtb	r3, r3
 800cd10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd14:	d103      	bne.n	800cd1e <vQueueWaitForMessageRestricted+0x2a>
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd24:	b25b      	sxtb	r3, r3
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd2a:	d103      	bne.n	800cd34 <vQueueWaitForMessageRestricted+0x40>
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd34:	f001 fe1e 	bl	800e974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d106      	bne.n	800cd4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	3324      	adds	r3, #36	; 0x24
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fd07 	bl	800d75c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cd4e:	6978      	ldr	r0, [r7, #20]
 800cd50:	f7ff fefb 	bl	800cb4a <prvUnlockQueue>
	}
 800cd54:	bf00      	nop
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08e      	sub	sp, #56	; 0x38
 800cd60:	af04      	add	r7, sp, #16
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
 800cd68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10a      	bne.n	800cd86 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	623b      	str	r3, [r7, #32]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10a      	bne.n	800cda2 <xTaskCreateStatic+0x46>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	61fb      	str	r3, [r7, #28]
}
 800cd9e:	bf00      	nop
 800cda0:	e7fe      	b.n	800cda0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cda2:	235c      	movs	r3, #92	; 0x5c
 800cda4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	2b5c      	cmp	r3, #92	; 0x5c
 800cdaa:	d00a      	beq.n	800cdc2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	f383 8811 	msr	BASEPRI, r3
 800cdb4:	f3bf 8f6f 	isb	sy
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	61bb      	str	r3, [r7, #24]
}
 800cdbe:	bf00      	nop
 800cdc0:	e7fe      	b.n	800cdc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01e      	beq.n	800ce08 <xTaskCreateStatic+0xac>
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01b      	beq.n	800ce08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	2202      	movs	r2, #2
 800cdde:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cde2:	2300      	movs	r3, #0
 800cde4:	9303      	str	r3, [sp, #12]
 800cde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde8:	9302      	str	r3, [sp, #8]
 800cdea:	f107 0314 	add.w	r3, r7, #20
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f000 f850 	bl	800cea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce02:	f000 f8dd 	bl	800cfc0 <prvAddNewTaskToReadyList>
 800ce06:	e001      	b.n	800ce0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce0c:	697b      	ldr	r3, [r7, #20]
	}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3728      	adds	r7, #40	; 0x28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b08c      	sub	sp, #48	; 0x30
 800ce1a:	af04      	add	r7, sp, #16
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	603b      	str	r3, [r7, #0]
 800ce22:	4613      	mov	r3, r2
 800ce24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce26:	88fb      	ldrh	r3, [r7, #6]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f001 fe94 	bl	800eb58 <pvPortMalloc>
 800ce30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00e      	beq.n	800ce56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce38:	205c      	movs	r0, #92	; 0x5c
 800ce3a:	f001 fe8d 	bl	800eb58 <pvPortMalloc>
 800ce3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce4c:	e005      	b.n	800ce5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f001 ff4e 	bl	800ecf0 <vPortFree>
 800ce54:	e001      	b.n	800ce5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce56:	2300      	movs	r3, #0
 800ce58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d017      	beq.n	800ce90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce68:	88fa      	ldrh	r2, [r7, #6]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	9303      	str	r3, [sp, #12]
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	9302      	str	r3, [sp, #8]
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68b9      	ldr	r1, [r7, #8]
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	f000 f80e 	bl	800cea0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce84:	69f8      	ldr	r0, [r7, #28]
 800ce86:	f000 f89b 	bl	800cfc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	61bb      	str	r3, [r7, #24]
 800ce8e:	e002      	b.n	800ce96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce96:	69bb      	ldr	r3, [r7, #24]
	}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3720      	adds	r7, #32
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b088      	sub	sp, #32
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	21a5      	movs	r1, #165	; 0xa5
 800ceba:	f002 f86f 	bl	800ef9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cec8:	3b01      	subs	r3, #1
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	4413      	add	r3, r2
 800cece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	f023 0307 	bic.w	r3, r3, #7
 800ced6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	f003 0307 	and.w	r3, r3, #7
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00a      	beq.n	800cef8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	617b      	str	r3, [r7, #20]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d01f      	beq.n	800cf3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cefe:	2300      	movs	r3, #0
 800cf00:	61fb      	str	r3, [r7, #28]
 800cf02:	e012      	b.n	800cf2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	7819      	ldrb	r1, [r3, #0]
 800cf0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	4413      	add	r3, r2
 800cf12:	3334      	adds	r3, #52	; 0x34
 800cf14:	460a      	mov	r2, r1
 800cf16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d006      	beq.n	800cf32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	3301      	adds	r3, #1
 800cf28:	61fb      	str	r3, [r7, #28]
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	2b0f      	cmp	r3, #15
 800cf2e:	d9e9      	bls.n	800cf04 <prvInitialiseNewTask+0x64>
 800cf30:	e000      	b.n	800cf34 <prvInitialiseNewTask+0x94>
			{
				break;
 800cf32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf3c:	e003      	b.n	800cf46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	2b37      	cmp	r3, #55	; 0x37
 800cf4a:	d901      	bls.n	800cf50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf4c:	2337      	movs	r3, #55	; 0x37
 800cf4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5e:	2200      	movs	r2, #0
 800cf60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	3304      	adds	r3, #4
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe fe56 	bl	800bc18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6e:	3318      	adds	r3, #24
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe fe51 	bl	800bc18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	2200      	movs	r2, #0
 800cf90:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	68f9      	ldr	r1, [r7, #12]
 800cf9e:	69b8      	ldr	r0, [r7, #24]
 800cfa0:	f001 fb8c 	bl	800e6bc <pxPortInitialiseStack>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfb6:	bf00      	nop
 800cfb8:	3720      	adds	r7, #32
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
	...

0800cfc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfc8:	f001 fca4 	bl	800e914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfcc:	4b2d      	ldr	r3, [pc, #180]	; (800d084 <prvAddNewTaskToReadyList+0xc4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	4a2c      	ldr	r2, [pc, #176]	; (800d084 <prvAddNewTaskToReadyList+0xc4>)
 800cfd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfd6:	4b2c      	ldr	r3, [pc, #176]	; (800d088 <prvAddNewTaskToReadyList+0xc8>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d109      	bne.n	800cff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfde:	4a2a      	ldr	r2, [pc, #168]	; (800d088 <prvAddNewTaskToReadyList+0xc8>)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfe4:	4b27      	ldr	r3, [pc, #156]	; (800d084 <prvAddNewTaskToReadyList+0xc4>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d110      	bne.n	800d00e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfec:	f000 fd44 	bl	800da78 <prvInitialiseTaskLists>
 800cff0:	e00d      	b.n	800d00e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cff2:	4b26      	ldr	r3, [pc, #152]	; (800d08c <prvAddNewTaskToReadyList+0xcc>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d109      	bne.n	800d00e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cffa:	4b23      	ldr	r3, [pc, #140]	; (800d088 <prvAddNewTaskToReadyList+0xc8>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d004:	429a      	cmp	r2, r3
 800d006:	d802      	bhi.n	800d00e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d008:	4a1f      	ldr	r2, [pc, #124]	; (800d088 <prvAddNewTaskToReadyList+0xc8>)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d00e:	4b20      	ldr	r3, [pc, #128]	; (800d090 <prvAddNewTaskToReadyList+0xd0>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	3301      	adds	r3, #1
 800d014:	4a1e      	ldr	r2, [pc, #120]	; (800d090 <prvAddNewTaskToReadyList+0xd0>)
 800d016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <prvAddNewTaskToReadyList+0xd0>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d024:	4b1b      	ldr	r3, [pc, #108]	; (800d094 <prvAddNewTaskToReadyList+0xd4>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d903      	bls.n	800d034 <prvAddNewTaskToReadyList+0x74>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	4a18      	ldr	r2, [pc, #96]	; (800d094 <prvAddNewTaskToReadyList+0xd4>)
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d038:	4613      	mov	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4a15      	ldr	r2, [pc, #84]	; (800d098 <prvAddNewTaskToReadyList+0xd8>)
 800d042:	441a      	add	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3304      	adds	r3, #4
 800d048:	4619      	mov	r1, r3
 800d04a:	4610      	mov	r0, r2
 800d04c:	f7fe fdf1 	bl	800bc32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d050:	f001 fc90 	bl	800e974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d054:	4b0d      	ldr	r3, [pc, #52]	; (800d08c <prvAddNewTaskToReadyList+0xcc>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00e      	beq.n	800d07a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d05c:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <prvAddNewTaskToReadyList+0xc8>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d066:	429a      	cmp	r2, r3
 800d068:	d207      	bcs.n	800d07a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d06a:	4b0c      	ldr	r3, [pc, #48]	; (800d09c <prvAddNewTaskToReadyList+0xdc>)
 800d06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000d08 	.word	0x20000d08
 800d088:	20000834 	.word	0x20000834
 800d08c:	20000d14 	.word	0x20000d14
 800d090:	20000d24 	.word	0x20000d24
 800d094:	20000d10 	.word	0x20000d10
 800d098:	20000838 	.word	0x20000838
 800d09c:	e000ed04 	.word	0xe000ed04

0800d0a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b08a      	sub	sp, #40	; 0x28
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <vTaskDelayUntil+0x2a>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	617b      	str	r3, [r7, #20]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d10a      	bne.n	800d0e6 <vTaskDelayUntil+0x46>
	__asm volatile
 800d0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	613b      	str	r3, [r7, #16]
}
 800d0e2:	bf00      	nop
 800d0e4:	e7fe      	b.n	800d0e4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d0e6:	4b2a      	ldr	r3, [pc, #168]	; (800d190 <vTaskDelayUntil+0xf0>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <vTaskDelayUntil+0x64>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	60fb      	str	r3, [r7, #12]
}
 800d100:	bf00      	nop
 800d102:	e7fe      	b.n	800d102 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d104:	f000 f8e4 	bl	800d2d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d108:	4b22      	ldr	r3, [pc, #136]	; (800d194 <vTaskDelayUntil+0xf4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	4413      	add	r3, r2
 800d116:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	6a3a      	ldr	r2, [r7, #32]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d20b      	bcs.n	800d13a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	69fa      	ldr	r2, [r7, #28]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d211      	bcs.n	800d150 <vTaskDelayUntil+0xb0>
 800d12c:	69fa      	ldr	r2, [r7, #28]
 800d12e:	6a3b      	ldr	r3, [r7, #32]
 800d130:	429a      	cmp	r2, r3
 800d132:	d90d      	bls.n	800d150 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d134:	2301      	movs	r3, #1
 800d136:	627b      	str	r3, [r7, #36]	; 0x24
 800d138:	e00a      	b.n	800d150 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	69fa      	ldr	r2, [r7, #28]
 800d140:	429a      	cmp	r2, r3
 800d142:	d303      	bcc.n	800d14c <vTaskDelayUntil+0xac>
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d901      	bls.n	800d150 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d14c:	2301      	movs	r3, #1
 800d14e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d006      	beq.n	800d16a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d15c:	69fa      	ldr	r2, [r7, #28]
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	2100      	movs	r1, #0
 800d164:	4618      	mov	r0, r3
 800d166:	f000 fee7 	bl	800df38 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d16a:	f000 f8bf 	bl	800d2ec <xTaskResumeAll>
 800d16e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d107      	bne.n	800d186 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d176:	4b08      	ldr	r3, [pc, #32]	; (800d198 <vTaskDelayUntil+0xf8>)
 800d178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d186:	bf00      	nop
 800d188:	3728      	adds	r7, #40	; 0x28
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000d30 	.word	0x20000d30
 800d194:	20000d0c 	.word	0x20000d0c
 800d198:	e000ed04 	.word	0xe000ed04

0800d19c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d017      	beq.n	800d1de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1ae:	4b13      	ldr	r3, [pc, #76]	; (800d1fc <vTaskDelay+0x60>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00a      	beq.n	800d1cc <vTaskDelay+0x30>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	60bb      	str	r3, [r7, #8]
}
 800d1c8:	bf00      	nop
 800d1ca:	e7fe      	b.n	800d1ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d1cc:	f000 f880 	bl	800d2d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 feb0 	bl	800df38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1d8:	f000 f888 	bl	800d2ec <xTaskResumeAll>
 800d1dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d107      	bne.n	800d1f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d1e4:	4b06      	ldr	r3, [pc, #24]	; (800d200 <vTaskDelay+0x64>)
 800d1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1f4:	bf00      	nop
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20000d30 	.word	0x20000d30
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08a      	sub	sp, #40	; 0x28
 800d208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d212:	463a      	mov	r2, r7
 800d214:	1d39      	adds	r1, r7, #4
 800d216:	f107 0308 	add.w	r3, r7, #8
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe faba 	bl	800b794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d220:	6839      	ldr	r1, [r7, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	68ba      	ldr	r2, [r7, #8]
 800d226:	9202      	str	r2, [sp, #8]
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	2300      	movs	r3, #0
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	2300      	movs	r3, #0
 800d230:	460a      	mov	r2, r1
 800d232:	4921      	ldr	r1, [pc, #132]	; (800d2b8 <vTaskStartScheduler+0xb4>)
 800d234:	4821      	ldr	r0, [pc, #132]	; (800d2bc <vTaskStartScheduler+0xb8>)
 800d236:	f7ff fd91 	bl	800cd5c <xTaskCreateStatic>
 800d23a:	4603      	mov	r3, r0
 800d23c:	4a20      	ldr	r2, [pc, #128]	; (800d2c0 <vTaskStartScheduler+0xbc>)
 800d23e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d240:	4b1f      	ldr	r3, [pc, #124]	; (800d2c0 <vTaskStartScheduler+0xbc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d002      	beq.n	800d24e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d248:	2301      	movs	r3, #1
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	e001      	b.n	800d252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d24e:	2300      	movs	r3, #0
 800d250:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d102      	bne.n	800d25e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d258:	f000 fec2 	bl	800dfe0 <xTimerCreateTimerTask>
 800d25c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d116      	bne.n	800d292 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	f383 8811 	msr	BASEPRI, r3
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	613b      	str	r3, [r7, #16]
}
 800d276:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d278:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <vTaskStartScheduler+0xc0>)
 800d27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d27e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d280:	4b11      	ldr	r3, [pc, #68]	; (800d2c8 <vTaskStartScheduler+0xc4>)
 800d282:	2201      	movs	r2, #1
 800d284:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d286:	4b11      	ldr	r3, [pc, #68]	; (800d2cc <vTaskStartScheduler+0xc8>)
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d28c:	f001 faa0 	bl	800e7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d290:	e00e      	b.n	800d2b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d298:	d10a      	bne.n	800d2b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800d29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	60fb      	str	r3, [r7, #12]
}
 800d2ac:	bf00      	nop
 800d2ae:	e7fe      	b.n	800d2ae <vTaskStartScheduler+0xaa>
}
 800d2b0:	bf00      	nop
 800d2b2:	3718      	adds	r7, #24
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	080102a0 	.word	0x080102a0
 800d2bc:	0800da49 	.word	0x0800da49
 800d2c0:	20000d2c 	.word	0x20000d2c
 800d2c4:	20000d28 	.word	0x20000d28
 800d2c8:	20000d14 	.word	0x20000d14
 800d2cc:	20000d0c 	.word	0x20000d0c

0800d2d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2d4:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <vTaskSuspendAll+0x18>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	4a03      	ldr	r2, [pc, #12]	; (800d2e8 <vTaskSuspendAll+0x18>)
 800d2dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2de:	bf00      	nop
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr
 800d2e8:	20000d30 	.word	0x20000d30

0800d2ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2fa:	4b42      	ldr	r3, [pc, #264]	; (800d404 <xTaskResumeAll+0x118>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10a      	bne.n	800d318 <xTaskResumeAll+0x2c>
	__asm volatile
 800d302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	603b      	str	r3, [r7, #0]
}
 800d314:	bf00      	nop
 800d316:	e7fe      	b.n	800d316 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d318:	f001 fafc 	bl	800e914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d31c:	4b39      	ldr	r3, [pc, #228]	; (800d404 <xTaskResumeAll+0x118>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3b01      	subs	r3, #1
 800d322:	4a38      	ldr	r2, [pc, #224]	; (800d404 <xTaskResumeAll+0x118>)
 800d324:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d326:	4b37      	ldr	r3, [pc, #220]	; (800d404 <xTaskResumeAll+0x118>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d162      	bne.n	800d3f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d32e:	4b36      	ldr	r3, [pc, #216]	; (800d408 <xTaskResumeAll+0x11c>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d05e      	beq.n	800d3f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d336:	e02f      	b.n	800d398 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d338:	4b34      	ldr	r3, [pc, #208]	; (800d40c <xTaskResumeAll+0x120>)
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	3318      	adds	r3, #24
 800d344:	4618      	mov	r0, r3
 800d346:	f7fe fcd1 	bl	800bcec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	3304      	adds	r3, #4
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fe fccc 	bl	800bcec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d358:	4b2d      	ldr	r3, [pc, #180]	; (800d410 <xTaskResumeAll+0x124>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d903      	bls.n	800d368 <xTaskResumeAll+0x7c>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	4a2a      	ldr	r2, [pc, #168]	; (800d410 <xTaskResumeAll+0x124>)
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4a27      	ldr	r2, [pc, #156]	; (800d414 <xTaskResumeAll+0x128>)
 800d376:	441a      	add	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	3304      	adds	r3, #4
 800d37c:	4619      	mov	r1, r3
 800d37e:	4610      	mov	r0, r2
 800d380:	f7fe fc57 	bl	800bc32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d388:	4b23      	ldr	r3, [pc, #140]	; (800d418 <xTaskResumeAll+0x12c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38e:	429a      	cmp	r2, r3
 800d390:	d302      	bcc.n	800d398 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d392:	4b22      	ldr	r3, [pc, #136]	; (800d41c <xTaskResumeAll+0x130>)
 800d394:	2201      	movs	r2, #1
 800d396:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d398:	4b1c      	ldr	r3, [pc, #112]	; (800d40c <xTaskResumeAll+0x120>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1cb      	bne.n	800d338 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d001      	beq.n	800d3aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d3a6:	f000 fc05 	bl	800dbb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d3aa:	4b1d      	ldr	r3, [pc, #116]	; (800d420 <xTaskResumeAll+0x134>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d010      	beq.n	800d3d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d3b6:	f000 f859 	bl	800d46c <xTaskIncrementTick>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d3c0:	4b16      	ldr	r3, [pc, #88]	; (800d41c <xTaskResumeAll+0x130>)
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1f1      	bne.n	800d3b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d3d2:	4b13      	ldr	r3, [pc, #76]	; (800d420 <xTaskResumeAll+0x134>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3d8:	4b10      	ldr	r3, [pc, #64]	; (800d41c <xTaskResumeAll+0x130>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d009      	beq.n	800d3f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3e4:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <xTaskResumeAll+0x138>)
 800d3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3f4:	f001 fabe 	bl	800e974 <vPortExitCritical>

	return xAlreadyYielded;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20000d30 	.word	0x20000d30
 800d408:	20000d08 	.word	0x20000d08
 800d40c:	20000cc8 	.word	0x20000cc8
 800d410:	20000d10 	.word	0x20000d10
 800d414:	20000838 	.word	0x20000838
 800d418:	20000834 	.word	0x20000834
 800d41c:	20000d1c 	.word	0x20000d1c
 800d420:	20000d18 	.word	0x20000d18
 800d424:	e000ed04 	.word	0xe000ed04

0800d428 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d42e:	4b05      	ldr	r3, [pc, #20]	; (800d444 <xTaskGetTickCount+0x1c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d434:	687b      	ldr	r3, [r7, #4]
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	20000d0c 	.word	0x20000d0c

0800d448 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d44e:	f001 fb43 	bl	800ead8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d452:	2300      	movs	r3, #0
 800d454:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d456:	4b04      	ldr	r3, [pc, #16]	; (800d468 <xTaskGetTickCountFromISR+0x20>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d45c:	683b      	ldr	r3, [r7, #0]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000d0c 	.word	0x20000d0c

0800d46c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d476:	4b4f      	ldr	r3, [pc, #316]	; (800d5b4 <xTaskIncrementTick+0x148>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 808f 	bne.w	800d59e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d480:	4b4d      	ldr	r3, [pc, #308]	; (800d5b8 <xTaskIncrementTick+0x14c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d488:	4a4b      	ldr	r2, [pc, #300]	; (800d5b8 <xTaskIncrementTick+0x14c>)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d120      	bne.n	800d4d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d494:	4b49      	ldr	r3, [pc, #292]	; (800d5bc <xTaskIncrementTick+0x150>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00a      	beq.n	800d4b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	603b      	str	r3, [r7, #0]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <xTaskIncrementTick+0x46>
 800d4b4:	4b41      	ldr	r3, [pc, #260]	; (800d5bc <xTaskIncrementTick+0x150>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	4b41      	ldr	r3, [pc, #260]	; (800d5c0 <xTaskIncrementTick+0x154>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4a3f      	ldr	r2, [pc, #252]	; (800d5bc <xTaskIncrementTick+0x150>)
 800d4c0:	6013      	str	r3, [r2, #0]
 800d4c2:	4a3f      	ldr	r2, [pc, #252]	; (800d5c0 <xTaskIncrementTick+0x154>)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	4b3e      	ldr	r3, [pc, #248]	; (800d5c4 <xTaskIncrementTick+0x158>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	4a3d      	ldr	r2, [pc, #244]	; (800d5c4 <xTaskIncrementTick+0x158>)
 800d4d0:	6013      	str	r3, [r2, #0]
 800d4d2:	f000 fb6f 	bl	800dbb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4d6:	4b3c      	ldr	r3, [pc, #240]	; (800d5c8 <xTaskIncrementTick+0x15c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	693a      	ldr	r2, [r7, #16]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d349      	bcc.n	800d574 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4e0:	4b36      	ldr	r3, [pc, #216]	; (800d5bc <xTaskIncrementTick+0x150>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d104      	bne.n	800d4f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ea:	4b37      	ldr	r3, [pc, #220]	; (800d5c8 <xTaskIncrementTick+0x15c>)
 800d4ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4f0:	601a      	str	r2, [r3, #0]
					break;
 800d4f2:	e03f      	b.n	800d574 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f4:	4b31      	ldr	r3, [pc, #196]	; (800d5bc <xTaskIncrementTick+0x150>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68db      	ldr	r3, [r3, #12]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d504:	693a      	ldr	r2, [r7, #16]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d203      	bcs.n	800d514 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d50c:	4a2e      	ldr	r2, [pc, #184]	; (800d5c8 <xTaskIncrementTick+0x15c>)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d512:	e02f      	b.n	800d574 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	3304      	adds	r3, #4
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fe fbe7 	bl	800bcec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d522:	2b00      	cmp	r3, #0
 800d524:	d004      	beq.n	800d530 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	3318      	adds	r3, #24
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe fbde 	bl	800bcec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d534:	4b25      	ldr	r3, [pc, #148]	; (800d5cc <xTaskIncrementTick+0x160>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d903      	bls.n	800d544 <xTaskIncrementTick+0xd8>
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	4a22      	ldr	r2, [pc, #136]	; (800d5cc <xTaskIncrementTick+0x160>)
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d548:	4613      	mov	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4a1f      	ldr	r2, [pc, #124]	; (800d5d0 <xTaskIncrementTick+0x164>)
 800d552:	441a      	add	r2, r3
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	3304      	adds	r3, #4
 800d558:	4619      	mov	r1, r3
 800d55a:	4610      	mov	r0, r2
 800d55c:	f7fe fb69 	bl	800bc32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d564:	4b1b      	ldr	r3, [pc, #108]	; (800d5d4 <xTaskIncrementTick+0x168>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d3b8      	bcc.n	800d4e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d56e:	2301      	movs	r3, #1
 800d570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d572:	e7b5      	b.n	800d4e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d574:	4b17      	ldr	r3, [pc, #92]	; (800d5d4 <xTaskIncrementTick+0x168>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57a:	4915      	ldr	r1, [pc, #84]	; (800d5d0 <xTaskIncrementTick+0x164>)
 800d57c:	4613      	mov	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4413      	add	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	440b      	add	r3, r1
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d901      	bls.n	800d590 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d58c:	2301      	movs	r3, #1
 800d58e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d590:	4b11      	ldr	r3, [pc, #68]	; (800d5d8 <xTaskIncrementTick+0x16c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]
 800d59c:	e004      	b.n	800d5a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d59e:	4b0f      	ldr	r3, [pc, #60]	; (800d5dc <xTaskIncrementTick+0x170>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	4a0d      	ldr	r2, [pc, #52]	; (800d5dc <xTaskIncrementTick+0x170>)
 800d5a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5a8:	697b      	ldr	r3, [r7, #20]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	20000d30 	.word	0x20000d30
 800d5b8:	20000d0c 	.word	0x20000d0c
 800d5bc:	20000cc0 	.word	0x20000cc0
 800d5c0:	20000cc4 	.word	0x20000cc4
 800d5c4:	20000d20 	.word	0x20000d20
 800d5c8:	20000d28 	.word	0x20000d28
 800d5cc:	20000d10 	.word	0x20000d10
 800d5d0:	20000838 	.word	0x20000838
 800d5d4:	20000834 	.word	0x20000834
 800d5d8:	20000d1c 	.word	0x20000d1c
 800d5dc:	20000d18 	.word	0x20000d18

0800d5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5e6:	4b28      	ldr	r3, [pc, #160]	; (800d688 <vTaskSwitchContext+0xa8>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5ee:	4b27      	ldr	r3, [pc, #156]	; (800d68c <vTaskSwitchContext+0xac>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5f4:	e041      	b.n	800d67a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d5f6:	4b25      	ldr	r3, [pc, #148]	; (800d68c <vTaskSwitchContext+0xac>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5fc:	4b24      	ldr	r3, [pc, #144]	; (800d690 <vTaskSwitchContext+0xb0>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	e010      	b.n	800d626 <vTaskSwitchContext+0x46>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10a      	bne.n	800d620 <vTaskSwitchContext+0x40>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	607b      	str	r3, [r7, #4]
}
 800d61c:	bf00      	nop
 800d61e:	e7fe      	b.n	800d61e <vTaskSwitchContext+0x3e>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3b01      	subs	r3, #1
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	491b      	ldr	r1, [pc, #108]	; (800d694 <vTaskSwitchContext+0xb4>)
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	4613      	mov	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	440b      	add	r3, r1
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0e4      	beq.n	800d604 <vTaskSwitchContext+0x24>
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	4613      	mov	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4a13      	ldr	r2, [pc, #76]	; (800d694 <vTaskSwitchContext+0xb4>)
 800d646:	4413      	add	r3, r2
 800d648:	60bb      	str	r3, [r7, #8]
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	605a      	str	r2, [r3, #4]
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	3308      	adds	r3, #8
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d104      	bne.n	800d66a <vTaskSwitchContext+0x8a>
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	605a      	str	r2, [r3, #4]
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	4a09      	ldr	r2, [pc, #36]	; (800d698 <vTaskSwitchContext+0xb8>)
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	4a06      	ldr	r2, [pc, #24]	; (800d690 <vTaskSwitchContext+0xb0>)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6013      	str	r3, [r2, #0]
}
 800d67a:	bf00      	nop
 800d67c:	3714      	adds	r7, #20
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	20000d30 	.word	0x20000d30
 800d68c:	20000d1c 	.word	0x20000d1c
 800d690:	20000d10 	.word	0x20000d10
 800d694:	20000838 	.word	0x20000838
 800d698:	20000834 	.word	0x20000834

0800d69c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d10a      	bne.n	800d6c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	60fb      	str	r3, [r7, #12]
}
 800d6be:	bf00      	nop
 800d6c0:	e7fe      	b.n	800d6c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6c2:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <vTaskPlaceOnEventList+0x44>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3318      	adds	r3, #24
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7fe fad5 	bl	800bc7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	6838      	ldr	r0, [r7, #0]
 800d6d4:	f000 fc30 	bl	800df38 <prvAddCurrentTaskToDelayedList>
}
 800d6d8:	bf00      	nop
 800d6da:	3710      	adds	r7, #16
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20000834 	.word	0x20000834

0800d6e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10a      	bne.n	800d70c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	617b      	str	r3, [r7, #20]
}
 800d708:	bf00      	nop
 800d70a:	e7fe      	b.n	800d70a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800d70c:	4b11      	ldr	r3, [pc, #68]	; (800d754 <vTaskPlaceOnUnorderedEventList+0x70>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10a      	bne.n	800d72a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	613b      	str	r3, [r7, #16]
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d72a:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800d734:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d736:	4b08      	ldr	r3, [pc, #32]	; (800d758 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3318      	adds	r3, #24
 800d73c:	4619      	mov	r1, r3
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f7fe fa77 	bl	800bc32 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d744:	2101      	movs	r1, #1
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fbf6 	bl	800df38 <prvAddCurrentTaskToDelayedList>
}
 800d74c:	bf00      	nop
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20000d30 	.word	0x20000d30
 800d758:	20000834 	.word	0x20000834

0800d75c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10a      	bne.n	800d784 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	617b      	str	r3, [r7, #20]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d784:	4b0a      	ldr	r3, [pc, #40]	; (800d7b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	3318      	adds	r3, #24
 800d78a:	4619      	mov	r1, r3
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f7fe fa50 	bl	800bc32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d79c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d79e:	6879      	ldr	r1, [r7, #4]
 800d7a0:	68b8      	ldr	r0, [r7, #8]
 800d7a2:	f000 fbc9 	bl	800df38 <prvAddCurrentTaskToDelayedList>
	}
 800d7a6:	bf00      	nop
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	20000834 	.word	0x20000834

0800d7b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10a      	bne.n	800d7e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ce:	f383 8811 	msr	BASEPRI, r3
 800d7d2:	f3bf 8f6f 	isb	sy
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	60fb      	str	r3, [r7, #12]
}
 800d7dc:	bf00      	nop
 800d7de:	e7fe      	b.n	800d7de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	3318      	adds	r3, #24
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe fa81 	bl	800bcec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ea:	4b1e      	ldr	r3, [pc, #120]	; (800d864 <xTaskRemoveFromEventList+0xb0>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d11d      	bne.n	800d82e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fe fa78 	bl	800bcec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d800:	4b19      	ldr	r3, [pc, #100]	; (800d868 <xTaskRemoveFromEventList+0xb4>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	429a      	cmp	r2, r3
 800d806:	d903      	bls.n	800d810 <xTaskRemoveFromEventList+0x5c>
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	4a16      	ldr	r2, [pc, #88]	; (800d868 <xTaskRemoveFromEventList+0xb4>)
 800d80e:	6013      	str	r3, [r2, #0]
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d814:	4613      	mov	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4413      	add	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4a13      	ldr	r2, [pc, #76]	; (800d86c <xTaskRemoveFromEventList+0xb8>)
 800d81e:	441a      	add	r2, r3
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	3304      	adds	r3, #4
 800d824:	4619      	mov	r1, r3
 800d826:	4610      	mov	r0, r2
 800d828:	f7fe fa03 	bl	800bc32 <vListInsertEnd>
 800d82c:	e005      	b.n	800d83a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	3318      	adds	r3, #24
 800d832:	4619      	mov	r1, r3
 800d834:	480e      	ldr	r0, [pc, #56]	; (800d870 <xTaskRemoveFromEventList+0xbc>)
 800d836:	f7fe f9fc 	bl	800bc32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83e:	4b0d      	ldr	r3, [pc, #52]	; (800d874 <xTaskRemoveFromEventList+0xc0>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d844:	429a      	cmp	r2, r3
 800d846:	d905      	bls.n	800d854 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d848:	2301      	movs	r3, #1
 800d84a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d84c:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <xTaskRemoveFromEventList+0xc4>)
 800d84e:	2201      	movs	r2, #1
 800d850:	601a      	str	r2, [r3, #0]
 800d852:	e001      	b.n	800d858 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d854:	2300      	movs	r3, #0
 800d856:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d858:	697b      	ldr	r3, [r7, #20]
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3718      	adds	r7, #24
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	20000d30 	.word	0x20000d30
 800d868:	20000d10 	.word	0x20000d10
 800d86c:	20000838 	.word	0x20000838
 800d870:	20000cc8 	.word	0x20000cc8
 800d874:	20000834 	.word	0x20000834
 800d878:	20000d1c 	.word	0x20000d1c

0800d87c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800d886:	4b29      	ldr	r3, [pc, #164]	; (800d92c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10a      	bne.n	800d8a4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	613b      	str	r3, [r7, #16]
}
 800d8a0:	bf00      	nop
 800d8a2:	e7fe      	b.n	800d8a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10a      	bne.n	800d8d0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	60fb      	str	r3, [r7, #12]
}
 800d8cc:	bf00      	nop
 800d8ce:	e7fe      	b.n	800d8ce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7fe fa0b 	bl	800bcec <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe fa06 	bl	800bcec <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e4:	4b12      	ldr	r3, [pc, #72]	; (800d930 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d903      	bls.n	800d8f4 <vTaskRemoveFromUnorderedEventList+0x78>
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f0:	4a0f      	ldr	r2, [pc, #60]	; (800d930 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800d8f2:	6013      	str	r3, [r2, #0]
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4413      	add	r3, r2
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	4a0c      	ldr	r2, [pc, #48]	; (800d934 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800d902:	441a      	add	r2, r3
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	3304      	adds	r3, #4
 800d908:	4619      	mov	r1, r3
 800d90a:	4610      	mov	r0, r2
 800d90c:	f7fe f991 	bl	800bc32 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	4b08      	ldr	r3, [pc, #32]	; (800d938 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d902      	bls.n	800d924 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800d91e:	4b07      	ldr	r3, [pc, #28]	; (800d93c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800d920:	2201      	movs	r2, #1
 800d922:	601a      	str	r2, [r3, #0]
	}
}
 800d924:	bf00      	nop
 800d926:	3718      	adds	r7, #24
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	20000d30 	.word	0x20000d30
 800d930:	20000d10 	.word	0x20000d10
 800d934:	20000838 	.word	0x20000838
 800d938:	20000834 	.word	0x20000834
 800d93c:	20000d1c 	.word	0x20000d1c

0800d940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d948:	4b06      	ldr	r3, [pc, #24]	; (800d964 <vTaskInternalSetTimeOutState+0x24>)
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d950:	4b05      	ldr	r3, [pc, #20]	; (800d968 <vTaskInternalSetTimeOutState+0x28>)
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	605a      	str	r2, [r3, #4]
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	20000d20 	.word	0x20000d20
 800d968:	20000d0c 	.word	0x20000d0c

0800d96c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b088      	sub	sp, #32
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10a      	bne.n	800d992 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	613b      	str	r3, [r7, #16]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d10a      	bne.n	800d9ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	60fb      	str	r3, [r7, #12]
}
 800d9aa:	bf00      	nop
 800d9ac:	e7fe      	b.n	800d9ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d9ae:	f000 ffb1 	bl	800e914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d9b2:	4b1d      	ldr	r3, [pc, #116]	; (800da28 <xTaskCheckForTimeOut+0xbc>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	69ba      	ldr	r2, [r7, #24]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9ca:	d102      	bne.n	800d9d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61fb      	str	r3, [r7, #28]
 800d9d0:	e023      	b.n	800da1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <xTaskCheckForTimeOut+0xc0>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d007      	beq.n	800d9ee <xTaskCheckForTimeOut+0x82>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	69ba      	ldr	r2, [r7, #24]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d302      	bcc.n	800d9ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	61fb      	str	r3, [r7, #28]
 800d9ec:	e015      	b.n	800da1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d20b      	bcs.n	800da10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	1ad2      	subs	r2, r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff ff9b 	bl	800d940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da0a:	2300      	movs	r3, #0
 800da0c:	61fb      	str	r3, [r7, #28]
 800da0e:	e004      	b.n	800da1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	2200      	movs	r2, #0
 800da14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da16:	2301      	movs	r3, #1
 800da18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da1a:	f000 ffab 	bl	800e974 <vPortExitCritical>

	return xReturn;
 800da1e:	69fb      	ldr	r3, [r7, #28]
}
 800da20:	4618      	mov	r0, r3
 800da22:	3720      	adds	r7, #32
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	20000d0c 	.word	0x20000d0c
 800da2c:	20000d20 	.word	0x20000d20

0800da30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da30:	b480      	push	{r7}
 800da32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da34:	4b03      	ldr	r3, [pc, #12]	; (800da44 <vTaskMissedYield+0x14>)
 800da36:	2201      	movs	r2, #1
 800da38:	601a      	str	r2, [r3, #0]
}
 800da3a:	bf00      	nop
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr
 800da44:	20000d1c 	.word	0x20000d1c

0800da48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800da50:	f000 f852 	bl	800daf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800da54:	4b06      	ldr	r3, [pc, #24]	; (800da70 <prvIdleTask+0x28>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d9f9      	bls.n	800da50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <prvIdleTask+0x2c>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800da6c:	e7f0      	b.n	800da50 <prvIdleTask+0x8>
 800da6e:	bf00      	nop
 800da70:	20000838 	.word	0x20000838
 800da74:	e000ed04 	.word	0xe000ed04

0800da78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da7e:	2300      	movs	r3, #0
 800da80:	607b      	str	r3, [r7, #4]
 800da82:	e00c      	b.n	800da9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	4613      	mov	r3, r2
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	4413      	add	r3, r2
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4a12      	ldr	r2, [pc, #72]	; (800dad8 <prvInitialiseTaskLists+0x60>)
 800da90:	4413      	add	r3, r2
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe f8a0 	bl	800bbd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	3301      	adds	r3, #1
 800da9c:	607b      	str	r3, [r7, #4]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2b37      	cmp	r3, #55	; 0x37
 800daa2:	d9ef      	bls.n	800da84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800daa4:	480d      	ldr	r0, [pc, #52]	; (800dadc <prvInitialiseTaskLists+0x64>)
 800daa6:	f7fe f897 	bl	800bbd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800daaa:	480d      	ldr	r0, [pc, #52]	; (800dae0 <prvInitialiseTaskLists+0x68>)
 800daac:	f7fe f894 	bl	800bbd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dab0:	480c      	ldr	r0, [pc, #48]	; (800dae4 <prvInitialiseTaskLists+0x6c>)
 800dab2:	f7fe f891 	bl	800bbd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dab6:	480c      	ldr	r0, [pc, #48]	; (800dae8 <prvInitialiseTaskLists+0x70>)
 800dab8:	f7fe f88e 	bl	800bbd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dabc:	480b      	ldr	r0, [pc, #44]	; (800daec <prvInitialiseTaskLists+0x74>)
 800dabe:	f7fe f88b 	bl	800bbd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dac2:	4b0b      	ldr	r3, [pc, #44]	; (800daf0 <prvInitialiseTaskLists+0x78>)
 800dac4:	4a05      	ldr	r2, [pc, #20]	; (800dadc <prvInitialiseTaskLists+0x64>)
 800dac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dac8:	4b0a      	ldr	r3, [pc, #40]	; (800daf4 <prvInitialiseTaskLists+0x7c>)
 800daca:	4a05      	ldr	r2, [pc, #20]	; (800dae0 <prvInitialiseTaskLists+0x68>)
 800dacc:	601a      	str	r2, [r3, #0]
}
 800dace:	bf00      	nop
 800dad0:	3708      	adds	r7, #8
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	20000838 	.word	0x20000838
 800dadc:	20000c98 	.word	0x20000c98
 800dae0:	20000cac 	.word	0x20000cac
 800dae4:	20000cc8 	.word	0x20000cc8
 800dae8:	20000cdc 	.word	0x20000cdc
 800daec:	20000cf4 	.word	0x20000cf4
 800daf0:	20000cc0 	.word	0x20000cc0
 800daf4:	20000cc4 	.word	0x20000cc4

0800daf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dafe:	e019      	b.n	800db34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800db00:	f000 ff08 	bl	800e914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db04:	4b10      	ldr	r3, [pc, #64]	; (800db48 <prvCheckTasksWaitingTermination+0x50>)
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3304      	adds	r3, #4
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe f8eb 	bl	800bcec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800db16:	4b0d      	ldr	r3, [pc, #52]	; (800db4c <prvCheckTasksWaitingTermination+0x54>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	4a0b      	ldr	r2, [pc, #44]	; (800db4c <prvCheckTasksWaitingTermination+0x54>)
 800db1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800db20:	4b0b      	ldr	r3, [pc, #44]	; (800db50 <prvCheckTasksWaitingTermination+0x58>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3b01      	subs	r3, #1
 800db26:	4a0a      	ldr	r2, [pc, #40]	; (800db50 <prvCheckTasksWaitingTermination+0x58>)
 800db28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800db2a:	f000 ff23 	bl	800e974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f810 	bl	800db54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800db34:	4b06      	ldr	r3, [pc, #24]	; (800db50 <prvCheckTasksWaitingTermination+0x58>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e1      	bne.n	800db00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800db3c:	bf00      	nop
 800db3e:	bf00      	nop
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	20000cdc 	.word	0x20000cdc
 800db4c:	20000d08 	.word	0x20000d08
 800db50:	20000cf0 	.word	0x20000cf0

0800db54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800db62:	2b00      	cmp	r3, #0
 800db64:	d108      	bne.n	800db78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db6a:	4618      	mov	r0, r3
 800db6c:	f001 f8c0 	bl	800ecf0 <vPortFree>
				vPortFree( pxTCB );
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f001 f8bd 	bl	800ecf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800db76:	e018      	b.n	800dbaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d103      	bne.n	800db8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f001 f8b4 	bl	800ecf0 <vPortFree>
	}
 800db88:	e00f      	b.n	800dbaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800db90:	2b02      	cmp	r3, #2
 800db92:	d00a      	beq.n	800dbaa <prvDeleteTCB+0x56>
	__asm volatile
 800db94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	60fb      	str	r3, [r7, #12]
}
 800dba6:	bf00      	nop
 800dba8:	e7fe      	b.n	800dba8 <prvDeleteTCB+0x54>
	}
 800dbaa:	bf00      	nop
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbba:	4b0c      	ldr	r3, [pc, #48]	; (800dbec <prvResetNextTaskUnblockTime+0x38>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d104      	bne.n	800dbce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dbc4:	4b0a      	ldr	r3, [pc, #40]	; (800dbf0 <prvResetNextTaskUnblockTime+0x3c>)
 800dbc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dbcc:	e008      	b.n	800dbe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbce:	4b07      	ldr	r3, [pc, #28]	; (800dbec <prvResetNextTaskUnblockTime+0x38>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	4a04      	ldr	r2, [pc, #16]	; (800dbf0 <prvResetNextTaskUnblockTime+0x3c>)
 800dbde:	6013      	str	r3, [r2, #0]
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr
 800dbec:	20000cc0 	.word	0x20000cc0
 800dbf0:	20000d28 	.word	0x20000d28

0800dbf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dbfa:	4b0b      	ldr	r3, [pc, #44]	; (800dc28 <xTaskGetSchedulerState+0x34>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dc02:	2301      	movs	r3, #1
 800dc04:	607b      	str	r3, [r7, #4]
 800dc06:	e008      	b.n	800dc1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc08:	4b08      	ldr	r3, [pc, #32]	; (800dc2c <xTaskGetSchedulerState+0x38>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d102      	bne.n	800dc16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dc10:	2302      	movs	r3, #2
 800dc12:	607b      	str	r3, [r7, #4]
 800dc14:	e001      	b.n	800dc1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dc16:	2300      	movs	r3, #0
 800dc18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dc1a:	687b      	ldr	r3, [r7, #4]
	}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	20000d14 	.word	0x20000d14
 800dc2c:	20000d30 	.word	0x20000d30

0800dc30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d051      	beq.n	800dcea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4a:	4b2a      	ldr	r3, [pc, #168]	; (800dcf4 <xTaskPriorityInherit+0xc4>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d241      	bcs.n	800dcd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	db06      	blt.n	800dc6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc5c:	4b25      	ldr	r3, [pc, #148]	; (800dcf4 <xTaskPriorityInherit+0xc4>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	6959      	ldr	r1, [r3, #20]
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc72:	4613      	mov	r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4a1f      	ldr	r2, [pc, #124]	; (800dcf8 <xTaskPriorityInherit+0xc8>)
 800dc7c:	4413      	add	r3, r2
 800dc7e:	4299      	cmp	r1, r3
 800dc80:	d122      	bne.n	800dcc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	3304      	adds	r3, #4
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe f830 	bl	800bcec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc8c:	4b19      	ldr	r3, [pc, #100]	; (800dcf4 <xTaskPriorityInherit+0xc4>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9a:	4b18      	ldr	r3, [pc, #96]	; (800dcfc <xTaskPriorityInherit+0xcc>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d903      	bls.n	800dcaa <xTaskPriorityInherit+0x7a>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca6:	4a15      	ldr	r2, [pc, #84]	; (800dcfc <xTaskPriorityInherit+0xcc>)
 800dca8:	6013      	str	r3, [r2, #0]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcae:	4613      	mov	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4413      	add	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4a10      	ldr	r2, [pc, #64]	; (800dcf8 <xTaskPriorityInherit+0xc8>)
 800dcb8:	441a      	add	r2, r3
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	f7fd ffb6 	bl	800bc32 <vListInsertEnd>
 800dcc6:	e004      	b.n	800dcd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <xTaskPriorityInherit+0xc4>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	60fb      	str	r3, [r7, #12]
 800dcd6:	e008      	b.n	800dcea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dcdc:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <xTaskPriorityInherit+0xc4>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d201      	bcs.n	800dcea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dce6:	2301      	movs	r3, #1
 800dce8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcea:	68fb      	ldr	r3, [r7, #12]
	}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3710      	adds	r7, #16
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	20000834 	.word	0x20000834
 800dcf8:	20000838 	.word	0x20000838
 800dcfc:	20000d10 	.word	0x20000d10

0800dd00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d056      	beq.n	800ddc4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dd16:	4b2e      	ldr	r3, [pc, #184]	; (800ddd0 <xTaskPriorityDisinherit+0xd0>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d00a      	beq.n	800dd36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	60fb      	str	r3, [r7, #12]
}
 800dd32:	bf00      	nop
 800dd34:	e7fe      	b.n	800dd34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	60bb      	str	r3, [r7, #8]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd58:	1e5a      	subs	r2, r3, #1
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d02c      	beq.n	800ddc4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d128      	bne.n	800ddc4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	3304      	adds	r3, #4
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fd ffb8 	bl	800bcec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <xTaskPriorityDisinherit+0xd4>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d903      	bls.n	800dda4 <xTaskPriorityDisinherit+0xa4>
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	4a0c      	ldr	r2, [pc, #48]	; (800ddd4 <xTaskPriorityDisinherit+0xd4>)
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4a09      	ldr	r2, [pc, #36]	; (800ddd8 <xTaskPriorityDisinherit+0xd8>)
 800ddb2:	441a      	add	r2, r3
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	4619      	mov	r1, r3
 800ddba:	4610      	mov	r0, r2
 800ddbc:	f7fd ff39 	bl	800bc32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddc4:	697b      	ldr	r3, [r7, #20]
	}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3718      	adds	r7, #24
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	20000834 	.word	0x20000834
 800ddd4:	20000d10 	.word	0x20000d10
 800ddd8:	20000838 	.word	0x20000838

0800dddc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b088      	sub	sp, #32
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddea:	2301      	movs	r3, #1
 800ddec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d06a      	beq.n	800deca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10a      	bne.n	800de12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	60fb      	str	r3, [r7, #12]
}
 800de0e:	bf00      	nop
 800de10:	e7fe      	b.n	800de10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d902      	bls.n	800de22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	61fb      	str	r3, [r7, #28]
 800de20:	e002      	b.n	800de28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	69fa      	ldr	r2, [r7, #28]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d04b      	beq.n	800deca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de36:	697a      	ldr	r2, [r7, #20]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d146      	bne.n	800deca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de3c:	4b25      	ldr	r3, [pc, #148]	; (800ded4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	69ba      	ldr	r2, [r7, #24]
 800de42:	429a      	cmp	r2, r3
 800de44:	d10a      	bne.n	800de5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	60bb      	str	r3, [r7, #8]
}
 800de58:	bf00      	nop
 800de5a:	e7fe      	b.n	800de5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	69fa      	ldr	r2, [r7, #28]
 800de66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	db04      	blt.n	800de7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	6959      	ldr	r1, [r3, #20]
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	4613      	mov	r3, r2
 800de82:	009b      	lsls	r3, r3, #2
 800de84:	4413      	add	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4a13      	ldr	r2, [pc, #76]	; (800ded8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800de8a:	4413      	add	r3, r2
 800de8c:	4299      	cmp	r1, r3
 800de8e:	d11c      	bne.n	800deca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	3304      	adds	r3, #4
 800de94:	4618      	mov	r0, r3
 800de96:	f7fd ff29 	bl	800bcec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9e:	4b0f      	ldr	r3, [pc, #60]	; (800dedc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d903      	bls.n	800deae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deaa:	4a0c      	ldr	r2, [pc, #48]	; (800dedc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800deac:	6013      	str	r3, [r2, #0]
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb2:	4613      	mov	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4a07      	ldr	r2, [pc, #28]	; (800ded8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800debc:	441a      	add	r2, r3
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	3304      	adds	r3, #4
 800dec2:	4619      	mov	r1, r3
 800dec4:	4610      	mov	r0, r2
 800dec6:	f7fd feb4 	bl	800bc32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800deca:	bf00      	nop
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000834 	.word	0x20000834
 800ded8:	20000838 	.word	0x20000838
 800dedc:	20000d10 	.word	0x20000d10

0800dee0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800dee6:	4b09      	ldr	r3, [pc, #36]	; (800df0c <uxTaskResetEventItemValue+0x2c>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	699b      	ldr	r3, [r3, #24]
 800deec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deee:	4b07      	ldr	r3, [pc, #28]	; (800df0c <uxTaskResetEventItemValue+0x2c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def4:	4b05      	ldr	r3, [pc, #20]	; (800df0c <uxTaskResetEventItemValue+0x2c>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800defc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800defe:	687b      	ldr	r3, [r7, #4]
}
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	20000834 	.word	0x20000834

0800df10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800df10:	b480      	push	{r7}
 800df12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800df14:	4b07      	ldr	r3, [pc, #28]	; (800df34 <pvTaskIncrementMutexHeldCount+0x24>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800df1c:	4b05      	ldr	r3, [pc, #20]	; (800df34 <pvTaskIncrementMutexHeldCount+0x24>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df22:	3201      	adds	r2, #1
 800df24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800df26:	4b03      	ldr	r3, [pc, #12]	; (800df34 <pvTaskIncrementMutexHeldCount+0x24>)
 800df28:	681b      	ldr	r3, [r3, #0]
	}
 800df2a:	4618      	mov	r0, r3
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	20000834 	.word	0x20000834

0800df38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df42:	4b21      	ldr	r3, [pc, #132]	; (800dfc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df48:	4b20      	ldr	r3, [pc, #128]	; (800dfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3304      	adds	r3, #4
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fd fecc 	bl	800bcec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df5a:	d10a      	bne.n	800df72 <prvAddCurrentTaskToDelayedList+0x3a>
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d007      	beq.n	800df72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df62:	4b1a      	ldr	r3, [pc, #104]	; (800dfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3304      	adds	r3, #4
 800df68:	4619      	mov	r1, r3
 800df6a:	4819      	ldr	r0, [pc, #100]	; (800dfd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800df6c:	f7fd fe61 	bl	800bc32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df70:	e026      	b.n	800dfc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	4413      	add	r3, r2
 800df78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df7a:	4b14      	ldr	r3, [pc, #80]	; (800dfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	429a      	cmp	r2, r3
 800df88:	d209      	bcs.n	800df9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df8a:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	3304      	adds	r3, #4
 800df94:	4619      	mov	r1, r3
 800df96:	4610      	mov	r0, r2
 800df98:	f7fd fe6f 	bl	800bc7a <vListInsert>
}
 800df9c:	e010      	b.n	800dfc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df9e:	4b0e      	ldr	r3, [pc, #56]	; (800dfd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <prvAddCurrentTaskToDelayedList+0x94>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	4610      	mov	r0, r2
 800dfac:	f7fd fe65 	bl	800bc7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dfb0:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d202      	bcs.n	800dfc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dfba:	4a08      	ldr	r2, [pc, #32]	; (800dfdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	6013      	str	r3, [r2, #0]
}
 800dfc0:	bf00      	nop
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	20000d0c 	.word	0x20000d0c
 800dfcc:	20000834 	.word	0x20000834
 800dfd0:	20000cf4 	.word	0x20000cf4
 800dfd4:	20000cc4 	.word	0x20000cc4
 800dfd8:	20000cc0 	.word	0x20000cc0
 800dfdc:	20000d28 	.word	0x20000d28

0800dfe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08a      	sub	sp, #40	; 0x28
 800dfe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dfea:	f000 fb07 	bl	800e5fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dfee:	4b1c      	ldr	r3, [pc, #112]	; (800e060 <xTimerCreateTimerTask+0x80>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d021      	beq.n	800e03a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dffa:	2300      	movs	r3, #0
 800dffc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dffe:	1d3a      	adds	r2, r7, #4
 800e000:	f107 0108 	add.w	r1, r7, #8
 800e004:	f107 030c 	add.w	r3, r7, #12
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fd fbdd 	bl	800b7c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	9202      	str	r2, [sp, #8]
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	2302      	movs	r3, #2
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	2300      	movs	r3, #0
 800e01e:	460a      	mov	r2, r1
 800e020:	4910      	ldr	r1, [pc, #64]	; (800e064 <xTimerCreateTimerTask+0x84>)
 800e022:	4811      	ldr	r0, [pc, #68]	; (800e068 <xTimerCreateTimerTask+0x88>)
 800e024:	f7fe fe9a 	bl	800cd5c <xTaskCreateStatic>
 800e028:	4603      	mov	r3, r0
 800e02a:	4a10      	ldr	r2, [pc, #64]	; (800e06c <xTimerCreateTimerTask+0x8c>)
 800e02c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e02e:	4b0f      	ldr	r3, [pc, #60]	; (800e06c <xTimerCreateTimerTask+0x8c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e036:	2301      	movs	r3, #1
 800e038:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	613b      	str	r3, [r7, #16]
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e056:	697b      	ldr	r3, [r7, #20]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	20000d64 	.word	0x20000d64
 800e064:	080102a8 	.word	0x080102a8
 800e068:	0800e1a5 	.word	0x0800e1a5
 800e06c:	20000d68 	.word	0x20000d68

0800e070 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08a      	sub	sp, #40	; 0x28
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
 800e07c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e07e:	2300      	movs	r3, #0
 800e080:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10a      	bne.n	800e09e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08c:	f383 8811 	msr	BASEPRI, r3
 800e090:	f3bf 8f6f 	isb	sy
 800e094:	f3bf 8f4f 	dsb	sy
 800e098:	623b      	str	r3, [r7, #32]
}
 800e09a:	bf00      	nop
 800e09c:	e7fe      	b.n	800e09c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e09e:	4b1a      	ldr	r3, [pc, #104]	; (800e108 <xTimerGenericCommand+0x98>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d02a      	beq.n	800e0fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b05      	cmp	r3, #5
 800e0b6:	dc18      	bgt.n	800e0ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e0b8:	f7ff fd9c 	bl	800dbf4 <xTaskGetSchedulerState>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d109      	bne.n	800e0d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e0c2:	4b11      	ldr	r3, [pc, #68]	; (800e108 <xTimerGenericCommand+0x98>)
 800e0c4:	6818      	ldr	r0, [r3, #0]
 800e0c6:	f107 0110 	add.w	r1, r7, #16
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ce:	f7fd ffdf 	bl	800c090 <xQueueGenericSend>
 800e0d2:	6278      	str	r0, [r7, #36]	; 0x24
 800e0d4:	e012      	b.n	800e0fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e0d6:	4b0c      	ldr	r3, [pc, #48]	; (800e108 <xTimerGenericCommand+0x98>)
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	f107 0110 	add.w	r1, r7, #16
 800e0de:	2300      	movs	r3, #0
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f7fd ffd5 	bl	800c090 <xQueueGenericSend>
 800e0e6:	6278      	str	r0, [r7, #36]	; 0x24
 800e0e8:	e008      	b.n	800e0fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e0ea:	4b07      	ldr	r3, [pc, #28]	; (800e108 <xTimerGenericCommand+0x98>)
 800e0ec:	6818      	ldr	r0, [r3, #0]
 800e0ee:	f107 0110 	add.w	r1, r7, #16
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	f7fe f8c9 	bl	800c28c <xQueueGenericSendFromISR>
 800e0fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3728      	adds	r7, #40	; 0x28
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20000d64 	.word	0x20000d64

0800e10c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b088      	sub	sp, #32
 800e110:	af02      	add	r7, sp, #8
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e116:	4b22      	ldr	r3, [pc, #136]	; (800e1a0 <prvProcessExpiredTimer+0x94>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	3304      	adds	r3, #4
 800e124:	4618      	mov	r0, r3
 800e126:	f7fd fde1 	bl	800bcec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	2b00      	cmp	r3, #0
 800e136:	d022      	beq.n	800e17e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	699a      	ldr	r2, [r3, #24]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	18d1      	adds	r1, r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	6978      	ldr	r0, [r7, #20]
 800e146:	f000 f8d1 	bl	800e2ec <prvInsertTimerInActiveList>
 800e14a:	4603      	mov	r3, r0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d01f      	beq.n	800e190 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e150:	2300      	movs	r3, #0
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	2300      	movs	r3, #0
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	2100      	movs	r1, #0
 800e15a:	6978      	ldr	r0, [r7, #20]
 800e15c:	f7ff ff88 	bl	800e070 <xTimerGenericCommand>
 800e160:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d113      	bne.n	800e190 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	60fb      	str	r3, [r7, #12]
}
 800e17a:	bf00      	nop
 800e17c:	e7fe      	b.n	800e17c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e184:	f023 0301 	bic.w	r3, r3, #1
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	6978      	ldr	r0, [r7, #20]
 800e196:	4798      	blx	r3
}
 800e198:	bf00      	nop
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20000d5c 	.word	0x20000d5c

0800e1a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1ac:	f107 0308 	add.w	r3, r7, #8
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f000 f857 	bl	800e264 <prvGetNextExpireTime>
 800e1b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	f000 f803 	bl	800e1c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e1c2:	f000 f8d5 	bl	800e370 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1c6:	e7f1      	b.n	800e1ac <prvTimerTask+0x8>

0800e1c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e1d2:	f7ff f87d 	bl	800d2d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e1d6:	f107 0308 	add.w	r3, r7, #8
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 f866 	bl	800e2ac <prvSampleTimeNow>
 800e1e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d130      	bne.n	800e24a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10a      	bne.n	800e204 <prvProcessTimerOrBlockTask+0x3c>
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d806      	bhi.n	800e204 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e1f6:	f7ff f879 	bl	800d2ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e1fa:	68f9      	ldr	r1, [r7, #12]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff ff85 	bl	800e10c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e202:	e024      	b.n	800e24e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d008      	beq.n	800e21c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e20a:	4b13      	ldr	r3, [pc, #76]	; (800e258 <prvProcessTimerOrBlockTask+0x90>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d101      	bne.n	800e218 <prvProcessTimerOrBlockTask+0x50>
 800e214:	2301      	movs	r3, #1
 800e216:	e000      	b.n	800e21a <prvProcessTimerOrBlockTask+0x52>
 800e218:	2300      	movs	r3, #0
 800e21a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e21c:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <prvProcessTimerOrBlockTask+0x94>)
 800e21e:	6818      	ldr	r0, [r3, #0]
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	1ad3      	subs	r3, r2, r3
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	4619      	mov	r1, r3
 800e22a:	f7fe fd63 	bl	800ccf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e22e:	f7ff f85d 	bl	800d2ec <xTaskResumeAll>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10a      	bne.n	800e24e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <prvProcessTimerOrBlockTask+0x98>)
 800e23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	f3bf 8f6f 	isb	sy
}
 800e248:	e001      	b.n	800e24e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e24a:	f7ff f84f 	bl	800d2ec <xTaskResumeAll>
}
 800e24e:	bf00      	nop
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20000d60 	.word	0x20000d60
 800e25c:	20000d64 	.word	0x20000d64
 800e260:	e000ed04 	.word	0xe000ed04

0800e264 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e26c:	4b0e      	ldr	r3, [pc, #56]	; (800e2a8 <prvGetNextExpireTime+0x44>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <prvGetNextExpireTime+0x16>
 800e276:	2201      	movs	r2, #1
 800e278:	e000      	b.n	800e27c <prvGetNextExpireTime+0x18>
 800e27a:	2200      	movs	r2, #0
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d105      	bne.n	800e294 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e288:	4b07      	ldr	r3, [pc, #28]	; (800e2a8 <prvGetNextExpireTime+0x44>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	e001      	b.n	800e298 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e294:	2300      	movs	r3, #0
 800e296:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e298:	68fb      	ldr	r3, [r7, #12]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	20000d5c 	.word	0x20000d5c

0800e2ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e2b4:	f7ff f8b8 	bl	800d428 <xTaskGetTickCount>
 800e2b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e2ba:	4b0b      	ldr	r3, [pc, #44]	; (800e2e8 <prvSampleTimeNow+0x3c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d205      	bcs.n	800e2d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e2c4:	f000 f936 	bl	800e534 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	e002      	b.n	800e2d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e2d6:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <prvSampleTimeNow+0x3c>)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20000d6c 	.word	0x20000d6c

0800e2ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d812      	bhi.n	800e338 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	1ad2      	subs	r2, r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	699b      	ldr	r3, [r3, #24]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d302      	bcc.n	800e326 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e320:	2301      	movs	r3, #1
 800e322:	617b      	str	r3, [r7, #20]
 800e324:	e01b      	b.n	800e35e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e326:	4b10      	ldr	r3, [pc, #64]	; (800e368 <prvInsertTimerInActiveList+0x7c>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4619      	mov	r1, r3
 800e330:	4610      	mov	r0, r2
 800e332:	f7fd fca2 	bl	800bc7a <vListInsert>
 800e336:	e012      	b.n	800e35e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d206      	bcs.n	800e34e <prvInsertTimerInActiveList+0x62>
 800e340:	68ba      	ldr	r2, [r7, #8]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	429a      	cmp	r2, r3
 800e346:	d302      	bcc.n	800e34e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e348:	2301      	movs	r3, #1
 800e34a:	617b      	str	r3, [r7, #20]
 800e34c:	e007      	b.n	800e35e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e34e:	4b07      	ldr	r3, [pc, #28]	; (800e36c <prvInsertTimerInActiveList+0x80>)
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	3304      	adds	r3, #4
 800e356:	4619      	mov	r1, r3
 800e358:	4610      	mov	r0, r2
 800e35a:	f7fd fc8e 	bl	800bc7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e35e:	697b      	ldr	r3, [r7, #20]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000d60 	.word	0x20000d60
 800e36c:	20000d5c 	.word	0x20000d5c

0800e370 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08e      	sub	sp, #56	; 0x38
 800e374:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e376:	e0ca      	b.n	800e50e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	da18      	bge.n	800e3b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e37e:	1d3b      	adds	r3, r7, #4
 800e380:	3304      	adds	r3, #4
 800e382:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10a      	bne.n	800e3a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e38e:	f383 8811 	msr	BASEPRI, r3
 800e392:	f3bf 8f6f 	isb	sy
 800e396:	f3bf 8f4f 	dsb	sy
 800e39a:	61fb      	str	r3, [r7, #28]
}
 800e39c:	bf00      	nop
 800e39e:	e7fe      	b.n	800e39e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3a6:	6850      	ldr	r0, [r2, #4]
 800e3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3aa:	6892      	ldr	r2, [r2, #8]
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f2c0 80aa 	blt.w	800e50c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3be:	695b      	ldr	r3, [r3, #20]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d004      	beq.n	800e3ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	3304      	adds	r3, #4
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fd fc8f 	bl	800bcec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e3ce:	463b      	mov	r3, r7
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff ff6b 	bl	800e2ac <prvSampleTimeNow>
 800e3d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b09      	cmp	r3, #9
 800e3dc:	f200 8097 	bhi.w	800e50e <prvProcessReceivedCommands+0x19e>
 800e3e0:	a201      	add	r2, pc, #4	; (adr r2, 800e3e8 <prvProcessReceivedCommands+0x78>)
 800e3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e6:	bf00      	nop
 800e3e8:	0800e411 	.word	0x0800e411
 800e3ec:	0800e411 	.word	0x0800e411
 800e3f0:	0800e411 	.word	0x0800e411
 800e3f4:	0800e485 	.word	0x0800e485
 800e3f8:	0800e499 	.word	0x0800e499
 800e3fc:	0800e4e3 	.word	0x0800e4e3
 800e400:	0800e411 	.word	0x0800e411
 800e404:	0800e411 	.word	0x0800e411
 800e408:	0800e485 	.word	0x0800e485
 800e40c:	0800e499 	.word	0x0800e499
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e416:	f043 0301 	orr.w	r3, r3, #1
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	18d1      	adds	r1, r2, r3
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e42e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e430:	f7ff ff5c 	bl	800e2ec <prvInsertTimerInActiveList>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d069      	beq.n	800e50e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	6a1b      	ldr	r3, [r3, #32]
 800e43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e440:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e448:	f003 0304 	and.w	r3, r3, #4
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d05e      	beq.n	800e50e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	441a      	add	r2, r3
 800e458:	2300      	movs	r3, #0
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	2300      	movs	r3, #0
 800e45e:	2100      	movs	r1, #0
 800e460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e462:	f7ff fe05 	bl	800e070 <xTimerGenericCommand>
 800e466:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e468:	6a3b      	ldr	r3, [r7, #32]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d14f      	bne.n	800e50e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	61bb      	str	r3, [r7, #24]
}
 800e480:	bf00      	nop
 800e482:	e7fe      	b.n	800e482 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e48a:	f023 0301 	bic.w	r3, r3, #1
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e496:	e03a      	b.n	800e50e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e49e:	f043 0301 	orr.w	r3, r3, #1
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b2:	699b      	ldr	r3, [r3, #24]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10a      	bne.n	800e4ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	617b      	str	r3, [r7, #20]
}
 800e4ca:	bf00      	nop
 800e4cc:	e7fe      	b.n	800e4cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d0:	699a      	ldr	r2, [r3, #24]
 800e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d4:	18d1      	adds	r1, r2, r3
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4dc:	f7ff ff06 	bl	800e2ec <prvInsertTimerInActiveList>
					break;
 800e4e0:	e015      	b.n	800e50e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4e8:	f003 0302 	and.w	r3, r3, #2
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d103      	bne.n	800e4f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f2:	f000 fbfd 	bl	800ecf0 <vPortFree>
 800e4f6:	e00a      	b.n	800e50e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4fe:	f023 0301 	bic.w	r3, r3, #1
 800e502:	b2da      	uxtb	r2, r3
 800e504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e50a:	e000      	b.n	800e50e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e50c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e50e:	4b08      	ldr	r3, [pc, #32]	; (800e530 <prvProcessReceivedCommands+0x1c0>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	1d39      	adds	r1, r7, #4
 800e514:	2200      	movs	r2, #0
 800e516:	4618      	mov	r0, r3
 800e518:	f7fd ffe0 	bl	800c4dc <xQueueReceive>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f47f af2a 	bne.w	800e378 <prvProcessReceivedCommands+0x8>
	}
}
 800e524:	bf00      	nop
 800e526:	bf00      	nop
 800e528:	3730      	adds	r7, #48	; 0x30
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20000d64 	.word	0x20000d64

0800e534 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b088      	sub	sp, #32
 800e538:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e53a:	e048      	b.n	800e5ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e53c:	4b2d      	ldr	r3, [pc, #180]	; (800e5f4 <prvSwitchTimerLists+0xc0>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e546:	4b2b      	ldr	r3, [pc, #172]	; (800e5f4 <prvSwitchTimerLists+0xc0>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3304      	adds	r3, #4
 800e554:	4618      	mov	r0, r3
 800e556:	f7fd fbc9 	bl	800bcec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	68f8      	ldr	r0, [r7, #12]
 800e560:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e568:	f003 0304 	and.w	r3, r3, #4
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d02e      	beq.n	800e5ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	4413      	add	r3, r2
 800e578:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d90e      	bls.n	800e5a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e58e:	4b19      	ldr	r3, [pc, #100]	; (800e5f4 <prvSwitchTimerLists+0xc0>)
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3304      	adds	r3, #4
 800e596:	4619      	mov	r1, r3
 800e598:	4610      	mov	r0, r2
 800e59a:	f7fd fb6e 	bl	800bc7a <vListInsert>
 800e59e:	e016      	b.n	800e5ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7ff fd60 	bl	800e070 <xTimerGenericCommand>
 800e5b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10a      	bne.n	800e5ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	603b      	str	r3, [r7, #0]
}
 800e5ca:	bf00      	nop
 800e5cc:	e7fe      	b.n	800e5cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5ce:	4b09      	ldr	r3, [pc, #36]	; (800e5f4 <prvSwitchTimerLists+0xc0>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1b1      	bne.n	800e53c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e5d8:	4b06      	ldr	r3, [pc, #24]	; (800e5f4 <prvSwitchTimerLists+0xc0>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e5de:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <prvSwitchTimerLists+0xc4>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a04      	ldr	r2, [pc, #16]	; (800e5f4 <prvSwitchTimerLists+0xc0>)
 800e5e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e5e6:	4a04      	ldr	r2, [pc, #16]	; (800e5f8 <prvSwitchTimerLists+0xc4>)
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	6013      	str	r3, [r2, #0]
}
 800e5ec:	bf00      	nop
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20000d5c 	.word	0x20000d5c
 800e5f8:	20000d60 	.word	0x20000d60

0800e5fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e602:	f000 f987 	bl	800e914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e606:	4b15      	ldr	r3, [pc, #84]	; (800e65c <prvCheckForValidListAndQueue+0x60>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d120      	bne.n	800e650 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e60e:	4814      	ldr	r0, [pc, #80]	; (800e660 <prvCheckForValidListAndQueue+0x64>)
 800e610:	f7fd fae2 	bl	800bbd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e614:	4813      	ldr	r0, [pc, #76]	; (800e664 <prvCheckForValidListAndQueue+0x68>)
 800e616:	f7fd fadf 	bl	800bbd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e61a:	4b13      	ldr	r3, [pc, #76]	; (800e668 <prvCheckForValidListAndQueue+0x6c>)
 800e61c:	4a10      	ldr	r2, [pc, #64]	; (800e660 <prvCheckForValidListAndQueue+0x64>)
 800e61e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e620:	4b12      	ldr	r3, [pc, #72]	; (800e66c <prvCheckForValidListAndQueue+0x70>)
 800e622:	4a10      	ldr	r2, [pc, #64]	; (800e664 <prvCheckForValidListAndQueue+0x68>)
 800e624:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e626:	2300      	movs	r3, #0
 800e628:	9300      	str	r3, [sp, #0]
 800e62a:	4b11      	ldr	r3, [pc, #68]	; (800e670 <prvCheckForValidListAndQueue+0x74>)
 800e62c:	4a11      	ldr	r2, [pc, #68]	; (800e674 <prvCheckForValidListAndQueue+0x78>)
 800e62e:	2110      	movs	r1, #16
 800e630:	200a      	movs	r0, #10
 800e632:	f7fd fbed 	bl	800be10 <xQueueGenericCreateStatic>
 800e636:	4603      	mov	r3, r0
 800e638:	4a08      	ldr	r2, [pc, #32]	; (800e65c <prvCheckForValidListAndQueue+0x60>)
 800e63a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e63c:	4b07      	ldr	r3, [pc, #28]	; (800e65c <prvCheckForValidListAndQueue+0x60>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d005      	beq.n	800e650 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e644:	4b05      	ldr	r3, [pc, #20]	; (800e65c <prvCheckForValidListAndQueue+0x60>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	490b      	ldr	r1, [pc, #44]	; (800e678 <prvCheckForValidListAndQueue+0x7c>)
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fafe 	bl	800cc4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e650:	f000 f990 	bl	800e974 <vPortExitCritical>
}
 800e654:	bf00      	nop
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	20000d64 	.word	0x20000d64
 800e660:	20000d34 	.word	0x20000d34
 800e664:	20000d48 	.word	0x20000d48
 800e668:	20000d5c 	.word	0x20000d5c
 800e66c:	20000d60 	.word	0x20000d60
 800e670:	20000e10 	.word	0x20000e10
 800e674:	20000d70 	.word	0x20000d70
 800e678:	080102b0 	.word	0x080102b0

0800e67c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b08a      	sub	sp, #40	; 0x28
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800e68a:	f06f 0301 	mvn.w	r3, #1
 800e68e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <xTimerPendFunctionCallFromISR+0x3c>)
 800e69e:	6818      	ldr	r0, [r3, #0]
 800e6a0:	f107 0114 	add.w	r1, r7, #20
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	f7fd fdf0 	bl	800c28c <xQueueGenericSendFromISR>
 800e6ac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3728      	adds	r7, #40	; 0x28
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20000d64 	.word	0x20000d64

0800e6bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	3b04      	subs	r3, #4
 800e6cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	3b04      	subs	r3, #4
 800e6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	f023 0201 	bic.w	r2, r3, #1
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	3b04      	subs	r3, #4
 800e6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6ec:	4a0c      	ldr	r2, [pc, #48]	; (800e720 <pxPortInitialiseStack+0x64>)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3b14      	subs	r3, #20
 800e6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3b04      	subs	r3, #4
 800e702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f06f 0202 	mvn.w	r2, #2
 800e70a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3b20      	subs	r3, #32
 800e710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e712:	68fb      	ldr	r3, [r7, #12]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	0800e725 	.word	0x0800e725

0800e724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e72e:	4b12      	ldr	r3, [pc, #72]	; (800e778 <prvTaskExitError+0x54>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e736:	d00a      	beq.n	800e74e <prvTaskExitError+0x2a>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	60fb      	str	r3, [r7, #12]
}
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <prvTaskExitError+0x28>
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e752:	f383 8811 	msr	BASEPRI, r3
 800e756:	f3bf 8f6f 	isb	sy
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	60bb      	str	r3, [r7, #8]
}
 800e760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e762:	bf00      	nop
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0fc      	beq.n	800e764 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e76a:	bf00      	nop
 800e76c:	bf00      	nop
 800e76e:	3714      	adds	r7, #20
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	200000b4 	.word	0x200000b4
 800e77c:	00000000 	.word	0x00000000

0800e780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e780:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <pxCurrentTCBConst2>)
 800e782:	6819      	ldr	r1, [r3, #0]
 800e784:	6808      	ldr	r0, [r1, #0]
 800e786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78a:	f380 8809 	msr	PSP, r0
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f04f 0000 	mov.w	r0, #0
 800e796:	f380 8811 	msr	BASEPRI, r0
 800e79a:	4770      	bx	lr
 800e79c:	f3af 8000 	nop.w

0800e7a0 <pxCurrentTCBConst2>:
 800e7a0:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop

0800e7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7a8:	4808      	ldr	r0, [pc, #32]	; (800e7cc <prvPortStartFirstTask+0x24>)
 800e7aa:	6800      	ldr	r0, [r0, #0]
 800e7ac:	6800      	ldr	r0, [r0, #0]
 800e7ae:	f380 8808 	msr	MSP, r0
 800e7b2:	f04f 0000 	mov.w	r0, #0
 800e7b6:	f380 8814 	msr	CONTROL, r0
 800e7ba:	b662      	cpsie	i
 800e7bc:	b661      	cpsie	f
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	df00      	svc	0
 800e7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7ca:	bf00      	nop
 800e7cc:	e000ed08 	.word	0xe000ed08

0800e7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e7d6:	4b46      	ldr	r3, [pc, #280]	; (800e8f0 <xPortStartScheduler+0x120>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a46      	ldr	r2, [pc, #280]	; (800e8f4 <xPortStartScheduler+0x124>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d10a      	bne.n	800e7f6 <xPortStartScheduler+0x26>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	613b      	str	r3, [r7, #16]
}
 800e7f2:	bf00      	nop
 800e7f4:	e7fe      	b.n	800e7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7f6:	4b3e      	ldr	r3, [pc, #248]	; (800e8f0 <xPortStartScheduler+0x120>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a3f      	ldr	r2, [pc, #252]	; (800e8f8 <xPortStartScheduler+0x128>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d10a      	bne.n	800e816 <xPortStartScheduler+0x46>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	60fb      	str	r3, [r7, #12]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e816:	4b39      	ldr	r3, [pc, #228]	; (800e8fc <xPortStartScheduler+0x12c>)
 800e818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	22ff      	movs	r2, #255	; 0xff
 800e826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e830:	78fb      	ldrb	r3, [r7, #3]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e838:	b2da      	uxtb	r2, r3
 800e83a:	4b31      	ldr	r3, [pc, #196]	; (800e900 <xPortStartScheduler+0x130>)
 800e83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e83e:	4b31      	ldr	r3, [pc, #196]	; (800e904 <xPortStartScheduler+0x134>)
 800e840:	2207      	movs	r2, #7
 800e842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e844:	e009      	b.n	800e85a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e846:	4b2f      	ldr	r3, [pc, #188]	; (800e904 <xPortStartScheduler+0x134>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	4a2d      	ldr	r2, [pc, #180]	; (800e904 <xPortStartScheduler+0x134>)
 800e84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e850:	78fb      	ldrb	r3, [r7, #3]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	b2db      	uxtb	r3, r3
 800e858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e85a:	78fb      	ldrb	r3, [r7, #3]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e862:	2b80      	cmp	r3, #128	; 0x80
 800e864:	d0ef      	beq.n	800e846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e866:	4b27      	ldr	r3, [pc, #156]	; (800e904 <xPortStartScheduler+0x134>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f1c3 0307 	rsb	r3, r3, #7
 800e86e:	2b04      	cmp	r3, #4
 800e870:	d00a      	beq.n	800e888 <xPortStartScheduler+0xb8>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	60bb      	str	r3, [r7, #8]
}
 800e884:	bf00      	nop
 800e886:	e7fe      	b.n	800e886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e888:	4b1e      	ldr	r3, [pc, #120]	; (800e904 <xPortStartScheduler+0x134>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	021b      	lsls	r3, r3, #8
 800e88e:	4a1d      	ldr	r2, [pc, #116]	; (800e904 <xPortStartScheduler+0x134>)
 800e890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e892:	4b1c      	ldr	r3, [pc, #112]	; (800e904 <xPortStartScheduler+0x134>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e89a:	4a1a      	ldr	r2, [pc, #104]	; (800e904 <xPortStartScheduler+0x134>)
 800e89c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8a6:	4b18      	ldr	r3, [pc, #96]	; (800e908 <xPortStartScheduler+0x138>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4a17      	ldr	r2, [pc, #92]	; (800e908 <xPortStartScheduler+0x138>)
 800e8ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e8b2:	4b15      	ldr	r3, [pc, #84]	; (800e908 <xPortStartScheduler+0x138>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	4a14      	ldr	r2, [pc, #80]	; (800e908 <xPortStartScheduler+0x138>)
 800e8b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e8be:	f000 f8dd 	bl	800ea7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8c2:	4b12      	ldr	r3, [pc, #72]	; (800e90c <xPortStartScheduler+0x13c>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8c8:	f000 f8fc 	bl	800eac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8cc:	4b10      	ldr	r3, [pc, #64]	; (800e910 <xPortStartScheduler+0x140>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a0f      	ldr	r2, [pc, #60]	; (800e910 <xPortStartScheduler+0x140>)
 800e8d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e8d8:	f7ff ff66 	bl	800e7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e8dc:	f7fe fe80 	bl	800d5e0 <vTaskSwitchContext>
	prvTaskExitError();
 800e8e0:	f7ff ff20 	bl	800e724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e8e4:	2300      	movs	r3, #0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3718      	adds	r7, #24
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	e000ed00 	.word	0xe000ed00
 800e8f4:	410fc271 	.word	0x410fc271
 800e8f8:	410fc270 	.word	0x410fc270
 800e8fc:	e000e400 	.word	0xe000e400
 800e900:	20000e60 	.word	0x20000e60
 800e904:	20000e64 	.word	0x20000e64
 800e908:	e000ed20 	.word	0xe000ed20
 800e90c:	200000b4 	.word	0x200000b4
 800e910:	e000ef34 	.word	0xe000ef34

0800e914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	607b      	str	r3, [r7, #4]
}
 800e92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e92e:	4b0f      	ldr	r3, [pc, #60]	; (800e96c <vPortEnterCritical+0x58>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3301      	adds	r3, #1
 800e934:	4a0d      	ldr	r2, [pc, #52]	; (800e96c <vPortEnterCritical+0x58>)
 800e936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e938:	4b0c      	ldr	r3, [pc, #48]	; (800e96c <vPortEnterCritical+0x58>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d10f      	bne.n	800e960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e940:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <vPortEnterCritical+0x5c>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	b2db      	uxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00a      	beq.n	800e960 <vPortEnterCritical+0x4c>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	603b      	str	r3, [r7, #0]
}
 800e95c:	bf00      	nop
 800e95e:	e7fe      	b.n	800e95e <vPortEnterCritical+0x4a>
	}
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr
 800e96c:	200000b4 	.word	0x200000b4
 800e970:	e000ed04 	.word	0xe000ed04

0800e974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e97a:	4b12      	ldr	r3, [pc, #72]	; (800e9c4 <vPortExitCritical+0x50>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <vPortExitCritical+0x24>
	__asm volatile
 800e982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e986:	f383 8811 	msr	BASEPRI, r3
 800e98a:	f3bf 8f6f 	isb	sy
 800e98e:	f3bf 8f4f 	dsb	sy
 800e992:	607b      	str	r3, [r7, #4]
}
 800e994:	bf00      	nop
 800e996:	e7fe      	b.n	800e996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e998:	4b0a      	ldr	r3, [pc, #40]	; (800e9c4 <vPortExitCritical+0x50>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3b01      	subs	r3, #1
 800e99e:	4a09      	ldr	r2, [pc, #36]	; (800e9c4 <vPortExitCritical+0x50>)
 800e9a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9a2:	4b08      	ldr	r3, [pc, #32]	; (800e9c4 <vPortExitCritical+0x50>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <vPortExitCritical+0x42>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	f383 8811 	msr	BASEPRI, r3
}
 800e9b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e9b6:	bf00      	nop
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	200000b4 	.word	0x200000b4
	...

0800e9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e9d0:	f3ef 8009 	mrs	r0, PSP
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4b15      	ldr	r3, [pc, #84]	; (800ea30 <pxCurrentTCBConst>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	f01e 0f10 	tst.w	lr, #16
 800e9e0:	bf08      	it	eq
 800e9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ea:	6010      	str	r0, [r2, #0]
 800e9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9f4:	f380 8811 	msr	BASEPRI, r0
 800e9f8:	f3bf 8f4f 	dsb	sy
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f7fe fdee 	bl	800d5e0 <vTaskSwitchContext>
 800ea04:	f04f 0000 	mov.w	r0, #0
 800ea08:	f380 8811 	msr	BASEPRI, r0
 800ea0c:	bc09      	pop	{r0, r3}
 800ea0e:	6819      	ldr	r1, [r3, #0]
 800ea10:	6808      	ldr	r0, [r1, #0]
 800ea12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea16:	f01e 0f10 	tst.w	lr, #16
 800ea1a:	bf08      	it	eq
 800ea1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea20:	f380 8809 	msr	PSP, r0
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	f3af 8000 	nop.w

0800ea30 <pxCurrentTCBConst>:
 800ea30:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea34:	bf00      	nop
 800ea36:	bf00      	nop

0800ea38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	607b      	str	r3, [r7, #4]
}
 800ea50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea52:	f7fe fd0b 	bl	800d46c <xTaskIncrementTick>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d003      	beq.n	800ea64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea5c:	4b06      	ldr	r3, [pc, #24]	; (800ea78 <xPortSysTickHandler+0x40>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	2300      	movs	r3, #0
 800ea66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f383 8811 	msr	BASEPRI, r3
}
 800ea6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea70:	bf00      	nop
 800ea72:	3708      	adds	r7, #8
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	e000ed04 	.word	0xe000ed04

0800ea7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea80:	4b0b      	ldr	r3, [pc, #44]	; (800eab0 <vPortSetupTimerInterrupt+0x34>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea86:	4b0b      	ldr	r3, [pc, #44]	; (800eab4 <vPortSetupTimerInterrupt+0x38>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea8c:	4b0a      	ldr	r3, [pc, #40]	; (800eab8 <vPortSetupTimerInterrupt+0x3c>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a0a      	ldr	r2, [pc, #40]	; (800eabc <vPortSetupTimerInterrupt+0x40>)
 800ea92:	fba2 2303 	umull	r2, r3, r2, r3
 800ea96:	099b      	lsrs	r3, r3, #6
 800ea98:	4a09      	ldr	r2, [pc, #36]	; (800eac0 <vPortSetupTimerInterrupt+0x44>)
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea9e:	4b04      	ldr	r3, [pc, #16]	; (800eab0 <vPortSetupTimerInterrupt+0x34>)
 800eaa0:	2207      	movs	r2, #7
 800eaa2:	601a      	str	r2, [r3, #0]
}
 800eaa4:	bf00      	nop
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	e000e010 	.word	0xe000e010
 800eab4:	e000e018 	.word	0xe000e018
 800eab8:	20000094 	.word	0x20000094
 800eabc:	10624dd3 	.word	0x10624dd3
 800eac0:	e000e014 	.word	0xe000e014

0800eac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ead4 <vPortEnableVFP+0x10>
 800eac8:	6801      	ldr	r1, [r0, #0]
 800eaca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eace:	6001      	str	r1, [r0, #0]
 800ead0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ead2:	bf00      	nop
 800ead4:	e000ed88 	.word	0xe000ed88

0800ead8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ead8:	b480      	push	{r7}
 800eada:	b085      	sub	sp, #20
 800eadc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eade:	f3ef 8305 	mrs	r3, IPSR
 800eae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2b0f      	cmp	r3, #15
 800eae8:	d914      	bls.n	800eb14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eaea:	4a17      	ldr	r2, [pc, #92]	; (800eb48 <vPortValidateInterruptPriority+0x70>)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4413      	add	r3, r2
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eaf4:	4b15      	ldr	r3, [pc, #84]	; (800eb4c <vPortValidateInterruptPriority+0x74>)
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	7afa      	ldrb	r2, [r7, #11]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d20a      	bcs.n	800eb14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb02:	f383 8811 	msr	BASEPRI, r3
 800eb06:	f3bf 8f6f 	isb	sy
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	607b      	str	r3, [r7, #4]
}
 800eb10:	bf00      	nop
 800eb12:	e7fe      	b.n	800eb12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb14:	4b0e      	ldr	r3, [pc, #56]	; (800eb50 <vPortValidateInterruptPriority+0x78>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb1c:	4b0d      	ldr	r3, [pc, #52]	; (800eb54 <vPortValidateInterruptPriority+0x7c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d90a      	bls.n	800eb3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	603b      	str	r3, [r7, #0]
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <vPortValidateInterruptPriority+0x60>
	}
 800eb3a:	bf00      	nop
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	e000e3f0 	.word	0xe000e3f0
 800eb4c:	20000e60 	.word	0x20000e60
 800eb50:	e000ed0c 	.word	0xe000ed0c
 800eb54:	20000e64 	.word	0x20000e64

0800eb58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08a      	sub	sp, #40	; 0x28
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb64:	f7fe fbb4 	bl	800d2d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb68:	4b5b      	ldr	r3, [pc, #364]	; (800ecd8 <pvPortMalloc+0x180>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb70:	f000 f920 	bl	800edb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb74:	4b59      	ldr	r3, [pc, #356]	; (800ecdc <pvPortMalloc+0x184>)
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f040 8093 	bne.w	800eca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d01d      	beq.n	800ebc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb88:	2208      	movs	r2, #8
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d014      	beq.n	800ebc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f023 0307 	bic.w	r3, r3, #7
 800eba0:	3308      	adds	r3, #8
 800eba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f003 0307 	and.w	r3, r3, #7
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00a      	beq.n	800ebc4 <pvPortMalloc+0x6c>
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	f383 8811 	msr	BASEPRI, r3
 800ebb6:	f3bf 8f6f 	isb	sy
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	617b      	str	r3, [r7, #20]
}
 800ebc0:	bf00      	nop
 800ebc2:	e7fe      	b.n	800ebc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d06e      	beq.n	800eca8 <pvPortMalloc+0x150>
 800ebca:	4b45      	ldr	r3, [pc, #276]	; (800ece0 <pvPortMalloc+0x188>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d869      	bhi.n	800eca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebd4:	4b43      	ldr	r3, [pc, #268]	; (800ece4 <pvPortMalloc+0x18c>)
 800ebd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebd8:	4b42      	ldr	r3, [pc, #264]	; (800ece4 <pvPortMalloc+0x18c>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebde:	e004      	b.n	800ebea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ebe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	687a      	ldr	r2, [r7, #4]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d903      	bls.n	800ebfc <pvPortMalloc+0xa4>
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1f1      	bne.n	800ebe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ebfc:	4b36      	ldr	r3, [pc, #216]	; (800ecd8 <pvPortMalloc+0x180>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d050      	beq.n	800eca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2208      	movs	r2, #8
 800ec0c:	4413      	add	r3, r2
 800ec0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	6a3b      	ldr	r3, [r7, #32]
 800ec16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	685a      	ldr	r2, [r3, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	1ad2      	subs	r2, r2, r3
 800ec20:	2308      	movs	r3, #8
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d91f      	bls.n	800ec68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	f003 0307 	and.w	r3, r3, #7
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00a      	beq.n	800ec50 <pvPortMalloc+0xf8>
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	613b      	str	r3, [r7, #16]
}
 800ec4c:	bf00      	nop
 800ec4e:	e7fe      	b.n	800ec4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	1ad2      	subs	r2, r2, r3
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec62:	69b8      	ldr	r0, [r7, #24]
 800ec64:	f000 f908 	bl	800ee78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec68:	4b1d      	ldr	r3, [pc, #116]	; (800ece0 <pvPortMalloc+0x188>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	4a1b      	ldr	r2, [pc, #108]	; (800ece0 <pvPortMalloc+0x188>)
 800ec74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec76:	4b1a      	ldr	r3, [pc, #104]	; (800ece0 <pvPortMalloc+0x188>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	4b1b      	ldr	r3, [pc, #108]	; (800ece8 <pvPortMalloc+0x190>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d203      	bcs.n	800ec8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec82:	4b17      	ldr	r3, [pc, #92]	; (800ece0 <pvPortMalloc+0x188>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4a18      	ldr	r2, [pc, #96]	; (800ece8 <pvPortMalloc+0x190>)
 800ec88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8c:	685a      	ldr	r2, [r3, #4]
 800ec8e:	4b13      	ldr	r3, [pc, #76]	; (800ecdc <pvPortMalloc+0x184>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	431a      	orrs	r2, r3
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec9e:	4b13      	ldr	r3, [pc, #76]	; (800ecec <pvPortMalloc+0x194>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	4a11      	ldr	r2, [pc, #68]	; (800ecec <pvPortMalloc+0x194>)
 800eca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eca8:	f7fe fb20 	bl	800d2ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	f003 0307 	and.w	r3, r3, #7
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <pvPortMalloc+0x174>
	__asm volatile
 800ecb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecba:	f383 8811 	msr	BASEPRI, r3
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	60fb      	str	r3, [r7, #12]
}
 800ecc8:	bf00      	nop
 800ecca:	e7fe      	b.n	800ecca <pvPortMalloc+0x172>
	return pvReturn;
 800eccc:	69fb      	ldr	r3, [r7, #28]
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3728      	adds	r7, #40	; 0x28
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20003580 	.word	0x20003580
 800ecdc:	20003594 	.word	0x20003594
 800ece0:	20003584 	.word	0x20003584
 800ece4:	20003578 	.word	0x20003578
 800ece8:	20003588 	.word	0x20003588
 800ecec:	2000358c 	.word	0x2000358c

0800ecf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d04d      	beq.n	800ed9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed02:	2308      	movs	r3, #8
 800ed04:	425b      	negs	r3, r3
 800ed06:	697a      	ldr	r2, [r7, #20]
 800ed08:	4413      	add	r3, r2
 800ed0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	685a      	ldr	r2, [r3, #4]
 800ed14:	4b24      	ldr	r3, [pc, #144]	; (800eda8 <vPortFree+0xb8>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4013      	ands	r3, r2
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10a      	bne.n	800ed34 <vPortFree+0x44>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	60fb      	str	r3, [r7, #12]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <vPortFree+0x62>
	__asm volatile
 800ed3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	60bb      	str	r3, [r7, #8]
}
 800ed4e:	bf00      	nop
 800ed50:	e7fe      	b.n	800ed50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	4b14      	ldr	r3, [pc, #80]	; (800eda8 <vPortFree+0xb8>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d01e      	beq.n	800ed9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d11a      	bne.n	800ed9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	685a      	ldr	r2, [r3, #4]
 800ed6c:	4b0e      	ldr	r3, [pc, #56]	; (800eda8 <vPortFree+0xb8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	43db      	mvns	r3, r3
 800ed72:	401a      	ands	r2, r3
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed78:	f7fe faaa 	bl	800d2d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	4b0a      	ldr	r3, [pc, #40]	; (800edac <vPortFree+0xbc>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4413      	add	r3, r2
 800ed86:	4a09      	ldr	r2, [pc, #36]	; (800edac <vPortFree+0xbc>)
 800ed88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed8a:	6938      	ldr	r0, [r7, #16]
 800ed8c:	f000 f874 	bl	800ee78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed90:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <vPortFree+0xc0>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	3301      	adds	r3, #1
 800ed96:	4a06      	ldr	r2, [pc, #24]	; (800edb0 <vPortFree+0xc0>)
 800ed98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed9a:	f7fe faa7 	bl	800d2ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed9e:	bf00      	nop
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20003594 	.word	0x20003594
 800edac:	20003584 	.word	0x20003584
 800edb0:	20003590 	.word	0x20003590

0800edb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800edb4:	b480      	push	{r7}
 800edb6:	b085      	sub	sp, #20
 800edb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edba:	f242 7310 	movw	r3, #10000	; 0x2710
 800edbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edc0:	4b27      	ldr	r3, [pc, #156]	; (800ee60 <prvHeapInit+0xac>)
 800edc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f003 0307 	and.w	r3, r3, #7
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d00c      	beq.n	800ede8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3307      	adds	r3, #7
 800edd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f023 0307 	bic.w	r3, r3, #7
 800edda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eddc:	68ba      	ldr	r2, [r7, #8]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	4a1f      	ldr	r2, [pc, #124]	; (800ee60 <prvHeapInit+0xac>)
 800ede4:	4413      	add	r3, r2
 800ede6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edec:	4a1d      	ldr	r2, [pc, #116]	; (800ee64 <prvHeapInit+0xb0>)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800edf2:	4b1c      	ldr	r3, [pc, #112]	; (800ee64 <prvHeapInit+0xb0>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	4413      	add	r3, r2
 800edfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee00:	2208      	movs	r2, #8
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	1a9b      	subs	r3, r3, r2
 800ee06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f023 0307 	bic.w	r3, r3, #7
 800ee0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	4a15      	ldr	r2, [pc, #84]	; (800ee68 <prvHeapInit+0xb4>)
 800ee14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee16:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <prvHeapInit+0xb4>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee1e:	4b12      	ldr	r3, [pc, #72]	; (800ee68 <prvHeapInit+0xb4>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2200      	movs	r2, #0
 800ee24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	1ad2      	subs	r2, r2, r3
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee34:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <prvHeapInit+0xb4>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	4a0a      	ldr	r2, [pc, #40]	; (800ee6c <prvHeapInit+0xb8>)
 800ee42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	685b      	ldr	r3, [r3, #4]
 800ee48:	4a09      	ldr	r2, [pc, #36]	; (800ee70 <prvHeapInit+0xbc>)
 800ee4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee4c:	4b09      	ldr	r3, [pc, #36]	; (800ee74 <prvHeapInit+0xc0>)
 800ee4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee52:	601a      	str	r2, [r3, #0]
}
 800ee54:	bf00      	nop
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	20000e68 	.word	0x20000e68
 800ee64:	20003578 	.word	0x20003578
 800ee68:	20003580 	.word	0x20003580
 800ee6c:	20003588 	.word	0x20003588
 800ee70:	20003584 	.word	0x20003584
 800ee74:	20003594 	.word	0x20003594

0800ee78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b085      	sub	sp, #20
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee80:	4b28      	ldr	r3, [pc, #160]	; (800ef24 <prvInsertBlockIntoFreeList+0xac>)
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	e002      	b.n	800ee8c <prvInsertBlockIntoFreeList+0x14>
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d8f7      	bhi.n	800ee86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	4413      	add	r3, r2
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d108      	bne.n	800eeba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	685a      	ldr	r2, [r3, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	441a      	add	r2, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	68ba      	ldr	r2, [r7, #8]
 800eec4:	441a      	add	r2, r3
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d118      	bne.n	800ef00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <prvInsertBlockIntoFreeList+0xb0>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d00d      	beq.n	800eef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	441a      	add	r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	e008      	b.n	800ef08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eef6:	4b0c      	ldr	r3, [pc, #48]	; (800ef28 <prvInsertBlockIntoFreeList+0xb0>)
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	601a      	str	r2, [r3, #0]
 800eefe:	e003      	b.n	800ef08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d002      	beq.n	800ef16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef16:	bf00      	nop
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	20003578 	.word	0x20003578
 800ef28:	20003580 	.word	0x20003580

0800ef2c <__errno>:
 800ef2c:	4b01      	ldr	r3, [pc, #4]	; (800ef34 <__errno+0x8>)
 800ef2e:	6818      	ldr	r0, [r3, #0]
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	200000b8 	.word	0x200000b8

0800ef38 <__libc_init_array>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	4d0d      	ldr	r5, [pc, #52]	; (800ef70 <__libc_init_array+0x38>)
 800ef3c:	4c0d      	ldr	r4, [pc, #52]	; (800ef74 <__libc_init_array+0x3c>)
 800ef3e:	1b64      	subs	r4, r4, r5
 800ef40:	10a4      	asrs	r4, r4, #2
 800ef42:	2600      	movs	r6, #0
 800ef44:	42a6      	cmp	r6, r4
 800ef46:	d109      	bne.n	800ef5c <__libc_init_array+0x24>
 800ef48:	4d0b      	ldr	r5, [pc, #44]	; (800ef78 <__libc_init_array+0x40>)
 800ef4a:	4c0c      	ldr	r4, [pc, #48]	; (800ef7c <__libc_init_array+0x44>)
 800ef4c:	f000 fffa 	bl	800ff44 <_init>
 800ef50:	1b64      	subs	r4, r4, r5
 800ef52:	10a4      	asrs	r4, r4, #2
 800ef54:	2600      	movs	r6, #0
 800ef56:	42a6      	cmp	r6, r4
 800ef58:	d105      	bne.n	800ef66 <__libc_init_array+0x2e>
 800ef5a:	bd70      	pop	{r4, r5, r6, pc}
 800ef5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef60:	4798      	blx	r3
 800ef62:	3601      	adds	r6, #1
 800ef64:	e7ee      	b.n	800ef44 <__libc_init_array+0xc>
 800ef66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef6a:	4798      	blx	r3
 800ef6c:	3601      	adds	r6, #1
 800ef6e:	e7f2      	b.n	800ef56 <__libc_init_array+0x1e>
 800ef70:	08010868 	.word	0x08010868
 800ef74:	08010868 	.word	0x08010868
 800ef78:	08010868 	.word	0x08010868
 800ef7c:	0801086c 	.word	0x0801086c

0800ef80 <memcpy>:
 800ef80:	440a      	add	r2, r1
 800ef82:	4291      	cmp	r1, r2
 800ef84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef88:	d100      	bne.n	800ef8c <memcpy+0xc>
 800ef8a:	4770      	bx	lr
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef96:	4291      	cmp	r1, r2
 800ef98:	d1f9      	bne.n	800ef8e <memcpy+0xe>
 800ef9a:	bd10      	pop	{r4, pc}

0800ef9c <memset>:
 800ef9c:	4402      	add	r2, r0
 800ef9e:	4603      	mov	r3, r0
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d100      	bne.n	800efa6 <memset+0xa>
 800efa4:	4770      	bx	lr
 800efa6:	f803 1b01 	strb.w	r1, [r3], #1
 800efaa:	e7f9      	b.n	800efa0 <memset+0x4>

0800efac <iprintf>:
 800efac:	b40f      	push	{r0, r1, r2, r3}
 800efae:	4b0a      	ldr	r3, [pc, #40]	; (800efd8 <iprintf+0x2c>)
 800efb0:	b513      	push	{r0, r1, r4, lr}
 800efb2:	681c      	ldr	r4, [r3, #0]
 800efb4:	b124      	cbz	r4, 800efc0 <iprintf+0x14>
 800efb6:	69a3      	ldr	r3, [r4, #24]
 800efb8:	b913      	cbnz	r3, 800efc0 <iprintf+0x14>
 800efba:	4620      	mov	r0, r4
 800efbc:	f000 fa5e 	bl	800f47c <__sinit>
 800efc0:	ab05      	add	r3, sp, #20
 800efc2:	9a04      	ldr	r2, [sp, #16]
 800efc4:	68a1      	ldr	r1, [r4, #8]
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	4620      	mov	r0, r4
 800efca:	f000 fc2f 	bl	800f82c <_vfiprintf_r>
 800efce:	b002      	add	sp, #8
 800efd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efd4:	b004      	add	sp, #16
 800efd6:	4770      	bx	lr
 800efd8:	200000b8 	.word	0x200000b8

0800efdc <_puts_r>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	460e      	mov	r6, r1
 800efe0:	4605      	mov	r5, r0
 800efe2:	b118      	cbz	r0, 800efec <_puts_r+0x10>
 800efe4:	6983      	ldr	r3, [r0, #24]
 800efe6:	b90b      	cbnz	r3, 800efec <_puts_r+0x10>
 800efe8:	f000 fa48 	bl	800f47c <__sinit>
 800efec:	69ab      	ldr	r3, [r5, #24]
 800efee:	68ac      	ldr	r4, [r5, #8]
 800eff0:	b913      	cbnz	r3, 800eff8 <_puts_r+0x1c>
 800eff2:	4628      	mov	r0, r5
 800eff4:	f000 fa42 	bl	800f47c <__sinit>
 800eff8:	4b2c      	ldr	r3, [pc, #176]	; (800f0ac <_puts_r+0xd0>)
 800effa:	429c      	cmp	r4, r3
 800effc:	d120      	bne.n	800f040 <_puts_r+0x64>
 800effe:	686c      	ldr	r4, [r5, #4]
 800f000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f002:	07db      	lsls	r3, r3, #31
 800f004:	d405      	bmi.n	800f012 <_puts_r+0x36>
 800f006:	89a3      	ldrh	r3, [r4, #12]
 800f008:	0598      	lsls	r0, r3, #22
 800f00a:	d402      	bmi.n	800f012 <_puts_r+0x36>
 800f00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f00e:	f000 fad3 	bl	800f5b8 <__retarget_lock_acquire_recursive>
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	0719      	lsls	r1, r3, #28
 800f016:	d51d      	bpl.n	800f054 <_puts_r+0x78>
 800f018:	6923      	ldr	r3, [r4, #16]
 800f01a:	b1db      	cbz	r3, 800f054 <_puts_r+0x78>
 800f01c:	3e01      	subs	r6, #1
 800f01e:	68a3      	ldr	r3, [r4, #8]
 800f020:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f024:	3b01      	subs	r3, #1
 800f026:	60a3      	str	r3, [r4, #8]
 800f028:	bb39      	cbnz	r1, 800f07a <_puts_r+0x9e>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	da38      	bge.n	800f0a0 <_puts_r+0xc4>
 800f02e:	4622      	mov	r2, r4
 800f030:	210a      	movs	r1, #10
 800f032:	4628      	mov	r0, r5
 800f034:	f000 f848 	bl	800f0c8 <__swbuf_r>
 800f038:	3001      	adds	r0, #1
 800f03a:	d011      	beq.n	800f060 <_puts_r+0x84>
 800f03c:	250a      	movs	r5, #10
 800f03e:	e011      	b.n	800f064 <_puts_r+0x88>
 800f040:	4b1b      	ldr	r3, [pc, #108]	; (800f0b0 <_puts_r+0xd4>)
 800f042:	429c      	cmp	r4, r3
 800f044:	d101      	bne.n	800f04a <_puts_r+0x6e>
 800f046:	68ac      	ldr	r4, [r5, #8]
 800f048:	e7da      	b.n	800f000 <_puts_r+0x24>
 800f04a:	4b1a      	ldr	r3, [pc, #104]	; (800f0b4 <_puts_r+0xd8>)
 800f04c:	429c      	cmp	r4, r3
 800f04e:	bf08      	it	eq
 800f050:	68ec      	ldreq	r4, [r5, #12]
 800f052:	e7d5      	b.n	800f000 <_puts_r+0x24>
 800f054:	4621      	mov	r1, r4
 800f056:	4628      	mov	r0, r5
 800f058:	f000 f888 	bl	800f16c <__swsetup_r>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d0dd      	beq.n	800f01c <_puts_r+0x40>
 800f060:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f066:	07da      	lsls	r2, r3, #31
 800f068:	d405      	bmi.n	800f076 <_puts_r+0x9a>
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	059b      	lsls	r3, r3, #22
 800f06e:	d402      	bmi.n	800f076 <_puts_r+0x9a>
 800f070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f072:	f000 faa2 	bl	800f5ba <__retarget_lock_release_recursive>
 800f076:	4628      	mov	r0, r5
 800f078:	bd70      	pop	{r4, r5, r6, pc}
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	da04      	bge.n	800f088 <_puts_r+0xac>
 800f07e:	69a2      	ldr	r2, [r4, #24]
 800f080:	429a      	cmp	r2, r3
 800f082:	dc06      	bgt.n	800f092 <_puts_r+0xb6>
 800f084:	290a      	cmp	r1, #10
 800f086:	d004      	beq.n	800f092 <_puts_r+0xb6>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	6022      	str	r2, [r4, #0]
 800f08e:	7019      	strb	r1, [r3, #0]
 800f090:	e7c5      	b.n	800f01e <_puts_r+0x42>
 800f092:	4622      	mov	r2, r4
 800f094:	4628      	mov	r0, r5
 800f096:	f000 f817 	bl	800f0c8 <__swbuf_r>
 800f09a:	3001      	adds	r0, #1
 800f09c:	d1bf      	bne.n	800f01e <_puts_r+0x42>
 800f09e:	e7df      	b.n	800f060 <_puts_r+0x84>
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	250a      	movs	r5, #10
 800f0a4:	1c5a      	adds	r2, r3, #1
 800f0a6:	6022      	str	r2, [r4, #0]
 800f0a8:	701d      	strb	r5, [r3, #0]
 800f0aa:	e7db      	b.n	800f064 <_puts_r+0x88>
 800f0ac:	080107ec 	.word	0x080107ec
 800f0b0:	0801080c 	.word	0x0801080c
 800f0b4:	080107cc 	.word	0x080107cc

0800f0b8 <puts>:
 800f0b8:	4b02      	ldr	r3, [pc, #8]	; (800f0c4 <puts+0xc>)
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	6818      	ldr	r0, [r3, #0]
 800f0be:	f7ff bf8d 	b.w	800efdc <_puts_r>
 800f0c2:	bf00      	nop
 800f0c4:	200000b8 	.word	0x200000b8

0800f0c8 <__swbuf_r>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	460e      	mov	r6, r1
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	b118      	cbz	r0, 800f0da <__swbuf_r+0x12>
 800f0d2:	6983      	ldr	r3, [r0, #24]
 800f0d4:	b90b      	cbnz	r3, 800f0da <__swbuf_r+0x12>
 800f0d6:	f000 f9d1 	bl	800f47c <__sinit>
 800f0da:	4b21      	ldr	r3, [pc, #132]	; (800f160 <__swbuf_r+0x98>)
 800f0dc:	429c      	cmp	r4, r3
 800f0de:	d12b      	bne.n	800f138 <__swbuf_r+0x70>
 800f0e0:	686c      	ldr	r4, [r5, #4]
 800f0e2:	69a3      	ldr	r3, [r4, #24]
 800f0e4:	60a3      	str	r3, [r4, #8]
 800f0e6:	89a3      	ldrh	r3, [r4, #12]
 800f0e8:	071a      	lsls	r2, r3, #28
 800f0ea:	d52f      	bpl.n	800f14c <__swbuf_r+0x84>
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	b36b      	cbz	r3, 800f14c <__swbuf_r+0x84>
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	6820      	ldr	r0, [r4, #0]
 800f0f4:	1ac0      	subs	r0, r0, r3
 800f0f6:	6963      	ldr	r3, [r4, #20]
 800f0f8:	b2f6      	uxtb	r6, r6
 800f0fa:	4283      	cmp	r3, r0
 800f0fc:	4637      	mov	r7, r6
 800f0fe:	dc04      	bgt.n	800f10a <__swbuf_r+0x42>
 800f100:	4621      	mov	r1, r4
 800f102:	4628      	mov	r0, r5
 800f104:	f000 f926 	bl	800f354 <_fflush_r>
 800f108:	bb30      	cbnz	r0, 800f158 <__swbuf_r+0x90>
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	3b01      	subs	r3, #1
 800f10e:	60a3      	str	r3, [r4, #8]
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	1c5a      	adds	r2, r3, #1
 800f114:	6022      	str	r2, [r4, #0]
 800f116:	701e      	strb	r6, [r3, #0]
 800f118:	6963      	ldr	r3, [r4, #20]
 800f11a:	3001      	adds	r0, #1
 800f11c:	4283      	cmp	r3, r0
 800f11e:	d004      	beq.n	800f12a <__swbuf_r+0x62>
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	07db      	lsls	r3, r3, #31
 800f124:	d506      	bpl.n	800f134 <__swbuf_r+0x6c>
 800f126:	2e0a      	cmp	r6, #10
 800f128:	d104      	bne.n	800f134 <__swbuf_r+0x6c>
 800f12a:	4621      	mov	r1, r4
 800f12c:	4628      	mov	r0, r5
 800f12e:	f000 f911 	bl	800f354 <_fflush_r>
 800f132:	b988      	cbnz	r0, 800f158 <__swbuf_r+0x90>
 800f134:	4638      	mov	r0, r7
 800f136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f138:	4b0a      	ldr	r3, [pc, #40]	; (800f164 <__swbuf_r+0x9c>)
 800f13a:	429c      	cmp	r4, r3
 800f13c:	d101      	bne.n	800f142 <__swbuf_r+0x7a>
 800f13e:	68ac      	ldr	r4, [r5, #8]
 800f140:	e7cf      	b.n	800f0e2 <__swbuf_r+0x1a>
 800f142:	4b09      	ldr	r3, [pc, #36]	; (800f168 <__swbuf_r+0xa0>)
 800f144:	429c      	cmp	r4, r3
 800f146:	bf08      	it	eq
 800f148:	68ec      	ldreq	r4, [r5, #12]
 800f14a:	e7ca      	b.n	800f0e2 <__swbuf_r+0x1a>
 800f14c:	4621      	mov	r1, r4
 800f14e:	4628      	mov	r0, r5
 800f150:	f000 f80c 	bl	800f16c <__swsetup_r>
 800f154:	2800      	cmp	r0, #0
 800f156:	d0cb      	beq.n	800f0f0 <__swbuf_r+0x28>
 800f158:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f15c:	e7ea      	b.n	800f134 <__swbuf_r+0x6c>
 800f15e:	bf00      	nop
 800f160:	080107ec 	.word	0x080107ec
 800f164:	0801080c 	.word	0x0801080c
 800f168:	080107cc 	.word	0x080107cc

0800f16c <__swsetup_r>:
 800f16c:	4b32      	ldr	r3, [pc, #200]	; (800f238 <__swsetup_r+0xcc>)
 800f16e:	b570      	push	{r4, r5, r6, lr}
 800f170:	681d      	ldr	r5, [r3, #0]
 800f172:	4606      	mov	r6, r0
 800f174:	460c      	mov	r4, r1
 800f176:	b125      	cbz	r5, 800f182 <__swsetup_r+0x16>
 800f178:	69ab      	ldr	r3, [r5, #24]
 800f17a:	b913      	cbnz	r3, 800f182 <__swsetup_r+0x16>
 800f17c:	4628      	mov	r0, r5
 800f17e:	f000 f97d 	bl	800f47c <__sinit>
 800f182:	4b2e      	ldr	r3, [pc, #184]	; (800f23c <__swsetup_r+0xd0>)
 800f184:	429c      	cmp	r4, r3
 800f186:	d10f      	bne.n	800f1a8 <__swsetup_r+0x3c>
 800f188:	686c      	ldr	r4, [r5, #4]
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f190:	0719      	lsls	r1, r3, #28
 800f192:	d42c      	bmi.n	800f1ee <__swsetup_r+0x82>
 800f194:	06dd      	lsls	r5, r3, #27
 800f196:	d411      	bmi.n	800f1bc <__swsetup_r+0x50>
 800f198:	2309      	movs	r3, #9
 800f19a:	6033      	str	r3, [r6, #0]
 800f19c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1a0:	81a3      	strh	r3, [r4, #12]
 800f1a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1a6:	e03e      	b.n	800f226 <__swsetup_r+0xba>
 800f1a8:	4b25      	ldr	r3, [pc, #148]	; (800f240 <__swsetup_r+0xd4>)
 800f1aa:	429c      	cmp	r4, r3
 800f1ac:	d101      	bne.n	800f1b2 <__swsetup_r+0x46>
 800f1ae:	68ac      	ldr	r4, [r5, #8]
 800f1b0:	e7eb      	b.n	800f18a <__swsetup_r+0x1e>
 800f1b2:	4b24      	ldr	r3, [pc, #144]	; (800f244 <__swsetup_r+0xd8>)
 800f1b4:	429c      	cmp	r4, r3
 800f1b6:	bf08      	it	eq
 800f1b8:	68ec      	ldreq	r4, [r5, #12]
 800f1ba:	e7e6      	b.n	800f18a <__swsetup_r+0x1e>
 800f1bc:	0758      	lsls	r0, r3, #29
 800f1be:	d512      	bpl.n	800f1e6 <__swsetup_r+0x7a>
 800f1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1c2:	b141      	cbz	r1, 800f1d6 <__swsetup_r+0x6a>
 800f1c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1c8:	4299      	cmp	r1, r3
 800f1ca:	d002      	beq.n	800f1d2 <__swsetup_r+0x66>
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	f000 fa59 	bl	800f684 <_free_r>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	6363      	str	r3, [r4, #52]	; 0x34
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f1dc:	81a3      	strh	r3, [r4, #12]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	6063      	str	r3, [r4, #4]
 800f1e2:	6923      	ldr	r3, [r4, #16]
 800f1e4:	6023      	str	r3, [r4, #0]
 800f1e6:	89a3      	ldrh	r3, [r4, #12]
 800f1e8:	f043 0308 	orr.w	r3, r3, #8
 800f1ec:	81a3      	strh	r3, [r4, #12]
 800f1ee:	6923      	ldr	r3, [r4, #16]
 800f1f0:	b94b      	cbnz	r3, 800f206 <__swsetup_r+0x9a>
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1fc:	d003      	beq.n	800f206 <__swsetup_r+0x9a>
 800f1fe:	4621      	mov	r1, r4
 800f200:	4630      	mov	r0, r6
 800f202:	f000 f9ff 	bl	800f604 <__smakebuf_r>
 800f206:	89a0      	ldrh	r0, [r4, #12]
 800f208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f20c:	f010 0301 	ands.w	r3, r0, #1
 800f210:	d00a      	beq.n	800f228 <__swsetup_r+0xbc>
 800f212:	2300      	movs	r3, #0
 800f214:	60a3      	str	r3, [r4, #8]
 800f216:	6963      	ldr	r3, [r4, #20]
 800f218:	425b      	negs	r3, r3
 800f21a:	61a3      	str	r3, [r4, #24]
 800f21c:	6923      	ldr	r3, [r4, #16]
 800f21e:	b943      	cbnz	r3, 800f232 <__swsetup_r+0xc6>
 800f220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f224:	d1ba      	bne.n	800f19c <__swsetup_r+0x30>
 800f226:	bd70      	pop	{r4, r5, r6, pc}
 800f228:	0781      	lsls	r1, r0, #30
 800f22a:	bf58      	it	pl
 800f22c:	6963      	ldrpl	r3, [r4, #20]
 800f22e:	60a3      	str	r3, [r4, #8]
 800f230:	e7f4      	b.n	800f21c <__swsetup_r+0xb0>
 800f232:	2000      	movs	r0, #0
 800f234:	e7f7      	b.n	800f226 <__swsetup_r+0xba>
 800f236:	bf00      	nop
 800f238:	200000b8 	.word	0x200000b8
 800f23c:	080107ec 	.word	0x080107ec
 800f240:	0801080c 	.word	0x0801080c
 800f244:	080107cc 	.word	0x080107cc

0800f248 <__sflush_r>:
 800f248:	898a      	ldrh	r2, [r1, #12]
 800f24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24e:	4605      	mov	r5, r0
 800f250:	0710      	lsls	r0, r2, #28
 800f252:	460c      	mov	r4, r1
 800f254:	d458      	bmi.n	800f308 <__sflush_r+0xc0>
 800f256:	684b      	ldr	r3, [r1, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dc05      	bgt.n	800f268 <__sflush_r+0x20>
 800f25c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f25e:	2b00      	cmp	r3, #0
 800f260:	dc02      	bgt.n	800f268 <__sflush_r+0x20>
 800f262:	2000      	movs	r0, #0
 800f264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f26a:	2e00      	cmp	r6, #0
 800f26c:	d0f9      	beq.n	800f262 <__sflush_r+0x1a>
 800f26e:	2300      	movs	r3, #0
 800f270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f274:	682f      	ldr	r7, [r5, #0]
 800f276:	602b      	str	r3, [r5, #0]
 800f278:	d032      	beq.n	800f2e0 <__sflush_r+0x98>
 800f27a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	075a      	lsls	r2, r3, #29
 800f280:	d505      	bpl.n	800f28e <__sflush_r+0x46>
 800f282:	6863      	ldr	r3, [r4, #4]
 800f284:	1ac0      	subs	r0, r0, r3
 800f286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f288:	b10b      	cbz	r3, 800f28e <__sflush_r+0x46>
 800f28a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f28c:	1ac0      	subs	r0, r0, r3
 800f28e:	2300      	movs	r3, #0
 800f290:	4602      	mov	r2, r0
 800f292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f294:	6a21      	ldr	r1, [r4, #32]
 800f296:	4628      	mov	r0, r5
 800f298:	47b0      	blx	r6
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	d106      	bne.n	800f2ae <__sflush_r+0x66>
 800f2a0:	6829      	ldr	r1, [r5, #0]
 800f2a2:	291d      	cmp	r1, #29
 800f2a4:	d82c      	bhi.n	800f300 <__sflush_r+0xb8>
 800f2a6:	4a2a      	ldr	r2, [pc, #168]	; (800f350 <__sflush_r+0x108>)
 800f2a8:	40ca      	lsrs	r2, r1
 800f2aa:	07d6      	lsls	r6, r2, #31
 800f2ac:	d528      	bpl.n	800f300 <__sflush_r+0xb8>
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	6062      	str	r2, [r4, #4]
 800f2b2:	04d9      	lsls	r1, r3, #19
 800f2b4:	6922      	ldr	r2, [r4, #16]
 800f2b6:	6022      	str	r2, [r4, #0]
 800f2b8:	d504      	bpl.n	800f2c4 <__sflush_r+0x7c>
 800f2ba:	1c42      	adds	r2, r0, #1
 800f2bc:	d101      	bne.n	800f2c2 <__sflush_r+0x7a>
 800f2be:	682b      	ldr	r3, [r5, #0]
 800f2c0:	b903      	cbnz	r3, 800f2c4 <__sflush_r+0x7c>
 800f2c2:	6560      	str	r0, [r4, #84]	; 0x54
 800f2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2c6:	602f      	str	r7, [r5, #0]
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	d0ca      	beq.n	800f262 <__sflush_r+0x1a>
 800f2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2d0:	4299      	cmp	r1, r3
 800f2d2:	d002      	beq.n	800f2da <__sflush_r+0x92>
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f000 f9d5 	bl	800f684 <_free_r>
 800f2da:	2000      	movs	r0, #0
 800f2dc:	6360      	str	r0, [r4, #52]	; 0x34
 800f2de:	e7c1      	b.n	800f264 <__sflush_r+0x1c>
 800f2e0:	6a21      	ldr	r1, [r4, #32]
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	47b0      	blx	r6
 800f2e8:	1c41      	adds	r1, r0, #1
 800f2ea:	d1c7      	bne.n	800f27c <__sflush_r+0x34>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0c4      	beq.n	800f27c <__sflush_r+0x34>
 800f2f2:	2b1d      	cmp	r3, #29
 800f2f4:	d001      	beq.n	800f2fa <__sflush_r+0xb2>
 800f2f6:	2b16      	cmp	r3, #22
 800f2f8:	d101      	bne.n	800f2fe <__sflush_r+0xb6>
 800f2fa:	602f      	str	r7, [r5, #0]
 800f2fc:	e7b1      	b.n	800f262 <__sflush_r+0x1a>
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	e7ad      	b.n	800f264 <__sflush_r+0x1c>
 800f308:	690f      	ldr	r7, [r1, #16]
 800f30a:	2f00      	cmp	r7, #0
 800f30c:	d0a9      	beq.n	800f262 <__sflush_r+0x1a>
 800f30e:	0793      	lsls	r3, r2, #30
 800f310:	680e      	ldr	r6, [r1, #0]
 800f312:	bf08      	it	eq
 800f314:	694b      	ldreq	r3, [r1, #20]
 800f316:	600f      	str	r7, [r1, #0]
 800f318:	bf18      	it	ne
 800f31a:	2300      	movne	r3, #0
 800f31c:	eba6 0807 	sub.w	r8, r6, r7
 800f320:	608b      	str	r3, [r1, #8]
 800f322:	f1b8 0f00 	cmp.w	r8, #0
 800f326:	dd9c      	ble.n	800f262 <__sflush_r+0x1a>
 800f328:	6a21      	ldr	r1, [r4, #32]
 800f32a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f32c:	4643      	mov	r3, r8
 800f32e:	463a      	mov	r2, r7
 800f330:	4628      	mov	r0, r5
 800f332:	47b0      	blx	r6
 800f334:	2800      	cmp	r0, #0
 800f336:	dc06      	bgt.n	800f346 <__sflush_r+0xfe>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f33e:	81a3      	strh	r3, [r4, #12]
 800f340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f344:	e78e      	b.n	800f264 <__sflush_r+0x1c>
 800f346:	4407      	add	r7, r0
 800f348:	eba8 0800 	sub.w	r8, r8, r0
 800f34c:	e7e9      	b.n	800f322 <__sflush_r+0xda>
 800f34e:	bf00      	nop
 800f350:	20400001 	.word	0x20400001

0800f354 <_fflush_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	690b      	ldr	r3, [r1, #16]
 800f358:	4605      	mov	r5, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	b913      	cbnz	r3, 800f364 <_fflush_r+0x10>
 800f35e:	2500      	movs	r5, #0
 800f360:	4628      	mov	r0, r5
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	b118      	cbz	r0, 800f36e <_fflush_r+0x1a>
 800f366:	6983      	ldr	r3, [r0, #24]
 800f368:	b90b      	cbnz	r3, 800f36e <_fflush_r+0x1a>
 800f36a:	f000 f887 	bl	800f47c <__sinit>
 800f36e:	4b14      	ldr	r3, [pc, #80]	; (800f3c0 <_fflush_r+0x6c>)
 800f370:	429c      	cmp	r4, r3
 800f372:	d11b      	bne.n	800f3ac <_fflush_r+0x58>
 800f374:	686c      	ldr	r4, [r5, #4]
 800f376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d0ef      	beq.n	800f35e <_fflush_r+0xa>
 800f37e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f380:	07d0      	lsls	r0, r2, #31
 800f382:	d404      	bmi.n	800f38e <_fflush_r+0x3a>
 800f384:	0599      	lsls	r1, r3, #22
 800f386:	d402      	bmi.n	800f38e <_fflush_r+0x3a>
 800f388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f38a:	f000 f915 	bl	800f5b8 <__retarget_lock_acquire_recursive>
 800f38e:	4628      	mov	r0, r5
 800f390:	4621      	mov	r1, r4
 800f392:	f7ff ff59 	bl	800f248 <__sflush_r>
 800f396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f398:	07da      	lsls	r2, r3, #31
 800f39a:	4605      	mov	r5, r0
 800f39c:	d4e0      	bmi.n	800f360 <_fflush_r+0xc>
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	059b      	lsls	r3, r3, #22
 800f3a2:	d4dd      	bmi.n	800f360 <_fflush_r+0xc>
 800f3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3a6:	f000 f908 	bl	800f5ba <__retarget_lock_release_recursive>
 800f3aa:	e7d9      	b.n	800f360 <_fflush_r+0xc>
 800f3ac:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <_fflush_r+0x70>)
 800f3ae:	429c      	cmp	r4, r3
 800f3b0:	d101      	bne.n	800f3b6 <_fflush_r+0x62>
 800f3b2:	68ac      	ldr	r4, [r5, #8]
 800f3b4:	e7df      	b.n	800f376 <_fflush_r+0x22>
 800f3b6:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <_fflush_r+0x74>)
 800f3b8:	429c      	cmp	r4, r3
 800f3ba:	bf08      	it	eq
 800f3bc:	68ec      	ldreq	r4, [r5, #12]
 800f3be:	e7da      	b.n	800f376 <_fflush_r+0x22>
 800f3c0:	080107ec 	.word	0x080107ec
 800f3c4:	0801080c 	.word	0x0801080c
 800f3c8:	080107cc 	.word	0x080107cc

0800f3cc <std>:
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	b510      	push	{r4, lr}
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	e9c0 3300 	strd	r3, r3, [r0]
 800f3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3da:	6083      	str	r3, [r0, #8]
 800f3dc:	8181      	strh	r1, [r0, #12]
 800f3de:	6643      	str	r3, [r0, #100]	; 0x64
 800f3e0:	81c2      	strh	r2, [r0, #14]
 800f3e2:	6183      	str	r3, [r0, #24]
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	2208      	movs	r2, #8
 800f3e8:	305c      	adds	r0, #92	; 0x5c
 800f3ea:	f7ff fdd7 	bl	800ef9c <memset>
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <std+0x38>)
 800f3f0:	6263      	str	r3, [r4, #36]	; 0x24
 800f3f2:	4b05      	ldr	r3, [pc, #20]	; (800f408 <std+0x3c>)
 800f3f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3f6:	4b05      	ldr	r3, [pc, #20]	; (800f40c <std+0x40>)
 800f3f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3fa:	4b05      	ldr	r3, [pc, #20]	; (800f410 <std+0x44>)
 800f3fc:	6224      	str	r4, [r4, #32]
 800f3fe:	6323      	str	r3, [r4, #48]	; 0x30
 800f400:	bd10      	pop	{r4, pc}
 800f402:	bf00      	nop
 800f404:	0800fdd5 	.word	0x0800fdd5
 800f408:	0800fdf7 	.word	0x0800fdf7
 800f40c:	0800fe2f 	.word	0x0800fe2f
 800f410:	0800fe53 	.word	0x0800fe53

0800f414 <_cleanup_r>:
 800f414:	4901      	ldr	r1, [pc, #4]	; (800f41c <_cleanup_r+0x8>)
 800f416:	f000 b8af 	b.w	800f578 <_fwalk_reent>
 800f41a:	bf00      	nop
 800f41c:	0800f355 	.word	0x0800f355

0800f420 <__sfmoreglue>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	1e4a      	subs	r2, r1, #1
 800f424:	2568      	movs	r5, #104	; 0x68
 800f426:	4355      	muls	r5, r2
 800f428:	460e      	mov	r6, r1
 800f42a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f42e:	f000 f979 	bl	800f724 <_malloc_r>
 800f432:	4604      	mov	r4, r0
 800f434:	b140      	cbz	r0, 800f448 <__sfmoreglue+0x28>
 800f436:	2100      	movs	r1, #0
 800f438:	e9c0 1600 	strd	r1, r6, [r0]
 800f43c:	300c      	adds	r0, #12
 800f43e:	60a0      	str	r0, [r4, #8]
 800f440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f444:	f7ff fdaa 	bl	800ef9c <memset>
 800f448:	4620      	mov	r0, r4
 800f44a:	bd70      	pop	{r4, r5, r6, pc}

0800f44c <__sfp_lock_acquire>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__sfp_lock_acquire+0x8>)
 800f44e:	f000 b8b3 	b.w	800f5b8 <__retarget_lock_acquire_recursive>
 800f452:	bf00      	nop
 800f454:	2000f9e4 	.word	0x2000f9e4

0800f458 <__sfp_lock_release>:
 800f458:	4801      	ldr	r0, [pc, #4]	; (800f460 <__sfp_lock_release+0x8>)
 800f45a:	f000 b8ae 	b.w	800f5ba <__retarget_lock_release_recursive>
 800f45e:	bf00      	nop
 800f460:	2000f9e4 	.word	0x2000f9e4

0800f464 <__sinit_lock_acquire>:
 800f464:	4801      	ldr	r0, [pc, #4]	; (800f46c <__sinit_lock_acquire+0x8>)
 800f466:	f000 b8a7 	b.w	800f5b8 <__retarget_lock_acquire_recursive>
 800f46a:	bf00      	nop
 800f46c:	2000f9df 	.word	0x2000f9df

0800f470 <__sinit_lock_release>:
 800f470:	4801      	ldr	r0, [pc, #4]	; (800f478 <__sinit_lock_release+0x8>)
 800f472:	f000 b8a2 	b.w	800f5ba <__retarget_lock_release_recursive>
 800f476:	bf00      	nop
 800f478:	2000f9df 	.word	0x2000f9df

0800f47c <__sinit>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	4604      	mov	r4, r0
 800f480:	f7ff fff0 	bl	800f464 <__sinit_lock_acquire>
 800f484:	69a3      	ldr	r3, [r4, #24]
 800f486:	b11b      	cbz	r3, 800f490 <__sinit+0x14>
 800f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f48c:	f7ff bff0 	b.w	800f470 <__sinit_lock_release>
 800f490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f494:	6523      	str	r3, [r4, #80]	; 0x50
 800f496:	4b13      	ldr	r3, [pc, #76]	; (800f4e4 <__sinit+0x68>)
 800f498:	4a13      	ldr	r2, [pc, #76]	; (800f4e8 <__sinit+0x6c>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f49e:	42a3      	cmp	r3, r4
 800f4a0:	bf04      	itt	eq
 800f4a2:	2301      	moveq	r3, #1
 800f4a4:	61a3      	streq	r3, [r4, #24]
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f000 f820 	bl	800f4ec <__sfp>
 800f4ac:	6060      	str	r0, [r4, #4]
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f000 f81c 	bl	800f4ec <__sfp>
 800f4b4:	60a0      	str	r0, [r4, #8]
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f000 f818 	bl	800f4ec <__sfp>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	60e0      	str	r0, [r4, #12]
 800f4c0:	2104      	movs	r1, #4
 800f4c2:	6860      	ldr	r0, [r4, #4]
 800f4c4:	f7ff ff82 	bl	800f3cc <std>
 800f4c8:	68a0      	ldr	r0, [r4, #8]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	2109      	movs	r1, #9
 800f4ce:	f7ff ff7d 	bl	800f3cc <std>
 800f4d2:	68e0      	ldr	r0, [r4, #12]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	2112      	movs	r1, #18
 800f4d8:	f7ff ff78 	bl	800f3cc <std>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	61a3      	str	r3, [r4, #24]
 800f4e0:	e7d2      	b.n	800f488 <__sinit+0xc>
 800f4e2:	bf00      	nop
 800f4e4:	080107c8 	.word	0x080107c8
 800f4e8:	0800f415 	.word	0x0800f415

0800f4ec <__sfp>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	f7ff ffac 	bl	800f44c <__sfp_lock_acquire>
 800f4f4:	4b1e      	ldr	r3, [pc, #120]	; (800f570 <__sfp+0x84>)
 800f4f6:	681e      	ldr	r6, [r3, #0]
 800f4f8:	69b3      	ldr	r3, [r6, #24]
 800f4fa:	b913      	cbnz	r3, 800f502 <__sfp+0x16>
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f7ff ffbd 	bl	800f47c <__sinit>
 800f502:	3648      	adds	r6, #72	; 0x48
 800f504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f508:	3b01      	subs	r3, #1
 800f50a:	d503      	bpl.n	800f514 <__sfp+0x28>
 800f50c:	6833      	ldr	r3, [r6, #0]
 800f50e:	b30b      	cbz	r3, 800f554 <__sfp+0x68>
 800f510:	6836      	ldr	r6, [r6, #0]
 800f512:	e7f7      	b.n	800f504 <__sfp+0x18>
 800f514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f518:	b9d5      	cbnz	r5, 800f550 <__sfp+0x64>
 800f51a:	4b16      	ldr	r3, [pc, #88]	; (800f574 <__sfp+0x88>)
 800f51c:	60e3      	str	r3, [r4, #12]
 800f51e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f522:	6665      	str	r5, [r4, #100]	; 0x64
 800f524:	f000 f847 	bl	800f5b6 <__retarget_lock_init_recursive>
 800f528:	f7ff ff96 	bl	800f458 <__sfp_lock_release>
 800f52c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f534:	6025      	str	r5, [r4, #0]
 800f536:	61a5      	str	r5, [r4, #24]
 800f538:	2208      	movs	r2, #8
 800f53a:	4629      	mov	r1, r5
 800f53c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f540:	f7ff fd2c 	bl	800ef9c <memset>
 800f544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f54c:	4620      	mov	r0, r4
 800f54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f550:	3468      	adds	r4, #104	; 0x68
 800f552:	e7d9      	b.n	800f508 <__sfp+0x1c>
 800f554:	2104      	movs	r1, #4
 800f556:	4638      	mov	r0, r7
 800f558:	f7ff ff62 	bl	800f420 <__sfmoreglue>
 800f55c:	4604      	mov	r4, r0
 800f55e:	6030      	str	r0, [r6, #0]
 800f560:	2800      	cmp	r0, #0
 800f562:	d1d5      	bne.n	800f510 <__sfp+0x24>
 800f564:	f7ff ff78 	bl	800f458 <__sfp_lock_release>
 800f568:	230c      	movs	r3, #12
 800f56a:	603b      	str	r3, [r7, #0]
 800f56c:	e7ee      	b.n	800f54c <__sfp+0x60>
 800f56e:	bf00      	nop
 800f570:	080107c8 	.word	0x080107c8
 800f574:	ffff0001 	.word	0xffff0001

0800f578 <_fwalk_reent>:
 800f578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f57c:	4606      	mov	r6, r0
 800f57e:	4688      	mov	r8, r1
 800f580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f584:	2700      	movs	r7, #0
 800f586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f58a:	f1b9 0901 	subs.w	r9, r9, #1
 800f58e:	d505      	bpl.n	800f59c <_fwalk_reent+0x24>
 800f590:	6824      	ldr	r4, [r4, #0]
 800f592:	2c00      	cmp	r4, #0
 800f594:	d1f7      	bne.n	800f586 <_fwalk_reent+0xe>
 800f596:	4638      	mov	r0, r7
 800f598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59c:	89ab      	ldrh	r3, [r5, #12]
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d907      	bls.n	800f5b2 <_fwalk_reent+0x3a>
 800f5a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	d003      	beq.n	800f5b2 <_fwalk_reent+0x3a>
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	47c0      	blx	r8
 800f5b0:	4307      	orrs	r7, r0
 800f5b2:	3568      	adds	r5, #104	; 0x68
 800f5b4:	e7e9      	b.n	800f58a <_fwalk_reent+0x12>

0800f5b6 <__retarget_lock_init_recursive>:
 800f5b6:	4770      	bx	lr

0800f5b8 <__retarget_lock_acquire_recursive>:
 800f5b8:	4770      	bx	lr

0800f5ba <__retarget_lock_release_recursive>:
 800f5ba:	4770      	bx	lr

0800f5bc <__swhatbuf_r>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	460e      	mov	r6, r1
 800f5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c4:	2900      	cmp	r1, #0
 800f5c6:	b096      	sub	sp, #88	; 0x58
 800f5c8:	4614      	mov	r4, r2
 800f5ca:	461d      	mov	r5, r3
 800f5cc:	da07      	bge.n	800f5de <__swhatbuf_r+0x22>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	602b      	str	r3, [r5, #0]
 800f5d2:	89b3      	ldrh	r3, [r6, #12]
 800f5d4:	061a      	lsls	r2, r3, #24
 800f5d6:	d410      	bmi.n	800f5fa <__swhatbuf_r+0x3e>
 800f5d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5dc:	e00e      	b.n	800f5fc <__swhatbuf_r+0x40>
 800f5de:	466a      	mov	r2, sp
 800f5e0:	f000 fc5e 	bl	800fea0 <_fstat_r>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	dbf2      	blt.n	800f5ce <__swhatbuf_r+0x12>
 800f5e8:	9a01      	ldr	r2, [sp, #4]
 800f5ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f5ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f5f2:	425a      	negs	r2, r3
 800f5f4:	415a      	adcs	r2, r3
 800f5f6:	602a      	str	r2, [r5, #0]
 800f5f8:	e7ee      	b.n	800f5d8 <__swhatbuf_r+0x1c>
 800f5fa:	2340      	movs	r3, #64	; 0x40
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	6023      	str	r3, [r4, #0]
 800f600:	b016      	add	sp, #88	; 0x58
 800f602:	bd70      	pop	{r4, r5, r6, pc}

0800f604 <__smakebuf_r>:
 800f604:	898b      	ldrh	r3, [r1, #12]
 800f606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f608:	079d      	lsls	r5, r3, #30
 800f60a:	4606      	mov	r6, r0
 800f60c:	460c      	mov	r4, r1
 800f60e:	d507      	bpl.n	800f620 <__smakebuf_r+0x1c>
 800f610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	6123      	str	r3, [r4, #16]
 800f618:	2301      	movs	r3, #1
 800f61a:	6163      	str	r3, [r4, #20]
 800f61c:	b002      	add	sp, #8
 800f61e:	bd70      	pop	{r4, r5, r6, pc}
 800f620:	ab01      	add	r3, sp, #4
 800f622:	466a      	mov	r2, sp
 800f624:	f7ff ffca 	bl	800f5bc <__swhatbuf_r>
 800f628:	9900      	ldr	r1, [sp, #0]
 800f62a:	4605      	mov	r5, r0
 800f62c:	4630      	mov	r0, r6
 800f62e:	f000 f879 	bl	800f724 <_malloc_r>
 800f632:	b948      	cbnz	r0, 800f648 <__smakebuf_r+0x44>
 800f634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f638:	059a      	lsls	r2, r3, #22
 800f63a:	d4ef      	bmi.n	800f61c <__smakebuf_r+0x18>
 800f63c:	f023 0303 	bic.w	r3, r3, #3
 800f640:	f043 0302 	orr.w	r3, r3, #2
 800f644:	81a3      	strh	r3, [r4, #12]
 800f646:	e7e3      	b.n	800f610 <__smakebuf_r+0xc>
 800f648:	4b0d      	ldr	r3, [pc, #52]	; (800f680 <__smakebuf_r+0x7c>)
 800f64a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	6020      	str	r0, [r4, #0]
 800f650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f654:	81a3      	strh	r3, [r4, #12]
 800f656:	9b00      	ldr	r3, [sp, #0]
 800f658:	6163      	str	r3, [r4, #20]
 800f65a:	9b01      	ldr	r3, [sp, #4]
 800f65c:	6120      	str	r0, [r4, #16]
 800f65e:	b15b      	cbz	r3, 800f678 <__smakebuf_r+0x74>
 800f660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f664:	4630      	mov	r0, r6
 800f666:	f000 fc2d 	bl	800fec4 <_isatty_r>
 800f66a:	b128      	cbz	r0, 800f678 <__smakebuf_r+0x74>
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	f023 0303 	bic.w	r3, r3, #3
 800f672:	f043 0301 	orr.w	r3, r3, #1
 800f676:	81a3      	strh	r3, [r4, #12]
 800f678:	89a0      	ldrh	r0, [r4, #12]
 800f67a:	4305      	orrs	r5, r0
 800f67c:	81a5      	strh	r5, [r4, #12]
 800f67e:	e7cd      	b.n	800f61c <__smakebuf_r+0x18>
 800f680:	0800f415 	.word	0x0800f415

0800f684 <_free_r>:
 800f684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f686:	2900      	cmp	r1, #0
 800f688:	d048      	beq.n	800f71c <_free_r+0x98>
 800f68a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f68e:	9001      	str	r0, [sp, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	f1a1 0404 	sub.w	r4, r1, #4
 800f696:	bfb8      	it	lt
 800f698:	18e4      	addlt	r4, r4, r3
 800f69a:	f000 fc35 	bl	800ff08 <__malloc_lock>
 800f69e:	4a20      	ldr	r2, [pc, #128]	; (800f720 <_free_r+0x9c>)
 800f6a0:	9801      	ldr	r0, [sp, #4]
 800f6a2:	6813      	ldr	r3, [r2, #0]
 800f6a4:	4615      	mov	r5, r2
 800f6a6:	b933      	cbnz	r3, 800f6b6 <_free_r+0x32>
 800f6a8:	6063      	str	r3, [r4, #4]
 800f6aa:	6014      	str	r4, [r2, #0]
 800f6ac:	b003      	add	sp, #12
 800f6ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6b2:	f000 bc2f 	b.w	800ff14 <__malloc_unlock>
 800f6b6:	42a3      	cmp	r3, r4
 800f6b8:	d90b      	bls.n	800f6d2 <_free_r+0x4e>
 800f6ba:	6821      	ldr	r1, [r4, #0]
 800f6bc:	1862      	adds	r2, r4, r1
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	bf04      	itt	eq
 800f6c2:	681a      	ldreq	r2, [r3, #0]
 800f6c4:	685b      	ldreq	r3, [r3, #4]
 800f6c6:	6063      	str	r3, [r4, #4]
 800f6c8:	bf04      	itt	eq
 800f6ca:	1852      	addeq	r2, r2, r1
 800f6cc:	6022      	streq	r2, [r4, #0]
 800f6ce:	602c      	str	r4, [r5, #0]
 800f6d0:	e7ec      	b.n	800f6ac <_free_r+0x28>
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	b10b      	cbz	r3, 800f6dc <_free_r+0x58>
 800f6d8:	42a3      	cmp	r3, r4
 800f6da:	d9fa      	bls.n	800f6d2 <_free_r+0x4e>
 800f6dc:	6811      	ldr	r1, [r2, #0]
 800f6de:	1855      	adds	r5, r2, r1
 800f6e0:	42a5      	cmp	r5, r4
 800f6e2:	d10b      	bne.n	800f6fc <_free_r+0x78>
 800f6e4:	6824      	ldr	r4, [r4, #0]
 800f6e6:	4421      	add	r1, r4
 800f6e8:	1854      	adds	r4, r2, r1
 800f6ea:	42a3      	cmp	r3, r4
 800f6ec:	6011      	str	r1, [r2, #0]
 800f6ee:	d1dd      	bne.n	800f6ac <_free_r+0x28>
 800f6f0:	681c      	ldr	r4, [r3, #0]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	6053      	str	r3, [r2, #4]
 800f6f6:	4421      	add	r1, r4
 800f6f8:	6011      	str	r1, [r2, #0]
 800f6fa:	e7d7      	b.n	800f6ac <_free_r+0x28>
 800f6fc:	d902      	bls.n	800f704 <_free_r+0x80>
 800f6fe:	230c      	movs	r3, #12
 800f700:	6003      	str	r3, [r0, #0]
 800f702:	e7d3      	b.n	800f6ac <_free_r+0x28>
 800f704:	6825      	ldr	r5, [r4, #0]
 800f706:	1961      	adds	r1, r4, r5
 800f708:	428b      	cmp	r3, r1
 800f70a:	bf04      	itt	eq
 800f70c:	6819      	ldreq	r1, [r3, #0]
 800f70e:	685b      	ldreq	r3, [r3, #4]
 800f710:	6063      	str	r3, [r4, #4]
 800f712:	bf04      	itt	eq
 800f714:	1949      	addeq	r1, r1, r5
 800f716:	6021      	streq	r1, [r4, #0]
 800f718:	6054      	str	r4, [r2, #4]
 800f71a:	e7c7      	b.n	800f6ac <_free_r+0x28>
 800f71c:	b003      	add	sp, #12
 800f71e:	bd30      	pop	{r4, r5, pc}
 800f720:	20003598 	.word	0x20003598

0800f724 <_malloc_r>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	1ccd      	adds	r5, r1, #3
 800f728:	f025 0503 	bic.w	r5, r5, #3
 800f72c:	3508      	adds	r5, #8
 800f72e:	2d0c      	cmp	r5, #12
 800f730:	bf38      	it	cc
 800f732:	250c      	movcc	r5, #12
 800f734:	2d00      	cmp	r5, #0
 800f736:	4606      	mov	r6, r0
 800f738:	db01      	blt.n	800f73e <_malloc_r+0x1a>
 800f73a:	42a9      	cmp	r1, r5
 800f73c:	d903      	bls.n	800f746 <_malloc_r+0x22>
 800f73e:	230c      	movs	r3, #12
 800f740:	6033      	str	r3, [r6, #0]
 800f742:	2000      	movs	r0, #0
 800f744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f746:	f000 fbdf 	bl	800ff08 <__malloc_lock>
 800f74a:	4921      	ldr	r1, [pc, #132]	; (800f7d0 <_malloc_r+0xac>)
 800f74c:	680a      	ldr	r2, [r1, #0]
 800f74e:	4614      	mov	r4, r2
 800f750:	b99c      	cbnz	r4, 800f77a <_malloc_r+0x56>
 800f752:	4f20      	ldr	r7, [pc, #128]	; (800f7d4 <_malloc_r+0xb0>)
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	b923      	cbnz	r3, 800f762 <_malloc_r+0x3e>
 800f758:	4621      	mov	r1, r4
 800f75a:	4630      	mov	r0, r6
 800f75c:	f000 fb2a 	bl	800fdb4 <_sbrk_r>
 800f760:	6038      	str	r0, [r7, #0]
 800f762:	4629      	mov	r1, r5
 800f764:	4630      	mov	r0, r6
 800f766:	f000 fb25 	bl	800fdb4 <_sbrk_r>
 800f76a:	1c43      	adds	r3, r0, #1
 800f76c:	d123      	bne.n	800f7b6 <_malloc_r+0x92>
 800f76e:	230c      	movs	r3, #12
 800f770:	6033      	str	r3, [r6, #0]
 800f772:	4630      	mov	r0, r6
 800f774:	f000 fbce 	bl	800ff14 <__malloc_unlock>
 800f778:	e7e3      	b.n	800f742 <_malloc_r+0x1e>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	1b5b      	subs	r3, r3, r5
 800f77e:	d417      	bmi.n	800f7b0 <_malloc_r+0x8c>
 800f780:	2b0b      	cmp	r3, #11
 800f782:	d903      	bls.n	800f78c <_malloc_r+0x68>
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	441c      	add	r4, r3
 800f788:	6025      	str	r5, [r4, #0]
 800f78a:	e004      	b.n	800f796 <_malloc_r+0x72>
 800f78c:	6863      	ldr	r3, [r4, #4]
 800f78e:	42a2      	cmp	r2, r4
 800f790:	bf0c      	ite	eq
 800f792:	600b      	streq	r3, [r1, #0]
 800f794:	6053      	strne	r3, [r2, #4]
 800f796:	4630      	mov	r0, r6
 800f798:	f000 fbbc 	bl	800ff14 <__malloc_unlock>
 800f79c:	f104 000b 	add.w	r0, r4, #11
 800f7a0:	1d23      	adds	r3, r4, #4
 800f7a2:	f020 0007 	bic.w	r0, r0, #7
 800f7a6:	1ac2      	subs	r2, r0, r3
 800f7a8:	d0cc      	beq.n	800f744 <_malloc_r+0x20>
 800f7aa:	1a1b      	subs	r3, r3, r0
 800f7ac:	50a3      	str	r3, [r4, r2]
 800f7ae:	e7c9      	b.n	800f744 <_malloc_r+0x20>
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	6864      	ldr	r4, [r4, #4]
 800f7b4:	e7cc      	b.n	800f750 <_malloc_r+0x2c>
 800f7b6:	1cc4      	adds	r4, r0, #3
 800f7b8:	f024 0403 	bic.w	r4, r4, #3
 800f7bc:	42a0      	cmp	r0, r4
 800f7be:	d0e3      	beq.n	800f788 <_malloc_r+0x64>
 800f7c0:	1a21      	subs	r1, r4, r0
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f000 faf6 	bl	800fdb4 <_sbrk_r>
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	d1dd      	bne.n	800f788 <_malloc_r+0x64>
 800f7cc:	e7cf      	b.n	800f76e <_malloc_r+0x4a>
 800f7ce:	bf00      	nop
 800f7d0:	20003598 	.word	0x20003598
 800f7d4:	2000359c 	.word	0x2000359c

0800f7d8 <__sfputc_r>:
 800f7d8:	6893      	ldr	r3, [r2, #8]
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	b410      	push	{r4}
 800f7e0:	6093      	str	r3, [r2, #8]
 800f7e2:	da08      	bge.n	800f7f6 <__sfputc_r+0x1e>
 800f7e4:	6994      	ldr	r4, [r2, #24]
 800f7e6:	42a3      	cmp	r3, r4
 800f7e8:	db01      	blt.n	800f7ee <__sfputc_r+0x16>
 800f7ea:	290a      	cmp	r1, #10
 800f7ec:	d103      	bne.n	800f7f6 <__sfputc_r+0x1e>
 800f7ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f2:	f7ff bc69 	b.w	800f0c8 <__swbuf_r>
 800f7f6:	6813      	ldr	r3, [r2, #0]
 800f7f8:	1c58      	adds	r0, r3, #1
 800f7fa:	6010      	str	r0, [r2, #0]
 800f7fc:	7019      	strb	r1, [r3, #0]
 800f7fe:	4608      	mov	r0, r1
 800f800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <__sfputs_r>:
 800f806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f808:	4606      	mov	r6, r0
 800f80a:	460f      	mov	r7, r1
 800f80c:	4614      	mov	r4, r2
 800f80e:	18d5      	adds	r5, r2, r3
 800f810:	42ac      	cmp	r4, r5
 800f812:	d101      	bne.n	800f818 <__sfputs_r+0x12>
 800f814:	2000      	movs	r0, #0
 800f816:	e007      	b.n	800f828 <__sfputs_r+0x22>
 800f818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81c:	463a      	mov	r2, r7
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff ffda 	bl	800f7d8 <__sfputc_r>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d1f3      	bne.n	800f810 <__sfputs_r+0xa>
 800f828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f82c <_vfiprintf_r>:
 800f82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	460d      	mov	r5, r1
 800f832:	b09d      	sub	sp, #116	; 0x74
 800f834:	4614      	mov	r4, r2
 800f836:	4698      	mov	r8, r3
 800f838:	4606      	mov	r6, r0
 800f83a:	b118      	cbz	r0, 800f844 <_vfiprintf_r+0x18>
 800f83c:	6983      	ldr	r3, [r0, #24]
 800f83e:	b90b      	cbnz	r3, 800f844 <_vfiprintf_r+0x18>
 800f840:	f7ff fe1c 	bl	800f47c <__sinit>
 800f844:	4b89      	ldr	r3, [pc, #548]	; (800fa6c <_vfiprintf_r+0x240>)
 800f846:	429d      	cmp	r5, r3
 800f848:	d11b      	bne.n	800f882 <_vfiprintf_r+0x56>
 800f84a:	6875      	ldr	r5, [r6, #4]
 800f84c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f84e:	07d9      	lsls	r1, r3, #31
 800f850:	d405      	bmi.n	800f85e <_vfiprintf_r+0x32>
 800f852:	89ab      	ldrh	r3, [r5, #12]
 800f854:	059a      	lsls	r2, r3, #22
 800f856:	d402      	bmi.n	800f85e <_vfiprintf_r+0x32>
 800f858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f85a:	f7ff fead 	bl	800f5b8 <__retarget_lock_acquire_recursive>
 800f85e:	89ab      	ldrh	r3, [r5, #12]
 800f860:	071b      	lsls	r3, r3, #28
 800f862:	d501      	bpl.n	800f868 <_vfiprintf_r+0x3c>
 800f864:	692b      	ldr	r3, [r5, #16]
 800f866:	b9eb      	cbnz	r3, 800f8a4 <_vfiprintf_r+0x78>
 800f868:	4629      	mov	r1, r5
 800f86a:	4630      	mov	r0, r6
 800f86c:	f7ff fc7e 	bl	800f16c <__swsetup_r>
 800f870:	b1c0      	cbz	r0, 800f8a4 <_vfiprintf_r+0x78>
 800f872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f874:	07dc      	lsls	r4, r3, #31
 800f876:	d50e      	bpl.n	800f896 <_vfiprintf_r+0x6a>
 800f878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f87c:	b01d      	add	sp, #116	; 0x74
 800f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f882:	4b7b      	ldr	r3, [pc, #492]	; (800fa70 <_vfiprintf_r+0x244>)
 800f884:	429d      	cmp	r5, r3
 800f886:	d101      	bne.n	800f88c <_vfiprintf_r+0x60>
 800f888:	68b5      	ldr	r5, [r6, #8]
 800f88a:	e7df      	b.n	800f84c <_vfiprintf_r+0x20>
 800f88c:	4b79      	ldr	r3, [pc, #484]	; (800fa74 <_vfiprintf_r+0x248>)
 800f88e:	429d      	cmp	r5, r3
 800f890:	bf08      	it	eq
 800f892:	68f5      	ldreq	r5, [r6, #12]
 800f894:	e7da      	b.n	800f84c <_vfiprintf_r+0x20>
 800f896:	89ab      	ldrh	r3, [r5, #12]
 800f898:	0598      	lsls	r0, r3, #22
 800f89a:	d4ed      	bmi.n	800f878 <_vfiprintf_r+0x4c>
 800f89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f89e:	f7ff fe8c 	bl	800f5ba <__retarget_lock_release_recursive>
 800f8a2:	e7e9      	b.n	800f878 <_vfiprintf_r+0x4c>
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8a8:	2320      	movs	r3, #32
 800f8aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8b2:	2330      	movs	r3, #48	; 0x30
 800f8b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa78 <_vfiprintf_r+0x24c>
 800f8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8bc:	f04f 0901 	mov.w	r9, #1
 800f8c0:	4623      	mov	r3, r4
 800f8c2:	469a      	mov	sl, r3
 800f8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8c8:	b10a      	cbz	r2, 800f8ce <_vfiprintf_r+0xa2>
 800f8ca:	2a25      	cmp	r2, #37	; 0x25
 800f8cc:	d1f9      	bne.n	800f8c2 <_vfiprintf_r+0x96>
 800f8ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f8d2:	d00b      	beq.n	800f8ec <_vfiprintf_r+0xc0>
 800f8d4:	465b      	mov	r3, fp
 800f8d6:	4622      	mov	r2, r4
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7ff ff93 	bl	800f806 <__sfputs_r>
 800f8e0:	3001      	adds	r0, #1
 800f8e2:	f000 80aa 	beq.w	800fa3a <_vfiprintf_r+0x20e>
 800f8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8e8:	445a      	add	r2, fp
 800f8ea:	9209      	str	r2, [sp, #36]	; 0x24
 800f8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 80a2 	beq.w	800fa3a <_vfiprintf_r+0x20e>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f900:	f10a 0a01 	add.w	sl, sl, #1
 800f904:	9304      	str	r3, [sp, #16]
 800f906:	9307      	str	r3, [sp, #28]
 800f908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f90c:	931a      	str	r3, [sp, #104]	; 0x68
 800f90e:	4654      	mov	r4, sl
 800f910:	2205      	movs	r2, #5
 800f912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f916:	4858      	ldr	r0, [pc, #352]	; (800fa78 <_vfiprintf_r+0x24c>)
 800f918:	f7f0 fc62 	bl	80001e0 <memchr>
 800f91c:	9a04      	ldr	r2, [sp, #16]
 800f91e:	b9d8      	cbnz	r0, 800f958 <_vfiprintf_r+0x12c>
 800f920:	06d1      	lsls	r1, r2, #27
 800f922:	bf44      	itt	mi
 800f924:	2320      	movmi	r3, #32
 800f926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f92a:	0713      	lsls	r3, r2, #28
 800f92c:	bf44      	itt	mi
 800f92e:	232b      	movmi	r3, #43	; 0x2b
 800f930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f934:	f89a 3000 	ldrb.w	r3, [sl]
 800f938:	2b2a      	cmp	r3, #42	; 0x2a
 800f93a:	d015      	beq.n	800f968 <_vfiprintf_r+0x13c>
 800f93c:	9a07      	ldr	r2, [sp, #28]
 800f93e:	4654      	mov	r4, sl
 800f940:	2000      	movs	r0, #0
 800f942:	f04f 0c0a 	mov.w	ip, #10
 800f946:	4621      	mov	r1, r4
 800f948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f94c:	3b30      	subs	r3, #48	; 0x30
 800f94e:	2b09      	cmp	r3, #9
 800f950:	d94e      	bls.n	800f9f0 <_vfiprintf_r+0x1c4>
 800f952:	b1b0      	cbz	r0, 800f982 <_vfiprintf_r+0x156>
 800f954:	9207      	str	r2, [sp, #28]
 800f956:	e014      	b.n	800f982 <_vfiprintf_r+0x156>
 800f958:	eba0 0308 	sub.w	r3, r0, r8
 800f95c:	fa09 f303 	lsl.w	r3, r9, r3
 800f960:	4313      	orrs	r3, r2
 800f962:	9304      	str	r3, [sp, #16]
 800f964:	46a2      	mov	sl, r4
 800f966:	e7d2      	b.n	800f90e <_vfiprintf_r+0xe2>
 800f968:	9b03      	ldr	r3, [sp, #12]
 800f96a:	1d19      	adds	r1, r3, #4
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	9103      	str	r1, [sp, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	bfbb      	ittet	lt
 800f974:	425b      	neglt	r3, r3
 800f976:	f042 0202 	orrlt.w	r2, r2, #2
 800f97a:	9307      	strge	r3, [sp, #28]
 800f97c:	9307      	strlt	r3, [sp, #28]
 800f97e:	bfb8      	it	lt
 800f980:	9204      	strlt	r2, [sp, #16]
 800f982:	7823      	ldrb	r3, [r4, #0]
 800f984:	2b2e      	cmp	r3, #46	; 0x2e
 800f986:	d10c      	bne.n	800f9a2 <_vfiprintf_r+0x176>
 800f988:	7863      	ldrb	r3, [r4, #1]
 800f98a:	2b2a      	cmp	r3, #42	; 0x2a
 800f98c:	d135      	bne.n	800f9fa <_vfiprintf_r+0x1ce>
 800f98e:	9b03      	ldr	r3, [sp, #12]
 800f990:	1d1a      	adds	r2, r3, #4
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	9203      	str	r2, [sp, #12]
 800f996:	2b00      	cmp	r3, #0
 800f998:	bfb8      	it	lt
 800f99a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f99e:	3402      	adds	r4, #2
 800f9a0:	9305      	str	r3, [sp, #20]
 800f9a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa88 <_vfiprintf_r+0x25c>
 800f9a6:	7821      	ldrb	r1, [r4, #0]
 800f9a8:	2203      	movs	r2, #3
 800f9aa:	4650      	mov	r0, sl
 800f9ac:	f7f0 fc18 	bl	80001e0 <memchr>
 800f9b0:	b140      	cbz	r0, 800f9c4 <_vfiprintf_r+0x198>
 800f9b2:	2340      	movs	r3, #64	; 0x40
 800f9b4:	eba0 000a 	sub.w	r0, r0, sl
 800f9b8:	fa03 f000 	lsl.w	r0, r3, r0
 800f9bc:	9b04      	ldr	r3, [sp, #16]
 800f9be:	4303      	orrs	r3, r0
 800f9c0:	3401      	adds	r4, #1
 800f9c2:	9304      	str	r3, [sp, #16]
 800f9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c8:	482c      	ldr	r0, [pc, #176]	; (800fa7c <_vfiprintf_r+0x250>)
 800f9ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9ce:	2206      	movs	r2, #6
 800f9d0:	f7f0 fc06 	bl	80001e0 <memchr>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d03f      	beq.n	800fa58 <_vfiprintf_r+0x22c>
 800f9d8:	4b29      	ldr	r3, [pc, #164]	; (800fa80 <_vfiprintf_r+0x254>)
 800f9da:	bb1b      	cbnz	r3, 800fa24 <_vfiprintf_r+0x1f8>
 800f9dc:	9b03      	ldr	r3, [sp, #12]
 800f9de:	3307      	adds	r3, #7
 800f9e0:	f023 0307 	bic.w	r3, r3, #7
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	9303      	str	r3, [sp, #12]
 800f9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9ea:	443b      	add	r3, r7
 800f9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800f9ee:	e767      	b.n	800f8c0 <_vfiprintf_r+0x94>
 800f9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9f4:	460c      	mov	r4, r1
 800f9f6:	2001      	movs	r0, #1
 800f9f8:	e7a5      	b.n	800f946 <_vfiprintf_r+0x11a>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	3401      	adds	r4, #1
 800f9fe:	9305      	str	r3, [sp, #20]
 800fa00:	4619      	mov	r1, r3
 800fa02:	f04f 0c0a 	mov.w	ip, #10
 800fa06:	4620      	mov	r0, r4
 800fa08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa0c:	3a30      	subs	r2, #48	; 0x30
 800fa0e:	2a09      	cmp	r2, #9
 800fa10:	d903      	bls.n	800fa1a <_vfiprintf_r+0x1ee>
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d0c5      	beq.n	800f9a2 <_vfiprintf_r+0x176>
 800fa16:	9105      	str	r1, [sp, #20]
 800fa18:	e7c3      	b.n	800f9a2 <_vfiprintf_r+0x176>
 800fa1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa1e:	4604      	mov	r4, r0
 800fa20:	2301      	movs	r3, #1
 800fa22:	e7f0      	b.n	800fa06 <_vfiprintf_r+0x1da>
 800fa24:	ab03      	add	r3, sp, #12
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	462a      	mov	r2, r5
 800fa2a:	4b16      	ldr	r3, [pc, #88]	; (800fa84 <_vfiprintf_r+0x258>)
 800fa2c:	a904      	add	r1, sp, #16
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f3af 8000 	nop.w
 800fa34:	4607      	mov	r7, r0
 800fa36:	1c78      	adds	r0, r7, #1
 800fa38:	d1d6      	bne.n	800f9e8 <_vfiprintf_r+0x1bc>
 800fa3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa3c:	07d9      	lsls	r1, r3, #31
 800fa3e:	d405      	bmi.n	800fa4c <_vfiprintf_r+0x220>
 800fa40:	89ab      	ldrh	r3, [r5, #12]
 800fa42:	059a      	lsls	r2, r3, #22
 800fa44:	d402      	bmi.n	800fa4c <_vfiprintf_r+0x220>
 800fa46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa48:	f7ff fdb7 	bl	800f5ba <__retarget_lock_release_recursive>
 800fa4c:	89ab      	ldrh	r3, [r5, #12]
 800fa4e:	065b      	lsls	r3, r3, #25
 800fa50:	f53f af12 	bmi.w	800f878 <_vfiprintf_r+0x4c>
 800fa54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa56:	e711      	b.n	800f87c <_vfiprintf_r+0x50>
 800fa58:	ab03      	add	r3, sp, #12
 800fa5a:	9300      	str	r3, [sp, #0]
 800fa5c:	462a      	mov	r2, r5
 800fa5e:	4b09      	ldr	r3, [pc, #36]	; (800fa84 <_vfiprintf_r+0x258>)
 800fa60:	a904      	add	r1, sp, #16
 800fa62:	4630      	mov	r0, r6
 800fa64:	f000 f880 	bl	800fb68 <_printf_i>
 800fa68:	e7e4      	b.n	800fa34 <_vfiprintf_r+0x208>
 800fa6a:	bf00      	nop
 800fa6c:	080107ec 	.word	0x080107ec
 800fa70:	0801080c 	.word	0x0801080c
 800fa74:	080107cc 	.word	0x080107cc
 800fa78:	0801082c 	.word	0x0801082c
 800fa7c:	08010836 	.word	0x08010836
 800fa80:	00000000 	.word	0x00000000
 800fa84:	0800f807 	.word	0x0800f807
 800fa88:	08010832 	.word	0x08010832

0800fa8c <_printf_common>:
 800fa8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa90:	4616      	mov	r6, r2
 800fa92:	4699      	mov	r9, r3
 800fa94:	688a      	ldr	r2, [r1, #8]
 800fa96:	690b      	ldr	r3, [r1, #16]
 800fa98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	bfb8      	it	lt
 800faa0:	4613      	movlt	r3, r2
 800faa2:	6033      	str	r3, [r6, #0]
 800faa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800faa8:	4607      	mov	r7, r0
 800faaa:	460c      	mov	r4, r1
 800faac:	b10a      	cbz	r2, 800fab2 <_printf_common+0x26>
 800faae:	3301      	adds	r3, #1
 800fab0:	6033      	str	r3, [r6, #0]
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	0699      	lsls	r1, r3, #26
 800fab6:	bf42      	ittt	mi
 800fab8:	6833      	ldrmi	r3, [r6, #0]
 800faba:	3302      	addmi	r3, #2
 800fabc:	6033      	strmi	r3, [r6, #0]
 800fabe:	6825      	ldr	r5, [r4, #0]
 800fac0:	f015 0506 	ands.w	r5, r5, #6
 800fac4:	d106      	bne.n	800fad4 <_printf_common+0x48>
 800fac6:	f104 0a19 	add.w	sl, r4, #25
 800faca:	68e3      	ldr	r3, [r4, #12]
 800facc:	6832      	ldr	r2, [r6, #0]
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	42ab      	cmp	r3, r5
 800fad2:	dc26      	bgt.n	800fb22 <_printf_common+0x96>
 800fad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fad8:	1e13      	subs	r3, r2, #0
 800fada:	6822      	ldr	r2, [r4, #0]
 800fadc:	bf18      	it	ne
 800fade:	2301      	movne	r3, #1
 800fae0:	0692      	lsls	r2, r2, #26
 800fae2:	d42b      	bmi.n	800fb3c <_printf_common+0xb0>
 800fae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fae8:	4649      	mov	r1, r9
 800faea:	4638      	mov	r0, r7
 800faec:	47c0      	blx	r8
 800faee:	3001      	adds	r0, #1
 800faf0:	d01e      	beq.n	800fb30 <_printf_common+0xa4>
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	68e5      	ldr	r5, [r4, #12]
 800faf6:	6832      	ldr	r2, [r6, #0]
 800faf8:	f003 0306 	and.w	r3, r3, #6
 800fafc:	2b04      	cmp	r3, #4
 800fafe:	bf08      	it	eq
 800fb00:	1aad      	subeq	r5, r5, r2
 800fb02:	68a3      	ldr	r3, [r4, #8]
 800fb04:	6922      	ldr	r2, [r4, #16]
 800fb06:	bf0c      	ite	eq
 800fb08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb0c:	2500      	movne	r5, #0
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	bfc4      	itt	gt
 800fb12:	1a9b      	subgt	r3, r3, r2
 800fb14:	18ed      	addgt	r5, r5, r3
 800fb16:	2600      	movs	r6, #0
 800fb18:	341a      	adds	r4, #26
 800fb1a:	42b5      	cmp	r5, r6
 800fb1c:	d11a      	bne.n	800fb54 <_printf_common+0xc8>
 800fb1e:	2000      	movs	r0, #0
 800fb20:	e008      	b.n	800fb34 <_printf_common+0xa8>
 800fb22:	2301      	movs	r3, #1
 800fb24:	4652      	mov	r2, sl
 800fb26:	4649      	mov	r1, r9
 800fb28:	4638      	mov	r0, r7
 800fb2a:	47c0      	blx	r8
 800fb2c:	3001      	adds	r0, #1
 800fb2e:	d103      	bne.n	800fb38 <_printf_common+0xac>
 800fb30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb38:	3501      	adds	r5, #1
 800fb3a:	e7c6      	b.n	800faca <_printf_common+0x3e>
 800fb3c:	18e1      	adds	r1, r4, r3
 800fb3e:	1c5a      	adds	r2, r3, #1
 800fb40:	2030      	movs	r0, #48	; 0x30
 800fb42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb46:	4422      	add	r2, r4
 800fb48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb50:	3302      	adds	r3, #2
 800fb52:	e7c7      	b.n	800fae4 <_printf_common+0x58>
 800fb54:	2301      	movs	r3, #1
 800fb56:	4622      	mov	r2, r4
 800fb58:	4649      	mov	r1, r9
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	47c0      	blx	r8
 800fb5e:	3001      	adds	r0, #1
 800fb60:	d0e6      	beq.n	800fb30 <_printf_common+0xa4>
 800fb62:	3601      	adds	r6, #1
 800fb64:	e7d9      	b.n	800fb1a <_printf_common+0x8e>
	...

0800fb68 <_printf_i>:
 800fb68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb6c:	460c      	mov	r4, r1
 800fb6e:	4691      	mov	r9, r2
 800fb70:	7e27      	ldrb	r7, [r4, #24]
 800fb72:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fb74:	2f78      	cmp	r7, #120	; 0x78
 800fb76:	4680      	mov	r8, r0
 800fb78:	469a      	mov	sl, r3
 800fb7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb7e:	d807      	bhi.n	800fb90 <_printf_i+0x28>
 800fb80:	2f62      	cmp	r7, #98	; 0x62
 800fb82:	d80a      	bhi.n	800fb9a <_printf_i+0x32>
 800fb84:	2f00      	cmp	r7, #0
 800fb86:	f000 80d8 	beq.w	800fd3a <_printf_i+0x1d2>
 800fb8a:	2f58      	cmp	r7, #88	; 0x58
 800fb8c:	f000 80a3 	beq.w	800fcd6 <_printf_i+0x16e>
 800fb90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fb94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb98:	e03a      	b.n	800fc10 <_printf_i+0xa8>
 800fb9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb9e:	2b15      	cmp	r3, #21
 800fba0:	d8f6      	bhi.n	800fb90 <_printf_i+0x28>
 800fba2:	a001      	add	r0, pc, #4	; (adr r0, 800fba8 <_printf_i+0x40>)
 800fba4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fba8:	0800fc01 	.word	0x0800fc01
 800fbac:	0800fc15 	.word	0x0800fc15
 800fbb0:	0800fb91 	.word	0x0800fb91
 800fbb4:	0800fb91 	.word	0x0800fb91
 800fbb8:	0800fb91 	.word	0x0800fb91
 800fbbc:	0800fb91 	.word	0x0800fb91
 800fbc0:	0800fc15 	.word	0x0800fc15
 800fbc4:	0800fb91 	.word	0x0800fb91
 800fbc8:	0800fb91 	.word	0x0800fb91
 800fbcc:	0800fb91 	.word	0x0800fb91
 800fbd0:	0800fb91 	.word	0x0800fb91
 800fbd4:	0800fd21 	.word	0x0800fd21
 800fbd8:	0800fc45 	.word	0x0800fc45
 800fbdc:	0800fd03 	.word	0x0800fd03
 800fbe0:	0800fb91 	.word	0x0800fb91
 800fbe4:	0800fb91 	.word	0x0800fb91
 800fbe8:	0800fd43 	.word	0x0800fd43
 800fbec:	0800fb91 	.word	0x0800fb91
 800fbf0:	0800fc45 	.word	0x0800fc45
 800fbf4:	0800fb91 	.word	0x0800fb91
 800fbf8:	0800fb91 	.word	0x0800fb91
 800fbfc:	0800fd0b 	.word	0x0800fd0b
 800fc00:	680b      	ldr	r3, [r1, #0]
 800fc02:	1d1a      	adds	r2, r3, #4
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	600a      	str	r2, [r1, #0]
 800fc08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fc0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc10:	2301      	movs	r3, #1
 800fc12:	e0a3      	b.n	800fd5c <_printf_i+0x1f4>
 800fc14:	6825      	ldr	r5, [r4, #0]
 800fc16:	6808      	ldr	r0, [r1, #0]
 800fc18:	062e      	lsls	r6, r5, #24
 800fc1a:	f100 0304 	add.w	r3, r0, #4
 800fc1e:	d50a      	bpl.n	800fc36 <_printf_i+0xce>
 800fc20:	6805      	ldr	r5, [r0, #0]
 800fc22:	600b      	str	r3, [r1, #0]
 800fc24:	2d00      	cmp	r5, #0
 800fc26:	da03      	bge.n	800fc30 <_printf_i+0xc8>
 800fc28:	232d      	movs	r3, #45	; 0x2d
 800fc2a:	426d      	negs	r5, r5
 800fc2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc30:	485e      	ldr	r0, [pc, #376]	; (800fdac <_printf_i+0x244>)
 800fc32:	230a      	movs	r3, #10
 800fc34:	e019      	b.n	800fc6a <_printf_i+0x102>
 800fc36:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fc3a:	6805      	ldr	r5, [r0, #0]
 800fc3c:	600b      	str	r3, [r1, #0]
 800fc3e:	bf18      	it	ne
 800fc40:	b22d      	sxthne	r5, r5
 800fc42:	e7ef      	b.n	800fc24 <_printf_i+0xbc>
 800fc44:	680b      	ldr	r3, [r1, #0]
 800fc46:	6825      	ldr	r5, [r4, #0]
 800fc48:	1d18      	adds	r0, r3, #4
 800fc4a:	6008      	str	r0, [r1, #0]
 800fc4c:	0628      	lsls	r0, r5, #24
 800fc4e:	d501      	bpl.n	800fc54 <_printf_i+0xec>
 800fc50:	681d      	ldr	r5, [r3, #0]
 800fc52:	e002      	b.n	800fc5a <_printf_i+0xf2>
 800fc54:	0669      	lsls	r1, r5, #25
 800fc56:	d5fb      	bpl.n	800fc50 <_printf_i+0xe8>
 800fc58:	881d      	ldrh	r5, [r3, #0]
 800fc5a:	4854      	ldr	r0, [pc, #336]	; (800fdac <_printf_i+0x244>)
 800fc5c:	2f6f      	cmp	r7, #111	; 0x6f
 800fc5e:	bf0c      	ite	eq
 800fc60:	2308      	moveq	r3, #8
 800fc62:	230a      	movne	r3, #10
 800fc64:	2100      	movs	r1, #0
 800fc66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc6a:	6866      	ldr	r6, [r4, #4]
 800fc6c:	60a6      	str	r6, [r4, #8]
 800fc6e:	2e00      	cmp	r6, #0
 800fc70:	bfa2      	ittt	ge
 800fc72:	6821      	ldrge	r1, [r4, #0]
 800fc74:	f021 0104 	bicge.w	r1, r1, #4
 800fc78:	6021      	strge	r1, [r4, #0]
 800fc7a:	b90d      	cbnz	r5, 800fc80 <_printf_i+0x118>
 800fc7c:	2e00      	cmp	r6, #0
 800fc7e:	d04d      	beq.n	800fd1c <_printf_i+0x1b4>
 800fc80:	4616      	mov	r6, r2
 800fc82:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc86:	fb03 5711 	mls	r7, r3, r1, r5
 800fc8a:	5dc7      	ldrb	r7, [r0, r7]
 800fc8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc90:	462f      	mov	r7, r5
 800fc92:	42bb      	cmp	r3, r7
 800fc94:	460d      	mov	r5, r1
 800fc96:	d9f4      	bls.n	800fc82 <_printf_i+0x11a>
 800fc98:	2b08      	cmp	r3, #8
 800fc9a:	d10b      	bne.n	800fcb4 <_printf_i+0x14c>
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	07df      	lsls	r7, r3, #31
 800fca0:	d508      	bpl.n	800fcb4 <_printf_i+0x14c>
 800fca2:	6923      	ldr	r3, [r4, #16]
 800fca4:	6861      	ldr	r1, [r4, #4]
 800fca6:	4299      	cmp	r1, r3
 800fca8:	bfde      	ittt	le
 800fcaa:	2330      	movle	r3, #48	; 0x30
 800fcac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcb0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800fcb4:	1b92      	subs	r2, r2, r6
 800fcb6:	6122      	str	r2, [r4, #16]
 800fcb8:	f8cd a000 	str.w	sl, [sp]
 800fcbc:	464b      	mov	r3, r9
 800fcbe:	aa03      	add	r2, sp, #12
 800fcc0:	4621      	mov	r1, r4
 800fcc2:	4640      	mov	r0, r8
 800fcc4:	f7ff fee2 	bl	800fa8c <_printf_common>
 800fcc8:	3001      	adds	r0, #1
 800fcca:	d14c      	bne.n	800fd66 <_printf_i+0x1fe>
 800fccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcd0:	b004      	add	sp, #16
 800fcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd6:	4835      	ldr	r0, [pc, #212]	; (800fdac <_printf_i+0x244>)
 800fcd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fcdc:	6823      	ldr	r3, [r4, #0]
 800fcde:	680e      	ldr	r6, [r1, #0]
 800fce0:	061f      	lsls	r7, r3, #24
 800fce2:	f856 5b04 	ldr.w	r5, [r6], #4
 800fce6:	600e      	str	r6, [r1, #0]
 800fce8:	d514      	bpl.n	800fd14 <_printf_i+0x1ac>
 800fcea:	07d9      	lsls	r1, r3, #31
 800fcec:	bf44      	itt	mi
 800fcee:	f043 0320 	orrmi.w	r3, r3, #32
 800fcf2:	6023      	strmi	r3, [r4, #0]
 800fcf4:	b91d      	cbnz	r5, 800fcfe <_printf_i+0x196>
 800fcf6:	6823      	ldr	r3, [r4, #0]
 800fcf8:	f023 0320 	bic.w	r3, r3, #32
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	2310      	movs	r3, #16
 800fd00:	e7b0      	b.n	800fc64 <_printf_i+0xfc>
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	f043 0320 	orr.w	r3, r3, #32
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	2378      	movs	r3, #120	; 0x78
 800fd0c:	4828      	ldr	r0, [pc, #160]	; (800fdb0 <_printf_i+0x248>)
 800fd0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd12:	e7e3      	b.n	800fcdc <_printf_i+0x174>
 800fd14:	065e      	lsls	r6, r3, #25
 800fd16:	bf48      	it	mi
 800fd18:	b2ad      	uxthmi	r5, r5
 800fd1a:	e7e6      	b.n	800fcea <_printf_i+0x182>
 800fd1c:	4616      	mov	r6, r2
 800fd1e:	e7bb      	b.n	800fc98 <_printf_i+0x130>
 800fd20:	680b      	ldr	r3, [r1, #0]
 800fd22:	6826      	ldr	r6, [r4, #0]
 800fd24:	6960      	ldr	r0, [r4, #20]
 800fd26:	1d1d      	adds	r5, r3, #4
 800fd28:	600d      	str	r5, [r1, #0]
 800fd2a:	0635      	lsls	r5, r6, #24
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	d501      	bpl.n	800fd34 <_printf_i+0x1cc>
 800fd30:	6018      	str	r0, [r3, #0]
 800fd32:	e002      	b.n	800fd3a <_printf_i+0x1d2>
 800fd34:	0671      	lsls	r1, r6, #25
 800fd36:	d5fb      	bpl.n	800fd30 <_printf_i+0x1c8>
 800fd38:	8018      	strh	r0, [r3, #0]
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	6123      	str	r3, [r4, #16]
 800fd3e:	4616      	mov	r6, r2
 800fd40:	e7ba      	b.n	800fcb8 <_printf_i+0x150>
 800fd42:	680b      	ldr	r3, [r1, #0]
 800fd44:	1d1a      	adds	r2, r3, #4
 800fd46:	600a      	str	r2, [r1, #0]
 800fd48:	681e      	ldr	r6, [r3, #0]
 800fd4a:	6862      	ldr	r2, [r4, #4]
 800fd4c:	2100      	movs	r1, #0
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f7f0 fa46 	bl	80001e0 <memchr>
 800fd54:	b108      	cbz	r0, 800fd5a <_printf_i+0x1f2>
 800fd56:	1b80      	subs	r0, r0, r6
 800fd58:	6060      	str	r0, [r4, #4]
 800fd5a:	6863      	ldr	r3, [r4, #4]
 800fd5c:	6123      	str	r3, [r4, #16]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd64:	e7a8      	b.n	800fcb8 <_printf_i+0x150>
 800fd66:	6923      	ldr	r3, [r4, #16]
 800fd68:	4632      	mov	r2, r6
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	4640      	mov	r0, r8
 800fd6e:	47d0      	blx	sl
 800fd70:	3001      	adds	r0, #1
 800fd72:	d0ab      	beq.n	800fccc <_printf_i+0x164>
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	079b      	lsls	r3, r3, #30
 800fd78:	d413      	bmi.n	800fda2 <_printf_i+0x23a>
 800fd7a:	68e0      	ldr	r0, [r4, #12]
 800fd7c:	9b03      	ldr	r3, [sp, #12]
 800fd7e:	4298      	cmp	r0, r3
 800fd80:	bfb8      	it	lt
 800fd82:	4618      	movlt	r0, r3
 800fd84:	e7a4      	b.n	800fcd0 <_printf_i+0x168>
 800fd86:	2301      	movs	r3, #1
 800fd88:	4632      	mov	r2, r6
 800fd8a:	4649      	mov	r1, r9
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	47d0      	blx	sl
 800fd90:	3001      	adds	r0, #1
 800fd92:	d09b      	beq.n	800fccc <_printf_i+0x164>
 800fd94:	3501      	adds	r5, #1
 800fd96:	68e3      	ldr	r3, [r4, #12]
 800fd98:	9903      	ldr	r1, [sp, #12]
 800fd9a:	1a5b      	subs	r3, r3, r1
 800fd9c:	42ab      	cmp	r3, r5
 800fd9e:	dcf2      	bgt.n	800fd86 <_printf_i+0x21e>
 800fda0:	e7eb      	b.n	800fd7a <_printf_i+0x212>
 800fda2:	2500      	movs	r5, #0
 800fda4:	f104 0619 	add.w	r6, r4, #25
 800fda8:	e7f5      	b.n	800fd96 <_printf_i+0x22e>
 800fdaa:	bf00      	nop
 800fdac:	0801083d 	.word	0x0801083d
 800fdb0:	0801084e 	.word	0x0801084e

0800fdb4 <_sbrk_r>:
 800fdb4:	b538      	push	{r3, r4, r5, lr}
 800fdb6:	4d06      	ldr	r5, [pc, #24]	; (800fdd0 <_sbrk_r+0x1c>)
 800fdb8:	2300      	movs	r3, #0
 800fdba:	4604      	mov	r4, r0
 800fdbc:	4608      	mov	r0, r1
 800fdbe:	602b      	str	r3, [r5, #0]
 800fdc0:	f7f2 fb3c 	bl	800243c <_sbrk>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d102      	bne.n	800fdce <_sbrk_r+0x1a>
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	b103      	cbz	r3, 800fdce <_sbrk_r+0x1a>
 800fdcc:	6023      	str	r3, [r4, #0]
 800fdce:	bd38      	pop	{r3, r4, r5, pc}
 800fdd0:	2000f9e8 	.word	0x2000f9e8

0800fdd4 <__sread>:
 800fdd4:	b510      	push	{r4, lr}
 800fdd6:	460c      	mov	r4, r1
 800fdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fddc:	f000 f8a0 	bl	800ff20 <_read_r>
 800fde0:	2800      	cmp	r0, #0
 800fde2:	bfab      	itete	ge
 800fde4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fde6:	89a3      	ldrhlt	r3, [r4, #12]
 800fde8:	181b      	addge	r3, r3, r0
 800fdea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fdee:	bfac      	ite	ge
 800fdf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fdf2:	81a3      	strhlt	r3, [r4, #12]
 800fdf4:	bd10      	pop	{r4, pc}

0800fdf6 <__swrite>:
 800fdf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfa:	461f      	mov	r7, r3
 800fdfc:	898b      	ldrh	r3, [r1, #12]
 800fdfe:	05db      	lsls	r3, r3, #23
 800fe00:	4605      	mov	r5, r0
 800fe02:	460c      	mov	r4, r1
 800fe04:	4616      	mov	r6, r2
 800fe06:	d505      	bpl.n	800fe14 <__swrite+0x1e>
 800fe08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe0c:	2302      	movs	r3, #2
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f000 f868 	bl	800fee4 <_lseek_r>
 800fe14:	89a3      	ldrh	r3, [r4, #12]
 800fe16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe1e:	81a3      	strh	r3, [r4, #12]
 800fe20:	4632      	mov	r2, r6
 800fe22:	463b      	mov	r3, r7
 800fe24:	4628      	mov	r0, r5
 800fe26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2a:	f000 b817 	b.w	800fe5c <_write_r>

0800fe2e <__sseek>:
 800fe2e:	b510      	push	{r4, lr}
 800fe30:	460c      	mov	r4, r1
 800fe32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe36:	f000 f855 	bl	800fee4 <_lseek_r>
 800fe3a:	1c43      	adds	r3, r0, #1
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	bf15      	itete	ne
 800fe40:	6560      	strne	r0, [r4, #84]	; 0x54
 800fe42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fe46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fe4a:	81a3      	strheq	r3, [r4, #12]
 800fe4c:	bf18      	it	ne
 800fe4e:	81a3      	strhne	r3, [r4, #12]
 800fe50:	bd10      	pop	{r4, pc}

0800fe52 <__sclose>:
 800fe52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe56:	f000 b813 	b.w	800fe80 <_close_r>
	...

0800fe5c <_write_r>:
 800fe5c:	b538      	push	{r3, r4, r5, lr}
 800fe5e:	4d07      	ldr	r5, [pc, #28]	; (800fe7c <_write_r+0x20>)
 800fe60:	4604      	mov	r4, r0
 800fe62:	4608      	mov	r0, r1
 800fe64:	4611      	mov	r1, r2
 800fe66:	2200      	movs	r2, #0
 800fe68:	602a      	str	r2, [r5, #0]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	f7f2 fa95 	bl	800239a <_write>
 800fe70:	1c43      	adds	r3, r0, #1
 800fe72:	d102      	bne.n	800fe7a <_write_r+0x1e>
 800fe74:	682b      	ldr	r3, [r5, #0]
 800fe76:	b103      	cbz	r3, 800fe7a <_write_r+0x1e>
 800fe78:	6023      	str	r3, [r4, #0]
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}
 800fe7c:	2000f9e8 	.word	0x2000f9e8

0800fe80 <_close_r>:
 800fe80:	b538      	push	{r3, r4, r5, lr}
 800fe82:	4d06      	ldr	r5, [pc, #24]	; (800fe9c <_close_r+0x1c>)
 800fe84:	2300      	movs	r3, #0
 800fe86:	4604      	mov	r4, r0
 800fe88:	4608      	mov	r0, r1
 800fe8a:	602b      	str	r3, [r5, #0]
 800fe8c:	f7f2 faa1 	bl	80023d2 <_close>
 800fe90:	1c43      	adds	r3, r0, #1
 800fe92:	d102      	bne.n	800fe9a <_close_r+0x1a>
 800fe94:	682b      	ldr	r3, [r5, #0]
 800fe96:	b103      	cbz	r3, 800fe9a <_close_r+0x1a>
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	bd38      	pop	{r3, r4, r5, pc}
 800fe9c:	2000f9e8 	.word	0x2000f9e8

0800fea0 <_fstat_r>:
 800fea0:	b538      	push	{r3, r4, r5, lr}
 800fea2:	4d07      	ldr	r5, [pc, #28]	; (800fec0 <_fstat_r+0x20>)
 800fea4:	2300      	movs	r3, #0
 800fea6:	4604      	mov	r4, r0
 800fea8:	4608      	mov	r0, r1
 800feaa:	4611      	mov	r1, r2
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	f7f2 fa9c 	bl	80023ea <_fstat>
 800feb2:	1c43      	adds	r3, r0, #1
 800feb4:	d102      	bne.n	800febc <_fstat_r+0x1c>
 800feb6:	682b      	ldr	r3, [r5, #0]
 800feb8:	b103      	cbz	r3, 800febc <_fstat_r+0x1c>
 800feba:	6023      	str	r3, [r4, #0]
 800febc:	bd38      	pop	{r3, r4, r5, pc}
 800febe:	bf00      	nop
 800fec0:	2000f9e8 	.word	0x2000f9e8

0800fec4 <_isatty_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4d06      	ldr	r5, [pc, #24]	; (800fee0 <_isatty_r+0x1c>)
 800fec8:	2300      	movs	r3, #0
 800feca:	4604      	mov	r4, r0
 800fecc:	4608      	mov	r0, r1
 800fece:	602b      	str	r3, [r5, #0]
 800fed0:	f7f2 fa9b 	bl	800240a <_isatty>
 800fed4:	1c43      	adds	r3, r0, #1
 800fed6:	d102      	bne.n	800fede <_isatty_r+0x1a>
 800fed8:	682b      	ldr	r3, [r5, #0]
 800feda:	b103      	cbz	r3, 800fede <_isatty_r+0x1a>
 800fedc:	6023      	str	r3, [r4, #0]
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	2000f9e8 	.word	0x2000f9e8

0800fee4 <_lseek_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4d07      	ldr	r5, [pc, #28]	; (800ff04 <_lseek_r+0x20>)
 800fee8:	4604      	mov	r4, r0
 800feea:	4608      	mov	r0, r1
 800feec:	4611      	mov	r1, r2
 800feee:	2200      	movs	r2, #0
 800fef0:	602a      	str	r2, [r5, #0]
 800fef2:	461a      	mov	r2, r3
 800fef4:	f7f2 fa94 	bl	8002420 <_lseek>
 800fef8:	1c43      	adds	r3, r0, #1
 800fefa:	d102      	bne.n	800ff02 <_lseek_r+0x1e>
 800fefc:	682b      	ldr	r3, [r5, #0]
 800fefe:	b103      	cbz	r3, 800ff02 <_lseek_r+0x1e>
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	bd38      	pop	{r3, r4, r5, pc}
 800ff04:	2000f9e8 	.word	0x2000f9e8

0800ff08 <__malloc_lock>:
 800ff08:	4801      	ldr	r0, [pc, #4]	; (800ff10 <__malloc_lock+0x8>)
 800ff0a:	f7ff bb55 	b.w	800f5b8 <__retarget_lock_acquire_recursive>
 800ff0e:	bf00      	nop
 800ff10:	2000f9e0 	.word	0x2000f9e0

0800ff14 <__malloc_unlock>:
 800ff14:	4801      	ldr	r0, [pc, #4]	; (800ff1c <__malloc_unlock+0x8>)
 800ff16:	f7ff bb50 	b.w	800f5ba <__retarget_lock_release_recursive>
 800ff1a:	bf00      	nop
 800ff1c:	2000f9e0 	.word	0x2000f9e0

0800ff20 <_read_r>:
 800ff20:	b538      	push	{r3, r4, r5, lr}
 800ff22:	4d07      	ldr	r5, [pc, #28]	; (800ff40 <_read_r+0x20>)
 800ff24:	4604      	mov	r4, r0
 800ff26:	4608      	mov	r0, r1
 800ff28:	4611      	mov	r1, r2
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	602a      	str	r2, [r5, #0]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	f7f2 fa16 	bl	8002360 <_read>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	d102      	bne.n	800ff3e <_read_r+0x1e>
 800ff38:	682b      	ldr	r3, [r5, #0]
 800ff3a:	b103      	cbz	r3, 800ff3e <_read_r+0x1e>
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}
 800ff40:	2000f9e8 	.word	0x2000f9e8

0800ff44 <_init>:
 800ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff46:	bf00      	nop
 800ff48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff4a:	bc08      	pop	{r3}
 800ff4c:	469e      	mov	lr, r3
 800ff4e:	4770      	bx	lr

0800ff50 <_fini>:
 800ff50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff52:	bf00      	nop
 800ff54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff56:	bc08      	pop	{r3}
 800ff58:	469e      	mov	lr, r3
 800ff5a:	4770      	bx	lr
