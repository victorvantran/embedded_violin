
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800d64c  0800d64c  0001d64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9c0  0800d9c0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9c8  0800d9c8  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9c8  0800d9c8  0001d9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9cc  0800d9cc  0001d9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800d9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010364  2000011c  0800daec  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010480  0800daec  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030388  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056e8  00000000  00000000  000504d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023b0  00000000  00000000  00055bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021a8  00000000  00000000  00057f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e0ec  00000000  00000000  0005a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275e8  00000000  00000000  00088204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118f7b  00000000  00000000  000af7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c8767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a048  00000000  00000000  001c87bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d634 	.word	0x0800d634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800d634 	.word	0x0800d634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <SELECT+0x18>)
 8000572:	f004 fd4f 	bl	8005014 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000576:	2001      	movs	r0, #1
 8000578:	f002 feaa 	bl	80032d0 <HAL_Delay>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	48000400 	.word	0x48000400

08000584 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <DESELECT+0x18>)
 800058e:	f004 fd41 	bl	8005014 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000592:	2001      	movs	r0, #1
 8000594:	f002 fe9c 	bl	80032d0 <HAL_Delay>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	48000400 	.word	0x48000400

080005a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005aa:	bf00      	nop
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SPI_TxByte+0x30>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d1f8      	bne.n	80005ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <SPI_TxByte+0x30>)
 80005c2:	f006 fa46 	bl	8006a52 <HAL_SPI_Transmit>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000d1f4 	.word	0x2000d1f4

080005d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005e0:	bf00      	nop
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <SPI_TxBuffer+0x30>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f003 0302 	and.w	r3, r3, #2
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d1f8      	bne.n	80005e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005f0:	887a      	ldrh	r2, [r7, #2]
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <SPI_TxBuffer+0x30>)
 80005f8:	f006 fa2b 	bl	8006a52 <HAL_SPI_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000d1f4 	.word	0x2000d1f4

08000608 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000612:	bf00      	nop
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <SPI_RxByte+0x34>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	689b      	ldr	r3, [r3, #8]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b02      	cmp	r3, #2
 8000620:	d1f8      	bne.n	8000614 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000622:	1dba      	adds	r2, r7, #6
 8000624:	1df9      	adds	r1, r7, #7
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2301      	movs	r3, #1
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <SPI_RxByte+0x34>)
 800062e:	f006 fb7e 	bl	8006d2e <HAL_SPI_TransmitReceive>

	return data;
 8000632:	79bb      	ldrb	r3, [r7, #6]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000d1f4 	.word	0x2000d1f4

08000640 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000648:	f7ff ffde 	bl	8000608 <SPI_RxByte>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	701a      	strb	r2, [r3, #0]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <SD_ReadyWait+0x30>)
 8000664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000668:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800066a:	f7ff ffcd 	bl	8000608 <SPI_RxByte>
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2bff      	cmp	r3, #255	; 0xff
 8000676:	d003      	beq.n	8000680 <SD_ReadyWait+0x24>
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <SD_ReadyWait+0x30>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f4      	bne.n	800066a <SD_ReadyWait+0xe>

	return res;
 8000680:	79fb      	ldrb	r3, [r7, #7]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20003578 	.word	0x20003578

08000690 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000696:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800069a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800069c:	f7ff ff72 	bl	8000584 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	e005      	b.n	80006b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006a6:	20ff      	movs	r0, #255	; 0xff
 80006a8:	f7ff ff7a 	bl	80005a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	ddf6      	ble.n	80006a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006b8:	f7ff ff56 	bl	8000568 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006d0:	2395      	movs	r3, #149	; 0x95
 80006d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006d4:	463b      	mov	r3, r7
 80006d6:	2106      	movs	r1, #6
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff7b 	bl	80005d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006de:	e002      	b.n	80006e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006e6:	f7ff ff8f 	bl	8000608 <SPI_RxByte>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d002      	beq.n	80006f6 <SD_PowerOn+0x66>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80006f6:	f7ff ff45 	bl	8000584 <DESELECT>
	SPI_TxByte(0XFF);
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	f7ff ff50 	bl	80005a0 <SPI_TxByte>

	PowerFlag = 1;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <SD_PowerOn+0x80>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000139 	.word	0x20000139

08000714 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <SD_PowerOff+0x14>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000139 	.word	0x20000139

0800072c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <SD_CheckPower+0x14>)
 8000732:	781b      	ldrb	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000139 	.word	0x20000139

08000744 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SD_RxDataBlock+0x58>)
 8000750:	22c8      	movs	r2, #200	; 0xc8
 8000752:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000754:	f7ff ff58 	bl	8000608 <SPI_RxByte>
 8000758:	4603      	mov	r3, r0
 800075a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	2bff      	cmp	r3, #255	; 0xff
 8000760:	d103      	bne.n	800076a <SD_RxDataBlock+0x26>
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <SD_RxDataBlock+0x58>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f4      	bne.n	8000754 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2bfe      	cmp	r3, #254	; 0xfe
 800076e:	d001      	beq.n	8000774 <SD_RxDataBlock+0x30>
 8000770:	2300      	movs	r3, #0
 8000772:	e00f      	b.n	8000794 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff60 	bl	8000640 <SPI_RxBytePtr>
	} while(len--);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	1e5a      	subs	r2, r3, #1
 8000784:	603a      	str	r2, [r7, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1f4      	bne.n	8000774 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800078a:	f7ff ff3d 	bl	8000608 <SPI_RxByte>
	SPI_RxByte();
 800078e:	f7ff ff3b 	bl	8000608 <SPI_RxByte>

	return TRUE;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000357a 	.word	0x2000357a

080007a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007b0:	f7ff ff54 	bl	800065c <SD_ReadyWait>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2bff      	cmp	r3, #255	; 0xff
 80007b8:	d001      	beq.n	80007be <SD_TxDataBlock+0x1e>
 80007ba:	2300      	movs	r3, #0
 80007bc:	e02f      	b.n	800081e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff feed 	bl	80005a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2bfd      	cmp	r3, #253	; 0xfd
 80007ca:	d020      	beq.n	800080e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff feff 	bl	80005d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007d6:	f7ff ff17 	bl	8000608 <SPI_RxByte>
		SPI_RxByte();
 80007da:	f7ff ff15 	bl	8000608 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007de:	e00b      	b.n	80007f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007e0:	f7ff ff12 	bl	8000608 <SPI_RxByte>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f003 031f 	and.w	r3, r3, #31
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d006      	beq.n	8000800 <SD_TxDataBlock+0x60>
			i++;
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	3301      	adds	r3, #1
 80007f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	2b40      	cmp	r3, #64	; 0x40
 80007fc:	d9f0      	bls.n	80007e0 <SD_TxDataBlock+0x40>
 80007fe:	e000      	b.n	8000802 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000800:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000802:	bf00      	nop
 8000804:	f7ff ff00 	bl	8000608 <SPI_RxByte>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0fa      	beq.n	8000804 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	2b05      	cmp	r3, #5
 8000816:	d101      	bne.n	800081c <SD_TxDataBlock+0x7c>
 8000818:	2301      	movs	r3, #1
 800081a:	e000      	b.n	800081e <SD_TxDataBlock+0x7e>

	return FALSE;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000832:	f7ff ff13 	bl	800065c <SD_ReadyWait>
 8000836:	4603      	mov	r3, r0
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	d001      	beq.n	8000840 <SD_SendCmd+0x1a>
 800083c:	23ff      	movs	r3, #255	; 0xff
 800083e:	e042      	b.n	80008c6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff feac 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	0e1b      	lsrs	r3, r3, #24
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fea6 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	0c1b      	lsrs	r3, r3, #16
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fea0 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe9a 	bl	80005a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe95 	bl	80005a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d102      	bne.n	8000882 <SD_SendCmd+0x5c>
 800087c:	2395      	movs	r3, #149	; 0x95
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e007      	b.n	8000892 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b48      	cmp	r3, #72	; 0x48
 8000886:	d102      	bne.n	800088e <SD_SendCmd+0x68>
 8000888:	2387      	movs	r3, #135	; 0x87
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e001      	b.n	8000892 <SD_SendCmd+0x6c>
	else crc = 1;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe83 	bl	80005a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b4c      	cmp	r3, #76	; 0x4c
 800089e:	d101      	bne.n	80008a4 <SD_SendCmd+0x7e>
 80008a0:	f7ff feb2 	bl	8000608 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008a4:	230a      	movs	r3, #10
 80008a6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008a8:	f7ff feae 	bl	8000608 <SPI_RxByte>
 80008ac:	4603      	mov	r3, r0
 80008ae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	da05      	bge.n	80008c4 <SD_SendCmd+0x9e>
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	73bb      	strb	r3, [r7, #14]
 80008be:	7bbb      	ldrb	r3, [r7, #14]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f1      	bne.n	80008a8 <SD_SendCmd+0x82>

	return res;
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SD_disk_initialize+0x14>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e0d1      	b.n	8000a88 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008e4:	4b6a      	ldr	r3, [pc, #424]	; (8000a90 <SD_disk_initialize+0x1c0>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <SD_disk_initialize+0x2a>
 80008f2:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <SD_disk_initialize+0x1c0>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	e0c6      	b.n	8000a88 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008fa:	f7ff fec9 	bl	8000690 <SD_PowerOn>

	/* slave select */
	SELECT();
 80008fe:	f7ff fe33 	bl	8000568 <SELECT>

	/* check disk type */
	type = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000906:	2100      	movs	r1, #0
 8000908:	2040      	movs	r0, #64	; 0x40
 800090a:	f7ff ff8c 	bl	8000826 <SD_SendCmd>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	f040 80a1 	bne.w	8000a58 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800091c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800091e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000922:	2048      	movs	r0, #72	; 0x48
 8000924:	f7ff ff7f 	bl	8000826 <SD_SendCmd>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d155      	bne.n	80009da <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e00c      	b.n	800094e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000934:	7bfc      	ldrb	r4, [r7, #15]
 8000936:	f7ff fe67 	bl	8000608 <SPI_RxByte>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4423      	add	r3, r4
 8000944:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	3301      	adds	r3, #1
 800094c:	73fb      	strb	r3, [r7, #15]
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d9ef      	bls.n	8000934 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000954:	7abb      	ldrb	r3, [r7, #10]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d17e      	bne.n	8000a58 <SD_disk_initialize+0x188>
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	2baa      	cmp	r3, #170	; 0xaa
 800095e:	d17b      	bne.n	8000a58 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000960:	2100      	movs	r1, #0
 8000962:	2077      	movs	r0, #119	; 0x77
 8000964:	f7ff ff5f 	bl	8000826 <SD_SendCmd>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d807      	bhi.n	800097e <SD_disk_initialize+0xae>
 800096e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000972:	2069      	movs	r0, #105	; 0x69
 8000974:	f7ff ff57 	bl	8000826 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d004      	beq.n	8000988 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800097e:	4b45      	ldr	r3, [pc, #276]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1ec      	bne.n	8000960 <SD_disk_initialize+0x90>
 8000986:	e000      	b.n	800098a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000988:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <SD_disk_initialize+0x1c4>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d062      	beq.n	8000a58 <SD_disk_initialize+0x188>
 8000992:	2100      	movs	r1, #0
 8000994:	207a      	movs	r0, #122	; 0x7a
 8000996:	f7ff ff46 	bl	8000826 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d15b      	bne.n	8000a58 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
 80009a4:	e00c      	b.n	80009c0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80009a6:	7bfc      	ldrb	r4, [r7, #15]
 80009a8:	f7ff fe2e 	bl	8000608 <SPI_RxByte>
 80009ac:	4603      	mov	r3, r0
 80009ae:	461a      	mov	r2, r3
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4423      	add	r3, r4
 80009b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	3301      	adds	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d9ef      	bls.n	80009a6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009c6:	7a3b      	ldrb	r3, [r7, #8]
 80009c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SD_disk_initialize+0x104>
 80009d0:	230c      	movs	r3, #12
 80009d2:	e000      	b.n	80009d6 <SD_disk_initialize+0x106>
 80009d4:	2304      	movs	r3, #4
 80009d6:	73bb      	strb	r3, [r7, #14]
 80009d8:	e03e      	b.n	8000a58 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009da:	2100      	movs	r1, #0
 80009dc:	2077      	movs	r0, #119	; 0x77
 80009de:	f7ff ff22 	bl	8000826 <SD_SendCmd>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d808      	bhi.n	80009fa <SD_disk_initialize+0x12a>
 80009e8:	2100      	movs	r1, #0
 80009ea:	2069      	movs	r0, #105	; 0x69
 80009ec:	f7ff ff1b 	bl	8000826 <SD_SendCmd>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d801      	bhi.n	80009fa <SD_disk_initialize+0x12a>
 80009f6:	2302      	movs	r3, #2
 80009f8:	e000      	b.n	80009fc <SD_disk_initialize+0x12c>
 80009fa:	2301      	movs	r3, #1
 80009fc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d10e      	bne.n	8000a22 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a04:	2100      	movs	r1, #0
 8000a06:	2077      	movs	r0, #119	; 0x77
 8000a08:	f7ff ff0d 	bl	8000826 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d80e      	bhi.n	8000a30 <SD_disk_initialize+0x160>
 8000a12:	2100      	movs	r1, #0
 8000a14:	2069      	movs	r0, #105	; 0x69
 8000a16:	f7ff ff06 	bl	8000826 <SD_SendCmd>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d107      	bne.n	8000a30 <SD_disk_initialize+0x160>
 8000a20:	e00c      	b.n	8000a3c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a22:	2100      	movs	r1, #0
 8000a24:	2041      	movs	r0, #65	; 0x41
 8000a26:	f7ff fefe 	bl	8000826 <SD_SendCmd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1e2      	bne.n	80009fe <SD_disk_initialize+0x12e>
 8000a38:	e000      	b.n	8000a3c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SD_disk_initialize+0x1c4>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d007      	beq.n	8000a54 <SD_disk_initialize+0x184>
 8000a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a48:	2050      	movs	r0, #80	; 0x50
 8000a4a:	f7ff feec 	bl	8000826 <SD_SendCmd>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x188>
 8000a54:	2300      	movs	r3, #0
 8000a56:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <SD_disk_initialize+0x1c8>)
 8000a5a:	7bbb      	ldrb	r3, [r7, #14]
 8000a5c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a5e:	f7ff fd91 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000a62:	f7ff fdd1 	bl	8000608 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a7e:	f7ff fe49 	bl	8000714 <SD_PowerOff>
	}

	return Stat;
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <SD_disk_initialize+0x1c0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	2000357a 	.word	0x2000357a
 8000a98:	20000138 	.word	0x20000138

08000a9c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SD_disk_status+0x14>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e002      	b.n	8000ab6 <SD_disk_status+0x1a>
	return Stat;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SD_disk_status+0x28>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d102      	bne.n	8000ae4 <SD_disk_read+0x1c>
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <SD_disk_read+0x20>
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e051      	b.n	8000b8c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <SD_disk_read+0xcc>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SD_disk_read+0x32>
 8000af6:	2303      	movs	r3, #3
 8000af8:	e048      	b.n	8000b8c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <SD_disk_read+0xd0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <SD_disk_read+0x44>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b0c:	f7ff fd2c 	bl	8000568 <SELECT>

	if (count == 1)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d111      	bne.n	8000b3a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2051      	movs	r0, #81	; 0x51
 8000b1a:	f7ff fe84 	bl	8000826 <SD_SendCmd>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d129      	bne.n	8000b78 <SD_disk_read+0xb0>
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fe0b 	bl	8000744 <SD_RxDataBlock>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d021      	beq.n	8000b78 <SD_disk_read+0xb0>
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	e01e      	b.n	8000b78 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2052      	movs	r0, #82	; 0x52
 8000b3e:	f7ff fe72 	bl	8000826 <SD_SendCmd>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d117      	bne.n	8000b78 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4c:	68b8      	ldr	r0, [r7, #8]
 8000b4e:	f7ff fdf9 	bl	8000744 <SD_RxDataBlock>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00a      	beq.n	8000b6e <SD_disk_read+0xa6>
				buff += 512;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b5e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1ed      	bne.n	8000b48 <SD_disk_read+0x80>
 8000b6c:	e000      	b.n	8000b70 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b6e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	204c      	movs	r0, #76	; 0x4c
 8000b74:	f7ff fe57 	bl	8000826 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b78:	f7ff fd04 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000b7c:	f7ff fd44 	bl	8000608 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000
 8000b98:	20000138 	.word	0x20000138

08000b9c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4603      	mov	r3, r0
 8000baa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d102      	bne.n	8000bb8 <SD_disk_write+0x1c>
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <SD_disk_write+0x20>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	e06b      	b.n	8000c94 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <SD_disk_write+0x100>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SD_disk_write+0x32>
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e062      	b.n	8000c94 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <SD_disk_write+0x100>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SD_disk_write+0x44>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e059      	b.n	8000c94 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <SD_disk_write+0x104>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <SD_disk_write+0x56>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	025b      	lsls	r3, r3, #9
 8000bf0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bf2:	f7ff fcb9 	bl	8000568 <SELECT>

	if (count == 1)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d110      	bne.n	8000c1e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	2058      	movs	r0, #88	; 0x58
 8000c00:	f7ff fe11 	bl	8000826 <SD_SendCmd>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d13a      	bne.n	8000c80 <SD_disk_write+0xe4>
 8000c0a:	21fe      	movs	r1, #254	; 0xfe
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdc7 	bl	80007a0 <SD_TxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d033      	beq.n	8000c80 <SD_disk_write+0xe4>
			count = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	e030      	b.n	8000c80 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <SD_disk_write+0x104>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2077      	movs	r0, #119	; 0x77
 8000c2e:	f7ff fdfa 	bl	8000826 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c32:	6839      	ldr	r1, [r7, #0]
 8000c34:	2057      	movs	r0, #87	; 0x57
 8000c36:	f7ff fdf6 	bl	8000826 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	2059      	movs	r0, #89	; 0x59
 8000c3e:	f7ff fdf2 	bl	8000826 <SD_SendCmd>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d11b      	bne.n	8000c80 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c48:	21fc      	movs	r1, #252	; 0xfc
 8000c4a:	68b8      	ldr	r0, [r7, #8]
 8000c4c:	f7ff fda8 	bl	80007a0 <SD_TxDataBlock>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00a      	beq.n	8000c6c <SD_disk_write+0xd0>
				buff += 512;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c5c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1ee      	bne.n	8000c48 <SD_disk_write+0xac>
 8000c6a:	e000      	b.n	8000c6e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c6c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c6e:	21fd      	movs	r1, #253	; 0xfd
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fd95 	bl	80007a0 <SD_TxDataBlock>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c80:	f7ff fc80 	bl	8000584 <DESELECT>
	SPI_RxByte();
 8000c84:	f7ff fcc0 	bl	8000608 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf14      	ite	ne
 8000c8e:	2301      	movne	r3, #1
 8000c90:	2300      	moveq	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000138 	.word	0x20000138

08000ca4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	603a      	str	r2, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SD_disk_ioctl+0x1e>
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e115      	b.n	8000eee <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d124      	bne.n	8000d18 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d012      	beq.n	8000cfc <SD_disk_ioctl+0x58>
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	dc1a      	bgt.n	8000d10 <SD_disk_ioctl+0x6c>
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <SD_disk_ioctl+0x40>
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d006      	beq.n	8000cf0 <SD_disk_ioctl+0x4c>
 8000ce2:	e015      	b.n	8000d10 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000ce4:	f7ff fd16 	bl	8000714 <SD_PowerOff>
			res = RES_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cee:	e0fc      	b.n	8000eea <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000cf0:	f7ff fcce 	bl	8000690 <SD_PowerOn>
			res = RES_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfa:	e0f6      	b.n	8000eea <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	1c5c      	adds	r4, r3, #1
 8000d00:	f7ff fd14 	bl	800072c <SD_CheckPower>
 8000d04:	4603      	mov	r3, r0
 8000d06:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0e:	e0ec      	b.n	8000eea <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d10:	2304      	movs	r3, #4
 8000d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d16:	e0e8      	b.n	8000eea <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d18:	4b77      	ldr	r3, [pc, #476]	; (8000ef8 <SD_disk_ioctl+0x254>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SD_disk_ioctl+0x86>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e0e1      	b.n	8000eee <SD_disk_ioctl+0x24a>

		SELECT();
 8000d2a:	f7ff fc1d 	bl	8000568 <SELECT>

		switch (ctrl)
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b0d      	cmp	r3, #13
 8000d32:	f200 80cb 	bhi.w	8000ecc <SD_disk_ioctl+0x228>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <SD_disk_ioctl+0x98>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000e37 	.word	0x08000e37
 8000d40:	08000d75 	.word	0x08000d75
 8000d44:	08000e27 	.word	0x08000e27
 8000d48:	08000ecd 	.word	0x08000ecd
 8000d4c:	08000ecd 	.word	0x08000ecd
 8000d50:	08000ecd 	.word	0x08000ecd
 8000d54:	08000ecd 	.word	0x08000ecd
 8000d58:	08000ecd 	.word	0x08000ecd
 8000d5c:	08000ecd 	.word	0x08000ecd
 8000d60:	08000ecd 	.word	0x08000ecd
 8000d64:	08000ecd 	.word	0x08000ecd
 8000d68:	08000e49 	.word	0x08000e49
 8000d6c:	08000e6d 	.word	0x08000e6d
 8000d70:	08000e91 	.word	0x08000e91
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d74:	2100      	movs	r1, #0
 8000d76:	2049      	movs	r0, #73	; 0x49
 8000d78:	f7ff fd55 	bl	8000826 <SD_SendCmd>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 80a8 	bne.w	8000ed4 <SD_disk_ioctl+0x230>
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fcda 	bl	8000744 <SD_RxDataBlock>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 809e 	beq.w	8000ed4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d98:	7b3b      	ldrb	r3, [r7, #12]
 8000d9a:	099b      	lsrs	r3, r3, #6
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10e      	bne.n	8000dc0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000da2:	7d7b      	ldrb	r3, [r7, #21]
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	7d3b      	ldrb	r3, [r7, #20]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000db6:	8bfb      	ldrh	r3, [r7, #30]
 8000db8:	029a      	lsls	r2, r3, #10
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e02e      	b.n	8000e1e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dc0:	7c7b      	ldrb	r3, [r7, #17]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	09db      	lsrs	r3, r3, #7
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	7d7b      	ldrb	r3, [r7, #21]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f003 0306 	and.w	r3, r3, #6
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3302      	adds	r3, #2
 8000de4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000de8:	7d3b      	ldrb	r3, [r7, #20]
 8000dea:	099b      	lsrs	r3, r3, #6
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4413      	add	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	7cbb      	ldrb	r3, [r7, #18]
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e10:	8bfa      	ldrh	r2, [r7, #30]
 8000e12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e16:	3b09      	subs	r3, #9
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e24:	e056      	b.n	8000ed4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e34:	e055      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e36:	f7ff fc11 	bl	800065c <SD_ReadyWait>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2bff      	cmp	r3, #255	; 0xff
 8000e3e:	d14b      	bne.n	8000ed8 <SD_disk_ioctl+0x234>
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e46:	e047      	b.n	8000ed8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2049      	movs	r0, #73	; 0x49
 8000e4c:	f7ff fceb 	bl	8000826 <SD_SendCmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d142      	bne.n	8000edc <SD_disk_ioctl+0x238>
 8000e56:	2110      	movs	r1, #16
 8000e58:	6a38      	ldr	r0, [r7, #32]
 8000e5a:	f7ff fc73 	bl	8000744 <SD_RxDataBlock>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d03b      	beq.n	8000edc <SD_disk_ioctl+0x238>
 8000e64:	2300      	movs	r3, #0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e6a:	e037      	b.n	8000edc <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	204a      	movs	r0, #74	; 0x4a
 8000e70:	f7ff fcd9 	bl	8000826 <SD_SendCmd>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d132      	bne.n	8000ee0 <SD_disk_ioctl+0x23c>
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	6a38      	ldr	r0, [r7, #32]
 8000e7e:	f7ff fc61 	bl	8000744 <SD_RxDataBlock>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d02b      	beq.n	8000ee0 <SD_disk_ioctl+0x23c>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e8e:	e027      	b.n	8000ee0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e90:	2100      	movs	r1, #0
 8000e92:	207a      	movs	r0, #122	; 0x7a
 8000e94:	f7ff fcc7 	bl	8000826 <SD_SendCmd>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d116      	bne.n	8000ecc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ea4:	e00b      	b.n	8000ebe <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000ea6:	6a3c      	ldr	r4, [r7, #32]
 8000ea8:	1c63      	adds	r3, r4, #1
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	f7ff fbac 	bl	8000608 <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ebe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d9ef      	bls.n	8000ea6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ed2:	e006      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ed4:	bf00      	nop
 8000ed6:	e004      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ed8:	bf00      	nop
 8000eda:	e002      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <SD_disk_ioctl+0x23e>
			break;
 8000ee0:	bf00      	nop
		}

		DESELECT();
 8000ee2:	f7ff fb4f 	bl	8000584 <DESELECT>
		SPI_RxByte();
 8000ee6:	f7ff fb8f 	bl	8000608 <SPI_RxByte>
	}

	return res;
 8000eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	372c      	adds	r7, #44	; 0x2c
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000

08000efc <HAL_TIM_PWM_PulseFinishedCallback>:


volatile uint8_t ucDataSentFlag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d10c      	bne.n	8000f26 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
		{
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f006 fdc8 	bl	8007aa4 <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8000f14:	2108      	movs	r1, #8
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f006 fdc4 	bl	8007aa4 <HAL_TIM_PWM_Stop_DMA>
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_4);
 8000f1c:	210c      	movs	r1, #12
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f006 fdc0 	bl	8007aa4 <HAL_TIM_PWM_Stop_DMA>
 8000f24:	e007      	b.n	8000f36 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		}
		else if (htim == &htim8)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d103      	bne.n	8000f36 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
		{
			HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8000f2e:	2104      	movs	r1, #4
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f006 fdb7 	bl	8007aa4 <HAL_TIM_PWM_Stop_DMA>
		}

		ucDataSentFlag = 1;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		break;
	default:
		break;
	}
	*/
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20004f08 	.word	0x20004f08
 8000f48:	200035cc 	.word	0x200035cc
 8000f4c:	2000013a 	.word	0x2000013a

08000f50 <WS2812B_vInit>:
		DMA_HandleTypeDef *pxDMA1Channel1,
		DMA_HandleTypeDef *pxDMA1Channel2,
		DMA_HandleTypeDef *pxDMA1Channel3,
		DMA_HandleTypeDef *pxDMA2Channel1
	)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
	pxWS28182B->pxTimer1 = pxTimer1;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	601a      	str	r2, [r3, #0]
	pxWS28182B->pxTimer2 = pxTimer2;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	605a      	str	r2, [r3, #4]
	pxWS28182B->pxTimer1->Instance->ARR = WS2812B_ARR;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2264      	movs	r2, #100	; 0x64
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
	pxWS28182B->pxTimer2->Instance->ARR = WS2812B_ARR;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2264      	movs	r2, #100	; 0x64
 8000f7c:	62da      	str	r2, [r3, #44]	; 0x2c

	pxWS28182B->pxDMA1Channel1 = pxDMA1Channel1;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	609a      	str	r2, [r3, #8]
	pxWS28182B->pxDMA1Channel2 = pxDMA1Channel2;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	60da      	str	r2, [r3, #12]
	pxWS28182B->pxDMA1Channel3 = pxDMA1Channel3;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	611a      	str	r2, [r3, #16]
	pxWS28182B->pxDMA2Channel1 = pxDMA2Channel1;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a3a      	ldr	r2, [r7, #32]
 8000f94:	615a      	str	r2, [r3, #20]
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <__io_putchar+0x20>)
 8000fb4:	f007 fdbc 	bl	8008b30 <HAL_UART_Transmit>
	return ch;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000d258 	.word	0x2000d258

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f002 f93f 	bl	8003250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f877 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f000 fda1 	bl	8001b1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fda:	f000 fd55 	bl	8001a88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fde:	f000 fd23 	bl	8001a28 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fe2:	f000 f8f9 	bl	80011d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000fe6:	f000 fa1b 	bl	8001420 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000fea:	f008 fa27 	bl	800943c <MX_FATFS_Init>
  MX_SPI1_Init();
 8000fee:	f000 f9d9 	bl	80013a4 <MX_SPI1_Init>
  MX_TIM15_Init();
 8000ff2:	f000 fba5 	bl	8001740 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000ff6:	f000 fc27 	bl	8001848 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000ffa:	f000 fc9d 	bl	8001938 <MX_TIM17_Init>
  MX_I2C1_Init();
 8000ffe:	f000 f991 	bl	8001324 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001002:	f000 fa9d 	bl	8001540 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001006:	f000 fb0b 	bl	8001620 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  WS2812B_vInit(&xWS2812B, &htim3, &htim8, &hdma_tim3_ch1_trig, &hdma_tim3_ch3, &hdma_tim3_ch4_up, &hdma_tim8_ch2);
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <main+0xac>)
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <main+0xb0>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <main+0xb4>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <main+0xb8>)
 8001018:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <main+0xbc>)
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <main+0xc0>)
 800101c:	481b      	ldr	r0, [pc, #108]	; (800108c <main+0xc4>)
 800101e:	f7ff ff97 	bl	8000f50 <WS2812B_vInit>

	//[!] Care for HAL_ADC_START_DMA sampling too fast due to small array for DMA (ex: 4 instead of 400. Reduce sampling time of ADC if such case or filter more samples)
  HAL_ADC_Start_DMA(&hadc1, adcValue, ADC_CHANNEL_COUNT);
 8001022:	2204      	movs	r2, #4
 8001024:	491a      	ldr	r1, [pc, #104]	; (8001090 <main+0xc8>)
 8001026:	481b      	ldr	r0, [pc, #108]	; (8001094 <main+0xcc>)
 8001028:	f002 fca2 	bl	8003970 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800102c:	f008 fb0e 	bl	800964c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <main+0xd0>)
 8001032:	2100      	movs	r1, #0
 8001034:	4819      	ldr	r0, [pc, #100]	; (800109c <main+0xd4>)
 8001036:	f008 fb53 	bl	80096e0 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <main+0xd8>)
 800103e:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <main+0xdc>)
 8001042:	2100      	movs	r1, #0
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <main+0xe0>)
 8001046:	f008 fb4b 	bl	80096e0 <osThreadNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <main+0xe4>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 8001050:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <main+0xe8>)
 8001052:	2100      	movs	r1, #0
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <main+0xec>)
 8001056:	f008 fb43 	bl	80096e0 <osThreadNew>
 800105a:	4603      	mov	r3, r0
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <main+0xf0>)
 800105e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <main+0xf4>)
 8001062:	f008 fbfc 	bl	800985e <osEventFlagsNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <main+0xf8>)
 800106a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800106c:	f008 fb12 	bl	8009694 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0xa8>
 8001072:	bf00      	nop
 8001074:	20003580 	.word	0x20003580
 8001078:	2000d1a4 	.word	0x2000d1a4
 800107c:	20004ec0 	.word	0x20004ec0
 8001080:	20005068 	.word	0x20005068
 8001084:	200035cc 	.word	0x200035cc
 8001088:	20004f08 	.word	0x20004f08
 800108c:	200046f4 	.word	0x200046f4
 8001090:	2000d2e0 	.word	0x2000d2e0
 8001094:	20004f54 	.word	0x20004f54
 8001098:	0800d858 	.word	0x0800d858
 800109c:	08001bc9 	.word	0x08001bc9
 80010a0:	20004fb8 	.word	0x20004fb8
 80010a4:	0800d87c 	.word	0x0800d87c
 80010a8:	08001c65 	.word	0x08001c65
 80010ac:	200035c8 	.word	0x200035c8
 80010b0:	0800d8a0 	.word	0x0800d8a0
 80010b4:	08001cc9 	.word	0x08001cc9
 80010b8:	2000d1ec 	.word	0x2000d1ec
 80010bc:	0800d8c4 	.word	0x0800d8c4
 80010c0:	20003618 	.word	0x20003618

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0b8      	sub	sp, #224	; 0xe0
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ce:	2244      	movs	r2, #68	; 0x44
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00b fada 	bl	800c68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2288      	movs	r2, #136	; 0x88
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00b facc 	bl	800c68c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2310      	movs	r3, #16
 8001104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800111a:	230a      	movs	r3, #10
 800111c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001120:	2307      	movs	r3, #7
 8001122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001136:	4618      	mov	r0, r3
 8001138:	f004 f90e 	bl	8005358 <HAL_RCC_OscConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001142:	f000 fdf5 	bl	8001d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001164:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001168:	2104      	movs	r1, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fcda 	bl	8005b24 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001176:	f000 fddb 	bl	8001d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800117a:	f244 0342 	movw	r3, #16450	; 0x4042
 800117e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001184:	2300      	movs	r3, #0
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001188:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800118c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800118e:	2302      	movs	r3, #2
 8001190:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001196:	2308      	movs	r3, #8
 8001198:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800119a:	2307      	movs	r3, #7
 800119c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4618      	mov	r0, r3
 80011b0:	f004 fef0 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80011ba:	f000 fdb9 	bl	8001d30 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c2:	f004 f873 	bl	80052ac <HAL_PWREx_ControlVoltageScaling>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80011cc:	f000 fdb0 	bl	8001d30 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	37e0      	adds	r7, #224	; 0xe0
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <MX_ADC1_Init+0x134>)
 80011fc:	4a44      	ldr	r2, [pc, #272]	; (8001310 <MX_ADC1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001200:	4b42      	ldr	r3, [pc, #264]	; (800130c <MX_ADC1_Init+0x134>)
 8001202:	2200      	movs	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <MX_ADC1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <MX_ADC1_Init+0x134>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <MX_ADC1_Init+0x134>)
 8001214:	2201      	movs	r2, #1
 8001216:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <MX_ADC1_Init+0x134>)
 800121a:	2204      	movs	r2, #4
 800121c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <MX_ADC1_Init+0x134>)
 8001220:	2200      	movs	r2, #0
 8001222:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <MX_ADC1_Init+0x134>)
 8001226:	2201      	movs	r2, #1
 8001228:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <MX_ADC1_Init+0x134>)
 800122c:	2204      	movs	r2, #4
 800122e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <MX_ADC1_Init+0x134>)
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <MX_ADC1_Init+0x134>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_ADC1_Init+0x134>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <MX_ADC1_Init+0x134>)
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <MX_ADC1_Init+0x134>)
 800124e:	2200      	movs	r2, #0
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <MX_ADC1_Init+0x134>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125a:	482c      	ldr	r0, [pc, #176]	; (800130c <MX_ADC1_Init+0x134>)
 800125c:	f002 fa32 	bl	80036c4 <HAL_ADC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001266:	f000 fd63 	bl	8001d30 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	4825      	ldr	r0, [pc, #148]	; (800130c <MX_ADC1_Init+0x134>)
 8001276:	f003 f959 	bl	800452c <HAL_ADCEx_MultiModeConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001280:	f000 fd56 	bl	8001d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_ADC1_Init+0x13c>)
 8001286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001288:	2306      	movs	r3, #6
 800128a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800128c:	2307      	movs	r3, #7
 800128e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001290:	237f      	movs	r3, #127	; 0x7f
 8001292:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001294:	2304      	movs	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <MX_ADC1_Init+0x134>)
 80012a2:	f002 fc37 	bl	8003b14 <HAL_ADC_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80012ac:	f000 fd40 	bl	8001d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_ADC1_Init+0x140>)
 80012b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012b4:	230c      	movs	r3, #12
 80012b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4813      	ldr	r0, [pc, #76]	; (800130c <MX_ADC1_Init+0x134>)
 80012be:	f002 fc29 	bl	8003b14 <HAL_ADC_ConfigChannel>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80012c8:	f000 fd32 	bl	8001d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_ADC1_Init+0x144>)
 80012ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012d0:	2312      	movs	r3, #18
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_ADC1_Init+0x134>)
 80012da:	f002 fc1b 	bl	8003b14 <HAL_ADC_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 80012e4:	f000 fd24 	bl	8001d30 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <MX_ADC1_Init+0x148>)
 80012ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012ec:	2318      	movs	r3, #24
 80012ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_ADC1_Init+0x134>)
 80012f6:	f002 fc0d 	bl	8003b14 <HAL_ADC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001300:	f000 fd16 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20004f54 	.word	0x20004f54
 8001310:	50040000 	.word	0x50040000
 8001314:	04300002 	.word	0x04300002
 8001318:	08600004 	.word	0x08600004
 800131c:	0c900008 	.word	0x0c900008
 8001320:	10c00010 	.word	0x10c00010

08001324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_I2C1_Init+0x74>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <MX_I2C1_Init+0x78>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_I2C1_Init+0x74>)
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <MX_I2C1_Init+0x7c>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_I2C1_Init+0x74>)
 800133c:	2201      	movs	r2, #1
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_I2C1_Init+0x74>)
 8001360:	f003 fe70 	bl	8005044 <HAL_I2C_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800136a:	f000 fce1 	bl	8001d30 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <MX_I2C1_Init+0x74>)
 8001372:	f003 fef6 	bl	8005162 <HAL_I2CEx_ConfigAnalogFilter>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800137c:	f000 fcd8 	bl	8001d30 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_I2C1_Init+0x74>)
 8001384:	f003 ff38 	bl	80051f8 <HAL_I2CEx_ConfigDigitalFilter>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800138e:	f000 fccf 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20004658 	.word	0x20004658
 800139c:	40005400 	.word	0x40005400
 80013a0:	10909cec 	.word	0x10909cec

080013a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_SPI1_Init+0x74>)
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <MX_SPI1_Init+0x78>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_SPI1_Init+0x74>)
 80013b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_SPI1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI1_Init+0x74>)
 80013be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_SPI1_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI1_Init+0x74>)
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI1_Init+0x74>)
 80013da:	2220      	movs	r2, #32
 80013dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI1_Init+0x74>)
 80013f2:	2207      	movs	r2, #7
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_SPI1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI1_Init+0x74>)
 80013fe:	2208      	movs	r2, #8
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_SPI1_Init+0x74>)
 8001404:	f005 fa82 	bl	800690c <HAL_SPI_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 fc8f 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000d1f4 	.word	0x2000d1f4
 800141c:	40013000 	.word	0x40013000

08001420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b096      	sub	sp, #88	; 0x58
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	222c      	movs	r2, #44	; 0x2c
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00b f91d 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <MX_TIM1_Init+0x118>)
 8001454:	4a39      	ldr	r2, [pc, #228]	; (800153c <MX_TIM1_Init+0x11c>)
 8001456:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <MX_TIM1_Init+0x118>)
 800145a:	2207      	movs	r2, #7
 800145c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <MX_TIM1_Init+0x118>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <MX_TIM1_Init+0x118>)
 8001466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <MX_TIM1_Init+0x118>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <MX_TIM1_Init+0x118>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <MX_TIM1_Init+0x118>)
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800147e:	482e      	ldr	r0, [pc, #184]	; (8001538 <MX_TIM1_Init+0x118>)
 8001480:	f006 f890 	bl	80075a4 <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 fc51 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149e:	4619      	mov	r1, r3
 80014a0:	4825      	ldr	r0, [pc, #148]	; (8001538 <MX_TIM1_Init+0x118>)
 80014a2:	f007 f9d3 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014ac:	f000 fc40 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <MX_TIM1_Init+0x118>)
 80014d6:	f006 fcf5 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014e0:	f000 fc26 	bl	8001d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM1_Init+0x118>)
 800151a:	f007 fa1f 	bl	800895c <HAL_TIMEx_ConfigBreakDeadTime>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001524:	f000 fc04 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM1_Init+0x118>)
 800152a:	f001 fb81 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3758      	adds	r7, #88	; 0x58
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000d154 	.word	0x2000d154
 800153c:	40012c00 	.word	0x40012c00

08001540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <MX_TIM3_Init+0xd8>)
 8001566:	4a2d      	ldr	r2, [pc, #180]	; (800161c <MX_TIM3_Init+0xdc>)
 8001568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <MX_TIM3_Init+0xd8>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <MX_TIM3_Init+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <MX_TIM3_Init+0xd8>)
 8001578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <MX_TIM3_Init+0xd8>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <MX_TIM3_Init+0xd8>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800158a:	4823      	ldr	r0, [pc, #140]	; (8001618 <MX_TIM3_Init+0xd8>)
 800158c:	f006 f80a 	bl	80075a4 <HAL_TIM_PWM_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001596:	f000 fbcb 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	481b      	ldr	r0, [pc, #108]	; (8001618 <MX_TIM3_Init+0xd8>)
 80015aa:	f007 f94f 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80015b4:	f000 fbbc 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b8:	2360      	movs	r3, #96	; 0x60
 80015ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4812      	ldr	r0, [pc, #72]	; (8001618 <MX_TIM3_Init+0xd8>)
 80015d0:	f006 fc78 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80015da:	f000 fba9 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	2208      	movs	r2, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM3_Init+0xd8>)
 80015e6:	f006 fc6d 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80015f0:	f000 fb9e 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	220c      	movs	r2, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <MX_TIM3_Init+0xd8>)
 80015fc:	f006 fc62 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001606:	f000 fb93 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <MX_TIM3_Init+0xd8>)
 800160c:	f001 fb10 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20004f08 	.word	0x20004f08
 800161c:	40000400 	.word	0x40000400

08001620 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b096      	sub	sp, #88	; 0x58
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	222c      	movs	r2, #44	; 0x2c
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b f81d 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <MX_TIM8_Init+0x118>)
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <MX_TIM8_Init+0x11c>)
 8001656:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <MX_TIM8_Init+0x118>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <MX_TIM8_Init+0x118>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <MX_TIM8_Init+0x118>)
 8001666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800166a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <MX_TIM8_Init+0x118>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <MX_TIM8_Init+0x118>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <MX_TIM8_Init+0x118>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800167e:	482e      	ldr	r0, [pc, #184]	; (8001738 <MX_TIM8_Init+0x118>)
 8001680:	f005 ff90 	bl	80075a4 <HAL_TIM_PWM_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 fb51 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800169a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	4825      	ldr	r0, [pc, #148]	; (8001738 <MX_TIM8_Init+0x118>)
 80016a2:	f007 f8d3 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80016ac:	f000 fb40 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b0:	2360      	movs	r3, #96	; 0x60
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d0:	2204      	movs	r2, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4818      	ldr	r0, [pc, #96]	; (8001738 <MX_TIM8_Init+0x118>)
 80016d6:	f006 fbf5 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016e0:	f000 fb26 	bl	8001d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_TIM8_Init+0x118>)
 800171a:	f007 f91f 	bl	800895c <HAL_TIMEx_ConfigBreakDeadTime>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001724:	f000 fb04 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <MX_TIM8_Init+0x118>)
 800172a:	f001 fa81 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 800172e:	bf00      	nop
 8001730:	3758      	adds	r7, #88	; 0x58
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200035cc 	.word	0x200035cc
 800173c:	40013400 	.word	0x40013400

08001740 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b096      	sub	sp, #88	; 0x58
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	222c      	movs	r2, #44	; 0x2c
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f00a ff8d 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <MX_TIM15_Init+0x100>)
 8001774:	4a33      	ldr	r2, [pc, #204]	; (8001844 <MX_TIM15_Init+0x104>)
 8001776:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8 - 1;
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <MX_TIM15_Init+0x100>)
 800177a:	2207      	movs	r2, #7
 800177c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b30      	ldr	r3, [pc, #192]	; (8001840 <MX_TIM15_Init+0x100>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <MX_TIM15_Init+0x100>)
 8001786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <MX_TIM15_Init+0x100>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_TIM15_Init+0x100>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <MX_TIM15_Init+0x100>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800179e:	4828      	ldr	r0, [pc, #160]	; (8001840 <MX_TIM15_Init+0x100>)
 80017a0:	f005 ff00 	bl	80075a4 <HAL_TIM_PWM_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 fac1 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ae:	2300      	movs	r3, #0
 80017b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ba:	4619      	mov	r1, r3
 80017bc:	4820      	ldr	r0, [pc, #128]	; (8001840 <MX_TIM15_Init+0x100>)
 80017be:	f007 f845 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 fab2 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017cc:	2360      	movs	r3, #96	; 0x60
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_TIM15_Init+0x100>)
 80017f2:	f006 fb67 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80017fc:	f000 fa98 	bl	8001d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM15_Init+0x100>)
 8001824:	f007 f89a 	bl	800895c <HAL_TIMEx_ConfigBreakDeadTime>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800182e:	f000 fa7f 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001832:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM15_Init+0x100>)
 8001834:	f001 f9fc 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 8001838:	bf00      	nop
 800183a:	3758      	adds	r7, #88	; 0x58
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200046a4 	.word	0x200046a4
 8001844:	40014000 	.word	0x40014000

08001848 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b092      	sub	sp, #72	; 0x48
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	222c      	movs	r2, #44	; 0x2c
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f00a ff0f 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001870:	4a30      	ldr	r2, [pc, #192]	; (8001934 <MX_TIM16_Init+0xec>)
 8001872:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8 - 1;
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001876:	2207      	movs	r2, #7
 8001878:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <MX_TIM16_Init+0xe8>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001886:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <MX_TIM16_Init+0xe8>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800189a:	4825      	ldr	r0, [pc, #148]	; (8001930 <MX_TIM16_Init+0xe8>)
 800189c:	f005 fdba 	bl	8007414 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80018a6:	f000 fa43 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018aa:	4821      	ldr	r0, [pc, #132]	; (8001930 <MX_TIM16_Init+0xe8>)
 80018ac:	f005 fe7a 	bl	80075a4 <HAL_TIM_PWM_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80018b6:	f000 fa3b 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ba:	2360      	movs	r3, #96	; 0x60
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	2200      	movs	r2, #0
 80018dc:	4619      	mov	r1, r3
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_TIM16_Init+0xe8>)
 80018e0:	f006 faf0 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80018ea:	f000 fa21 	bl	8001d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001906:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001912:	f007 f823 	bl	800895c <HAL_TIMEx_ConfigBreakDeadTime>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800191c:	f000 fa08 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM16_Init+0xe8>)
 8001922:	f001 f985 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3748      	adds	r7, #72	; 0x48
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000e320 	.word	0x2000e320
 8001934:	40014400 	.word	0x40014400

08001938 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b092      	sub	sp, #72	; 0x48
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800193e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	615a      	str	r2, [r3, #20]
 8001950:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001952:	463b      	mov	r3, r7
 8001954:	222c      	movs	r2, #44	; 0x2c
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f00a fe97 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001960:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <MX_TIM17_Init+0xec>)
 8001962:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8 - 1;
 8001964:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001966:	2207      	movs	r2, #7
 8001968:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <MX_TIM17_Init+0xe8>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001976:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <MX_TIM17_Init+0xe8>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800198a:	4825      	ldr	r0, [pc, #148]	; (8001a20 <MX_TIM17_Init+0xe8>)
 800198c:	f005 fd42 	bl	8007414 <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001996:	f000 f9cb 	bl	8001d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800199a:	4821      	ldr	r0, [pc, #132]	; (8001a20 <MX_TIM17_Init+0xe8>)
 800199c:	f005 fe02 	bl	80075a4 <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80019a6:	f000 f9c3 	bl	8001d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	; 0x60
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4814      	ldr	r0, [pc, #80]	; (8001a20 <MX_TIM17_Init+0xe8>)
 80019d0:	f006 fa78 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80019da:	f000 f9a9 	bl	8001d30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	4619      	mov	r1, r3
 8001a00:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001a02:	f006 ffab 	bl	800895c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001a0c:	f000 f990 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <MX_TIM17_Init+0xe8>)
 8001a12:	f001 f90d 	bl	8002c30 <HAL_TIM_MspPostInit>

}
 8001a16:	bf00      	nop
 8001a18:	3748      	adds	r7, #72	; 0x48
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20004e74 	.word	0x20004e74
 8001a24:	40014800 	.word	0x40014800

08001a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <MX_USART2_UART_Init+0x5c>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a6c:	f007 f812 	bl	8008a94 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a76:	f000 f95b 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000d258 	.word	0x2000d258
 8001a84:	40004400 	.word	0x40004400

08001a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <MX_DMA_Init+0x90>)
 8001a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a92:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <MX_DMA_Init+0x90>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6493      	str	r3, [r2, #72]	; 0x48
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <MX_DMA_Init+0x90>)
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <MX_DMA_Init+0x90>)
 8001aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <MX_DMA_Init+0x90>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6493      	str	r3, [r2, #72]	; 0x48
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_DMA_Init+0x90>)
 8001ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	200b      	movs	r0, #11
 8001ac4:	f002 fe9a 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ac8:	200b      	movs	r0, #11
 8001aca:	f002 feb3 	bl	8004834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	200c      	movs	r0, #12
 8001ad4:	f002 fe92 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ad8:	200c      	movs	r0, #12
 8001ada:	f002 feab 	bl	8004834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2105      	movs	r1, #5
 8001ae2:	200d      	movs	r0, #13
 8001ae4:	f002 fe8a 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ae8:	200d      	movs	r0, #13
 8001aea:	f002 fea3 	bl	8004834 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2105      	movs	r1, #5
 8001af2:	2010      	movs	r0, #16
 8001af4:	f002 fe82 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001af8:	2010      	movs	r0, #16
 8001afa:	f002 fe9b 	bl	8004834 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	2045      	movs	r0, #69	; 0x45
 8001b04:	f002 fe7a 	bl	80047fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001b08:	2045      	movs	r0, #69	; 0x45
 8001b0a:	f002 fe93 	bl	8004834 <HAL_NVIC_EnableIRQ>

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000

08001b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
 8001b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_GPIO_Init+0xa4>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2140      	movs	r1, #64	; 0x40
 8001b96:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <MX_GPIO_Init+0xa8>)
 8001b98:	f003 fa3c 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_GPIO_Init+0xa8>)
 8001bb4:	f003 f884 	bl	8004cc0 <HAL_GPIO_Init>

}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <StartMainMenuTask+0x84>)
 8001bd4:	f005 fd3e 	bl	8007654 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	481d      	ldr	r0, [pc, #116]	; (8001c50 <StartMainMenuTask+0x88>)
 8001bdc:	f005 fd3a 	bl	8007654 <HAL_TIM_PWM_Start_IT>

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8001be0:	481c      	ldr	r0, [pc, #112]	; (8001c54 <StartMainMenuTask+0x8c>)
 8001be2:	f00a fde1 	bl	800c7a8 <puts>
    //HAL_ADC_Start_DMA(&hadc1, adcValue, 4);
  	//osDelay(100);
    //HAL_ADC_Stop_DMA(&hadc1);

  	printf("ADC0: %lu\r\n", adcValue[0]);
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <StartMainMenuTask+0x90>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	481b      	ldr	r0, [pc, #108]	; (8001c5c <StartMainMenuTask+0x94>)
 8001bee:	f00a fd55 	bl	800c69c <iprintf>
  	printf("ADC1: %lu\r\n", adcValue[1]);
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <StartMainMenuTask+0x90>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4819      	ldr	r0, [pc, #100]	; (8001c60 <StartMainMenuTask+0x98>)
 8001bfa:	f00a fd4f 	bl	800c69c <iprintf>
  	//printf("ADC2: %lu\r\n", adcValue[2]);
  	//printf("ADC3: %lu\r\n", adcValue[3]);

		htim1.Instance->ARR = ((adcValue[0] > 15) ? adcValue[0] * 16 : 1);
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <StartMainMenuTask+0x90>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	d903      	bls.n	8001c0e <StartMainMenuTask+0x46>
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <StartMainMenuTask+0x90>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	e000      	b.n	8001c10 <StartMainMenuTask+0x48>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <StartMainMenuTask+0x84>)
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	62d3      	str	r3, [r2, #44]	; 0x2c
		htim1.Instance->CCR1 = htim1.Instance->ARR/2;
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <StartMainMenuTask+0x84>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <StartMainMenuTask+0x84>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0852      	lsrs	r2, r2, #1
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34

		htim15.Instance->ARR = ((adcValue[1] > 15) ? adcValue[1] * 16 : 1);
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <StartMainMenuTask+0x90>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d903      	bls.n	8001c34 <StartMainMenuTask+0x6c>
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <StartMainMenuTask+0x90>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	e000      	b.n	8001c36 <StartMainMenuTask+0x6e>
 8001c34:	2301      	movs	r3, #1
 8001c36:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <StartMainMenuTask+0x88>)
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
		htim15.Instance->CCR1 = htim15.Instance->ARR/2;
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <StartMainMenuTask+0x88>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c42:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <StartMainMenuTask+0x88>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	0852      	lsrs	r2, r2, #1
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
  	printf("Main Menu\r\n");
 8001c4a:	e7c9      	b.n	8001be0 <StartMainMenuTask+0x18>
 8001c4c:	2000d154 	.word	0x2000d154
 8001c50:	200046a4 	.word	0x200046a4
 8001c54:	0800d698 	.word	0x0800d698
 8001c58:	2000d2e0 	.word	0x2000d2e0
 8001c5c:	0800d6a4 	.word	0x0800d6a4
 8001c60:	0800d6b0 	.word	0x0800d6b0

08001c64 <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <StartPlayTickTask+0x4c>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <StartPlayTickTask+0x50>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f007 fe2e 	bl	80098dc <osEventFlagsWait>
 8001c80:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	dbf1      	blt.n	8001c6c <StartPlayTickTask+0x8>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ec      	beq.n	8001c6c <StartPlayTickTask+0x8>
		{
			while (running)
 8001c92:	e008      	b.n	8001ca6 <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <StartPlayTickTask+0x54>)
 8001c96:	f00a fd87 	bl	800c7a8 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <StartPlayTickTask+0x58>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <StartPlayTickTask+0x5c>)
 8001ca2:	f008 ff39 	bl	800ab18 <vTaskDelayUntil>
			while (running)
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <StartPlayTickTask+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f2      	bne.n	8001c94 <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001cae:	e7dd      	b.n	8001c6c <StartPlayTickTask+0x8>
 8001cb0:	20003618 	.word	0x20003618
 8001cb4:	0800d8d4 	.word	0x0800d8d4
 8001cb8:	0800d6bc 	.word	0x0800d6bc
 8001cbc:	0800d8d8 	.word	0x0800d8d8
 8001cc0:	200046f0 	.word	0x200046f0
 8001cc4:	2000013c 	.word	0x2000013c

08001cc8 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <StartPlayState+0x38>)
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <StartPlayState+0x3c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f007 fdfc 	bl	80098dc <osEventFlagsWait>
 8001ce4:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dbf1      	blt.n	8001cd0 <StartPlayState+0x8>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ec      	beq.n	8001cd0 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8001cf6:	4804      	ldr	r0, [pc, #16]	; (8001d08 <StartPlayState+0x40>)
 8001cf8:	f000 f83a 	bl	8001d70 <Piece_vParseCommand>
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001cfc:	e7e8      	b.n	8001cd0 <StartPlayState+0x8>
 8001cfe:	bf00      	nop
 8001d00:	20003618 	.word	0x20003618
 8001d04:	0800d8dc 	.word	0x0800d8dc
 8001d08:	200050b0 	.word	0x200050b0

08001d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d1e:	f001 fab7 	bl	8003290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40001000 	.word	0x40001000

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>

08001d3a <Piece_ucParseBeatValue>:
	pxPiece->xCapture.ulTick = osKernelGetTickCount();
}


uint8_t Piece_ucParseBeatValue(PieceHandle_t *pxPiece)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usBeat, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usBeat));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3305      	adds	r3, #5
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	440a      	add	r2, r1
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usBeat);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]

	return pxPiece->xPieceInstruction.usBeat;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	795b      	ldrb	r3, [r3, #5]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint8_t endCommand = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]

	while (!endCommand)
 8001d7c:	e045      	b.n	8001e0a <Piece_vParseCommand+0x9a>
	{
		memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	440a      	add	r2, r1
 8001d8e:	7812      	ldrb	r2, [r2, #0]
 8001d90:	701a      	strb	r2, [r3, #0]
		pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.usCommand);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	601a      	str	r2, [r3, #0]

		printf("Command Line: %u\r\n", pxPiece->xPieceInstruction.ulInstructionCounter);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4827      	ldr	r0, [pc, #156]	; (8001e40 <Piece_vParseCommand+0xd0>)
 8001da4:	f00a fc7a 	bl	800c69c <iprintf>
		printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	791b      	ldrb	r3, [r3, #4]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4825      	ldr	r0, [pc, #148]	; (8001e44 <Piece_vParseCommand+0xd4>)
 8001db0:	f00a fc74 	bl	800c69c <iprintf>

		switch (pxPiece->xPieceInstruction.usCommand)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	791b      	ldrb	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <Piece_vParseCommand+0x52>
 8001dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001dbe:	d003      	beq.n	8001dc8 <Piece_vParseCommand+0x58>
 8001dc0:	e006      	b.n	8001dd0 <Piece_vParseCommand+0x60>
		{
		case 0b00000000:
			endCommand = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
			break;
 8001dc6:	e020      	b.n	8001e0a <Piece_vParseCommand+0x9a>
		case 0b01111111:
			Piece_vConfigureAll(pxPiece);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f891 	bl	8001ef0 <Piece_vConfigureAll>
			break;
 8001dce:	e01c      	b.n	8001e0a <Piece_vParseCommand+0x9a>
		default:
			if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 fb4b 	bl	8002470 <bIsPlayCommand>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <Piece_vParseCommand+0x92>
			{
				uint8_t ucNumNotes = (uint8_t)((0x07) & (pxPiece->xPieceInstruction.usCommand));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	73bb      	strb	r3, [r7, #14]
				//uint8_t ucBeatValue = (uint8_t)(((0x78) & (pxPiece->xPieceInstruction.usCommand)) >> 3);
				uint8_t ucBeatValue = Piece_ucParseBeatValue(pxPiece);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa5 	bl	8001d3a <Piece_ucParseBeatValue>
 8001df0:	4603      	mov	r3, r0
 8001df2:	737b      	strb	r3, [r7, #13]
				Piece_vPlayNotes(pxPiece, ucBeatValue, ucNumNotes);
 8001df4:	7bba      	ldrb	r2, [r7, #14]
 8001df6:	7b7b      	ldrb	r3, [r7, #13]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f9d8 	bl	80021b0 <Piece_vPlayNotes>
 8001e00:	e002      	b.n	8001e08 <Piece_vParseCommand+0x98>
			}
			else
			{
				printf("UNKNOWN COMMAND\r\n");
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <Piece_vParseCommand+0xd8>)
 8001e04:	f00a fcd0 	bl	800c7a8 <puts>
			}
			break;
 8001e08:	bf00      	nop
	while (!endCommand)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0b6      	beq.n	8001d7e <Piece_vParseCommand+0xe>
		}
	}



	printf("END OF COMPOSITION\r\n");
 8001e10:	480e      	ldr	r0, [pc, #56]	; (8001e4c <Piece_vParseCommand+0xdc>)
 8001e12:	f00a fcc9 	bl	800c7a8 <puts>
	HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8001e16:	2100      	movs	r1, #0
 8001e18:	480d      	ldr	r0, [pc, #52]	; (8001e50 <Piece_vParseCommand+0xe0>)
 8001e1a:	f005 fd67 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <Piece_vParseCommand+0xe4>)
 8001e22:	f005 fd63 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8001e26:	2100      	movs	r1, #0
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <Piece_vParseCommand+0xe8>)
 8001e2a:	f005 fd5f 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <Piece_vParseCommand+0xec>)
 8001e32:	f005 fd5b 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	0800d70c 	.word	0x0800d70c
 8001e44:	0800d720 	.word	0x0800d720
 8001e48:	0800d730 	.word	0x0800d730
 8001e4c:	0800d744 	.word	0x0800d744
 8001e50:	2000d154 	.word	0x2000d154
 8001e54:	200046a4 	.word	0x200046a4
 8001e58:	2000e320 	.word	0x2000e320
 8001e5c:	20004e74 	.word	0x20004e74

08001e60 <Piece_vSetMovement>:



void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <Piece_vSetMovement+0x2c>)
 8001e7e:	f00a fc0d 	bl	800c69c <iprintf>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	0800d758 	.word	0x0800d758

08001e90 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <Piece_vSetBPM+0x2c>)
 8001eae:	f00a fbf5 	bl	800c69c <iprintf>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	0800d768 	.word	0x0800d768

08001ec0 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001eda:	4619      	mov	r1, r3
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <Piece_vSetDynamic+0x2c>)
 8001ede:	f00a fbdd 	bl	800c69c <iprintf>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0800d774 	.word	0x0800d774

08001ef0 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8001ef8:	481e      	ldr	r0, [pc, #120]	; (8001f74 <Piece_vConfigureAll+0x84>)
 8001efa:	f00a fc55 	bl	800c7a8 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1c9a      	adds	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4619      	mov	r1, r3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff84 	bl	8001e60 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8001f58:	89bb      	ldrh	r3, [r7, #12]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff97 	bl	8001e90 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffaa 	bl	8001ec0 <Piece_vSetDynamic>
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0800d784 	.word	0x0800d784

08001f78 <Piece_vCaptureFragment>:




void Piece_vCaptureFragment(PieceHandle_t *pxPiece, int32_t lMSPerDemisemi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
	int count = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]

	// Capture in CAPTURE_TICK_PERIOD_MS resolution
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001f86:	e01e      	b.n	8001fc6 <Piece_vCaptureFragment+0x4e>
	{
		pxPiece->xCapture.ulTick += CAPTURE_TICK_PERIOD_MS;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f8e:	3394      	adds	r3, #148	; 0x94
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f9c:	3394      	adds	r3, #148	; 0x94
 8001f9e:	601a      	str	r2, [r3, #0]
		count++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
		lMSPerDemisemi -= CAPTURE_TICK_PERIOD_MS;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	3b32      	subs	r3, #50	; 0x32
 8001faa:	603b      	str	r3, [r7, #0]
		printf("Capture Tick %d: %d\r\n", count, CAPTURE_TICK_PERIOD_MS);
 8001fac:	2232      	movs	r2, #50	; 0x32
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	4819      	ldr	r0, [pc, #100]	; (8002018 <Piece_vCaptureFragment+0xa0>)
 8001fb2:	f00a fb73 	bl	800c69c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fbc:	3394      	adds	r3, #148	; 0x94
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fc1f 	bl	8009804 <osDelayUntil>
	while (lMSPerDemisemi >= CAPTURE_TICK_PERIOD_MS)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b31      	cmp	r3, #49	; 0x31
 8001fca:	dcdd      	bgt.n	8001f88 <Piece_vCaptureFragment+0x10>
	}

	// Capture the remainder under the CAPTURE_TICK_PERIOD_MS resolution
	if (lMSPerDemisemi > 0)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	dd1b      	ble.n	800200a <Piece_vCaptureFragment+0x92>
	{
		pxPiece->xCapture.ulTick += lMSPerDemisemi;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fd8:	3394      	adds	r3, #148	; 0x94
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	441a      	add	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fe6:	3394      	adds	r3, #148	; 0x94
 8001fe8:	601a      	str	r2, [r3, #0]

		count++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3301      	adds	r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
		printf("Capture Tick %d: %d\r\n", count, lMSPerDemisemi);
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	4808      	ldr	r0, [pc, #32]	; (8002018 <Piece_vCaptureFragment+0xa0>)
 8001ff6:	f00a fb51 	bl	800c69c <iprintf>
		//Piece_vUpdatePerformanceStats(pxPiece);
		osDelayUntil(pxPiece->xCapture.ulTick);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002000:	3394      	adds	r3, #148	; 0x94
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f007 fbfd 	bl	8009804 <osDelayUntil>
	}

	lMSPerDemisemi = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	0800d7a0 	.word	0x0800d7a0

0800201c <Piece_vResetGoal>:




void Piece_vResetGoal(PieceHandle_t *pxPiece)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	pxPiece->xGoal.xGString.bActive = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800202a:	3398      	adds	r3, #152	; 0x98
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xDString.bActive = 0;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002036:	339b      	adds	r3, #155	; 0x9b
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xAString.bActive = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002042:	339e      	adds	r3, #158	; 0x9e
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
	pxPiece->xGoal.xEString.bActive = 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800204e:	33a1      	adds	r3, #161	; 0xa1
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <Piece_vParseNoteGoal>:




void Piece_vParseNoteGoal(PieceHandle_t *pxPiece)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3306      	adds	r3, #6
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	440a      	add	r2, r1
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	b292      	uxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1c9a      	adds	r2, r3, #2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
	uint8_t ucTechnique = (uint8_t)(((0xFF00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
	uint8_t ucNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
	uint8_t ucNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
	*/

	uint8_t ucTechnique = (uint8_t)(((0x00FF) & (pxPiece->xPieceInstruction.uPlay)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	88db      	ldrh	r3, [r3, #6]
 800208c:	73fb      	strb	r3, [r7, #15]
	uint8_t ucNoteBase = (uint8_t)(((0xC000) & (pxPiece->xPieceInstruction.uPlay)) >> (6 + 8)); // String
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	88db      	ldrh	r3, [r3, #6]
 8002092:	0b9b      	lsrs	r3, r3, #14
 8002094:	b29b      	uxth	r3, r3
 8002096:	73bb      	strb	r3, [r7, #14]
	uint8_t ucNoteOffset = (uint8_t)(((0x3F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	88db      	ldrh	r3, [r3, #6]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b29b      	uxth	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a6:	737b      	strb	r3, [r7, #13]


	switch (ucNoteBase)
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d856      	bhi.n	800215c <Piece_vParseNoteGoal+0xfc>
 80020ae:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <Piece_vParseNoteGoal+0x54>)
 80020b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020eb 	.word	0x080020eb
 80020bc:	08002111 	.word	0x08002111
 80020c0:	08002137 	.word	0x08002137
	{
	case G_STRING:
		pxPiece->xGoal.xGString.bActive = 1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020ca:	3398      	adds	r3, #152	; 0x98
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucTechnique = ucTechnique;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020d6:	3399      	adds	r3, #153	; 0x99
 80020d8:	7bfa      	ldrb	r2, [r7, #15]
 80020da:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xGString.ucFingerOffset = ucNoteOffset;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020e2:	339a      	adds	r3, #154	; 0x9a
 80020e4:	7b7a      	ldrb	r2, [r7, #13]
 80020e6:	701a      	strb	r2, [r3, #0]
		break;
 80020e8:	e039      	b.n	800215e <Piece_vParseNoteGoal+0xfe>
	case D_STRING:
		pxPiece->xGoal.xDString.bActive = 1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020f0:	339b      	adds	r3, #155	; 0x9b
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucTechnique = ucTechnique;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80020fc:	339c      	adds	r3, #156	; 0x9c
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xDString.ucFingerOffset = ucNoteOffset;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002108:	339d      	adds	r3, #157	; 0x9d
 800210a:	7b7a      	ldrb	r2, [r7, #13]
 800210c:	701a      	strb	r2, [r3, #0]
		break;
 800210e:	e026      	b.n	800215e <Piece_vParseNoteGoal+0xfe>
	case A_STRING:
		pxPiece->xGoal.xAString.bActive = 1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002116:	339e      	adds	r3, #158	; 0x9e
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucTechnique = ucTechnique;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002122:	339f      	adds	r3, #159	; 0x9f
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xAString.ucFingerOffset = ucNoteOffset;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800212e:	33a0      	adds	r3, #160	; 0xa0
 8002130:	7b7a      	ldrb	r2, [r7, #13]
 8002132:	701a      	strb	r2, [r3, #0]
		break;
 8002134:	e013      	b.n	800215e <Piece_vParseNoteGoal+0xfe>
	case E_STRING:
		pxPiece->xGoal.xEString.bActive = 1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800213c:	33a1      	adds	r3, #161	; 0xa1
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucTechnique = ucTechnique;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002148:	33a2      	adds	r3, #162	; 0xa2
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	701a      	strb	r2, [r3, #0]
		pxPiece->xGoal.xEString.ucFingerOffset = ucNoteOffset;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002154:	33a3      	adds	r3, #163	; 0xa3
 8002156:	7b7a      	ldrb	r2, [r7, #13]
 8002158:	701a      	strb	r2, [r3, #0]
		break;
 800215a:	e000      	b.n	800215e <Piece_vParseNoteGoal+0xfe>
	default:
		break;
 800215c:	bf00      	nop
	}
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <Piece_vParseGoal>:


void Piece_vParseGoal(PieceHandle_t *pxPiece, uint8_t ucNumNotes)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
	if (ucNumNotes > 4) ucNumNotes = 4;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d901      	bls.n	8002182 <Piece_vParseGoal+0x16>
 800217e:	2304      	movs	r3, #4
 8002180:	70fb      	strb	r3, [r7, #3]
	// [!] Should throw error and abort if ucNumNotes > 4

	for (int16_t i = 0; i < ucNumNotes; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	81fb      	strh	r3, [r7, #14]
 8002186:	e008      	b.n	800219a <Piece_vParseGoal+0x2e>
	{
		Piece_vParseNoteGoal(pxPiece);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff69 	bl	8002060 <Piece_vParseNoteGoal>
	for (int16_t i = 0; i < ucNumNotes; i++)
 800218e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002192:	b29b      	uxth	r3, r3
 8002194:	3301      	adds	r3, #1
 8002196:	b29b      	uxth	r3, r3
 8002198:	81fb      	strh	r3, [r7, #14]
 800219a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <Piece_vParseGoal+0x1c>
	}
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <Piece_vPlayNotes>:




void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t ucBeatValue, uint8_t ucNumNotes)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
 80021bc:	4613      	mov	r3, r2
 80021be:	70bb      	strb	r3, [r7, #2]
	printf("Play Notes: %u\r\n", ucNumNotes);
 80021c0:	78bb      	ldrb	r3, [r7, #2]
 80021c2:	4619      	mov	r1, r3
 80021c4:	48a0      	ldr	r0, [pc, #640]	; (8002448 <Piece_vPlayNotes+0x298>)
 80021c6:	f00a fa69 	bl	800c69c <iprintf>
	printf("Beat Value: %u\r\n", ucBeatValue);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	4619      	mov	r1, r3
 80021ce:	489f      	ldr	r0, [pc, #636]	; (800244c <Piece_vPlayNotes+0x29c>)
 80021d0:	f00a fa64 	bl	800c69c <iprintf>

	Piece_vResetGoal(pxPiece);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff21 	bl	800201c <Piece_vResetGoal>
	Piece_vParseGoal(pxPiece, ucNumNotes);
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffc4 	bl	800216c <Piece_vParseGoal>
	Piece_Debug_vPrintGoal(pxPiece);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f98d 	bl	8002504 <Piece_Debug_vPrintGoal>

	float fTupletScale;
	switch (ucBeatValue)
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d820      	bhi.n	8002232 <Piece_vPlayNotes+0x82>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <Piece_vPlayNotes+0x48>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	0800220d 	.word	0x0800220d
 80021fc:	08002215 	.word	0x08002215
 8002200:	0800221b 	.word	0x0800221b
 8002204:	08002223 	.word	0x08002223
 8002208:	0800222b 	.word	0x0800222b
	{
	case NOPELET:
		fTupletScale = NOPELET_SCALE;
 800220c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002210:	617b      	str	r3, [r7, #20]
		break;
 8002212:	e012      	b.n	800223a <Piece_vPlayNotes+0x8a>
	case TRIPLET:
		fTupletScale = TRIPLET_SCALE;
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <Piece_vPlayNotes+0x2a0>)
 8002216:	617b      	str	r3, [r7, #20]
		break;
 8002218:	e00f      	b.n	800223a <Piece_vPlayNotes+0x8a>
	case QUINTUPLET:
		fTupletScale = QUINTUPLET_SCALE;
 800221a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800221e:	617b      	str	r3, [r7, #20]
		break;
 8002220:	e00b      	b.n	800223a <Piece_vPlayNotes+0x8a>
	case SEXTUPLET:
		fTupletScale = SEXTUPLET_SCALE;
 8002222:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002226:	617b      	str	r3, [r7, #20]
		break;
 8002228:	e007      	b.n	800223a <Piece_vPlayNotes+0x8a>
	case SEPTUPLET:
		fTupletScale = SEPTUPLET_SCALE;
 800222a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800222e:	617b      	str	r3, [r7, #20]
		break;
 8002230:	e003      	b.n	800223a <Piece_vPlayNotes+0x8a>
	default:
		fTupletScale = NOPELET_SCALE;
 8002232:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002236:	617b      	str	r3, [r7, #20]
		break;
 8002238:	bf00      	nop
	}

	uint32_t ulMSPerBeatValue;
	float fMSPerChrochet = (float)((60.0/(float)pxPiece->xPieceConfiguration.uBPM)) * 1000.0f; // Divide by 8 because 32nd beat resolution is 1/2^3 of quarter note BPM reference, for B is a quarter note
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002248:	eddf 6a82 	vldr	s13, [pc, #520]	; 8002454 <Piece_vPlayNotes+0x2a4>
 800224c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002250:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8002458 <Piece_vPlayNotes+0x2a8>
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	edc7 7a03 	vstr	s15, [r7, #12]
	switch (ucBeatValue)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b0b      	cmp	r3, #11
 8002260:	f200 80d6 	bhi.w	8002410 <Piece_vPlayNotes+0x260>
 8002264:	a201      	add	r2, pc, #4	; (adr r2, 800226c <Piece_vPlayNotes+0xbc>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	0800229d 	.word	0x0800229d
 8002270:	080022bd 	.word	0x080022bd
 8002274:	080022dd 	.word	0x080022dd
 8002278:	080022fd 	.word	0x080022fd
 800227c:	0800231d 	.word	0x0800231d
 8002280:	08002339 	.word	0x08002339
 8002284:	08002351 	.word	0x08002351
 8002288:	08002371 	.word	0x08002371
 800228c:	08002391 	.word	0x08002391
 8002290:	080023b1 	.word	0x080023b1
 8002294:	080023d1 	.word	0x080023d1
 8002298:	080023f1 	.word	0x080023f1
	{
	case LARGE:
		// [!] Subtle missalignment (+/- 1ms) based on float to integer conversion. Keep track in the future
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LARGE_SCALE*fTupletScale);
 800229c:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800245c <Piece_vPlayNotes+0x2ac>
 80022a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b4:	ee17 3a90 	vmov	r3, s15
 80022b8:	613b      	str	r3, [r7, #16]
		break;
 80022ba:	e0b5      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case LONG:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*LONG_SCALE*fTupletScale);
 80022bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80022c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d4:	ee17 3a90 	vmov	r3, s15
 80022d8:	613b      	str	r3, [r7, #16]
		break;
 80022da:	e0a5      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case BREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*BREVE_SCALE*fTupletScale);
 80022dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022e0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f4:	ee17 3a90 	vmov	r3, s15
 80022f8:	613b      	str	r3, [r7, #16]
		break;
 80022fa:	e095      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case SEMIBREVE:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIBREVE_SCALE*fTupletScale);
 80022fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002300:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002304:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002308:	edd7 7a05 	vldr	s15, [r7, #20]
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002314:	ee17 3a90 	vmov	r3, s15
 8002318:	613b      	str	r3, [r7, #16]
		break;
 800231a:	e085      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case MINIM:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*MINIM_SCALE*fTupletScale);
 800231c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002320:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002324:	edd7 7a05 	vldr	s15, [r7, #20]
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002330:	ee17 3a90 	vmov	r3, s15
 8002334:	613b      	str	r3, [r7, #16]
		break;
 8002336:	e077      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case CROTCHET:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002338:	ed97 7a03 	vldr	s14, [r7, #12]
 800233c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002348:	ee17 3a90 	vmov	r3, s15
 800234c:	613b      	str	r3, [r7, #16]
		break;
 800234e:	e06b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case QUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*QUAVER_SCALE*fTupletScale);
 8002350:	edd7 7a03 	vldr	s15, [r7, #12]
 8002354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800235c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002368:	ee17 3a90 	vmov	r3, s15
 800236c:	613b      	str	r3, [r7, #16]
		break;
 800236e:	e05b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case SEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIQUAVER_SCALE*fTupletScale);
 8002370:	edd7 7a03 	vldr	s15, [r7, #12]
 8002374:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002378:	ee27 7a87 	vmul.f32	s14, s15, s14
 800237c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002388:	ee17 3a90 	vmov	r3, s15
 800238c:	613b      	str	r3, [r7, #16]
		break;
 800238e:	e04b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case DEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIQUAVER_SCALE*fTupletScale);
 8002390:	edd7 7a03 	vldr	s15, [r7, #12]
 8002394:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002398:	ee27 7a87 	vmul.f32	s14, s15, s14
 800239c:	edd7 7a05 	vldr	s15, [r7, #20]
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	613b      	str	r3, [r7, #16]
		break;
 80023ae:	e03b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case HEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*HEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80023b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002460 <Piece_vPlayNotes+0x2b0>
 80023b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c8:	ee17 3a90 	vmov	r3, s15
 80023cc:	613b      	str	r3, [r7, #16]
		break;
 80023ce:	e02b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case SEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*SEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80023d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002464 <Piece_vPlayNotes+0x2b4>
 80023d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e8:	ee17 3a90 	vmov	r3, s15
 80023ec:	613b      	str	r3, [r7, #16]
		break;
 80023ee:	e01b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	case DEMISEMIHEMIDEMISEMIQUAVER:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*DEMISEMIHEMIDEMISEMIQUAVER_SCALE*fTupletScale);
 80023f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002468 <Piece_vPlayNotes+0x2b8>
 80023f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002408:	ee17 3a90 	vmov	r3, s15
 800240c:	613b      	str	r3, [r7, #16]
		break;
 800240e:	e00b      	b.n	8002428 <Piece_vPlayNotes+0x278>
	default:
		ulMSPerBeatValue = (int32_t)(fMSPerChrochet*CROTCHET_SCALE*fTupletScale);
 8002410:	ed97 7a03 	vldr	s14, [r7, #12]
 8002414:	edd7 7a05 	vldr	s15, [r7, #20]
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	613b      	str	r3, [r7, #16]
		break;
 8002426:	bf00      	nop
	}


	if (ucNumNotes == 0)
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <Piece_vPlayNotes+0x284>
	{
		printf("REST\r\n");
 800242e:	480f      	ldr	r0, [pc, #60]	; (800246c <Piece_vPlayNotes+0x2bc>)
 8002430:	f00a f9ba 	bl	800c7a8 <puts>
	}

	Piece_vCaptureFragment(pxPiece, ulMSPerBeatValue);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fd9d 	bl	8001f78 <Piece_vCaptureFragment>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	0800d7b8 	.word	0x0800d7b8
 800244c:	0800d7cc 	.word	0x0800d7cc
 8002450:	3f2aaaab 	.word	0x3f2aaaab
 8002454:	42700000 	.word	0x42700000
 8002458:	447a0000 	.word	0x447a0000
 800245c:	42000000 	.word	0x42000000
 8002460:	3d800000 	.word	0x3d800000
 8002464:	3d000000 	.word	0x3d000000
 8002468:	3c800000 	.word	0x3c800000
 800246c:	0800d7e0 	.word	0x0800d7e0

08002470 <bIsPlayCommand>:


uint8_t bIsPlayCommand(uint8_t usCommand)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	09db      	lsrs	r3, r3, #7
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <Piece_usGetPitchTick>:



uint16_t Piece_usGetPitchTick(uint8_t ucString, uint8_t ucOffset)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	71fb      	strb	r3, [r7, #7]
 800249c:	4613      	mov	r3, r2
 800249e:	71bb      	strb	r3, [r7, #6]
	uint8_t ucPitchTickIndex;

	switch (ucString)
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d816      	bhi.n	80024d4 <Piece_usGetPitchTick+0x44>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <Piece_usGetPitchTick+0x1c>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c3 	.word	0x080024c3
 80024b4:	080024c9 	.word	0x080024c9
 80024b8:	080024cf 	.word	0x080024cf
	{
	case G_STRING:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
		break;
 80024c0:	e00b      	b.n	80024da <Piece_usGetPitchTick+0x4a>
	case D_STRING:
		ucPitchTickIndex = D_STRING_PITCH_TICK_OFFSET;
 80024c2:	230a      	movs	r3, #10
 80024c4:	73fb      	strb	r3, [r7, #15]
		break;
 80024c6:	e008      	b.n	80024da <Piece_usGetPitchTick+0x4a>
	case A_STRING:
		ucPitchTickIndex = A_STRING_PITCH_TICK_OFFSET;
 80024c8:	2314      	movs	r3, #20
 80024ca:	73fb      	strb	r3, [r7, #15]
		break;
 80024cc:	e005      	b.n	80024da <Piece_usGetPitchTick+0x4a>
	case E_STRING:
		ucPitchTickIndex = E_STRING_PITCH_TICK_OFFSET;
 80024ce:	231e      	movs	r3, #30
 80024d0:	73fb      	strb	r3, [r7, #15]
		break;
 80024d2:	e002      	b.n	80024da <Piece_usGetPitchTick+0x4a>
	default:
		ucPitchTickIndex = G_STRING_PITCH_TICK_OFFSET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	73fb      	strb	r3, [r7, #15]
		break;
 80024d8:	bf00      	nop
	}

	ucPitchTickIndex += ucOffset;
 80024da:	7bfa      	ldrb	r2, [r7, #15]
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	4413      	add	r3, r2
 80024e0:	73fb      	strb	r3, [r7, #15]
	ucPitchTickIndex = (ucPitchTickIndex < NUM_PITCH_TICKS) ? ucPitchTickIndex : NUM_PITCH_TICKS - 1;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b47      	cmp	r3, #71	; 0x47
 80024e6:	bf28      	it	cs
 80024e8:	2347      	movcs	r3, #71	; 0x47
 80024ea:	73fb      	strb	r3, [r7, #15]

	return pusPitchTickMap[ucPitchTickIndex];
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <Piece_usGetPitchTick+0x70>)
 80024f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20000004 	.word	0x20000004

08002504 <Piece_Debug_vPrintGoal>:
}



void Piece_Debug_vPrintGoal(PieceHandle_t *pxPiece)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	printf("GOAL:\r\n");
 800250c:	4877      	ldr	r0, [pc, #476]	; (80026ec <Piece_Debug_vPrintGoal+0x1e8>)
 800250e:	f00a f94b 	bl	800c7a8 <puts>

	if (pxPiece->xGoal.xGString.bActive)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002518:	3398      	adds	r3, #152	; 0x98
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02e      	beq.n	800257e <Piece_Debug_vPrintGoal+0x7a>
	{
		printf("	G: %u, %u\r\n", pxPiece->xGoal.xGString.ucFingerOffset, Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002526:	339a      	adds	r3, #154	; 0x9a
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461c      	mov	r4, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002532:	339a      	adds	r3, #154	; 0x9a
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff ffa9 	bl	8002490 <Piece_usGetPitchTick>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	4621      	mov	r1, r4
 8002544:	486a      	ldr	r0, [pc, #424]	; (80026f0 <Piece_Debug_vPrintGoal+0x1ec>)
 8002546:	f00a f8a9 	bl	800c69c <iprintf>

		G_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(G_STRING, pxPiece->xGoal.xGString.ucFingerOffset);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002550:	339a      	adds	r3, #154	; 0x9a
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	2000      	movs	r0, #0
 8002558:	f7ff ff9a 	bl	8002490 <Piece_usGetPitchTick>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <Piece_Debug_vPrintGoal+0x1f0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
		G_TIMER_HANDLE.Instance->CCR1 = G_TIMER_HANDLE.Instance->ARR/2;
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <Piece_Debug_vPrintGoal+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <Piece_Debug_vPrintGoal+0x1f0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	0852      	lsrs	r2, r2, #1
 8002572:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 8002574:	2100      	movs	r1, #0
 8002576:	485f      	ldr	r0, [pc, #380]	; (80026f4 <Piece_Debug_vPrintGoal+0x1f0>)
 8002578:	f005 f86c 	bl	8007654 <HAL_TIM_PWM_Start_IT>
 800257c:	e003      	b.n	8002586 <Piece_Debug_vPrintGoal+0x82>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&G_TIMER_HANDLE, G_TIMER_CHANNEL);
 800257e:	2100      	movs	r1, #0
 8002580:	485c      	ldr	r0, [pc, #368]	; (80026f4 <Piece_Debug_vPrintGoal+0x1f0>)
 8002582:	f005 f9b3 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xDString.bActive)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800258c:	339b      	adds	r3, #155	; 0x9b
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02e      	beq.n	80025f2 <Piece_Debug_vPrintGoal+0xee>
	{
		printf("	D: %u, %u\r\n", pxPiece->xGoal.xDString.ucFingerOffset, Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800259a:	339d      	adds	r3, #157	; 0x9d
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461c      	mov	r4, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025a6:	339d      	adds	r3, #157	; 0x9d
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff ff6f 	bl	8002490 <Piece_usGetPitchTick>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	4621      	mov	r1, r4
 80025b8:	484f      	ldr	r0, [pc, #316]	; (80026f8 <Piece_Debug_vPrintGoal+0x1f4>)
 80025ba:	f00a f86f 	bl	800c69c <iprintf>

		D_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(D_STRING, pxPiece->xGoal.xDString.ucFingerOffset);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80025c4:	339d      	adds	r3, #157	; 0x9d
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff ff60 	bl	8002490 <Piece_usGetPitchTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b49      	ldr	r3, [pc, #292]	; (80026fc <Piece_Debug_vPrintGoal+0x1f8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
		D_TIMER_HANDLE.Instance->CCR1 = D_TIMER_HANDLE.Instance->ARR/2;
 80025da:	4b48      	ldr	r3, [pc, #288]	; (80026fc <Piece_Debug_vPrintGoal+0x1f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <Piece_Debug_vPrintGoal+0x1f8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0852      	lsrs	r2, r2, #1
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80025e8:	2100      	movs	r1, #0
 80025ea:	4844      	ldr	r0, [pc, #272]	; (80026fc <Piece_Debug_vPrintGoal+0x1f8>)
 80025ec:	f005 f832 	bl	8007654 <HAL_TIM_PWM_Start_IT>
 80025f0:	e003      	b.n	80025fa <Piece_Debug_vPrintGoal+0xf6>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&D_TIMER_HANDLE, D_TIMER_CHANNEL);
 80025f2:	2100      	movs	r1, #0
 80025f4:	4841      	ldr	r0, [pc, #260]	; (80026fc <Piece_Debug_vPrintGoal+0x1f8>)
 80025f6:	f005 f979 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xAString.bActive)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002600:	339e      	adds	r3, #158	; 0x9e
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02e      	beq.n	8002666 <Piece_Debug_vPrintGoal+0x162>
	{
		printf("	A: %u, %u\r\n", pxPiece->xGoal.xAString.ucFingerOffset, Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800260e:	33a0      	adds	r3, #160	; 0xa0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461c      	mov	r4, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800261a:	33a0      	adds	r3, #160	; 0xa0
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	2002      	movs	r0, #2
 8002622:	f7ff ff35 	bl	8002490 <Piece_usGetPitchTick>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	4621      	mov	r1, r4
 800262c:	4834      	ldr	r0, [pc, #208]	; (8002700 <Piece_Debug_vPrintGoal+0x1fc>)
 800262e:	f00a f835 	bl	800c69c <iprintf>

		A_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(A_STRING, pxPiece->xGoal.xAString.ucFingerOffset);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002638:	33a0      	adds	r3, #160	; 0xa0
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	2002      	movs	r0, #2
 8002640:	f7ff ff26 	bl	8002490 <Piece_usGetPitchTick>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b2e      	ldr	r3, [pc, #184]	; (8002704 <Piece_Debug_vPrintGoal+0x200>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
		A_TIMER_HANDLE.Instance->CCR1 = A_TIMER_HANDLE.Instance->ARR/2;
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <Piece_Debug_vPrintGoal+0x200>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <Piece_Debug_vPrintGoal+0x200>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0852      	lsrs	r2, r2, #1
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 800265c:	2100      	movs	r1, #0
 800265e:	4829      	ldr	r0, [pc, #164]	; (8002704 <Piece_Debug_vPrintGoal+0x200>)
 8002660:	f004 fff8 	bl	8007654 <HAL_TIM_PWM_Start_IT>
 8002664:	e003      	b.n	800266e <Piece_Debug_vPrintGoal+0x16a>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&A_TIMER_HANDLE, A_TIMER_CHANNEL);
 8002666:	2100      	movs	r1, #0
 8002668:	4826      	ldr	r0, [pc, #152]	; (8002704 <Piece_Debug_vPrintGoal+0x200>)
 800266a:	f005 f93f 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
	}

	if (pxPiece->xGoal.xEString.bActive)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002674:	33a1      	adds	r3, #161	; 0xa1
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02e      	beq.n	80026da <Piece_Debug_vPrintGoal+0x1d6>
	{
		printf("	E: %u, %u\r\n", pxPiece->xGoal.xEString.ucFingerOffset, Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002682:	33a3      	adds	r3, #163	; 0xa3
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461c      	mov	r4, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800268e:	33a3      	adds	r3, #163	; 0xa3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	2003      	movs	r0, #3
 8002696:	f7ff fefb 	bl	8002490 <Piece_usGetPitchTick>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	4819      	ldr	r0, [pc, #100]	; (8002708 <Piece_Debug_vPrintGoal+0x204>)
 80026a2:	f009 fffb 	bl	800c69c <iprintf>

		E_TIMER_HANDLE.Instance->ARR = Piece_usGetPitchTick(E_STRING, pxPiece->xGoal.xEString.ucFingerOffset);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80026ac:	33a3      	adds	r3, #163	; 0xa3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	2003      	movs	r0, #3
 80026b4:	f7ff feec 	bl	8002490 <Piece_usGetPitchTick>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <Piece_Debug_vPrintGoal+0x208>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
		E_TIMER_HANDLE.Instance->CCR1 = E_TIMER_HANDLE.Instance->ARR/2;
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <Piece_Debug_vPrintGoal+0x208>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <Piece_Debug_vPrintGoal+0x208>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0852      	lsrs	r2, r2, #1
 80026ce:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80026d0:	2100      	movs	r1, #0
 80026d2:	480e      	ldr	r0, [pc, #56]	; (800270c <Piece_Debug_vPrintGoal+0x208>)
 80026d4:	f004 ffbe 	bl	8007654 <HAL_TIM_PWM_Start_IT>
	}
	else
	{
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
	}
}
 80026d8:	e003      	b.n	80026e2 <Piece_Debug_vPrintGoal+0x1de>
		HAL_TIM_PWM_Stop_IT(&E_TIMER_HANDLE, E_TIMER_CHANNEL);
 80026da:	2100      	movs	r1, #0
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <Piece_Debug_vPrintGoal+0x208>)
 80026de:	f005 f905 	bl	80078ec <HAL_TIM_PWM_Stop_IT>
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	0800d7f8 	.word	0x0800d7f8
 80026f0:	0800d800 	.word	0x0800d800
 80026f4:	2000d154 	.word	0x2000d154
 80026f8:	0800d810 	.word	0x0800d810
 80026fc:	200046a4 	.word	0x200046a4
 8002700:	0800d820 	.word	0x0800d820
 8002704:	2000e320 	.word	0x2000e320
 8002708:	0800d830 	.word	0x0800d830
 800270c:	20004e74 	.word	0x20004e74

08002710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_MspInit+0x4c>)
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <HAL_MspInit+0x4c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6613      	str	r3, [r2, #96]	; 0x60
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_MspInit+0x4c>)
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_MspInit+0x4c>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_MspInit+0x4c>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6593      	str	r3, [r2, #88]	; 0x58
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_MspInit+0x4c>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	210f      	movs	r1, #15
 800274a:	f06f 0001 	mvn.w	r0, #1
 800274e:	f002 f855 	bl	80047fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <HAL_ADC_MspInit+0xc8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d14e      	bne.n	8002820 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002782:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_ADC_MspInit+0xcc>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_ADC_MspInit+0xcc>)
 8002788:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800278c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_ADC_MspInit+0xcc>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_ADC_MspInit+0xcc>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_ADC_MspInit+0xcc>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_ADC_MspInit+0xcc>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027b2:	230f      	movs	r3, #15
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027b6:	230b      	movs	r3, #11
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	481a      	ldr	r0, [pc, #104]	; (8002830 <HAL_ADC_MspInit+0xd0>)
 80027c6:	f002 fa7b 	bl	8004cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027ca:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_ADC_MspInit+0xd8>)
 80027ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80027d0:	4b18      	ldr	r3, [pc, #96]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 80027fa:	2220      	movs	r2, #32
 80027fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 8002806:	f002 f823 	bl	8004850 <HAL_DMA_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8002810:	f7ff fa8e 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a07      	ldr	r2, [pc, #28]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 8002818:	64da      	str	r2, [r3, #76]	; 0x4c
 800281a:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_ADC_MspInit+0xd4>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	50040000 	.word	0x50040000
 800282c:	40021000 	.word	0x40021000
 8002830:	48000800 	.word	0x48000800
 8002834:	20005020 	.word	0x20005020
 8002838:	40020008 	.word	0x40020008

0800283c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a17      	ldr	r2, [pc, #92]	; (80028b8 <HAL_I2C_MspInit+0x7c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d128      	bne.n	80028b0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_I2C_MspInit+0x80>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_I2C_MspInit+0x80>)
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_I2C_MspInit+0x80>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002876:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800287a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800287c:	2312      	movs	r3, #18
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002880:	2301      	movs	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002888:	2304      	movs	r3, #4
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	480b      	ldr	r0, [pc, #44]	; (80028c0 <HAL_I2C_MspInit+0x84>)
 8002894:	f002 fa14 	bl	8004cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_I2C_MspInit+0x80>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <HAL_I2C_MspInit+0x80>)
 800289e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_I2C_MspInit+0x80>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40005400 	.word	0x40005400
 80028bc:	40021000 	.word	0x40021000
 80028c0:	48000400 	.word	0x48000400

080028c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_SPI_MspInit+0xb4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d144      	bne.n	8002970 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_SPI_MspInit+0xb8>)
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_SPI_MspInit+0xb8>)
 80028ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028f0:	6613      	str	r3, [r2, #96]	; 0x60
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_SPI_MspInit+0xb8>)
 80028f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_SPI_MspInit+0xb8>)
 8002900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002902:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_SPI_MspInit+0xb8>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_SPI_MspInit+0xb8>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_SPI_MspInit+0xb8>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_SPI_MspInit+0xb8>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_SPI_MspInit+0xb8>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800292e:	2320      	movs	r3, #32
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800293e:	2305      	movs	r3, #5
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294c:	f002 f9b8 	bl	8004cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002950:	2330      	movs	r3, #48	; 0x30
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002960:	2305      	movs	r3, #5
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	4805      	ldr	r0, [pc, #20]	; (8002980 <HAL_SPI_MspInit+0xbc>)
 800296c:	f002 f9a8 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40013000 	.word	0x40013000
 800297c:	40021000 	.word	0x40021000
 8002980:	48000400 	.word	0x48000400

08002984 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a80      	ldr	r2, [pc, #512]	; (8002b94 <HAL_TIM_PWM_MspInit+0x210>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10c      	bne.n	80029b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002996:	4b80      	ldr	r3, [pc, #512]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 800299c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a0:	6613      	str	r3, [r2, #96]	; 0x60
 80029a2:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80029ae:	e0ed      	b.n	8002b8c <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM3)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a79      	ldr	r2, [pc, #484]	; (8002b9c <HAL_TIM_PWM_MspInit+0x218>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	f040 809a 	bne.w	8002af0 <HAL_TIM_PWM_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029bc:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a75      	ldr	r2, [pc, #468]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80029d4:	4b72      	ldr	r3, [pc, #456]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029d6:	4a73      	ldr	r2, [pc, #460]	; (8002ba4 <HAL_TIM_PWM_MspInit+0x220>)
 80029d8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Request = DMA_REQUEST_5;
 80029da:	4b71      	ldr	r3, [pc, #452]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029dc:	2205      	movs	r2, #5
 80029de:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029e2:	2210      	movs	r2, #16
 80029e4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e6:	4b6e      	ldr	r3, [pc, #440]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80029ec:	4b6c      	ldr	r3, [pc, #432]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029f2:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029fa:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 80029fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a00:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002a08:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002a0e:	4864      	ldr	r0, [pc, #400]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a10:	f001 ff1e 	bl	8004850 <HAL_DMA_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_TIM_PWM_MspInit+0x9a>
      Error_Handler();
 8002a1a:	f7ff f989 	bl	8001d30 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a5f      	ldr	r2, [pc, #380]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
 8002a24:	4a5e      	ldr	r2, [pc, #376]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a30:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_TIM_PWM_MspInit+0x21c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch3.Instance = DMA1_Channel2;
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a38:	4a5c      	ldr	r2, [pc, #368]	; (8002bac <HAL_TIM_PWM_MspInit+0x228>)
 8002a3a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_5;
 8002a3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a3e:	2205      	movs	r2, #5
 8002a40:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a42:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a44:	2210      	movs	r2, #16
 8002a46:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a48:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a54:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a62:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8002a70:	484d      	ldr	r0, [pc, #308]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a72:	f001 feed 	bl	8004850 <HAL_DMA_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_PWM_MspInit+0xfc>
      Error_Handler();
 8002a7c:	f7ff f958 	bl	8001d30 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a86:	4a48      	ldr	r2, [pc, #288]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x224>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8002a8c:	4b48      	ldr	r3, [pc, #288]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a8e:	4a49      	ldr	r2, [pc, #292]	; (8002bb4 <HAL_TIM_PWM_MspInit+0x230>)
 8002a90:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Request = DMA_REQUEST_5;
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a94:	2205      	movs	r2, #5
 8002a96:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a98:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9e:	4b44      	ldr	r3, [pc, #272]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002ac6:	483a      	ldr	r0, [pc, #232]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002ac8:	f001 fec2 	bl	8004850 <HAL_DMA_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_PWM_MspInit+0x152>
      Error_Handler();
 8002ad2:	f7ff f92d 	bl	8001d30 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a35      	ldr	r2, [pc, #212]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
 8002adc:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002ae6:	621a      	str	r2, [r3, #32]
 8002ae8:	4a31      	ldr	r2, [pc, #196]	; (8002bb0 <HAL_TIM_PWM_MspInit+0x22c>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002aee:	e04d      	b.n	8002b8c <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM8)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <HAL_TIM_PWM_MspInit+0x234>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d137      	bne.n	8002b6a <HAL_TIM_PWM_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002afa:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afe:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b04:	6613      	str	r3, [r2, #96]	; 0x60
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Channel7;
 8002b12:	4b2a      	ldr	r3, [pc, #168]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002b16:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_7;
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b20:	2210      	movs	r2, #16
 8002b22:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b30:	4b22      	ldr	r3, [pc, #136]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b36:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3e:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8002b4c:	481b      	ldr	r0, [pc, #108]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b4e:	f001 fe7f 	bl	8004850 <HAL_DMA_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_TIM_PWM_MspInit+0x1d8>
      Error_Handler();
 8002b58:	f7ff f8ea 	bl	8001d30 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
 8002b62:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_TIM_PWM_MspInit+0x238>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002b68:	e010      	b.n	8002b8c <HAL_TIM_PWM_MspInit+0x208>
  else if(htim_pwm->Instance==TIM15)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_TIM_PWM_MspInit+0x240>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10b      	bne.n	8002b8c <HAL_TIM_PWM_MspInit+0x208>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_TIM_PWM_MspInit+0x214>)
 8002b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	20005068 	.word	0x20005068
 8002ba4:	4002006c 	.word	0x4002006c
 8002ba8:	20004ec0 	.word	0x20004ec0
 8002bac:	4002001c 	.word	0x4002001c
 8002bb0:	2000d1a4 	.word	0x2000d1a4
 8002bb4:	40020030 	.word	0x40020030
 8002bb8:	40013400 	.word	0x40013400
 8002bbc:	20003580 	.word	0x20003580
 8002bc0:	40020480 	.word	0x40020480
 8002bc4:	40014000 	.word	0x40014000

08002bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <HAL_TIM_Base_MspInit+0x5c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_TIM_Base_MspInit+0x60>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <HAL_TIM_Base_MspInit+0x60>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	6613      	str	r3, [r2, #96]	; 0x60
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_TIM_Base_MspInit+0x60>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002bf2:	e010      	b.n	8002c16 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <HAL_TIM_Base_MspInit+0x64>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10b      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_TIM_Base_MspInit+0x60>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_TIM_Base_MspInit+0x60>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <HAL_TIM_Base_MspInit+0x60>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40014400 	.word	0x40014400
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40014800 	.word	0x40014800

08002c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a76      	ldr	r2, [pc, #472]	; (8002e28 <HAL_TIM_MspPostInit+0x1f8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d11e      	bne.n	8002c90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5e:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	4619      	mov	r1, r3
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c8a:	f002 f819 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002c8e:	e0c7      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a66      	ldr	r2, [pc, #408]	; (8002e30 <HAL_TIM_MspPostInit+0x200>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d138      	bne.n	8002d0c <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	4a63      	ldr	r2, [pc, #396]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ca6:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	61fb      	str	r3, [r7, #28]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	4a5d      	ldr	r2, [pc, #372]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4853      	ldr	r0, [pc, #332]	; (8002e34 <HAL_TIM_MspPostInit+0x204>)
 8002ce6:	f001 ffeb 	bl	8004cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002cea:	2340      	movs	r3, #64	; 0x40
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d02:	4619      	mov	r1, r3
 8002d04:	484c      	ldr	r0, [pc, #304]	; (8002e38 <HAL_TIM_MspPostInit+0x208>)
 8002d06:	f001 ffdb 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002d0a:	e089      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM8)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_TIM_MspPostInit+0x20c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11c      	bne.n	8002d50 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d16:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a44      	ldr	r2, [pc, #272]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d46:	4619      	mov	r1, r3
 8002d48:	483b      	ldr	r0, [pc, #236]	; (8002e38 <HAL_TIM_MspPostInit+0x208>)
 8002d4a:	f001 ffb9 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002d4e:	e067      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM15)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <HAL_TIM_MspPostInit+0x210>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d11d      	bne.n	8002d96 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002d72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002d84:	230e      	movs	r3, #14
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4829      	ldr	r0, [pc, #164]	; (8002e34 <HAL_TIM_MspPostInit+0x204>)
 8002d90:	f001 ff96 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002d94:	e044      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM16)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_TIM_MspPostInit+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d11d      	bne.n	8002ddc <HAL_TIM_MspPostInit+0x1ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002db8:	2340      	movs	r3, #64	; 0x40
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002dc8:	230e      	movs	r3, #14
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd6:	f001 ff73 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002dda:	e021      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1f0>
  else if(htim->Instance==TIM17)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <HAL_TIM_MspPostInit+0x218>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d11c      	bne.n	8002e20 <HAL_TIM_MspPostInit+0x1f0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_TIM_MspPostInit+0x1fc>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8002e0e:	230e      	movs	r3, #14
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1c:	f001 ff50 	bl	8004cc0 <HAL_GPIO_Init>
}
 8002e20:	bf00      	nop
 8002e22:	3738      	adds	r7, #56	; 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40012c00 	.word	0x40012c00
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	48000400 	.word	0x48000400
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	40013400 	.word	0x40013400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800

08002e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_UART_MspInit+0x7c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d128      	bne.n	8002ec0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_UART_MspInit+0x80>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	4a16      	ldr	r2, [pc, #88]	; (8002ecc <HAL_UART_MspInit+0x80>)
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e78:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_UART_MspInit+0x80>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_UART_MspInit+0x80>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8a:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_UART_MspInit+0x80>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <HAL_UART_MspInit+0x80>)
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eae:	2307      	movs	r3, #7
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ebc:	f001 ff00 	bl	8004cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ec0:	bf00      	nop
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40004400 	.word	0x40004400
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	; 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	2036      	movs	r0, #54	; 0x36
 8002ee6:	f001 fc89 	bl	80047fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002eea:	2036      	movs	r0, #54	; 0x36
 8002eec:	f001 fca2 	bl	8004834 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_InitTick+0x9c>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_InitTick+0x9c>)
 8002ef6:	f043 0310 	orr.w	r3, r3, #16
 8002efa:	6593      	str	r3, [r2, #88]	; 0x58
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_InitTick+0x9c>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f08:	f107 0210 	add.w	r2, r7, #16
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 ffac 	bl	8005e70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f18:	f002 ff7e 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_InitTick+0xa0>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_InitTick+0xa8>)
 8002f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f4c:	4809      	ldr	r0, [pc, #36]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f4e:	f004 fa61 	bl	8007414 <HAL_TIM_Base_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f58:	4806      	ldr	r0, [pc, #24]	; (8002f74 <HAL_InitTick+0xa4>)
 8002f5a:	f004 fab3 	bl	80074c4 <HAL_TIM_Base_Start_IT>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	e000      	b.n	8002f64 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	2000e36c 	.word	0x2000e36c
 8002f78:	40001000 	.word	0x40001000

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <NMI_Handler+0x4>

08002f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <MemManage_Handler+0x4>

08002f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <BusFault_Handler+0x4>

08002f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <UsageFault_Handler+0x4>

08002f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <DMA1_Channel1_IRQHandler+0x10>)
 8002fae:	f001 fda8 	bl	8004b02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20005020 	.word	0x20005020

08002fbc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <DMA1_Channel2_IRQHandler+0x10>)
 8002fc2:	f001 fd9e 	bl	8004b02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20004ec0 	.word	0x20004ec0

08002fd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <DMA1_Channel3_IRQHandler+0x10>)
 8002fd6:	f001 fd94 	bl	8004b02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000d1a4 	.word	0x2000d1a4

08002fe4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <DMA1_Channel6_IRQHandler+0x10>)
 8002fea:	f001 fd8a 	bl	8004b02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20005068 	.word	0x20005068

08002ff8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <TIM6_DAC_IRQHandler+0x38>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <TIM6_DAC_IRQHandler+0x38>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <TIM6_DAC_IRQHandler+0x38>)
 800300e:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <TIM6_DAC_IRQHandler+0x3c>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <TIM6_DAC_IRQHandler+0x3c>)
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <TIM6_DAC_IRQHandler+0x3c>)
 8003022:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <TIM6_DAC_IRQHandler+0x40>)
 8003026:	f004 fe2d 	bl	8007c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	2000357a 	.word	0x2000357a
 8003034:	20003578 	.word	0x20003578
 8003038:	2000e36c 	.word	0x2000e36c

0800303c <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <DMA2_Channel7_IRQHandler+0x10>)
 8003042:	f001 fd5e 	bl	8004b02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20003580 	.word	0x20003580

08003050 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00a      	b.n	8003078 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003062:	f3af 8000 	nop.w
 8003066:	4601      	mov	r1, r0
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	60ba      	str	r2, [r7, #8]
 800306e:	b2ca      	uxtb	r2, r1
 8003070:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf0      	blt.n	8003062 <_read+0x12>
	}

return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e009      	b.n	80030b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	60ba      	str	r2, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd ff7d 	bl	8000fa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf1      	blt.n	800309c <_write+0x12>
	}
	return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_close>:

int _close(int file)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	return -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ea:	605a      	str	r2, [r3, #4]
	return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <_isatty>:

int _isatty(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
	return 1;
 8003102:	2301      	movs	r3, #1
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
	return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	; (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	; (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f009 fa5e 	bl	800c61c <__errno>
 8003160:	4603      	mov	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	; (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <_sbrk+0x64>)
 800317c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20018000 	.word	0x20018000
 800318c:	00000400 	.word	0x00000400
 8003190:	20000140 	.word	0x20000140
 8003194:	20010480 	.word	0x20010480

08003198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800319c:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <SystemInit+0x5c>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <SystemInit+0x5c>)
 80031a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <SystemInit+0x60>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <SystemInit+0x60>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <SystemInit+0x60>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <SystemInit+0x60>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <SystemInit+0x60>)
 80031c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80031c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80031cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <SystemInit+0x60>)
 80031d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <SystemInit+0x60>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <SystemInit+0x60>)
 80031dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <SystemInit+0x60>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00
 80031f8:	40021000 	.word	0x40021000

080031fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003234 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003200:	f7ff ffca 	bl	8003198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003204:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003206:	e003      	b.n	8003210 <LoopCopyDataInit>

08003208 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800320a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800320c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800320e:	3104      	adds	r1, #4

08003210 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003210:	480a      	ldr	r0, [pc, #40]	; (800323c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003214:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003216:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003218:	d3f6      	bcc.n	8003208 <CopyDataInit>
	ldr	r2, =_sbss
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <LoopForever+0x12>)
	b	LoopFillZerobss
 800321c:	e002      	b.n	8003224 <LoopFillZerobss>

0800321e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800321e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003220:	f842 3b04 	str.w	r3, [r2], #4

08003224 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <LoopForever+0x16>)
	cmp	r2, r3
 8003226:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003228:	d3f9      	bcc.n	800321e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800322a:	f009 f9fd 	bl	800c628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800322e:	f7fd fecb 	bl	8000fc8 <main>

08003232 <LoopForever>:

LoopForever:
    b LoopForever
 8003232:	e7fe      	b.n	8003232 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003234:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003238:	0800d9d0 	.word	0x0800d9d0
	ldr	r0, =_sdata
 800323c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003240:	2000011c 	.word	0x2000011c
	ldr	r2, =_sbss
 8003244:	2000011c 	.word	0x2000011c
	ldr	r3, = _ebss
 8003248:	20010480 	.word	0x20010480

0800324c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800324c:	e7fe      	b.n	800324c <ADC1_2_IRQHandler>
	...

08003250 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_Init+0x3c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_Init+0x3c>)
 8003260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003264:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003266:	2003      	movs	r0, #3
 8003268:	f001 fabd 	bl	80047e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800326c:	2000      	movs	r0, #0
 800326e:	f7ff fe2f 	bl	8002ed0 <HAL_InitTick>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	71fb      	strb	r3, [r7, #7]
 800327c:	e001      	b.n	8003282 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800327e:	f7ff fa47 	bl	8002710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003282:	79fb      	ldrb	r3, [r7, #7]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000009c 	.word	0x2000009c
 80032b4:	2000e3b8 	.word	0x2000e3b8

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	2000e3b8 	.word	0x2000e3b8

080032d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff ffee 	bl	80032b8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e8:	d005      	beq.n	80032f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_Delay+0x44>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032f6:	bf00      	nop
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d8f7      	bhi.n	80032f8 <HAL_Delay+0x28>
  {
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000009c 	.word	0x2000009c

08003318 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3360      	adds	r3, #96	; 0x60
 8003392:	461a      	mov	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <LL_ADC_SetOffset+0x44>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80033b8:	bf00      	nop
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	03fff000 	.word	0x03fff000

080033c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3360      	adds	r3, #96	; 0x60
 80033d6:	461a      	mov	r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3360      	adds	r3, #96	; 0x60
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	431a      	orrs	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3330      	adds	r3, #48	; 0x30
 8003460:	461a      	mov	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	4413      	add	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	211f      	movs	r1, #31
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0e9b      	lsrs	r3, r3, #26
 8003488:	f003 011f 	and.w	r1, r3, #31
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	431a      	orrs	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3314      	adds	r3, #20
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0e5b      	lsrs	r3, r3, #25
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	4413      	add	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0d1b      	lsrs	r3, r3, #20
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2107      	movs	r1, #7
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	401a      	ands	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	0d1b      	lsrs	r3, r3, #20
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	431a      	orrs	r2, r3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003518:	43db      	mvns	r3, r3
 800351a:	401a      	ands	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f003 0318 	and.w	r3, r3, #24
 8003522:	4908      	ldr	r1, [pc, #32]	; (8003544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003524:	40d9      	lsrs	r1, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	400b      	ands	r3, r1
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	431a      	orrs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003536:	bf00      	nop
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	0007ffff 	.word	0x0007ffff

08003548 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 031f 	and.w	r3, r3, #31
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6093      	str	r3, [r2, #8]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359c:	d101      	bne.n	80035a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ec:	d101      	bne.n	80035f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003614:	f043 0201 	orr.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <LL_ADC_IsEnabled+0x18>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <LL_ADC_IsEnabled+0x1a>
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800365e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003662:	f043 0204 	orr.w	r2, r3, #4
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d101      	bne.n	800368e <LL_ADC_REG_IsConversionOngoing+0x18>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d101      	bne.n	80036b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e136      	b.n	800394c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff f837 	bl	8002760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff3f 	bl	8003588 <LL_ADC_IsDeepPowerDownEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff25 	bl	8003564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff5a 	bl	80035d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d115      	bne.n	8003756 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff3e 	bl	80035b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003734:	4b87      	ldr	r3, [pc, #540]	; (8003954 <HAL_ADC_Init+0x290>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	4a87      	ldr	r2, [pc, #540]	; (8003958 <HAL_ADC_Init+0x294>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003748:	e002      	b.n	8003750 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3b01      	subs	r3, #1
 800374e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f9      	bne.n	800374a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff3c 	bl	80035d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	f043 0210 	orr.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff75 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 800378c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 80cf 	bne.w	800393a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 80cb 	bne.w	800393a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037ac:	f043 0202 	orr.w	r2, r3, #2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff35 	bl	8003628 <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d115      	bne.n	80037f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c4:	4865      	ldr	r0, [pc, #404]	; (800395c <HAL_ADC_Init+0x298>)
 80037c6:	f7ff ff2f 	bl	8003628 <LL_ADC_IsEnabled>
 80037ca:	4604      	mov	r4, r0
 80037cc:	4864      	ldr	r0, [pc, #400]	; (8003960 <HAL_ADC_Init+0x29c>)
 80037ce:	f7ff ff2b 	bl	8003628 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	431c      	orrs	r4, r3
 80037d6:	4863      	ldr	r0, [pc, #396]	; (8003964 <HAL_ADC_Init+0x2a0>)
 80037d8:	f7ff ff26 	bl	8003628 <LL_ADC_IsEnabled>
 80037dc:	4603      	mov	r3, r0
 80037de:	4323      	orrs	r3, r4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4619      	mov	r1, r3
 80037ea:	485f      	ldr	r0, [pc, #380]	; (8003968 <HAL_ADC_Init+0x2a4>)
 80037ec:	f7ff fd94 	bl	8003318 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7e5b      	ldrb	r3, [r3, #25]
 80037f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003800:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003806:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d106      	bne.n	800382c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	3b01      	subs	r3, #1
 8003824:	045b      	lsls	r3, r3, #17
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	4b47      	ldr	r3, [pc, #284]	; (800396c <HAL_ADC_Init+0x2a8>)
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	430b      	orrs	r3, r1
 800385a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff08 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 8003866:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff15 	bl	800369c <LL_ADC_INJ_IsConversionOngoing>
 8003872:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d13d      	bne.n	80038f6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d13a      	bne.n	80038f6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003884:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800388c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	430b      	orrs	r3, r1
 80038a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d118      	bne.n	80038e6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038d6:	430a      	orrs	r2, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	e007      	b.n	80038f6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0201 	bic.w	r2, r2, #1
 80038f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10c      	bne.n	8003918 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	f023 010f 	bic.w	r1, r3, #15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	1e5a      	subs	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
 8003916:	e007      	b.n	8003928 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020f 	bic.w	r2, r2, #15
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f023 0303 	bic.w	r3, r3, #3
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
 8003938:	e007      	b.n	800394a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800394a:	7ffb      	ldrb	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3724      	adds	r7, #36	; 0x24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	20000094 	.word	0x20000094
 8003958:	053e2d63 	.word	0x053e2d63
 800395c:	50040000 	.word	0x50040000
 8003960:	50040100 	.word	0x50040100
 8003964:	50040200 	.word	0x50040200
 8003968:	50040300 	.word	0x50040300
 800396c:	fff0c007 	.word	0xfff0c007

08003970 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800397c:	4850      	ldr	r0, [pc, #320]	; (8003ac0 <HAL_ADC_Start_DMA+0x150>)
 800397e:	f7ff fde3 	bl	8003548 <LL_ADC_GetMultimode>
 8003982:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fe74 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 808e 	bne.w	8003ab2 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_Start_DMA+0x34>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e089      	b.n	8003ab8 <HAL_ADC_Start_DMA+0x148>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d002      	beq.n	80039be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d172      	bne.n	8003aa4 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc98 	bl	80042f4 <ADC_Enable>
 80039c4:	4603      	mov	r3, r0
 80039c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d165      	bne.n	8003a9a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a37      	ldr	r2, [pc, #220]	; (8003ac4 <HAL_ADC_Start_DMA+0x154>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d002      	beq.n	80039f2 <HAL_ADC_Start_DMA+0x82>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_Start_DMA+0x84>
 80039f2:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <HAL_ADC_Start_DMA+0x158>)
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d002      	beq.n	8003a02 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f023 0206 	bic.w	r2, r3, #6
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	659a      	str	r2, [r3, #88]	; 0x58
 8003a26:	e002      	b.n	8003a2e <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <HAL_ADC_Start_DMA+0x15c>)
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <HAL_ADC_Start_DMA+0x160>)
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <HAL_ADC_Start_DMA+0x164>)
 8003a44:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	221c      	movs	r2, #28
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0210 	orr.w	r2, r2, #16
 8003a64:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3340      	adds	r3, #64	; 0x40
 8003a80:	4619      	mov	r1, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f000 ff9b 	bl	80049c0 <HAL_DMA_Start_IT>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fddb 	bl	800364e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a98:	e00d      	b.n	8003ab6 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003aa2:	e008      	b.n	8003ab6 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003ab0:	e001      	b.n	8003ab6 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	50040300 	.word	0x50040300
 8003ac4:	50040100 	.word	0x50040100
 8003ac8:	50040000 	.word	0x50040000
 8003acc:	080043b9 	.word	0x080043b9
 8003ad0:	08004491 	.word	0x08004491
 8003ad4:	080044ad 	.word	0x080044ad

08003ad8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b0b6      	sub	sp, #216	; 0xd8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x22>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e3c7      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x7b2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fd97 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 83a8 	bne.w	80042a0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d824      	bhi.n	8003ba2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	3b02      	subs	r3, #2
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d81b      	bhi.n	8003b9a <HAL_ADC_ConfigChannel+0x86>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_ADC_ConfigChannel+0x54>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b79 	.word	0x08003b79
 8003b6c:	08003b81 	.word	0x08003b81
 8003b70:	08003b89 	.word	0x08003b89
 8003b74:	08003b91 	.word	0x08003b91
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	220c      	movs	r2, #12
 8003b7c:	605a      	str	r2, [r3, #4]
          break;
 8003b7e:	e011      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2212      	movs	r2, #18
 8003b84:	605a      	str	r2, [r3, #4]
          break;
 8003b86:	e00d      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2218      	movs	r2, #24
 8003b8c:	605a      	str	r2, [r3, #4]
          break;
 8003b8e:	e009      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b96:	605a      	str	r2, [r3, #4]
          break;
 8003b98:	e004      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	605a      	str	r2, [r3, #4]
          break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003ba2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f7ff fc4d 	bl	8003450 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fd5b 	bl	8003676 <LL_ADC_REG_IsConversionOngoing>
 8003bc0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fd67 	bl	800369c <LL_ADC_INJ_IsConversionOngoing>
 8003bce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f040 81a6 	bne.w	8003f28 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f040 81a1 	bne.w	8003f28 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f7ff fc58 	bl	80034a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	08db      	lsrs	r3, r3, #3
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d00a      	beq.n	8003c30 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6919      	ldr	r1, [r3, #16]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c2a:	f7ff fba9 	bl	8003380 <LL_ADC_SetOffset>
 8003c2e:	e17b      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2100      	movs	r1, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fbc6 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x148>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff fbbb 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003c52:	4603      	mov	r3, r0
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	f003 021f 	and.w	r2, r3, #31
 8003c5a:	e01e      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x186>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fbb0 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e004      	b.n	8003c98 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x19e>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0e9b      	lsrs	r3, r3, #26
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	e018      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x1d0>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cbe:	fa93 f3a3 	rbit	r3, r3
 8003cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	e004      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d106      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fb7f 	bl	80033f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fb63 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_ADC_ConfigChannel+0x20e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fb58 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	0e9b      	lsrs	r3, r3, #26
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	e01e      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x24c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fb4d 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e004      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d58:	fab3 f383 	clz	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x264>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	0e9b      	lsrs	r3, r3, #26
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	e018      	b.n	8003daa <HAL_ADC_ConfigChannel+0x296>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e004      	b.n	8003daa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d106      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb1c 	bl	80033f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2102      	movs	r1, #2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fb00 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x2d4>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff faf5 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	f003 021f 	and.w	r2, r3, #31
 8003de6:	e01e      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x312>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2102      	movs	r1, #2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff faea 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003e16:	2320      	movs	r3, #32
 8003e18:	e004      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x32a>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	0e9b      	lsrs	r3, r3, #26
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	e016      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x358>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e4a:	fa93 f3a3 	rbit	r3, r3
 8003e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003e5e:	2320      	movs	r3, #32
 8003e60:	e004      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d106      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2102      	movs	r1, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fabb 	bl	80033f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2103      	movs	r1, #3
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fa9f 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x396>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2103      	movs	r1, #3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fa94 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	0e9b      	lsrs	r3, r3, #26
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	e017      	b.n	8003eda <HAL_ADC_ConfigChannel+0x3c6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fa89 	bl	80033c8 <LL_ADC_GetOffsetChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e003      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x3de>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	0e9b      	lsrs	r3, r3, #26
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	e011      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x402>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	e003      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	fab3 f383 	clz	r3, r3
 8003f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d106      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2103      	movs	r1, #3
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fa66 	bl	80033f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fb7b 	bl	8003628 <LL_ADC_IsEnabled>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f040 813f 	bne.w	80041b8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f7ff fada 	bl	8003500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a8e      	ldr	r2, [pc, #568]	; (800418c <HAL_ADC_ConfigChannel+0x678>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	f040 8130 	bne.w	80041b8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x46c>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	0e9b      	lsrs	r3, r3, #26
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	2b09      	cmp	r3, #9
 8003f76:	bf94      	ite	ls
 8003f78:	2301      	movls	r3, #1
 8003f7a:	2300      	movhi	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e019      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x4a0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f90:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	e003      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2b09      	cmp	r3, #9
 8003fac:	bf94      	ite	ls
 8003fae:	2301      	movls	r3, #1
 8003fb0:	2300      	movhi	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d079      	beq.n	80040ac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d107      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x4c0>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0e9b      	lsrs	r3, r3, #26
 8003fca:	3301      	adds	r3, #1
 8003fcc:	069b      	lsls	r3, r3, #26
 8003fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fd2:	e015      	b.n	8004000 <HAL_ADC_ConfigChannel+0x4ec>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	069b      	lsls	r3, r3, #26
 8003ffc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x50c>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	3301      	adds	r3, #1
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	e017      	b.n	8004050 <HAL_ADC_ConfigChannel+0x53c>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800402e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004030:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004038:	2320      	movs	r3, #32
 800403a:	e003      	b.n	8004044 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800403c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	3301      	adds	r3, #1
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2101      	movs	r1, #1
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	ea42 0103 	orr.w	r1, r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x562>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	3301      	adds	r3, #1
 8004068:	f003 021f 	and.w	r2, r3, #31
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	051b      	lsls	r3, r3, #20
 8004074:	e018      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x594>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	fa93 f3a3 	rbit	r3, r3
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800408e:	2320      	movs	r3, #32
 8004090:	e003      	b.n	800409a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004094:	fab3 f383 	clz	r3, r3
 8004098:	b2db      	uxtb	r3, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f003 021f 	and.w	r2, r3, #31
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040a8:	430b      	orrs	r3, r1
 80040aa:	e080      	b.n	80041ae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x5b4>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	3301      	adds	r3, #1
 80040c0:	069b      	lsls	r3, r3, #26
 80040c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040c6:	e015      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x5e0>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80040e0:	2320      	movs	r3, #32
 80040e2:	e003      	b.n	80040ec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3301      	adds	r3, #1
 80040ee:	069b      	lsls	r3, r3, #26
 80040f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x600>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	3301      	adds	r3, #1
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	e017      	b.n	8004144 <HAL_ADC_ConfigChannel+0x630>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	61fb      	str	r3, [r7, #28]
  return result;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800412c:	2320      	movs	r3, #32
 800412e:	e003      	b.n	8004138 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2101      	movs	r1, #1
 8004140:	fa01 f303 	lsl.w	r3, r1, r3
 8004144:	ea42 0103 	orr.w	r1, r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x65c>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0e9b      	lsrs	r3, r3, #26
 800415a:	3301      	adds	r3, #1
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	4613      	mov	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4413      	add	r3, r2
 8004166:	3b1e      	subs	r3, #30
 8004168:	051b      	lsls	r3, r3, #20
 800416a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800416e:	e01d      	b.n	80041ac <HAL_ADC_ConfigChannel+0x698>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	613b      	str	r3, [r7, #16]
  return result;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004188:	2320      	movs	r3, #32
 800418a:	e005      	b.n	8004198 <HAL_ADC_ConfigChannel+0x684>
 800418c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f003 021f 	and.w	r2, r3, #31
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	3b1e      	subs	r3, #30
 80041a6:	051b      	lsls	r3, r3, #20
 80041a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ac:	430b      	orrs	r3, r1
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	6892      	ldr	r2, [r2, #8]
 80041b2:	4619      	mov	r1, r3
 80041b4:	f7ff f978 	bl	80034a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b44      	ldr	r3, [pc, #272]	; (80042d0 <HAL_ADC_ConfigChannel+0x7bc>)
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d07a      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041c4:	4843      	ldr	r0, [pc, #268]	; (80042d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80041c6:	f7ff f8cd 	bl	8003364 <LL_ADC_GetCommonPathInternalCh>
 80041ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d12c      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d126      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3c      	ldr	r2, [pc, #240]	; (80042dc <HAL_ADC_ConfigChannel+0x7c8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <HAL_ADC_ConfigChannel+0x6e4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d15d      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004200:	4619      	mov	r1, r3
 8004202:	4834      	ldr	r0, [pc, #208]	; (80042d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004204:	f7ff f89b 	bl	800333e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004208:	4b36      	ldr	r3, [pc, #216]	; (80042e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	4a36      	ldr	r2, [pc, #216]	; (80042e8 <HAL_ADC_ConfigChannel+0x7d4>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	099b      	lsrs	r3, r3, #6
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004222:	e002      	b.n	800422a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f9      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004230:	e040      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <HAL_ADC_ConfigChannel+0x7d8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d118      	bne.n	800426e <HAL_ADC_ConfigChannel+0x75a>
 800423c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d112      	bne.n	800426e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_ADC_ConfigChannel+0x7c8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_ADC_ConfigChannel+0x748>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d12d      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800425c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004264:	4619      	mov	r1, r3
 8004266:	481b      	ldr	r0, [pc, #108]	; (80042d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004268:	f7ff f869 	bl	800333e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800426c:	e024      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d120      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11a      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_ADC_ConfigChannel+0x7c8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d115      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800428e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004292:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004296:	4619      	mov	r1, r3
 8004298:	480e      	ldr	r0, [pc, #56]	; (80042d4 <HAL_ADC_ConfigChannel+0x7c0>)
 800429a:	f7ff f850 	bl	800333e <LL_ADC_SetCommonPathInternalCh>
 800429e:	e00c      	b.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80042b2:	e002      	b.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80042c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	37d8      	adds	r7, #216	; 0xd8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	80080000 	.word	0x80080000
 80042d4:	50040300 	.word	0x50040300
 80042d8:	c7520000 	.word	0xc7520000
 80042dc:	50040000 	.word	0x50040000
 80042e0:	50040200 	.word	0x50040200
 80042e4:	20000094 	.word	0x20000094
 80042e8:	053e2d63 	.word	0x053e2d63
 80042ec:	cb840000 	.word	0xcb840000
 80042f0:	80000001 	.word	0x80000001

080042f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff f991 	bl	8003628 <LL_ADC_IsEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d14d      	bne.n	80043a8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	4b28      	ldr	r3, [pc, #160]	; (80043b4 <ADC_Enable+0xc0>)
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0210 	orr.w	r2, r3, #16
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e039      	b.n	80043aa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff f960 	bl	8003600 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004340:	f7fe ffba 	bl	80032b8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004346:	e028      	b.n	800439a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff f96b 	bl	8003628 <LL_ADC_IsEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f94f 	bl	8003600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004362:	f7fe ffa9 	bl	80032b8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d914      	bls.n	800439a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d00d      	beq.n	800439a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f043 0210 	orr.w	r2, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f043 0201 	orr.w	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e007      	b.n	80043aa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d1cf      	bne.n	8004348 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	8000003f 	.word	0x8000003f

080043b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d14b      	bne.n	800446a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d021      	beq.n	8004430 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff f81a 	bl	800342a <LL_ADC_REG_IsTriggerSourceSWStart>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d032      	beq.n	8004462 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d12b      	bne.n	8004462 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11f      	bne.n	8004462 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f043 0201 	orr.w	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
 800442e:	e018      	b.n	8004462 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d111      	bne.n	8004462 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fb38 	bl	8003ad8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004468:	e00e      	b.n	8004488 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fb42 	bl	8003b00 <HAL_ADC_ErrorCallback>
}
 800447c:	e004      	b.n	8004488 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f7ff fb24 	bl	8003aec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	f043 0204 	orr.w	r2, r3, #4
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff fb14 	bl	8003b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <LL_ADC_IsEnabled>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <LL_ADC_IsEnabled+0x18>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <LL_ADC_IsEnabled+0x1a>
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <LL_ADC_REG_IsConversionOngoing>:
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b04      	cmp	r3, #4
 8004518:	d101      	bne.n	800451e <LL_ADC_REG_IsConversionOngoing+0x18>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b09f      	sub	sp, #124	; 0x7c
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004546:	2302      	movs	r3, #2
 8004548:	e093      	b.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004552:	2300      	movs	r3, #0
 8004554:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004556:	2300      	movs	r3, #0
 8004558:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a47      	ldr	r2, [pc, #284]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d102      	bne.n	800456a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004564:	4b46      	ldr	r3, [pc, #280]	; (8004680 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	e001      	b.n	800456e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800456a:	2300      	movs	r3, #0
 800456c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e072      	b.n	8004672 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ffb9 	bl	8004506 <LL_ADC_REG_IsConversionOngoing>
 8004594:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ffb3 	bl	8004506 <LL_ADC_REG_IsConversionOngoing>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d154      	bne.n	8004650 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80045a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d151      	bne.n	8004650 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80045ae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02c      	beq.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ca:	035b      	lsls	r3, r3, #13
 80045cc:	430b      	orrs	r3, r1
 80045ce:	431a      	orrs	r2, r3
 80045d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045d4:	4829      	ldr	r0, [pc, #164]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80045d6:	f7ff ff83 	bl	80044e0 <LL_ADC_IsEnabled>
 80045da:	4604      	mov	r4, r0
 80045dc:	4828      	ldr	r0, [pc, #160]	; (8004680 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80045de:	f7ff ff7f 	bl	80044e0 <LL_ADC_IsEnabled>
 80045e2:	4603      	mov	r3, r0
 80045e4:	431c      	orrs	r4, r3
 80045e6:	4828      	ldr	r0, [pc, #160]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80045e8:	f7ff ff7a 	bl	80044e0 <LL_ADC_IsEnabled>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4323      	orrs	r3, r4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d137      	bne.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045fc:	f023 030f 	bic.w	r3, r3, #15
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	6811      	ldr	r1, [r2, #0]
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	430a      	orrs	r2, r1
 800460a:	431a      	orrs	r2, r3
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004610:	e028      	b.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800461a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800461e:	4817      	ldr	r0, [pc, #92]	; (800467c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004620:	f7ff ff5e 	bl	80044e0 <LL_ADC_IsEnabled>
 8004624:	4604      	mov	r4, r0
 8004626:	4816      	ldr	r0, [pc, #88]	; (8004680 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004628:	f7ff ff5a 	bl	80044e0 <LL_ADC_IsEnabled>
 800462c:	4603      	mov	r3, r0
 800462e:	431c      	orrs	r4, r3
 8004630:	4815      	ldr	r0, [pc, #84]	; (8004688 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004632:	f7ff ff55 	bl	80044e0 <LL_ADC_IsEnabled>
 8004636:	4603      	mov	r3, r0
 8004638:	4323      	orrs	r3, r4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d112      	bne.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800463e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004646:	f023 030f 	bic.w	r3, r3, #15
 800464a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800464e:	e009      	b.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004662:	e000      	b.n	8004666 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004664:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800466e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004672:	4618      	mov	r0, r3
 8004674:	377c      	adds	r7, #124	; 0x7c
 8004676:	46bd      	mov	sp, r7
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	bf00      	nop
 800467c:	50040000 	.word	0x50040000
 8004680:	50040100 	.word	0x50040100
 8004684:	50040300 	.word	0x50040300
 8004688:	50040200 	.word	0x50040200

0800468c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <__NVIC_SetPriorityGrouping+0x44>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046a8:	4013      	ands	r3, r2
 80046aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046be:	4a04      	ldr	r2, [pc, #16]	; (80046d0 <__NVIC_SetPriorityGrouping+0x44>)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	60d3      	str	r3, [r2, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000ed00 	.word	0xe000ed00

080046d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046d8:	4b04      	ldr	r3, [pc, #16]	; (80046ec <__NVIC_GetPriorityGrouping+0x18>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	0a1b      	lsrs	r3, r3, #8
 80046de:	f003 0307 	and.w	r3, r3, #7
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db0b      	blt.n	800471a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	f003 021f 	and.w	r2, r3, #31
 8004708:	4907      	ldr	r1, [pc, #28]	; (8004728 <__NVIC_EnableIRQ+0x38>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2001      	movs	r0, #1
 8004712:	fa00 f202 	lsl.w	r2, r0, r2
 8004716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	e000e100 	.word	0xe000e100

0800472c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	2b00      	cmp	r3, #0
 800473e:	db0a      	blt.n	8004756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	b2da      	uxtb	r2, r3
 8004744:	490c      	ldr	r1, [pc, #48]	; (8004778 <__NVIC_SetPriority+0x4c>)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	440b      	add	r3, r1
 8004750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004754:	e00a      	b.n	800476c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	4908      	ldr	r1, [pc, #32]	; (800477c <__NVIC_SetPriority+0x50>)
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	3b04      	subs	r3, #4
 8004764:	0112      	lsls	r2, r2, #4
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	440b      	add	r3, r1
 800476a:	761a      	strb	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	e000e100 	.word	0xe000e100
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f1c3 0307 	rsb	r3, r3, #7
 800479a:	2b04      	cmp	r3, #4
 800479c:	bf28      	it	cs
 800479e:	2304      	movcs	r3, #4
 80047a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3304      	adds	r3, #4
 80047a6:	2b06      	cmp	r3, #6
 80047a8:	d902      	bls.n	80047b0 <NVIC_EncodePriority+0x30>
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3b03      	subs	r3, #3
 80047ae:	e000      	b.n	80047b2 <NVIC_EncodePriority+0x32>
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43da      	mvns	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	401a      	ands	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fa01 f303 	lsl.w	r3, r1, r3
 80047d2:	43d9      	mvns	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d8:	4313      	orrs	r3, r2
         );
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	; 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff4c 	bl	800468c <__NVIC_SetPriorityGrouping>
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800480e:	f7ff ff61 	bl	80046d4 <__NVIC_GetPriorityGrouping>
 8004812:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	6978      	ldr	r0, [r7, #20]
 800481a:	f7ff ffb1 	bl	8004780 <NVIC_EncodePriority>
 800481e:	4602      	mov	r2, r0
 8004820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff80 	bl	800472c <__NVIC_SetPriority>
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff54 	bl	80046f0 <__NVIC_EnableIRQ>
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e098      	b.n	8004994 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <HAL_DMA_Init+0x150>)
 800486a:	429a      	cmp	r2, r3
 800486c:	d80f      	bhi.n	800488e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_DMA_Init+0x154>)
 8004876:	4413      	add	r3, r2
 8004878:	4a4b      	ldr	r2, [pc, #300]	; (80049a8 <HAL_DMA_Init+0x158>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	009a      	lsls	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a48      	ldr	r2, [pc, #288]	; (80049ac <HAL_DMA_Init+0x15c>)
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
 800488c:	e00e      	b.n	80048ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	4b46      	ldr	r3, [pc, #280]	; (80049b0 <HAL_DMA_Init+0x160>)
 8004896:	4413      	add	r3, r2
 8004898:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_DMA_Init+0x158>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	091b      	lsrs	r3, r3, #4
 80048a0:	009a      	lsls	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <HAL_DMA_Init+0x164>)
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004906:	d039      	beq.n	800497c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <HAL_DMA_Init+0x15c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d11a      	bne.n	8004948 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004912:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <HAL_DMA_Init+0x168>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f003 031c 	and.w	r3, r3, #28
 800491e:	210f      	movs	r1, #15
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	4924      	ldr	r1, [pc, #144]	; (80049b8 <HAL_DMA_Init+0x168>)
 8004928:	4013      	ands	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800492c:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <HAL_DMA_Init+0x168>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	f003 031c 	and.w	r3, r3, #28
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	491d      	ldr	r1, [pc, #116]	; (80049b8 <HAL_DMA_Init+0x168>)
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]
 8004946:	e019      	b.n	800497c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <HAL_DMA_Init+0x16c>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	f003 031c 	and.w	r3, r3, #28
 8004954:	210f      	movs	r1, #15
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	4917      	ldr	r1, [pc, #92]	; (80049bc <HAL_DMA_Init+0x16c>)
 800495e:	4013      	ands	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004962:	4b16      	ldr	r3, [pc, #88]	; (80049bc <HAL_DMA_Init+0x16c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f003 031c 	and.w	r3, r3, #28
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	4911      	ldr	r1, [pc, #68]	; (80049bc <HAL_DMA_Init+0x16c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40020407 	.word	0x40020407
 80049a4:	bffdfff8 	.word	0xbffdfff8
 80049a8:	cccccccd 	.word	0xcccccccd
 80049ac:	40020000 	.word	0x40020000
 80049b0:	bffdfbf8 	.word	0xbffdfbf8
 80049b4:	40020400 	.word	0x40020400
 80049b8:	400200a8 	.word	0x400200a8
 80049bc:	400204a8 	.word	0x400204a8

080049c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_DMA_Start_IT+0x20>
 80049dc:	2302      	movs	r3, #2
 80049de:	e04b      	b.n	8004a78 <HAL_DMA_Start_IT+0xb8>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d13a      	bne.n	8004a6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f921 	bl	8004c60 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 020e 	orr.w	r2, r2, #14
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	e00f      	b.n	8004a58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0204 	bic.w	r2, r2, #4
 8004a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 020a 	orr.w	r2, r2, #10
 8004a56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e005      	b.n	8004a76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
 8004a74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d005      	beq.n	8004aa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	e029      	b.n	8004af8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 020e 	bic.w	r2, r2, #14
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	f003 021c 	and.w	r2, r3, #28
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
    }
  }
  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f003 031c 	and.w	r3, r3, #28
 8004b22:	2204      	movs	r2, #4
 8004b24:	409a      	lsls	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d026      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x7a>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f003 0304 	and.w	r3, r3, #4
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d021      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0204 	bic.w	r2, r2, #4
 8004b54:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f003 021c 	and.w	r2, r3, #28
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2104      	movs	r1, #4
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d071      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004b7a:	e06c      	b.n	8004c56 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	f003 031c 	and.w	r3, r3, #28
 8004b84:	2202      	movs	r2, #2
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d02e      	beq.n	8004bee <HAL_DMA_IRQHandler+0xec>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d029      	beq.n	8004bee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10b      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 020a 	bic.w	r2, r2, #10
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	f003 021c 	and.w	r2, r3, #28
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	2102      	movs	r1, #2
 8004bce:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d038      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004bec:	e033      	b.n	8004c56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	f003 031c 	and.w	r3, r3, #28
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02a      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x156>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d025      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 020e 	bic.w	r2, r2, #14
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	f003 021c 	and.w	r2, r3, #28
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	2101      	movs	r1, #1
 8004c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
}
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	f003 021c 	and.w	r2, r3, #28
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d108      	bne.n	8004ca4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ca2:	e007      	b.n	8004cb4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cce:	e17f      	b.n	8004fd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 8171 	beq.w	8004fca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d00b      	beq.n	8004d08 <HAL_GPIO_Init+0x48>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d007      	beq.n	8004d08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cfc:	2b11      	cmp	r3, #17
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b12      	cmp	r3, #18
 8004d06:	d130      	bne.n	8004d6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	2203      	movs	r2, #3
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d3e:	2201      	movs	r2, #1
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f003 0201 	and.w	r2, r3, #1
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d118      	bne.n	8004da8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0201 	and.w	r2, r3, #1
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2203      	movs	r2, #3
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d003      	beq.n	8004de8 <HAL_GPIO_Init+0x128>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b12      	cmp	r3, #18
 8004de6:	d123      	bne.n	8004e30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	08da      	lsrs	r2, r3, #3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3208      	adds	r2, #8
 8004df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	220f      	movs	r2, #15
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43db      	mvns	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	08da      	lsrs	r2, r3, #3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3208      	adds	r2, #8
 8004e2a:	6939      	ldr	r1, [r7, #16]
 8004e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 0203 	and.w	r2, r3, #3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80ac 	beq.w	8004fca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e72:	4b5f      	ldr	r3, [pc, #380]	; (8004ff0 <HAL_GPIO_Init+0x330>)
 8004e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e76:	4a5e      	ldr	r2, [pc, #376]	; (8004ff0 <HAL_GPIO_Init+0x330>)
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ff0 <HAL_GPIO_Init+0x330>)
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e8a:	4a5a      	ldr	r2, [pc, #360]	; (8004ff4 <HAL_GPIO_Init+0x334>)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	089b      	lsrs	r3, r3, #2
 8004e90:	3302      	adds	r3, #2
 8004e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	220f      	movs	r2, #15
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004eb4:	d025      	beq.n	8004f02 <HAL_GPIO_Init+0x242>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	; (8004ff8 <HAL_GPIO_Init+0x338>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01f      	beq.n	8004efe <HAL_GPIO_Init+0x23e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a4e      	ldr	r2, [pc, #312]	; (8004ffc <HAL_GPIO_Init+0x33c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d019      	beq.n	8004efa <HAL_GPIO_Init+0x23a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a4d      	ldr	r2, [pc, #308]	; (8005000 <HAL_GPIO_Init+0x340>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_GPIO_Init+0x236>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4c      	ldr	r2, [pc, #304]	; (8005004 <HAL_GPIO_Init+0x344>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00d      	beq.n	8004ef2 <HAL_GPIO_Init+0x232>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a4b      	ldr	r2, [pc, #300]	; (8005008 <HAL_GPIO_Init+0x348>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <HAL_GPIO_Init+0x22e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4a      	ldr	r2, [pc, #296]	; (800500c <HAL_GPIO_Init+0x34c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_GPIO_Init+0x22a>
 8004ee6:	2306      	movs	r3, #6
 8004ee8:	e00c      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004eea:	2307      	movs	r3, #7
 8004eec:	e00a      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004eee:	2305      	movs	r3, #5
 8004ef0:	e008      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e004      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e002      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_GPIO_Init+0x244>
 8004f02:	2300      	movs	r3, #0
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	f002 0203 	and.w	r2, r2, #3
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	4093      	lsls	r3, r2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f14:	4937      	ldr	r1, [pc, #220]	; (8004ff4 <HAL_GPIO_Init+0x334>)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f22:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f46:	4a32      	ldr	r2, [pc, #200]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004f4c:	4b30      	ldr	r3, [pc, #192]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f76:	4b26      	ldr	r3, [pc, #152]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4013      	ands	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fa0:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4013      	ands	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fc4:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_GPIO_Init+0x350>)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f47f ae78 	bne.w	8004cd0 <HAL_GPIO_Init+0x10>
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	48000400 	.word	0x48000400
 8004ffc:	48000800 	.word	0x48000800
 8005000:	48000c00 	.word	0x48000c00
 8005004:	48001000 	.word	0x48001000
 8005008:	48001400 	.word	0x48001400
 800500c:	48001800 	.word	0x48001800
 8005010:	40010400 	.word	0x40010400

08005014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
 8005020:	4613      	mov	r3, r2
 8005022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005024:	787b      	ldrb	r3, [r7, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005030:	e002      	b.n	8005038 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e081      	b.n	800515a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fd fbe6 	bl	800283c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2224      	movs	r2, #36	; 0x24
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	e006      	b.n	80050cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d104      	bne.n	80050de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	ea42 0103 	orr.w	r1, r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b20      	cmp	r3, #32
 8005176:	d138      	bne.n	80051ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005182:	2302      	movs	r3, #2
 8005184:	e032      	b.n	80051ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	; 0x24
 8005192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6819      	ldr	r1, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b20      	cmp	r3, #32
 800520c:	d139      	bne.n	8005282 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005218:	2302      	movs	r3, #2
 800521a:	e033      	b.n	8005284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2224      	movs	r2, #36	; 0x24
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800524a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	e000      	b.n	8005284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005282:	2302      	movs	r3, #2
  }
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40007000 	.word	0x40007000

080052ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ba:	d130      	bne.n	800531e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052c8:	d038      	beq.n	800533c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2232      	movs	r2, #50	; 0x32
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	4a1b      	ldr	r2, [pc, #108]	; (8005354 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	0c9b      	lsrs	r3, r3, #18
 80052ec:	3301      	adds	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f0:	e002      	b.n	80052f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f8:	4b14      	ldr	r3, [pc, #80]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005304:	d102      	bne.n	800530c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f2      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005318:	d110      	bne.n	800533c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e00f      	b.n	800533e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532a:	d007      	beq.n	800533c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005334:	4a05      	ldr	r2, [pc, #20]	; (800534c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800533a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40007000 	.word	0x40007000
 8005350:	20000094 	.word	0x20000094
 8005354:	431bde83 	.word	0x431bde83

08005358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e3d4      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800536a:	4ba1      	ldr	r3, [pc, #644]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005374:	4b9e      	ldr	r3, [pc, #632]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80e4 	beq.w	8005554 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <HAL_RCC_OscConfig+0x4a>
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	f040 808b 	bne.w	80054b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 8087 	bne.w	80054b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053a2:	4b93      	ldr	r3, [pc, #588]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_RCC_OscConfig+0x62>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e3ac      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	4b8c      	ldr	r3, [pc, #560]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_RCC_OscConfig+0x7c>
 80053ca:	4b89      	ldr	r3, [pc, #548]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d2:	e005      	b.n	80053e0 <HAL_RCC_OscConfig+0x88>
 80053d4:	4b86      	ldr	r3, [pc, #536]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80053d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053da:	091b      	lsrs	r3, r3, #4
 80053dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d223      	bcs.n	800542c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fd73 	bl	8005ed4 <RCC_SetFlashLatencyFromMSIRange>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e38d      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053f8:	4b7d      	ldr	r3, [pc, #500]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a7c      	ldr	r2, [pc, #496]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80053fe:	f043 0308 	orr.w	r3, r3, #8
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b7a      	ldr	r3, [pc, #488]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	4977      	ldr	r1, [pc, #476]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005416:	4b76      	ldr	r3, [pc, #472]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	4972      	ldr	r1, [pc, #456]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
 800542a:	e025      	b.n	8005478 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800542c:	4b70      	ldr	r3, [pc, #448]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6f      	ldr	r2, [pc, #444]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005432:	f043 0308 	orr.w	r3, r3, #8
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b6d      	ldr	r3, [pc, #436]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	496a      	ldr	r1, [pc, #424]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800544a:	4b69      	ldr	r3, [pc, #420]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	4965      	ldr	r1, [pc, #404]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fd33 	bl	8005ed4 <RCC_SetFlashLatencyFromMSIRange>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e34d      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005478:	f000 fc36 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	495a      	ldr	r1, [pc, #360]	; (80055f4 <HAL_RCC_OscConfig+0x29c>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
 8005494:	4a58      	ldr	r2, [pc, #352]	; (80055f8 <HAL_RCC_OscConfig+0x2a0>)
 8005496:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005498:	4b58      	ldr	r3, [pc, #352]	; (80055fc <HAL_RCC_OscConfig+0x2a4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7fd fd17 	bl	8002ed0 <HAL_InitTick>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d052      	beq.n	8005552 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	e331      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d032      	beq.n	800551e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054b8:	4b4d      	ldr	r3, [pc, #308]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054c4:	f7fd fef8 	bl	80032b8 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054cc:	f7fd fef4 	bl	80032b8 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e31a      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054de:	4b44      	ldr	r3, [pc, #272]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ea:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a40      	ldr	r2, [pc, #256]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	493b      	ldr	r1, [pc, #236]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005504:	4313      	orrs	r3, r2
 8005506:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	4936      	ldr	r1, [pc, #216]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
 800551c:	e01a      	b.n	8005554 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800551e:	4b34      	ldr	r3, [pc, #208]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a33      	ldr	r2, [pc, #204]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800552a:	f7fd fec5 	bl	80032b8 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005532:	f7fd fec1 	bl	80032b8 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e2e7      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f0      	bne.n	8005532 <HAL_RCC_OscConfig+0x1da>
 8005550:	e000      	b.n	8005554 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005552:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d074      	beq.n	800564a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b08      	cmp	r3, #8
 8005564:	d005      	beq.n	8005572 <HAL_RCC_OscConfig+0x21a>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d10e      	bne.n	800558a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d10b      	bne.n	800558a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005572:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d064      	beq.n	8005648 <HAL_RCC_OscConfig+0x2f0>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d160      	bne.n	8005648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e2c4      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005592:	d106      	bne.n	80055a2 <HAL_RCC_OscConfig+0x24a>
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 800559a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	e01d      	b.n	80055de <HAL_RCC_OscConfig+0x286>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055aa:	d10c      	bne.n	80055c6 <HAL_RCC_OscConfig+0x26e>
 80055ac:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e00b      	b.n	80055de <HAL_RCC_OscConfig+0x286>
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a06      	ldr	r2, [pc, #24]	; (80055f0 <HAL_RCC_OscConfig+0x298>)
 80055d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01c      	beq.n	8005620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fd fe67 	bl	80032b8 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055ec:	e011      	b.n	8005612 <HAL_RCC_OscConfig+0x2ba>
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800d8e0 	.word	0x0800d8e0
 80055f8:	20000094 	.word	0x20000094
 80055fc:	20000098 	.word	0x20000098
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005600:	f7fd fe5a 	bl	80032b8 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e280      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005612:	4baf      	ldr	r3, [pc, #700]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x2a8>
 800561e:	e014      	b.n	800564a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fd fe4a 	bl	80032b8 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005628:	f7fd fe46 	bl	80032b8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e26c      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800563a:	4ba5      	ldr	r3, [pc, #660]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x2d0>
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d060      	beq.n	8005718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d005      	beq.n	8005668 <HAL_RCC_OscConfig+0x310>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d119      	bne.n	8005696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d116      	bne.n	8005696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005668:	4b99      	ldr	r3, [pc, #612]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCC_OscConfig+0x328>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e249      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005680:	4b93      	ldr	r3, [pc, #588]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	4990      	ldr	r1, [pc, #576]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005694:	e040      	b.n	8005718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d023      	beq.n	80056e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800569e:	4b8c      	ldr	r3, [pc, #560]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a8b      	ldr	r2, [pc, #556]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056aa:	f7fd fe05 	bl	80032b8 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b2:	f7fd fe01 	bl	80032b8 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e227      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c4:	4b82      	ldr	r3, [pc, #520]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d0:	4b7f      	ldr	r3, [pc, #508]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	497c      	ldr	r1, [pc, #496]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	604b      	str	r3, [r1, #4]
 80056e4:	e018      	b.n	8005718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e6:	4b7a      	ldr	r3, [pc, #488]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a79      	ldr	r2, [pc, #484]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80056ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fd fde1 	bl	80032b8 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fa:	f7fd fddd 	bl	80032b8 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e203      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800570c:	4b70      	ldr	r3, [pc, #448]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d03c      	beq.n	800579e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01c      	beq.n	8005766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572c:	4b68      	ldr	r3, [pc, #416]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800572e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005732:	4a67      	ldr	r2, [pc, #412]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573c:	f7fd fdbc 	bl	80032b8 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005744:	f7fd fdb8 	bl	80032b8 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e1de      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005756:	4b5e      	ldr	r3, [pc, #376]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ef      	beq.n	8005744 <HAL_RCC_OscConfig+0x3ec>
 8005764:	e01b      	b.n	800579e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005766:	4b5a      	ldr	r3, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576c:	4a58      	ldr	r2, [pc, #352]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800576e:	f023 0301 	bic.w	r3, r3, #1
 8005772:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fd fd9f 	bl	80032b8 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800577c:	e008      	b.n	8005790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577e:	f7fd fd9b 	bl	80032b8 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e1c1      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005790:	4b4f      	ldr	r3, [pc, #316]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ef      	bne.n	800577e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80a6 	beq.w	80058f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ac:	2300      	movs	r3, #0
 80057ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057b0:	4b47      	ldr	r3, [pc, #284]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057bc:	4b44      	ldr	r3, [pc, #272]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	4a43      	ldr	r2, [pc, #268]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80057c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c6:	6593      	str	r3, [r2, #88]	; 0x58
 80057c8:	4b41      	ldr	r3, [pc, #260]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d8:	4b3e      	ldr	r3, [pc, #248]	; (80058d4 <HAL_RCC_OscConfig+0x57c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d118      	bne.n	8005816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057e4:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <HAL_RCC_OscConfig+0x57c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <HAL_RCC_OscConfig+0x57c>)
 80057ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f0:	f7fd fd62 	bl	80032b8 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f8:	f7fd fd5e 	bl	80032b8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e184      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580a:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <HAL_RCC_OscConfig+0x57c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d108      	bne.n	8005830 <HAL_RCC_OscConfig+0x4d8>
 800581e:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005824:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800582e:	e024      	b.n	800587a <HAL_RCC_OscConfig+0x522>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b05      	cmp	r3, #5
 8005836:	d110      	bne.n	800585a <HAL_RCC_OscConfig+0x502>
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005840:	f043 0304 	orr.w	r3, r3, #4
 8005844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005848:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005858:	e00f      	b.n	800587a <HAL_RCC_OscConfig+0x522>
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800586a:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 8005872:	f023 0304 	bic.w	r3, r3, #4
 8005876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d016      	beq.n	80058b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005882:	f7fd fd19 	bl	80032b8 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005888:	e00a      	b.n	80058a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fd fd15 	bl	80032b8 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f241 3288 	movw	r2, #5000	; 0x1388
 8005898:	4293      	cmp	r3, r2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e139      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCC_OscConfig+0x578>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0ed      	beq.n	800588a <HAL_RCC_OscConfig+0x532>
 80058ae:	e01a      	b.n	80058e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fd fd02 	bl	80032b8 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058b6:	e00f      	b.n	80058d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fd fcfe 	bl	80032b8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d906      	bls.n	80058d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e122      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d8:	4b90      	ldr	r3, [pc, #576]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e8      	bne.n	80058b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e6:	7ffb      	ldrb	r3, [r7, #31]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d105      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ec:	4b8b      	ldr	r3, [pc, #556]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	4a8a      	ldr	r2, [pc, #552]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80058f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8108 	beq.w	8005b12 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	2b02      	cmp	r3, #2
 8005908:	f040 80d0 	bne.w	8005aac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800590c:	4b83      	ldr	r3, [pc, #524]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0203 	and.w	r2, r3, #3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d130      	bne.n	8005982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	3b01      	subs	r3, #1
 800592c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d127      	bne.n	8005982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d11f      	bne.n	8005982 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800594c:	2a07      	cmp	r2, #7
 800594e:	bf14      	ite	ne
 8005950:	2201      	movne	r2, #1
 8005952:	2200      	moveq	r2, #0
 8005954:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005956:	4293      	cmp	r3, r2
 8005958:	d113      	bne.n	8005982 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	3b01      	subs	r3, #1
 8005968:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800596a:	429a      	cmp	r2, r3
 800596c:	d109      	bne.n	8005982 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	3b01      	subs	r3, #1
 800597c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d06e      	beq.n	8005a60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	2b0c      	cmp	r3, #12
 8005986:	d069      	beq.n	8005a5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005988:	4b64      	ldr	r3, [pc, #400]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005994:	4b61      	ldr	r3, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e0b7      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059a4:	4b5d      	ldr	r3, [pc, #372]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5c      	ldr	r2, [pc, #368]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059b0:	f7fd fc82 	bl	80032b8 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b8:	f7fd fc7e 	bl	80032b8 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e0a4      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059ca:	4b54      	ldr	r3, [pc, #336]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1f0      	bne.n	80059b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059d6:	4b51      	ldr	r3, [pc, #324]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	4b51      	ldr	r3, [pc, #324]	; (8005b20 <HAL_RCC_OscConfig+0x7c8>)
 80059dc:	4013      	ands	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059e6:	3a01      	subs	r2, #1
 80059e8:	0112      	lsls	r2, r2, #4
 80059ea:	4311      	orrs	r1, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059f0:	0212      	lsls	r2, r2, #8
 80059f2:	4311      	orrs	r1, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80059f8:	0852      	lsrs	r2, r2, #1
 80059fa:	3a01      	subs	r2, #1
 80059fc:	0552      	lsls	r2, r2, #21
 80059fe:	4311      	orrs	r1, r2
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a04:	0852      	lsrs	r2, r2, #1
 8005a06:	3a01      	subs	r2, #1
 8005a08:	0652      	lsls	r2, r2, #25
 8005a0a:	4311      	orrs	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a10:	0912      	lsrs	r2, r2, #4
 8005a12:	0452      	lsls	r2, r2, #17
 8005a14:	430a      	orrs	r2, r1
 8005a16:	4941      	ldr	r1, [pc, #260]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a1c:	4b3f      	ldr	r3, [pc, #252]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a3e      	ldr	r2, [pc, #248]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a28:	4b3c      	ldr	r3, [pc, #240]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a34:	f7fd fc40 	bl	80032b8 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fd fc3c 	bl	80032b8 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e062      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4e:	4b33      	ldr	r3, [pc, #204]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a5a:	e05a      	b.n	8005b12 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e059      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a60:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d152      	bne.n	8005b12 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a6c:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a78:	4b28      	ldr	r3, [pc, #160]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a84:	f7fd fc18 	bl	80032b8 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fd fc14 	bl	80032b8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e03a      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9e:	4b1f      	ldr	r3, [pc, #124]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x734>
 8005aaa:	e032      	b.n	8005b12 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d02d      	beq.n	8005b0e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005ab8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005abc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005aca:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005ad0:	f023 0303 	bic.w	r3, r3, #3
 8005ad4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005adc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fd fbe7 	bl	80032b8 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fd fbe3 	bl	80032b8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e009      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b00:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_OscConfig+0x7c4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f0      	bne.n	8005aee <HAL_RCC_OscConfig+0x796>
 8005b0c:	e001      	b.n	8005b12 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3720      	adds	r7, #32
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	f99d808c 	.word	0xf99d808c

08005b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0c8      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b38:	4b66      	ldr	r3, [pc, #408]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d910      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b46:	4b63      	ldr	r3, [pc, #396]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f023 0207 	bic.w	r2, r3, #7
 8005b4e:	4961      	ldr	r1, [pc, #388]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b5f      	ldr	r3, [pc, #380]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b0      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d04c      	beq.n	8005c0e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d107      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7c:	4b56      	ldr	r3, [pc, #344]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d121      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e09e      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b94:	4b50      	ldr	r3, [pc, #320]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d115      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e092      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bac:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e086      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bbc:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e07e      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bcc:	4b42      	ldr	r3, [pc, #264]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 0203 	bic.w	r2, r3, #3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	493f      	ldr	r1, [pc, #252]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fd fb6b 	bl	80032b8 <HAL_GetTick>
 8005be2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be4:	e00a      	b.n	8005bfc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be6:	f7fd fb67 	bl	80032b8 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e066      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfc:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f003 020c 	and.w	r2, r3, #12
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d1eb      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d008      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	492c      	ldr	r1, [pc, #176]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d210      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b26      	ldr	r3, [pc, #152]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 0207 	bic.w	r2, r3, #7
 8005c42:	4924      	ldr	r1, [pc, #144]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_RCC_ClockConfig+0x1b0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d001      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e036      	b.n	8005cca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4918      	ldr	r1, [pc, #96]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d009      	beq.n	8005c9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4910      	ldr	r1, [pc, #64]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c9a:	f000 f825 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b0d      	ldr	r3, [pc, #52]	; (8005cd8 <HAL_RCC_ClockConfig+0x1b4>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	091b      	lsrs	r3, r3, #4
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	490c      	ldr	r1, [pc, #48]	; (8005cdc <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	5ccb      	ldrb	r3, [r1, r3]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fd f906 	bl	8002ed0 <HAL_InitTick>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	72fb      	strb	r3, [r7, #11]

  return status;
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40022000 	.word	0x40022000
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	0800d8e0 	.word	0x0800d8e0
 8005ce0:	20000094 	.word	0x20000094
 8005ce4:	20000098 	.word	0x20000098

08005ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b089      	sub	sp, #36	; 0x24
 8005cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cf6:	4b3e      	ldr	r3, [pc, #248]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d00:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x34>
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b0c      	cmp	r3, #12
 8005d14:	d121      	bne.n	8005d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d11e      	bne.n	8005d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d1c:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d107      	bne.n	8005d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d28:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e005      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d38:	4b2d      	ldr	r3, [pc, #180]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d44:	4a2b      	ldr	r2, [pc, #172]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10d      	bne.n	8005d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d102      	bne.n	8005d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d60:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e004      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d6c:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8005d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d134      	bne.n	8005de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d76:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d003      	beq.n	8005d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d003      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0xac>
 8005d8c:	e005      	b.n	8005d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d8e:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d90:	617b      	str	r3, [r7, #20]
      break;
 8005d92:	e005      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8005d96:	617b      	str	r3, [r7, #20]
      break;
 8005d98:	e002      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	617b      	str	r3, [r7, #20]
      break;
 8005d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005da0:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	3301      	adds	r3, #1
 8005dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	fb02 f203 	mul.w	r2, r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dc6:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	0e5b      	lsrs	r3, r3, #25
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005de0:	69bb      	ldr	r3, [r7, #24]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3724      	adds	r7, #36	; 0x24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40021000 	.word	0x40021000
 8005df4:	0800d8f8 	.word	0x0800d8f8
 8005df8:	00f42400 	.word	0x00f42400
 8005dfc:	007a1200 	.word	0x007a1200

08005e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000094 	.word	0x20000094

08005e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e1c:	f7ff fff0 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4904      	ldr	r1, [pc, #16]	; (8005e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	f003 031f 	and.w	r3, r3, #31
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	0800d8f0 	.word	0x0800d8f0

08005e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e48:	f7ff ffda 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0adb      	lsrs	r3, r3, #11
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	4904      	ldr	r1, [pc, #16]	; (8005e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e5a:	5ccb      	ldrb	r3, [r1, r3]
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	0800d8f0 	.word	0x0800d8f0

08005e70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220f      	movs	r2, #15
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_RCC_GetClockConfig+0x5c>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f003 0203 	and.w	r2, r3, #3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <HAL_RCC_GetClockConfig+0x5c>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_RCC_GetClockConfig+0x5c>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <HAL_RCC_GetClockConfig+0x5c>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <HAL_RCC_GetClockConfig+0x60>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0207 	and.w	r2, r3, #7
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	601a      	str	r2, [r3, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40022000 	.word	0x40022000

08005ed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005eec:	f7ff f9d0 	bl	8005290 <HAL_PWREx_GetVoltageRange>
 8005ef0:	6178      	str	r0, [r7, #20]
 8005ef2:	e014      	b.n	8005f1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef8:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	6593      	str	r3, [r2, #88]	; 0x58
 8005f00:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f0c:	f7ff f9c0 	bl	8005290 <HAL_PWREx_GetVoltageRange>
 8005f10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f16:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f24:	d10b      	bne.n	8005f3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	d919      	bls.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2ba0      	cmp	r3, #160	; 0xa0
 8005f30:	d902      	bls.n	8005f38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f32:	2302      	movs	r3, #2
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	e013      	b.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f38:	2301      	movs	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e010      	b.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d902      	bls.n	8005f4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f44:	2303      	movs	r3, #3
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e00a      	b.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b80      	cmp	r3, #128	; 0x80
 8005f4e:	d102      	bne.n	8005f56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f50:	2302      	movs	r3, #2
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	e004      	b.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b70      	cmp	r3, #112	; 0x70
 8005f5a:	d101      	bne.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f023 0207 	bic.w	r2, r3, #7
 8005f68:	4909      	ldr	r1, [pc, #36]	; (8005f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d001      	beq.n	8005f82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40022000 	.word	0x40022000

08005f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d041      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fb8:	d02a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005fba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fbe:	d824      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fc4:	d008      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fca:	d81e      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd4:	d010      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fd6:	e018      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fd8:	4b86      	ldr	r3, [pc, #536]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	4a85      	ldr	r2, [pc, #532]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fe4:	e015      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fabb 	bl	8006568 <RCCEx_PLLSAI1_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ff6:	e00c      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3320      	adds	r3, #32
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fba6 	bl	8006750 <RCCEx_PLLSAI2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	74fb      	strb	r3, [r7, #19]
      break;
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006018:	4b76      	ldr	r3, [pc, #472]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006026:	4973      	ldr	r1, [pc, #460]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800602e:	e001      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006030:	7cfb      	ldrb	r3, [r7, #19]
 8006032:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d041      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006044:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006048:	d02a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800604a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800604e:	d824      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006054:	d008      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800605a:	d81e      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006064:	d010      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006066:	e018      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006068:	4b62      	ldr	r3, [pc, #392]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4a61      	ldr	r2, [pc, #388]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800606e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006072:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006074:	e015      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3304      	adds	r3, #4
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fa73 	bl	8006568 <RCCEx_PLLSAI1_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006086:	e00c      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3320      	adds	r3, #32
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fb5e 	bl	8006750 <RCCEx_PLLSAI2_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	74fb      	strb	r3, [r7, #19]
      break;
 800609e:	e000      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80060a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a2:	7cfb      	ldrb	r3, [r7, #19]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060a8:	4b52      	ldr	r3, [pc, #328]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b6:	494f      	ldr	r1, [pc, #316]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80060be:	e001      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	7cfb      	ldrb	r3, [r7, #19]
 80060c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80a0 	beq.w	8006212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060d2:	2300      	movs	r3, #0
 80060d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060d6:	4b47      	ldr	r3, [pc, #284]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ec:	4b41      	ldr	r3, [pc, #260]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f0:	4a40      	ldr	r2, [pc, #256]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f6:	6593      	str	r3, [r2, #88]	; 0x58
 80060f8:	4b3e      	ldr	r3, [pc, #248]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006104:	2301      	movs	r3, #1
 8006106:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006108:	4b3b      	ldr	r3, [pc, #236]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a3a      	ldr	r2, [pc, #232]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800610e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006114:	f7fd f8d0 	bl	80032b8 <HAL_GetTick>
 8006118:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800611a:	e009      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800611c:	f7fd f8cc 	bl	80032b8 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d902      	bls.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	74fb      	strb	r3, [r7, #19]
        break;
 800612e:	e005      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006130:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0ef      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800613c:	7cfb      	ldrb	r3, [r7, #19]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d15c      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006142:	4b2c      	ldr	r3, [pc, #176]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01f      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	429a      	cmp	r2, r3
 800615e:	d019      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006160:	4b24      	ldr	r3, [pc, #144]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800616c:	4b21      	ldr	r3, [pc, #132]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800617c:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006182:	4a1c      	ldr	r2, [pc, #112]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800618c:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d016      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619e:	f7fd f88b 	bl	80032b8 <HAL_GetTick>
 80061a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a4:	e00b      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a6:	f7fd f887 	bl	80032b8 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d902      	bls.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	74fb      	strb	r3, [r7, #19]
            break;
 80061bc:	e006      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ec      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80061cc:	7cfb      	ldrb	r3, [r7, #19]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10c      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e2:	4904      	ldr	r1, [pc, #16]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061ea:	e009      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	74bb      	strb	r3, [r7, #18]
 80061f0:	e006      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000
 80061f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006200:	7c7b      	ldrb	r3, [r7, #17]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006206:	4b9e      	ldr	r3, [pc, #632]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4a9d      	ldr	r2, [pc, #628]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800620c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006210:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00a      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800621e:	4b98      	ldr	r3, [pc, #608]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f023 0203 	bic.w	r2, r3, #3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	4994      	ldr	r1, [pc, #592]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006240:	4b8f      	ldr	r3, [pc, #572]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f023 020c 	bic.w	r2, r3, #12
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	498c      	ldr	r1, [pc, #560]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006262:	4b87      	ldr	r3, [pc, #540]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	4983      	ldr	r1, [pc, #524]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006284:	4b7e      	ldr	r3, [pc, #504]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	497b      	ldr	r1, [pc, #492]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062a6:	4b76      	ldr	r3, [pc, #472]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b4:	4972      	ldr	r1, [pc, #456]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062c8:	4b6d      	ldr	r3, [pc, #436]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d6:	496a      	ldr	r1, [pc, #424]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062ea:	4b65      	ldr	r3, [pc, #404]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f8:	4961      	ldr	r1, [pc, #388]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800630c:	4b5c      	ldr	r3, [pc, #368]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800630e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631a:	4959      	ldr	r1, [pc, #356]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800632e:	4b54      	ldr	r3, [pc, #336]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633c:	4950      	ldr	r1, [pc, #320]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006350:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	4948      	ldr	r1, [pc, #288]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006360:	4313      	orrs	r3, r2
 8006362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006372:	4b43      	ldr	r3, [pc, #268]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006380:	493f      	ldr	r1, [pc, #252]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d028      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006394:	4b3a      	ldr	r3, [pc, #232]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a2:	4937      	ldr	r1, [pc, #220]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b2:	d106      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b4:	4b32      	ldr	r3, [pc, #200]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a31      	ldr	r2, [pc, #196]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063be:	60d3      	str	r3, [r2, #12]
 80063c0:	e011      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ca:	d10c      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	2101      	movs	r1, #1
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 f8c8 	bl	8006568 <RCCEx_PLLSAI1_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80063e2:	7cfb      	ldrb	r3, [r7, #19]
 80063e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d028      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063f2:	4b23      	ldr	r3, [pc, #140]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	491f      	ldr	r1, [pc, #124]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006410:	d106      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006412:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	4a1a      	ldr	r2, [pc, #104]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800641c:	60d3      	str	r3, [r2, #12]
 800641e:	e011      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006428:	d10c      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3304      	adds	r3, #4
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f899 	bl	8006568 <RCCEx_PLLSAI1_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02b      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800646e:	d109      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006470:	4b03      	ldr	r3, [pc, #12]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4a02      	ldr	r2, [pc, #8]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800647a:	60d3      	str	r3, [r2, #12]
 800647c:	e014      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800647e:	bf00      	nop
 8006480:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800648c:	d10c      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f867 	bl	8006568 <RCCEx_PLLSAI1_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d02f      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064b4:	4b2b      	ldr	r3, [pc, #172]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064c2:	4928      	ldr	r1, [pc, #160]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064d2:	d10d      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	2102      	movs	r1, #2
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f844 	bl	8006568 <RCCEx_PLLSAI1_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064e4:	7cfb      	ldrb	r3, [r7, #19]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d014      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	74bb      	strb	r3, [r7, #18]
 80064ee:	e011      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f8:	d10c      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3320      	adds	r3, #32
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f925 	bl	8006750 <RCCEx_PLLSAI2_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006520:	4b10      	ldr	r3, [pc, #64]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652e:	490d      	ldr	r1, [pc, #52]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006542:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006552:	4904      	ldr	r1, [pc, #16]	; (8006564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800655a:	7cbb      	ldrb	r3, [r7, #18]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40021000 	.word	0x40021000

08006568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006576:	4b75      	ldr	r3, [pc, #468]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006582:	4b72      	ldr	r3, [pc, #456]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f003 0203 	and.w	r2, r3, #3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d10d      	bne.n	80065ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
       ||
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800659a:	4b6c      	ldr	r3, [pc, #432]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
       ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d047      	beq.n	800663e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	e044      	b.n	800663e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d018      	beq.n	80065ee <RCCEx_PLLSAI1_Config+0x86>
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d825      	bhi.n	800660c <RCCEx_PLLSAI1_Config+0xa4>
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d002      	beq.n	80065ca <RCCEx_PLLSAI1_Config+0x62>
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d009      	beq.n	80065dc <RCCEx_PLLSAI1_Config+0x74>
 80065c8:	e020      	b.n	800660c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ca:	4b60      	ldr	r3, [pc, #384]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d11d      	bne.n	8006612 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065da:	e01a      	b.n	8006612 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065dc:	4b5b      	ldr	r3, [pc, #364]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d116      	bne.n	8006616 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ec:	e013      	b.n	8006616 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ee:	4b57      	ldr	r3, [pc, #348]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10f      	bne.n	800661a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065fa:	4b54      	ldr	r3, [pc, #336]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800660a:	e006      	b.n	800661a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e004      	b.n	800661c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800661a:	bf00      	nop
    }

    if(status == HAL_OK)
 800661c:	7bfb      	ldrb	r3, [r7, #15]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006622:	4b4a      	ldr	r3, [pc, #296]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	3b01      	subs	r3, #1
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	430b      	orrs	r3, r1
 8006638:	4944      	ldr	r1, [pc, #272]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 800663a:	4313      	orrs	r3, r2
 800663c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d17d      	bne.n	8006740 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006644:	4b41      	ldr	r3, [pc, #260]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a40      	ldr	r2, [pc, #256]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 800664a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800664e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006650:	f7fc fe32 	bl	80032b8 <HAL_GetTick>
 8006654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006656:	e009      	b.n	800666c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006658:	f7fc fe2e 	bl	80032b8 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d902      	bls.n	800666c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	73fb      	strb	r3, [r7, #15]
        break;
 800666a:	e005      	b.n	8006678 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800666c:	4b37      	ldr	r3, [pc, #220]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ef      	bne.n	8006658 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d160      	bne.n	8006740 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d111      	bne.n	80066a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006684:	4b31      	ldr	r3, [pc, #196]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800668c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6892      	ldr	r2, [r2, #8]
 8006694:	0211      	lsls	r1, r2, #8
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68d2      	ldr	r2, [r2, #12]
 800669a:	0912      	lsrs	r2, r2, #4
 800669c:	0452      	lsls	r2, r2, #17
 800669e:	430a      	orrs	r2, r1
 80066a0:	492a      	ldr	r1, [pc, #168]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	610b      	str	r3, [r1, #16]
 80066a6:	e027      	b.n	80066f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d112      	bne.n	80066d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80066b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6892      	ldr	r2, [r2, #8]
 80066be:	0211      	lsls	r1, r2, #8
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6912      	ldr	r2, [r2, #16]
 80066c4:	0852      	lsrs	r2, r2, #1
 80066c6:	3a01      	subs	r2, #1
 80066c8:	0552      	lsls	r2, r2, #21
 80066ca:	430a      	orrs	r2, r1
 80066cc:	491f      	ldr	r1, [pc, #124]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	610b      	str	r3, [r1, #16]
 80066d2:	e011      	b.n	80066f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066d4:	4b1d      	ldr	r3, [pc, #116]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6892      	ldr	r2, [r2, #8]
 80066e4:	0211      	lsls	r1, r2, #8
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6952      	ldr	r2, [r2, #20]
 80066ea:	0852      	lsrs	r2, r2, #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	0652      	lsls	r2, r2, #25
 80066f0:	430a      	orrs	r2, r1
 80066f2:	4916      	ldr	r1, [pc, #88]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a13      	ldr	r2, [pc, #76]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fc fdd8 	bl	80032b8 <HAL_GetTick>
 8006708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800670a:	e009      	b.n	8006720 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800670c:	f7fc fdd4 	bl	80032b8 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d902      	bls.n	8006720 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	73fb      	strb	r3, [r7, #15]
          break;
 800671e:	e005      	b.n	800672c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0ef      	beq.n	800670c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	4904      	ldr	r1, [pc, #16]	; (800674c <RCCEx_PLLSAI1_Config+0x1e4>)
 800673c:	4313      	orrs	r3, r2
 800673e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000

08006750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800675e:	4b6a      	ldr	r3, [pc, #424]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d018      	beq.n	800679c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800676a:	4b67      	ldr	r3, [pc, #412]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0203 	and.w	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d10d      	bne.n	8006796 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
       ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006782:	4b61      	ldr	r3, [pc, #388]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
       ||
 8006792:	429a      	cmp	r2, r3
 8006794:	d047      	beq.n	8006826 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e044      	b.n	8006826 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d018      	beq.n	80067d6 <RCCEx_PLLSAI2_Config+0x86>
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d825      	bhi.n	80067f4 <RCCEx_PLLSAI2_Config+0xa4>
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d002      	beq.n	80067b2 <RCCEx_PLLSAI2_Config+0x62>
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d009      	beq.n	80067c4 <RCCEx_PLLSAI2_Config+0x74>
 80067b0:	e020      	b.n	80067f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80067b2:	4b55      	ldr	r3, [pc, #340]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d11d      	bne.n	80067fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067c2:	e01a      	b.n	80067fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067c4:	4b50      	ldr	r3, [pc, #320]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d116      	bne.n	80067fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d4:	e013      	b.n	80067fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067d6:	4b4c      	ldr	r3, [pc, #304]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067e2:	4b49      	ldr	r3, [pc, #292]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067f2:	e006      	b.n	8006802 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
      break;
 80067f8:	e004      	b.n	8006804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006802:	bf00      	nop
    }

    if(status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10d      	bne.n	8006826 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800680a:	4b3f      	ldr	r3, [pc, #252]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6819      	ldr	r1, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	3b01      	subs	r3, #1
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	430b      	orrs	r3, r1
 8006820:	4939      	ldr	r1, [pc, #228]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d167      	bne.n	80068fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a35      	ldr	r2, [pc, #212]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006838:	f7fc fd3e 	bl	80032b8 <HAL_GetTick>
 800683c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800683e:	e009      	b.n	8006854 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006840:	f7fc fd3a 	bl	80032b8 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d902      	bls.n	8006854 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	73fb      	strb	r3, [r7, #15]
        break;
 8006852:	e005      	b.n	8006860 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006854:	4b2c      	ldr	r3, [pc, #176]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1ef      	bne.n	8006840 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d14a      	bne.n	80068fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d111      	bne.n	8006890 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800686c:	4b26      	ldr	r3, [pc, #152]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6892      	ldr	r2, [r2, #8]
 800687c:	0211      	lsls	r1, r2, #8
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68d2      	ldr	r2, [r2, #12]
 8006882:	0912      	lsrs	r2, r2, #4
 8006884:	0452      	lsls	r2, r2, #17
 8006886:	430a      	orrs	r2, r1
 8006888:	491f      	ldr	r1, [pc, #124]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 800688a:	4313      	orrs	r3, r2
 800688c:	614b      	str	r3, [r1, #20]
 800688e:	e011      	b.n	80068b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6892      	ldr	r2, [r2, #8]
 80068a0:	0211      	lsls	r1, r2, #8
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6912      	ldr	r2, [r2, #16]
 80068a6:	0852      	lsrs	r2, r2, #1
 80068a8:	3a01      	subs	r2, #1
 80068aa:	0652      	lsls	r2, r2, #25
 80068ac:	430a      	orrs	r2, r1
 80068ae:	4916      	ldr	r1, [pc, #88]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068b4:	4b14      	ldr	r3, [pc, #80]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a13      	ldr	r2, [pc, #76]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fc fcfa 	bl	80032b8 <HAL_GetTick>
 80068c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068c6:	e009      	b.n	80068dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068c8:	f7fc fcf6 	bl	80032b8 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d902      	bls.n	80068dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	73fb      	strb	r3, [r7, #15]
          break;
 80068da:	e005      	b.n	80068e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ef      	beq.n	80068c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	4904      	ldr	r1, [pc, #16]	; (8006908 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000

0800690c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e095      	b.n	8006a4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d108      	bne.n	8006938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800692e:	d009      	beq.n	8006944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	61da      	str	r2, [r3, #28]
 8006936:	e005      	b.n	8006944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d106      	bne.n	8006964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fb ffb0 	bl	80028c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006984:	d902      	bls.n	800698c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e002      	b.n	8006992 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800698c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006990:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800699a:	d007      	beq.n	80069ac <HAL_SPI_Init+0xa0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069a4:	d002      	beq.n	80069ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ee:	ea42 0103 	orr.w	r1, r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	0c1b      	lsrs	r3, r3, #16
 8006a08:	f003 0204 	and.w	r2, r3, #4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a28:	ea42 0103 	orr.w	r1, r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b088      	sub	sp, #32
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	603b      	str	r3, [r7, #0]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_SPI_Transmit+0x22>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e158      	b.n	8006d26 <HAL_SPI_Transmit+0x2d4>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a7c:	f7fc fc1c 	bl	80032b8 <HAL_GetTick>
 8006a80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d002      	beq.n	8006a98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a92:	2302      	movs	r3, #2
 8006a94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a96:	e13d      	b.n	8006d14 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_Transmit+0x52>
 8006a9e:	88fb      	ldrh	r3, [r7, #6]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006aa8:	e134      	b.n	8006d14 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2203      	movs	r2, #3
 8006aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	88fa      	ldrh	r2, [r7, #6]
 8006ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af4:	d10f      	bne.n	8006b16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d007      	beq.n	8006b34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b3c:	d94b      	bls.n	8006bd6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_SPI_Transmit+0xfa>
 8006b46:	8afb      	ldrh	r3, [r7, #22]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d13e      	bne.n	8006bca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	881a      	ldrh	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	1c9a      	adds	r2, r3, #2
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b70:	e02b      	b.n	8006bca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d112      	bne.n	8006ba6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	881a      	ldrh	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	1c9a      	adds	r2, r3, #2
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ba4:	e011      	b.n	8006bca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba6:	f7fc fb87 	bl	80032b8 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d803      	bhi.n	8006bbe <HAL_SPI_Transmit+0x16c>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bbc:	d102      	bne.n	8006bc4 <HAL_SPI_Transmit+0x172>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bc8:	e0a4      	b.n	8006d14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1ce      	bne.n	8006b72 <HAL_SPI_Transmit+0x120>
 8006bd4:	e07c      	b.n	8006cd0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_SPI_Transmit+0x192>
 8006bde:	8afb      	ldrh	r3, [r7, #22]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d170      	bne.n	8006cc6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d912      	bls.n	8006c14 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	881a      	ldrh	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	1c9a      	adds	r2, r3, #2
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b02      	subs	r3, #2
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c12:	e058      	b.n	8006cc6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c3a:	e044      	b.n	8006cc6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d12b      	bne.n	8006ca2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d912      	bls.n	8006c7a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b02      	subs	r3, #2
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c78:	e025      	b.n	8006cc6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ca0:	e011      	b.n	8006cc6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca2:	f7fc fb09 	bl	80032b8 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d803      	bhi.n	8006cba <HAL_SPI_Transmit+0x268>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb8:	d102      	bne.n	8006cc0 <HAL_SPI_Transmit+0x26e>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cc4:	e026      	b.n	8006d14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1b5      	bne.n	8006c3c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fb57 	bl	8007388 <SPI_EndRxTxTransaction>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	77fb      	strb	r3, [r7, #31]
 8006d10:	e000      	b.n	8006d14 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b08a      	sub	sp, #40	; 0x28
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0x26>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e1fb      	b.n	800714c <HAL_SPI_TransmitReceive+0x41e>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d5c:	f7fc faac 	bl	80032b8 <HAL_GetTick>
 8006d60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006d74:	887b      	ldrh	r3, [r7, #2]
 8006d76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d78:	7efb      	ldrb	r3, [r7, #27]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d00e      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x6e>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d84:	d106      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <HAL_SPI_TransmitReceive+0x66>
 8006d8e:	7efb      	ldrb	r3, [r7, #27]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d003      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d9a:	e1cd      	b.n	8007138 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x80>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x80>
 8006da8:	887b      	ldrh	r3, [r7, #2]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d103      	bne.n	8006db6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006db4:	e1c0      	b.n	8007138 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d003      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	887a      	ldrh	r2, [r7, #2]
 8006dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	887a      	ldrh	r2, [r7, #2]
 8006de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	887a      	ldrh	r2, [r7, #2]
 8006df6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e0c:	d802      	bhi.n	8006e14 <HAL_SPI_TransmitReceive+0xe6>
 8006e0e:	8a3b      	ldrh	r3, [r7, #16]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d908      	bls.n	8006e26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e22:	605a      	str	r2, [r3, #4]
 8006e24:	e007      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e40:	2b40      	cmp	r3, #64	; 0x40
 8006e42:	d007      	beq.n	8006e54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e5c:	d97c      	bls.n	8006f58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x13e>
 8006e66:	8a7b      	ldrh	r3, [r7, #18]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d169      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e90:	e056      	b.n	8006f40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d11b      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x1aa>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x1aa>
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d113      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	881a      	ldrh	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	1c9a      	adds	r2, r3, #2
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d11c      	bne.n	8006f20 <HAL_SPI_TransmitReceive+0x1f2>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	b292      	uxth	r2, r2
 8006efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f20:	f7fc f9ca 	bl	80032b8 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d807      	bhi.n	8006f40 <HAL_SPI_TransmitReceive+0x212>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f36:	d003      	beq.n	8006f40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f3e:	e0fb      	b.n	8007138 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1a3      	bne.n	8006e92 <HAL_SPI_TransmitReceive+0x164>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d19d      	bne.n	8006e92 <HAL_SPI_TransmitReceive+0x164>
 8006f56:	e0df      	b.n	8007118 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_SPI_TransmitReceive+0x23a>
 8006f60:	8a7b      	ldrh	r3, [r7, #18]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	f040 80cb 	bne.w	80070fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d912      	bls.n	8006f98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	881a      	ldrh	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	1c9a      	adds	r2, r3, #2
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b02      	subs	r3, #2
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f96:	e0b2      	b.n	80070fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fbe:	e09e      	b.n	80070fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d134      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x30a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d02f      	beq.n	8007038 <HAL_SPI_TransmitReceive+0x30a>
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d12c      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d912      	bls.n	800700e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	1c9a      	adds	r2, r3, #2
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b02      	subs	r3, #2
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800700c:	e012      	b.n	8007034 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	7812      	ldrb	r2, [r2, #0]
 800701a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b01      	cmp	r3, #1
 8007044:	d148      	bne.n	80070d8 <HAL_SPI_TransmitReceive+0x3aa>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d042      	beq.n	80070d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d923      	bls.n	80070a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	b292      	uxth	r2, r2
 800706a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	1c9a      	adds	r2, r3, #2
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b02      	subs	r3, #2
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d81f      	bhi.n	80070d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	e016      	b.n	80070d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f103 020c 	add.w	r2, r3, #12
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070d4:	2301      	movs	r3, #1
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070d8:	f7fc f8ee 	bl	80032b8 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d803      	bhi.n	80070f0 <HAL_SPI_TransmitReceive+0x3c2>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ee:	d102      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x3c8>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80070fc:	e01c      	b.n	8007138 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	f47f af5b 	bne.w	8006fc0 <HAL_SPI_TransmitReceive+0x292>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	f47f af54 	bne.w	8006fc0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 f933 	bl	8007388 <SPI_EndRxTxTransaction>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d006      	beq.n	8007136 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	661a      	str	r2, [r3, #96]	; 0x60
 8007134:	e000      	b.n	8007138 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	; 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007164:	f7fc f8a8 	bl	80032b8 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007174:	f7fc f8a0 	bl	80032b8 <HAL_GetTick>
 8007178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	015b      	lsls	r3, r3, #5
 8007180:	0d1b      	lsrs	r3, r3, #20
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800718a:	e054      	b.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007192:	d050      	beq.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007194:	f7fc f890 	bl	80032b8 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d902      	bls.n	80071aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d13d      	bne.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c2:	d111      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071cc:	d004      	beq.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d6:	d107      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f0:	d10f      	bne.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e017      	b.n	8007256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	3b01      	subs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4013      	ands	r3, r2
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	429a      	cmp	r2, r3
 8007252:	d19b      	bne.n	800718c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000094 	.word	0x20000094

08007264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007272:	f7fc f821 	bl	80032b8 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	1a9b      	subs	r3, r3, r2
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	4413      	add	r3, r2
 8007280:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007282:	f7fc f819 	bl	80032b8 <HAL_GetTick>
 8007286:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007288:	4b3e      	ldr	r3, [pc, #248]	; (8007384 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	00da      	lsls	r2, r3, #3
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	0d1b      	lsrs	r3, r3, #20
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80072a0:	e062      	b.n	8007368 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072a8:	d109      	bne.n	80072be <SPI_WaitFifoStateUntilTimeout+0x5a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80072bc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d050      	beq.n	8007368 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072c6:	f7fb fff7 	bl	80032b8 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d902      	bls.n	80072dc <SPI_WaitFifoStateUntilTimeout+0x78>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d13d      	bne.n	8007358 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80072ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f4:	d111      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0xb6>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072fe:	d004      	beq.n	800730a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007308:	d107      	bne.n	800731a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007318:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007322:	d10f      	bne.n	8007344 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007342:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e010      	b.n	800737a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	3b01      	subs	r3, #1
 8007366:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d194      	bne.n	80072a2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000094 	.word	0x20000094

08007388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f7ff ff5f 	bl	8007264 <SPI_WaitFifoStateUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b0:	f043 0220 	orr.w	r2, r3, #32
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e027      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	2180      	movs	r1, #128	; 0x80
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7ff fec4 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d6:	f043 0220 	orr.w	r2, r3, #32
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e014      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff ff38 	bl	8007264 <SPI_WaitFifoStateUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073fe:	f043 0220 	orr.w	r2, r3, #32
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e000      	b.n	800740c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e049      	b.n	80074ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fb fbc4 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f000 fe64 	bl	8008120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d001      	beq.n	80074dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e04f      	b.n	800757c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0201 	orr.w	r2, r2, #1
 80074f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a23      	ldr	r2, [pc, #140]	; (8007588 <HAL_TIM_Base_Start_IT+0xc4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01d      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d018      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <HAL_TIM_Base_Start_IT+0xc8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <HAL_TIM_Base_Start_IT+0xcc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00e      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <HAL_TIM_Base_Start_IT+0xd0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <HAL_TIM_Base_Start_IT+0xd4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d004      	beq.n	800753a <HAL_TIM_Base_Start_IT+0x76>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a19      	ldr	r2, [pc, #100]	; (800759c <HAL_TIM_Base_Start_IT+0xd8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d115      	bne.n	8007566 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	4b17      	ldr	r3, [pc, #92]	; (80075a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007542:	4013      	ands	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b06      	cmp	r3, #6
 800754a:	d015      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0xb4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007552:	d011      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007564:	e008      	b.n	8007578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e000      	b.n	800757a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	40012c00 	.word	0x40012c00
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40013400 	.word	0x40013400
 800759c:	40014000 	.word	0x40014000
 80075a0:	00010007 	.word	0x00010007

080075a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e049      	b.n	800764a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fb f9da 	bl	8002984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f000 fd9c 	bl	8008120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <HAL_TIM_PWM_Start_IT+0x24>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b01      	cmp	r3, #1
 800766e:	bf14      	ite	ne
 8007670:	2301      	movne	r3, #1
 8007672:	2300      	moveq	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	e03c      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0x9e>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b04      	cmp	r3, #4
 800767c:	d109      	bne.n	8007692 <HAL_TIM_PWM_Start_IT+0x3e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	e02f      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0x9e>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b08      	cmp	r3, #8
 8007696:	d109      	bne.n	80076ac <HAL_TIM_PWM_Start_IT+0x58>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	bf14      	ite	ne
 80076a4:	2301      	movne	r3, #1
 80076a6:	2300      	moveq	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e022      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0x9e>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b0c      	cmp	r3, #12
 80076b0:	d109      	bne.n	80076c6 <HAL_TIM_PWM_Start_IT+0x72>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	bf14      	ite	ne
 80076be:	2301      	movne	r3, #1
 80076c0:	2300      	moveq	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	e015      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0x9e>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b10      	cmp	r3, #16
 80076ca:	d109      	bne.n	80076e0 <HAL_TIM_PWM_Start_IT+0x8c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e008      	b.n	80076f2 <HAL_TIM_PWM_Start_IT+0x9e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	bf14      	ite	ne
 80076ec:	2301      	movne	r3, #1
 80076ee:	2300      	moveq	r3, #0
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e0e2      	b.n	80078c0 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start_IT+0xb6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007708:	e023      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xfe>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b04      	cmp	r3, #4
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start_IT+0xc6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007718:	e01b      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xfe>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start_IT+0xd6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007728:	e013      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xfe>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start_IT+0xe6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007738:	e00b      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b10      	cmp	r3, #16
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start_IT+0xf6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007748:	e003      	b.n	8007752 <HAL_TIM_PWM_Start_IT+0xfe>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b0c      	cmp	r3, #12
 8007756:	d841      	bhi.n	80077dc <HAL_TIM_PWM_Start_IT+0x188>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_TIM_PWM_Start_IT+0x10c>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007795 	.word	0x08007795
 8007764:	080077dd 	.word	0x080077dd
 8007768:	080077dd 	.word	0x080077dd
 800776c:	080077dd 	.word	0x080077dd
 8007770:	080077a7 	.word	0x080077a7
 8007774:	080077dd 	.word	0x080077dd
 8007778:	080077dd 	.word	0x080077dd
 800777c:	080077dd 	.word	0x080077dd
 8007780:	080077b9 	.word	0x080077b9
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077dd 	.word	0x080077dd
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077cb 	.word	0x080077cb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0202 	orr.w	r2, r2, #2
 80077a2:	60da      	str	r2, [r3, #12]
      break;
 80077a4:	e01b      	b.n	80077de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0204 	orr.w	r2, r2, #4
 80077b4:	60da      	str	r2, [r3, #12]
      break;
 80077b6:	e012      	b.n	80077de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0208 	orr.w	r2, r2, #8
 80077c6:	60da      	str	r2, [r3, #12]
      break;
 80077c8:	e009      	b.n	80077de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0210 	orr.w	r2, r2, #16
 80077d8:	60da      	str	r2, [r3, #12]
      break;
 80077da:	e000      	b.n	80077de <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80077dc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2201      	movs	r2, #1
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 f80a 	bl	8008800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a35      	ldr	r2, [pc, #212]	; (80078c8 <HAL_TIM_PWM_Start_IT+0x274>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d013      	beq.n	800781e <HAL_TIM_PWM_Start_IT+0x1ca>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a34      	ldr	r2, [pc, #208]	; (80078cc <HAL_TIM_PWM_Start_IT+0x278>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00e      	beq.n	800781e <HAL_TIM_PWM_Start_IT+0x1ca>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a32      	ldr	r2, [pc, #200]	; (80078d0 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_TIM_PWM_Start_IT+0x1ca>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a31      	ldr	r2, [pc, #196]	; (80078d4 <HAL_TIM_PWM_Start_IT+0x280>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d004      	beq.n	800781e <HAL_TIM_PWM_Start_IT+0x1ca>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2f      	ldr	r2, [pc, #188]	; (80078d8 <HAL_TIM_PWM_Start_IT+0x284>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d101      	bne.n	8007822 <HAL_TIM_PWM_Start_IT+0x1ce>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a22      	ldr	r2, [pc, #136]	; (80078c8 <HAL_TIM_PWM_Start_IT+0x274>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01d      	beq.n	800787e <HAL_TIM_PWM_Start_IT+0x22a>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784a:	d018      	beq.n	800787e <HAL_TIM_PWM_Start_IT+0x22a>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a22      	ldr	r2, [pc, #136]	; (80078dc <HAL_TIM_PWM_Start_IT+0x288>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <HAL_TIM_PWM_Start_IT+0x22a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a21      	ldr	r2, [pc, #132]	; (80078e0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00e      	beq.n	800787e <HAL_TIM_PWM_Start_IT+0x22a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1f      	ldr	r2, [pc, #124]	; (80078e4 <HAL_TIM_PWM_Start_IT+0x290>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d009      	beq.n	800787e <HAL_TIM_PWM_Start_IT+0x22a>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a17      	ldr	r2, [pc, #92]	; (80078cc <HAL_TIM_PWM_Start_IT+0x278>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d004      	beq.n	800787e <HAL_TIM_PWM_Start_IT+0x22a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d115      	bne.n	80078aa <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	4b18      	ldr	r3, [pc, #96]	; (80078e8 <HAL_TIM_PWM_Start_IT+0x294>)
 8007886:	4013      	ands	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b06      	cmp	r3, #6
 800788e:	d015      	beq.n	80078bc <HAL_TIM_PWM_Start_IT+0x268>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007896:	d011      	beq.n	80078bc <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a8:	e008      	b.n	80078bc <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e000      	b.n	80078be <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40012c00 	.word	0x40012c00
 80078cc:	40013400 	.word	0x40013400
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40014400 	.word	0x40014400
 80078d8:	40014800 	.word	0x40014800
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40000c00 	.word	0x40000c00
 80078e8:	00010007 	.word	0x00010007

080078ec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b0c      	cmp	r3, #12
 80078fa:	d841      	bhi.n	8007980 <HAL_TIM_PWM_Stop_IT+0x94>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <HAL_TIM_PWM_Stop_IT+0x18>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007939 	.word	0x08007939
 8007908:	08007981 	.word	0x08007981
 800790c:	08007981 	.word	0x08007981
 8007910:	08007981 	.word	0x08007981
 8007914:	0800794b 	.word	0x0800794b
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	0800795d 	.word	0x0800795d
 8007928:	08007981 	.word	0x08007981
 800792c:	08007981 	.word	0x08007981
 8007930:	08007981 	.word	0x08007981
 8007934:	0800796f 	.word	0x0800796f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 0202 	bic.w	r2, r2, #2
 8007946:	60da      	str	r2, [r3, #12]
      break;
 8007948:	e01b      	b.n	8007982 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0204 	bic.w	r2, r2, #4
 8007958:	60da      	str	r2, [r3, #12]
      break;
 800795a:	e012      	b.n	8007982 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0208 	bic.w	r2, r2, #8
 800796a:	60da      	str	r2, [r3, #12]
      break;
 800796c:	e009      	b.n	8007982 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0210 	bic.w	r2, r2, #16
 800797c:	60da      	str	r2, [r3, #12]
      break;
 800797e:	e000      	b.n	8007982 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8007980:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2200      	movs	r2, #0
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 ff38 	bl	8008800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a3e      	ldr	r2, [pc, #248]	; (8007a90 <HAL_TIM_PWM_Stop_IT+0x1a4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <HAL_TIM_PWM_Stop_IT+0x1a8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a3b      	ldr	r2, [pc, #236]	; (8007a98 <HAL_TIM_PWM_Stop_IT+0x1ac>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a3a      	ldr	r2, [pc, #232]	; (8007a9c <HAL_TIM_PWM_Stop_IT+0x1b0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d004      	beq.n	80079c2 <HAL_TIM_PWM_Stop_IT+0xd6>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d101      	bne.n	80079c6 <HAL_TIM_PWM_Stop_IT+0xda>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <HAL_TIM_PWM_Stop_IT+0xdc>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <HAL_TIM_PWM_Stop_IT+0x110>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6a1a      	ldr	r2, [r3, #32]
 80079d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10f      	bne.n	80079fc <HAL_TIM_PWM_Stop_IT+0x110>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6a1a      	ldr	r2, [r3, #32]
 80079e2:	f240 4344 	movw	r3, #1092	; 0x444
 80079e6:	4013      	ands	r3, r2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d107      	bne.n	80079fc <HAL_TIM_PWM_Stop_IT+0x110>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a06:	4013      	ands	r3, r2
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10f      	bne.n	8007a2c <HAL_TIM_PWM_Stop_IT+0x140>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6a1a      	ldr	r2, [r3, #32]
 8007a12:	f240 4344 	movw	r3, #1092	; 0x444
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d107      	bne.n	8007a2c <HAL_TIM_PWM_Stop_IT+0x140>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0201 	bic.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <HAL_TIM_PWM_Stop_IT+0x150>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a3a:	e023      	b.n	8007a84 <HAL_TIM_PWM_Stop_IT+0x198>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d104      	bne.n	8007a4c <HAL_TIM_PWM_Stop_IT+0x160>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a4a:	e01b      	b.n	8007a84 <HAL_TIM_PWM_Stop_IT+0x198>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d104      	bne.n	8007a5c <HAL_TIM_PWM_Stop_IT+0x170>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a5a:	e013      	b.n	8007a84 <HAL_TIM_PWM_Stop_IT+0x198>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b0c      	cmp	r3, #12
 8007a60:	d104      	bne.n	8007a6c <HAL_TIM_PWM_Stop_IT+0x180>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a6a:	e00b      	b.n	8007a84 <HAL_TIM_PWM_Stop_IT+0x198>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b10      	cmp	r3, #16
 8007a70:	d104      	bne.n	8007a7c <HAL_TIM_PWM_Stop_IT+0x190>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a7a:	e003      	b.n	8007a84 <HAL_TIM_PWM_Stop_IT+0x198>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40012c00 	.word	0x40012c00
 8007a94:	40013400 	.word	0x40013400
 8007a98:	40014000 	.word	0x40014000
 8007a9c:	40014400 	.word	0x40014400
 8007aa0:	40014800 	.word	0x40014800

08007aa4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b0c      	cmp	r3, #12
 8007ab2:	d855      	bhi.n	8007b60 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <HAL_TIM_PWM_Stop_DMA+0x18>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007af1 	.word	0x08007af1
 8007ac0:	08007b61 	.word	0x08007b61
 8007ac4:	08007b61 	.word	0x08007b61
 8007ac8:	08007b61 	.word	0x08007b61
 8007acc:	08007b0d 	.word	0x08007b0d
 8007ad0:	08007b61 	.word	0x08007b61
 8007ad4:	08007b61 	.word	0x08007b61
 8007ad8:	08007b61 	.word	0x08007b61
 8007adc:	08007b29 	.word	0x08007b29
 8007ae0:	08007b61 	.word	0x08007b61
 8007ae4:	08007b61 	.word	0x08007b61
 8007ae8:	08007b61 	.word	0x08007b61
 8007aec:	08007b45 	.word	0x08007b45
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fc ffbb 	bl	8004a80 <HAL_DMA_Abort_IT>
      break;
 8007b0a:	e02a      	b.n	8007b62 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fc ffad 	bl	8004a80 <HAL_DMA_Abort_IT>
      break;
 8007b26:	e01c      	b.n	8007b62 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fc ff9f 	bl	8004a80 <HAL_DMA_Abort_IT>
      break;
 8007b42:	e00e      	b.n	8007b62 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fc ff91 	bl	8004a80 <HAL_DMA_Abort_IT>
      break;
 8007b5e:	e000      	b.n	8007b62 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8007b60:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2200      	movs	r2, #0
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fe48 	bl	8008800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a3e      	ldr	r2, [pc, #248]	; (8007c70 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a3d      	ldr	r2, [pc, #244]	; (8007c74 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00e      	beq.n	8007ba2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a3b      	ldr	r2, [pc, #236]	; (8007c78 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d009      	beq.n	8007ba2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a3a      	ldr	r2, [pc, #232]	; (8007c7c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d004      	beq.n	8007ba2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a38      	ldr	r2, [pc, #224]	; (8007c80 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d101      	bne.n	8007ba6 <HAL_TIM_PWM_Stop_DMA+0x102>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <HAL_TIM_PWM_Stop_DMA+0x104>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d017      	beq.n	8007bdc <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6a1a      	ldr	r2, [r3, #32]
 8007bb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <HAL_TIM_PWM_Stop_DMA+0x138>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a1a      	ldr	r2, [r3, #32]
 8007bc2:	f240 4344 	movw	r3, #1092	; 0x444
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d107      	bne.n	8007bdc <HAL_TIM_PWM_Stop_DMA+0x138>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a1a      	ldr	r2, [r3, #32]
 8007be2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10f      	bne.n	8007c0c <HAL_TIM_PWM_Stop_DMA+0x168>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a1a      	ldr	r2, [r3, #32]
 8007bf2:	f240 4344 	movw	r3, #1092	; 0x444
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d107      	bne.n	8007c0c <HAL_TIM_PWM_Stop_DMA+0x168>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0201 	bic.w	r2, r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d104      	bne.n	8007c1c <HAL_TIM_PWM_Stop_DMA+0x178>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c1a:	e023      	b.n	8007c64 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d104      	bne.n	8007c2c <HAL_TIM_PWM_Stop_DMA+0x188>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c2a:	e01b      	b.n	8007c64 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b08      	cmp	r3, #8
 8007c30:	d104      	bne.n	8007c3c <HAL_TIM_PWM_Stop_DMA+0x198>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c3a:	e013      	b.n	8007c64 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b0c      	cmp	r3, #12
 8007c40:	d104      	bne.n	8007c4c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c4a:	e00b      	b.n	8007c64 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b10      	cmp	r3, #16
 8007c50:	d104      	bne.n	8007c5c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c5a:	e003      	b.n	8007c64 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40012c00 	.word	0x40012c00
 8007c74:	40013400 	.word	0x40013400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800

08007c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d122      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d11b      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0202 	mvn.w	r2, #2
 8007cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fa16 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007ccc:	e005      	b.n	8007cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa08 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7f9 f911 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d122      	bne.n	8007d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d11b      	bne.n	8007d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0204 	mvn.w	r2, #4
 8007d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f9ec 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9de 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7f9 f8e7 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f003 0308 	and.w	r3, r3, #8
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d122      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	d11b      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0208 	mvn.w	r2, #8
 8007d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9c2 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f9b4 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7f9 f8bd 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0310 	and.w	r3, r3, #16
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d122      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b10      	cmp	r3, #16
 8007da2:	d11b      	bne.n	8007ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0210 	mvn.w	r2, #16
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2208      	movs	r2, #8
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f998 	bl	80080f8 <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f98a 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f9 f893 	bl	8000efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d10e      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d107      	bne.n	8007e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0201 	mvn.w	r2, #1
 8007e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7f9 ff82 	bl	8001d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e12:	2b80      	cmp	r3, #128	; 0x80
 8007e14:	d10e      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d107      	bne.n	8007e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fe1c 	bl	8008a6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e42:	d10e      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4e:	2b80      	cmp	r3, #128	; 0x80
 8007e50:	d107      	bne.n	8007e62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fe0f 	bl	8008a80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d10e      	bne.n	8007e8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b40      	cmp	r3, #64	; 0x40
 8007e7c:	d107      	bne.n	8007e8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f93f 	bl	800810c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d10e      	bne.n	8007eba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d107      	bne.n	8007eba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f06f 0220 	mvn.w	r2, #32
 8007eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fdcf 	bl	8008a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e0fd      	b.n	80080da <HAL_TIM_PWM_ConfigChannel+0x216>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b14      	cmp	r3, #20
 8007eea:	f200 80f0 	bhi.w	80080ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f49 	.word	0x08007f49
 8007ef8:	080080cf 	.word	0x080080cf
 8007efc:	080080cf 	.word	0x080080cf
 8007f00:	080080cf 	.word	0x080080cf
 8007f04:	08007f89 	.word	0x08007f89
 8007f08:	080080cf 	.word	0x080080cf
 8007f0c:	080080cf 	.word	0x080080cf
 8007f10:	080080cf 	.word	0x080080cf
 8007f14:	08007fcb 	.word	0x08007fcb
 8007f18:	080080cf 	.word	0x080080cf
 8007f1c:	080080cf 	.word	0x080080cf
 8007f20:	080080cf 	.word	0x080080cf
 8007f24:	0800800b 	.word	0x0800800b
 8007f28:	080080cf 	.word	0x080080cf
 8007f2c:	080080cf 	.word	0x080080cf
 8007f30:	080080cf 	.word	0x080080cf
 8007f34:	0800804d 	.word	0x0800804d
 8007f38:	080080cf 	.word	0x080080cf
 8007f3c:	080080cf 	.word	0x080080cf
 8007f40:	080080cf 	.word	0x080080cf
 8007f44:	0800808d 	.word	0x0800808d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f980 	bl	8008254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0208 	orr.w	r2, r2, #8
 8007f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6999      	ldr	r1, [r3, #24]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	619a      	str	r2, [r3, #24]
      break;
 8007f86:	e0a3      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f9f0 	bl	8008374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	619a      	str	r2, [r3, #24]
      break;
 8007fc8:	e082      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fa59 	bl	8008488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0208 	orr.w	r2, r2, #8
 8007fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0204 	bic.w	r2, r2, #4
 8007ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69d9      	ldr	r1, [r3, #28]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	61da      	str	r2, [r3, #28]
      break;
 8008008:	e062      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fac1 	bl	8008598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69d9      	ldr	r1, [r3, #28]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	021a      	lsls	r2, r3, #8
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	61da      	str	r2, [r3, #28]
      break;
 800804a:	e041      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fb0a 	bl	800866c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0208 	orr.w	r2, r2, #8
 8008066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0204 	bic.w	r2, r2, #4
 8008076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800808a:	e021      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fb4e 	bl	8008734 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	021a      	lsls	r2, r3, #8
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080cc:	e000      	b.n	80080d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80080ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop

080080e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a40      	ldr	r2, [pc, #256]	; (8008234 <TIM_Base_SetConfig+0x114>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d013      	beq.n	8008160 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813e:	d00f      	beq.n	8008160 <TIM_Base_SetConfig+0x40>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a3d      	ldr	r2, [pc, #244]	; (8008238 <TIM_Base_SetConfig+0x118>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00b      	beq.n	8008160 <TIM_Base_SetConfig+0x40>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a3c      	ldr	r2, [pc, #240]	; (800823c <TIM_Base_SetConfig+0x11c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d007      	beq.n	8008160 <TIM_Base_SetConfig+0x40>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a3b      	ldr	r2, [pc, #236]	; (8008240 <TIM_Base_SetConfig+0x120>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <TIM_Base_SetConfig+0x40>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a3a      	ldr	r2, [pc, #232]	; (8008244 <TIM_Base_SetConfig+0x124>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d108      	bne.n	8008172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2f      	ldr	r2, [pc, #188]	; (8008234 <TIM_Base_SetConfig+0x114>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01f      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008180:	d01b      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2c      	ldr	r2, [pc, #176]	; (8008238 <TIM_Base_SetConfig+0x118>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d017      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a2b      	ldr	r2, [pc, #172]	; (800823c <TIM_Base_SetConfig+0x11c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d013      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a2a      	ldr	r2, [pc, #168]	; (8008240 <TIM_Base_SetConfig+0x120>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00f      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a29      	ldr	r2, [pc, #164]	; (8008244 <TIM_Base_SetConfig+0x124>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00b      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a28      	ldr	r2, [pc, #160]	; (8008248 <TIM_Base_SetConfig+0x128>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d007      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a27      	ldr	r2, [pc, #156]	; (800824c <TIM_Base_SetConfig+0x12c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <TIM_Base_SetConfig+0x9a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a26      	ldr	r2, [pc, #152]	; (8008250 <TIM_Base_SetConfig+0x130>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d108      	bne.n	80081cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <TIM_Base_SetConfig+0x114>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00f      	beq.n	8008218 <TIM_Base_SetConfig+0xf8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a12      	ldr	r2, [pc, #72]	; (8008244 <TIM_Base_SetConfig+0x124>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00b      	beq.n	8008218 <TIM_Base_SetConfig+0xf8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a11      	ldr	r2, [pc, #68]	; (8008248 <TIM_Base_SetConfig+0x128>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <TIM_Base_SetConfig+0xf8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a10      	ldr	r2, [pc, #64]	; (800824c <TIM_Base_SetConfig+0x12c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_Base_SetConfig+0xf8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a0f      	ldr	r2, [pc, #60]	; (8008250 <TIM_Base_SetConfig+0x130>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d103      	bne.n	8008220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	615a      	str	r2, [r3, #20]
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40000400 	.word	0x40000400
 800823c:	40000800 	.word	0x40000800
 8008240:	40000c00 	.word	0x40000c00
 8008244:	40013400 	.word	0x40013400
 8008248:	40014000 	.word	0x40014000
 800824c:	40014400 	.word	0x40014400
 8008250:	40014800 	.word	0x40014800

08008254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f023 0201 	bic.w	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0303 	bic.w	r3, r3, #3
 800828e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f023 0302 	bic.w	r3, r3, #2
 80082a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a2c      	ldr	r2, [pc, #176]	; (8008360 <TIM_OC1_SetConfig+0x10c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00f      	beq.n	80082d4 <TIM_OC1_SetConfig+0x80>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a2b      	ldr	r2, [pc, #172]	; (8008364 <TIM_OC1_SetConfig+0x110>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00b      	beq.n	80082d4 <TIM_OC1_SetConfig+0x80>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <TIM_OC1_SetConfig+0x114>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d007      	beq.n	80082d4 <TIM_OC1_SetConfig+0x80>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a29      	ldr	r2, [pc, #164]	; (800836c <TIM_OC1_SetConfig+0x118>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d003      	beq.n	80082d4 <TIM_OC1_SetConfig+0x80>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a28      	ldr	r2, [pc, #160]	; (8008370 <TIM_OC1_SetConfig+0x11c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d10c      	bne.n	80082ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0308 	bic.w	r3, r3, #8
 80082da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f023 0304 	bic.w	r3, r3, #4
 80082ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1b      	ldr	r2, [pc, #108]	; (8008360 <TIM_OC1_SetConfig+0x10c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00f      	beq.n	8008316 <TIM_OC1_SetConfig+0xc2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <TIM_OC1_SetConfig+0x110>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00b      	beq.n	8008316 <TIM_OC1_SetConfig+0xc2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a19      	ldr	r2, [pc, #100]	; (8008368 <TIM_OC1_SetConfig+0x114>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d007      	beq.n	8008316 <TIM_OC1_SetConfig+0xc2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a18      	ldr	r2, [pc, #96]	; (800836c <TIM_OC1_SetConfig+0x118>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d003      	beq.n	8008316 <TIM_OC1_SetConfig+0xc2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a17      	ldr	r2, [pc, #92]	; (8008370 <TIM_OC1_SetConfig+0x11c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d111      	bne.n	800833a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	621a      	str	r2, [r3, #32]
}
 8008354:	bf00      	nop
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	40012c00 	.word	0x40012c00
 8008364:	40013400 	.word	0x40013400
 8008368:	40014000 	.word	0x40014000
 800836c:	40014400 	.word	0x40014400
 8008370:	40014800 	.word	0x40014800

08008374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	f023 0210 	bic.w	r2, r3, #16
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	021b      	lsls	r3, r3, #8
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f023 0320 	bic.w	r3, r3, #32
 80083c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a28      	ldr	r2, [pc, #160]	; (8008474 <TIM_OC2_SetConfig+0x100>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC2_SetConfig+0x6c>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a27      	ldr	r2, [pc, #156]	; (8008478 <TIM_OC2_SetConfig+0x104>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d10d      	bne.n	80083fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <TIM_OC2_SetConfig+0x100>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00f      	beq.n	8008424 <TIM_OC2_SetConfig+0xb0>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1c      	ldr	r2, [pc, #112]	; (8008478 <TIM_OC2_SetConfig+0x104>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_OC2_SetConfig+0xb0>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a1b      	ldr	r2, [pc, #108]	; (800847c <TIM_OC2_SetConfig+0x108>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_OC2_SetConfig+0xb0>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a1a      	ldr	r2, [pc, #104]	; (8008480 <TIM_OC2_SetConfig+0x10c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC2_SetConfig+0xb0>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a19      	ldr	r2, [pc, #100]	; (8008484 <TIM_OC2_SetConfig+0x110>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d113      	bne.n	800844c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800842a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	621a      	str	r2, [r3, #32]
}
 8008466:	bf00      	nop
 8008468:	371c      	adds	r7, #28
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	40012c00 	.word	0x40012c00
 8008478:	40013400 	.word	0x40013400
 800847c:	40014000 	.word	0x40014000
 8008480:	40014400 	.word	0x40014400
 8008484:	40014800 	.word	0x40014800

08008488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0303 	bic.w	r3, r3, #3
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a27      	ldr	r2, [pc, #156]	; (8008584 <TIM_OC3_SetConfig+0xfc>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d003      	beq.n	80084f2 <TIM_OC3_SetConfig+0x6a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a26      	ldr	r2, [pc, #152]	; (8008588 <TIM_OC3_SetConfig+0x100>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d10d      	bne.n	800850e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800850c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a1c      	ldr	r2, [pc, #112]	; (8008584 <TIM_OC3_SetConfig+0xfc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00f      	beq.n	8008536 <TIM_OC3_SetConfig+0xae>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a1b      	ldr	r2, [pc, #108]	; (8008588 <TIM_OC3_SetConfig+0x100>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00b      	beq.n	8008536 <TIM_OC3_SetConfig+0xae>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a1a      	ldr	r2, [pc, #104]	; (800858c <TIM_OC3_SetConfig+0x104>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <TIM_OC3_SetConfig+0xae>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a19      	ldr	r2, [pc, #100]	; (8008590 <TIM_OC3_SetConfig+0x108>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <TIM_OC3_SetConfig+0xae>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a18      	ldr	r2, [pc, #96]	; (8008594 <TIM_OC3_SetConfig+0x10c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d113      	bne.n	800855e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800853c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	621a      	str	r2, [r3, #32]
}
 8008578:	bf00      	nop
 800857a:	371c      	adds	r7, #28
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	40012c00 	.word	0x40012c00
 8008588:	40013400 	.word	0x40013400
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800

08008598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	031b      	lsls	r3, r3, #12
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <TIM_OC4_SetConfig+0xc0>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00f      	beq.n	800861c <TIM_OC4_SetConfig+0x84>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a17      	ldr	r2, [pc, #92]	; (800865c <TIM_OC4_SetConfig+0xc4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d00b      	beq.n	800861c <TIM_OC4_SetConfig+0x84>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a16      	ldr	r2, [pc, #88]	; (8008660 <TIM_OC4_SetConfig+0xc8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d007      	beq.n	800861c <TIM_OC4_SetConfig+0x84>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a15      	ldr	r2, [pc, #84]	; (8008664 <TIM_OC4_SetConfig+0xcc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d003      	beq.n	800861c <TIM_OC4_SetConfig+0x84>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a14      	ldr	r2, [pc, #80]	; (8008668 <TIM_OC4_SetConfig+0xd0>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d109      	bne.n	8008630 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	019b      	lsls	r3, r3, #6
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	621a      	str	r2, [r3, #32]
}
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40012c00 	.word	0x40012c00
 800865c:	40013400 	.word	0x40013400
 8008660:	40014000 	.word	0x40014000
 8008664:	40014400 	.word	0x40014400
 8008668:	40014800 	.word	0x40014800

0800866c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80086b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	041b      	lsls	r3, r3, #16
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a17      	ldr	r2, [pc, #92]	; (8008720 <TIM_OC5_SetConfig+0xb4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00f      	beq.n	80086e6 <TIM_OC5_SetConfig+0x7a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a16      	ldr	r2, [pc, #88]	; (8008724 <TIM_OC5_SetConfig+0xb8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00b      	beq.n	80086e6 <TIM_OC5_SetConfig+0x7a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a15      	ldr	r2, [pc, #84]	; (8008728 <TIM_OC5_SetConfig+0xbc>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d007      	beq.n	80086e6 <TIM_OC5_SetConfig+0x7a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a14      	ldr	r2, [pc, #80]	; (800872c <TIM_OC5_SetConfig+0xc0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_OC5_SetConfig+0x7a>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a13      	ldr	r2, [pc, #76]	; (8008730 <TIM_OC5_SetConfig+0xc4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d109      	bne.n	80086fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	621a      	str	r2, [r3, #32]
}
 8008714:	bf00      	nop
 8008716:	371c      	adds	r7, #28
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	40012c00 	.word	0x40012c00
 8008724:	40013400 	.word	0x40013400
 8008728:	40014000 	.word	0x40014000
 800872c:	40014400 	.word	0x40014400
 8008730:	40014800 	.word	0x40014800

08008734 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800877a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	051b      	lsls	r3, r3, #20
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a18      	ldr	r2, [pc, #96]	; (80087ec <TIM_OC6_SetConfig+0xb8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d00f      	beq.n	80087b0 <TIM_OC6_SetConfig+0x7c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a17      	ldr	r2, [pc, #92]	; (80087f0 <TIM_OC6_SetConfig+0xbc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00b      	beq.n	80087b0 <TIM_OC6_SetConfig+0x7c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a16      	ldr	r2, [pc, #88]	; (80087f4 <TIM_OC6_SetConfig+0xc0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d007      	beq.n	80087b0 <TIM_OC6_SetConfig+0x7c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <TIM_OC6_SetConfig+0xc4>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d003      	beq.n	80087b0 <TIM_OC6_SetConfig+0x7c>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a14      	ldr	r2, [pc, #80]	; (80087fc <TIM_OC6_SetConfig+0xc8>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d109      	bne.n	80087c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	029b      	lsls	r3, r3, #10
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	621a      	str	r2, [r3, #32]
}
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800

08008800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	2201      	movs	r2, #1
 8008814:	fa02 f303 	lsl.w	r3, r2, r3
 8008818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	43db      	mvns	r3, r3
 8008822:	401a      	ands	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a1a      	ldr	r2, [r3, #32]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	fa01 f303 	lsl.w	r3, r1, r3
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008860:	2302      	movs	r3, #2
 8008862:	e068      	b.n	8008936 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a2e      	ldr	r2, [pc, #184]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2d      	ldr	r2, [pc, #180]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d108      	bne.n	80088aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800889e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d01d      	beq.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d6:	d018      	beq.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1b      	ldr	r2, [pc, #108]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d013      	beq.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a1a      	ldr	r2, [pc, #104]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00e      	beq.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a18      	ldr	r2, [pc, #96]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d009      	beq.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a13      	ldr	r2, [pc, #76]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d004      	beq.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a14      	ldr	r2, [pc, #80]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d10c      	bne.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4313      	orrs	r3, r2
 800891a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40013400 	.word	0x40013400
 800894c:	40000400 	.word	0x40000400
 8008950:	40000800 	.word	0x40000800
 8008954:	40000c00 	.word	0x40000c00
 8008958:	40014000 	.word	0x40014000

0800895c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008974:	2302      	movs	r3, #2
 8008976:	e065      	b.n	8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	041b      	lsls	r3, r3, #16
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a16      	ldr	r2, [pc, #88]	; (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d004      	beq.n	8008a06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a14      	ldr	r2, [pc, #80]	; (8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d115      	bne.n	8008a32 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	051b      	lsls	r3, r3, #20
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40013400 	.word	0x40013400

08008a58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d101      	bne.n	8008aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e040      	b.n	8008b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fa f9c8 	bl	8002e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2224      	movs	r2, #36	; 0x24
 8008ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8c0 	bl	8008c58 <UART_SetConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e022      	b.n	8008b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fb3e 	bl	800916c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fbc5 	bl	80092b0 <UART_CheckIdleState>
 8008b26:	4603      	mov	r3, r0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	603b      	str	r3, [r7, #0]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	f040 8082 	bne.w	8008c4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <HAL_UART_Transmit+0x26>
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e07a      	b.n	8008c50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_UART_Transmit+0x38>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e073      	b.n	8008c50 <HAL_UART_Transmit+0x120>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2221      	movs	r2, #33	; 0x21
 8008b7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b7e:	f7fa fb9b 	bl	80032b8 <HAL_GetTick>
 8008b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9c:	d108      	bne.n	8008bb0 <HAL_UART_Transmit+0x80>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	e003      	b.n	8008bb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008bc0:	e02d      	b.n	8008c1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2180      	movs	r1, #128	; 0x80
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fbb8 	bl	8009342 <UART_WaitOnFlagUntilTimeout>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e039      	b.n	8008c50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bee:	b292      	uxth	r2, r2
 8008bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	3302      	adds	r3, #2
 8008bf6:	61bb      	str	r3, [r7, #24]
 8008bf8:	e008      	b.n	8008c0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	b292      	uxth	r2, r2
 8008c04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	3b01      	subs	r3, #1
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1cb      	bne.n	8008bc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2200      	movs	r2, #0
 8008c32:	2140      	movs	r1, #64	; 0x40
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fb84 	bl	8009342 <UART_WaitOnFlagUntilTimeout>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e005      	b.n	8008c50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e000      	b.n	8008c50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008c4e:	2302      	movs	r3, #2
  }
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c58:	b5b0      	push	{r4, r5, r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	431a      	orrs	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4bad      	ldr	r3, [pc, #692]	; (8008f38 <UART_SetConfig+0x2e0>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	69f9      	ldr	r1, [r7, #28]
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4aa2      	ldr	r2, [pc, #648]	; (8008f3c <UART_SetConfig+0x2e4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a99      	ldr	r2, [pc, #612]	; (8008f40 <UART_SetConfig+0x2e8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d121      	bne.n	8008d22 <UART_SetConfig+0xca>
 8008cde:	4b99      	ldr	r3, [pc, #612]	; (8008f44 <UART_SetConfig+0x2ec>)
 8008ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce4:	f003 0303 	and.w	r3, r3, #3
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d817      	bhi.n	8008d1c <UART_SetConfig+0xc4>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <UART_SetConfig+0x9c>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d05 	.word	0x08008d05
 8008cf8:	08008d11 	.word	0x08008d11
 8008cfc:	08008d0b 	.word	0x08008d0b
 8008d00:	08008d17 	.word	0x08008d17
 8008d04:	2301      	movs	r3, #1
 8008d06:	76fb      	strb	r3, [r7, #27]
 8008d08:	e0e7      	b.n	8008eda <UART_SetConfig+0x282>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	76fb      	strb	r3, [r7, #27]
 8008d0e:	e0e4      	b.n	8008eda <UART_SetConfig+0x282>
 8008d10:	2304      	movs	r3, #4
 8008d12:	76fb      	strb	r3, [r7, #27]
 8008d14:	e0e1      	b.n	8008eda <UART_SetConfig+0x282>
 8008d16:	2308      	movs	r3, #8
 8008d18:	76fb      	strb	r3, [r7, #27]
 8008d1a:	e0de      	b.n	8008eda <UART_SetConfig+0x282>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	76fb      	strb	r3, [r7, #27]
 8008d20:	e0db      	b.n	8008eda <UART_SetConfig+0x282>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a88      	ldr	r2, [pc, #544]	; (8008f48 <UART_SetConfig+0x2f0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d132      	bne.n	8008d92 <UART_SetConfig+0x13a>
 8008d2c:	4b85      	ldr	r3, [pc, #532]	; (8008f44 <UART_SetConfig+0x2ec>)
 8008d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d32:	f003 030c 	and.w	r3, r3, #12
 8008d36:	2b0c      	cmp	r3, #12
 8008d38:	d828      	bhi.n	8008d8c <UART_SetConfig+0x134>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0xe8>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d75 	.word	0x08008d75
 8008d44:	08008d8d 	.word	0x08008d8d
 8008d48:	08008d8d 	.word	0x08008d8d
 8008d4c:	08008d8d 	.word	0x08008d8d
 8008d50:	08008d81 	.word	0x08008d81
 8008d54:	08008d8d 	.word	0x08008d8d
 8008d58:	08008d8d 	.word	0x08008d8d
 8008d5c:	08008d8d 	.word	0x08008d8d
 8008d60:	08008d7b 	.word	0x08008d7b
 8008d64:	08008d8d 	.word	0x08008d8d
 8008d68:	08008d8d 	.word	0x08008d8d
 8008d6c:	08008d8d 	.word	0x08008d8d
 8008d70:	08008d87 	.word	0x08008d87
 8008d74:	2300      	movs	r3, #0
 8008d76:	76fb      	strb	r3, [r7, #27]
 8008d78:	e0af      	b.n	8008eda <UART_SetConfig+0x282>
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	76fb      	strb	r3, [r7, #27]
 8008d7e:	e0ac      	b.n	8008eda <UART_SetConfig+0x282>
 8008d80:	2304      	movs	r3, #4
 8008d82:	76fb      	strb	r3, [r7, #27]
 8008d84:	e0a9      	b.n	8008eda <UART_SetConfig+0x282>
 8008d86:	2308      	movs	r3, #8
 8008d88:	76fb      	strb	r3, [r7, #27]
 8008d8a:	e0a6      	b.n	8008eda <UART_SetConfig+0x282>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	76fb      	strb	r3, [r7, #27]
 8008d90:	e0a3      	b.n	8008eda <UART_SetConfig+0x282>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a6d      	ldr	r2, [pc, #436]	; (8008f4c <UART_SetConfig+0x2f4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d120      	bne.n	8008dde <UART_SetConfig+0x186>
 8008d9c:	4b69      	ldr	r3, [pc, #420]	; (8008f44 <UART_SetConfig+0x2ec>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008da6:	2b30      	cmp	r3, #48	; 0x30
 8008da8:	d013      	beq.n	8008dd2 <UART_SetConfig+0x17a>
 8008daa:	2b30      	cmp	r3, #48	; 0x30
 8008dac:	d814      	bhi.n	8008dd8 <UART_SetConfig+0x180>
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d009      	beq.n	8008dc6 <UART_SetConfig+0x16e>
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d810      	bhi.n	8008dd8 <UART_SetConfig+0x180>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d002      	beq.n	8008dc0 <UART_SetConfig+0x168>
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d006      	beq.n	8008dcc <UART_SetConfig+0x174>
 8008dbe:	e00b      	b.n	8008dd8 <UART_SetConfig+0x180>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	76fb      	strb	r3, [r7, #27]
 8008dc4:	e089      	b.n	8008eda <UART_SetConfig+0x282>
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	76fb      	strb	r3, [r7, #27]
 8008dca:	e086      	b.n	8008eda <UART_SetConfig+0x282>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	76fb      	strb	r3, [r7, #27]
 8008dd0:	e083      	b.n	8008eda <UART_SetConfig+0x282>
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	76fb      	strb	r3, [r7, #27]
 8008dd6:	e080      	b.n	8008eda <UART_SetConfig+0x282>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	76fb      	strb	r3, [r7, #27]
 8008ddc:	e07d      	b.n	8008eda <UART_SetConfig+0x282>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a5b      	ldr	r2, [pc, #364]	; (8008f50 <UART_SetConfig+0x2f8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d120      	bne.n	8008e2a <UART_SetConfig+0x1d2>
 8008de8:	4b56      	ldr	r3, [pc, #344]	; (8008f44 <UART_SetConfig+0x2ec>)
 8008dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008df2:	2bc0      	cmp	r3, #192	; 0xc0
 8008df4:	d013      	beq.n	8008e1e <UART_SetConfig+0x1c6>
 8008df6:	2bc0      	cmp	r3, #192	; 0xc0
 8008df8:	d814      	bhi.n	8008e24 <UART_SetConfig+0x1cc>
 8008dfa:	2b80      	cmp	r3, #128	; 0x80
 8008dfc:	d009      	beq.n	8008e12 <UART_SetConfig+0x1ba>
 8008dfe:	2b80      	cmp	r3, #128	; 0x80
 8008e00:	d810      	bhi.n	8008e24 <UART_SetConfig+0x1cc>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <UART_SetConfig+0x1b4>
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d006      	beq.n	8008e18 <UART_SetConfig+0x1c0>
 8008e0a:	e00b      	b.n	8008e24 <UART_SetConfig+0x1cc>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	76fb      	strb	r3, [r7, #27]
 8008e10:	e063      	b.n	8008eda <UART_SetConfig+0x282>
 8008e12:	2302      	movs	r3, #2
 8008e14:	76fb      	strb	r3, [r7, #27]
 8008e16:	e060      	b.n	8008eda <UART_SetConfig+0x282>
 8008e18:	2304      	movs	r3, #4
 8008e1a:	76fb      	strb	r3, [r7, #27]
 8008e1c:	e05d      	b.n	8008eda <UART_SetConfig+0x282>
 8008e1e:	2308      	movs	r3, #8
 8008e20:	76fb      	strb	r3, [r7, #27]
 8008e22:	e05a      	b.n	8008eda <UART_SetConfig+0x282>
 8008e24:	2310      	movs	r3, #16
 8008e26:	76fb      	strb	r3, [r7, #27]
 8008e28:	e057      	b.n	8008eda <UART_SetConfig+0x282>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a49      	ldr	r2, [pc, #292]	; (8008f54 <UART_SetConfig+0x2fc>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d125      	bne.n	8008e80 <UART_SetConfig+0x228>
 8008e34:	4b43      	ldr	r3, [pc, #268]	; (8008f44 <UART_SetConfig+0x2ec>)
 8008e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e42:	d017      	beq.n	8008e74 <UART_SetConfig+0x21c>
 8008e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e48:	d817      	bhi.n	8008e7a <UART_SetConfig+0x222>
 8008e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e4e:	d00b      	beq.n	8008e68 <UART_SetConfig+0x210>
 8008e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e54:	d811      	bhi.n	8008e7a <UART_SetConfig+0x222>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <UART_SetConfig+0x20a>
 8008e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5e:	d006      	beq.n	8008e6e <UART_SetConfig+0x216>
 8008e60:	e00b      	b.n	8008e7a <UART_SetConfig+0x222>
 8008e62:	2300      	movs	r3, #0
 8008e64:	76fb      	strb	r3, [r7, #27]
 8008e66:	e038      	b.n	8008eda <UART_SetConfig+0x282>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	76fb      	strb	r3, [r7, #27]
 8008e6c:	e035      	b.n	8008eda <UART_SetConfig+0x282>
 8008e6e:	2304      	movs	r3, #4
 8008e70:	76fb      	strb	r3, [r7, #27]
 8008e72:	e032      	b.n	8008eda <UART_SetConfig+0x282>
 8008e74:	2308      	movs	r3, #8
 8008e76:	76fb      	strb	r3, [r7, #27]
 8008e78:	e02f      	b.n	8008eda <UART_SetConfig+0x282>
 8008e7a:	2310      	movs	r3, #16
 8008e7c:	76fb      	strb	r3, [r7, #27]
 8008e7e:	e02c      	b.n	8008eda <UART_SetConfig+0x282>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a2d      	ldr	r2, [pc, #180]	; (8008f3c <UART_SetConfig+0x2e4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d125      	bne.n	8008ed6 <UART_SetConfig+0x27e>
 8008e8a:	4b2e      	ldr	r3, [pc, #184]	; (8008f44 <UART_SetConfig+0x2ec>)
 8008e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e98:	d017      	beq.n	8008eca <UART_SetConfig+0x272>
 8008e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e9e:	d817      	bhi.n	8008ed0 <UART_SetConfig+0x278>
 8008ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea4:	d00b      	beq.n	8008ebe <UART_SetConfig+0x266>
 8008ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eaa:	d811      	bhi.n	8008ed0 <UART_SetConfig+0x278>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <UART_SetConfig+0x260>
 8008eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb4:	d006      	beq.n	8008ec4 <UART_SetConfig+0x26c>
 8008eb6:	e00b      	b.n	8008ed0 <UART_SetConfig+0x278>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	76fb      	strb	r3, [r7, #27]
 8008ebc:	e00d      	b.n	8008eda <UART_SetConfig+0x282>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	76fb      	strb	r3, [r7, #27]
 8008ec2:	e00a      	b.n	8008eda <UART_SetConfig+0x282>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	76fb      	strb	r3, [r7, #27]
 8008ec8:	e007      	b.n	8008eda <UART_SetConfig+0x282>
 8008eca:	2308      	movs	r3, #8
 8008ecc:	76fb      	strb	r3, [r7, #27]
 8008ece:	e004      	b.n	8008eda <UART_SetConfig+0x282>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	76fb      	strb	r3, [r7, #27]
 8008ed4:	e001      	b.n	8008eda <UART_SetConfig+0x282>
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a17      	ldr	r2, [pc, #92]	; (8008f3c <UART_SetConfig+0x2e4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	f040 8087 	bne.w	8008ff4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ee6:	7efb      	ldrb	r3, [r7, #27]
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d837      	bhi.n	8008f5c <UART_SetConfig+0x304>
 8008eec:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <UART_SetConfig+0x29c>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f5d 	.word	0x08008f5d
 8008efc:	08008f21 	.word	0x08008f21
 8008f00:	08008f5d 	.word	0x08008f5d
 8008f04:	08008f27 	.word	0x08008f27
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008f5d 	.word	0x08008f5d
 8008f10:	08008f5d 	.word	0x08008f5d
 8008f14:	08008f2f 	.word	0x08008f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f18:	f7fc ff7e 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 8008f1c:	6178      	str	r0, [r7, #20]
        break;
 8008f1e:	e022      	b.n	8008f66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <UART_SetConfig+0x300>)
 8008f22:	617b      	str	r3, [r7, #20]
        break;
 8008f24:	e01f      	b.n	8008f66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f26:	f7fc fedf 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8008f2a:	6178      	str	r0, [r7, #20]
        break;
 8008f2c:	e01b      	b.n	8008f66 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f32:	617b      	str	r3, [r7, #20]
        break;
 8008f34:	e017      	b.n	8008f66 <UART_SetConfig+0x30e>
 8008f36:	bf00      	nop
 8008f38:	efff69f3 	.word	0xefff69f3
 8008f3c:	40008000 	.word	0x40008000
 8008f40:	40013800 	.word	0x40013800
 8008f44:	40021000 	.word	0x40021000
 8008f48:	40004400 	.word	0x40004400
 8008f4c:	40004800 	.word	0x40004800
 8008f50:	40004c00 	.word	0x40004c00
 8008f54:	40005000 	.word	0x40005000
 8008f58:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	76bb      	strb	r3, [r7, #26]
        break;
 8008f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 80f1 	beq.w	8009150 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	4613      	mov	r3, r2
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d305      	bcc.n	8008f8a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d902      	bls.n	8008f90 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	76bb      	strb	r3, [r7, #26]
 8008f8e:	e0df      	b.n	8009150 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f04f 0100 	mov.w	r1, #0
 8008f98:	f04f 0200 	mov.w	r2, #0
 8008f9c:	f04f 0300 	mov.w	r3, #0
 8008fa0:	020b      	lsls	r3, r1, #8
 8008fa2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fa6:	0202      	lsls	r2, r0, #8
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	6849      	ldr	r1, [r1, #4]
 8008fac:	0849      	lsrs	r1, r1, #1
 8008fae:	4608      	mov	r0, r1
 8008fb0:	f04f 0100 	mov.w	r1, #0
 8008fb4:	1814      	adds	r4, r2, r0
 8008fb6:	eb43 0501 	adc.w	r5, r3, r1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f7f7 f952 	bl	8000270 <__aeabi_uldivmod>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fda:	d308      	bcc.n	8008fee <UART_SetConfig+0x396>
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fe2:	d204      	bcs.n	8008fee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	60da      	str	r2, [r3, #12]
 8008fec:	e0b0      	b.n	8009150 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	76bb      	strb	r3, [r7, #26]
 8008ff2:	e0ad      	b.n	8009150 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ffc:	d15c      	bne.n	80090b8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8008ffe:	7efb      	ldrb	r3, [r7, #27]
 8009000:	2b08      	cmp	r3, #8
 8009002:	d828      	bhi.n	8009056 <UART_SetConfig+0x3fe>
 8009004:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0x3b4>)
 8009006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900a:	bf00      	nop
 800900c:	08009031 	.word	0x08009031
 8009010:	08009039 	.word	0x08009039
 8009014:	08009041 	.word	0x08009041
 8009018:	08009057 	.word	0x08009057
 800901c:	08009047 	.word	0x08009047
 8009020:	08009057 	.word	0x08009057
 8009024:	08009057 	.word	0x08009057
 8009028:	08009057 	.word	0x08009057
 800902c:	0800904f 	.word	0x0800904f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009030:	f7fc fef2 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 8009034:	6178      	str	r0, [r7, #20]
        break;
 8009036:	e013      	b.n	8009060 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009038:	f7fc ff04 	bl	8005e44 <HAL_RCC_GetPCLK2Freq>
 800903c:	6178      	str	r0, [r7, #20]
        break;
 800903e:	e00f      	b.n	8009060 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009040:	4b49      	ldr	r3, [pc, #292]	; (8009168 <UART_SetConfig+0x510>)
 8009042:	617b      	str	r3, [r7, #20]
        break;
 8009044:	e00c      	b.n	8009060 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009046:	f7fc fe4f 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 800904a:	6178      	str	r0, [r7, #20]
        break;
 800904c:	e008      	b.n	8009060 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009052:	617b      	str	r3, [r7, #20]
        break;
 8009054:	e004      	b.n	8009060 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	76bb      	strb	r3, [r7, #26]
        break;
 800905e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d074      	beq.n	8009150 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	005a      	lsls	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	085b      	lsrs	r3, r3, #1
 8009070:	441a      	add	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	fbb2 f3f3 	udiv	r3, r2, r3
 800907a:	b29b      	uxth	r3, r3
 800907c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b0f      	cmp	r3, #15
 8009082:	d916      	bls.n	80090b2 <UART_SetConfig+0x45a>
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908a:	d212      	bcs.n	80090b2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f023 030f 	bic.w	r3, r3, #15
 8009094:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	085b      	lsrs	r3, r3, #1
 800909a:	b29b      	uxth	r3, r3
 800909c:	f003 0307 	and.w	r3, r3, #7
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	89fb      	ldrh	r3, [r7, #14]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	89fa      	ldrh	r2, [r7, #14]
 80090ae:	60da      	str	r2, [r3, #12]
 80090b0:	e04e      	b.n	8009150 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	76bb      	strb	r3, [r7, #26]
 80090b6:	e04b      	b.n	8009150 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090b8:	7efb      	ldrb	r3, [r7, #27]
 80090ba:	2b08      	cmp	r3, #8
 80090bc:	d827      	bhi.n	800910e <UART_SetConfig+0x4b6>
 80090be:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <UART_SetConfig+0x46c>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	080090f1 	.word	0x080090f1
 80090cc:	080090f9 	.word	0x080090f9
 80090d0:	0800910f 	.word	0x0800910f
 80090d4:	080090ff 	.word	0x080090ff
 80090d8:	0800910f 	.word	0x0800910f
 80090dc:	0800910f 	.word	0x0800910f
 80090e0:	0800910f 	.word	0x0800910f
 80090e4:	08009107 	.word	0x08009107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e8:	f7fc fe96 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 80090ec:	6178      	str	r0, [r7, #20]
        break;
 80090ee:	e013      	b.n	8009118 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f0:	f7fc fea8 	bl	8005e44 <HAL_RCC_GetPCLK2Freq>
 80090f4:	6178      	str	r0, [r7, #20]
        break;
 80090f6:	e00f      	b.n	8009118 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <UART_SetConfig+0x510>)
 80090fa:	617b      	str	r3, [r7, #20]
        break;
 80090fc:	e00c      	b.n	8009118 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090fe:	f7fc fdf3 	bl	8005ce8 <HAL_RCC_GetSysClockFreq>
 8009102:	6178      	str	r0, [r7, #20]
        break;
 8009104:	e008      	b.n	8009118 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800910a:	617b      	str	r3, [r7, #20]
        break;
 800910c:	e004      	b.n	8009118 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	76bb      	strb	r3, [r7, #26]
        break;
 8009116:	bf00      	nop
    }

    if (pclk != 0U)
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d018      	beq.n	8009150 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	085a      	lsrs	r2, r3, #1
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	441a      	add	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009130:	b29b      	uxth	r3, r3
 8009132:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	2b0f      	cmp	r3, #15
 8009138:	d908      	bls.n	800914c <UART_SetConfig+0x4f4>
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009140:	d204      	bcs.n	800914c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	60da      	str	r2, [r3, #12]
 800914a:	e001      	b.n	8009150 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800915c:	7ebb      	ldrb	r3, [r7, #26]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3720      	adds	r7, #32
 8009162:	46bd      	mov	sp, r7
 8009164:	bdb0      	pop	{r4, r5, r7, pc}
 8009166:	bf00      	nop
 8009168:	00f42400 	.word	0x00f42400

0800916c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00a      	beq.n	80091da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	f003 0320 	and.w	r3, r3, #32
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01a      	beq.n	8009282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	430a      	orrs	r2, r1
 8009260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800926a:	d10a      	bne.n	8009282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	605a      	str	r2, [r3, #4]
  }
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af02      	add	r7, sp, #8
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092c0:	f7f9 fffa 	bl	80032b8 <HAL_GetTick>
 80092c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0308 	and.w	r3, r3, #8
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d10e      	bne.n	80092f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f82d 	bl	8009342 <UART_WaitOnFlagUntilTimeout>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e023      	b.n	800933a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d10e      	bne.n	800931e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f817 	bl	8009342 <UART_WaitOnFlagUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e00d      	b.n	800933a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2220      	movs	r2, #32
 8009322:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	4613      	mov	r3, r2
 8009350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009352:	e05e      	b.n	8009412 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800935a:	d05a      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800935c:	f7f9 ffac 	bl	80032b8 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	429a      	cmp	r2, r3
 800936a:	d302      	bcc.n	8009372 <UART_WaitOnFlagUntilTimeout+0x30>
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d11b      	bne.n	80093aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009380:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0201 	bic.w	r2, r2, #1
 8009390:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2220      	movs	r2, #32
 8009396:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2220      	movs	r2, #32
 800939c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e043      	b.n	8009432 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d02c      	beq.n	8009412 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093c6:	d124      	bne.n	8009412 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2220      	movs	r2, #32
 80093f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	e00f      	b.n	8009432 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	69da      	ldr	r2, [r3, #28]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4013      	ands	r3, r2
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	429a      	cmp	r2, r3
 8009420:	bf0c      	ite	eq
 8009422:	2301      	moveq	r3, #1
 8009424:	2300      	movne	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	429a      	cmp	r2, r3
 800942e:	d091      	beq.n	8009354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009440:	4904      	ldr	r1, [pc, #16]	; (8009454 <MX_FATFS_Init+0x18>)
 8009442:	4805      	ldr	r0, [pc, #20]	; (8009458 <MX_FATFS_Init+0x1c>)
 8009444:	f000 f8ae 	bl	80095a4 <FATFS_LinkDriver>
 8009448:	4603      	mov	r3, r0
 800944a:	461a      	mov	r2, r3
 800944c:	4b03      	ldr	r3, [pc, #12]	; (800945c <MX_FATFS_Init+0x20>)
 800944e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009450:	bf00      	nop
 8009452:	bd80      	pop	{r7, pc}
 8009454:	2000e3bc 	.word	0x2000e3bc
 8009458:	200000a0 	.word	0x200000a0
 800945c:	2000e3c0 	.word	0x2000e3c0

08009460 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	4618      	mov	r0, r3
 800946e:	f7f7 fa2f 	bl	80008d0 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8009472:	bf00      	nop
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	4618      	mov	r0, r3
 800948a:	f7f7 fb07 	bl	8000a9c <SD_disk_status>
  /* USER CODE END STATUS */
}
 800948e:	bf00      	nop
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 80094a8:	7bf8      	ldrb	r0, [r7, #15]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	f7f7 fb0a 	bl	8000ac8 <SD_disk_read>
  /* USER CODE END READ */
}
 80094b4:	bf00      	nop
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 80094ce:	7bf8      	ldrb	r0, [r7, #15]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	f7f7 fb61 	bl	8000b9c <SD_disk_write>
  /* USER CODE END WRITE */
}
 80094da:	bf00      	nop
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	603a      	str	r2, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
 80094f0:	460b      	mov	r3, r1
 80094f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	79b9      	ldrb	r1, [r7, #6]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f7 fbd2 	bl	8000ca4 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8009500:	bf00      	nop
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009522:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009524:	7a5b      	ldrb	r3, [r3, #9]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	d131      	bne.n	8009590 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800952c:	4b1c      	ldr	r3, [pc, #112]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800952e:	7a5b      	ldrb	r3, [r3, #9]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	4b1a      	ldr	r3, [pc, #104]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009536:	2100      	movs	r1, #0
 8009538:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800953a:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800953c:	7a5b      	ldrb	r3, [r3, #9]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	4a17      	ldr	r2, [pc, #92]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800954a:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800954c:	7a5b      	ldrb	r3, [r3, #9]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009554:	4413      	add	r3, r2
 8009556:	79fa      	ldrb	r2, [r7, #7]
 8009558:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 800955c:	7a5b      	ldrb	r3, [r3, #9]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	b2d1      	uxtb	r1, r2
 8009564:	4a0e      	ldr	r2, [pc, #56]	; (80095a0 <FATFS_LinkDriverEx+0x94>)
 8009566:	7251      	strb	r1, [r2, #9]
 8009568:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800956a:	7dbb      	ldrb	r3, [r7, #22]
 800956c:	3330      	adds	r3, #48	; 0x30
 800956e:	b2da      	uxtb	r2, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	3301      	adds	r3, #1
 8009578:	223a      	movs	r2, #58	; 0x3a
 800957a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	3302      	adds	r3, #2
 8009580:	222f      	movs	r2, #47	; 0x2f
 8009582:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3303      	adds	r3, #3
 8009588:	2200      	movs	r2, #0
 800958a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009590:	7dfb      	ldrb	r3, [r7, #23]
}
 8009592:	4618      	mov	r0, r3
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	20000144 	.word	0x20000144

080095a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095ae:	2200      	movs	r2, #0
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff ffaa 	bl	800950c <FATFS_LinkDriverEx>
 80095b8:	4603      	mov	r3, r0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <__NVIC_SetPriority>:
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	db0a      	blt.n	80095ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	490c      	ldr	r1, [pc, #48]	; (8009610 <__NVIC_SetPriority+0x4c>)
 80095de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e2:	0112      	lsls	r2, r2, #4
 80095e4:	b2d2      	uxtb	r2, r2
 80095e6:	440b      	add	r3, r1
 80095e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80095ec:	e00a      	b.n	8009604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	4908      	ldr	r1, [pc, #32]	; (8009614 <__NVIC_SetPriority+0x50>)
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	3b04      	subs	r3, #4
 80095fc:	0112      	lsls	r2, r2, #4
 80095fe:	b2d2      	uxtb	r2, r2
 8009600:	440b      	add	r3, r1
 8009602:	761a      	strb	r2, [r3, #24]
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	e000e100 	.word	0xe000e100
 8009614:	e000ed00 	.word	0xe000ed00

08009618 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800961c:	4b05      	ldr	r3, [pc, #20]	; (8009634 <SysTick_Handler+0x1c>)
 800961e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009620:	f001 ff7c 	bl	800b51c <xTaskGetSchedulerState>
 8009624:	4603      	mov	r3, r0
 8009626:	2b01      	cmp	r3, #1
 8009628:	d001      	beq.n	800962e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800962a:	f002 fd7d 	bl	800c128 <xPortSysTickHandler>
  }
}
 800962e:	bf00      	nop
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	e000e010 	.word	0xe000e010

08009638 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800963c:	2100      	movs	r1, #0
 800963e:	f06f 0004 	mvn.w	r0, #4
 8009642:	f7ff ffbf 	bl	80095c4 <__NVIC_SetPriority>
#endif
}
 8009646:	bf00      	nop
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009652:	f3ef 8305 	mrs	r3, IPSR
 8009656:	603b      	str	r3, [r7, #0]
  return(result);
 8009658:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800965e:	f06f 0305 	mvn.w	r3, #5
 8009662:	607b      	str	r3, [r7, #4]
 8009664:	e00c      	b.n	8009680 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <osKernelInitialize+0x44>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d105      	bne.n	800967a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800966e:	4b08      	ldr	r3, [pc, #32]	; (8009690 <osKernelInitialize+0x44>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009674:	2300      	movs	r3, #0
 8009676:	607b      	str	r3, [r7, #4]
 8009678:	e002      	b.n	8009680 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800967a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800967e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009680:	687b      	ldr	r3, [r7, #4]
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	20000150 	.word	0x20000150

08009694 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800969a:	f3ef 8305 	mrs	r3, IPSR
 800969e:	603b      	str	r3, [r7, #0]
  return(result);
 80096a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80096a6:	f06f 0305 	mvn.w	r3, #5
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	e010      	b.n	80096d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80096ae:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <osKernelStart+0x48>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d109      	bne.n	80096ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80096b6:	f7ff ffbf 	bl	8009638 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <osKernelStart+0x48>)
 80096bc:	2202      	movs	r2, #2
 80096be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096c0:	f001 faa8 	bl	800ac14 <vTaskStartScheduler>
      stat = osOK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	607b      	str	r3, [r7, #4]
 80096c8:	e002      	b.n	80096d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80096ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80096d0:	687b      	ldr	r3, [r7, #4]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000150 	.word	0x20000150

080096e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08e      	sub	sp, #56	; 0x38
 80096e4:	af04      	add	r7, sp, #16
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f0:	f3ef 8305 	mrs	r3, IPSR
 80096f4:	617b      	str	r3, [r7, #20]
  return(result);
 80096f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d17e      	bne.n	80097fa <osThreadNew+0x11a>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d07b      	beq.n	80097fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009702:	2380      	movs	r3, #128	; 0x80
 8009704:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009706:	2318      	movs	r3, #24
 8009708:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800970e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009712:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d045      	beq.n	80097a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <osThreadNew+0x48>
        name = attr->name;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <osThreadNew+0x6e>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b38      	cmp	r3, #56	; 0x38
 8009740:	d805      	bhi.n	800974e <osThreadNew+0x6e>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <osThreadNew+0x72>
        return (NULL);
 800974e:	2300      	movs	r3, #0
 8009750:	e054      	b.n	80097fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	089b      	lsrs	r3, r3, #2
 8009760:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00e      	beq.n	8009788 <osThreadNew+0xa8>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	2b5b      	cmp	r3, #91	; 0x5b
 8009770:	d90a      	bls.n	8009788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009776:	2b00      	cmp	r3, #0
 8009778:	d006      	beq.n	8009788 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <osThreadNew+0xa8>
        mem = 1;
 8009782:	2301      	movs	r3, #1
 8009784:	61bb      	str	r3, [r7, #24]
 8009786:	e010      	b.n	80097aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10c      	bne.n	80097aa <osThreadNew+0xca>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d108      	bne.n	80097aa <osThreadNew+0xca>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <osThreadNew+0xca>
          mem = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61bb      	str	r3, [r7, #24]
 80097a4:	e001      	b.n	80097aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d110      	bne.n	80097d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6a3a      	ldr	r2, [r7, #32]
 80097c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f001 f804 	bl	800a7d4 <xTaskCreateStatic>
 80097cc:	4603      	mov	r3, r0
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	e013      	b.n	80097fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d110      	bne.n	80097fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	b29a      	uxth	r2, r3
 80097dc:	f107 0310 	add.w	r3, r7, #16
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f001 f84f 	bl	800a88e <xTaskCreate>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d001      	beq.n	80097fa <osThreadNew+0x11a>
            hTask = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80097fa:	693b      	ldr	r3, [r7, #16]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3728      	adds	r7, #40	; 0x28
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800980c:	f3ef 8305 	mrs	r3, IPSR
 8009810:	60fb      	str	r3, [r7, #12]
  return(result);
 8009812:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009818:	f06f 0305 	mvn.w	r3, #5
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	e019      	b.n	8009854 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009824:	f001 fb08 	bl	800ae38 <xTaskGetTickCount>
 8009828:	4603      	mov	r3, r0
 800982a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <osDelayUntil+0x4a>
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	db06      	blt.n	800984e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009840:	f107 0308 	add.w	r3, r7, #8
 8009844:	6939      	ldr	r1, [r7, #16]
 8009846:	4618      	mov	r0, r3
 8009848:	f001 f966 	bl	800ab18 <vTaskDelayUntil>
 800984c:	e002      	b.n	8009854 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800984e:	f06f 0303 	mvn.w	r3, #3
 8009852:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009854:	697b      	ldr	r3, [r7, #20]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800985e:	b580      	push	{r7, lr}
 8009860:	b086      	sub	sp, #24
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800986a:	f3ef 8305 	mrs	r3, IPSR
 800986e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009870:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009872:	2b00      	cmp	r3, #0
 8009874:	d12d      	bne.n	80098d2 <osEventFlagsNew+0x74>
    mem = -1;
 8009876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800987a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d015      	beq.n	80098ae <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d006      	beq.n	8009898 <osEventFlagsNew+0x3a>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	2b1f      	cmp	r3, #31
 8009890:	d902      	bls.n	8009898 <osEventFlagsNew+0x3a>
        mem = 1;
 8009892:	2301      	movs	r3, #1
 8009894:	613b      	str	r3, [r7, #16]
 8009896:	e00c      	b.n	80098b2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d108      	bne.n	80098b2 <osEventFlagsNew+0x54>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <osEventFlagsNew+0x54>
          mem = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	613b      	str	r3, [r7, #16]
 80098ac:	e001      	b.n	80098b2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d106      	bne.n	80098c6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f8a7 	bl	8009a10 <xEventGroupCreateStatic>
 80098c2:	6178      	str	r0, [r7, #20]
 80098c4:	e005      	b.n	80098d2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d102      	bne.n	80098d2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80098cc:	f000 f8d7 	bl	8009a7e <xEventGroupCreate>
 80098d0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80098d2:	697b      	ldr	r3, [r7, #20]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08c      	sub	sp, #48	; 0x30
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d004      	beq.n	80098fe <osEventFlagsWait+0x22>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80098fe:	f06f 0303 	mvn.w	r3, #3
 8009902:	61fb      	str	r3, [r7, #28]
 8009904:	e04b      	b.n	800999e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009906:	f3ef 8305 	mrs	r3, IPSR
 800990a:	617b      	str	r3, [r7, #20]
  return(result);
 800990c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8009912:	f06f 0305 	mvn.w	r3, #5
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	e041      	b.n	800999e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8009924:	2301      	movs	r3, #1
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
 8009928:	e001      	b.n	800992e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800992a:	2300      	movs	r3, #0
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8009938:	2300      	movs	r3, #0
 800993a:	623b      	str	r3, [r7, #32]
 800993c:	e001      	b.n	8009942 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800993e:	2301      	movs	r3, #1
 8009940:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	6a3a      	ldr	r2, [r7, #32]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	69b8      	ldr	r0, [r7, #24]
 800994e:	f000 f8b1 	bl	8009ab4 <xEventGroupWaitBits>
 8009952:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d010      	beq.n	8009980 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	4013      	ands	r3, r2
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	429a      	cmp	r2, r3
 8009968:	d019      	beq.n	800999e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8009970:	f06f 0301 	mvn.w	r3, #1
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	e012      	b.n	800999e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009978:	f06f 0302 	mvn.w	r3, #2
 800997c:	61fb      	str	r3, [r7, #28]
 800997e:	e00e      	b.n	800999e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4013      	ands	r3, r2
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8009990:	f06f 0301 	mvn.w	r3, #1
 8009994:	61fb      	str	r3, [r7, #28]
 8009996:	e002      	b.n	800999e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009998:	f06f 0302 	mvn.w	r3, #2
 800999c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800999e:	69fb      	ldr	r3, [r7, #28]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3728      	adds	r7, #40	; 0x28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	4a07      	ldr	r2, [pc, #28]	; (80099d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80099b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4a06      	ldr	r2, [pc, #24]	; (80099d8 <vApplicationGetIdleTaskMemory+0x30>)
 80099be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2280      	movs	r2, #128	; 0x80
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000154 	.word	0x20000154
 80099d8:	200001b0 	.word	0x200001b0

080099dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4a07      	ldr	r2, [pc, #28]	; (8009a08 <vApplicationGetTimerTaskMemory+0x2c>)
 80099ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <vApplicationGetTimerTaskMemory+0x30>)
 80099f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099fa:	601a      	str	r2, [r3, #0]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	200003b0 	.word	0x200003b0
 8009a0c:	2000040c 	.word	0x2000040c

08009a10 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009a34:	2320      	movs	r3, #32
 8009a36:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d00a      	beq.n	8009a54 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	60fb      	str	r3, [r7, #12]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f000 f913 	bl	8009c94 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2201      	movs	r2, #1
 8009a72:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009a74:	697b      	ldr	r3, [r7, #20]
	}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009a84:	2020      	movs	r0, #32
 8009a86:	f002 fbdf 	bl	800c248 <pvPortMalloc>
 8009a8a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 f8f9 	bl	8009c94 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009aa8:	687b      	ldr	r3, [r7, #4]
	}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b090      	sub	sp, #64	; 0x40
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009aca:	2300      	movs	r3, #0
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10a      	bne.n	8009aea <xEventGroupWaitBits+0x36>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	623b      	str	r3, [r7, #32]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <xEventGroupWaitBits+0x56>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61fb      	str	r3, [r7, #28]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	61bb      	str	r3, [r7, #24]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b26:	f001 fcf9 	bl	800b51c <xTaskGetSchedulerState>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <xEventGroupWaitBits+0x82>
 8009b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <xEventGroupWaitBits+0x86>
 8009b36:	2301      	movs	r3, #1
 8009b38:	e000      	b.n	8009b3c <xEventGroupWaitBits+0x88>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10a      	bne.n	8009b56 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	617b      	str	r3, [r7, #20]
}
 8009b52:	bf00      	nop
 8009b54:	e7fe      	b.n	8009b54 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009b56:	f001 f8c3 	bl	800ace0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b66:	f000 f873 	bl	8009c50 <prvTestWaitCondition>
 8009b6a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00e      	beq.n	8009b90 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d028      	beq.n	8009bd2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	43db      	mvns	r3, r3
 8009b88:	401a      	ands	r2, r3
 8009b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	e020      	b.n	8009bd2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009b90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d104      	bne.n	8009ba0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b9e:	e018      	b.n	8009bd2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbe:	1d18      	adds	r0, r3, #4
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc8:	4619      	mov	r1, r3
 8009bca:	f001 fa81 	bl	800b0d0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009bd2:	f001 f893 	bl	800acfc <xTaskResumeAll>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d031      	beq.n	8009c42 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d107      	bne.n	8009bf4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009be4:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <xEventGroupWaitBits+0x198>)
 8009be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009bf4:	f001 fd1e 	bl	800b634 <uxTaskResetEventItemValue>
 8009bf8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d11a      	bne.n	8009c3a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009c04:	f002 f9fe 	bl	800c004 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009c14:	f000 f81c 	bl	8009c50 <prvTestWaitCondition>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d009      	beq.n	8009c32 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d006      	beq.n	8009c32 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	43db      	mvns	r3, r3
 8009c2c:	401a      	ands	r2, r3
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009c32:	2301      	movs	r3, #1
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009c36:	f002 fa15 	bl	800c064 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c40:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3740      	adds	r7, #64	; 0x40
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	e000ed04 	.word	0xe000ed04

08009c50 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d107      	bne.n	8009c76 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00a      	beq.n	8009c86 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e007      	b.n	8009c86 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d101      	bne.n	8009c86 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009c82:	2301      	movs	r3, #1
 8009c84:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009c86:	697b      	ldr	r3, [r7, #20]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f103 0208 	add.w	r2, r3, #8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f103 0208 	add.w	r2, r3, #8
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f103 0208 	add.w	r2, r3, #8
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	601a      	str	r2, [r3, #0]
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d4c:	d103      	bne.n	8009d56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e00c      	b.n	8009d70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e002      	b.n	8009d64 <vListInsert+0x2e>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d2f6      	bcs.n	8009d5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6892      	ldr	r2, [r2, #8]
 8009dbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6852      	ldr	r2, [r2, #4]
 8009dc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d103      	bne.n	8009ddc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	1e5a      	subs	r2, r3, #1
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <xQueueGenericReset+0x2a>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	60bb      	str	r3, [r7, #8]
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e26:	f002 f8ed 	bl	800c004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e36:	fb01 f303 	mul.w	r3, r1, r3
 8009e3a:	441a      	add	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e56:	3b01      	subs	r3, #1
 8009e58:	68f9      	ldr	r1, [r7, #12]
 8009e5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	441a      	add	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	22ff      	movs	r2, #255	; 0xff
 8009e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	22ff      	movs	r2, #255	; 0xff
 8009e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d114      	bne.n	8009ea6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d01a      	beq.n	8009eba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3310      	adds	r3, #16
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 f989 	bl	800b1a0 <xTaskRemoveFromEventList>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d012      	beq.n	8009eba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e94:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <xQueueGenericReset+0xcc>)
 8009e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	e009      	b.n	8009eba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3310      	adds	r3, #16
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7ff fef2 	bl	8009c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	3324      	adds	r3, #36	; 0x24
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff feed 	bl	8009c94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009eba:	f002 f8d3 	bl	800c064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ebe:	2301      	movs	r3, #1
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08e      	sub	sp, #56	; 0x38
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10a      	bne.n	8009f12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <xQueueGenericCreateStatic+0x52>
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <xQueueGenericCreateStatic+0x56>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e000      	b.n	8009f24 <xQueueGenericCreateStatic+0x58>
 8009f22:	2300      	movs	r3, #0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	623b      	str	r3, [r7, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <xQueueGenericCreateStatic+0x7e>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <xQueueGenericCreateStatic+0x82>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <xQueueGenericCreateStatic+0x84>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	61fb      	str	r3, [r7, #28]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f6a:	2350      	movs	r3, #80	; 0x50
 8009f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b50      	cmp	r3, #80	; 0x50
 8009f72:	d00a      	beq.n	8009f8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61bb      	str	r3, [r7, #24]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00d      	beq.n	8009fb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	68b9      	ldr	r1, [r7, #8]
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f805 	bl	8009fbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3730      	adds	r7, #48	; 0x30
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d103      	bne.n	8009fd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	e002      	b.n	8009fde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009fea:	2101      	movs	r1, #1
 8009fec:	69b8      	ldr	r0, [r7, #24]
 8009fee:	f7ff ff05 	bl	8009dfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ffa:	bf00      	nop
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b08e      	sub	sp, #56	; 0x38
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
 800a010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a012:	2300      	movs	r3, #0
 800a014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xQueueGenericSend+0x32>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <xQueueGenericSend+0x40>
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <xQueueGenericSend+0x44>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <xQueueGenericSend+0x46>
 800a048:	2300      	movs	r3, #0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <xQueueGenericSend+0x60>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d103      	bne.n	800a072 <xQueueGenericSend+0x6e>
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d101      	bne.n	800a076 <xQueueGenericSend+0x72>
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <xQueueGenericSend+0x74>
 800a076:	2300      	movs	r3, #0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <xQueueGenericSend+0x8e>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	623b      	str	r3, [r7, #32]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a092:	f001 fa43 	bl	800b51c <xTaskGetSchedulerState>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <xQueueGenericSend+0x9e>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <xQueueGenericSend+0xa2>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <xQueueGenericSend+0xa4>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	61fb      	str	r3, [r7, #28]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0c2:	f001 ff9f 	bl	800c004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d302      	bcc.n	800a0d8 <xQueueGenericSend+0xd4>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d129      	bne.n	800a12c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	68b9      	ldr	r1, [r7, #8]
 800a0dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0de:	f000 fa0b 	bl	800a4f8 <prvCopyDataToQueue>
 800a0e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d010      	beq.n	800a10e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	3324      	adds	r3, #36	; 0x24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 f855 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d013      	beq.n	800a124 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0fc:	4b3f      	ldr	r3, [pc, #252]	; (800a1fc <xQueueGenericSend+0x1f8>)
 800a0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	e00a      	b.n	800a124 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d007      	beq.n	800a124 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a114:	4b39      	ldr	r3, [pc, #228]	; (800a1fc <xQueueGenericSend+0x1f8>)
 800a116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a124:	f001 ff9e 	bl	800c064 <vPortExitCritical>
				return pdPASS;
 800a128:	2301      	movs	r3, #1
 800a12a:	e063      	b.n	800a1f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d103      	bne.n	800a13a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a132:	f001 ff97 	bl	800c064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a136:	2300      	movs	r3, #0
 800a138:	e05c      	b.n	800a1f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d106      	bne.n	800a14e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a140:	f107 0314 	add.w	r3, r7, #20
 800a144:	4618      	mov	r0, r3
 800a146:	f001 f88f 	bl	800b268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a14a:	2301      	movs	r3, #1
 800a14c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a14e:	f001 ff89 	bl	800c064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a152:	f000 fdc5 	bl	800ace0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a156:	f001 ff55 	bl	800c004 <vPortEnterCritical>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a160:	b25b      	sxtb	r3, r3
 800a162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a166:	d103      	bne.n	800a170 <xQueueGenericSend+0x16c>
 800a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a176:	b25b      	sxtb	r3, r3
 800a178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a17c:	d103      	bne.n	800a186 <xQueueGenericSend+0x182>
 800a17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a186:	f001 ff6d 	bl	800c064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a18a:	1d3a      	adds	r2, r7, #4
 800a18c:	f107 0314 	add.w	r3, r7, #20
 800a190:	4611      	mov	r1, r2
 800a192:	4618      	mov	r0, r3
 800a194:	f001 f87e 	bl	800b294 <xTaskCheckForTimeOut>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d124      	bne.n	800a1e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a19e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a0:	f000 faa2 	bl	800a6e8 <prvIsQueueFull>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d018      	beq.n	800a1dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	3310      	adds	r3, #16
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 ff68 	bl	800b088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a1b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ba:	f000 fa2d 	bl	800a618 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a1be:	f000 fd9d 	bl	800acfc <xTaskResumeAll>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f47f af7c 	bne.w	800a0c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <xQueueGenericSend+0x1f8>)
 800a1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	e772      	b.n	800a0c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1de:	f000 fa1b 	bl	800a618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1e2:	f000 fd8b 	bl	800acfc <xTaskResumeAll>
 800a1e6:	e76c      	b.n	800a0c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a1e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1ea:	f000 fa15 	bl	800a618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1ee:	f000 fd85 	bl	800acfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a1f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3738      	adds	r7, #56	; 0x38
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	e000ed04 	.word	0xe000ed04

0800a200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b090      	sub	sp, #64	; 0x40
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d103      	bne.n	800a23c <xQueueGenericSendFromISR+0x3c>
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <xQueueGenericSendFromISR+0x40>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <xQueueGenericSendFromISR+0x42>
 800a240:	2300      	movs	r3, #0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d103      	bne.n	800a26a <xQueueGenericSendFromISR+0x6a>
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a266:	2b01      	cmp	r3, #1
 800a268:	d101      	bne.n	800a26e <xQueueGenericSendFromISR+0x6e>
 800a26a:	2301      	movs	r3, #1
 800a26c:	e000      	b.n	800a270 <xQueueGenericSendFromISR+0x70>
 800a26e:	2300      	movs	r3, #0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	623b      	str	r3, [r7, #32]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a28a:	f001 ff9d 	bl	800c1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a28e:	f3ef 8211 	mrs	r2, BASEPRI
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	61fa      	str	r2, [r7, #28]
 800a2a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d302      	bcc.n	800a2bc <xQueueGenericSendFromISR+0xbc>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d12f      	bne.n	800a31c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2d2:	f000 f911 	bl	800a4f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a2da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2de:	d112      	bne.n	800a306 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d016      	beq.n	800a316 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	3324      	adds	r3, #36	; 0x24
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 ff57 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00e      	beq.n	800a316 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	601a      	str	r2, [r3, #0]
 800a304:	e007      	b.n	800a316 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a30a:	3301      	adds	r3, #1
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	b25a      	sxtb	r2, r3
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a316:	2301      	movs	r3, #1
 800a318:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a31a:	e001      	b.n	800a320 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a31c:	2300      	movs	r3, #0
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a322:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a32a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3740      	adds	r7, #64	; 0x40
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08c      	sub	sp, #48	; 0x30
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a344:	2300      	movs	r3, #0
 800a346:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10a      	bne.n	800a368 <xQueueReceive+0x30>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	623b      	str	r3, [r7, #32]
}
 800a364:	bf00      	nop
 800a366:	e7fe      	b.n	800a366 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d103      	bne.n	800a376 <xQueueReceive+0x3e>
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <xQueueReceive+0x42>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <xQueueReceive+0x44>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <xQueueReceive+0x5e>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	61fb      	str	r3, [r7, #28]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a396:	f001 f8c1 	bl	800b51c <xTaskGetSchedulerState>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <xQueueReceive+0x6e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <xQueueReceive+0x72>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e000      	b.n	800a3ac <xQueueReceive+0x74>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <xQueueReceive+0x8e>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	61bb      	str	r3, [r7, #24]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3c6:	f001 fe1d 	bl	800c004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d01f      	beq.n	800a416 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3da:	f000 f8f7 	bl	800a5cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	1e5a      	subs	r2, r3, #1
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00f      	beq.n	800a40e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	3310      	adds	r3, #16
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fed4 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d007      	beq.n	800a40e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3fe:	4b3d      	ldr	r3, [pc, #244]	; (800a4f4 <xQueueReceive+0x1bc>)
 800a400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a40e:	f001 fe29 	bl	800c064 <vPortExitCritical>
				return pdPASS;
 800a412:	2301      	movs	r3, #1
 800a414:	e069      	b.n	800a4ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a41c:	f001 fe22 	bl	800c064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a420:	2300      	movs	r3, #0
 800a422:	e062      	b.n	800a4ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a42a:	f107 0310 	add.w	r3, r7, #16
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 ff1a 	bl	800b268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a434:	2301      	movs	r3, #1
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a438:	f001 fe14 	bl	800c064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a43c:	f000 fc50 	bl	800ace0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a440:	f001 fde0 	bl	800c004 <vPortEnterCritical>
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a450:	d103      	bne.n	800a45a <xQueueReceive+0x122>
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a460:	b25b      	sxtb	r3, r3
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a466:	d103      	bne.n	800a470 <xQueueReceive+0x138>
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a470:	f001 fdf8 	bl	800c064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a474:	1d3a      	adds	r2, r7, #4
 800a476:	f107 0310 	add.w	r3, r7, #16
 800a47a:	4611      	mov	r1, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 ff09 	bl	800b294 <xTaskCheckForTimeOut>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d123      	bne.n	800a4d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48a:	f000 f917 	bl	800a6bc <prvIsQueueEmpty>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d017      	beq.n	800a4c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	3324      	adds	r3, #36	; 0x24
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	4611      	mov	r1, r2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fdf3 	bl	800b088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4a4:	f000 f8b8 	bl	800a618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4a8:	f000 fc28 	bl	800acfc <xTaskResumeAll>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d189      	bne.n	800a3c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a4b2:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <xQueueReceive+0x1bc>)
 800a4b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	e780      	b.n	800a3c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c6:	f000 f8a7 	bl	800a618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ca:	f000 fc17 	bl	800acfc <xTaskResumeAll>
 800a4ce:	e77a      	b.n	800a3c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4d2:	f000 f8a1 	bl	800a618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4d6:	f000 fc11 	bl	800acfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4dc:	f000 f8ee 	bl	800a6bc <prvIsQueueEmpty>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f43f af6f 	beq.w	800a3c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3730      	adds	r7, #48	; 0x30
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b086      	sub	sp, #24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a504:	2300      	movs	r3, #0
 800a506:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10d      	bne.n	800a532 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d14d      	bne.n	800a5ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	4618      	mov	r0, r3
 800a524:	f001 f818 	bl	800b558 <xTaskPriorityDisinherit>
 800a528:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	609a      	str	r2, [r3, #8]
 800a530:	e043      	b.n	800a5ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d119      	bne.n	800a56c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6858      	ldr	r0, [r3, #4]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a540:	461a      	mov	r2, r3
 800a542:	68b9      	ldr	r1, [r7, #8]
 800a544:	f002 f894 	bl	800c670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d32b      	bcc.n	800a5ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	605a      	str	r2, [r3, #4]
 800a56a:	e026      	b.n	800a5ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	68d8      	ldr	r0, [r3, #12]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	461a      	mov	r2, r3
 800a576:	68b9      	ldr	r1, [r7, #8]
 800a578:	f002 f87a 	bl	800c670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68da      	ldr	r2, [r3, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a584:	425b      	negs	r3, r3
 800a586:	441a      	add	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d207      	bcs.n	800a5a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	689a      	ldr	r2, [r3, #8]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a0:	425b      	negs	r3, r3
 800a5a2:	441a      	add	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d105      	bne.n	800a5ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a5c2:	697b      	ldr	r3, [r7, #20]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d018      	beq.n	800a610 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	441a      	add	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d303      	bcc.n	800a600 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68d9      	ldr	r1, [r3, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	461a      	mov	r2, r3
 800a60a:	6838      	ldr	r0, [r7, #0]
 800a60c:	f002 f830 	bl	800c670 <memcpy>
	}
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a620:	f001 fcf0 	bl	800c004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a62a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a62c:	e011      	b.n	800a652 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d012      	beq.n	800a65c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3324      	adds	r3, #36	; 0x24
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 fdb0 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a646:	f000 fe87 	bl	800b358 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	3b01      	subs	r3, #1
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a656:	2b00      	cmp	r3, #0
 800a658:	dce9      	bgt.n	800a62e <prvUnlockQueue+0x16>
 800a65a:	e000      	b.n	800a65e <prvUnlockQueue+0x46>
					break;
 800a65c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	22ff      	movs	r2, #255	; 0xff
 800a662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a666:	f001 fcfd 	bl	800c064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a66a:	f001 fccb 	bl	800c004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a674:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a676:	e011      	b.n	800a69c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d012      	beq.n	800a6a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3310      	adds	r3, #16
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fd8b 	bl	800b1a0 <xTaskRemoveFromEventList>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a690:	f000 fe62 	bl	800b358 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a694:	7bbb      	ldrb	r3, [r7, #14]
 800a696:	3b01      	subs	r3, #1
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a69c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	dce9      	bgt.n	800a678 <prvUnlockQueue+0x60>
 800a6a4:	e000      	b.n	800a6a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	22ff      	movs	r2, #255	; 0xff
 800a6ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a6b0:	f001 fcd8 	bl	800c064 <vPortExitCritical>
}
 800a6b4:	bf00      	nop
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6c4:	f001 fc9e 	bl	800c004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d102      	bne.n	800a6d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e001      	b.n	800a6da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6da:	f001 fcc3 	bl	800c064 <vPortExitCritical>

	return xReturn;
 800a6de:	68fb      	ldr	r3, [r7, #12]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6f0:	f001 fc88 	bl	800c004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d102      	bne.n	800a706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a700:	2301      	movs	r3, #1
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	e001      	b.n	800a70a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a706:	2300      	movs	r3, #0
 800a708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a70a:	f001 fcab 	bl	800c064 <vPortExitCritical>

	return xReturn;
 800a70e:	68fb      	ldr	r3, [r7, #12]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	e014      	b.n	800a752 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a728:	4a0f      	ldr	r2, [pc, #60]	; (800a768 <vQueueAddToRegistry+0x50>)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10b      	bne.n	800a74c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a734:	490c      	ldr	r1, [pc, #48]	; (800a768 <vQueueAddToRegistry+0x50>)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a73e:	4a0a      	ldr	r2, [pc, #40]	; (800a768 <vQueueAddToRegistry+0x50>)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	4413      	add	r3, r2
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a74a:	e006      	b.n	800a75a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	3301      	adds	r3, #1
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b07      	cmp	r3, #7
 800a756:	d9e7      	bls.n	800a728 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	20010430 	.word	0x20010430

0800a76c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a77c:	f001 fc42 	bl	800c004 <vPortEnterCritical>
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a786:	b25b      	sxtb	r3, r3
 800a788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a78c:	d103      	bne.n	800a796 <vQueueWaitForMessageRestricted+0x2a>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a79c:	b25b      	sxtb	r3, r3
 800a79e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7a2:	d103      	bne.n	800a7ac <vQueueWaitForMessageRestricted+0x40>
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7ac:	f001 fc5a 	bl	800c064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d106      	bne.n	800a7c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	3324      	adds	r3, #36	; 0x24
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	68b9      	ldr	r1, [r7, #8]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fcc1 	bl	800b148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a7c6:	6978      	ldr	r0, [r7, #20]
 800a7c8:	f7ff ff26 	bl	800a618 <prvUnlockQueue>
	}
 800a7cc:	bf00      	nop
 800a7ce:	3718      	adds	r7, #24
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af04      	add	r7, sp, #16
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800a7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	623b      	str	r3, [r7, #32]
}
 800a7fa:	bf00      	nop
 800a7fc:	e7fe      	b.n	800a7fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10a      	bne.n	800a81a <xTaskCreateStatic+0x46>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	61fb      	str	r3, [r7, #28]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a81a:	235c      	movs	r3, #92	; 0x5c
 800a81c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2b5c      	cmp	r3, #92	; 0x5c
 800a822:	d00a      	beq.n	800a83a <xTaskCreateStatic+0x66>
	__asm volatile
 800a824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	61bb      	str	r3, [r7, #24]
}
 800a836:	bf00      	nop
 800a838:	e7fe      	b.n	800a838 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a83a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d01e      	beq.n	800a880 <xTaskCreateStatic+0xac>
 800a842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01b      	beq.n	800a880 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	2202      	movs	r2, #2
 800a856:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a85a:	2300      	movs	r3, #0
 800a85c:	9303      	str	r3, [sp, #12]
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	9302      	str	r3, [sp, #8]
 800a862:	f107 0314 	add.w	r3, r7, #20
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	68b9      	ldr	r1, [r7, #8]
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f000 f850 	bl	800a918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a87a:	f000 f8dd 	bl	800aa38 <prvAddNewTaskToReadyList>
 800a87e:	e001      	b.n	800a884 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a884:	697b      	ldr	r3, [r7, #20]
	}
 800a886:	4618      	mov	r0, r3
 800a888:	3728      	adds	r7, #40	; 0x28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b08c      	sub	sp, #48	; 0x30
 800a892:	af04      	add	r7, sp, #16
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	603b      	str	r3, [r7, #0]
 800a89a:	4613      	mov	r3, r2
 800a89c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a89e:	88fb      	ldrh	r3, [r7, #6]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fcd0 	bl	800c248 <pvPortMalloc>
 800a8a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00e      	beq.n	800a8ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8b0:	205c      	movs	r0, #92	; 0x5c
 800a8b2:	f001 fcc9 	bl	800c248 <pvPortMalloc>
 800a8b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a8c4:	e005      	b.n	800a8d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8c6:	6978      	ldr	r0, [r7, #20]
 800a8c8:	f001 fd8a 	bl	800c3e0 <vPortFree>
 800a8cc:	e001      	b.n	800a8d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d017      	beq.n	800a908 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8e0:	88fa      	ldrh	r2, [r7, #6]
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	9303      	str	r3, [sp, #12]
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	9302      	str	r3, [sp, #8]
 800a8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 f80e 	bl	800a918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8fc:	69f8      	ldr	r0, [r7, #28]
 800a8fe:	f000 f89b 	bl	800aa38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a902:	2301      	movs	r3, #1
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	e002      	b.n	800a90e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a90c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a90e:	69bb      	ldr	r3, [r7, #24]
	}
 800a910:	4618      	mov	r0, r3
 800a912:	3720      	adds	r7, #32
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b088      	sub	sp, #32
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	461a      	mov	r2, r3
 800a930:	21a5      	movs	r1, #165	; 0xa5
 800a932:	f001 feab 	bl	800c68c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a940:	3b01      	subs	r3, #1
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4413      	add	r3, r2
 800a946:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f023 0307 	bic.w	r3, r3, #7
 800a94e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	617b      	str	r3, [r7, #20]
}
 800a96c:	bf00      	nop
 800a96e:	e7fe      	b.n	800a96e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d01f      	beq.n	800a9b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a976:	2300      	movs	r3, #0
 800a978:	61fb      	str	r3, [r7, #28]
 800a97a:	e012      	b.n	800a9a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	4413      	add	r3, r2
 800a982:	7819      	ldrb	r1, [r3, #0]
 800a984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	4413      	add	r3, r2
 800a98a:	3334      	adds	r3, #52	; 0x34
 800a98c:	460a      	mov	r2, r1
 800a98e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	4413      	add	r3, r2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d006      	beq.n	800a9aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b0f      	cmp	r3, #15
 800a9a6:	d9e9      	bls.n	800a97c <prvInitialiseNewTask+0x64>
 800a9a8:	e000      	b.n	800a9ac <prvInitialiseNewTask+0x94>
			{
				break;
 800a9aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9b4:	e003      	b.n	800a9be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	2b37      	cmp	r3, #55	; 0x37
 800a9c2:	d901      	bls.n	800a9c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9c4:	2337      	movs	r3, #55	; 0x37
 800a9c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff f978 	bl	8009cd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e6:	3318      	adds	r3, #24
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff f973 	bl	8009cd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	2200      	movs	r2, #0
 800aa08:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	68f9      	ldr	r1, [r7, #12]
 800aa16:	69b8      	ldr	r0, [r7, #24]
 800aa18:	f001 f9c6 	bl	800bda8 <pxPortInitialiseStack>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa2e:	bf00      	nop
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa40:	f001 fae0 	bl	800c004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa44:	4b2d      	ldr	r3, [pc, #180]	; (800aafc <prvAddNewTaskToReadyList+0xc4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	4a2c      	ldr	r2, [pc, #176]	; (800aafc <prvAddNewTaskToReadyList+0xc4>)
 800aa4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa4e:	4b2c      	ldr	r3, [pc, #176]	; (800ab00 <prvAddNewTaskToReadyList+0xc8>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d109      	bne.n	800aa6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa56:	4a2a      	ldr	r2, [pc, #168]	; (800ab00 <prvAddNewTaskToReadyList+0xc8>)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa5c:	4b27      	ldr	r3, [pc, #156]	; (800aafc <prvAddNewTaskToReadyList+0xc4>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d110      	bne.n	800aa86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa64:	f000 fc9c 	bl	800b3a0 <prvInitialiseTaskLists>
 800aa68:	e00d      	b.n	800aa86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa6a:	4b26      	ldr	r3, [pc, #152]	; (800ab04 <prvAddNewTaskToReadyList+0xcc>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa72:	4b23      	ldr	r3, [pc, #140]	; (800ab00 <prvAddNewTaskToReadyList+0xc8>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d802      	bhi.n	800aa86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa80:	4a1f      	ldr	r2, [pc, #124]	; (800ab00 <prvAddNewTaskToReadyList+0xc8>)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa86:	4b20      	ldr	r3, [pc, #128]	; (800ab08 <prvAddNewTaskToReadyList+0xd0>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	4a1e      	ldr	r2, [pc, #120]	; (800ab08 <prvAddNewTaskToReadyList+0xd0>)
 800aa8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa90:	4b1d      	ldr	r3, [pc, #116]	; (800ab08 <prvAddNewTaskToReadyList+0xd0>)
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9c:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <prvAddNewTaskToReadyList+0xd4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d903      	bls.n	800aaac <prvAddNewTaskToReadyList+0x74>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa8:	4a18      	ldr	r2, [pc, #96]	; (800ab0c <prvAddNewTaskToReadyList+0xd4>)
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab0:	4613      	mov	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	4a15      	ldr	r2, [pc, #84]	; (800ab10 <prvAddNewTaskToReadyList+0xd8>)
 800aaba:	441a      	add	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7ff f913 	bl	8009cee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aac8:	f001 facc 	bl	800c064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <prvAddNewTaskToReadyList+0xcc>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00e      	beq.n	800aaf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aad4:	4b0a      	ldr	r3, [pc, #40]	; (800ab00 <prvAddNewTaskToReadyList+0xc8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aade:	429a      	cmp	r2, r3
 800aae0:	d207      	bcs.n	800aaf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aae2:	4b0c      	ldr	r3, [pc, #48]	; (800ab14 <prvAddNewTaskToReadyList+0xdc>)
 800aae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20000ce0 	.word	0x20000ce0
 800ab00:	2000080c 	.word	0x2000080c
 800ab04:	20000cec 	.word	0x20000cec
 800ab08:	20000cfc 	.word	0x20000cfc
 800ab0c:	20000ce8 	.word	0x20000ce8
 800ab10:	20000810 	.word	0x20000810
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08a      	sub	sp, #40	; 0x28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ab22:	2300      	movs	r3, #0
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	617b      	str	r3, [r7, #20]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <vTaskDelayUntil+0x46>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	613b      	str	r3, [r7, #16]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800ab5e:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <vTaskDelayUntil+0xf0>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <vTaskDelayUntil+0x64>
	__asm volatile
 800ab66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6a:	f383 8811 	msr	BASEPRI, r3
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	60fb      	str	r3, [r7, #12]
}
 800ab78:	bf00      	nop
 800ab7a:	e7fe      	b.n	800ab7a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ab7c:	f000 f8b0 	bl	800ace0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ab80:	4b22      	ldr	r3, [pc, #136]	; (800ac0c <vTaskDelayUntil+0xf4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	683a      	ldr	r2, [r7, #0]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6a3a      	ldr	r2, [r7, #32]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d20b      	bcs.n	800abb2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69fa      	ldr	r2, [r7, #28]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d211      	bcs.n	800abc8 <vTaskDelayUntil+0xb0>
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d90d      	bls.n	800abc8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800abac:	2301      	movs	r3, #1
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
 800abb0:	e00a      	b.n	800abc8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	69fa      	ldr	r2, [r7, #28]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d303      	bcc.n	800abc4 <vTaskDelayUntil+0xac>
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d901      	bls.n	800abc8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	69fa      	ldr	r2, [r7, #28]
 800abcc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d006      	beq.n	800abe2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800abd4:	69fa      	ldr	r2, [r7, #28]
 800abd6:	6a3b      	ldr	r3, [r7, #32]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fd41 	bl	800b664 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800abe2:	f000 f88b 	bl	800acfc <xTaskResumeAll>
 800abe6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d107      	bne.n	800abfe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800abee:	4b08      	ldr	r3, [pc, #32]	; (800ac10 <vTaskDelayUntil+0xf8>)
 800abf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abfe:	bf00      	nop
 800ac00:	3728      	adds	r7, #40	; 0x28
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000d08 	.word	0x20000d08
 800ac0c:	20000ce4 	.word	0x20000ce4
 800ac10:	e000ed04 	.word	0xe000ed04

0800ac14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac22:	463a      	mov	r2, r7
 800ac24:	1d39      	adds	r1, r7, #4
 800ac26:	f107 0308 	add.w	r3, r7, #8
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe febc 	bl	80099a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	9202      	str	r2, [sp, #8]
 800ac38:	9301      	str	r3, [sp, #4]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	2300      	movs	r3, #0
 800ac40:	460a      	mov	r2, r1
 800ac42:	4921      	ldr	r1, [pc, #132]	; (800acc8 <vTaskStartScheduler+0xb4>)
 800ac44:	4821      	ldr	r0, [pc, #132]	; (800accc <vTaskStartScheduler+0xb8>)
 800ac46:	f7ff fdc5 	bl	800a7d4 <xTaskCreateStatic>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	4a20      	ldr	r2, [pc, #128]	; (800acd0 <vTaskStartScheduler+0xbc>)
 800ac4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac50:	4b1f      	ldr	r3, [pc, #124]	; (800acd0 <vTaskStartScheduler+0xbc>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	617b      	str	r3, [r7, #20]
 800ac5c:	e001      	b.n	800ac62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d102      	bne.n	800ac6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac68:	f000 fd50 	bl	800b70c <xTimerCreateTimerTask>
 800ac6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d116      	bne.n	800aca2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	613b      	str	r3, [r7, #16]
}
 800ac86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac88:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <vTaskStartScheduler+0xc0>)
 800ac8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <vTaskStartScheduler+0xc4>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac96:	4b11      	ldr	r3, [pc, #68]	; (800acdc <vTaskStartScheduler+0xc8>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac9c:	f001 f910 	bl	800bec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aca0:	e00e      	b.n	800acc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aca8:	d10a      	bne.n	800acc0 <vTaskStartScheduler+0xac>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	60fb      	str	r3, [r7, #12]
}
 800acbc:	bf00      	nop
 800acbe:	e7fe      	b.n	800acbe <vTaskStartScheduler+0xaa>
}
 800acc0:	bf00      	nop
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	0800d840 	.word	0x0800d840
 800accc:	0800b371 	.word	0x0800b371
 800acd0:	20000d04 	.word	0x20000d04
 800acd4:	20000d00 	.word	0x20000d00
 800acd8:	20000cec 	.word	0x20000cec
 800acdc:	20000ce4 	.word	0x20000ce4

0800ace0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ace4:	4b04      	ldr	r3, [pc, #16]	; (800acf8 <vTaskSuspendAll+0x18>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3301      	adds	r3, #1
 800acea:	4a03      	ldr	r2, [pc, #12]	; (800acf8 <vTaskSuspendAll+0x18>)
 800acec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800acee:	bf00      	nop
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	20000d08 	.word	0x20000d08

0800acfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad0a:	4b42      	ldr	r3, [pc, #264]	; (800ae14 <xTaskResumeAll+0x118>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10a      	bne.n	800ad28 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	603b      	str	r3, [r7, #0]
}
 800ad24:	bf00      	nop
 800ad26:	e7fe      	b.n	800ad26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad28:	f001 f96c 	bl	800c004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad2c:	4b39      	ldr	r3, [pc, #228]	; (800ae14 <xTaskResumeAll+0x118>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	4a38      	ldr	r2, [pc, #224]	; (800ae14 <xTaskResumeAll+0x118>)
 800ad34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad36:	4b37      	ldr	r3, [pc, #220]	; (800ae14 <xTaskResumeAll+0x118>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d162      	bne.n	800ae04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad3e:	4b36      	ldr	r3, [pc, #216]	; (800ae18 <xTaskResumeAll+0x11c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d05e      	beq.n	800ae04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad46:	e02f      	b.n	800ada8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad48:	4b34      	ldr	r3, [pc, #208]	; (800ae1c <xTaskResumeAll+0x120>)
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3318      	adds	r3, #24
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff f827 	bl	8009da8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff f822 	bl	8009da8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad68:	4b2d      	ldr	r3, [pc, #180]	; (800ae20 <xTaskResumeAll+0x124>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d903      	bls.n	800ad78 <xTaskResumeAll+0x7c>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad74:	4a2a      	ldr	r2, [pc, #168]	; (800ae20 <xTaskResumeAll+0x124>)
 800ad76:	6013      	str	r3, [r2, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4a27      	ldr	r2, [pc, #156]	; (800ae24 <xTaskResumeAll+0x128>)
 800ad86:	441a      	add	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4610      	mov	r0, r2
 800ad90:	f7fe ffad 	bl	8009cee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad98:	4b23      	ldr	r3, [pc, #140]	; (800ae28 <xTaskResumeAll+0x12c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d302      	bcc.n	800ada8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ada2:	4b22      	ldr	r3, [pc, #136]	; (800ae2c <xTaskResumeAll+0x130>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ada8:	4b1c      	ldr	r3, [pc, #112]	; (800ae1c <xTaskResumeAll+0x120>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1cb      	bne.n	800ad48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adb6:	f000 fb91 	bl	800b4dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800adba:	4b1d      	ldr	r3, [pc, #116]	; (800ae30 <xTaskResumeAll+0x134>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d010      	beq.n	800ade8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adc6:	f000 f847 	bl	800ae58 <xTaskIncrementTick>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800add0:	4b16      	ldr	r3, [pc, #88]	; (800ae2c <xTaskResumeAll+0x130>)
 800add2:	2201      	movs	r2, #1
 800add4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3b01      	subs	r3, #1
 800adda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1f1      	bne.n	800adc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ade2:	4b13      	ldr	r3, [pc, #76]	; (800ae30 <xTaskResumeAll+0x134>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ade8:	4b10      	ldr	r3, [pc, #64]	; (800ae2c <xTaskResumeAll+0x130>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d009      	beq.n	800ae04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adf0:	2301      	movs	r3, #1
 800adf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adf4:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <xTaskResumeAll+0x138>)
 800adf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae04:	f001 f92e 	bl	800c064 <vPortExitCritical>

	return xAlreadyYielded;
 800ae08:	68bb      	ldr	r3, [r7, #8]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000d08 	.word	0x20000d08
 800ae18:	20000ce0 	.word	0x20000ce0
 800ae1c:	20000ca0 	.word	0x20000ca0
 800ae20:	20000ce8 	.word	0x20000ce8
 800ae24:	20000810 	.word	0x20000810
 800ae28:	2000080c 	.word	0x2000080c
 800ae2c:	20000cf4 	.word	0x20000cf4
 800ae30:	20000cf0 	.word	0x20000cf0
 800ae34:	e000ed04 	.word	0xe000ed04

0800ae38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <xTaskGetTickCount+0x1c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae44:	687b      	ldr	r3, [r7, #4]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	20000ce4 	.word	0x20000ce4

0800ae58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae62:	4b4f      	ldr	r3, [pc, #316]	; (800afa0 <xTaskIncrementTick+0x148>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f040 808f 	bne.w	800af8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae6c:	4b4d      	ldr	r3, [pc, #308]	; (800afa4 <xTaskIncrementTick+0x14c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3301      	adds	r3, #1
 800ae72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae74:	4a4b      	ldr	r2, [pc, #300]	; (800afa4 <xTaskIncrementTick+0x14c>)
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d120      	bne.n	800aec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ae80:	4b49      	ldr	r3, [pc, #292]	; (800afa8 <xTaskIncrementTick+0x150>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00a      	beq.n	800aea0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	603b      	str	r3, [r7, #0]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <xTaskIncrementTick+0x46>
 800aea0:	4b41      	ldr	r3, [pc, #260]	; (800afa8 <xTaskIncrementTick+0x150>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]
 800aea6:	4b41      	ldr	r3, [pc, #260]	; (800afac <xTaskIncrementTick+0x154>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a3f      	ldr	r2, [pc, #252]	; (800afa8 <xTaskIncrementTick+0x150>)
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	4a3f      	ldr	r2, [pc, #252]	; (800afac <xTaskIncrementTick+0x154>)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	4b3e      	ldr	r3, [pc, #248]	; (800afb0 <xTaskIncrementTick+0x158>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	4a3d      	ldr	r2, [pc, #244]	; (800afb0 <xTaskIncrementTick+0x158>)
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	f000 fb0d 	bl	800b4dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aec2:	4b3c      	ldr	r3, [pc, #240]	; (800afb4 <xTaskIncrementTick+0x15c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d349      	bcc.n	800af60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aecc:	4b36      	ldr	r3, [pc, #216]	; (800afa8 <xTaskIncrementTick+0x150>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d104      	bne.n	800aee0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aed6:	4b37      	ldr	r3, [pc, #220]	; (800afb4 <xTaskIncrementTick+0x15c>)
 800aed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aedc:	601a      	str	r2, [r3, #0]
					break;
 800aede:	e03f      	b.n	800af60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee0:	4b31      	ldr	r3, [pc, #196]	; (800afa8 <xTaskIncrementTick+0x150>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d203      	bcs.n	800af00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aef8:	4a2e      	ldr	r2, [pc, #184]	; (800afb4 <xTaskIncrementTick+0x15c>)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aefe:	e02f      	b.n	800af60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	3304      	adds	r3, #4
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe ff4f 	bl	8009da8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	3318      	adds	r3, #24
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe ff46 	bl	8009da8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af20:	4b25      	ldr	r3, [pc, #148]	; (800afb8 <xTaskIncrementTick+0x160>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	429a      	cmp	r2, r3
 800af26:	d903      	bls.n	800af30 <xTaskIncrementTick+0xd8>
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	4a22      	ldr	r2, [pc, #136]	; (800afb8 <xTaskIncrementTick+0x160>)
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4a1f      	ldr	r2, [pc, #124]	; (800afbc <xTaskIncrementTick+0x164>)
 800af3e:	441a      	add	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3304      	adds	r3, #4
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7fe fed1 	bl	8009cee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4b1b      	ldr	r3, [pc, #108]	; (800afc0 <xTaskIncrementTick+0x168>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	429a      	cmp	r2, r3
 800af58:	d3b8      	bcc.n	800aecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800af5a:	2301      	movs	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af5e:	e7b5      	b.n	800aecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af60:	4b17      	ldr	r3, [pc, #92]	; (800afc0 <xTaskIncrementTick+0x168>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af66:	4915      	ldr	r1, [pc, #84]	; (800afbc <xTaskIncrementTick+0x164>)
 800af68:	4613      	mov	r3, r2
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4413      	add	r3, r2
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	440b      	add	r3, r1
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d901      	bls.n	800af7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800af7c:	4b11      	ldr	r3, [pc, #68]	; (800afc4 <xTaskIncrementTick+0x16c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	e004      	b.n	800af94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800af8a:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <xTaskIncrementTick+0x170>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3301      	adds	r3, #1
 800af90:	4a0d      	ldr	r2, [pc, #52]	; (800afc8 <xTaskIncrementTick+0x170>)
 800af92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800af94:	697b      	ldr	r3, [r7, #20]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000d08 	.word	0x20000d08
 800afa4:	20000ce4 	.word	0x20000ce4
 800afa8:	20000c98 	.word	0x20000c98
 800afac:	20000c9c 	.word	0x20000c9c
 800afb0:	20000cf8 	.word	0x20000cf8
 800afb4:	20000d00 	.word	0x20000d00
 800afb8:	20000ce8 	.word	0x20000ce8
 800afbc:	20000810 	.word	0x20000810
 800afc0:	2000080c 	.word	0x2000080c
 800afc4:	20000cf4 	.word	0x20000cf4
 800afc8:	20000cf0 	.word	0x20000cf0

0800afcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800afd2:	4b28      	ldr	r3, [pc, #160]	; (800b074 <vTaskSwitchContext+0xa8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800afda:	4b27      	ldr	r3, [pc, #156]	; (800b078 <vTaskSwitchContext+0xac>)
 800afdc:	2201      	movs	r2, #1
 800afde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800afe0:	e041      	b.n	800b066 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800afe2:	4b25      	ldr	r3, [pc, #148]	; (800b078 <vTaskSwitchContext+0xac>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afe8:	4b24      	ldr	r3, [pc, #144]	; (800b07c <vTaskSwitchContext+0xb0>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	60fb      	str	r3, [r7, #12]
 800afee:	e010      	b.n	800b012 <vTaskSwitchContext+0x46>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <vTaskSwitchContext+0x40>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	607b      	str	r3, [r7, #4]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <vTaskSwitchContext+0x3e>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3b01      	subs	r3, #1
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	491b      	ldr	r1, [pc, #108]	; (800b080 <vTaskSwitchContext+0xb4>)
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	440b      	add	r3, r1
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0e4      	beq.n	800aff0 <vTaskSwitchContext+0x24>
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4a13      	ldr	r2, [pc, #76]	; (800b080 <vTaskSwitchContext+0xb4>)
 800b032:	4413      	add	r3, r2
 800b034:	60bb      	str	r3, [r7, #8]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	605a      	str	r2, [r3, #4]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	685a      	ldr	r2, [r3, #4]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	3308      	adds	r3, #8
 800b048:	429a      	cmp	r2, r3
 800b04a:	d104      	bne.n	800b056 <vTaskSwitchContext+0x8a>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	605a      	str	r2, [r3, #4]
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	4a09      	ldr	r2, [pc, #36]	; (800b084 <vTaskSwitchContext+0xb8>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	4a06      	ldr	r2, [pc, #24]	; (800b07c <vTaskSwitchContext+0xb0>)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6013      	str	r3, [r2, #0]
}
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20000d08 	.word	0x20000d08
 800b078:	20000cf4 	.word	0x20000cf4
 800b07c:	20000ce8 	.word	0x20000ce8
 800b080:	20000810 	.word	0x20000810
 800b084:	2000080c 	.word	0x2000080c

0800b088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	60fb      	str	r3, [r7, #12]
}
 800b0aa:	bf00      	nop
 800b0ac:	e7fe      	b.n	800b0ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ae:	4b07      	ldr	r3, [pc, #28]	; (800b0cc <vTaskPlaceOnEventList+0x44>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3318      	adds	r3, #24
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7fe fe3d 	bl	8009d36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0bc:	2101      	movs	r1, #1
 800b0be:	6838      	ldr	r0, [r7, #0]
 800b0c0:	f000 fad0 	bl	800b664 <prvAddCurrentTaskToDelayedList>
}
 800b0c4:	bf00      	nop
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	2000080c 	.word	0x2000080c

0800b0d0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	617b      	str	r3, [r7, #20]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b0f8:	4b11      	ldr	r3, [pc, #68]	; (800b140 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b120:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b122:	4b08      	ldr	r3, [pc, #32]	; (800b144 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3318      	adds	r3, #24
 800b128:	4619      	mov	r1, r3
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f7fe fddf 	bl	8009cee <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b130:	2101      	movs	r1, #1
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fa96 	bl	800b664 <prvAddCurrentTaskToDelayedList>
}
 800b138:	bf00      	nop
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	20000d08 	.word	0x20000d08
 800b144:	2000080c 	.word	0x2000080c

0800b148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	617b      	str	r3, [r7, #20]
}
 800b16c:	bf00      	nop
 800b16e:	e7fe      	b.n	800b16e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b170:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <vTaskPlaceOnEventListRestricted+0x54>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3318      	adds	r3, #24
 800b176:	4619      	mov	r1, r3
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7fe fdb8 	bl	8009cee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b188:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	68b8      	ldr	r0, [r7, #8]
 800b18e:	f000 fa69 	bl	800b664 <prvAddCurrentTaskToDelayedList>
	}
 800b192:	bf00      	nop
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	2000080c 	.word	0x2000080c

0800b1a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10a      	bne.n	800b1cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60fb      	str	r3, [r7, #12]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	3318      	adds	r3, #24
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe fde9 	bl	8009da8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1d6:	4b1e      	ldr	r3, [pc, #120]	; (800b250 <xTaskRemoveFromEventList+0xb0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d11d      	bne.n	800b21a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe fde0 	bl	8009da8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ec:	4b19      	ldr	r3, [pc, #100]	; (800b254 <xTaskRemoveFromEventList+0xb4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d903      	bls.n	800b1fc <xTaskRemoveFromEventList+0x5c>
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	4a16      	ldr	r2, [pc, #88]	; (800b254 <xTaskRemoveFromEventList+0xb4>)
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b200:	4613      	mov	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4a13      	ldr	r2, [pc, #76]	; (800b258 <xTaskRemoveFromEventList+0xb8>)
 800b20a:	441a      	add	r2, r3
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3304      	adds	r3, #4
 800b210:	4619      	mov	r1, r3
 800b212:	4610      	mov	r0, r2
 800b214:	f7fe fd6b 	bl	8009cee <vListInsertEnd>
 800b218:	e005      	b.n	800b226 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	3318      	adds	r3, #24
 800b21e:	4619      	mov	r1, r3
 800b220:	480e      	ldr	r0, [pc, #56]	; (800b25c <xTaskRemoveFromEventList+0xbc>)
 800b222:	f7fe fd64 	bl	8009cee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22a:	4b0d      	ldr	r3, [pc, #52]	; (800b260 <xTaskRemoveFromEventList+0xc0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b230:	429a      	cmp	r2, r3
 800b232:	d905      	bls.n	800b240 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b234:	2301      	movs	r3, #1
 800b236:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b238:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <xTaskRemoveFromEventList+0xc4>)
 800b23a:	2201      	movs	r2, #1
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	e001      	b.n	800b244 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b244:	697b      	ldr	r3, [r7, #20]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20000d08 	.word	0x20000d08
 800b254:	20000ce8 	.word	0x20000ce8
 800b258:	20000810 	.word	0x20000810
 800b25c:	20000ca0 	.word	0x20000ca0
 800b260:	2000080c 	.word	0x2000080c
 800b264:	20000cf4 	.word	0x20000cf4

0800b268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b270:	4b06      	ldr	r3, [pc, #24]	; (800b28c <vTaskInternalSetTimeOutState+0x24>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b278:	4b05      	ldr	r3, [pc, #20]	; (800b290 <vTaskInternalSetTimeOutState+0x28>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	605a      	str	r2, [r3, #4]
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	20000cf8 	.word	0x20000cf8
 800b290:	20000ce4 	.word	0x20000ce4

0800b294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10a      	bne.n	800b2ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	613b      	str	r3, [r7, #16]
}
 800b2b6:	bf00      	nop
 800b2b8:	e7fe      	b.n	800b2b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10a      	bne.n	800b2d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	60fb      	str	r3, [r7, #12]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2d6:	f000 fe95 	bl	800c004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2da:	4b1d      	ldr	r3, [pc, #116]	; (800b350 <xTaskCheckForTimeOut+0xbc>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2f2:	d102      	bne.n	800b2fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61fb      	str	r3, [r7, #28]
 800b2f8:	e023      	b.n	800b342 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	4b15      	ldr	r3, [pc, #84]	; (800b354 <xTaskCheckForTimeOut+0xc0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d007      	beq.n	800b316 <xTaskCheckForTimeOut+0x82>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	69ba      	ldr	r2, [r7, #24]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d302      	bcc.n	800b316 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b310:	2301      	movs	r3, #1
 800b312:	61fb      	str	r3, [r7, #28]
 800b314:	e015      	b.n	800b342 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d20b      	bcs.n	800b338 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	1ad2      	subs	r2, r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff ff9b 	bl	800b268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b332:	2300      	movs	r3, #0
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	e004      	b.n	800b342 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b33e:	2301      	movs	r3, #1
 800b340:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b342:	f000 fe8f 	bl	800c064 <vPortExitCritical>

	return xReturn;
 800b346:	69fb      	ldr	r3, [r7, #28]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3720      	adds	r7, #32
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20000ce4 	.word	0x20000ce4
 800b354:	20000cf8 	.word	0x20000cf8

0800b358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b358:	b480      	push	{r7}
 800b35a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b35c:	4b03      	ldr	r3, [pc, #12]	; (800b36c <vTaskMissedYield+0x14>)
 800b35e:	2201      	movs	r2, #1
 800b360:	601a      	str	r2, [r3, #0]
}
 800b362:	bf00      	nop
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	20000cf4 	.word	0x20000cf4

0800b370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b378:	f000 f852 	bl	800b420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b37c:	4b06      	ldr	r3, [pc, #24]	; (800b398 <prvIdleTask+0x28>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d9f9      	bls.n	800b378 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <prvIdleTask+0x2c>)
 800b386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b394:	e7f0      	b.n	800b378 <prvIdleTask+0x8>
 800b396:	bf00      	nop
 800b398:	20000810 	.word	0x20000810
 800b39c:	e000ed04 	.word	0xe000ed04

0800b3a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	607b      	str	r3, [r7, #4]
 800b3aa:	e00c      	b.n	800b3c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4a12      	ldr	r2, [pc, #72]	; (800b400 <prvInitialiseTaskLists+0x60>)
 800b3b8:	4413      	add	r3, r2
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe fc6a 	bl	8009c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b37      	cmp	r3, #55	; 0x37
 800b3ca:	d9ef      	bls.n	800b3ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3cc:	480d      	ldr	r0, [pc, #52]	; (800b404 <prvInitialiseTaskLists+0x64>)
 800b3ce:	f7fe fc61 	bl	8009c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3d2:	480d      	ldr	r0, [pc, #52]	; (800b408 <prvInitialiseTaskLists+0x68>)
 800b3d4:	f7fe fc5e 	bl	8009c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3d8:	480c      	ldr	r0, [pc, #48]	; (800b40c <prvInitialiseTaskLists+0x6c>)
 800b3da:	f7fe fc5b 	bl	8009c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3de:	480c      	ldr	r0, [pc, #48]	; (800b410 <prvInitialiseTaskLists+0x70>)
 800b3e0:	f7fe fc58 	bl	8009c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3e4:	480b      	ldr	r0, [pc, #44]	; (800b414 <prvInitialiseTaskLists+0x74>)
 800b3e6:	f7fe fc55 	bl	8009c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3ea:	4b0b      	ldr	r3, [pc, #44]	; (800b418 <prvInitialiseTaskLists+0x78>)
 800b3ec:	4a05      	ldr	r2, [pc, #20]	; (800b404 <prvInitialiseTaskLists+0x64>)
 800b3ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <prvInitialiseTaskLists+0x7c>)
 800b3f2:	4a05      	ldr	r2, [pc, #20]	; (800b408 <prvInitialiseTaskLists+0x68>)
 800b3f4:	601a      	str	r2, [r3, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	20000810 	.word	0x20000810
 800b404:	20000c70 	.word	0x20000c70
 800b408:	20000c84 	.word	0x20000c84
 800b40c:	20000ca0 	.word	0x20000ca0
 800b410:	20000cb4 	.word	0x20000cb4
 800b414:	20000ccc 	.word	0x20000ccc
 800b418:	20000c98 	.word	0x20000c98
 800b41c:	20000c9c 	.word	0x20000c9c

0800b420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b426:	e019      	b.n	800b45c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b428:	f000 fdec 	bl	800c004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42c:	4b10      	ldr	r3, [pc, #64]	; (800b470 <prvCheckTasksWaitingTermination+0x50>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3304      	adds	r3, #4
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fcb5 	bl	8009da8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b43e:	4b0d      	ldr	r3, [pc, #52]	; (800b474 <prvCheckTasksWaitingTermination+0x54>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	3b01      	subs	r3, #1
 800b444:	4a0b      	ldr	r2, [pc, #44]	; (800b474 <prvCheckTasksWaitingTermination+0x54>)
 800b446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b448:	4b0b      	ldr	r3, [pc, #44]	; (800b478 <prvCheckTasksWaitingTermination+0x58>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	4a0a      	ldr	r2, [pc, #40]	; (800b478 <prvCheckTasksWaitingTermination+0x58>)
 800b450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b452:	f000 fe07 	bl	800c064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f810 	bl	800b47c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <prvCheckTasksWaitingTermination+0x58>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e1      	bne.n	800b428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b464:	bf00      	nop
 800b466:	bf00      	nop
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000cb4 	.word	0x20000cb4
 800b474:	20000ce0 	.word	0x20000ce0
 800b478:	20000cc8 	.word	0x20000cc8

0800b47c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d108      	bne.n	800b4a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b492:	4618      	mov	r0, r3
 800b494:	f000 ffa4 	bl	800c3e0 <vPortFree>
				vPortFree( pxTCB );
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 ffa1 	bl	800c3e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b49e:	e018      	b.n	800b4d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d103      	bne.n	800b4b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 ff98 	bl	800c3e0 <vPortFree>
	}
 800b4b0:	e00f      	b.n	800b4d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d00a      	beq.n	800b4d2 <prvDeleteTCB+0x56>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	60fb      	str	r3, [r7, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <prvDeleteTCB+0x54>
	}
 800b4d2:	bf00      	nop
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <prvResetNextTaskUnblockTime+0x38>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <prvResetNextTaskUnblockTime+0x3c>)
 800b4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4f4:	e008      	b.n	800b508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <prvResetNextTaskUnblockTime+0x38>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	4a04      	ldr	r2, [pc, #16]	; (800b518 <prvResetNextTaskUnblockTime+0x3c>)
 800b506:	6013      	str	r3, [r2, #0]
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	20000c98 	.word	0x20000c98
 800b518:	20000d00 	.word	0x20000d00

0800b51c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b522:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <xTaskGetSchedulerState+0x34>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b52a:	2301      	movs	r3, #1
 800b52c:	607b      	str	r3, [r7, #4]
 800b52e:	e008      	b.n	800b542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b530:	4b08      	ldr	r3, [pc, #32]	; (800b554 <xTaskGetSchedulerState+0x38>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d102      	bne.n	800b53e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b538:	2302      	movs	r3, #2
 800b53a:	607b      	str	r3, [r7, #4]
 800b53c:	e001      	b.n	800b542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b53e:	2300      	movs	r3, #0
 800b540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b542:	687b      	ldr	r3, [r7, #4]
	}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	20000cec 	.word	0x20000cec
 800b554:	20000d08 	.word	0x20000d08

0800b558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b564:	2300      	movs	r3, #0
 800b566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d056      	beq.n	800b61c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b56e:	4b2e      	ldr	r3, [pc, #184]	; (800b628 <xTaskPriorityDisinherit+0xd0>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	429a      	cmp	r2, r3
 800b576:	d00a      	beq.n	800b58e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	60fb      	str	r3, [r7, #12]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	60bb      	str	r3, [r7, #8]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b0:	1e5a      	subs	r2, r3, #1
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d02c      	beq.n	800b61c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d128      	bne.n	800b61c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7fe fbea 	bl	8009da8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <xTaskPriorityDisinherit+0xd4>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <xTaskPriorityDisinherit+0xa4>
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	4a0c      	ldr	r2, [pc, #48]	; (800b62c <xTaskPriorityDisinherit+0xd4>)
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b600:	4613      	mov	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4413      	add	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4a09      	ldr	r2, [pc, #36]	; (800b630 <xTaskPriorityDisinherit+0xd8>)
 800b60a:	441a      	add	r2, r3
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	3304      	adds	r3, #4
 800b610:	4619      	mov	r1, r3
 800b612:	4610      	mov	r0, r2
 800b614:	f7fe fb6b 	bl	8009cee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b618:	2301      	movs	r3, #1
 800b61a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b61c:	697b      	ldr	r3, [r7, #20]
	}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	2000080c 	.word	0x2000080c
 800b62c:	20000ce8 	.word	0x20000ce8
 800b630:	20000810 	.word	0x20000810

0800b634 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <uxTaskResetEventItemValue+0x2c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b642:	4b07      	ldr	r3, [pc, #28]	; (800b660 <uxTaskResetEventItemValue+0x2c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <uxTaskResetEventItemValue+0x2c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b650:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800b652:	687b      	ldr	r3, [r7, #4]
}
 800b654:	4618      	mov	r0, r3
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	2000080c 	.word	0x2000080c

0800b664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b674:	4b20      	ldr	r3, [pc, #128]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3304      	adds	r3, #4
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe fb94 	bl	8009da8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b686:	d10a      	bne.n	800b69e <prvAddCurrentTaskToDelayedList+0x3a>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d007      	beq.n	800b69e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b68e:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3304      	adds	r3, #4
 800b694:	4619      	mov	r1, r3
 800b696:	4819      	ldr	r0, [pc, #100]	; (800b6fc <prvAddCurrentTaskToDelayedList+0x98>)
 800b698:	f7fe fb29 	bl	8009cee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b69c:	e026      	b.n	800b6ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6a6:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d209      	bcs.n	800b6ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6b6:	4b12      	ldr	r3, [pc, #72]	; (800b700 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	f7fe fb37 	bl	8009d36 <vListInsert>
}
 800b6c8:	e010      	b.n	800b6ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ca:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fe fb2d 	bl	8009d36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b6dc:	4b0a      	ldr	r3, [pc, #40]	; (800b708 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d202      	bcs.n	800b6ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b6e6:	4a08      	ldr	r2, [pc, #32]	; (800b708 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	6013      	str	r3, [r2, #0]
}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20000ce4 	.word	0x20000ce4
 800b6f8:	2000080c 	.word	0x2000080c
 800b6fc:	20000ccc 	.word	0x20000ccc
 800b700:	20000c9c 	.word	0x20000c9c
 800b704:	20000c98 	.word	0x20000c98
 800b708:	20000d00 	.word	0x20000d00

0800b70c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b08a      	sub	sp, #40	; 0x28
 800b710:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b716:	f000 fb07 	bl	800bd28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b71a:	4b1c      	ldr	r3, [pc, #112]	; (800b78c <xTimerCreateTimerTask+0x80>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d021      	beq.n	800b766 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b72a:	1d3a      	adds	r2, r7, #4
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	f107 030c 	add.w	r3, r7, #12
 800b734:	4618      	mov	r0, r3
 800b736:	f7fe f951 	bl	80099dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	9202      	str	r2, [sp, #8]
 800b742:	9301      	str	r3, [sp, #4]
 800b744:	2302      	movs	r3, #2
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	2300      	movs	r3, #0
 800b74a:	460a      	mov	r2, r1
 800b74c:	4910      	ldr	r1, [pc, #64]	; (800b790 <xTimerCreateTimerTask+0x84>)
 800b74e:	4811      	ldr	r0, [pc, #68]	; (800b794 <xTimerCreateTimerTask+0x88>)
 800b750:	f7ff f840 	bl	800a7d4 <xTaskCreateStatic>
 800b754:	4603      	mov	r3, r0
 800b756:	4a10      	ldr	r2, [pc, #64]	; (800b798 <xTimerCreateTimerTask+0x8c>)
 800b758:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b75a:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <xTimerCreateTimerTask+0x8c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b762:	2301      	movs	r3, #1
 800b764:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10a      	bne.n	800b782 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	613b      	str	r3, [r7, #16]
}
 800b77e:	bf00      	nop
 800b780:	e7fe      	b.n	800b780 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b782:	697b      	ldr	r3, [r7, #20]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20000d3c 	.word	0x20000d3c
 800b790:	0800d848 	.word	0x0800d848
 800b794:	0800b8d1 	.word	0x0800b8d1
 800b798:	20000d40 	.word	0x20000d40

0800b79c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08a      	sub	sp, #40	; 0x28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b7ca:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <xTimerGenericCommand+0x98>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d02a      	beq.n	800b828 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	2b05      	cmp	r3, #5
 800b7e2:	dc18      	bgt.n	800b816 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b7e4:	f7ff fe9a 	bl	800b51c <xTaskGetSchedulerState>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d109      	bne.n	800b802 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7ee:	4b11      	ldr	r3, [pc, #68]	; (800b834 <xTimerGenericCommand+0x98>)
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	f107 0110 	add.w	r1, r7, #16
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7fa:	f7fe fc03 	bl	800a004 <xQueueGenericSend>
 800b7fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b800:	e012      	b.n	800b828 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <xTimerGenericCommand+0x98>)
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	f107 0110 	add.w	r1, r7, #16
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	f7fe fbf9 	bl	800a004 <xQueueGenericSend>
 800b812:	6278      	str	r0, [r7, #36]	; 0x24
 800b814:	e008      	b.n	800b828 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b816:	4b07      	ldr	r3, [pc, #28]	; (800b834 <xTimerGenericCommand+0x98>)
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	f107 0110 	add.w	r1, r7, #16
 800b81e:	2300      	movs	r3, #0
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	f7fe fced 	bl	800a200 <xQueueGenericSendFromISR>
 800b826:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3728      	adds	r7, #40	; 0x28
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20000d3c 	.word	0x20000d3c

0800b838 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af02      	add	r7, sp, #8
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b842:	4b22      	ldr	r3, [pc, #136]	; (800b8cc <prvProcessExpiredTimer+0x94>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	3304      	adds	r3, #4
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe faa9 	bl	8009da8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d022      	beq.n	800b8aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	699a      	ldr	r2, [r3, #24]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	18d1      	adds	r1, r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	6978      	ldr	r0, [r7, #20]
 800b872:	f000 f8d1 	bl	800ba18 <prvInsertTimerInActiveList>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d01f      	beq.n	800b8bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b87c:	2300      	movs	r3, #0
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	2300      	movs	r3, #0
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	2100      	movs	r1, #0
 800b886:	6978      	ldr	r0, [r7, #20]
 800b888:	f7ff ff88 	bl	800b79c <xTimerGenericCommand>
 800b88c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d113      	bne.n	800b8bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	60fb      	str	r3, [r7, #12]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b0:	f023 0301 	bic.w	r3, r3, #1
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	6978      	ldr	r0, [r7, #20]
 800b8c2:	4798      	blx	r3
}
 800b8c4:	bf00      	nop
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20000d34 	.word	0x20000d34

0800b8d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 f857 	bl	800b990 <prvGetNextExpireTime>
 800b8e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 f803 	bl	800b8f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b8ee:	f000 f8d5 	bl	800ba9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8f2:	e7f1      	b.n	800b8d8 <prvTimerTask+0x8>

0800b8f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8fe:	f7ff f9ef 	bl	800ace0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b902:	f107 0308 	add.w	r3, r7, #8
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f866 	bl	800b9d8 <prvSampleTimeNow>
 800b90c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d130      	bne.n	800b976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <prvProcessTimerOrBlockTask+0x3c>
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d806      	bhi.n	800b930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b922:	f7ff f9eb 	bl	800acfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f7ff ff85 	bl	800b838 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b92e:	e024      	b.n	800b97a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b936:	4b13      	ldr	r3, [pc, #76]	; (800b984 <prvProcessTimerOrBlockTask+0x90>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <prvProcessTimerOrBlockTask+0x50>
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <prvProcessTimerOrBlockTask+0x52>
 800b944:	2300      	movs	r3, #0
 800b946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b948:	4b0f      	ldr	r3, [pc, #60]	; (800b988 <prvProcessTimerOrBlockTask+0x94>)
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	4619      	mov	r1, r3
 800b956:	f7fe ff09 	bl	800a76c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b95a:	f7ff f9cf 	bl	800acfc <xTaskResumeAll>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b964:	4b09      	ldr	r3, [pc, #36]	; (800b98c <prvProcessTimerOrBlockTask+0x98>)
 800b966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	f3bf 8f6f 	isb	sy
}
 800b974:	e001      	b.n	800b97a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b976:	f7ff f9c1 	bl	800acfc <xTaskResumeAll>
}
 800b97a:	bf00      	nop
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	20000d38 	.word	0x20000d38
 800b988:	20000d3c 	.word	0x20000d3c
 800b98c:	e000ed04 	.word	0xe000ed04

0800b990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b998:	4b0e      	ldr	r3, [pc, #56]	; (800b9d4 <prvGetNextExpireTime+0x44>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <prvGetNextExpireTime+0x16>
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	e000      	b.n	800b9a8 <prvGetNextExpireTime+0x18>
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9b4:	4b07      	ldr	r3, [pc, #28]	; (800b9d4 <prvGetNextExpireTime+0x44>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e001      	b.n	800b9c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	20000d34 	.word	0x20000d34

0800b9d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b9e0:	f7ff fa2a 	bl	800ae38 <xTaskGetTickCount>
 800b9e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <prvSampleTimeNow+0x3c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d205      	bcs.n	800b9fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b9f0:	f000 f936 	bl	800bc60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	e002      	b.n	800ba02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba02:	4a04      	ldr	r2, [pc, #16]	; (800ba14 <prvSampleTimeNow+0x3c>)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba08:	68fb      	ldr	r3, [r7, #12]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	20000d44 	.word	0x20000d44

0800ba18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba26:	2300      	movs	r3, #0
 800ba28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d812      	bhi.n	800ba64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	1ad2      	subs	r2, r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d302      	bcc.n	800ba52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]
 800ba50:	e01b      	b.n	800ba8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <prvInsertTimerInActiveList+0x7c>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fe f96a 	bl	8009d36 <vListInsert>
 800ba62:	e012      	b.n	800ba8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d206      	bcs.n	800ba7a <prvInsertTimerInActiveList+0x62>
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d302      	bcc.n	800ba7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
 800ba78:	e007      	b.n	800ba8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba7a:	4b07      	ldr	r3, [pc, #28]	; (800ba98 <prvInsertTimerInActiveList+0x80>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7fe f956 	bl	8009d36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba8a:	697b      	ldr	r3, [r7, #20]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20000d38 	.word	0x20000d38
 800ba98:	20000d34 	.word	0x20000d34

0800ba9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08e      	sub	sp, #56	; 0x38
 800baa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baa2:	e0ca      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da18      	bge.n	800badc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800baaa:	1d3b      	adds	r3, r7, #4
 800baac:	3304      	adds	r3, #4
 800baae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10a      	bne.n	800bacc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	61fb      	str	r3, [r7, #28]
}
 800bac8:	bf00      	nop
 800baca:	e7fe      	b.n	800baca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad2:	6850      	ldr	r0, [r2, #4]
 800bad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad6:	6892      	ldr	r2, [r2, #8]
 800bad8:	4611      	mov	r1, r2
 800bada:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	f2c0 80aa 	blt.w	800bc38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d004      	beq.n	800bafa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	3304      	adds	r3, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe f957 	bl	8009da8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bafa:	463b      	mov	r3, r7
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff ff6b 	bl	800b9d8 <prvSampleTimeNow>
 800bb02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	f200 8097 	bhi.w	800bc3a <prvProcessReceivedCommands+0x19e>
 800bb0c:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <prvProcessReceivedCommands+0x78>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb3d 	.word	0x0800bb3d
 800bb18:	0800bb3d 	.word	0x0800bb3d
 800bb1c:	0800bb3d 	.word	0x0800bb3d
 800bb20:	0800bbb1 	.word	0x0800bbb1
 800bb24:	0800bbc5 	.word	0x0800bbc5
 800bb28:	0800bc0f 	.word	0x0800bc0f
 800bb2c:	0800bb3d 	.word	0x0800bb3d
 800bb30:	0800bb3d 	.word	0x0800bb3d
 800bb34:	0800bbb1 	.word	0x0800bbb1
 800bb38:	0800bbc5 	.word	0x0800bbc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb42:	f043 0301 	orr.w	r3, r3, #1
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	18d1      	adds	r1, r2, r3
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb5c:	f7ff ff5c 	bl	800ba18 <prvInsertTimerInActiveList>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d069      	beq.n	800bc3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d05e      	beq.n	800bc3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	441a      	add	r2, r3
 800bb84:	2300      	movs	r3, #0
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb8e:	f7ff fe05 	bl	800b79c <xTimerGenericCommand>
 800bb92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d14f      	bne.n	800bc3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	61bb      	str	r3, [r7, #24]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbb6:	f023 0301 	bic.w	r3, r3, #1
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bbc2:	e03a      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbca:	f043 0301 	orr.w	r3, r3, #1
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10a      	bne.n	800bbfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	617b      	str	r3, [r7, #20]
}
 800bbf6:	bf00      	nop
 800bbf8:	e7fe      	b.n	800bbf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	699a      	ldr	r2, [r3, #24]
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	18d1      	adds	r1, r2, r3
 800bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc08:	f7ff ff06 	bl	800ba18 <prvInsertTimerInActiveList>
					break;
 800bc0c:	e015      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc14:	f003 0302 	and.w	r3, r3, #2
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc1e:	f000 fbdf 	bl	800c3e0 <vPortFree>
 800bc22:	e00a      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc2a:	f023 0301 	bic.w	r3, r3, #1
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc36:	e000      	b.n	800bc3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bc38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc3a:	4b08      	ldr	r3, [pc, #32]	; (800bc5c <prvProcessReceivedCommands+0x1c0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	1d39      	adds	r1, r7, #4
 800bc40:	2200      	movs	r2, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe fb78 	bl	800a338 <xQueueReceive>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f47f af2a 	bne.w	800baa4 <prvProcessReceivedCommands+0x8>
	}
}
 800bc50:	bf00      	nop
 800bc52:	bf00      	nop
 800bc54:	3730      	adds	r7, #48	; 0x30
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20000d3c 	.word	0x20000d3c

0800bc60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc66:	e048      	b.n	800bcfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc68:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc72:	4b2b      	ldr	r3, [pc, #172]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fe f891 	bl	8009da8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02e      	beq.n	800bcfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	4413      	add	r3, r2
 800bca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d90e      	bls.n	800bccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcba:	4b19      	ldr	r3, [pc, #100]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	f7fe f836 	bl	8009d36 <vListInsert>
 800bcca:	e016      	b.n	800bcfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bccc:	2300      	movs	r3, #0
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7ff fd60 	bl	800b79c <xTimerGenericCommand>
 800bcdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	603b      	str	r3, [r7, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcfa:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1b1      	bne.n	800bc68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd04:	4b06      	ldr	r3, [pc, #24]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <prvSwitchTimerLists+0xc4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a04      	ldr	r2, [pc, #16]	; (800bd20 <prvSwitchTimerLists+0xc0>)
 800bd10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd12:	4a04      	ldr	r2, [pc, #16]	; (800bd24 <prvSwitchTimerLists+0xc4>)
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	6013      	str	r3, [r2, #0]
}
 800bd18:	bf00      	nop
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20000d34 	.word	0x20000d34
 800bd24:	20000d38 	.word	0x20000d38

0800bd28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd2e:	f000 f969 	bl	800c004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd32:	4b15      	ldr	r3, [pc, #84]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d120      	bne.n	800bd7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd3a:	4814      	ldr	r0, [pc, #80]	; (800bd8c <prvCheckForValidListAndQueue+0x64>)
 800bd3c:	f7fd ffaa 	bl	8009c94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd40:	4813      	ldr	r0, [pc, #76]	; (800bd90 <prvCheckForValidListAndQueue+0x68>)
 800bd42:	f7fd ffa7 	bl	8009c94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd46:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <prvCheckForValidListAndQueue+0x6c>)
 800bd48:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <prvCheckForValidListAndQueue+0x64>)
 800bd4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bd4c:	4b12      	ldr	r3, [pc, #72]	; (800bd98 <prvCheckForValidListAndQueue+0x70>)
 800bd4e:	4a10      	ldr	r2, [pc, #64]	; (800bd90 <prvCheckForValidListAndQueue+0x68>)
 800bd50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bd52:	2300      	movs	r3, #0
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4b11      	ldr	r3, [pc, #68]	; (800bd9c <prvCheckForValidListAndQueue+0x74>)
 800bd58:	4a11      	ldr	r2, [pc, #68]	; (800bda0 <prvCheckForValidListAndQueue+0x78>)
 800bd5a:	2110      	movs	r1, #16
 800bd5c:	200a      	movs	r0, #10
 800bd5e:	f7fe f8b5 	bl	8009ecc <xQueueGenericCreateStatic>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4a08      	ldr	r2, [pc, #32]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bd68:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <prvCheckForValidListAndQueue+0x60>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	490b      	ldr	r1, [pc, #44]	; (800bda4 <prvCheckForValidListAndQueue+0x7c>)
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fcce 	bl	800a718 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd7c:	f000 f972 	bl	800c064 <vPortExitCritical>
}
 800bd80:	bf00      	nop
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20000d3c 	.word	0x20000d3c
 800bd8c:	20000d0c 	.word	0x20000d0c
 800bd90:	20000d20 	.word	0x20000d20
 800bd94:	20000d34 	.word	0x20000d34
 800bd98:	20000d38 	.word	0x20000d38
 800bd9c:	20000de8 	.word	0x20000de8
 800bda0:	20000d48 	.word	0x20000d48
 800bda4:	0800d850 	.word	0x0800d850

0800bda8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3b04      	subs	r3, #4
 800bdb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f023 0201 	bic.w	r2, r3, #1
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	3b04      	subs	r3, #4
 800bdd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdd8:	4a0c      	ldr	r2, [pc, #48]	; (800be0c <pxPortInitialiseStack+0x64>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3b14      	subs	r3, #20
 800bde2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3b04      	subs	r3, #4
 800bdee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f06f 0202 	mvn.w	r2, #2
 800bdf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3b20      	subs	r3, #32
 800bdfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	0800be11 	.word	0x0800be11

0800be10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be1a:	4b12      	ldr	r3, [pc, #72]	; (800be64 <prvTaskExitError+0x54>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be22:	d00a      	beq.n	800be3a <prvTaskExitError+0x2a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	60fb      	str	r3, [r7, #12]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <prvTaskExitError+0x28>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	60bb      	str	r3, [r7, #8]
}
 800be4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be4e:	bf00      	nop
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0fc      	beq.n	800be50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be56:	bf00      	nop
 800be58:	bf00      	nop
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	200000b4 	.word	0x200000b4
	...

0800be70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be70:	4b07      	ldr	r3, [pc, #28]	; (800be90 <pxCurrentTCBConst2>)
 800be72:	6819      	ldr	r1, [r3, #0]
 800be74:	6808      	ldr	r0, [r1, #0]
 800be76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	f380 8809 	msr	PSP, r0
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8811 	msr	BASEPRI, r0
 800be8a:	4770      	bx	lr
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst2>:
 800be90:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be98:	4808      	ldr	r0, [pc, #32]	; (800bebc <prvPortStartFirstTask+0x24>)
 800be9a:	6800      	ldr	r0, [r0, #0]
 800be9c:	6800      	ldr	r0, [r0, #0]
 800be9e:	f380 8808 	msr	MSP, r0
 800bea2:	f04f 0000 	mov.w	r0, #0
 800bea6:	f380 8814 	msr	CONTROL, r0
 800beaa:	b662      	cpsie	i
 800beac:	b661      	cpsie	f
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	df00      	svc	0
 800beb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800beba:	bf00      	nop
 800bebc:	e000ed08 	.word	0xe000ed08

0800bec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bec6:	4b46      	ldr	r3, [pc, #280]	; (800bfe0 <xPortStartScheduler+0x120>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a46      	ldr	r2, [pc, #280]	; (800bfe4 <xPortStartScheduler+0x124>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d10a      	bne.n	800bee6 <xPortStartScheduler+0x26>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	613b      	str	r3, [r7, #16]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bee6:	4b3e      	ldr	r3, [pc, #248]	; (800bfe0 <xPortStartScheduler+0x120>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a3f      	ldr	r2, [pc, #252]	; (800bfe8 <xPortStartScheduler+0x128>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d10a      	bne.n	800bf06 <xPortStartScheduler+0x46>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	60fb      	str	r3, [r7, #12]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf06:	4b39      	ldr	r3, [pc, #228]	; (800bfec <xPortStartScheduler+0x12c>)
 800bf08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	22ff      	movs	r2, #255	; 0xff
 800bf16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	4b31      	ldr	r3, [pc, #196]	; (800bff0 <xPortStartScheduler+0x130>)
 800bf2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf2e:	4b31      	ldr	r3, [pc, #196]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf30:	2207      	movs	r2, #7
 800bf32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf34:	e009      	b.n	800bf4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bf36:	4b2f      	ldr	r3, [pc, #188]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	4a2d      	ldr	r2, [pc, #180]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf4a:	78fb      	ldrb	r3, [r7, #3]
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf52:	2b80      	cmp	r3, #128	; 0x80
 800bf54:	d0ef      	beq.n	800bf36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf56:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f1c3 0307 	rsb	r3, r3, #7
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d00a      	beq.n	800bf78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	60bb      	str	r3, [r7, #8]
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf78:	4b1e      	ldr	r3, [pc, #120]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	4a1d      	ldr	r2, [pc, #116]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf82:	4b1c      	ldr	r3, [pc, #112]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf8a:	4a1a      	ldr	r2, [pc, #104]	; (800bff4 <xPortStartScheduler+0x134>)
 800bf8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf96:	4b18      	ldr	r3, [pc, #96]	; (800bff8 <xPortStartScheduler+0x138>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a17      	ldr	r2, [pc, #92]	; (800bff8 <xPortStartScheduler+0x138>)
 800bf9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bfa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bfa2:	4b15      	ldr	r3, [pc, #84]	; (800bff8 <xPortStartScheduler+0x138>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a14      	ldr	r2, [pc, #80]	; (800bff8 <xPortStartScheduler+0x138>)
 800bfa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bfac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bfae:	f000 f8dd 	bl	800c16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bfb2:	4b12      	ldr	r3, [pc, #72]	; (800bffc <xPortStartScheduler+0x13c>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bfb8:	f000 f8fc 	bl	800c1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfbc:	4b10      	ldr	r3, [pc, #64]	; (800c000 <xPortStartScheduler+0x140>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a0f      	ldr	r2, [pc, #60]	; (800c000 <xPortStartScheduler+0x140>)
 800bfc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bfc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfc8:	f7ff ff66 	bl	800be98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfcc:	f7fe fffe 	bl	800afcc <vTaskSwitchContext>
	prvTaskExitError();
 800bfd0:	f7ff ff1e 	bl	800be10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	e000ed00 	.word	0xe000ed00
 800bfe4:	410fc271 	.word	0x410fc271
 800bfe8:	410fc270 	.word	0x410fc270
 800bfec:	e000e400 	.word	0xe000e400
 800bff0:	20000e38 	.word	0x20000e38
 800bff4:	20000e3c 	.word	0x20000e3c
 800bff8:	e000ed20 	.word	0xe000ed20
 800bffc:	200000b4 	.word	0x200000b4
 800c000:	e000ef34 	.word	0xe000ef34

0800c004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	607b      	str	r3, [r7, #4]
}
 800c01c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c01e:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <vPortEnterCritical+0x58>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3301      	adds	r3, #1
 800c024:	4a0d      	ldr	r2, [pc, #52]	; (800c05c <vPortEnterCritical+0x58>)
 800c026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c028:	4b0c      	ldr	r3, [pc, #48]	; (800c05c <vPortEnterCritical+0x58>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d10f      	bne.n	800c050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <vPortEnterCritical+0x5c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <vPortEnterCritical+0x4c>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	603b      	str	r3, [r7, #0]
}
 800c04c:	bf00      	nop
 800c04e:	e7fe      	b.n	800c04e <vPortEnterCritical+0x4a>
	}
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	200000b4 	.word	0x200000b4
 800c060:	e000ed04 	.word	0xe000ed04

0800c064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c06a:	4b12      	ldr	r3, [pc, #72]	; (800c0b4 <vPortExitCritical+0x50>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10a      	bne.n	800c088 <vPortExitCritical+0x24>
	__asm volatile
 800c072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c076:	f383 8811 	msr	BASEPRI, r3
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	607b      	str	r3, [r7, #4]
}
 800c084:	bf00      	nop
 800c086:	e7fe      	b.n	800c086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <vPortExitCritical+0x50>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	4a09      	ldr	r2, [pc, #36]	; (800c0b4 <vPortExitCritical+0x50>)
 800c090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c092:	4b08      	ldr	r3, [pc, #32]	; (800c0b4 <vPortExitCritical+0x50>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d105      	bne.n	800c0a6 <vPortExitCritical+0x42>
 800c09a:	2300      	movs	r3, #0
 800c09c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	f383 8811 	msr	BASEPRI, r3
}
 800c0a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	200000b4 	.word	0x200000b4
	...

0800c0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0c0:	f3ef 8009 	mrs	r0, PSP
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <pxCurrentTCBConst>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	f01e 0f10 	tst.w	lr, #16
 800c0d0:	bf08      	it	eq
 800c0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0da:	6010      	str	r0, [r2, #0]
 800c0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c0e4:	f380 8811 	msr	BASEPRI, r0
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f7fe ff6c 	bl	800afcc <vTaskSwitchContext>
 800c0f4:	f04f 0000 	mov.w	r0, #0
 800c0f8:	f380 8811 	msr	BASEPRI, r0
 800c0fc:	bc09      	pop	{r0, r3}
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	6808      	ldr	r0, [r1, #0]
 800c102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c106:	f01e 0f10 	tst.w	lr, #16
 800c10a:	bf08      	it	eq
 800c10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c110:	f380 8809 	msr	PSP, r0
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	f3af 8000 	nop.w

0800c120 <pxCurrentTCBConst>:
 800c120:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop

0800c128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	607b      	str	r3, [r7, #4]
}
 800c140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c142:	f7fe fe89 	bl	800ae58 <xTaskIncrementTick>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c14c:	4b06      	ldr	r3, [pc, #24]	; (800c168 <xPortSysTickHandler+0x40>)
 800c14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	2300      	movs	r3, #0
 800c156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	f383 8811 	msr	BASEPRI, r3
}
 800c15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c170:	4b0b      	ldr	r3, [pc, #44]	; (800c1a0 <vPortSetupTimerInterrupt+0x34>)
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c176:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <vPortSetupTimerInterrupt+0x38>)
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c17c:	4b0a      	ldr	r3, [pc, #40]	; (800c1a8 <vPortSetupTimerInterrupt+0x3c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <vPortSetupTimerInterrupt+0x40>)
 800c182:	fba2 2303 	umull	r2, r3, r2, r3
 800c186:	099b      	lsrs	r3, r3, #6
 800c188:	4a09      	ldr	r2, [pc, #36]	; (800c1b0 <vPortSetupTimerInterrupt+0x44>)
 800c18a:	3b01      	subs	r3, #1
 800c18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c18e:	4b04      	ldr	r3, [pc, #16]	; (800c1a0 <vPortSetupTimerInterrupt+0x34>)
 800c190:	2207      	movs	r2, #7
 800c192:	601a      	str	r2, [r3, #0]
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	e000e010 	.word	0xe000e010
 800c1a4:	e000e018 	.word	0xe000e018
 800c1a8:	20000094 	.word	0x20000094
 800c1ac:	10624dd3 	.word	0x10624dd3
 800c1b0:	e000e014 	.word	0xe000e014

0800c1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c1c4 <vPortEnableVFP+0x10>
 800c1b8:	6801      	ldr	r1, [r0, #0]
 800c1ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c1be:	6001      	str	r1, [r0, #0]
 800c1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1c2:	bf00      	nop
 800c1c4:	e000ed88 	.word	0xe000ed88

0800c1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1ce:	f3ef 8305 	mrs	r3, IPSR
 800c1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b0f      	cmp	r3, #15
 800c1d8:	d914      	bls.n	800c204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1da:	4a17      	ldr	r2, [pc, #92]	; (800c238 <vPortValidateInterruptPriority+0x70>)
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4413      	add	r3, r2
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1e4:	4b15      	ldr	r3, [pc, #84]	; (800c23c <vPortValidateInterruptPriority+0x74>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	7afa      	ldrb	r2, [r7, #11]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d20a      	bcs.n	800c204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	607b      	str	r3, [r7, #4]
}
 800c200:	bf00      	nop
 800c202:	e7fe      	b.n	800c202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <vPortValidateInterruptPriority+0x78>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c20c:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <vPortValidateInterruptPriority+0x7c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	429a      	cmp	r2, r3
 800c212:	d90a      	bls.n	800c22a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	603b      	str	r3, [r7, #0]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <vPortValidateInterruptPriority+0x60>
	}
 800c22a:	bf00      	nop
 800c22c:	3714      	adds	r7, #20
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	e000e3f0 	.word	0xe000e3f0
 800c23c:	20000e38 	.word	0x20000e38
 800c240:	e000ed0c 	.word	0xe000ed0c
 800c244:	20000e3c 	.word	0x20000e3c

0800c248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08a      	sub	sp, #40	; 0x28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c254:	f7fe fd44 	bl	800ace0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c258:	4b5b      	ldr	r3, [pc, #364]	; (800c3c8 <pvPortMalloc+0x180>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c260:	f000 f920 	bl	800c4a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c264:	4b59      	ldr	r3, [pc, #356]	; (800c3cc <pvPortMalloc+0x184>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f040 8093 	bne.w	800c398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01d      	beq.n	800c2b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c278:	2208      	movs	r2, #8
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f003 0307 	and.w	r3, r3, #7
 800c286:	2b00      	cmp	r3, #0
 800c288:	d014      	beq.n	800c2b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f023 0307 	bic.w	r3, r3, #7
 800c290:	3308      	adds	r3, #8
 800c292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00a      	beq.n	800c2b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	617b      	str	r3, [r7, #20]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d06e      	beq.n	800c398 <pvPortMalloc+0x150>
 800c2ba:	4b45      	ldr	r3, [pc, #276]	; (800c3d0 <pvPortMalloc+0x188>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d869      	bhi.n	800c398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2c4:	4b43      	ldr	r3, [pc, #268]	; (800c3d4 <pvPortMalloc+0x18c>)
 800c2c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2c8:	4b42      	ldr	r3, [pc, #264]	; (800c3d4 <pvPortMalloc+0x18c>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2ce:	e004      	b.n	800c2da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d903      	bls.n	800c2ec <pvPortMalloc+0xa4>
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1f1      	bne.n	800c2d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2ec:	4b36      	ldr	r3, [pc, #216]	; (800c3c8 <pvPortMalloc+0x180>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d050      	beq.n	800c398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	4413      	add	r3, r2
 800c2fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	6a3b      	ldr	r3, [r7, #32]
 800c306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	2308      	movs	r3, #8
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	429a      	cmp	r2, r3
 800c316:	d91f      	bls.n	800c358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4413      	add	r3, r2
 800c31e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <pvPortMalloc+0xf8>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	613b      	str	r3, [r7, #16]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c352:	69b8      	ldr	r0, [r7, #24]
 800c354:	f000 f908 	bl	800c568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c358:	4b1d      	ldr	r3, [pc, #116]	; (800c3d0 <pvPortMalloc+0x188>)
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	4a1b      	ldr	r2, [pc, #108]	; (800c3d0 <pvPortMalloc+0x188>)
 800c364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c366:	4b1a      	ldr	r3, [pc, #104]	; (800c3d0 <pvPortMalloc+0x188>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	4b1b      	ldr	r3, [pc, #108]	; (800c3d8 <pvPortMalloc+0x190>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d203      	bcs.n	800c37a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c372:	4b17      	ldr	r3, [pc, #92]	; (800c3d0 <pvPortMalloc+0x188>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a18      	ldr	r2, [pc, #96]	; (800c3d8 <pvPortMalloc+0x190>)
 800c378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b13      	ldr	r3, [pc, #76]	; (800c3cc <pvPortMalloc+0x184>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	431a      	orrs	r2, r3
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c38e:	4b13      	ldr	r3, [pc, #76]	; (800c3dc <pvPortMalloc+0x194>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	4a11      	ldr	r2, [pc, #68]	; (800c3dc <pvPortMalloc+0x194>)
 800c396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c398:	f7fe fcb0 	bl	800acfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c39c:	69fb      	ldr	r3, [r7, #28]
 800c39e:	f003 0307 	and.w	r3, r3, #7
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00a      	beq.n	800c3bc <pvPortMalloc+0x174>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	60fb      	str	r3, [r7, #12]
}
 800c3b8:	bf00      	nop
 800c3ba:	e7fe      	b.n	800c3ba <pvPortMalloc+0x172>
	return pvReturn;
 800c3bc:	69fb      	ldr	r3, [r7, #28]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3728      	adds	r7, #40	; 0x28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20003558 	.word	0x20003558
 800c3cc:	2000356c 	.word	0x2000356c
 800c3d0:	2000355c 	.word	0x2000355c
 800c3d4:	20003550 	.word	0x20003550
 800c3d8:	20003560 	.word	0x20003560
 800c3dc:	20003564 	.word	0x20003564

0800c3e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d04d      	beq.n	800c48e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3f2:	2308      	movs	r3, #8
 800c3f4:	425b      	negs	r3, r3
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	4b24      	ldr	r3, [pc, #144]	; (800c498 <vPortFree+0xb8>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4013      	ands	r3, r2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <vPortFree+0x44>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	60fb      	str	r3, [r7, #12]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00a      	beq.n	800c442 <vPortFree+0x62>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	60bb      	str	r3, [r7, #8]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	4b14      	ldr	r3, [pc, #80]	; (800c498 <vPortFree+0xb8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4013      	ands	r3, r2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d01e      	beq.n	800c48e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d11a      	bne.n	800c48e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b0e      	ldr	r3, [pc, #56]	; (800c498 <vPortFree+0xb8>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	43db      	mvns	r3, r3
 800c462:	401a      	ands	r2, r3
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c468:	f7fe fc3a 	bl	800ace0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <vPortFree+0xbc>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4413      	add	r3, r2
 800c476:	4a09      	ldr	r2, [pc, #36]	; (800c49c <vPortFree+0xbc>)
 800c478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c47a:	6938      	ldr	r0, [r7, #16]
 800c47c:	f000 f874 	bl	800c568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <vPortFree+0xc0>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3301      	adds	r3, #1
 800c486:	4a06      	ldr	r2, [pc, #24]	; (800c4a0 <vPortFree+0xc0>)
 800c488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c48a:	f7fe fc37 	bl	800acfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c48e:	bf00      	nop
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	2000356c 	.word	0x2000356c
 800c49c:	2000355c 	.word	0x2000355c
 800c4a0:	20003568 	.word	0x20003568

0800c4a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c4aa:	f242 7310 	movw	r3, #10000	; 0x2710
 800c4ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c4b0:	4b27      	ldr	r3, [pc, #156]	; (800c550 <prvHeapInit+0xac>)
 800c4b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f003 0307 	and.w	r3, r3, #7
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00c      	beq.n	800c4d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3307      	adds	r3, #7
 800c4c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 0307 	bic.w	r3, r3, #7
 800c4ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	4a1f      	ldr	r2, [pc, #124]	; (800c550 <prvHeapInit+0xac>)
 800c4d4:	4413      	add	r3, r2
 800c4d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4dc:	4a1d      	ldr	r2, [pc, #116]	; (800c554 <prvHeapInit+0xb0>)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4e2:	4b1c      	ldr	r3, [pc, #112]	; (800c554 <prvHeapInit+0xb0>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	1a9b      	subs	r3, r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f023 0307 	bic.w	r3, r3, #7
 800c4fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	4a15      	ldr	r2, [pc, #84]	; (800c558 <prvHeapInit+0xb4>)
 800c504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c506:	4b14      	ldr	r3, [pc, #80]	; (800c558 <prvHeapInit+0xb4>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2200      	movs	r2, #0
 800c50c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c50e:	4b12      	ldr	r3, [pc, #72]	; (800c558 <prvHeapInit+0xb4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	1ad2      	subs	r2, r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c524:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <prvHeapInit+0xb4>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	4a0a      	ldr	r2, [pc, #40]	; (800c55c <prvHeapInit+0xb8>)
 800c532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	4a09      	ldr	r2, [pc, #36]	; (800c560 <prvHeapInit+0xbc>)
 800c53a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c53c:	4b09      	ldr	r3, [pc, #36]	; (800c564 <prvHeapInit+0xc0>)
 800c53e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c542:	601a      	str	r2, [r3, #0]
}
 800c544:	bf00      	nop
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	20000e40 	.word	0x20000e40
 800c554:	20003550 	.word	0x20003550
 800c558:	20003558 	.word	0x20003558
 800c55c:	20003560 	.word	0x20003560
 800c560:	2000355c 	.word	0x2000355c
 800c564:	2000356c 	.word	0x2000356c

0800c568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c568:	b480      	push	{r7}
 800c56a:	b085      	sub	sp, #20
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c570:	4b28      	ldr	r3, [pc, #160]	; (800c614 <prvInsertBlockIntoFreeList+0xac>)
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	e002      	b.n	800c57c <prvInsertBlockIntoFreeList+0x14>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	429a      	cmp	r2, r3
 800c584:	d8f7      	bhi.n	800c576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	4413      	add	r3, r2
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	429a      	cmp	r2, r3
 800c596:	d108      	bne.n	800c5aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	441a      	add	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	441a      	add	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d118      	bne.n	800c5f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	4b15      	ldr	r3, [pc, #84]	; (800c618 <prvInsertBlockIntoFreeList+0xb0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d00d      	beq.n	800c5e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	441a      	add	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	e008      	b.n	800c5f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5e6:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <prvInsertBlockIntoFreeList+0xb0>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	e003      	b.n	800c5f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d002      	beq.n	800c606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c606:	bf00      	nop
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20003550 	.word	0x20003550
 800c618:	20003558 	.word	0x20003558

0800c61c <__errno>:
 800c61c:	4b01      	ldr	r3, [pc, #4]	; (800c624 <__errno+0x8>)
 800c61e:	6818      	ldr	r0, [r3, #0]
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	200000b8 	.word	0x200000b8

0800c628 <__libc_init_array>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	4d0d      	ldr	r5, [pc, #52]	; (800c660 <__libc_init_array+0x38>)
 800c62c:	4c0d      	ldr	r4, [pc, #52]	; (800c664 <__libc_init_array+0x3c>)
 800c62e:	1b64      	subs	r4, r4, r5
 800c630:	10a4      	asrs	r4, r4, #2
 800c632:	2600      	movs	r6, #0
 800c634:	42a6      	cmp	r6, r4
 800c636:	d109      	bne.n	800c64c <__libc_init_array+0x24>
 800c638:	4d0b      	ldr	r5, [pc, #44]	; (800c668 <__libc_init_array+0x40>)
 800c63a:	4c0c      	ldr	r4, [pc, #48]	; (800c66c <__libc_init_array+0x44>)
 800c63c:	f000 fffa 	bl	800d634 <_init>
 800c640:	1b64      	subs	r4, r4, r5
 800c642:	10a4      	asrs	r4, r4, #2
 800c644:	2600      	movs	r6, #0
 800c646:	42a6      	cmp	r6, r4
 800c648:	d105      	bne.n	800c656 <__libc_init_array+0x2e>
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c650:	4798      	blx	r3
 800c652:	3601      	adds	r6, #1
 800c654:	e7ee      	b.n	800c634 <__libc_init_array+0xc>
 800c656:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65a:	4798      	blx	r3
 800c65c:	3601      	adds	r6, #1
 800c65e:	e7f2      	b.n	800c646 <__libc_init_array+0x1e>
 800c660:	0800d9c8 	.word	0x0800d9c8
 800c664:	0800d9c8 	.word	0x0800d9c8
 800c668:	0800d9c8 	.word	0x0800d9c8
 800c66c:	0800d9cc 	.word	0x0800d9cc

0800c670 <memcpy>:
 800c670:	440a      	add	r2, r1
 800c672:	4291      	cmp	r1, r2
 800c674:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c678:	d100      	bne.n	800c67c <memcpy+0xc>
 800c67a:	4770      	bx	lr
 800c67c:	b510      	push	{r4, lr}
 800c67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c686:	4291      	cmp	r1, r2
 800c688:	d1f9      	bne.n	800c67e <memcpy+0xe>
 800c68a:	bd10      	pop	{r4, pc}

0800c68c <memset>:
 800c68c:	4402      	add	r2, r0
 800c68e:	4603      	mov	r3, r0
 800c690:	4293      	cmp	r3, r2
 800c692:	d100      	bne.n	800c696 <memset+0xa>
 800c694:	4770      	bx	lr
 800c696:	f803 1b01 	strb.w	r1, [r3], #1
 800c69a:	e7f9      	b.n	800c690 <memset+0x4>

0800c69c <iprintf>:
 800c69c:	b40f      	push	{r0, r1, r2, r3}
 800c69e:	4b0a      	ldr	r3, [pc, #40]	; (800c6c8 <iprintf+0x2c>)
 800c6a0:	b513      	push	{r0, r1, r4, lr}
 800c6a2:	681c      	ldr	r4, [r3, #0]
 800c6a4:	b124      	cbz	r4, 800c6b0 <iprintf+0x14>
 800c6a6:	69a3      	ldr	r3, [r4, #24]
 800c6a8:	b913      	cbnz	r3, 800c6b0 <iprintf+0x14>
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f000 fa5e 	bl	800cb6c <__sinit>
 800c6b0:	ab05      	add	r3, sp, #20
 800c6b2:	9a04      	ldr	r2, [sp, #16]
 800c6b4:	68a1      	ldr	r1, [r4, #8]
 800c6b6:	9301      	str	r3, [sp, #4]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 fc2f 	bl	800cf1c <_vfiprintf_r>
 800c6be:	b002      	add	sp, #8
 800c6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6c4:	b004      	add	sp, #16
 800c6c6:	4770      	bx	lr
 800c6c8:	200000b8 	.word	0x200000b8

0800c6cc <_puts_r>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	460e      	mov	r6, r1
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	b118      	cbz	r0, 800c6dc <_puts_r+0x10>
 800c6d4:	6983      	ldr	r3, [r0, #24]
 800c6d6:	b90b      	cbnz	r3, 800c6dc <_puts_r+0x10>
 800c6d8:	f000 fa48 	bl	800cb6c <__sinit>
 800c6dc:	69ab      	ldr	r3, [r5, #24]
 800c6de:	68ac      	ldr	r4, [r5, #8]
 800c6e0:	b913      	cbnz	r3, 800c6e8 <_puts_r+0x1c>
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f000 fa42 	bl	800cb6c <__sinit>
 800c6e8:	4b2c      	ldr	r3, [pc, #176]	; (800c79c <_puts_r+0xd0>)
 800c6ea:	429c      	cmp	r4, r3
 800c6ec:	d120      	bne.n	800c730 <_puts_r+0x64>
 800c6ee:	686c      	ldr	r4, [r5, #4]
 800c6f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6f2:	07db      	lsls	r3, r3, #31
 800c6f4:	d405      	bmi.n	800c702 <_puts_r+0x36>
 800c6f6:	89a3      	ldrh	r3, [r4, #12]
 800c6f8:	0598      	lsls	r0, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_puts_r+0x36>
 800c6fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6fe:	f000 fad3 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	0719      	lsls	r1, r3, #28
 800c706:	d51d      	bpl.n	800c744 <_puts_r+0x78>
 800c708:	6923      	ldr	r3, [r4, #16]
 800c70a:	b1db      	cbz	r3, 800c744 <_puts_r+0x78>
 800c70c:	3e01      	subs	r6, #1
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c714:	3b01      	subs	r3, #1
 800c716:	60a3      	str	r3, [r4, #8]
 800c718:	bb39      	cbnz	r1, 800c76a <_puts_r+0x9e>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	da38      	bge.n	800c790 <_puts_r+0xc4>
 800c71e:	4622      	mov	r2, r4
 800c720:	210a      	movs	r1, #10
 800c722:	4628      	mov	r0, r5
 800c724:	f000 f848 	bl	800c7b8 <__swbuf_r>
 800c728:	3001      	adds	r0, #1
 800c72a:	d011      	beq.n	800c750 <_puts_r+0x84>
 800c72c:	250a      	movs	r5, #10
 800c72e:	e011      	b.n	800c754 <_puts_r+0x88>
 800c730:	4b1b      	ldr	r3, [pc, #108]	; (800c7a0 <_puts_r+0xd4>)
 800c732:	429c      	cmp	r4, r3
 800c734:	d101      	bne.n	800c73a <_puts_r+0x6e>
 800c736:	68ac      	ldr	r4, [r5, #8]
 800c738:	e7da      	b.n	800c6f0 <_puts_r+0x24>
 800c73a:	4b1a      	ldr	r3, [pc, #104]	; (800c7a4 <_puts_r+0xd8>)
 800c73c:	429c      	cmp	r4, r3
 800c73e:	bf08      	it	eq
 800c740:	68ec      	ldreq	r4, [r5, #12]
 800c742:	e7d5      	b.n	800c6f0 <_puts_r+0x24>
 800c744:	4621      	mov	r1, r4
 800c746:	4628      	mov	r0, r5
 800c748:	f000 f888 	bl	800c85c <__swsetup_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d0dd      	beq.n	800c70c <_puts_r+0x40>
 800c750:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c756:	07da      	lsls	r2, r3, #31
 800c758:	d405      	bmi.n	800c766 <_puts_r+0x9a>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	059b      	lsls	r3, r3, #22
 800c75e:	d402      	bmi.n	800c766 <_puts_r+0x9a>
 800c760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c762:	f000 faa2 	bl	800ccaa <__retarget_lock_release_recursive>
 800c766:	4628      	mov	r0, r5
 800c768:	bd70      	pop	{r4, r5, r6, pc}
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	da04      	bge.n	800c778 <_puts_r+0xac>
 800c76e:	69a2      	ldr	r2, [r4, #24]
 800c770:	429a      	cmp	r2, r3
 800c772:	dc06      	bgt.n	800c782 <_puts_r+0xb6>
 800c774:	290a      	cmp	r1, #10
 800c776:	d004      	beq.n	800c782 <_puts_r+0xb6>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	7019      	strb	r1, [r3, #0]
 800c780:	e7c5      	b.n	800c70e <_puts_r+0x42>
 800c782:	4622      	mov	r2, r4
 800c784:	4628      	mov	r0, r5
 800c786:	f000 f817 	bl	800c7b8 <__swbuf_r>
 800c78a:	3001      	adds	r0, #1
 800c78c:	d1bf      	bne.n	800c70e <_puts_r+0x42>
 800c78e:	e7df      	b.n	800c750 <_puts_r+0x84>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	250a      	movs	r5, #10
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	701d      	strb	r5, [r3, #0]
 800c79a:	e7db      	b.n	800c754 <_puts_r+0x88>
 800c79c:	0800d94c 	.word	0x0800d94c
 800c7a0:	0800d96c 	.word	0x0800d96c
 800c7a4:	0800d92c 	.word	0x0800d92c

0800c7a8 <puts>:
 800c7a8:	4b02      	ldr	r3, [pc, #8]	; (800c7b4 <puts+0xc>)
 800c7aa:	4601      	mov	r1, r0
 800c7ac:	6818      	ldr	r0, [r3, #0]
 800c7ae:	f7ff bf8d 	b.w	800c6cc <_puts_r>
 800c7b2:	bf00      	nop
 800c7b4:	200000b8 	.word	0x200000b8

0800c7b8 <__swbuf_r>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	460e      	mov	r6, r1
 800c7bc:	4614      	mov	r4, r2
 800c7be:	4605      	mov	r5, r0
 800c7c0:	b118      	cbz	r0, 800c7ca <__swbuf_r+0x12>
 800c7c2:	6983      	ldr	r3, [r0, #24]
 800c7c4:	b90b      	cbnz	r3, 800c7ca <__swbuf_r+0x12>
 800c7c6:	f000 f9d1 	bl	800cb6c <__sinit>
 800c7ca:	4b21      	ldr	r3, [pc, #132]	; (800c850 <__swbuf_r+0x98>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	d12b      	bne.n	800c828 <__swbuf_r+0x70>
 800c7d0:	686c      	ldr	r4, [r5, #4]
 800c7d2:	69a3      	ldr	r3, [r4, #24]
 800c7d4:	60a3      	str	r3, [r4, #8]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	071a      	lsls	r2, r3, #28
 800c7da:	d52f      	bpl.n	800c83c <__swbuf_r+0x84>
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	b36b      	cbz	r3, 800c83c <__swbuf_r+0x84>
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	6820      	ldr	r0, [r4, #0]
 800c7e4:	1ac0      	subs	r0, r0, r3
 800c7e6:	6963      	ldr	r3, [r4, #20]
 800c7e8:	b2f6      	uxtb	r6, r6
 800c7ea:	4283      	cmp	r3, r0
 800c7ec:	4637      	mov	r7, r6
 800c7ee:	dc04      	bgt.n	800c7fa <__swbuf_r+0x42>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f000 f926 	bl	800ca44 <_fflush_r>
 800c7f8:	bb30      	cbnz	r0, 800c848 <__swbuf_r+0x90>
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	60a3      	str	r3, [r4, #8]
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	6022      	str	r2, [r4, #0]
 800c806:	701e      	strb	r6, [r3, #0]
 800c808:	6963      	ldr	r3, [r4, #20]
 800c80a:	3001      	adds	r0, #1
 800c80c:	4283      	cmp	r3, r0
 800c80e:	d004      	beq.n	800c81a <__swbuf_r+0x62>
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	07db      	lsls	r3, r3, #31
 800c814:	d506      	bpl.n	800c824 <__swbuf_r+0x6c>
 800c816:	2e0a      	cmp	r6, #10
 800c818:	d104      	bne.n	800c824 <__swbuf_r+0x6c>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4628      	mov	r0, r5
 800c81e:	f000 f911 	bl	800ca44 <_fflush_r>
 800c822:	b988      	cbnz	r0, 800c848 <__swbuf_r+0x90>
 800c824:	4638      	mov	r0, r7
 800c826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <__swbuf_r+0x9c>)
 800c82a:	429c      	cmp	r4, r3
 800c82c:	d101      	bne.n	800c832 <__swbuf_r+0x7a>
 800c82e:	68ac      	ldr	r4, [r5, #8]
 800c830:	e7cf      	b.n	800c7d2 <__swbuf_r+0x1a>
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__swbuf_r+0xa0>)
 800c834:	429c      	cmp	r4, r3
 800c836:	bf08      	it	eq
 800c838:	68ec      	ldreq	r4, [r5, #12]
 800c83a:	e7ca      	b.n	800c7d2 <__swbuf_r+0x1a>
 800c83c:	4621      	mov	r1, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 f80c 	bl	800c85c <__swsetup_r>
 800c844:	2800      	cmp	r0, #0
 800c846:	d0cb      	beq.n	800c7e0 <__swbuf_r+0x28>
 800c848:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c84c:	e7ea      	b.n	800c824 <__swbuf_r+0x6c>
 800c84e:	bf00      	nop
 800c850:	0800d94c 	.word	0x0800d94c
 800c854:	0800d96c 	.word	0x0800d96c
 800c858:	0800d92c 	.word	0x0800d92c

0800c85c <__swsetup_r>:
 800c85c:	4b32      	ldr	r3, [pc, #200]	; (800c928 <__swsetup_r+0xcc>)
 800c85e:	b570      	push	{r4, r5, r6, lr}
 800c860:	681d      	ldr	r5, [r3, #0]
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	b125      	cbz	r5, 800c872 <__swsetup_r+0x16>
 800c868:	69ab      	ldr	r3, [r5, #24]
 800c86a:	b913      	cbnz	r3, 800c872 <__swsetup_r+0x16>
 800c86c:	4628      	mov	r0, r5
 800c86e:	f000 f97d 	bl	800cb6c <__sinit>
 800c872:	4b2e      	ldr	r3, [pc, #184]	; (800c92c <__swsetup_r+0xd0>)
 800c874:	429c      	cmp	r4, r3
 800c876:	d10f      	bne.n	800c898 <__swsetup_r+0x3c>
 800c878:	686c      	ldr	r4, [r5, #4]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c880:	0719      	lsls	r1, r3, #28
 800c882:	d42c      	bmi.n	800c8de <__swsetup_r+0x82>
 800c884:	06dd      	lsls	r5, r3, #27
 800c886:	d411      	bmi.n	800c8ac <__swsetup_r+0x50>
 800c888:	2309      	movs	r3, #9
 800c88a:	6033      	str	r3, [r6, #0]
 800c88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c896:	e03e      	b.n	800c916 <__swsetup_r+0xba>
 800c898:	4b25      	ldr	r3, [pc, #148]	; (800c930 <__swsetup_r+0xd4>)
 800c89a:	429c      	cmp	r4, r3
 800c89c:	d101      	bne.n	800c8a2 <__swsetup_r+0x46>
 800c89e:	68ac      	ldr	r4, [r5, #8]
 800c8a0:	e7eb      	b.n	800c87a <__swsetup_r+0x1e>
 800c8a2:	4b24      	ldr	r3, [pc, #144]	; (800c934 <__swsetup_r+0xd8>)
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	bf08      	it	eq
 800c8a8:	68ec      	ldreq	r4, [r5, #12]
 800c8aa:	e7e6      	b.n	800c87a <__swsetup_r+0x1e>
 800c8ac:	0758      	lsls	r0, r3, #29
 800c8ae:	d512      	bpl.n	800c8d6 <__swsetup_r+0x7a>
 800c8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b2:	b141      	cbz	r1, 800c8c6 <__swsetup_r+0x6a>
 800c8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b8:	4299      	cmp	r1, r3
 800c8ba:	d002      	beq.n	800c8c2 <__swsetup_r+0x66>
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f000 fa59 	bl	800cd74 <_free_r>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8cc:	81a3      	strh	r3, [r4, #12]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f043 0308 	orr.w	r3, r3, #8
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	b94b      	cbnz	r3, 800c8f6 <__swsetup_r+0x9a>
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ec:	d003      	beq.n	800c8f6 <__swsetup_r+0x9a>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f000 f9ff 	bl	800ccf4 <__smakebuf_r>
 800c8f6:	89a0      	ldrh	r0, [r4, #12]
 800c8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8fc:	f010 0301 	ands.w	r3, r0, #1
 800c900:	d00a      	beq.n	800c918 <__swsetup_r+0xbc>
 800c902:	2300      	movs	r3, #0
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	6963      	ldr	r3, [r4, #20]
 800c908:	425b      	negs	r3, r3
 800c90a:	61a3      	str	r3, [r4, #24]
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	b943      	cbnz	r3, 800c922 <__swsetup_r+0xc6>
 800c910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c914:	d1ba      	bne.n	800c88c <__swsetup_r+0x30>
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	0781      	lsls	r1, r0, #30
 800c91a:	bf58      	it	pl
 800c91c:	6963      	ldrpl	r3, [r4, #20]
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	e7f4      	b.n	800c90c <__swsetup_r+0xb0>
 800c922:	2000      	movs	r0, #0
 800c924:	e7f7      	b.n	800c916 <__swsetup_r+0xba>
 800c926:	bf00      	nop
 800c928:	200000b8 	.word	0x200000b8
 800c92c:	0800d94c 	.word	0x0800d94c
 800c930:	0800d96c 	.word	0x0800d96c
 800c934:	0800d92c 	.word	0x0800d92c

0800c938 <__sflush_r>:
 800c938:	898a      	ldrh	r2, [r1, #12]
 800c93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93e:	4605      	mov	r5, r0
 800c940:	0710      	lsls	r0, r2, #28
 800c942:	460c      	mov	r4, r1
 800c944:	d458      	bmi.n	800c9f8 <__sflush_r+0xc0>
 800c946:	684b      	ldr	r3, [r1, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dc05      	bgt.n	800c958 <__sflush_r+0x20>
 800c94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc02      	bgt.n	800c958 <__sflush_r+0x20>
 800c952:	2000      	movs	r0, #0
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c95a:	2e00      	cmp	r6, #0
 800c95c:	d0f9      	beq.n	800c952 <__sflush_r+0x1a>
 800c95e:	2300      	movs	r3, #0
 800c960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c964:	682f      	ldr	r7, [r5, #0]
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	d032      	beq.n	800c9d0 <__sflush_r+0x98>
 800c96a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	075a      	lsls	r2, r3, #29
 800c970:	d505      	bpl.n	800c97e <__sflush_r+0x46>
 800c972:	6863      	ldr	r3, [r4, #4]
 800c974:	1ac0      	subs	r0, r0, r3
 800c976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c978:	b10b      	cbz	r3, 800c97e <__sflush_r+0x46>
 800c97a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c97c:	1ac0      	subs	r0, r0, r3
 800c97e:	2300      	movs	r3, #0
 800c980:	4602      	mov	r2, r0
 800c982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	4628      	mov	r0, r5
 800c988:	47b0      	blx	r6
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	d106      	bne.n	800c99e <__sflush_r+0x66>
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	291d      	cmp	r1, #29
 800c994:	d82c      	bhi.n	800c9f0 <__sflush_r+0xb8>
 800c996:	4a2a      	ldr	r2, [pc, #168]	; (800ca40 <__sflush_r+0x108>)
 800c998:	40ca      	lsrs	r2, r1
 800c99a:	07d6      	lsls	r6, r2, #31
 800c99c:	d528      	bpl.n	800c9f0 <__sflush_r+0xb8>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	6062      	str	r2, [r4, #4]
 800c9a2:	04d9      	lsls	r1, r3, #19
 800c9a4:	6922      	ldr	r2, [r4, #16]
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	d504      	bpl.n	800c9b4 <__sflush_r+0x7c>
 800c9aa:	1c42      	adds	r2, r0, #1
 800c9ac:	d101      	bne.n	800c9b2 <__sflush_r+0x7a>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b903      	cbnz	r3, 800c9b4 <__sflush_r+0x7c>
 800c9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9b6:	602f      	str	r7, [r5, #0]
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	d0ca      	beq.n	800c952 <__sflush_r+0x1a>
 800c9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	d002      	beq.n	800c9ca <__sflush_r+0x92>
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f000 f9d5 	bl	800cd74 <_free_r>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c9ce:	e7c1      	b.n	800c954 <__sflush_r+0x1c>
 800c9d0:	6a21      	ldr	r1, [r4, #32]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b0      	blx	r6
 800c9d8:	1c41      	adds	r1, r0, #1
 800c9da:	d1c7      	bne.n	800c96c <__sflush_r+0x34>
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0c4      	beq.n	800c96c <__sflush_r+0x34>
 800c9e2:	2b1d      	cmp	r3, #29
 800c9e4:	d001      	beq.n	800c9ea <__sflush_r+0xb2>
 800c9e6:	2b16      	cmp	r3, #22
 800c9e8:	d101      	bne.n	800c9ee <__sflush_r+0xb6>
 800c9ea:	602f      	str	r7, [r5, #0]
 800c9ec:	e7b1      	b.n	800c952 <__sflush_r+0x1a>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	e7ad      	b.n	800c954 <__sflush_r+0x1c>
 800c9f8:	690f      	ldr	r7, [r1, #16]
 800c9fa:	2f00      	cmp	r7, #0
 800c9fc:	d0a9      	beq.n	800c952 <__sflush_r+0x1a>
 800c9fe:	0793      	lsls	r3, r2, #30
 800ca00:	680e      	ldr	r6, [r1, #0]
 800ca02:	bf08      	it	eq
 800ca04:	694b      	ldreq	r3, [r1, #20]
 800ca06:	600f      	str	r7, [r1, #0]
 800ca08:	bf18      	it	ne
 800ca0a:	2300      	movne	r3, #0
 800ca0c:	eba6 0807 	sub.w	r8, r6, r7
 800ca10:	608b      	str	r3, [r1, #8]
 800ca12:	f1b8 0f00 	cmp.w	r8, #0
 800ca16:	dd9c      	ble.n	800c952 <__sflush_r+0x1a>
 800ca18:	6a21      	ldr	r1, [r4, #32]
 800ca1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca1c:	4643      	mov	r3, r8
 800ca1e:	463a      	mov	r2, r7
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b0      	blx	r6
 800ca24:	2800      	cmp	r0, #0
 800ca26:	dc06      	bgt.n	800ca36 <__sflush_r+0xfe>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca34:	e78e      	b.n	800c954 <__sflush_r+0x1c>
 800ca36:	4407      	add	r7, r0
 800ca38:	eba8 0800 	sub.w	r8, r8, r0
 800ca3c:	e7e9      	b.n	800ca12 <__sflush_r+0xda>
 800ca3e:	bf00      	nop
 800ca40:	20400001 	.word	0x20400001

0800ca44 <_fflush_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	690b      	ldr	r3, [r1, #16]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b913      	cbnz	r3, 800ca54 <_fflush_r+0x10>
 800ca4e:	2500      	movs	r5, #0
 800ca50:	4628      	mov	r0, r5
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	b118      	cbz	r0, 800ca5e <_fflush_r+0x1a>
 800ca56:	6983      	ldr	r3, [r0, #24]
 800ca58:	b90b      	cbnz	r3, 800ca5e <_fflush_r+0x1a>
 800ca5a:	f000 f887 	bl	800cb6c <__sinit>
 800ca5e:	4b14      	ldr	r3, [pc, #80]	; (800cab0 <_fflush_r+0x6c>)
 800ca60:	429c      	cmp	r4, r3
 800ca62:	d11b      	bne.n	800ca9c <_fflush_r+0x58>
 800ca64:	686c      	ldr	r4, [r5, #4]
 800ca66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0ef      	beq.n	800ca4e <_fflush_r+0xa>
 800ca6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca70:	07d0      	lsls	r0, r2, #31
 800ca72:	d404      	bmi.n	800ca7e <_fflush_r+0x3a>
 800ca74:	0599      	lsls	r1, r3, #22
 800ca76:	d402      	bmi.n	800ca7e <_fflush_r+0x3a>
 800ca78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7a:	f000 f915 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800ca7e:	4628      	mov	r0, r5
 800ca80:	4621      	mov	r1, r4
 800ca82:	f7ff ff59 	bl	800c938 <__sflush_r>
 800ca86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca88:	07da      	lsls	r2, r3, #31
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	d4e0      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	059b      	lsls	r3, r3, #22
 800ca92:	d4dd      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca96:	f000 f908 	bl	800ccaa <__retarget_lock_release_recursive>
 800ca9a:	e7d9      	b.n	800ca50 <_fflush_r+0xc>
 800ca9c:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <_fflush_r+0x70>)
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d101      	bne.n	800caa6 <_fflush_r+0x62>
 800caa2:	68ac      	ldr	r4, [r5, #8]
 800caa4:	e7df      	b.n	800ca66 <_fflush_r+0x22>
 800caa6:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <_fflush_r+0x74>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	bf08      	it	eq
 800caac:	68ec      	ldreq	r4, [r5, #12]
 800caae:	e7da      	b.n	800ca66 <_fflush_r+0x22>
 800cab0:	0800d94c 	.word	0x0800d94c
 800cab4:	0800d96c 	.word	0x0800d96c
 800cab8:	0800d92c 	.word	0x0800d92c

0800cabc <std>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	b510      	push	{r4, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	e9c0 3300 	strd	r3, r3, [r0]
 800cac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caca:	6083      	str	r3, [r0, #8]
 800cacc:	8181      	strh	r1, [r0, #12]
 800cace:	6643      	str	r3, [r0, #100]	; 0x64
 800cad0:	81c2      	strh	r2, [r0, #14]
 800cad2:	6183      	str	r3, [r0, #24]
 800cad4:	4619      	mov	r1, r3
 800cad6:	2208      	movs	r2, #8
 800cad8:	305c      	adds	r0, #92	; 0x5c
 800cada:	f7ff fdd7 	bl	800c68c <memset>
 800cade:	4b05      	ldr	r3, [pc, #20]	; (800caf4 <std+0x38>)
 800cae0:	6263      	str	r3, [r4, #36]	; 0x24
 800cae2:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <std+0x3c>)
 800cae4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cae6:	4b05      	ldr	r3, [pc, #20]	; (800cafc <std+0x40>)
 800cae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <std+0x44>)
 800caec:	6224      	str	r4, [r4, #32]
 800caee:	6323      	str	r3, [r4, #48]	; 0x30
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	bf00      	nop
 800caf4:	0800d4c5 	.word	0x0800d4c5
 800caf8:	0800d4e7 	.word	0x0800d4e7
 800cafc:	0800d51f 	.word	0x0800d51f
 800cb00:	0800d543 	.word	0x0800d543

0800cb04 <_cleanup_r>:
 800cb04:	4901      	ldr	r1, [pc, #4]	; (800cb0c <_cleanup_r+0x8>)
 800cb06:	f000 b8af 	b.w	800cc68 <_fwalk_reent>
 800cb0a:	bf00      	nop
 800cb0c:	0800ca45 	.word	0x0800ca45

0800cb10 <__sfmoreglue>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	1e4a      	subs	r2, r1, #1
 800cb14:	2568      	movs	r5, #104	; 0x68
 800cb16:	4355      	muls	r5, r2
 800cb18:	460e      	mov	r6, r1
 800cb1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb1e:	f000 f979 	bl	800ce14 <_malloc_r>
 800cb22:	4604      	mov	r4, r0
 800cb24:	b140      	cbz	r0, 800cb38 <__sfmoreglue+0x28>
 800cb26:	2100      	movs	r1, #0
 800cb28:	e9c0 1600 	strd	r1, r6, [r0]
 800cb2c:	300c      	adds	r0, #12
 800cb2e:	60a0      	str	r0, [r4, #8]
 800cb30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb34:	f7ff fdaa 	bl	800c68c <memset>
 800cb38:	4620      	mov	r0, r4
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}

0800cb3c <__sfp_lock_acquire>:
 800cb3c:	4801      	ldr	r0, [pc, #4]	; (800cb44 <__sfp_lock_acquire+0x8>)
 800cb3e:	f000 b8b3 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cb42:	bf00      	nop
 800cb44:	20010478 	.word	0x20010478

0800cb48 <__sfp_lock_release>:
 800cb48:	4801      	ldr	r0, [pc, #4]	; (800cb50 <__sfp_lock_release+0x8>)
 800cb4a:	f000 b8ae 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cb4e:	bf00      	nop
 800cb50:	20010478 	.word	0x20010478

0800cb54 <__sinit_lock_acquire>:
 800cb54:	4801      	ldr	r0, [pc, #4]	; (800cb5c <__sinit_lock_acquire+0x8>)
 800cb56:	f000 b8a7 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cb5a:	bf00      	nop
 800cb5c:	20010473 	.word	0x20010473

0800cb60 <__sinit_lock_release>:
 800cb60:	4801      	ldr	r0, [pc, #4]	; (800cb68 <__sinit_lock_release+0x8>)
 800cb62:	f000 b8a2 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cb66:	bf00      	nop
 800cb68:	20010473 	.word	0x20010473

0800cb6c <__sinit>:
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	4604      	mov	r4, r0
 800cb70:	f7ff fff0 	bl	800cb54 <__sinit_lock_acquire>
 800cb74:	69a3      	ldr	r3, [r4, #24]
 800cb76:	b11b      	cbz	r3, 800cb80 <__sinit+0x14>
 800cb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb7c:	f7ff bff0 	b.w	800cb60 <__sinit_lock_release>
 800cb80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb84:	6523      	str	r3, [r4, #80]	; 0x50
 800cb86:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <__sinit+0x68>)
 800cb88:	4a13      	ldr	r2, [pc, #76]	; (800cbd8 <__sinit+0x6c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb8e:	42a3      	cmp	r3, r4
 800cb90:	bf04      	itt	eq
 800cb92:	2301      	moveq	r3, #1
 800cb94:	61a3      	streq	r3, [r4, #24]
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f820 	bl	800cbdc <__sfp>
 800cb9c:	6060      	str	r0, [r4, #4]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 f81c 	bl	800cbdc <__sfp>
 800cba4:	60a0      	str	r0, [r4, #8]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f818 	bl	800cbdc <__sfp>
 800cbac:	2200      	movs	r2, #0
 800cbae:	60e0      	str	r0, [r4, #12]
 800cbb0:	2104      	movs	r1, #4
 800cbb2:	6860      	ldr	r0, [r4, #4]
 800cbb4:	f7ff ff82 	bl	800cabc <std>
 800cbb8:	68a0      	ldr	r0, [r4, #8]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	2109      	movs	r1, #9
 800cbbe:	f7ff ff7d 	bl	800cabc <std>
 800cbc2:	68e0      	ldr	r0, [r4, #12]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	2112      	movs	r1, #18
 800cbc8:	f7ff ff78 	bl	800cabc <std>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	61a3      	str	r3, [r4, #24]
 800cbd0:	e7d2      	b.n	800cb78 <__sinit+0xc>
 800cbd2:	bf00      	nop
 800cbd4:	0800d928 	.word	0x0800d928
 800cbd8:	0800cb05 	.word	0x0800cb05

0800cbdc <__sfp>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	4607      	mov	r7, r0
 800cbe0:	f7ff ffac 	bl	800cb3c <__sfp_lock_acquire>
 800cbe4:	4b1e      	ldr	r3, [pc, #120]	; (800cc60 <__sfp+0x84>)
 800cbe6:	681e      	ldr	r6, [r3, #0]
 800cbe8:	69b3      	ldr	r3, [r6, #24]
 800cbea:	b913      	cbnz	r3, 800cbf2 <__sfp+0x16>
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ffbd 	bl	800cb6c <__sinit>
 800cbf2:	3648      	adds	r6, #72	; 0x48
 800cbf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	d503      	bpl.n	800cc04 <__sfp+0x28>
 800cbfc:	6833      	ldr	r3, [r6, #0]
 800cbfe:	b30b      	cbz	r3, 800cc44 <__sfp+0x68>
 800cc00:	6836      	ldr	r6, [r6, #0]
 800cc02:	e7f7      	b.n	800cbf4 <__sfp+0x18>
 800cc04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc08:	b9d5      	cbnz	r5, 800cc40 <__sfp+0x64>
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <__sfp+0x88>)
 800cc0c:	60e3      	str	r3, [r4, #12]
 800cc0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc12:	6665      	str	r5, [r4, #100]	; 0x64
 800cc14:	f000 f847 	bl	800cca6 <__retarget_lock_init_recursive>
 800cc18:	f7ff ff96 	bl	800cb48 <__sfp_lock_release>
 800cc1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc24:	6025      	str	r5, [r4, #0]
 800cc26:	61a5      	str	r5, [r4, #24]
 800cc28:	2208      	movs	r2, #8
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc30:	f7ff fd2c 	bl	800c68c <memset>
 800cc34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc40:	3468      	adds	r4, #104	; 0x68
 800cc42:	e7d9      	b.n	800cbf8 <__sfp+0x1c>
 800cc44:	2104      	movs	r1, #4
 800cc46:	4638      	mov	r0, r7
 800cc48:	f7ff ff62 	bl	800cb10 <__sfmoreglue>
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	6030      	str	r0, [r6, #0]
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d1d5      	bne.n	800cc00 <__sfp+0x24>
 800cc54:	f7ff ff78 	bl	800cb48 <__sfp_lock_release>
 800cc58:	230c      	movs	r3, #12
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	e7ee      	b.n	800cc3c <__sfp+0x60>
 800cc5e:	bf00      	nop
 800cc60:	0800d928 	.word	0x0800d928
 800cc64:	ffff0001 	.word	0xffff0001

0800cc68 <_fwalk_reent>:
 800cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	4688      	mov	r8, r1
 800cc70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc74:	2700      	movs	r7, #0
 800cc76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc7a:	f1b9 0901 	subs.w	r9, r9, #1
 800cc7e:	d505      	bpl.n	800cc8c <_fwalk_reent+0x24>
 800cc80:	6824      	ldr	r4, [r4, #0]
 800cc82:	2c00      	cmp	r4, #0
 800cc84:	d1f7      	bne.n	800cc76 <_fwalk_reent+0xe>
 800cc86:	4638      	mov	r0, r7
 800cc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8c:	89ab      	ldrh	r3, [r5, #12]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d907      	bls.n	800cca2 <_fwalk_reent+0x3a>
 800cc92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc96:	3301      	adds	r3, #1
 800cc98:	d003      	beq.n	800cca2 <_fwalk_reent+0x3a>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	47c0      	blx	r8
 800cca0:	4307      	orrs	r7, r0
 800cca2:	3568      	adds	r5, #104	; 0x68
 800cca4:	e7e9      	b.n	800cc7a <_fwalk_reent+0x12>

0800cca6 <__retarget_lock_init_recursive>:
 800cca6:	4770      	bx	lr

0800cca8 <__retarget_lock_acquire_recursive>:
 800cca8:	4770      	bx	lr

0800ccaa <__retarget_lock_release_recursive>:
 800ccaa:	4770      	bx	lr

0800ccac <__swhatbuf_r>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	b096      	sub	sp, #88	; 0x58
 800ccb8:	4614      	mov	r4, r2
 800ccba:	461d      	mov	r5, r3
 800ccbc:	da07      	bge.n	800ccce <__swhatbuf_r+0x22>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	602b      	str	r3, [r5, #0]
 800ccc2:	89b3      	ldrh	r3, [r6, #12]
 800ccc4:	061a      	lsls	r2, r3, #24
 800ccc6:	d410      	bmi.n	800ccea <__swhatbuf_r+0x3e>
 800ccc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cccc:	e00e      	b.n	800ccec <__swhatbuf_r+0x40>
 800ccce:	466a      	mov	r2, sp
 800ccd0:	f000 fc5e 	bl	800d590 <_fstat_r>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	dbf2      	blt.n	800ccbe <__swhatbuf_r+0x12>
 800ccd8:	9a01      	ldr	r2, [sp, #4]
 800ccda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cce2:	425a      	negs	r2, r3
 800cce4:	415a      	adcs	r2, r3
 800cce6:	602a      	str	r2, [r5, #0]
 800cce8:	e7ee      	b.n	800ccc8 <__swhatbuf_r+0x1c>
 800ccea:	2340      	movs	r3, #64	; 0x40
 800ccec:	2000      	movs	r0, #0
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	b016      	add	sp, #88	; 0x58
 800ccf2:	bd70      	pop	{r4, r5, r6, pc}

0800ccf4 <__smakebuf_r>:
 800ccf4:	898b      	ldrh	r3, [r1, #12]
 800ccf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccf8:	079d      	lsls	r5, r3, #30
 800ccfa:	4606      	mov	r6, r0
 800ccfc:	460c      	mov	r4, r1
 800ccfe:	d507      	bpl.n	800cd10 <__smakebuf_r+0x1c>
 800cd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	6123      	str	r3, [r4, #16]
 800cd08:	2301      	movs	r3, #1
 800cd0a:	6163      	str	r3, [r4, #20]
 800cd0c:	b002      	add	sp, #8
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}
 800cd10:	ab01      	add	r3, sp, #4
 800cd12:	466a      	mov	r2, sp
 800cd14:	f7ff ffca 	bl	800ccac <__swhatbuf_r>
 800cd18:	9900      	ldr	r1, [sp, #0]
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f000 f879 	bl	800ce14 <_malloc_r>
 800cd22:	b948      	cbnz	r0, 800cd38 <__smakebuf_r+0x44>
 800cd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd28:	059a      	lsls	r2, r3, #22
 800cd2a:	d4ef      	bmi.n	800cd0c <__smakebuf_r+0x18>
 800cd2c:	f023 0303 	bic.w	r3, r3, #3
 800cd30:	f043 0302 	orr.w	r3, r3, #2
 800cd34:	81a3      	strh	r3, [r4, #12]
 800cd36:	e7e3      	b.n	800cd00 <__smakebuf_r+0xc>
 800cd38:	4b0d      	ldr	r3, [pc, #52]	; (800cd70 <__smakebuf_r+0x7c>)
 800cd3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	6020      	str	r0, [r4, #0]
 800cd40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	9b00      	ldr	r3, [sp, #0]
 800cd48:	6163      	str	r3, [r4, #20]
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	6120      	str	r0, [r4, #16]
 800cd4e:	b15b      	cbz	r3, 800cd68 <__smakebuf_r+0x74>
 800cd50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd54:	4630      	mov	r0, r6
 800cd56:	f000 fc2d 	bl	800d5b4 <_isatty_r>
 800cd5a:	b128      	cbz	r0, 800cd68 <__smakebuf_r+0x74>
 800cd5c:	89a3      	ldrh	r3, [r4, #12]
 800cd5e:	f023 0303 	bic.w	r3, r3, #3
 800cd62:	f043 0301 	orr.w	r3, r3, #1
 800cd66:	81a3      	strh	r3, [r4, #12]
 800cd68:	89a0      	ldrh	r0, [r4, #12]
 800cd6a:	4305      	orrs	r5, r0
 800cd6c:	81a5      	strh	r5, [r4, #12]
 800cd6e:	e7cd      	b.n	800cd0c <__smakebuf_r+0x18>
 800cd70:	0800cb05 	.word	0x0800cb05

0800cd74 <_free_r>:
 800cd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd76:	2900      	cmp	r1, #0
 800cd78:	d048      	beq.n	800ce0c <_free_r+0x98>
 800cd7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd7e:	9001      	str	r0, [sp, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f1a1 0404 	sub.w	r4, r1, #4
 800cd86:	bfb8      	it	lt
 800cd88:	18e4      	addlt	r4, r4, r3
 800cd8a:	f000 fc35 	bl	800d5f8 <__malloc_lock>
 800cd8e:	4a20      	ldr	r2, [pc, #128]	; (800ce10 <_free_r+0x9c>)
 800cd90:	9801      	ldr	r0, [sp, #4]
 800cd92:	6813      	ldr	r3, [r2, #0]
 800cd94:	4615      	mov	r5, r2
 800cd96:	b933      	cbnz	r3, 800cda6 <_free_r+0x32>
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	6014      	str	r4, [r2, #0]
 800cd9c:	b003      	add	sp, #12
 800cd9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cda2:	f000 bc2f 	b.w	800d604 <__malloc_unlock>
 800cda6:	42a3      	cmp	r3, r4
 800cda8:	d90b      	bls.n	800cdc2 <_free_r+0x4e>
 800cdaa:	6821      	ldr	r1, [r4, #0]
 800cdac:	1862      	adds	r2, r4, r1
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	bf04      	itt	eq
 800cdb2:	681a      	ldreq	r2, [r3, #0]
 800cdb4:	685b      	ldreq	r3, [r3, #4]
 800cdb6:	6063      	str	r3, [r4, #4]
 800cdb8:	bf04      	itt	eq
 800cdba:	1852      	addeq	r2, r2, r1
 800cdbc:	6022      	streq	r2, [r4, #0]
 800cdbe:	602c      	str	r4, [r5, #0]
 800cdc0:	e7ec      	b.n	800cd9c <_free_r+0x28>
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	b10b      	cbz	r3, 800cdcc <_free_r+0x58>
 800cdc8:	42a3      	cmp	r3, r4
 800cdca:	d9fa      	bls.n	800cdc2 <_free_r+0x4e>
 800cdcc:	6811      	ldr	r1, [r2, #0]
 800cdce:	1855      	adds	r5, r2, r1
 800cdd0:	42a5      	cmp	r5, r4
 800cdd2:	d10b      	bne.n	800cdec <_free_r+0x78>
 800cdd4:	6824      	ldr	r4, [r4, #0]
 800cdd6:	4421      	add	r1, r4
 800cdd8:	1854      	adds	r4, r2, r1
 800cdda:	42a3      	cmp	r3, r4
 800cddc:	6011      	str	r1, [r2, #0]
 800cdde:	d1dd      	bne.n	800cd9c <_free_r+0x28>
 800cde0:	681c      	ldr	r4, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	6053      	str	r3, [r2, #4]
 800cde6:	4421      	add	r1, r4
 800cde8:	6011      	str	r1, [r2, #0]
 800cdea:	e7d7      	b.n	800cd9c <_free_r+0x28>
 800cdec:	d902      	bls.n	800cdf4 <_free_r+0x80>
 800cdee:	230c      	movs	r3, #12
 800cdf0:	6003      	str	r3, [r0, #0]
 800cdf2:	e7d3      	b.n	800cd9c <_free_r+0x28>
 800cdf4:	6825      	ldr	r5, [r4, #0]
 800cdf6:	1961      	adds	r1, r4, r5
 800cdf8:	428b      	cmp	r3, r1
 800cdfa:	bf04      	itt	eq
 800cdfc:	6819      	ldreq	r1, [r3, #0]
 800cdfe:	685b      	ldreq	r3, [r3, #4]
 800ce00:	6063      	str	r3, [r4, #4]
 800ce02:	bf04      	itt	eq
 800ce04:	1949      	addeq	r1, r1, r5
 800ce06:	6021      	streq	r1, [r4, #0]
 800ce08:	6054      	str	r4, [r2, #4]
 800ce0a:	e7c7      	b.n	800cd9c <_free_r+0x28>
 800ce0c:	b003      	add	sp, #12
 800ce0e:	bd30      	pop	{r4, r5, pc}
 800ce10:	20003570 	.word	0x20003570

0800ce14 <_malloc_r>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	1ccd      	adds	r5, r1, #3
 800ce18:	f025 0503 	bic.w	r5, r5, #3
 800ce1c:	3508      	adds	r5, #8
 800ce1e:	2d0c      	cmp	r5, #12
 800ce20:	bf38      	it	cc
 800ce22:	250c      	movcc	r5, #12
 800ce24:	2d00      	cmp	r5, #0
 800ce26:	4606      	mov	r6, r0
 800ce28:	db01      	blt.n	800ce2e <_malloc_r+0x1a>
 800ce2a:	42a9      	cmp	r1, r5
 800ce2c:	d903      	bls.n	800ce36 <_malloc_r+0x22>
 800ce2e:	230c      	movs	r3, #12
 800ce30:	6033      	str	r3, [r6, #0]
 800ce32:	2000      	movs	r0, #0
 800ce34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce36:	f000 fbdf 	bl	800d5f8 <__malloc_lock>
 800ce3a:	4921      	ldr	r1, [pc, #132]	; (800cec0 <_malloc_r+0xac>)
 800ce3c:	680a      	ldr	r2, [r1, #0]
 800ce3e:	4614      	mov	r4, r2
 800ce40:	b99c      	cbnz	r4, 800ce6a <_malloc_r+0x56>
 800ce42:	4f20      	ldr	r7, [pc, #128]	; (800cec4 <_malloc_r+0xb0>)
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	b923      	cbnz	r3, 800ce52 <_malloc_r+0x3e>
 800ce48:	4621      	mov	r1, r4
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f000 fb2a 	bl	800d4a4 <_sbrk_r>
 800ce50:	6038      	str	r0, [r7, #0]
 800ce52:	4629      	mov	r1, r5
 800ce54:	4630      	mov	r0, r6
 800ce56:	f000 fb25 	bl	800d4a4 <_sbrk_r>
 800ce5a:	1c43      	adds	r3, r0, #1
 800ce5c:	d123      	bne.n	800cea6 <_malloc_r+0x92>
 800ce5e:	230c      	movs	r3, #12
 800ce60:	6033      	str	r3, [r6, #0]
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 fbce 	bl	800d604 <__malloc_unlock>
 800ce68:	e7e3      	b.n	800ce32 <_malloc_r+0x1e>
 800ce6a:	6823      	ldr	r3, [r4, #0]
 800ce6c:	1b5b      	subs	r3, r3, r5
 800ce6e:	d417      	bmi.n	800cea0 <_malloc_r+0x8c>
 800ce70:	2b0b      	cmp	r3, #11
 800ce72:	d903      	bls.n	800ce7c <_malloc_r+0x68>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	441c      	add	r4, r3
 800ce78:	6025      	str	r5, [r4, #0]
 800ce7a:	e004      	b.n	800ce86 <_malloc_r+0x72>
 800ce7c:	6863      	ldr	r3, [r4, #4]
 800ce7e:	42a2      	cmp	r2, r4
 800ce80:	bf0c      	ite	eq
 800ce82:	600b      	streq	r3, [r1, #0]
 800ce84:	6053      	strne	r3, [r2, #4]
 800ce86:	4630      	mov	r0, r6
 800ce88:	f000 fbbc 	bl	800d604 <__malloc_unlock>
 800ce8c:	f104 000b 	add.w	r0, r4, #11
 800ce90:	1d23      	adds	r3, r4, #4
 800ce92:	f020 0007 	bic.w	r0, r0, #7
 800ce96:	1ac2      	subs	r2, r0, r3
 800ce98:	d0cc      	beq.n	800ce34 <_malloc_r+0x20>
 800ce9a:	1a1b      	subs	r3, r3, r0
 800ce9c:	50a3      	str	r3, [r4, r2]
 800ce9e:	e7c9      	b.n	800ce34 <_malloc_r+0x20>
 800cea0:	4622      	mov	r2, r4
 800cea2:	6864      	ldr	r4, [r4, #4]
 800cea4:	e7cc      	b.n	800ce40 <_malloc_r+0x2c>
 800cea6:	1cc4      	adds	r4, r0, #3
 800cea8:	f024 0403 	bic.w	r4, r4, #3
 800ceac:	42a0      	cmp	r0, r4
 800ceae:	d0e3      	beq.n	800ce78 <_malloc_r+0x64>
 800ceb0:	1a21      	subs	r1, r4, r0
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f000 faf6 	bl	800d4a4 <_sbrk_r>
 800ceb8:	3001      	adds	r0, #1
 800ceba:	d1dd      	bne.n	800ce78 <_malloc_r+0x64>
 800cebc:	e7cf      	b.n	800ce5e <_malloc_r+0x4a>
 800cebe:	bf00      	nop
 800cec0:	20003570 	.word	0x20003570
 800cec4:	20003574 	.word	0x20003574

0800cec8 <__sfputc_r>:
 800cec8:	6893      	ldr	r3, [r2, #8]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	b410      	push	{r4}
 800ced0:	6093      	str	r3, [r2, #8]
 800ced2:	da08      	bge.n	800cee6 <__sfputc_r+0x1e>
 800ced4:	6994      	ldr	r4, [r2, #24]
 800ced6:	42a3      	cmp	r3, r4
 800ced8:	db01      	blt.n	800cede <__sfputc_r+0x16>
 800ceda:	290a      	cmp	r1, #10
 800cedc:	d103      	bne.n	800cee6 <__sfputc_r+0x1e>
 800cede:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cee2:	f7ff bc69 	b.w	800c7b8 <__swbuf_r>
 800cee6:	6813      	ldr	r3, [r2, #0]
 800cee8:	1c58      	adds	r0, r3, #1
 800ceea:	6010      	str	r0, [r2, #0]
 800ceec:	7019      	strb	r1, [r3, #0]
 800ceee:	4608      	mov	r0, r1
 800cef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <__sfputs_r>:
 800cef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef8:	4606      	mov	r6, r0
 800cefa:	460f      	mov	r7, r1
 800cefc:	4614      	mov	r4, r2
 800cefe:	18d5      	adds	r5, r2, r3
 800cf00:	42ac      	cmp	r4, r5
 800cf02:	d101      	bne.n	800cf08 <__sfputs_r+0x12>
 800cf04:	2000      	movs	r0, #0
 800cf06:	e007      	b.n	800cf18 <__sfputs_r+0x22>
 800cf08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0c:	463a      	mov	r2, r7
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff ffda 	bl	800cec8 <__sfputc_r>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d1f3      	bne.n	800cf00 <__sfputs_r+0xa>
 800cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf1c <_vfiprintf_r>:
 800cf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf20:	460d      	mov	r5, r1
 800cf22:	b09d      	sub	sp, #116	; 0x74
 800cf24:	4614      	mov	r4, r2
 800cf26:	4698      	mov	r8, r3
 800cf28:	4606      	mov	r6, r0
 800cf2a:	b118      	cbz	r0, 800cf34 <_vfiprintf_r+0x18>
 800cf2c:	6983      	ldr	r3, [r0, #24]
 800cf2e:	b90b      	cbnz	r3, 800cf34 <_vfiprintf_r+0x18>
 800cf30:	f7ff fe1c 	bl	800cb6c <__sinit>
 800cf34:	4b89      	ldr	r3, [pc, #548]	; (800d15c <_vfiprintf_r+0x240>)
 800cf36:	429d      	cmp	r5, r3
 800cf38:	d11b      	bne.n	800cf72 <_vfiprintf_r+0x56>
 800cf3a:	6875      	ldr	r5, [r6, #4]
 800cf3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf3e:	07d9      	lsls	r1, r3, #31
 800cf40:	d405      	bmi.n	800cf4e <_vfiprintf_r+0x32>
 800cf42:	89ab      	ldrh	r3, [r5, #12]
 800cf44:	059a      	lsls	r2, r3, #22
 800cf46:	d402      	bmi.n	800cf4e <_vfiprintf_r+0x32>
 800cf48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf4a:	f7ff fead 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800cf4e:	89ab      	ldrh	r3, [r5, #12]
 800cf50:	071b      	lsls	r3, r3, #28
 800cf52:	d501      	bpl.n	800cf58 <_vfiprintf_r+0x3c>
 800cf54:	692b      	ldr	r3, [r5, #16]
 800cf56:	b9eb      	cbnz	r3, 800cf94 <_vfiprintf_r+0x78>
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7ff fc7e 	bl	800c85c <__swsetup_r>
 800cf60:	b1c0      	cbz	r0, 800cf94 <_vfiprintf_r+0x78>
 800cf62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf64:	07dc      	lsls	r4, r3, #31
 800cf66:	d50e      	bpl.n	800cf86 <_vfiprintf_r+0x6a>
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf6c:	b01d      	add	sp, #116	; 0x74
 800cf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf72:	4b7b      	ldr	r3, [pc, #492]	; (800d160 <_vfiprintf_r+0x244>)
 800cf74:	429d      	cmp	r5, r3
 800cf76:	d101      	bne.n	800cf7c <_vfiprintf_r+0x60>
 800cf78:	68b5      	ldr	r5, [r6, #8]
 800cf7a:	e7df      	b.n	800cf3c <_vfiprintf_r+0x20>
 800cf7c:	4b79      	ldr	r3, [pc, #484]	; (800d164 <_vfiprintf_r+0x248>)
 800cf7e:	429d      	cmp	r5, r3
 800cf80:	bf08      	it	eq
 800cf82:	68f5      	ldreq	r5, [r6, #12]
 800cf84:	e7da      	b.n	800cf3c <_vfiprintf_r+0x20>
 800cf86:	89ab      	ldrh	r3, [r5, #12]
 800cf88:	0598      	lsls	r0, r3, #22
 800cf8a:	d4ed      	bmi.n	800cf68 <_vfiprintf_r+0x4c>
 800cf8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf8e:	f7ff fe8c 	bl	800ccaa <__retarget_lock_release_recursive>
 800cf92:	e7e9      	b.n	800cf68 <_vfiprintf_r+0x4c>
 800cf94:	2300      	movs	r3, #0
 800cf96:	9309      	str	r3, [sp, #36]	; 0x24
 800cf98:	2320      	movs	r3, #32
 800cf9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa2:	2330      	movs	r3, #48	; 0x30
 800cfa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d168 <_vfiprintf_r+0x24c>
 800cfa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfac:	f04f 0901 	mov.w	r9, #1
 800cfb0:	4623      	mov	r3, r4
 800cfb2:	469a      	mov	sl, r3
 800cfb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfb8:	b10a      	cbz	r2, 800cfbe <_vfiprintf_r+0xa2>
 800cfba:	2a25      	cmp	r2, #37	; 0x25
 800cfbc:	d1f9      	bne.n	800cfb2 <_vfiprintf_r+0x96>
 800cfbe:	ebba 0b04 	subs.w	fp, sl, r4
 800cfc2:	d00b      	beq.n	800cfdc <_vfiprintf_r+0xc0>
 800cfc4:	465b      	mov	r3, fp
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4630      	mov	r0, r6
 800cfcc:	f7ff ff93 	bl	800cef6 <__sfputs_r>
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	f000 80aa 	beq.w	800d12a <_vfiprintf_r+0x20e>
 800cfd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfd8:	445a      	add	r2, fp
 800cfda:	9209      	str	r2, [sp, #36]	; 0x24
 800cfdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f000 80a2 	beq.w	800d12a <_vfiprintf_r+0x20e>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cff0:	f10a 0a01 	add.w	sl, sl, #1
 800cff4:	9304      	str	r3, [sp, #16]
 800cff6:	9307      	str	r3, [sp, #28]
 800cff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cffc:	931a      	str	r3, [sp, #104]	; 0x68
 800cffe:	4654      	mov	r4, sl
 800d000:	2205      	movs	r2, #5
 800d002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d006:	4858      	ldr	r0, [pc, #352]	; (800d168 <_vfiprintf_r+0x24c>)
 800d008:	f7f3 f8e2 	bl	80001d0 <memchr>
 800d00c:	9a04      	ldr	r2, [sp, #16]
 800d00e:	b9d8      	cbnz	r0, 800d048 <_vfiprintf_r+0x12c>
 800d010:	06d1      	lsls	r1, r2, #27
 800d012:	bf44      	itt	mi
 800d014:	2320      	movmi	r3, #32
 800d016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d01a:	0713      	lsls	r3, r2, #28
 800d01c:	bf44      	itt	mi
 800d01e:	232b      	movmi	r3, #43	; 0x2b
 800d020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d024:	f89a 3000 	ldrb.w	r3, [sl]
 800d028:	2b2a      	cmp	r3, #42	; 0x2a
 800d02a:	d015      	beq.n	800d058 <_vfiprintf_r+0x13c>
 800d02c:	9a07      	ldr	r2, [sp, #28]
 800d02e:	4654      	mov	r4, sl
 800d030:	2000      	movs	r0, #0
 800d032:	f04f 0c0a 	mov.w	ip, #10
 800d036:	4621      	mov	r1, r4
 800d038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d03c:	3b30      	subs	r3, #48	; 0x30
 800d03e:	2b09      	cmp	r3, #9
 800d040:	d94e      	bls.n	800d0e0 <_vfiprintf_r+0x1c4>
 800d042:	b1b0      	cbz	r0, 800d072 <_vfiprintf_r+0x156>
 800d044:	9207      	str	r2, [sp, #28]
 800d046:	e014      	b.n	800d072 <_vfiprintf_r+0x156>
 800d048:	eba0 0308 	sub.w	r3, r0, r8
 800d04c:	fa09 f303 	lsl.w	r3, r9, r3
 800d050:	4313      	orrs	r3, r2
 800d052:	9304      	str	r3, [sp, #16]
 800d054:	46a2      	mov	sl, r4
 800d056:	e7d2      	b.n	800cffe <_vfiprintf_r+0xe2>
 800d058:	9b03      	ldr	r3, [sp, #12]
 800d05a:	1d19      	adds	r1, r3, #4
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	9103      	str	r1, [sp, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	bfbb      	ittet	lt
 800d064:	425b      	neglt	r3, r3
 800d066:	f042 0202 	orrlt.w	r2, r2, #2
 800d06a:	9307      	strge	r3, [sp, #28]
 800d06c:	9307      	strlt	r3, [sp, #28]
 800d06e:	bfb8      	it	lt
 800d070:	9204      	strlt	r2, [sp, #16]
 800d072:	7823      	ldrb	r3, [r4, #0]
 800d074:	2b2e      	cmp	r3, #46	; 0x2e
 800d076:	d10c      	bne.n	800d092 <_vfiprintf_r+0x176>
 800d078:	7863      	ldrb	r3, [r4, #1]
 800d07a:	2b2a      	cmp	r3, #42	; 0x2a
 800d07c:	d135      	bne.n	800d0ea <_vfiprintf_r+0x1ce>
 800d07e:	9b03      	ldr	r3, [sp, #12]
 800d080:	1d1a      	adds	r2, r3, #4
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	9203      	str	r2, [sp, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	bfb8      	it	lt
 800d08a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d08e:	3402      	adds	r4, #2
 800d090:	9305      	str	r3, [sp, #20]
 800d092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d178 <_vfiprintf_r+0x25c>
 800d096:	7821      	ldrb	r1, [r4, #0]
 800d098:	2203      	movs	r2, #3
 800d09a:	4650      	mov	r0, sl
 800d09c:	f7f3 f898 	bl	80001d0 <memchr>
 800d0a0:	b140      	cbz	r0, 800d0b4 <_vfiprintf_r+0x198>
 800d0a2:	2340      	movs	r3, #64	; 0x40
 800d0a4:	eba0 000a 	sub.w	r0, r0, sl
 800d0a8:	fa03 f000 	lsl.w	r0, r3, r0
 800d0ac:	9b04      	ldr	r3, [sp, #16]
 800d0ae:	4303      	orrs	r3, r0
 800d0b0:	3401      	adds	r4, #1
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b8:	482c      	ldr	r0, [pc, #176]	; (800d16c <_vfiprintf_r+0x250>)
 800d0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0be:	2206      	movs	r2, #6
 800d0c0:	f7f3 f886 	bl	80001d0 <memchr>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d03f      	beq.n	800d148 <_vfiprintf_r+0x22c>
 800d0c8:	4b29      	ldr	r3, [pc, #164]	; (800d170 <_vfiprintf_r+0x254>)
 800d0ca:	bb1b      	cbnz	r3, 800d114 <_vfiprintf_r+0x1f8>
 800d0cc:	9b03      	ldr	r3, [sp, #12]
 800d0ce:	3307      	adds	r3, #7
 800d0d0:	f023 0307 	bic.w	r3, r3, #7
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0da:	443b      	add	r3, r7
 800d0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0de:	e767      	b.n	800cfb0 <_vfiprintf_r+0x94>
 800d0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7a5      	b.n	800d036 <_vfiprintf_r+0x11a>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	3401      	adds	r4, #1
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	f04f 0c0a 	mov.w	ip, #10
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0fc:	3a30      	subs	r2, #48	; 0x30
 800d0fe:	2a09      	cmp	r2, #9
 800d100:	d903      	bls.n	800d10a <_vfiprintf_r+0x1ee>
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0c5      	beq.n	800d092 <_vfiprintf_r+0x176>
 800d106:	9105      	str	r1, [sp, #20]
 800d108:	e7c3      	b.n	800d092 <_vfiprintf_r+0x176>
 800d10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d10e:	4604      	mov	r4, r0
 800d110:	2301      	movs	r3, #1
 800d112:	e7f0      	b.n	800d0f6 <_vfiprintf_r+0x1da>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b16      	ldr	r3, [pc, #88]	; (800d174 <_vfiprintf_r+0x258>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4630      	mov	r0, r6
 800d120:	f3af 8000 	nop.w
 800d124:	4607      	mov	r7, r0
 800d126:	1c78      	adds	r0, r7, #1
 800d128:	d1d6      	bne.n	800d0d8 <_vfiprintf_r+0x1bc>
 800d12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d12c:	07d9      	lsls	r1, r3, #31
 800d12e:	d405      	bmi.n	800d13c <_vfiprintf_r+0x220>
 800d130:	89ab      	ldrh	r3, [r5, #12]
 800d132:	059a      	lsls	r2, r3, #22
 800d134:	d402      	bmi.n	800d13c <_vfiprintf_r+0x220>
 800d136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d138:	f7ff fdb7 	bl	800ccaa <__retarget_lock_release_recursive>
 800d13c:	89ab      	ldrh	r3, [r5, #12]
 800d13e:	065b      	lsls	r3, r3, #25
 800d140:	f53f af12 	bmi.w	800cf68 <_vfiprintf_r+0x4c>
 800d144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d146:	e711      	b.n	800cf6c <_vfiprintf_r+0x50>
 800d148:	ab03      	add	r3, sp, #12
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	462a      	mov	r2, r5
 800d14e:	4b09      	ldr	r3, [pc, #36]	; (800d174 <_vfiprintf_r+0x258>)
 800d150:	a904      	add	r1, sp, #16
 800d152:	4630      	mov	r0, r6
 800d154:	f000 f880 	bl	800d258 <_printf_i>
 800d158:	e7e4      	b.n	800d124 <_vfiprintf_r+0x208>
 800d15a:	bf00      	nop
 800d15c:	0800d94c 	.word	0x0800d94c
 800d160:	0800d96c 	.word	0x0800d96c
 800d164:	0800d92c 	.word	0x0800d92c
 800d168:	0800d98c 	.word	0x0800d98c
 800d16c:	0800d996 	.word	0x0800d996
 800d170:	00000000 	.word	0x00000000
 800d174:	0800cef7 	.word	0x0800cef7
 800d178:	0800d992 	.word	0x0800d992

0800d17c <_printf_common>:
 800d17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d180:	4616      	mov	r6, r2
 800d182:	4699      	mov	r9, r3
 800d184:	688a      	ldr	r2, [r1, #8]
 800d186:	690b      	ldr	r3, [r1, #16]
 800d188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d18c:	4293      	cmp	r3, r2
 800d18e:	bfb8      	it	lt
 800d190:	4613      	movlt	r3, r2
 800d192:	6033      	str	r3, [r6, #0]
 800d194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d198:	4607      	mov	r7, r0
 800d19a:	460c      	mov	r4, r1
 800d19c:	b10a      	cbz	r2, 800d1a2 <_printf_common+0x26>
 800d19e:	3301      	adds	r3, #1
 800d1a0:	6033      	str	r3, [r6, #0]
 800d1a2:	6823      	ldr	r3, [r4, #0]
 800d1a4:	0699      	lsls	r1, r3, #26
 800d1a6:	bf42      	ittt	mi
 800d1a8:	6833      	ldrmi	r3, [r6, #0]
 800d1aa:	3302      	addmi	r3, #2
 800d1ac:	6033      	strmi	r3, [r6, #0]
 800d1ae:	6825      	ldr	r5, [r4, #0]
 800d1b0:	f015 0506 	ands.w	r5, r5, #6
 800d1b4:	d106      	bne.n	800d1c4 <_printf_common+0x48>
 800d1b6:	f104 0a19 	add.w	sl, r4, #25
 800d1ba:	68e3      	ldr	r3, [r4, #12]
 800d1bc:	6832      	ldr	r2, [r6, #0]
 800d1be:	1a9b      	subs	r3, r3, r2
 800d1c0:	42ab      	cmp	r3, r5
 800d1c2:	dc26      	bgt.n	800d212 <_printf_common+0x96>
 800d1c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d1c8:	1e13      	subs	r3, r2, #0
 800d1ca:	6822      	ldr	r2, [r4, #0]
 800d1cc:	bf18      	it	ne
 800d1ce:	2301      	movne	r3, #1
 800d1d0:	0692      	lsls	r2, r2, #26
 800d1d2:	d42b      	bmi.n	800d22c <_printf_common+0xb0>
 800d1d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1d8:	4649      	mov	r1, r9
 800d1da:	4638      	mov	r0, r7
 800d1dc:	47c0      	blx	r8
 800d1de:	3001      	adds	r0, #1
 800d1e0:	d01e      	beq.n	800d220 <_printf_common+0xa4>
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	68e5      	ldr	r5, [r4, #12]
 800d1e6:	6832      	ldr	r2, [r6, #0]
 800d1e8:	f003 0306 	and.w	r3, r3, #6
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	bf08      	it	eq
 800d1f0:	1aad      	subeq	r5, r5, r2
 800d1f2:	68a3      	ldr	r3, [r4, #8]
 800d1f4:	6922      	ldr	r2, [r4, #16]
 800d1f6:	bf0c      	ite	eq
 800d1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1fc:	2500      	movne	r5, #0
 800d1fe:	4293      	cmp	r3, r2
 800d200:	bfc4      	itt	gt
 800d202:	1a9b      	subgt	r3, r3, r2
 800d204:	18ed      	addgt	r5, r5, r3
 800d206:	2600      	movs	r6, #0
 800d208:	341a      	adds	r4, #26
 800d20a:	42b5      	cmp	r5, r6
 800d20c:	d11a      	bne.n	800d244 <_printf_common+0xc8>
 800d20e:	2000      	movs	r0, #0
 800d210:	e008      	b.n	800d224 <_printf_common+0xa8>
 800d212:	2301      	movs	r3, #1
 800d214:	4652      	mov	r2, sl
 800d216:	4649      	mov	r1, r9
 800d218:	4638      	mov	r0, r7
 800d21a:	47c0      	blx	r8
 800d21c:	3001      	adds	r0, #1
 800d21e:	d103      	bne.n	800d228 <_printf_common+0xac>
 800d220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d228:	3501      	adds	r5, #1
 800d22a:	e7c6      	b.n	800d1ba <_printf_common+0x3e>
 800d22c:	18e1      	adds	r1, r4, r3
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	2030      	movs	r0, #48	; 0x30
 800d232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d236:	4422      	add	r2, r4
 800d238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d23c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d240:	3302      	adds	r3, #2
 800d242:	e7c7      	b.n	800d1d4 <_printf_common+0x58>
 800d244:	2301      	movs	r3, #1
 800d246:	4622      	mov	r2, r4
 800d248:	4649      	mov	r1, r9
 800d24a:	4638      	mov	r0, r7
 800d24c:	47c0      	blx	r8
 800d24e:	3001      	adds	r0, #1
 800d250:	d0e6      	beq.n	800d220 <_printf_common+0xa4>
 800d252:	3601      	adds	r6, #1
 800d254:	e7d9      	b.n	800d20a <_printf_common+0x8e>
	...

0800d258 <_printf_i>:
 800d258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d25c:	460c      	mov	r4, r1
 800d25e:	4691      	mov	r9, r2
 800d260:	7e27      	ldrb	r7, [r4, #24]
 800d262:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d264:	2f78      	cmp	r7, #120	; 0x78
 800d266:	4680      	mov	r8, r0
 800d268:	469a      	mov	sl, r3
 800d26a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d26e:	d807      	bhi.n	800d280 <_printf_i+0x28>
 800d270:	2f62      	cmp	r7, #98	; 0x62
 800d272:	d80a      	bhi.n	800d28a <_printf_i+0x32>
 800d274:	2f00      	cmp	r7, #0
 800d276:	f000 80d8 	beq.w	800d42a <_printf_i+0x1d2>
 800d27a:	2f58      	cmp	r7, #88	; 0x58
 800d27c:	f000 80a3 	beq.w	800d3c6 <_printf_i+0x16e>
 800d280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d288:	e03a      	b.n	800d300 <_printf_i+0xa8>
 800d28a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d28e:	2b15      	cmp	r3, #21
 800d290:	d8f6      	bhi.n	800d280 <_printf_i+0x28>
 800d292:	a001      	add	r0, pc, #4	; (adr r0, 800d298 <_printf_i+0x40>)
 800d294:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d298:	0800d2f1 	.word	0x0800d2f1
 800d29c:	0800d305 	.word	0x0800d305
 800d2a0:	0800d281 	.word	0x0800d281
 800d2a4:	0800d281 	.word	0x0800d281
 800d2a8:	0800d281 	.word	0x0800d281
 800d2ac:	0800d281 	.word	0x0800d281
 800d2b0:	0800d305 	.word	0x0800d305
 800d2b4:	0800d281 	.word	0x0800d281
 800d2b8:	0800d281 	.word	0x0800d281
 800d2bc:	0800d281 	.word	0x0800d281
 800d2c0:	0800d281 	.word	0x0800d281
 800d2c4:	0800d411 	.word	0x0800d411
 800d2c8:	0800d335 	.word	0x0800d335
 800d2cc:	0800d3f3 	.word	0x0800d3f3
 800d2d0:	0800d281 	.word	0x0800d281
 800d2d4:	0800d281 	.word	0x0800d281
 800d2d8:	0800d433 	.word	0x0800d433
 800d2dc:	0800d281 	.word	0x0800d281
 800d2e0:	0800d335 	.word	0x0800d335
 800d2e4:	0800d281 	.word	0x0800d281
 800d2e8:	0800d281 	.word	0x0800d281
 800d2ec:	0800d3fb 	.word	0x0800d3fb
 800d2f0:	680b      	ldr	r3, [r1, #0]
 800d2f2:	1d1a      	adds	r2, r3, #4
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	600a      	str	r2, [r1, #0]
 800d2f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d300:	2301      	movs	r3, #1
 800d302:	e0a3      	b.n	800d44c <_printf_i+0x1f4>
 800d304:	6825      	ldr	r5, [r4, #0]
 800d306:	6808      	ldr	r0, [r1, #0]
 800d308:	062e      	lsls	r6, r5, #24
 800d30a:	f100 0304 	add.w	r3, r0, #4
 800d30e:	d50a      	bpl.n	800d326 <_printf_i+0xce>
 800d310:	6805      	ldr	r5, [r0, #0]
 800d312:	600b      	str	r3, [r1, #0]
 800d314:	2d00      	cmp	r5, #0
 800d316:	da03      	bge.n	800d320 <_printf_i+0xc8>
 800d318:	232d      	movs	r3, #45	; 0x2d
 800d31a:	426d      	negs	r5, r5
 800d31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d320:	485e      	ldr	r0, [pc, #376]	; (800d49c <_printf_i+0x244>)
 800d322:	230a      	movs	r3, #10
 800d324:	e019      	b.n	800d35a <_printf_i+0x102>
 800d326:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d32a:	6805      	ldr	r5, [r0, #0]
 800d32c:	600b      	str	r3, [r1, #0]
 800d32e:	bf18      	it	ne
 800d330:	b22d      	sxthne	r5, r5
 800d332:	e7ef      	b.n	800d314 <_printf_i+0xbc>
 800d334:	680b      	ldr	r3, [r1, #0]
 800d336:	6825      	ldr	r5, [r4, #0]
 800d338:	1d18      	adds	r0, r3, #4
 800d33a:	6008      	str	r0, [r1, #0]
 800d33c:	0628      	lsls	r0, r5, #24
 800d33e:	d501      	bpl.n	800d344 <_printf_i+0xec>
 800d340:	681d      	ldr	r5, [r3, #0]
 800d342:	e002      	b.n	800d34a <_printf_i+0xf2>
 800d344:	0669      	lsls	r1, r5, #25
 800d346:	d5fb      	bpl.n	800d340 <_printf_i+0xe8>
 800d348:	881d      	ldrh	r5, [r3, #0]
 800d34a:	4854      	ldr	r0, [pc, #336]	; (800d49c <_printf_i+0x244>)
 800d34c:	2f6f      	cmp	r7, #111	; 0x6f
 800d34e:	bf0c      	ite	eq
 800d350:	2308      	moveq	r3, #8
 800d352:	230a      	movne	r3, #10
 800d354:	2100      	movs	r1, #0
 800d356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d35a:	6866      	ldr	r6, [r4, #4]
 800d35c:	60a6      	str	r6, [r4, #8]
 800d35e:	2e00      	cmp	r6, #0
 800d360:	bfa2      	ittt	ge
 800d362:	6821      	ldrge	r1, [r4, #0]
 800d364:	f021 0104 	bicge.w	r1, r1, #4
 800d368:	6021      	strge	r1, [r4, #0]
 800d36a:	b90d      	cbnz	r5, 800d370 <_printf_i+0x118>
 800d36c:	2e00      	cmp	r6, #0
 800d36e:	d04d      	beq.n	800d40c <_printf_i+0x1b4>
 800d370:	4616      	mov	r6, r2
 800d372:	fbb5 f1f3 	udiv	r1, r5, r3
 800d376:	fb03 5711 	mls	r7, r3, r1, r5
 800d37a:	5dc7      	ldrb	r7, [r0, r7]
 800d37c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d380:	462f      	mov	r7, r5
 800d382:	42bb      	cmp	r3, r7
 800d384:	460d      	mov	r5, r1
 800d386:	d9f4      	bls.n	800d372 <_printf_i+0x11a>
 800d388:	2b08      	cmp	r3, #8
 800d38a:	d10b      	bne.n	800d3a4 <_printf_i+0x14c>
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	07df      	lsls	r7, r3, #31
 800d390:	d508      	bpl.n	800d3a4 <_printf_i+0x14c>
 800d392:	6923      	ldr	r3, [r4, #16]
 800d394:	6861      	ldr	r1, [r4, #4]
 800d396:	4299      	cmp	r1, r3
 800d398:	bfde      	ittt	le
 800d39a:	2330      	movle	r3, #48	; 0x30
 800d39c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d3a4:	1b92      	subs	r2, r2, r6
 800d3a6:	6122      	str	r2, [r4, #16]
 800d3a8:	f8cd a000 	str.w	sl, [sp]
 800d3ac:	464b      	mov	r3, r9
 800d3ae:	aa03      	add	r2, sp, #12
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	f7ff fee2 	bl	800d17c <_printf_common>
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d14c      	bne.n	800d456 <_printf_i+0x1fe>
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3c0:	b004      	add	sp, #16
 800d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c6:	4835      	ldr	r0, [pc, #212]	; (800d49c <_printf_i+0x244>)
 800d3c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	680e      	ldr	r6, [r1, #0]
 800d3d0:	061f      	lsls	r7, r3, #24
 800d3d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d3d6:	600e      	str	r6, [r1, #0]
 800d3d8:	d514      	bpl.n	800d404 <_printf_i+0x1ac>
 800d3da:	07d9      	lsls	r1, r3, #31
 800d3dc:	bf44      	itt	mi
 800d3de:	f043 0320 	orrmi.w	r3, r3, #32
 800d3e2:	6023      	strmi	r3, [r4, #0]
 800d3e4:	b91d      	cbnz	r5, 800d3ee <_printf_i+0x196>
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	f023 0320 	bic.w	r3, r3, #32
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	2310      	movs	r3, #16
 800d3f0:	e7b0      	b.n	800d354 <_printf_i+0xfc>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	f043 0320 	orr.w	r3, r3, #32
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	2378      	movs	r3, #120	; 0x78
 800d3fc:	4828      	ldr	r0, [pc, #160]	; (800d4a0 <_printf_i+0x248>)
 800d3fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d402:	e7e3      	b.n	800d3cc <_printf_i+0x174>
 800d404:	065e      	lsls	r6, r3, #25
 800d406:	bf48      	it	mi
 800d408:	b2ad      	uxthmi	r5, r5
 800d40a:	e7e6      	b.n	800d3da <_printf_i+0x182>
 800d40c:	4616      	mov	r6, r2
 800d40e:	e7bb      	b.n	800d388 <_printf_i+0x130>
 800d410:	680b      	ldr	r3, [r1, #0]
 800d412:	6826      	ldr	r6, [r4, #0]
 800d414:	6960      	ldr	r0, [r4, #20]
 800d416:	1d1d      	adds	r5, r3, #4
 800d418:	600d      	str	r5, [r1, #0]
 800d41a:	0635      	lsls	r5, r6, #24
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	d501      	bpl.n	800d424 <_printf_i+0x1cc>
 800d420:	6018      	str	r0, [r3, #0]
 800d422:	e002      	b.n	800d42a <_printf_i+0x1d2>
 800d424:	0671      	lsls	r1, r6, #25
 800d426:	d5fb      	bpl.n	800d420 <_printf_i+0x1c8>
 800d428:	8018      	strh	r0, [r3, #0]
 800d42a:	2300      	movs	r3, #0
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	4616      	mov	r6, r2
 800d430:	e7ba      	b.n	800d3a8 <_printf_i+0x150>
 800d432:	680b      	ldr	r3, [r1, #0]
 800d434:	1d1a      	adds	r2, r3, #4
 800d436:	600a      	str	r2, [r1, #0]
 800d438:	681e      	ldr	r6, [r3, #0]
 800d43a:	6862      	ldr	r2, [r4, #4]
 800d43c:	2100      	movs	r1, #0
 800d43e:	4630      	mov	r0, r6
 800d440:	f7f2 fec6 	bl	80001d0 <memchr>
 800d444:	b108      	cbz	r0, 800d44a <_printf_i+0x1f2>
 800d446:	1b80      	subs	r0, r0, r6
 800d448:	6060      	str	r0, [r4, #4]
 800d44a:	6863      	ldr	r3, [r4, #4]
 800d44c:	6123      	str	r3, [r4, #16]
 800d44e:	2300      	movs	r3, #0
 800d450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d454:	e7a8      	b.n	800d3a8 <_printf_i+0x150>
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	4632      	mov	r2, r6
 800d45a:	4649      	mov	r1, r9
 800d45c:	4640      	mov	r0, r8
 800d45e:	47d0      	blx	sl
 800d460:	3001      	adds	r0, #1
 800d462:	d0ab      	beq.n	800d3bc <_printf_i+0x164>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	079b      	lsls	r3, r3, #30
 800d468:	d413      	bmi.n	800d492 <_printf_i+0x23a>
 800d46a:	68e0      	ldr	r0, [r4, #12]
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	4298      	cmp	r0, r3
 800d470:	bfb8      	it	lt
 800d472:	4618      	movlt	r0, r3
 800d474:	e7a4      	b.n	800d3c0 <_printf_i+0x168>
 800d476:	2301      	movs	r3, #1
 800d478:	4632      	mov	r2, r6
 800d47a:	4649      	mov	r1, r9
 800d47c:	4640      	mov	r0, r8
 800d47e:	47d0      	blx	sl
 800d480:	3001      	adds	r0, #1
 800d482:	d09b      	beq.n	800d3bc <_printf_i+0x164>
 800d484:	3501      	adds	r5, #1
 800d486:	68e3      	ldr	r3, [r4, #12]
 800d488:	9903      	ldr	r1, [sp, #12]
 800d48a:	1a5b      	subs	r3, r3, r1
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dcf2      	bgt.n	800d476 <_printf_i+0x21e>
 800d490:	e7eb      	b.n	800d46a <_printf_i+0x212>
 800d492:	2500      	movs	r5, #0
 800d494:	f104 0619 	add.w	r6, r4, #25
 800d498:	e7f5      	b.n	800d486 <_printf_i+0x22e>
 800d49a:	bf00      	nop
 800d49c:	0800d99d 	.word	0x0800d99d
 800d4a0:	0800d9ae 	.word	0x0800d9ae

0800d4a4 <_sbrk_r>:
 800d4a4:	b538      	push	{r3, r4, r5, lr}
 800d4a6:	4d06      	ldr	r5, [pc, #24]	; (800d4c0 <_sbrk_r+0x1c>)
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	4608      	mov	r0, r1
 800d4ae:	602b      	str	r3, [r5, #0]
 800d4b0:	f7f5 fe3c 	bl	800312c <_sbrk>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	d102      	bne.n	800d4be <_sbrk_r+0x1a>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	b103      	cbz	r3, 800d4be <_sbrk_r+0x1a>
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	bd38      	pop	{r3, r4, r5, pc}
 800d4c0:	2001047c 	.word	0x2001047c

0800d4c4 <__sread>:
 800d4c4:	b510      	push	{r4, lr}
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4cc:	f000 f8a0 	bl	800d610 <_read_r>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	bfab      	itete	ge
 800d4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d4d8:	181b      	addge	r3, r3, r0
 800d4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4de:	bfac      	ite	ge
 800d4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4e2:	81a3      	strhlt	r3, [r4, #12]
 800d4e4:	bd10      	pop	{r4, pc}

0800d4e6 <__swrite>:
 800d4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ea:	461f      	mov	r7, r3
 800d4ec:	898b      	ldrh	r3, [r1, #12]
 800d4ee:	05db      	lsls	r3, r3, #23
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	4616      	mov	r6, r2
 800d4f6:	d505      	bpl.n	800d504 <__swrite+0x1e>
 800d4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	2200      	movs	r2, #0
 800d500:	f000 f868 	bl	800d5d4 <_lseek_r>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	4632      	mov	r2, r6
 800d512:	463b      	mov	r3, r7
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d51a:	f000 b817 	b.w	800d54c <_write_r>

0800d51e <__sseek>:
 800d51e:	b510      	push	{r4, lr}
 800d520:	460c      	mov	r4, r1
 800d522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d526:	f000 f855 	bl	800d5d4 <_lseek_r>
 800d52a:	1c43      	adds	r3, r0, #1
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	bf15      	itete	ne
 800d530:	6560      	strne	r0, [r4, #84]	; 0x54
 800d532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d53a:	81a3      	strheq	r3, [r4, #12]
 800d53c:	bf18      	it	ne
 800d53e:	81a3      	strhne	r3, [r4, #12]
 800d540:	bd10      	pop	{r4, pc}

0800d542 <__sclose>:
 800d542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d546:	f000 b813 	b.w	800d570 <_close_r>
	...

0800d54c <_write_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	4d07      	ldr	r5, [pc, #28]	; (800d56c <_write_r+0x20>)
 800d550:	4604      	mov	r4, r0
 800d552:	4608      	mov	r0, r1
 800d554:	4611      	mov	r1, r2
 800d556:	2200      	movs	r2, #0
 800d558:	602a      	str	r2, [r5, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	f7f5 fd95 	bl	800308a <_write>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d102      	bne.n	800d56a <_write_r+0x1e>
 800d564:	682b      	ldr	r3, [r5, #0]
 800d566:	b103      	cbz	r3, 800d56a <_write_r+0x1e>
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	2001047c 	.word	0x2001047c

0800d570 <_close_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d06      	ldr	r5, [pc, #24]	; (800d58c <_close_r+0x1c>)
 800d574:	2300      	movs	r3, #0
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f5 fda1 	bl	80030c2 <_close>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_close_r+0x1a>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_close_r+0x1a>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	2001047c 	.word	0x2001047c

0800d590 <_fstat_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d07      	ldr	r5, [pc, #28]	; (800d5b0 <_fstat_r+0x20>)
 800d594:	2300      	movs	r3, #0
 800d596:	4604      	mov	r4, r0
 800d598:	4608      	mov	r0, r1
 800d59a:	4611      	mov	r1, r2
 800d59c:	602b      	str	r3, [r5, #0]
 800d59e:	f7f5 fd9c 	bl	80030da <_fstat>
 800d5a2:	1c43      	adds	r3, r0, #1
 800d5a4:	d102      	bne.n	800d5ac <_fstat_r+0x1c>
 800d5a6:	682b      	ldr	r3, [r5, #0]
 800d5a8:	b103      	cbz	r3, 800d5ac <_fstat_r+0x1c>
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	bd38      	pop	{r3, r4, r5, pc}
 800d5ae:	bf00      	nop
 800d5b0:	2001047c 	.word	0x2001047c

0800d5b4 <_isatty_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d06      	ldr	r5, [pc, #24]	; (800d5d0 <_isatty_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	602b      	str	r3, [r5, #0]
 800d5c0:	f7f5 fd9b 	bl	80030fa <_isatty>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_isatty_r+0x1a>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_isatty_r+0x1a>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	2001047c 	.word	0x2001047c

0800d5d4 <_lseek_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	; (800d5f4 <_lseek_r+0x20>)
 800d5d8:	4604      	mov	r4, r0
 800d5da:	4608      	mov	r0, r1
 800d5dc:	4611      	mov	r1, r2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	602a      	str	r2, [r5, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f7f5 fd94 	bl	8003110 <_lseek>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_lseek_r+0x1e>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_lseek_r+0x1e>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	2001047c 	.word	0x2001047c

0800d5f8 <__malloc_lock>:
 800d5f8:	4801      	ldr	r0, [pc, #4]	; (800d600 <__malloc_lock+0x8>)
 800d5fa:	f7ff bb55 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800d5fe:	bf00      	nop
 800d600:	20010474 	.word	0x20010474

0800d604 <__malloc_unlock>:
 800d604:	4801      	ldr	r0, [pc, #4]	; (800d60c <__malloc_unlock+0x8>)
 800d606:	f7ff bb50 	b.w	800ccaa <__retarget_lock_release_recursive>
 800d60a:	bf00      	nop
 800d60c:	20010474 	.word	0x20010474

0800d610 <_read_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d07      	ldr	r5, [pc, #28]	; (800d630 <_read_r+0x20>)
 800d614:	4604      	mov	r4, r0
 800d616:	4608      	mov	r0, r1
 800d618:	4611      	mov	r1, r2
 800d61a:	2200      	movs	r2, #0
 800d61c:	602a      	str	r2, [r5, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	f7f5 fd16 	bl	8003050 <_read>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	d102      	bne.n	800d62e <_read_r+0x1e>
 800d628:	682b      	ldr	r3, [r5, #0]
 800d62a:	b103      	cbz	r3, 800d62e <_read_r+0x1e>
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	bd38      	pop	{r3, r4, r5, pc}
 800d630:	2001047c 	.word	0x2001047c

0800d634 <_init>:
 800d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d636:	bf00      	nop
 800d638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63a:	bc08      	pop	{r3}
 800d63c:	469e      	mov	lr, r3
 800d63e:	4770      	bx	lr

0800d640 <_fini>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr
