
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800878c  0800878c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008794  08008794  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af8  20000010  080087ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b08  080087ac  00021b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212ea  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6c  00000000  00000000  0004132a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00044d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  000467d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000044fd  00000000  00000000  000480c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab04  00000000  00000000  0004c5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001118a1  00000000  00000000  000670c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178962  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  001789b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086c0 	.word	0x080086c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080086c0 	.word	0x080086c0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd06 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82a 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa40 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 fa0e 	bl	80008f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004dc:	f000 f8ac 	bl	8000638 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e0:	f000 f920 	bl	8000724 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004e4:	f000 f9ae 	bl	8000844 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <main+0x4c>)
 80004ec:	f003 fe2c 	bl	8004148 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x50>)
 80004f4:	f003 fe28 	bl	8004148 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f005 fb56 	bl	8005ba8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of transDataTask */
  transDataTaskHandle = osThreadNew(StartTransferDataTask, NULL, &transDataTask_attributes);
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <main+0x54>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <main+0x58>)
 8000502:	f005 fb9b 	bl	8005c3c <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <main+0x5c>)
 800050a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800050c:	f005 fb70 	bl	8005bf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x48>
 8000512:	bf00      	nop
 8000514:	200019a8 	.word	0x200019a8
 8000518:	200018f4 	.word	0x200018f4
 800051c:	08008720 	.word	0x08008720
 8000520:	080009d1 	.word	0x080009d1
 8000524:	200019a4 	.word	0x200019a4

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b0b8      	sub	sp, #224	; 0xe0
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f008 f8ba 	bl	80086b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2288      	movs	r2, #136	; 0x88
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f008 f8ac 	bl	80086b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000584:	2307      	movs	r3, #7
 8000586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f9d0 	bl	8002940 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005a6:	f000 fa89 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fd9c 	bl	800310c <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005da:	f000 fa6f 	bl	8000abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80005de:	f244 0302 	movw	r3, #16386	; 0x4002
 80005e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005ec:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005ee:	2302      	movs	r3, #2
 80005f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005f6:	2308      	movs	r3, #8
 80005f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800060a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f002 ffb4 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800061a:	f000 fa4f 	bl	8000abc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000622:	f002 f937 	bl	8002894 <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800062c:	f000 fa46 	bl	8000abc <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	37e0      	adds	r7, #224	; 0xe0
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <MX_ADC1_Init+0xe0>)
 800065c:	4a2f      	ldr	r2, [pc, #188]	; (800071c <MX_ADC1_Init+0xe4>)
 800065e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000666:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <MX_ADC1_Init+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <MX_ADC1_Init+0xe0>)
 800067a:	2204      	movs	r2, #4
 800067c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MX_ADC1_Init+0xe0>)
 800068c:	2201      	movs	r2, #1
 800068e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_ADC1_Init+0xe0>)
 800069a:	2200      	movs	r2, #0
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_ADC1_Init+0xe0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_ADC1_Init+0xe0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ADC1_Init+0xe0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_ADC1_Init+0xe0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	4817      	ldr	r0, [pc, #92]	; (8000718 <MX_ADC1_Init+0xe0>)
 80006bc:	f000 fe32 	bl	8001324 <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006c6:	f000 f9f9 	bl	8000abc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4810      	ldr	r0, [pc, #64]	; (8000718 <MX_ADC1_Init+0xe0>)
 80006d6:	f001 fd93 	bl	8002200 <HAL_ADCEx_MultiModeConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e0:	f000 f9ec 	bl	8000abc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_ADC1_Init+0xe8>)
 80006e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e8:	2306      	movs	r3, #6
 80006ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f0:	237f      	movs	r3, #127	; 0x7f
 80006f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f4:	2304      	movs	r3, #4
 80006f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_ADC1_Init+0xe0>)
 8000702:	f001 f905 	bl	8001910 <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800070c:	f000 f9d6 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20001940 	.word	0x20001940
 800071c:	50040000 	.word	0x50040000
 8000720:	14f00020 	.word	0x14f00020

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b096      	sub	sp, #88	; 0x58
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	222c      	movs	r2, #44	; 0x2c
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f007 ffad 	bl	80086b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <MX_TIM1_Init+0x118>)
 8000758:	4a39      	ldr	r2, [pc, #228]	; (8000840 <MX_TIM1_Init+0x11c>)
 800075a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80 - 1;
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_TIM1_Init+0x118>)
 800075e:	224f      	movs	r2, #79	; 0x4f
 8000760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <MX_TIM1_Init+0x118>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_TIM1_Init+0x118>)
 800076a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_TIM1_Init+0x118>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_TIM1_Init+0x118>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_TIM1_Init+0x118>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000782:	482e      	ldr	r0, [pc, #184]	; (800083c <MX_TIM1_Init+0x118>)
 8000784:	f003 fc88 	bl	8004098 <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f995 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	; (800083c <MX_TIM1_Init+0x118>)
 80007a6:	f004 fbc3 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f984 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_TIM1_Init+0x118>)
 80007da:	f003 fedb 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007e4:	f000 f96a 	bl	8000abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800080a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM1_Init+0x118>)
 800081e:	f004 fc0f 	bl	8005040 <HAL_TIMEx_ConfigBreakDeadTime>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000828:	f000 f948 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM1_Init+0x118>)
 800082e:	f000 f9e5 	bl	8000bfc <HAL_TIM_MspPostInit>

}
 8000832:	bf00      	nop
 8000834:	3758      	adds	r7, #88	; 0x58
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200019a8 	.word	0x200019a8
 8000840:	40012c00 	.word	0x40012c00

08000844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_TIM3_Init+0xac>)
 800086a:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <MX_TIM3_Init+0xb0>)
 800086c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80 - 1;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_TIM3_Init+0xac>)
 8000870:	224f      	movs	r2, #79	; 0x4f
 8000872:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_TIM3_Init+0xac>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM3_Init+0xac>)
 800087c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000880:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM3_Init+0xac>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM3_Init+0xac>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_TIM3_Init+0xac>)
 8000890:	f003 fc02 	bl	8004098 <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800089a:	f000 f90f 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_TIM3_Init+0xac>)
 80008ae:	f004 fb3f 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008b8:	f000 f900 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM3_Init+0xac>)
 80008d4:	f003 fe5e 	bl	8004594 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008de:	f000 f8ed 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM3_Init+0xac>)
 80008e4:	f000 f98a 	bl	8000bfc <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200018f4 	.word	0x200018f4
 80008f4:	40000400 	.word	0x40000400

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART2_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART2_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x58>)
 800093c:	f004 fc1c 	bl	8005178 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f8b9 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200019f4 	.word	0x200019f4
 8000954:	40004400 	.word	0x40004400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_GPIO_Init+0x74>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <MX_GPIO_Init+0x74>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_GPIO_Init+0x74>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_GPIO_Init+0x74>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <MX_GPIO_Init+0x74>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_GPIO_Init+0x74>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_GPIO_Init+0x74>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <MX_GPIO_Init+0x74>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_GPIO_Init+0x74>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_GPIO_Init+0x74>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <MX_GPIO_Init+0x74>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_GPIO_Init+0x74>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <StartTransferDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransferDataTask */
void StartTransferDataTask(void *argument)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b08e      	sub	sp, #56	; 0x38
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int16_t notes[] = {4816, 3608, 2863, 3214, 3608, 4816, 4290, 3822, 3608, 3214, 2863, 2703, 2863, 3214, 2408, 2408};
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <StartTransferDataTask+0xac>)
 80009da:	f107 0410 	add.w	r4, r7, #16
 80009de:	461d      	mov	r5, r3
 80009e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint16_t prevData = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t data = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]

	int32_t j = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
	/* Infinite loop */
  for(;;)
  {


  	HAL_ADC_Start(&hadc1);
 80009f8:	4821      	ldr	r0, [pc, #132]	; (8000a80 <StartTransferDataTask+0xb0>)
 80009fa:	f000 fde9 	bl	80015d0 <HAL_ADC_Start>
  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <StartTransferDataTask+0xb0>)
 8000a04:	f000 fe9e 	bl	8001744 <HAL_ADC_PollForConversion>
  	data = HAL_ADC_GetValue(&hadc1);
 8000a08:	481d      	ldr	r0, [pc, #116]	; (8000a80 <StartTransferDataTask+0xb0>)
 8000a0a:	f000 ff73 	bl	80018f4 <HAL_ADC_GetValue>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	81fb      	strh	r3, [r7, #14]
  	HAL_UART_Transmit(&huart2, (uint8_t *)&data, 2, 0xFFFF);
 8000a14:	f107 010e 	add.w	r1, r7, #14
 8000a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <StartTransferDataTask+0xb4>)
 8000a20:	f004 fbf8 	bl	8005214 <HAL_UART_Transmit>
    //printf("%u\r\n", data);



  	//if (prevData != data)
  	if ((prevData - data) > 5 || (prevData - data) < -5)
 8000a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000a26:	89fa      	ldrh	r2, [r7, #14]
 8000a28:	1a9b      	subs	r3, r3, r2
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	dc05      	bgt.n	8000a3a <StartTransferDataTask+0x6a>
 8000a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000a30:	89fa      	ldrh	r2, [r7, #14]
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	f113 0f05 	cmn.w	r3, #5
 8000a38:	da1c      	bge.n	8000a74 <StartTransferDataTask+0xa4>
  	{
    	//__HAL_TIM_SET_COUNTER(&htim1, MIN(__HAL_TIM_GET_COUNTER(&htim1), (data*2)/2 - 1));
  		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <StartTransferDataTask+0xb8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
    	TIM1->ARR = (data*2);
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	005a      	lsls	r2, r3, #1
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <StartTransferDataTask+0xbc>)
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
    	htim1.Instance->CCR1 = TIM1->ARR/2;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <StartTransferDataTask+0xbc>)
 8000a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <StartTransferDataTask+0xb8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	0852      	lsrs	r2, r2, #1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34

  		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <StartTransferDataTask+0xc0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
    	TIM3->ARR = (data);
 8000a5e:	89fa      	ldrh	r2, [r7, #14]
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <StartTransferDataTask+0xc4>)
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
    	htim3.Instance->CCR1 = TIM3->ARR/2;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <StartTransferDataTask+0xc4>)
 8000a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <StartTransferDataTask+0xc0>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	0852      	lsrs	r2, r2, #1
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34

    	prevData = data;
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	86fb      	strh	r3, [r7, #54]	; 0x36
  	}

    osDelay(10);
 8000a74:	200a      	movs	r0, #10
 8000a76:	f005 f973 	bl	8005d60 <osDelay>
  	HAL_ADC_Start(&hadc1);
 8000a7a:	e7bd      	b.n	80009f8 <StartTransferDataTask+0x28>
 8000a7c:	080086e8 	.word	0x080086e8
 8000a80:	20001940 	.word	0x20001940
 8000a84:	200019f4 	.word	0x200019f4
 8000a88:	200019a8 	.word	0x200019a8
 8000a8c:	40012c00 	.word	0x40012c00
 8000a90:	200018f4 	.word	0x200018f4
 8000a94:	40000400 	.word	0x40000400

08000a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aaa:	f000 fa37 	bl	8000f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40001000 	.word	0x40001000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_MspInit+0x4c>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	210f      	movs	r1, #15
 8000b02:	f06f 0001 	mvn.w	r0, #1
 8000b06:	f001 fce3 	bl	80024d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <HAL_ADC_MspInit+0x74>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d124      	bne.n	8000b84 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_ADC_MspInit+0x78>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_ADC_MspInit+0x78>)
 8000b40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_ADC_MspInit+0x78>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_ADC_MspInit+0x78>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_ADC_MspInit+0x78>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_ADC_MspInit+0x78>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6e:	230b      	movs	r3, #11
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f001 fcd0 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	50040000 	.word	0x50040000
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8000bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bbe:	e010      	b.n	8000be2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <HAL_TIM_PWM_MspInit+0x64>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d10b      	bne.n	8000be2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <HAL_TIM_PWM_MspInit+0x60>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40012c00 	.word	0x40012c00
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40000400 	.word	0x40000400

08000bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <HAL_TIM_MspPostInit+0xac>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d11e      	bne.n	8000c5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <HAL_TIM_MspPostInit+0xb0>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <HAL_TIM_MspPostInit+0xb0>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_TIM_MspPostInit+0xb0>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f001 fc65 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c5a:	e021      	b.n	8000ca0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <HAL_TIM_MspPostInit+0xb4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d11c      	bne.n	8000ca0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_TIM_MspPostInit+0xb0>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_TIM_MspPostInit+0xb0>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_TIM_MspPostInit+0xb0>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f001 fc42 	bl	8002524 <HAL_GPIO_Init>
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40012c00 	.word	0x40012c00
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0x7c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d128      	bne.n	8000d28 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d06:	230c      	movs	r3, #12
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d16:	2307      	movs	r3, #7
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f001 fbfe 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2036      	movs	r0, #54	; 0x36
 8000d4e:	f001 fbbf 	bl	80024d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d52:	2036      	movs	r0, #54	; 0x36
 8000d54:	f001 fbd8 	bl	8002508 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_InitTick+0x9c>)
 8000d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_InitTick+0x9c>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6593      	str	r3, [r2, #88]	; 0x58
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_InitTick+0x9c>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fb6c 	bl	8003458 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d80:	f002 fb3e 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8000d84:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <HAL_InitTick+0xa0>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3b01      	subs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <HAL_InitTick+0xa8>)
 8000d98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_InitTick+0xa4>)
 8000da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_InitTick+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_InitTick+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000db4:	4809      	ldr	r0, [pc, #36]	; (8000ddc <HAL_InitTick+0xa4>)
 8000db6:	f003 f89d 	bl	8003ef4 <HAL_TIM_Base_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d104      	bne.n	8000dca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <HAL_InitTick+0xa4>)
 8000dc2:	f003 f8f9 	bl	8003fb8 <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	20001a78 	.word	0x20001a78
 8000de0:	40001000 	.word	0x40001000

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM6_DAC_IRQHandler+0x10>)
 8000e16:	f003 fa9d 	bl	8004354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001a78 	.word	0x20001a78

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <SystemInit+0x5c>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <SystemInit+0x5c>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <SystemInit+0x60>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <SystemInit+0x60>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <SystemInit+0x60>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <SystemInit+0x60>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <SystemInit+0x60>)
 8000e50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <SystemInit+0x60>)
 8000e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SystemInit+0x60>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <SystemInit+0x60>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SystemInit+0x60>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	40021000 	.word	0x40021000

08000e88 <Reset_Handler>:
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopForever+0x2>
 8000e8c:	f7ff ffca 	bl	8000e24 <SystemInit>
 8000e90:	2100      	movs	r1, #0
 8000e92:	e003      	b.n	8000e9c <LoopCopyDataInit>

08000e94 <CopyDataInit>:
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <LoopForever+0x6>)
 8000e96:	585b      	ldr	r3, [r3, r1]
 8000e98:	5043      	str	r3, [r0, r1]
 8000e9a:	3104      	adds	r1, #4

08000e9c <LoopCopyDataInit>:
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <LoopForever+0xa>)
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopForever+0xe>)
 8000ea0:	1842      	adds	r2, r0, r1
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3f6      	bcc.n	8000e94 <CopyDataInit>
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopForever+0x12>)
 8000ea8:	e002      	b.n	8000eb0 <LoopFillZerobss>

08000eaa <FillZerobss>:
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f842 3b04 	str.w	r3, [r2], #4

08000eb0 <LoopFillZerobss>:
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LoopForever+0x16>)
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3f9      	bcc.n	8000eaa <FillZerobss>
 8000eb6:	f007 fbc9 	bl	800864c <__libc_init_array>
 8000eba:	f7ff fb05 	bl	80004c8 <main>

08000ebe <LoopForever>:
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
 8000ec0:	20018000 	.word	0x20018000
 8000ec4:	0800879c 	.word	0x0800879c
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	20001b08 	.word	0x20001b08

08000ed8 <ADC1_2_IRQHandler>:
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_Init+0x3c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <HAL_Init+0x3c>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f001 fae1 	bl	80024ba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ff1d 	bl	8000d38 <HAL_InitTick>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e001      	b.n	8000f0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0a:	f7ff fddd 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20001ac4 	.word	0x20001ac4

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20001ac4 	.word	0x20001ac4

08000f5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3360      	adds	r3, #96	; 0x60
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <LL_ADC_SetOffset+0x44>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ffc:	bf00      	nop
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	03fff000 	.word	0x03fff000

0800100c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3360      	adds	r3, #96	; 0x60
 800101a:	461a      	mov	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3360      	adds	r3, #96	; 0x60
 8001048:	461a      	mov	r2, r3
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3330      	adds	r3, #48	; 0x30
 80010a4:	461a      	mov	r2, r3
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	4413      	add	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	211f      	movs	r1, #31
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0e9b      	lsrs	r3, r3, #26
 80010cc:	f003 011f 	and.w	r1, r3, #31
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3314      	adds	r3, #20
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	0e5b      	lsrs	r3, r3, #25
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	0d1b      	lsrs	r3, r3, #20
 8001114:	f003 031f 	and.w	r3, r3, #31
 8001118:	2107      	movs	r1, #7
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	401a      	ands	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	0d1b      	lsrs	r3, r3, #20
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0318 	and.w	r3, r3, #24
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001168:	40d9      	lsrs	r1, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	400b      	ands	r3, r1
 800116e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001172:	431a      	orrs	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	0007ffff 	.word	0x0007ffff

0800118c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 031f 	and.w	r3, r3, #31
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6093      	str	r3, [r2, #8]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011fc:	d101      	bne.n	8001202 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001224:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800124c:	d101      	bne.n	8001252 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001274:	f043 0201 	orr.w	r2, r3, #1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <LL_ADC_IsEnabled+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_IsEnabled+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c2:	f043 0204 	orr.w	r2, r3, #4
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d101      	bne.n	80012ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b08      	cmp	r3, #8
 800130e:	d101      	bne.n	8001314 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e136      	b.n	80015ac <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fbe3 	bl	8000b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff3f 	bl	80011e8 <LL_ADC_IsDeepPowerDownEnabled>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff25 	bl	80011c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff5a 	bl	8001238 <LL_ADC_IsInternalRegulatorEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d115      	bne.n	80013b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff3e 	bl	8001210 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001394:	4b87      	ldr	r3, [pc, #540]	; (80015b4 <HAL_ADC_Init+0x290>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	099b      	lsrs	r3, r3, #6
 800139a:	4a87      	ldr	r2, [pc, #540]	; (80015b8 <HAL_ADC_Init+0x294>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	3301      	adds	r3, #1
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff3c 	bl	8001238 <LL_ADC_IsInternalRegulatorEnabled>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10d      	bne.n	80013e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	f043 0210 	orr.w	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff75 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80013ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80cf 	bne.w	800159a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 80cb 	bne.w	800159a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800140c:	f043 0202 	orr.w	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff35 	bl	8001288 <LL_ADC_IsEnabled>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d115      	bne.n	8001450 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001424:	4865      	ldr	r0, [pc, #404]	; (80015bc <HAL_ADC_Init+0x298>)
 8001426:	f7ff ff2f 	bl	8001288 <LL_ADC_IsEnabled>
 800142a:	4604      	mov	r4, r0
 800142c:	4864      	ldr	r0, [pc, #400]	; (80015c0 <HAL_ADC_Init+0x29c>)
 800142e:	f7ff ff2b 	bl	8001288 <LL_ADC_IsEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	431c      	orrs	r4, r3
 8001436:	4863      	ldr	r0, [pc, #396]	; (80015c4 <HAL_ADC_Init+0x2a0>)
 8001438:	f7ff ff26 	bl	8001288 <LL_ADC_IsEnabled>
 800143c:	4603      	mov	r3, r0
 800143e:	4323      	orrs	r3, r4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d105      	bne.n	8001450 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4619      	mov	r1, r3
 800144a:	485f      	ldr	r0, [pc, #380]	; (80015c8 <HAL_ADC_Init+0x2a4>)
 800144c:	f7ff fd86 	bl	8000f5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e5b      	ldrb	r3, [r3, #25]
 8001454:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001460:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001466:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800146e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d106      	bne.n	800148c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	3b01      	subs	r3, #1
 8001484:	045b      	lsls	r3, r3, #17
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_ADC_Init+0x2a8>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff08 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80014c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff15 	bl	80012fc <LL_ADC_INJ_IsConversionOngoing>
 80014d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d13d      	bne.n	8001556 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d13a      	bne.n	8001556 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014fc:	f023 0302 	bic.w	r3, r3, #2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	69b9      	ldr	r1, [r7, #24]
 8001506:	430b      	orrs	r3, r1
 8001508:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001510:	2b01      	cmp	r3, #1
 8001512:	d118      	bne.n	8001546 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001530:	4311      	orrs	r1, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001536:	430a      	orrs	r2, r1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	e007      	b.n	8001556 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d10c      	bne.n	8001578 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	f023 010f 	bic.w	r1, r3, #15
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	e007      	b.n	8001588 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 020f 	bic.w	r2, r2, #15
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158c:	f023 0303 	bic.w	r3, r3, #3
 8001590:	f043 0201 	orr.w	r2, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	655a      	str	r2, [r3, #84]	; 0x54
 8001598:	e007      	b.n	80015aa <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3724      	adds	r7, #36	; 0x24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	053e2d63 	.word	0x053e2d63
 80015bc:	50040000 	.word	0x50040000
 80015c0:	50040100 	.word	0x50040100
 80015c4:	50040200 	.word	0x50040200
 80015c8:	50040300 	.word	0x50040300
 80015cc:	fff0c007 	.word	0xfff0c007

080015d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d8:	4857      	ldr	r0, [pc, #348]	; (8001738 <HAL_ADC_Start+0x168>)
 80015da:	f7ff fdd7 	bl	800118c <LL_ADC_GetMultimode>
 80015de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fe76 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f040 809c 	bne.w	800172a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_ADC_Start+0x30>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e097      	b.n	8001730 <HAL_ADC_Start+0x160>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fd71 	bl	80020f0 <ADC_Enable>
 800160e:	4603      	mov	r3, r0
 8001610:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f040 8083 	bne.w	8001720 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <HAL_ADC_Start+0x16c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d002      	beq.n	800163e <HAL_ADC_Start+0x6e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	e000      	b.n	8001640 <HAL_ADC_Start+0x70>
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <HAL_ADC_Start+0x170>)
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	d002      	beq.n	800164e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001666:	d106      	bne.n	8001676 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	f023 0206 	bic.w	r2, r3, #6
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	; 0x58
 8001674:	e002      	b.n	800167c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	221c      	movs	r2, #28
 8001682:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_ADC_Start+0x16c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d002      	beq.n	800169c <HAL_ADC_Start+0xcc>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	e000      	b.n	800169e <HAL_ADC_Start+0xce>
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_ADC_Start+0x170>)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d008      	beq.n	80016b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d002      	beq.n	80016b8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d114      	bne.n	80016e2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fde7 	bl	80012ae <LL_ADC_REG_StartConversion>
 80016e0:	e025      	b.n	800172e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_ADC_Start+0x16c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d002      	beq.n	80016fe <HAL_ADC_Start+0x12e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	e000      	b.n	8001700 <HAL_ADC_Start+0x130>
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_ADC_Start+0x170>)
 8001700:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00f      	beq.n	800172e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	655a      	str	r2, [r3, #84]	; 0x54
 800171e:	e006      	b.n	800172e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001728:	e001      	b.n	800172e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800172e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	50040300 	.word	0x50040300
 800173c:	50040100 	.word	0x50040100
 8001740:	50040000 	.word	0x50040000

08001744 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800174e:	4866      	ldr	r0, [pc, #408]	; (80018e8 <HAL_ADC_PollForConversion+0x1a4>)
 8001750:	f7ff fd1c 	bl	800118c <LL_ADC_GetMultimode>
 8001754:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	2b08      	cmp	r3, #8
 800175c:	d102      	bne.n	8001764 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800175e:	2308      	movs	r3, #8
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e02a      	b.n	80017ba <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b05      	cmp	r3, #5
 800176e:	d002      	beq.n	8001776 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d111      	bne.n	800179a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	f043 0220 	orr.w	r2, r3, #32
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0a4      	b.n	80018de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001794:	2304      	movs	r3, #4
 8001796:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001798:	e00f      	b.n	80017ba <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800179a:	4853      	ldr	r0, [pc, #332]	; (80018e8 <HAL_ADC_PollForConversion+0x1a4>)
 800179c:	f7ff fd04 	bl	80011a8 <LL_ADC_GetMultiDMATransfer>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f043 0220 	orr.w	r2, r3, #32
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e093      	b.n	80018de <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80017b6:	2304      	movs	r3, #4
 80017b8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017ba:	f7ff fbc3 	bl	8000f44 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017c0:	e021      	b.n	8001806 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c8:	d01d      	beq.n	8001806 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017ca:	f7ff fbbb 	bl	8000f44 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d302      	bcc.n	80017e0 <HAL_ADC_PollForConversion+0x9c>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d112      	bne.n	8001806 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10b      	bne.n	8001806 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	f043 0204 	orr.w	r2, r3, #4
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e06b      	b.n	80018de <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0d6      	beq.n	80017c2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fc22 	bl	800106e <LL_ADC_REG_IsTriggerSourceSWStart>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01c      	beq.n	800186a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7e5b      	ldrb	r3, [r3, #25]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d118      	bne.n	800186a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b08      	cmp	r3, #8
 8001844:	d111      	bne.n	800186a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_ADC_PollForConversion+0x1a8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d002      	beq.n	800187a <HAL_ADC_PollForConversion+0x136>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e000      	b.n	800187c <HAL_ADC_PollForConversion+0x138>
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_ADC_PollForConversion+0x1ac>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4293      	cmp	r3, r2
 8001882:	d008      	beq.n	8001896 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d002      	beq.n	8001896 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b09      	cmp	r3, #9
 8001894:	d104      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	e00c      	b.n	80018ba <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_ADC_PollForConversion+0x1a8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d002      	beq.n	80018b0 <HAL_ADC_PollForConversion+0x16c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	e000      	b.n	80018b2 <HAL_ADC_PollForConversion+0x16e>
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_ADC_PollForConversion+0x1ac>)
 80018b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d104      	bne.n	80018ca <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2208      	movs	r2, #8
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	e008      	b.n	80018dc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	220c      	movs	r2, #12
 80018da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	50040300 	.word	0x50040300
 80018ec:	50040100 	.word	0x50040100
 80018f0:	50040000 	.word	0x50040000

080018f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0b6      	sub	sp, #216	; 0xd8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x22>
 800192e:	2302      	movs	r3, #2
 8001930:	e3c7      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x7b2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fcc9 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 83a8 	bne.w	800209c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d824      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	3b02      	subs	r3, #2
 800195a:	2b03      	cmp	r3, #3
 800195c:	d81b      	bhi.n	8001996 <HAL_ADC_ConfigChannel+0x86>
 800195e:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <HAL_ADC_ConfigChannel+0x54>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	08001975 	.word	0x08001975
 8001968:	0800197d 	.word	0x0800197d
 800196c:	08001985 	.word	0x08001985
 8001970:	0800198d 	.word	0x0800198d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	220c      	movs	r2, #12
 8001978:	605a      	str	r2, [r3, #4]
          break;
 800197a:	e011      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2212      	movs	r2, #18
 8001980:	605a      	str	r2, [r3, #4]
          break;
 8001982:	e00d      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2218      	movs	r2, #24
 8001988:	605a      	str	r2, [r3, #4]
          break;
 800198a:	e009      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001992:	605a      	str	r2, [r3, #4]
          break;
 8001994:	e004      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2206      	movs	r2, #6
 800199a:	605a      	str	r2, [r3, #4]
          break;
 800199c:	e000      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800199e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	f7ff fb71 	bl	8001094 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc8d 	bl	80012d6 <LL_ADC_REG_IsConversionOngoing>
 80019bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fc99 	bl	80012fc <LL_ADC_INJ_IsConversionOngoing>
 80019ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 81a6 	bne.w	8001d24 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 81a1 	bne.w	8001d24 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6819      	ldr	r1, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff fb7c 	bl	80010ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	08db      	lsrs	r3, r3, #3
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d00a      	beq.n	8001a2c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a26:	f7ff facd 	bl	8000fc4 <LL_ADC_SetOffset>
 8001a2a:	e17b      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff faea 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x148>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fadf 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	f003 021f 	and.w	r2, r3, #31
 8001a56:	e01e      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x186>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fad4 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001a86:	2320      	movs	r3, #32
 8001a88:	e004      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x19e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0e9b      	lsrs	r3, r3, #26
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	e018      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1d0>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	e004      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff faa3 	bl	8001038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2101      	movs	r1, #1
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fa87 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x20e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fa7c 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	e01e      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x24c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2101      	movs	r1, #1
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fa71 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	e004      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x264>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0e9b      	lsrs	r3, r3, #26
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	e018      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x296>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	e004      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d106      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fa40 	bl	8001038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa24 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x2d4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fa19 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 021f 	and.w	r2, r3, #31
 8001be2:	e01e      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x312>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2102      	movs	r1, #2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fa0e 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e004      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x32a>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0e9b      	lsrs	r3, r3, #26
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	e016      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x358>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e004      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d106      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	2102      	movs	r1, #2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f9df 	bl	8001038 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2103      	movs	r1, #3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f9c3 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x396>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2103      	movs	r1, #3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f9b8 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	e017      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x3c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2103      	movs	r1, #3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f9ad 	bl	800100c <LL_ADC_GetOffsetChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	e003      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x3de>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	e011      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x402>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d106      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2103      	movs	r1, #3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f98a 	bl	8001038 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff faad 	bl	8001288 <LL_ADC_IsEnabled>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 813f 	bne.w	8001fb4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f7ff f9fe 	bl	8001144 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a8e      	ldr	r2, [pc, #568]	; (8001f88 <HAL_ADC_ConfigChannel+0x678>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	f040 8130 	bne.w	8001fb4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x46c>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0e9b      	lsrs	r3, r3, #26
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	bf94      	ite	ls
 8001d74:	2301      	movls	r3, #1
 8001d76:	2300      	movhi	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e019      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x4a0>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001d94:	2320      	movs	r3, #32
 8001d96:	e003      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f003 031f 	and.w	r3, r3, #31
 8001da6:	2b09      	cmp	r3, #9
 8001da8:	bf94      	ite	ls
 8001daa:	2301      	movls	r3, #1
 8001dac:	2300      	movhi	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d079      	beq.n	8001ea8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x4c0>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	069b      	lsls	r3, r3, #26
 8001dca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dce:	e015      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x4ec>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e003      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	069b      	lsls	r3, r3, #26
 8001df8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x50c>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	e017      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x53c>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e003      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e3a:	fab3 f383 	clz	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	ea42 0103 	orr.w	r1, r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x562>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	3301      	adds	r3, #1
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	051b      	lsls	r3, r3, #20
 8001e70:	e018      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x594>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	e003      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	e080      	b.n	8001faa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x5b4>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0e9b      	lsrs	r3, r3, #26
 8001eba:	3301      	adds	r3, #1
 8001ebc:	069b      	lsls	r3, r3, #26
 8001ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec2:	e015      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x5e0>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e003      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	069b      	lsls	r3, r3, #26
 8001eec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x600>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	3301      	adds	r3, #1
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	e017      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x630>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	ea42 0103 	orr.w	r1, r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x65c>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	3b1e      	subs	r3, #30
 8001f64:	051b      	lsls	r3, r3, #20
 8001f66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	e01d      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x698>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	613b      	str	r3, [r7, #16]
  return result;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e005      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x684>
 8001f88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	3301      	adds	r3, #1
 8001f96:	f003 021f 	and.w	r2, r3, #31
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b1e      	subs	r3, #30
 8001fa2:	051b      	lsls	r3, r3, #20
 8001fa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7ff f89c 	bl	80010ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_ADC_ConfigChannel+0x7bc>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d07a      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc0:	4843      	ldr	r0, [pc, #268]	; (80020d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fc2:	f7fe fff1 	bl	8000fa8 <LL_ADC_GetCommonPathInternalCh>
 8001fc6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a41      	ldr	r2, [pc, #260]	; (80020d4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d12c      	bne.n	800202e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d126      	bne.n	800202e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_ADC_ConfigChannel+0x6e4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a3b      	ldr	r2, [pc, #236]	; (80020dc <HAL_ADC_ConfigChannel+0x7cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d15d      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ff8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4834      	ldr	r0, [pc, #208]	; (80020d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002000:	f7fe ffbf 	bl	8000f82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	4a36      	ldr	r2, [pc, #216]	; (80020e4 <HAL_ADC_ConfigChannel+0x7d4>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800201e:	e002      	b.n	8002026 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3b01      	subs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800202c:	e040      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d118      	bne.n	800206a <HAL_ADC_ConfigChannel+0x75a>
 8002038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800203c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d112      	bne.n	800206a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_ADC_ConfigChannel+0x7c8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_ADC_ConfigChannel+0x748>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_ADC_ConfigChannel+0x7cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d12d      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800205c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002060:	4619      	mov	r1, r3
 8002062:	481b      	ldr	r0, [pc, #108]	; (80020d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002064:	f7fe ff8d 	bl	8000f82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002068:	e024      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d120      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d11a      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d115      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800208e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002092:	4619      	mov	r1, r3
 8002094:	480e      	ldr	r0, [pc, #56]	; (80020d0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002096:	f7fe ff74 	bl	8000f82 <LL_ADC_SetCommonPathInternalCh>
 800209a:	e00c      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80020ae:	e002      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b0:	bf00      	nop
 80020b2:	e000      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	37d8      	adds	r7, #216	; 0xd8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	80080000 	.word	0x80080000
 80020d0:	50040300 	.word	0x50040300
 80020d4:	c7520000 	.word	0xc7520000
 80020d8:	50040000 	.word	0x50040000
 80020dc:	50040200 	.word	0x50040200
 80020e0:	20000000 	.word	0x20000000
 80020e4:	053e2d63 	.word	0x053e2d63
 80020e8:	cb840000 	.word	0xcb840000
 80020ec:	80000001 	.word	0x80000001

080020f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f8c3 	bl	8001288 <LL_ADC_IsEnabled>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d14d      	bne.n	80021a4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <ADC_Enable+0xc0>)
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00d      	beq.n	8002132 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	f043 0210 	orr.w	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e039      	b.n	80021a6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff f892 	bl	8001260 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff02 	bl	8000f44 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002142:	e028      	b.n	8002196 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f89d 	bl	8001288 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f881 	bl	8001260 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800215e:	f7fe fef1 	bl	8000f44 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d914      	bls.n	8002196 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d00d      	beq.n	8002196 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e007      	b.n	80021a6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d1cf      	bne.n	8002144 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	8000003f 	.word	0x8000003f

080021b4 <LL_ADC_IsEnabled>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <LL_ADC_IsEnabled+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_IsEnabled+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_IsConversionOngoing>:
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b09f      	sub	sp, #124	; 0x7c
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800221a:	2302      	movs	r3, #2
 800221c:	e093      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002226:	2300      	movs	r3, #0
 8002228:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800222a:	2300      	movs	r3, #0
 800222c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d102      	bne.n	800223e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002238:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	e001      	b.n	8002242 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e072      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ffb9 	bl	80021da <LL_ADC_REG_IsConversionOngoing>
 8002268:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ffb3 	bl	80021da <LL_ADC_REG_IsConversionOngoing>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d154      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800227a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227c:	2b00      	cmp	r3, #0
 800227e:	d151      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002282:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02c      	beq.n	80022e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800228c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229e:	035b      	lsls	r3, r3, #13
 80022a0:	430b      	orrs	r3, r1
 80022a2:	431a      	orrs	r2, r3
 80022a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a8:	4829      	ldr	r0, [pc, #164]	; (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022aa:	f7ff ff83 	bl	80021b4 <LL_ADC_IsEnabled>
 80022ae:	4604      	mov	r4, r0
 80022b0:	4828      	ldr	r0, [pc, #160]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022b2:	f7ff ff7f 	bl	80021b4 <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	431c      	orrs	r4, r3
 80022ba:	4828      	ldr	r0, [pc, #160]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80022bc:	f7ff ff7a 	bl	80021b4 <LL_ADC_IsEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4323      	orrs	r3, r4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d137      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022d0:	f023 030f 	bic.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6811      	ldr	r1, [r2, #0]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	6892      	ldr	r2, [r2, #8]
 80022dc:	430a      	orrs	r2, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022e4:	e028      	b.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f2:	4817      	ldr	r0, [pc, #92]	; (8002350 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80022f4:	f7ff ff5e 	bl	80021b4 <LL_ADC_IsEnabled>
 80022f8:	4604      	mov	r4, r0
 80022fa:	4816      	ldr	r0, [pc, #88]	; (8002354 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80022fc:	f7ff ff5a 	bl	80021b4 <LL_ADC_IsEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	431c      	orrs	r4, r3
 8002304:	4815      	ldr	r0, [pc, #84]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002306:	f7ff ff55 	bl	80021b4 <LL_ADC_IsEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	4323      	orrs	r3, r4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d112      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800231a:	f023 030f 	bic.w	r3, r3, #15
 800231e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002320:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002322:	e009      	b.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002336:	e000      	b.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002338:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002342:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002346:	4618      	mov	r0, r3
 8002348:	377c      	adds	r7, #124	; 0x7c
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	50040000 	.word	0x50040000
 8002354:	50040100 	.word	0x50040100
 8002358:	50040300 	.word	0x50040300
 800235c:	50040200 	.word	0x50040200

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ff4c 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024e2:	f7ff ff61 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 80024e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f7ff ffb1 	bl	8002454 <NVIC_EncodePriority>
 80024f2:	4602      	mov	r2, r0
 80024f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ff80 	bl	8002400 <__NVIC_SetPriority>
}
 8002500:	bf00      	nop
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff54 	bl	80023c4 <__NVIC_EnableIRQ>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	e17f      	b.n	8002834 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8171 	beq.w	800282e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d00b      	beq.n	800256c <HAL_GPIO_Init+0x48>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d007      	beq.n	800256c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	2b11      	cmp	r3, #17
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b12      	cmp	r3, #18
 800256a:	d130      	bne.n	80025ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025a2:	2201      	movs	r2, #1
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0201 	and.w	r2, r3, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d118      	bne.n	800260c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025e0:	2201      	movs	r2, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x128>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b12      	cmp	r3, #18
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80ac 	beq.w	800282e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	4a5e      	ldr	r2, [pc, #376]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6613      	str	r3, [r2, #96]	; 0x60
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ee:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <HAL_GPIO_Init+0x334>)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x242>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x338>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x23e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x33c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x23a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x340>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x236>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x344>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x232>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x348>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x22e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_GPIO_Init+0x34c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x22a>
 800274a:	2306      	movs	r3, #6
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800274e:	2307      	movs	r3, #7
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002766:	2300      	movs	r3, #0
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002778:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_GPIO_Init+0x334>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d4:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_GPIO_Init+0x350>)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	f47f ae78 	bne.w	8002534 <HAL_GPIO_Init+0x10>
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	48000c00 	.word	0x48000c00
 8002868:	48001000 	.word	0x48001000
 800286c:	48001400 	.word	0x48001400
 8002870:	48001800 	.word	0x48001800
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_PWREx_GetVoltageRange+0x18>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40007000 	.word	0x40007000

08002894 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a2:	d130      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b0:	d038      	beq.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2232      	movs	r2, #50	; 0x32
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	3301      	adds	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d8:	e002      	b.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3b01      	subs	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d102      	bne.n	80028f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f2      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002900:	d110      	bne.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e00f      	b.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d007      	beq.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291c:	4a05      	ldr	r2, [pc, #20]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002922:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000
 8002938:	20000000 	.word	0x20000000
 800293c:	431bde83 	.word	0x431bde83

08002940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e3d4      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	4ba1      	ldr	r3, [pc, #644]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	4b9e      	ldr	r3, [pc, #632]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80e4 	beq.w	8002b3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_RCC_OscConfig+0x4a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	f040 808b 	bne.w	8002a98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 8087 	bne.w	8002a98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800298a:	4b93      	ldr	r3, [pc, #588]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e3ac      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	4b8c      	ldr	r3, [pc, #560]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <HAL_RCC_OscConfig+0x7c>
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ba:	e005      	b.n	80029c8 <HAL_RCC_OscConfig+0x88>
 80029bc:	4b86      	ldr	r3, [pc, #536]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d223      	bcs.n	8002a14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fd73 	bl	80034bc <RCC_SetFlashLatencyFromMSIRange>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e38d      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e0:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a7c      	ldr	r2, [pc, #496]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4977      	ldr	r1, [pc, #476]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	4972      	ldr	r1, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
 8002a12:	e025      	b.n	8002a60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6f      	ldr	r2, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	496a      	ldr	r1, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b69      	ldr	r3, [pc, #420]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fd33 	bl	80034bc <RCC_SetFlashLatencyFromMSIRange>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e34d      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a60:	f000 fc36 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	495a      	ldr	r1, [pc, #360]	; (8002bdc <HAL_RCC_OscConfig+0x29c>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	4a58      	ldr	r2, [pc, #352]	; (8002be0 <HAL_RCC_OscConfig+0x2a0>)
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <HAL_RCC_OscConfig+0x2a4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe f957 	bl	8000d38 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d052      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	e331      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aa0:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa4a 	bl	8000f44 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fa46 	bl	8000f44 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e31a      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac6:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a40      	ldr	r2, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	493b      	ldr	r1, [pc, #236]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	4936      	ldr	r1, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e01a      	b.n	8002b3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a33      	ldr	r2, [pc, #204]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fa17 	bl	8000f44 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fa13 	bl	8000f44 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e2e7      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2c:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x1da>
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d074      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x21a>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d10e      	bne.n	8002b72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d064      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d160      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e2c4      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x24a>
 8002b7c:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e01d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x286>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_OscConfig+0x26e>
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x286>
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x298>)
 8002bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7fe f9b9 	bl	8000f44 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd4:	e011      	b.n	8002bfa <HAL_RCC_OscConfig+0x2ba>
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08008744 	.word	0x08008744
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe f9ac 	bl	8000f44 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e280      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	4baf      	ldr	r3, [pc, #700]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2a8>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe f99c 	bl	8000f44 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe f998 	bl	8000f44 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e26c      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	4ba5      	ldr	r3, [pc, #660]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x2d0>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d060      	beq.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x310>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d119      	bne.n	8002c7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d116      	bne.n	8002c7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	4b99      	ldr	r3, [pc, #612]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_OscConfig+0x328>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e249      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b93      	ldr	r3, [pc, #588]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4990      	ldr	r1, [pc, #576]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	e040      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d023      	beq.n	8002cce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c86:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a8b      	ldr	r2, [pc, #556]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe f957 	bl	8000f44 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7fe f953 	bl	8000f44 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e227      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	4b82      	ldr	r3, [pc, #520]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	497c      	ldr	r1, [pc, #496]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
 8002ccc:	e018      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cce:	4b7a      	ldr	r3, [pc, #488]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a79      	ldr	r2, [pc, #484]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe f933 	bl	8000f44 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe f92f 	bl	8000f44 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e203      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	4b70      	ldr	r3, [pc, #448]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d03c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d14:	4b68      	ldr	r3, [pc, #416]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1a:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe f90e 	bl	8000f44 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f90a 	bl	8000f44 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1de      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3e:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <HAL_RCC_OscConfig+0x3ec>
 8002d4c:	e01b      	b.n	8002d86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f8f1 	bl	8000f44 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe f8ed 	bl	8000f44 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1c1      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ef      	bne.n	8002d66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a6 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d98:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6593      	str	r3, [r2, #88]	; 0x58
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc0:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <HAL_RCC_OscConfig+0x57c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d118      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <HAL_RCC_OscConfig+0x57c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <HAL_RCC_OscConfig+0x57c>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe f8b4 	bl	8000f44 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe f8b0 	bl	8000f44 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e184      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <HAL_RCC_OscConfig+0x57c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4d8>
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e16:	e024      	b.n	8002e62 <HAL_RCC_OscConfig+0x522>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d110      	bne.n	8002e42 <HAL_RCC_OscConfig+0x502>
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a20      	ldr	r2, [pc, #128]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	e00f      	b.n	8002e62 <HAL_RCC_OscConfig+0x522>
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e5a:	f023 0304 	bic.w	r3, r3, #4
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fe f86b 	bl	8000f44 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e70:	e00a      	b.n	8002e88 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fe f867 	bl	8000f44 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e139      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ed      	beq.n	8002e72 <HAL_RCC_OscConfig+0x532>
 8002e96:	e01a      	b.n	8002ece <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe f854 	bl	8000f44 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fe f850 	bl	8000f44 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d906      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e122      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec0:	4b90      	ldr	r3, [pc, #576]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e8      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b8b      	ldr	r3, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a8a      	ldr	r2, [pc, #552]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8108 	beq.w	80030fa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	f040 80d0 	bne.w	8003094 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ef4:	4b83      	ldr	r3, [pc, #524]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d130      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	3b01      	subs	r3, #1
 8002f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d127      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11f      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f34:	2a07      	cmp	r2, #7
 8002f36:	bf14      	ite	ne
 8002f38:	2201      	movne	r2, #1
 8002f3a:	2200      	moveq	r2, #0
 8002f3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d109      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d06e      	beq.n	8003048 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d069      	beq.n	8003044 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f70:	4b64      	ldr	r3, [pc, #400]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b7      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b5d      	ldr	r3, [pc, #372]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5c      	ldr	r2, [pc, #368]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f98:	f7fd ffd4 	bl	8000f44 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd ffd0 	bl	8000f44 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0a4      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	4b54      	ldr	r3, [pc, #336]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b51      	ldr	r3, [pc, #324]	; (8003108 <HAL_RCC_OscConfig+0x7c8>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fce:	3a01      	subs	r2, #1
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	4311      	orrs	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd8:	0212      	lsls	r2, r2, #8
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0552      	lsls	r2, r2, #21
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0652      	lsls	r2, r2, #25
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	0912      	lsrs	r2, r2, #4
 8002ffa:	0452      	lsls	r2, r2, #17
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4941      	ldr	r1, [pc, #260]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003004:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a3e      	ldr	r2, [pc, #248]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003010:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a3b      	ldr	r2, [pc, #236]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800301c:	f7fd ff92 	bl	8000f44 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd ff8e 	bl	8000f44 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e062      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003042:	e05a      	b.n	80030fa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e059      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d152      	bne.n	80030fa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306c:	f7fd ff6a 	bl	8000f44 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd ff66 	bl	8000f44 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e03a      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x734>
 8003092:	e032      	b.n	80030fa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d02d      	beq.n	80030f6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a19      	ldr	r2, [pc, #100]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030b8:	f023 0303 	bic.w	r3, r3, #3
 80030bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a10      	ldr	r2, [pc, #64]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fd ff39 	bl	8000f44 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fd ff35 	bl	8000f44 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e009      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x7c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x796>
 80030f4:	e001      	b.n	80030fa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	f99d808c 	.word	0xf99d808c

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0c8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4961      	ldr	r1, [pc, #388]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d04c      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003164:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d121      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e09e      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e092      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e086      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e07e      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 0203 	bic.w	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	493f      	ldr	r1, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c6:	f7fd febd 	bl	8000f44 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7fd feb9 	bl	8000f44 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e066      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 020c 	and.w	r2, r3, #12
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d1eb      	bne.n	80031ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	492c      	ldr	r1, [pc, #176]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d210      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4924      	ldr	r1, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e036      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4918      	ldr	r1, [pc, #96]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4910      	ldr	r1, [pc, #64]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003282:	f000 f825 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490c      	ldr	r1, [pc, #48]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd fd46 	bl	8000d38 <HAL_InitTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80032b0:	7afb      	ldrb	r3, [r7, #11]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08008744 	.word	0x08008744
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d11e      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003310:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e005      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d102      	bne.n	800334e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e004      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d101      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003356:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d134      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0xa6>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d003      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0xac>
 8003374:	e005      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003378:	617b      	str	r3, [r7, #20]
      break;
 800337a:	e005      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	617b      	str	r3, [r7, #20]
      break;
 8003380:	e002      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	617b      	str	r3, [r7, #20]
      break;
 8003386:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	091b      	lsrs	r3, r3, #4
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	3301      	adds	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	fb02 f203 	mul.w	r2, r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	0e5b      	lsrs	r3, r3, #25
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	3301      	adds	r3, #1
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c8:	69bb      	ldr	r3, [r7, #24]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	0800875c 	.word	0x0800875c
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4904      	ldr	r1, [pc, #16]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	08008754 	.word	0x08008754

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003430:	f7ff ffda 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0adb      	lsrs	r3, r3, #11
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000
 8003454:	08008754 	.word	0x08008754

08003458 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	220f      	movs	r2, #15
 8003466:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_RCC_GetClockConfig+0x5c>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0203 	and.w	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_GetClockConfig+0x5c>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	08db      	lsrs	r3, r3, #3
 8003492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_RCC_GetClockConfig+0x60>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0207 	and.w	r2, r3, #7
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	601a      	str	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40022000 	.word	0x40022000

080034bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034d4:	f7ff f9d0 	bl	8002878 <HAL_PWREx_GetVoltageRange>
 80034d8:	6178      	str	r0, [r7, #20]
 80034da:	e014      	b.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	6593      	str	r3, [r2, #88]	; 0x58
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034f4:	f7ff f9c0 	bl	8002878 <HAL_PWREx_GetVoltageRange>
 80034f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350c:	d10b      	bne.n	8003526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d919      	bls.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2ba0      	cmp	r3, #160	; 0xa0
 8003518:	d902      	bls.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800351a:	2302      	movs	r3, #2
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e013      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003520:	2301      	movs	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	e010      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b80      	cmp	r3, #128	; 0x80
 800352a:	d902      	bls.n	8003532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800352c:	2303      	movs	r3, #3
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e00a      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d102      	bne.n	800353e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003538:	2302      	movs	r3, #2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e004      	b.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d101      	bne.n	8003548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003544:	2301      	movs	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 0207 	bic.w	r2, r3, #7
 8003550:	4909      	ldr	r1, [pc, #36]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	40022000 	.word	0x40022000

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003584:	2300      	movs	r3, #0
 8003586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003588:	2300      	movs	r3, #0
 800358a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003594:	2b00      	cmp	r3, #0
 8003596:	d041      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a0:	d02a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a6:	d824      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ac:	d008      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b2:	d81e      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035bc:	d010      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035be:	e018      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c0:	4b86      	ldr	r3, [pc, #536]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a85      	ldr	r2, [pc, #532]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035cc:	e015      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 fabb 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035de:	e00c      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3320      	adds	r3, #32
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fba6 	bl	8003d38 <RCCEx_PLLSAI2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	74fb      	strb	r3, [r7, #19]
      break;
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360e:	4973      	ldr	r1, [pc, #460]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003616:	e001      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d041      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003630:	d02a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003636:	d824      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800363e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003642:	d81e      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800364c:	d010      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800364e:	e018      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003650:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a61      	ldr	r2, [pc, #388]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800365c:	e015      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fa73 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800366e:	e00c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3320      	adds	r3, #32
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fb5e 	bl	8003d38 <RCCEx_PLLSAI2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	74fb      	strb	r3, [r7, #19]
      break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003690:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369e:	494f      	ldr	r1, [pc, #316]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a0 	beq.w	80037fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036ce:	2300      	movs	r3, #0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a40      	ldr	r2, [pc, #256]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
 80036e0:	4b3e      	ldr	r3, [pc, #248]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fc22 	bl	8000f44 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fc1e 	bl	8000f44 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	74fb      	strb	r3, [r7, #19]
        break;
 8003716:	e005      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003718:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d15c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	d019      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003774:	4a19      	ldr	r2, [pc, #100]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fbdd 	bl	8000f44 <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378c:	e00b      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fd fbd9 	bl	8000f44 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d902      	bls.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	74fb      	strb	r3, [r7, #19]
            break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a6:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ec      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	4904      	ldr	r1, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037d2:	e009      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	74bb      	strb	r3, [r7, #18]
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037e8:	7c7b      	ldrb	r3, [r7, #17]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d105      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ee:	4b9e      	ldr	r3, [pc, #632]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	4a9d      	ldr	r2, [pc, #628]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003806:	4b98      	ldr	r3, [pc, #608]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 0203 	bic.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	4994      	ldr	r1, [pc, #592]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003828:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f023 020c 	bic.w	r2, r3, #12
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	498c      	ldr	r1, [pc, #560]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800384a:	4b87      	ldr	r3, [pc, #540]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	4983      	ldr	r1, [pc, #524]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800386c:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	497b      	ldr	r1, [pc, #492]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800388e:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	4972      	ldr	r1, [pc, #456]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b0:	4b6d      	ldr	r3, [pc, #436]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	496a      	ldr	r1, [pc, #424]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	4961      	ldr	r1, [pc, #388]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038f4:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	4959      	ldr	r1, [pc, #356]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003916:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	4950      	ldr	r1, [pc, #320]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	4948      	ldr	r1, [pc, #288]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800395a:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	493f      	ldr	r1, [pc, #252]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d028      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800397c:	4b3a      	ldr	r3, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	4937      	ldr	r1, [pc, #220]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800399a:	d106      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800399c:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a6:	60d3      	str	r3, [r2, #12]
 80039a8:	e011      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b2:	d10c      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f8c8 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d028      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039da:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	491f      	ldr	r1, [pc, #124]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a04:	60d3      	str	r3, [r2, #12]
 8003a06:	e011      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2101      	movs	r1, #1
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f899 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a56:	d109      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a02      	ldr	r2, [pc, #8]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a62:	60d3      	str	r3, [r2, #12]
 8003a64:	e014      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f867 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aaa:	4928      	ldr	r1, [pc, #160]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f844 	bl	8003b50 <RCCEx_PLLSAI1_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d014      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	74bb      	strb	r3, [r7, #18]
 8003ad6:	e011      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3320      	adds	r3, #32
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f925 	bl	8003d38 <RCCEx_PLLSAI2_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3a:	4904      	ldr	r1, [pc, #16]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b42:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000

08003b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b5e:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d018      	beq.n	8003b9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b6a:	4b72      	ldr	r3, [pc, #456]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0203 	and.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d10d      	bne.n	8003b96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
       ||
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d047      	beq.n	8003c26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	e044      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d018      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x86>
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d825      	bhi.n	8003bf4 <RCCEx_PLLSAI1_Config+0xa4>
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d002      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x62>
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d009      	beq.n	8003bc4 <RCCEx_PLLSAI1_Config+0x74>
 8003bb0:	e020      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bb2:	4b60      	ldr	r3, [pc, #384]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11d      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc2:	e01a      	b.n	8003bfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bc4:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e013      	b.n	8003bfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bd6:	4b57      	ldr	r3, [pc, #348]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003be2:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bf2:	e006      	b.n	8003c02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e004      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e002      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	4944      	ldr	r1, [pc, #272]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d17d      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c2c:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c38:	f7fd f984 	bl	8000f44 <HAL_GetTick>
 8003c3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c3e:	e009      	b.n	8003c54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c40:	f7fd f980 	bl	8000f44 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d902      	bls.n	8003c54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	73fb      	strb	r3, [r7, #15]
        break;
 8003c52:	e005      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1ef      	bne.n	8003c40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d160      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d111      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6892      	ldr	r2, [r2, #8]
 8003c7c:	0211      	lsls	r1, r2, #8
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	0912      	lsrs	r2, r2, #4
 8003c84:	0452      	lsls	r2, r2, #17
 8003c86:	430a      	orrs	r2, r1
 8003c88:	492a      	ldr	r1, [pc, #168]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
 8003c8e:	e027      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d112      	bne.n	8003cbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c96:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6892      	ldr	r2, [r2, #8]
 8003ca6:	0211      	lsls	r1, r2, #8
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6912      	ldr	r2, [r2, #16]
 8003cac:	0852      	lsrs	r2, r2, #1
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	0552      	lsls	r2, r2, #21
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	491f      	ldr	r1, [pc, #124]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]
 8003cba:	e011      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	0211      	lsls	r1, r2, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6952      	ldr	r2, [r2, #20]
 8003cd2:	0852      	lsrs	r2, r2, #1
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0652      	lsls	r2, r2, #25
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	4916      	ldr	r1, [pc, #88]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd f92a 	bl	8000f44 <HAL_GetTick>
 8003cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cf2:	e009      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf4:	f7fd f926 	bl	8000f44 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d902      	bls.n	8003d08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	73fb      	strb	r3, [r7, #15]
          break;
 8003d06:	e005      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ef      	beq.n	8003cf4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	4904      	ldr	r1, [pc, #16]	; (8003d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000

08003d38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d018      	beq.n	8003d84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d52:	4b67      	ldr	r3, [pc, #412]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d10d      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
       ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d6a:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
       ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d047      	beq.n	8003e0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e044      	b.n	8003e0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d018      	beq.n	8003dbe <RCCEx_PLLSAI2_Config+0x86>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d825      	bhi.n	8003ddc <RCCEx_PLLSAI2_Config+0xa4>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d002      	beq.n	8003d9a <RCCEx_PLLSAI2_Config+0x62>
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d009      	beq.n	8003dac <RCCEx_PLLSAI2_Config+0x74>
 8003d98:	e020      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d9a:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11d      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003daa:	e01a      	b.n	8003de2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dac:	4b50      	ldr	r3, [pc, #320]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbc:	e013      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dca:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dda:	e006      	b.n	8003dea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      break;
 8003de0:	e004      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6819      	ldr	r1, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	430b      	orrs	r3, r1
 8003e08:	4939      	ldr	r1, [pc, #228]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d167      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a35      	ldr	r2, [pc, #212]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e20:	f7fd f890 	bl	8000f44 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e26:	e009      	b.n	8003e3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e28:	f7fd f88c 	bl	8000f44 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d902      	bls.n	8003e3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3a:	e005      	b.n	8003e48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ef      	bne.n	8003e28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d14a      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d111      	bne.n	8003e78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e54:	4b26      	ldr	r3, [pc, #152]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
 8003e64:	0211      	lsls	r1, r2, #8
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	0912      	lsrs	r2, r2, #4
 8003e6c:	0452      	lsls	r2, r2, #17
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	491f      	ldr	r1, [pc, #124]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	614b      	str	r3, [r1, #20]
 8003e76:	e011      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6912      	ldr	r2, [r2, #16]
 8003e8e:	0852      	lsrs	r2, r2, #1
 8003e90:	3a01      	subs	r2, #1
 8003e92:	0652      	lsls	r2, r2, #25
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4916      	ldr	r1, [pc, #88]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd f84c 	bl	8000f44 <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eae:	e009      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb0:	f7fd f848 	bl	8000f44 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec2:	e005      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4904      	ldr	r1, [pc, #16]	; (8003ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e049      	b.n	8003f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f841 	bl	8003fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 fc66 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e04f      	b.n	8004070 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a23      	ldr	r2, [pc, #140]	; (800407c <HAL_TIM_Base_Start_IT+0xc4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x76>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d018      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x76>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_TIM_Base_Start_IT+0xc8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x76>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <HAL_TIM_Base_Start_IT+0xcc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x76>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_TIM_Base_Start_IT+0xd0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x76>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1b      	ldr	r2, [pc, #108]	; (800408c <HAL_TIM_Base_Start_IT+0xd4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x76>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_TIM_Base_Start_IT+0xd8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d115      	bne.n	800405a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b17      	ldr	r3, [pc, #92]	; (8004094 <HAL_TIM_Base_Start_IT+0xdc>)
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d015      	beq.n	800406c <HAL_TIM_Base_Start_IT+0xb4>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d011      	beq.n	800406c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	e008      	b.n	800406c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e000      	b.n	800406e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	00010007 	.word	0x00010007

08004098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e049      	b.n	800413e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc fd68 	bl	8000b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fb94 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start+0x24>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e03c      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d109      	bne.n	8004186 <HAL_TIM_PWM_Start+0x3e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e02f      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e022      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_PWM_Start+0x72>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x8c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <HAL_TIM_PWM_Start+0x9e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e09c      	b.n	8004328 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0xb6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	e023      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start+0xc6>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800420c:	e01b      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0xd6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800421c:	e013      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start+0xe6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800422c:	e00b      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b10      	cmp	r3, #16
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start+0xf6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800423c:	e003      	b.n	8004246 <HAL_TIM_PWM_Start+0xfe>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2201      	movs	r2, #1
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fe48 	bl	8004ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a35      	ldr	r2, [pc, #212]	; (8004330 <HAL_TIM_PWM_Start+0x1e8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_TIM_PWM_Start+0x13e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <HAL_TIM_PWM_Start+0x1ec>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_TIM_PWM_Start+0x13e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a32      	ldr	r2, [pc, #200]	; (8004338 <HAL_TIM_PWM_Start+0x1f0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_TIM_PWM_Start+0x13e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a31      	ldr	r2, [pc, #196]	; (800433c <HAL_TIM_PWM_Start+0x1f4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_TIM_PWM_Start+0x13e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <HAL_TIM_PWM_Start+0x1f8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_TIM_PWM_Start+0x142>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_TIM_PWM_Start+0x144>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a22      	ldr	r2, [pc, #136]	; (8004330 <HAL_TIM_PWM_Start+0x1e8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01d      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x19e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d018      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x19e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a22      	ldr	r2, [pc, #136]	; (8004344 <HAL_TIM_PWM_Start+0x1fc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x19e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a21      	ldr	r2, [pc, #132]	; (8004348 <HAL_TIM_PWM_Start+0x200>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00e      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x19e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_TIM_PWM_Start+0x204>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d009      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x19e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a17      	ldr	r2, [pc, #92]	; (8004334 <HAL_TIM_PWM_Start+0x1ec>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x19e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a15      	ldr	r2, [pc, #84]	; (8004338 <HAL_TIM_PWM_Start+0x1f0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d115      	bne.n	8004312 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <HAL_TIM_PWM_Start+0x208>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d015      	beq.n	8004324 <HAL_TIM_PWM_Start+0x1dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fe:	d011      	beq.n	8004324 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	e008      	b.n	8004324 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e000      	b.n	8004326 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004324:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	40014400 	.word	0x40014400
 8004340:	40014800 	.word	0x40014800
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	00010007 	.word	0x00010007

08004354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0202 	mvn.w	r2, #2
 8004380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa16 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa08 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa19 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0204 	mvn.w	r2, #4
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9ec 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9de 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f9ef 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0208 	mvn.w	r2, #8
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9c2 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9b4 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9c5 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f998 	bl	80047c8 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f98a 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f99b 	bl	80047dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0201 	mvn.w	r2, #1
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc fae0 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fe26 	bl	8005150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004512:	d10e      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fe19 	bl	8005164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d10e      	bne.n	800455e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d107      	bne.n	800455e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f949 	bl	80047f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b20      	cmp	r3, #32
 800456a:	d10e      	bne.n	800458a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b20      	cmp	r3, #32
 8004578:	d107      	bne.n	800458a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f06f 0220 	mvn.w	r2, #32
 8004582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fdd9 	bl	800513c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e0fd      	b.n	80047aa <HAL_TIM_PWM_ConfigChannel+0x216>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b14      	cmp	r3, #20
 80045ba:	f200 80f0 	bhi.w	800479e <HAL_TIM_PWM_ConfigChannel+0x20a>
 80045be:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	08004619 	.word	0x08004619
 80045c8:	0800479f 	.word	0x0800479f
 80045cc:	0800479f 	.word	0x0800479f
 80045d0:	0800479f 	.word	0x0800479f
 80045d4:	08004659 	.word	0x08004659
 80045d8:	0800479f 	.word	0x0800479f
 80045dc:	0800479f 	.word	0x0800479f
 80045e0:	0800479f 	.word	0x0800479f
 80045e4:	0800469b 	.word	0x0800469b
 80045e8:	0800479f 	.word	0x0800479f
 80045ec:	0800479f 	.word	0x0800479f
 80045f0:	0800479f 	.word	0x0800479f
 80045f4:	080046db 	.word	0x080046db
 80045f8:	0800479f 	.word	0x0800479f
 80045fc:	0800479f 	.word	0x0800479f
 8004600:	0800479f 	.word	0x0800479f
 8004604:	0800471d 	.word	0x0800471d
 8004608:	0800479f 	.word	0x0800479f
 800460c:	0800479f 	.word	0x0800479f
 8004610:	0800479f 	.word	0x0800479f
 8004614:	0800475d 	.word	0x0800475d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f98a 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0204 	bic.w	r2, r2, #4
 8004642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6999      	ldr	r1, [r3, #24]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	619a      	str	r2, [r3, #24]
      break;
 8004656:	e0a3      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f9fa 	bl	8004a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
      break;
 8004698:	e082      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fa63 	bl	8004b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0208 	orr.w	r2, r2, #8
 80046b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0204 	bic.w	r2, r2, #4
 80046c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69d9      	ldr	r1, [r3, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	61da      	str	r2, [r3, #28]
      break;
 80046d8:	e062      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 facb 	bl	8004c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	021a      	lsls	r2, r3, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	61da      	str	r2, [r3, #28]
      break;
 800471a:	e041      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fb14 	bl	8004d50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0208 	orr.w	r2, r2, #8
 8004736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0204 	bic.w	r2, r2, #4
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800475a:	e021      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fb58 	bl	8004e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004776:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	021a      	lsls	r2, r3, #8
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800479e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop

080047b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a40      	ldr	r2, [pc, #256]	; (8004918 <TIM_Base_SetConfig+0x114>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d00f      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3d      	ldr	r2, [pc, #244]	; (800491c <TIM_Base_SetConfig+0x118>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3c      	ldr	r2, [pc, #240]	; (8004920 <TIM_Base_SetConfig+0x11c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d007      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3b      	ldr	r2, [pc, #236]	; (8004924 <TIM_Base_SetConfig+0x120>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3a      	ldr	r2, [pc, #232]	; (8004928 <TIM_Base_SetConfig+0x124>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d108      	bne.n	8004856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2f      	ldr	r2, [pc, #188]	; (8004918 <TIM_Base_SetConfig+0x114>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01f      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d01b      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2c      	ldr	r2, [pc, #176]	; (800491c <TIM_Base_SetConfig+0x118>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d017      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a2b      	ldr	r2, [pc, #172]	; (8004920 <TIM_Base_SetConfig+0x11c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2a      	ldr	r2, [pc, #168]	; (8004924 <TIM_Base_SetConfig+0x120>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00f      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a29      	ldr	r2, [pc, #164]	; (8004928 <TIM_Base_SetConfig+0x124>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00b      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a28      	ldr	r2, [pc, #160]	; (800492c <TIM_Base_SetConfig+0x128>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a27      	ldr	r2, [pc, #156]	; (8004930 <TIM_Base_SetConfig+0x12c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_Base_SetConfig+0x9a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <TIM_Base_SetConfig+0x130>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a10      	ldr	r2, [pc, #64]	; (8004918 <TIM_Base_SetConfig+0x114>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_Base_SetConfig+0xf8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <TIM_Base_SetConfig+0x124>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0xf8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <TIM_Base_SetConfig+0x128>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0xf8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a10      	ldr	r2, [pc, #64]	; (8004930 <TIM_Base_SetConfig+0x12c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0xf8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <TIM_Base_SetConfig+0x130>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d103      	bne.n	8004904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	615a      	str	r2, [r3, #20]
}
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40013400 	.word	0x40013400
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0302 	bic.w	r3, r3, #2
 8004984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a2c      	ldr	r2, [pc, #176]	; (8004a44 <TIM_OC1_SetConfig+0x10c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00f      	beq.n	80049b8 <TIM_OC1_SetConfig+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <TIM_OC1_SetConfig+0x110>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00b      	beq.n	80049b8 <TIM_OC1_SetConfig+0x80>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <TIM_OC1_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d007      	beq.n	80049b8 <TIM_OC1_SetConfig+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <TIM_OC1_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d003      	beq.n	80049b8 <TIM_OC1_SetConfig+0x80>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <TIM_OC1_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d10c      	bne.n	80049d2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0308 	bic.w	r3, r3, #8
 80049be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 0304 	bic.w	r3, r3, #4
 80049d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <TIM_OC1_SetConfig+0x10c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_OC1_SetConfig+0xc2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <TIM_OC1_SetConfig+0x110>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_OC1_SetConfig+0xc2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <TIM_OC1_SetConfig+0x114>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_OC1_SetConfig+0xc2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <TIM_OC1_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_OC1_SetConfig+0xc2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <TIM_OC1_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d111      	bne.n	8004a1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	371c      	adds	r7, #28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0210 	bic.w	r2, r3, #16
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0320 	bic.w	r3, r3, #32
 8004aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <TIM_OC2_SetConfig+0x100>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC2_SetConfig+0x6c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <TIM_OC2_SetConfig+0x104>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10d      	bne.n	8004ae0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <TIM_OC2_SetConfig+0x100>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00f      	beq.n	8004b08 <TIM_OC2_SetConfig+0xb0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <TIM_OC2_SetConfig+0x104>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <TIM_OC2_SetConfig+0xb0>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <TIM_OC2_SetConfig+0x108>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_OC2_SetConfig+0xb0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <TIM_OC2_SetConfig+0x10c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC2_SetConfig+0xb0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <TIM_OC2_SetConfig+0x110>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d113      	bne.n	8004b30 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	621a      	str	r2, [r3, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40013400 	.word	0x40013400
 8004b60:	40014000 	.word	0x40014000
 8004b64:	40014400 	.word	0x40014400
 8004b68:	40014800 	.word	0x40014800

08004b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a27      	ldr	r2, [pc, #156]	; (8004c68 <TIM_OC3_SetConfig+0xfc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_OC3_SetConfig+0x6a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <TIM_OC3_SetConfig+0x100>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10d      	bne.n	8004bf2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <TIM_OC3_SetConfig+0xfc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_OC3_SetConfig+0xae>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <TIM_OC3_SetConfig+0x100>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_OC3_SetConfig+0xae>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1a      	ldr	r2, [pc, #104]	; (8004c70 <TIM_OC3_SetConfig+0x104>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_OC3_SetConfig+0xae>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <TIM_OC3_SetConfig+0x108>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0xae>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <TIM_OC3_SetConfig+0x10c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40013400 	.word	0x40013400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800

08004c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <TIM_OC4_SetConfig+0xc0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00f      	beq.n	8004d00 <TIM_OC4_SetConfig+0x84>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a17      	ldr	r2, [pc, #92]	; (8004d40 <TIM_OC4_SetConfig+0xc4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_OC4_SetConfig+0x84>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <TIM_OC4_SetConfig+0xc8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_OC4_SetConfig+0x84>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <TIM_OC4_SetConfig+0xcc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC4_SetConfig+0x84>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a14      	ldr	r2, [pc, #80]	; (8004d4c <TIM_OC4_SetConfig+0xd0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800

08004d50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <TIM_OC5_SetConfig+0xb4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00f      	beq.n	8004dca <TIM_OC5_SetConfig+0x7a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <TIM_OC5_SetConfig+0xb8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_OC5_SetConfig+0x7a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <TIM_OC5_SetConfig+0xbc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_OC5_SetConfig+0x7a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <TIM_OC5_SetConfig+0xc0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC5_SetConfig+0x7a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <TIM_OC5_SetConfig+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d109      	bne.n	8004dde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800

08004e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	051b      	lsls	r3, r3, #20
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <TIM_OC6_SetConfig+0xb8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00f      	beq.n	8004e94 <TIM_OC6_SetConfig+0x7c>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a17      	ldr	r2, [pc, #92]	; (8004ed4 <TIM_OC6_SetConfig+0xbc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <TIM_OC6_SetConfig+0x7c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <TIM_OC6_SetConfig+0xc0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d007      	beq.n	8004e94 <TIM_OC6_SetConfig+0x7c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a15      	ldr	r2, [pc, #84]	; (8004edc <TIM_OC6_SetConfig+0xc4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_OC6_SetConfig+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <TIM_OC6_SetConfig+0xc8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d109      	bne.n	8004ea8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40013400 	.word	0x40013400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800

08004ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
	...

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e068      	b.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2e      	ldr	r2, [pc, #184]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2d      	ldr	r2, [pc, #180]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d018      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a13      	ldr	r2, [pc, #76]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a14      	ldr	r2, [pc, #80]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10c      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e065      	b.n	8005128 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a16      	ldr	r2, [pc, #88]	; (8005134 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d115      	bne.n	8005116 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	051b      	lsls	r3, r3, #20
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40013400 	.word	0x40013400

0800513c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e040      	b.n	800520c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb fd8a 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	; 0x24
 80051a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8c0 	bl	800533c <UART_SetConfig>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e022      	b.n	800520c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fb3e 	bl	8005850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fbc5 	bl	8005994 <UART_CheckIdleState>
 800520a:	4603      	mov	r3, r0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005228:	2b20      	cmp	r3, #32
 800522a:	f040 8082 	bne.w	8005332 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Transmit+0x26>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07a      	b.n	8005334 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UART_Transmit+0x38>
 8005248:	2302      	movs	r3, #2
 800524a:	e073      	b.n	8005334 <HAL_UART_Transmit+0x120>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2221      	movs	r2, #33	; 0x21
 8005260:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005262:	f7fb fe6f 	bl	8000f44 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d108      	bne.n	8005294 <HAL_UART_Transmit+0x80>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e003      	b.n	800529c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052a4:	e02d      	b.n	8005302 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fbb8 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e039      	b.n	8005334 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d2:	b292      	uxth	r2, r2
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3302      	adds	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e008      	b.n	80052f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	781a      	ldrb	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b292      	uxth	r2, r2
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cb      	bne.n	80052a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	; 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fb84 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e005      	b.n	8005334 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800533c:	b5b0      	push	{r4, r5, r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4bad      	ldr	r3, [pc, #692]	; (800561c <UART_SetConfig+0x2e0>)
 8005368:	4013      	ands	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	69f9      	ldr	r1, [r7, #28]
 8005370:	430b      	orrs	r3, r1
 8005372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4aa2      	ldr	r2, [pc, #648]	; (8005620 <UART_SetConfig+0x2e4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a99      	ldr	r2, [pc, #612]	; (8005624 <UART_SetConfig+0x2e8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d121      	bne.n	8005406 <UART_SetConfig+0xca>
 80053c2:	4b99      	ldr	r3, [pc, #612]	; (8005628 <UART_SetConfig+0x2ec>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d817      	bhi.n	8005400 <UART_SetConfig+0xc4>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x9c>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	080053f5 	.word	0x080053f5
 80053e0:	080053ef 	.word	0x080053ef
 80053e4:	080053fb 	.word	0x080053fb
 80053e8:	2301      	movs	r3, #1
 80053ea:	76fb      	strb	r3, [r7, #27]
 80053ec:	e0e7      	b.n	80055be <UART_SetConfig+0x282>
 80053ee:	2302      	movs	r3, #2
 80053f0:	76fb      	strb	r3, [r7, #27]
 80053f2:	e0e4      	b.n	80055be <UART_SetConfig+0x282>
 80053f4:	2304      	movs	r3, #4
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	e0e1      	b.n	80055be <UART_SetConfig+0x282>
 80053fa:	2308      	movs	r3, #8
 80053fc:	76fb      	strb	r3, [r7, #27]
 80053fe:	e0de      	b.n	80055be <UART_SetConfig+0x282>
 8005400:	2310      	movs	r3, #16
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	e0db      	b.n	80055be <UART_SetConfig+0x282>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a88      	ldr	r2, [pc, #544]	; (800562c <UART_SetConfig+0x2f0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d132      	bne.n	8005476 <UART_SetConfig+0x13a>
 8005410:	4b85      	ldr	r3, [pc, #532]	; (8005628 <UART_SetConfig+0x2ec>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d828      	bhi.n	8005470 <UART_SetConfig+0x134>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0xe8>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005459 	.word	0x08005459
 8005428:	08005471 	.word	0x08005471
 800542c:	08005471 	.word	0x08005471
 8005430:	08005471 	.word	0x08005471
 8005434:	08005465 	.word	0x08005465
 8005438:	08005471 	.word	0x08005471
 800543c:	08005471 	.word	0x08005471
 8005440:	08005471 	.word	0x08005471
 8005444:	0800545f 	.word	0x0800545f
 8005448:	08005471 	.word	0x08005471
 800544c:	08005471 	.word	0x08005471
 8005450:	08005471 	.word	0x08005471
 8005454:	0800546b 	.word	0x0800546b
 8005458:	2300      	movs	r3, #0
 800545a:	76fb      	strb	r3, [r7, #27]
 800545c:	e0af      	b.n	80055be <UART_SetConfig+0x282>
 800545e:	2302      	movs	r3, #2
 8005460:	76fb      	strb	r3, [r7, #27]
 8005462:	e0ac      	b.n	80055be <UART_SetConfig+0x282>
 8005464:	2304      	movs	r3, #4
 8005466:	76fb      	strb	r3, [r7, #27]
 8005468:	e0a9      	b.n	80055be <UART_SetConfig+0x282>
 800546a:	2308      	movs	r3, #8
 800546c:	76fb      	strb	r3, [r7, #27]
 800546e:	e0a6      	b.n	80055be <UART_SetConfig+0x282>
 8005470:	2310      	movs	r3, #16
 8005472:	76fb      	strb	r3, [r7, #27]
 8005474:	e0a3      	b.n	80055be <UART_SetConfig+0x282>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a6d      	ldr	r2, [pc, #436]	; (8005630 <UART_SetConfig+0x2f4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d120      	bne.n	80054c2 <UART_SetConfig+0x186>
 8005480:	4b69      	ldr	r3, [pc, #420]	; (8005628 <UART_SetConfig+0x2ec>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d013      	beq.n	80054b6 <UART_SetConfig+0x17a>
 800548e:	2b30      	cmp	r3, #48	; 0x30
 8005490:	d814      	bhi.n	80054bc <UART_SetConfig+0x180>
 8005492:	2b20      	cmp	r3, #32
 8005494:	d009      	beq.n	80054aa <UART_SetConfig+0x16e>
 8005496:	2b20      	cmp	r3, #32
 8005498:	d810      	bhi.n	80054bc <UART_SetConfig+0x180>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <UART_SetConfig+0x168>
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d006      	beq.n	80054b0 <UART_SetConfig+0x174>
 80054a2:	e00b      	b.n	80054bc <UART_SetConfig+0x180>
 80054a4:	2300      	movs	r3, #0
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e089      	b.n	80055be <UART_SetConfig+0x282>
 80054aa:	2302      	movs	r3, #2
 80054ac:	76fb      	strb	r3, [r7, #27]
 80054ae:	e086      	b.n	80055be <UART_SetConfig+0x282>
 80054b0:	2304      	movs	r3, #4
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	e083      	b.n	80055be <UART_SetConfig+0x282>
 80054b6:	2308      	movs	r3, #8
 80054b8:	76fb      	strb	r3, [r7, #27]
 80054ba:	e080      	b.n	80055be <UART_SetConfig+0x282>
 80054bc:	2310      	movs	r3, #16
 80054be:	76fb      	strb	r3, [r7, #27]
 80054c0:	e07d      	b.n	80055be <UART_SetConfig+0x282>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5b      	ldr	r2, [pc, #364]	; (8005634 <UART_SetConfig+0x2f8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d120      	bne.n	800550e <UART_SetConfig+0x1d2>
 80054cc:	4b56      	ldr	r3, [pc, #344]	; (8005628 <UART_SetConfig+0x2ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054d6:	2bc0      	cmp	r3, #192	; 0xc0
 80054d8:	d013      	beq.n	8005502 <UART_SetConfig+0x1c6>
 80054da:	2bc0      	cmp	r3, #192	; 0xc0
 80054dc:	d814      	bhi.n	8005508 <UART_SetConfig+0x1cc>
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d009      	beq.n	80054f6 <UART_SetConfig+0x1ba>
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d810      	bhi.n	8005508 <UART_SetConfig+0x1cc>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <UART_SetConfig+0x1b4>
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d006      	beq.n	80054fc <UART_SetConfig+0x1c0>
 80054ee:	e00b      	b.n	8005508 <UART_SetConfig+0x1cc>
 80054f0:	2300      	movs	r3, #0
 80054f2:	76fb      	strb	r3, [r7, #27]
 80054f4:	e063      	b.n	80055be <UART_SetConfig+0x282>
 80054f6:	2302      	movs	r3, #2
 80054f8:	76fb      	strb	r3, [r7, #27]
 80054fa:	e060      	b.n	80055be <UART_SetConfig+0x282>
 80054fc:	2304      	movs	r3, #4
 80054fe:	76fb      	strb	r3, [r7, #27]
 8005500:	e05d      	b.n	80055be <UART_SetConfig+0x282>
 8005502:	2308      	movs	r3, #8
 8005504:	76fb      	strb	r3, [r7, #27]
 8005506:	e05a      	b.n	80055be <UART_SetConfig+0x282>
 8005508:	2310      	movs	r3, #16
 800550a:	76fb      	strb	r3, [r7, #27]
 800550c:	e057      	b.n	80055be <UART_SetConfig+0x282>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a49      	ldr	r2, [pc, #292]	; (8005638 <UART_SetConfig+0x2fc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d125      	bne.n	8005564 <UART_SetConfig+0x228>
 8005518:	4b43      	ldr	r3, [pc, #268]	; (8005628 <UART_SetConfig+0x2ec>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005526:	d017      	beq.n	8005558 <UART_SetConfig+0x21c>
 8005528:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552c:	d817      	bhi.n	800555e <UART_SetConfig+0x222>
 800552e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005532:	d00b      	beq.n	800554c <UART_SetConfig+0x210>
 8005534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005538:	d811      	bhi.n	800555e <UART_SetConfig+0x222>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <UART_SetConfig+0x20a>
 800553e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005542:	d006      	beq.n	8005552 <UART_SetConfig+0x216>
 8005544:	e00b      	b.n	800555e <UART_SetConfig+0x222>
 8005546:	2300      	movs	r3, #0
 8005548:	76fb      	strb	r3, [r7, #27]
 800554a:	e038      	b.n	80055be <UART_SetConfig+0x282>
 800554c:	2302      	movs	r3, #2
 800554e:	76fb      	strb	r3, [r7, #27]
 8005550:	e035      	b.n	80055be <UART_SetConfig+0x282>
 8005552:	2304      	movs	r3, #4
 8005554:	76fb      	strb	r3, [r7, #27]
 8005556:	e032      	b.n	80055be <UART_SetConfig+0x282>
 8005558:	2308      	movs	r3, #8
 800555a:	76fb      	strb	r3, [r7, #27]
 800555c:	e02f      	b.n	80055be <UART_SetConfig+0x282>
 800555e:	2310      	movs	r3, #16
 8005560:	76fb      	strb	r3, [r7, #27]
 8005562:	e02c      	b.n	80055be <UART_SetConfig+0x282>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <UART_SetConfig+0x2e4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d125      	bne.n	80055ba <UART_SetConfig+0x27e>
 800556e:	4b2e      	ldr	r3, [pc, #184]	; (8005628 <UART_SetConfig+0x2ec>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800557c:	d017      	beq.n	80055ae <UART_SetConfig+0x272>
 800557e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005582:	d817      	bhi.n	80055b4 <UART_SetConfig+0x278>
 8005584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005588:	d00b      	beq.n	80055a2 <UART_SetConfig+0x266>
 800558a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558e:	d811      	bhi.n	80055b4 <UART_SetConfig+0x278>
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <UART_SetConfig+0x260>
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005598:	d006      	beq.n	80055a8 <UART_SetConfig+0x26c>
 800559a:	e00b      	b.n	80055b4 <UART_SetConfig+0x278>
 800559c:	2300      	movs	r3, #0
 800559e:	76fb      	strb	r3, [r7, #27]
 80055a0:	e00d      	b.n	80055be <UART_SetConfig+0x282>
 80055a2:	2302      	movs	r3, #2
 80055a4:	76fb      	strb	r3, [r7, #27]
 80055a6:	e00a      	b.n	80055be <UART_SetConfig+0x282>
 80055a8:	2304      	movs	r3, #4
 80055aa:	76fb      	strb	r3, [r7, #27]
 80055ac:	e007      	b.n	80055be <UART_SetConfig+0x282>
 80055ae:	2308      	movs	r3, #8
 80055b0:	76fb      	strb	r3, [r7, #27]
 80055b2:	e004      	b.n	80055be <UART_SetConfig+0x282>
 80055b4:	2310      	movs	r3, #16
 80055b6:	76fb      	strb	r3, [r7, #27]
 80055b8:	e001      	b.n	80055be <UART_SetConfig+0x282>
 80055ba:	2310      	movs	r3, #16
 80055bc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <UART_SetConfig+0x2e4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	f040 8087 	bne.w	80056d8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055ca:	7efb      	ldrb	r3, [r7, #27]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d837      	bhi.n	8005640 <UART_SetConfig+0x304>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x29c>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005641 	.word	0x08005641
 80055e0:	08005605 	.word	0x08005605
 80055e4:	08005641 	.word	0x08005641
 80055e8:	0800560b 	.word	0x0800560b
 80055ec:	08005641 	.word	0x08005641
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005613 	.word	0x08005613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fd ff00 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8005600:	6178      	str	r0, [r7, #20]
        break;
 8005602:	e022      	b.n	800564a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <UART_SetConfig+0x300>)
 8005606:	617b      	str	r3, [r7, #20]
        break;
 8005608:	e01f      	b.n	800564a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560a:	f7fd fe61 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800560e:	6178      	str	r0, [r7, #20]
        break;
 8005610:	e01b      	b.n	800564a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005616:	617b      	str	r3, [r7, #20]
        break;
 8005618:	e017      	b.n	800564a <UART_SetConfig+0x30e>
 800561a:	bf00      	nop
 800561c:	efff69f3 	.word	0xefff69f3
 8005620:	40008000 	.word	0x40008000
 8005624:	40013800 	.word	0x40013800
 8005628:	40021000 	.word	0x40021000
 800562c:	40004400 	.word	0x40004400
 8005630:	40004800 	.word	0x40004800
 8005634:	40004c00 	.word	0x40004c00
 8005638:	40005000 	.word	0x40005000
 800563c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	76bb      	strb	r3, [r7, #26]
        break;
 8005648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80f1 	beq.w	8005834 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	429a      	cmp	r2, r3
 8005660:	d305      	bcc.n	800566e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	429a      	cmp	r2, r3
 800566c:	d902      	bls.n	8005674 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	76bb      	strb	r3, [r7, #26]
 8005672:	e0df      	b.n	8005834 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	4618      	mov	r0, r3
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	020b      	lsls	r3, r1, #8
 8005686:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800568a:	0202      	lsls	r2, r0, #8
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	6849      	ldr	r1, [r1, #4]
 8005690:	0849      	lsrs	r1, r1, #1
 8005692:	4608      	mov	r0, r1
 8005694:	f04f 0100 	mov.w	r1, #0
 8005698:	1814      	adds	r4, r2, r0
 800569a:	eb43 0501 	adc.w	r5, r3, r1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	4620      	mov	r0, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	f7fa fd90 	bl	80001d0 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4613      	mov	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056be:	d308      	bcc.n	80056d2 <UART_SetConfig+0x396>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c6:	d204      	bcs.n	80056d2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e0b0      	b.n	8005834 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	76bb      	strb	r3, [r7, #26]
 80056d6:	e0ad      	b.n	8005834 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e0:	d15c      	bne.n	800579c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80056e2:	7efb      	ldrb	r3, [r7, #27]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d828      	bhi.n	800573a <UART_SetConfig+0x3fe>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x3b4>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800571d 	.word	0x0800571d
 80056f8:	08005725 	.word	0x08005725
 80056fc:	0800573b 	.word	0x0800573b
 8005700:	0800572b 	.word	0x0800572b
 8005704:	0800573b 	.word	0x0800573b
 8005708:	0800573b 	.word	0x0800573b
 800570c:	0800573b 	.word	0x0800573b
 8005710:	08005733 	.word	0x08005733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005714:	f7fd fe74 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8005718:	6178      	str	r0, [r7, #20]
        break;
 800571a:	e013      	b.n	8005744 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571c:	f7fd fe86 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8005720:	6178      	str	r0, [r7, #20]
        break;
 8005722:	e00f      	b.n	8005744 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005724:	4b49      	ldr	r3, [pc, #292]	; (800584c <UART_SetConfig+0x510>)
 8005726:	617b      	str	r3, [r7, #20]
        break;
 8005728:	e00c      	b.n	8005744 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800572a:	f7fd fdd1 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800572e:	6178      	str	r0, [r7, #20]
        break;
 8005730:	e008      	b.n	8005744 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005736:	617b      	str	r3, [r7, #20]
        break;
 8005738:	e004      	b.n	8005744 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	76bb      	strb	r3, [r7, #26]
        break;
 8005742:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d074      	beq.n	8005834 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	005a      	lsls	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	fbb2 f3f3 	udiv	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b0f      	cmp	r3, #15
 8005766:	d916      	bls.n	8005796 <UART_SetConfig+0x45a>
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576e:	d212      	bcs.n	8005796 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f023 030f 	bic.w	r3, r3, #15
 8005778:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	b29a      	uxth	r2, r3
 8005786:	89fb      	ldrh	r3, [r7, #14]
 8005788:	4313      	orrs	r3, r2
 800578a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	89fa      	ldrh	r2, [r7, #14]
 8005792:	60da      	str	r2, [r3, #12]
 8005794:	e04e      	b.n	8005834 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	76bb      	strb	r3, [r7, #26]
 800579a:	e04b      	b.n	8005834 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800579c:	7efb      	ldrb	r3, [r7, #27]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d827      	bhi.n	80057f2 <UART_SetConfig+0x4b6>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <UART_SetConfig+0x46c>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057d5 	.word	0x080057d5
 80057b0:	080057dd 	.word	0x080057dd
 80057b4:	080057f3 	.word	0x080057f3
 80057b8:	080057e3 	.word	0x080057e3
 80057bc:	080057f3 	.word	0x080057f3
 80057c0:	080057f3 	.word	0x080057f3
 80057c4:	080057f3 	.word	0x080057f3
 80057c8:	080057eb 	.word	0x080057eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057cc:	f7fd fe18 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80057d0:	6178      	str	r0, [r7, #20]
        break;
 80057d2:	e013      	b.n	80057fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d4:	f7fd fe2a 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 80057d8:	6178      	str	r0, [r7, #20]
        break;
 80057da:	e00f      	b.n	80057fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057dc:	4b1b      	ldr	r3, [pc, #108]	; (800584c <UART_SetConfig+0x510>)
 80057de:	617b      	str	r3, [r7, #20]
        break;
 80057e0:	e00c      	b.n	80057fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e2:	f7fd fd75 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80057e6:	6178      	str	r0, [r7, #20]
        break;
 80057e8:	e008      	b.n	80057fc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ee:	617b      	str	r3, [r7, #20]
        break;
 80057f0:	e004      	b.n	80057fc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	76bb      	strb	r3, [r7, #26]
        break;
 80057fa:	bf00      	nop
    }

    if (pclk != 0U)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d018      	beq.n	8005834 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	085a      	lsrs	r2, r3, #1
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	441a      	add	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	b29b      	uxth	r3, r3
 8005816:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b0f      	cmp	r3, #15
 800581c:	d908      	bls.n	8005830 <UART_SetConfig+0x4f4>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d204      	bcs.n	8005830 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	e001      	b.n	8005834 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005840:	7ebb      	ldrb	r3, [r7, #26]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bdb0      	pop	{r4, r5, r7, pc}
 800584a:	bf00      	nop
 800584c:	00f42400 	.word	0x00f42400

08005850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01a      	beq.n	8005966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594e:	d10a      	bne.n	8005966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	605a      	str	r2, [r3, #4]
  }
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af02      	add	r7, sp, #8
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a4:	f7fb face 	bl	8000f44 <HAL_GetTick>
 80059a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d10e      	bne.n	80059d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f82d 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e023      	b.n	8005a1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d10e      	bne.n	8005a02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f817 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e00d      	b.n	8005a1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a36:	e05e      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3e:	d05a      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fb fa80 	bl	8000f44 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11b      	bne.n	8005a8e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e043      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02c      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d124      	bne.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ac4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e00f      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d091      	beq.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <__NVIC_SetPriority>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	db0a      	blt.n	8005b4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	490c      	ldr	r1, [pc, #48]	; (8005b6c <__NVIC_SetPriority+0x4c>)
 8005b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b3e:	0112      	lsls	r2, r2, #4
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	440b      	add	r3, r1
 8005b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b48:	e00a      	b.n	8005b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4908      	ldr	r1, [pc, #32]	; (8005b70 <__NVIC_SetPriority+0x50>)
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	3b04      	subs	r3, #4
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	761a      	strb	r2, [r3, #24]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	e000e100 	.word	0xe000e100
 8005b70:	e000ed00 	.word	0xe000ed00

08005b74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <SysTick_Handler+0x1c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b7c:	f001 fcfe 	bl	800757c <xTaskGetSchedulerState>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d001      	beq.n	8005b8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b86:	f002 fae7 	bl	8008158 <xPortSysTickHandler>
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	e000e010 	.word	0xe000e010

08005b94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b98:	2100      	movs	r1, #0
 8005b9a:	f06f 0004 	mvn.w	r0, #4
 8005b9e:	f7ff ffbf 	bl	8005b20 <__NVIC_SetPriority>
#endif
}
 8005ba2:	bf00      	nop
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bae:	f3ef 8305 	mrs	r3, IPSR
 8005bb2:	603b      	str	r3, [r7, #0]
  return(result);
 8005bb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005bba:	f06f 0305 	mvn.w	r3, #5
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	e00c      	b.n	8005bdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <osKernelInitialize+0x44>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <osKernelInitialize+0x44>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	e002      	b.n	8005bdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bdc:	687b      	ldr	r3, [r7, #4]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	2000002c 	.word	0x2000002c

08005bf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf6:	f3ef 8305 	mrs	r3, IPSR
 8005bfa:	603b      	str	r3, [r7, #0]
  return(result);
 8005bfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c02:	f06f 0305 	mvn.w	r3, #5
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	e010      	b.n	8005c2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <osKernelStart+0x48>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d109      	bne.n	8005c26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c12:	f7ff ffbf 	bl	8005b94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <osKernelStart+0x48>)
 8005c18:	2202      	movs	r2, #2
 8005c1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c1c:	f001 f866 	bl	8006cec <vTaskStartScheduler>
      stat = osOK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	e002      	b.n	8005c2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c2c:	687b      	ldr	r3, [r7, #4]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000002c 	.word	0x2000002c

08005c3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	; 0x38
 8005c40:	af04      	add	r7, sp, #16
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4c:	f3ef 8305 	mrs	r3, IPSR
 8005c50:	617b      	str	r3, [r7, #20]
  return(result);
 8005c52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d17e      	bne.n	8005d56 <osThreadNew+0x11a>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d07b      	beq.n	8005d56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c62:	2318      	movs	r3, #24
 8005c64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d045      	beq.n	8005d02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <osThreadNew+0x48>
        name = attr->name;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <osThreadNew+0x6e>
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b38      	cmp	r3, #56	; 0x38
 8005c9c:	d805      	bhi.n	8005caa <osThreadNew+0x6e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <osThreadNew+0x72>
        return (NULL);
 8005caa:	2300      	movs	r3, #0
 8005cac:	e054      	b.n	8005d58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <osThreadNew+0xa8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b5b      	cmp	r3, #91	; 0x5b
 8005ccc:	d90a      	bls.n	8005ce4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d006      	beq.n	8005ce4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <osThreadNew+0xa8>
        mem = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e010      	b.n	8005d06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10c      	bne.n	8005d06 <osThreadNew+0xca>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d108      	bne.n	8005d06 <osThreadNew+0xca>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <osThreadNew+0xca>
          mem = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	e001      	b.n	8005d06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d110      	bne.n	8005d2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d14:	9202      	str	r2, [sp, #8]
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fe0c 	bl	8006940 <xTaskCreateStatic>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	e013      	b.n	8005d56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d110      	bne.n	8005d56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fe57 	bl	80069fa <xTaskCreate>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d001      	beq.n	8005d56 <osThreadNew+0x11a>
            hTask = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d56:	693b      	ldr	r3, [r7, #16]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3728      	adds	r7, #40	; 0x28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d68:	f3ef 8305 	mrs	r3, IPSR
 8005d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <osDelay+0x1c>
    stat = osErrorISR;
 8005d74:	f06f 0305 	mvn.w	r3, #5
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e007      	b.n	8005d8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 ff7c 	bl	8006c84 <vTaskDelay>
    }
  }

  return (stat);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a07      	ldr	r2, [pc, #28]	; (8005dc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005da8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4a06      	ldr	r2, [pc, #24]	; (8005dc8 <vApplicationGetIdleTaskMemory+0x30>)
 8005dae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2280      	movs	r2, #128	; 0x80
 8005db4:	601a      	str	r2, [r3, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000030 	.word	0x20000030
 8005dc8:	2000008c 	.word	0x2000008c

08005dcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a07      	ldr	r2, [pc, #28]	; (8005df8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ddc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4a06      	ldr	r2, [pc, #24]	; (8005dfc <vApplicationGetTimerTaskMemory+0x30>)
 8005de2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dea:	601a      	str	r2, [r3, #0]
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	2000028c 	.word	0x2000028c
 8005dfc:	200002e8 	.word	0x200002e8

08005e00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f103 0208 	add.w	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f103 0208 	add.w	r2, r3, #8
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f103 0208 	add.w	r2, r3, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb8:	d103      	bne.n	8005ec2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e00c      	b.n	8005edc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e002      	b.n	8005ed0 <vListInsert+0x2e>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d2f6      	bcs.n	8005eca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6892      	ldr	r2, [r2, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6852      	ldr	r2, [r2, #4]
 8005f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d103      	bne.n	8005f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f92:	f002 f84f 	bl	8008034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d114      	bne.n	8006012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3310      	adds	r3, #16
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f903 	bl	8007200 <xTaskRemoveFromEventList>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <xQueueGenericReset+0xcc>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	e009      	b.n	8006026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3310      	adds	r3, #16
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fef2 	bl	8005e00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3324      	adds	r3, #36	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff feed 	bl	8005e00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006026:	f002 f835 	bl	8008094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <xQueueGenericCreateStatic+0x52>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <xQueueGenericCreateStatic+0x56>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericCreateStatic+0x58>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	623b      	str	r3, [r7, #32]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <xQueueGenericCreateStatic+0x7e>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueGenericCreateStatic+0x82>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericCreateStatic+0x84>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61fb      	str	r3, [r7, #28]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d6:	2350      	movs	r3, #80	; 0x50
 80060d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b50      	cmp	r3, #80	; 0x50
 80060de:	d00a      	beq.n	80060f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800610a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	4613      	mov	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 f805 	bl	8006128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800611e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006120:	4618      	mov	r0, r3
 8006122:	3730      	adds	r7, #48	; 0x30
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e002      	b.n	800614a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006156:	2101      	movs	r1, #1
 8006158:	69b8      	ldr	r0, [r7, #24]
 800615a:	f7ff ff05 	bl	8005f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <xQueueGenericSend+0x32>
	__asm volatile
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800619e:	bf00      	nop
 80061a0:	e7fe      	b.n	80061a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d103      	bne.n	80061b0 <xQueueGenericSend+0x40>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <xQueueGenericSend+0x44>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <xQueueGenericSend+0x46>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <xQueueGenericSend+0x60>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d103      	bne.n	80061de <xQueueGenericSend+0x6e>
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <xQueueGenericSend+0x72>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueGenericSend+0x74>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericSend+0x8e>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	623b      	str	r3, [r7, #32]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fe:	f001 f9bd 	bl	800757c <xTaskGetSchedulerState>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <xQueueGenericSend+0x9e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <xQueueGenericSend+0xa2>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <xQueueGenericSend+0xa4>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <xQueueGenericSend+0xbe>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	61fb      	str	r3, [r7, #28]
}
 800622a:	bf00      	nop
 800622c:	e7fe      	b.n	800622c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800622e:	f001 ff01 	bl	8008034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <xQueueGenericSend+0xd4>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b02      	cmp	r3, #2
 8006242:	d129      	bne.n	8006298 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800624a:	f000 fa0b 	bl	8006664 <prvCopyDataToQueue>
 800624e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	3324      	adds	r3, #36	; 0x24
 800625c:	4618      	mov	r0, r3
 800625e:	f000 ffcf 	bl	8007200 <xTaskRemoveFromEventList>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d013      	beq.n	8006290 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006268:	4b3f      	ldr	r3, [pc, #252]	; (8006368 <xQueueGenericSend+0x1f8>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	e00a      	b.n	8006290 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006280:	4b39      	ldr	r3, [pc, #228]	; (8006368 <xQueueGenericSend+0x1f8>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006290:	f001 ff00 	bl	8008094 <vPortExitCritical>
				return pdPASS;
 8006294:	2301      	movs	r3, #1
 8006296:	e063      	b.n	8006360 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800629e:	f001 fef9 	bl	8008094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e05c      	b.n	8006360 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f809 	bl	80072c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062b6:	2301      	movs	r3, #1
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ba:	f001 feeb 	bl	8008094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062be:	f000 fd7b 	bl	8006db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062c2:	f001 feb7 	bl	8008034 <vPortEnterCritical>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d2:	d103      	bne.n	80062dc <xQueueGenericSend+0x16c>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e8:	d103      	bne.n	80062f2 <xQueueGenericSend+0x182>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f2:	f001 fecf 	bl	8008094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062f6:	1d3a      	adds	r2, r7, #4
 80062f8:	f107 0314 	add.w	r3, r7, #20
 80062fc:	4611      	mov	r1, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fff8 	bl	80072f4 <xTaskCheckForTimeOut>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d124      	bne.n	8006354 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800630a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630c:	f000 faa2 	bl	8006854 <prvIsQueueFull>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d018      	beq.n	8006348 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	3310      	adds	r3, #16
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f000 ff1e 	bl	8007160 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006326:	f000 fa2d 	bl	8006784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800632a:	f000 fd53 	bl	8006dd4 <xTaskResumeAll>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f af7c 	bne.w	800622e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <xQueueGenericSend+0x1f8>)
 8006338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	e772      	b.n	800622e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800634a:	f000 fa1b 	bl	8006784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800634e:	f000 fd41 	bl	8006dd4 <xTaskResumeAll>
 8006352:	e76c      	b.n	800622e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006356:	f000 fa15 	bl	8006784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800635a:	f000 fd3b 	bl	8006dd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800635e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006360:	4618      	mov	r0, r3
 8006362:	3738      	adds	r7, #56	; 0x38
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b090      	sub	sp, #64	; 0x40
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <xQueueGenericSendFromISR+0x3c>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <xQueueGenericSendFromISR+0x40>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <xQueueGenericSendFromISR+0x42>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d103      	bne.n	80063d6 <xQueueGenericSendFromISR+0x6a>
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <xQueueGenericSendFromISR+0x6e>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueGenericSendFromISR+0x70>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	623b      	str	r3, [r7, #32]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f6:	f001 feff 	bl	80081f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063fa:	f3ef 8211 	mrs	r2, BASEPRI
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61fa      	str	r2, [r7, #28]
 8006410:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006412:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <xQueueGenericSendFromISR+0xbc>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d12f      	bne.n	8006488 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800642e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800643e:	f000 f911 	bl	8006664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006442:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644a:	d112      	bne.n	8006472 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d016      	beq.n	8006482 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fed1 	bl	8007200 <xTaskRemoveFromEventList>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00e      	beq.n	8006482 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e007      	b.n	8006482 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006476:	3301      	adds	r3, #1
 8006478:	b2db      	uxtb	r3, r3
 800647a:	b25a      	sxtb	r2, r3
 800647c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006482:	2301      	movs	r3, #1
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006486:	e001      	b.n	800648c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006496:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800649a:	4618      	mov	r0, r3
 800649c:	3740      	adds	r7, #64	; 0x40
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08c      	sub	sp, #48	; 0x30
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <xQueueReceive+0x30>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	623b      	str	r3, [r7, #32]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <xQueueReceive+0x3e>
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <xQueueReceive+0x42>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <xQueueReceive+0x44>
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueReceive+0x5e>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	61fb      	str	r3, [r7, #28]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006502:	f001 f83b 	bl	800757c <xTaskGetSchedulerState>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <xQueueReceive+0x6e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <xQueueReceive+0x72>
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <xQueueReceive+0x74>
 8006516:	2300      	movs	r3, #0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xQueueReceive+0x8e>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	61bb      	str	r3, [r7, #24]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006532:	f001 fd7f 	bl	8008034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01f      	beq.n	8006582 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006546:	f000 f8f7 	bl	8006738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1e5a      	subs	r2, r3, #1
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	3310      	adds	r3, #16
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fe4e 	bl	8007200 <xTaskRemoveFromEventList>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800656a:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <xQueueReceive+0x1bc>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800657a:	f001 fd8b 	bl	8008094 <vPortExitCritical>
				return pdPASS;
 800657e:	2301      	movs	r3, #1
 8006580:	e069      	b.n	8006656 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006588:	f001 fd84 	bl	8008094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800658c:	2300      	movs	r3, #0
 800658e:	e062      	b.n	8006656 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006596:	f107 0310 	add.w	r3, r7, #16
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fe94 	bl	80072c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065a4:	f001 fd76 	bl	8008094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065a8:	f000 fc06 	bl	8006db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ac:	f001 fd42 	bl	8008034 <vPortEnterCritical>
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b6:	b25b      	sxtb	r3, r3
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065bc:	d103      	bne.n	80065c6 <xQueueReceive+0x122>
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065cc:	b25b      	sxtb	r3, r3
 80065ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d2:	d103      	bne.n	80065dc <xQueueReceive+0x138>
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065dc:	f001 fd5a 	bl	8008094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065e0:	1d3a      	adds	r2, r7, #4
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fe83 	bl	80072f4 <xTaskCheckForTimeOut>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d123      	bne.n	800663c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f6:	f000 f917 	bl	8006828 <prvIsQueueEmpty>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d017      	beq.n	8006630 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	3324      	adds	r3, #36	; 0x24
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4611      	mov	r1, r2
 8006608:	4618      	mov	r0, r3
 800660a:	f000 fda9 	bl	8007160 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 f8b8 	bl	8006784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006614:	f000 fbde 	bl	8006dd4 <xTaskResumeAll>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d189      	bne.n	8006532 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <xQueueReceive+0x1bc>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	e780      	b.n	8006532 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006632:	f000 f8a7 	bl	8006784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006636:	f000 fbcd 	bl	8006dd4 <xTaskResumeAll>
 800663a:	e77a      	b.n	8006532 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f000 f8a1 	bl	8006784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006642:	f000 fbc7 	bl	8006dd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006648:	f000 f8ee 	bl	8006828 <prvIsQueueEmpty>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	f43f af6f 	beq.w	8006532 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006654:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006656:	4618      	mov	r0, r3
 8006658:	3730      	adds	r7, #48	; 0x30
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10d      	bne.n	800669e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d14d      	bne.n	8006726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 ff92 	bl	80075b8 <xTaskPriorityDisinherit>
 8006694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	e043      	b.n	8006726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d119      	bne.n	80066d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6858      	ldr	r0, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	461a      	mov	r2, r3
 80066ae:	68b9      	ldr	r1, [r7, #8]
 80066b0:	f001 fff0 	bl	8008694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d32b      	bcc.n	8006726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e026      	b.n	8006726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68d8      	ldr	r0, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	461a      	mov	r2, r3
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	f001 ffd6 	bl	8008694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	425b      	negs	r3, r3
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d207      	bcs.n	8006714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	425b      	negs	r3, r3
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d105      	bne.n	8006726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	3b01      	subs	r3, #1
 8006724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800672e:	697b      	ldr	r3, [r7, #20]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d018      	beq.n	800677c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	d303      	bcc.n	800676c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68d9      	ldr	r1, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	461a      	mov	r2, r3
 8006776:	6838      	ldr	r0, [r7, #0]
 8006778:	f001 ff8c 	bl	8008694 <memcpy>
	}
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800678c:	f001 fc52 	bl	8008034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006798:	e011      	b.n	80067be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d012      	beq.n	80067c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3324      	adds	r3, #36	; 0x24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fd2a 	bl	8007200 <xTaskRemoveFromEventList>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067b2:	f000 fe01 	bl	80073b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dce9      	bgt.n	800679a <prvUnlockQueue+0x16>
 80067c6:	e000      	b.n	80067ca <prvUnlockQueue+0x46>
					break;
 80067c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	22ff      	movs	r2, #255	; 0xff
 80067ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067d2:	f001 fc5f 	bl	8008094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067d6:	f001 fc2d 	bl	8008034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e2:	e011      	b.n	8006808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3310      	adds	r3, #16
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fd05 	bl	8007200 <xTaskRemoveFromEventList>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067fc:	f000 fddc 	bl	80073b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	3b01      	subs	r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800680c:	2b00      	cmp	r3, #0
 800680e:	dce9      	bgt.n	80067e4 <prvUnlockQueue+0x60>
 8006810:	e000      	b.n	8006814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	22ff      	movs	r2, #255	; 0xff
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800681c:	f001 fc3a 	bl	8008094 <vPortExitCritical>
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006830:	f001 fc00 	bl	8008034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	2b00      	cmp	r3, #0
 800683a:	d102      	bne.n	8006842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e001      	b.n	8006846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006846:	f001 fc25 	bl	8008094 <vPortExitCritical>

	return xReturn;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800685c:	f001 fbea 	bl	8008034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	429a      	cmp	r2, r3
 800686a:	d102      	bne.n	8006872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e001      	b.n	8006876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006876:	f001 fc0d 	bl	8008094 <vPortExitCritical>

	return xReturn;
 800687a:	68fb      	ldr	r3, [r7, #12]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e014      	b.n	80068be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006894:	4a0f      	ldr	r2, [pc, #60]	; (80068d4 <vQueueAddToRegistry+0x50>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10b      	bne.n	80068b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068a0:	490c      	ldr	r1, [pc, #48]	; (80068d4 <vQueueAddToRegistry+0x50>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068aa:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <vQueueAddToRegistry+0x50>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068b6:	e006      	b.n	80068c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b07      	cmp	r3, #7
 80068c2:	d9e7      	bls.n	8006894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20001ac8 	.word	0x20001ac8

080068d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068e8:	f001 fba4 	bl	8008034 <vPortEnterCritical>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d103      	bne.n	8006902 <vQueueWaitForMessageRestricted+0x2a>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006908:	b25b      	sxtb	r3, r3
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690e:	d103      	bne.n	8006918 <vQueueWaitForMessageRestricted+0x40>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006918:	f001 fbbc 	bl	8008094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fc3b 	bl	80071a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006932:	6978      	ldr	r0, [r7, #20]
 8006934:	f7ff ff26 	bl	8006784 <prvUnlockQueue>
	}
 8006938:	bf00      	nop
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08e      	sub	sp, #56	; 0x38
 8006944:	af04      	add	r7, sp, #16
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	623b      	str	r3, [r7, #32]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xTaskCreateStatic+0x46>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61fb      	str	r3, [r7, #28]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006986:	235c      	movs	r3, #92	; 0x5c
 8006988:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b5c      	cmp	r3, #92	; 0x5c
 800698e:	d00a      	beq.n	80069a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61bb      	str	r3, [r7, #24]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01e      	beq.n	80069ec <xTaskCreateStatic+0xac>
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01b      	beq.n	80069ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069c6:	2300      	movs	r3, #0
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	9302      	str	r3, [sp, #8]
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f850 	bl	8006a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069e6:	f000 f8dd 	bl	8006ba4 <prvAddNewTaskToReadyList>
 80069ea:	e001      	b.n	80069f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069f0:	697b      	ldr	r3, [r7, #20]
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3728      	adds	r7, #40	; 0x28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b08c      	sub	sp, #48	; 0x30
 80069fe:	af04      	add	r7, sp, #16
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a0a:	88fb      	ldrh	r3, [r7, #6]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 fc32 	bl	8008278 <pvPortMalloc>
 8006a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00e      	beq.n	8006a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a1c:	205c      	movs	r0, #92	; 0x5c
 8006a1e:	f001 fc2b 	bl	8008278 <pvPortMalloc>
 8006a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a30:	e005      	b.n	8006a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f001 fcec 	bl	8008410 <vPortFree>
 8006a38:	e001      	b.n	8006a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d017      	beq.n	8006a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9303      	str	r3, [sp, #12]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	9302      	str	r3, [sp, #8]
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f80e 	bl	8006a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a68:	69f8      	ldr	r0, [r7, #28]
 8006a6a:	f000 f89b 	bl	8006ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e002      	b.n	8006a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	21a5      	movs	r1, #165	; 0xa5
 8006a9e:	f001 fe07 	bl	80086b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006aac:	3b01      	subs	r3, #1
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	617b      	str	r3, [r7, #20]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01f      	beq.n	8006b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	e012      	b.n	8006b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	7819      	ldrb	r1, [r3, #0]
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	4413      	add	r3, r2
 8006af6:	3334      	adds	r3, #52	; 0x34
 8006af8:	460a      	mov	r2, r1
 8006afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b0f      	cmp	r3, #15
 8006b12:	d9e9      	bls.n	8006ae8 <prvInitialiseNewTask+0x64>
 8006b14:	e000      	b.n	8006b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b20:	e003      	b.n	8006b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	2b37      	cmp	r3, #55	; 0x37
 8006b2e:	d901      	bls.n	8006b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b30:	2337      	movs	r3, #55	; 0x37
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	3304      	adds	r3, #4
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff f978 	bl	8005e40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	3318      	adds	r3, #24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff f973 	bl	8005e40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2200      	movs	r2, #0
 8006b74:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	68f9      	ldr	r1, [r7, #12]
 8006b82:	69b8      	ldr	r0, [r7, #24]
 8006b84:	f001 f928 	bl	8007dd8 <pxPortInitialiseStack>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bac:	f001 fa42 	bl	8008034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a2c      	ldr	r2, [pc, #176]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bc2:	4a2a      	ldr	r2, [pc, #168]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bc8:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <prvAddNewTaskToReadyList+0xc4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d110      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bd0:	f000 fc16 	bl	8007400 <prvInitialiseTaskLists>
 8006bd4:	e00d      	b.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bde:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d802      	bhi.n	8006bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bec:	4a1f      	ldr	r2, [pc, #124]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bf2:	4b20      	ldr	r3, [pc, #128]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <prvAddNewTaskToReadyList+0xd0>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c08:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <prvAddNewTaskToReadyList+0xd4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d903      	bls.n	8006c18 <prvAddNewTaskToReadyList+0x74>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <prvAddNewTaskToReadyList+0xd4>)
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <prvAddNewTaskToReadyList+0xd8>)
 8006c26:	441a      	add	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f7ff f913 	bl	8005e5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c34:	f001 fa2e 	bl	8008094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c38:	4b0d      	ldr	r3, [pc, #52]	; (8006c70 <prvAddNewTaskToReadyList+0xcc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00e      	beq.n	8006c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <prvAddNewTaskToReadyList+0xc8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d207      	bcs.n	8006c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <prvAddNewTaskToReadyList+0xdc>)
 8006c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000bbc 	.word	0x20000bbc
 8006c6c:	200006e8 	.word	0x200006e8
 8006c70:	20000bc8 	.word	0x20000bc8
 8006c74:	20000bd8 	.word	0x20000bd8
 8006c78:	20000bc4 	.word	0x20000bc4
 8006c7c:	200006ec 	.word	0x200006ec
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c96:	4b13      	ldr	r3, [pc, #76]	; (8006ce4 <vTaskDelay+0x60>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <vTaskDelay+0x30>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	60bb      	str	r3, [r7, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cb4:	f000 f880 	bl	8006db8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fcea 	bl	8007694 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cc0:	f000 f888 	bl	8006dd4 <xTaskResumeAll>
 8006cc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d107      	bne.n	8006cdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ccc:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <vTaskDelay+0x64>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000be4 	.word	0x20000be4
 8006ce8:	e000ed04 	.word	0xe000ed04

08006cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cfa:	463a      	mov	r2, r7
 8006cfc:	1d39      	adds	r1, r7, #4
 8006cfe:	f107 0308 	add.w	r3, r7, #8
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff f848 	bl	8005d98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	9202      	str	r2, [sp, #8]
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	2300      	movs	r3, #0
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	2300      	movs	r3, #0
 8006d18:	460a      	mov	r2, r1
 8006d1a:	4921      	ldr	r1, [pc, #132]	; (8006da0 <vTaskStartScheduler+0xb4>)
 8006d1c:	4821      	ldr	r0, [pc, #132]	; (8006da4 <vTaskStartScheduler+0xb8>)
 8006d1e:	f7ff fe0f 	bl	8006940 <xTaskCreateStatic>
 8006d22:	4603      	mov	r3, r0
 8006d24:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <vTaskStartScheduler+0xbc>)
 8006d26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d28:	4b1f      	ldr	r3, [pc, #124]	; (8006da8 <vTaskStartScheduler+0xbc>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e001      	b.n	8006d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d102      	bne.n	8006d46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d40:	f000 fcfc 	bl	800773c <xTimerCreateTimerTask>
 8006d44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d116      	bne.n	8006d7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	613b      	str	r3, [r7, #16]
}
 8006d5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d60:	4b12      	ldr	r3, [pc, #72]	; (8006dac <vTaskStartScheduler+0xc0>)
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <vTaskStartScheduler+0xc4>)
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d6e:	4b11      	ldr	r3, [pc, #68]	; (8006db4 <vTaskStartScheduler+0xc8>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d74:	f001 f8bc 	bl	8007ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d78:	e00e      	b.n	8006d98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d80:	d10a      	bne.n	8006d98 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	60fb      	str	r3, [r7, #12]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <vTaskStartScheduler+0xaa>
}
 8006d98:	bf00      	nop
 8006d9a:	3718      	adds	r7, #24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	08008708 	.word	0x08008708
 8006da4:	080073d1 	.word	0x080073d1
 8006da8:	20000be0 	.word	0x20000be0
 8006dac:	20000bdc 	.word	0x20000bdc
 8006db0:	20000bc8 	.word	0x20000bc8
 8006db4:	20000bc0 	.word	0x20000bc0

08006db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <vTaskSuspendAll+0x18>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	4a03      	ldr	r2, [pc, #12]	; (8006dd0 <vTaskSuspendAll+0x18>)
 8006dc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dc6:	bf00      	nop
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000be4 	.word	0x20000be4

08006dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006de2:	4b42      	ldr	r3, [pc, #264]	; (8006eec <xTaskResumeAll+0x118>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	603b      	str	r3, [r7, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e00:	f001 f918 	bl	8008034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e04:	4b39      	ldr	r3, [pc, #228]	; (8006eec <xTaskResumeAll+0x118>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	4a38      	ldr	r2, [pc, #224]	; (8006eec <xTaskResumeAll+0x118>)
 8006e0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <xTaskResumeAll+0x118>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d162      	bne.n	8006edc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e16:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <xTaskResumeAll+0x11c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d05e      	beq.n	8006edc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e1e:	e02f      	b.n	8006e80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e20:	4b34      	ldr	r3, [pc, #208]	; (8006ef4 <xTaskResumeAll+0x120>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3318      	adds	r3, #24
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff f871 	bl	8005f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff f86c 	bl	8005f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	4b2d      	ldr	r3, [pc, #180]	; (8006ef8 <xTaskResumeAll+0x124>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d903      	bls.n	8006e50 <xTaskResumeAll+0x7c>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <xTaskResumeAll+0x124>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4a27      	ldr	r2, [pc, #156]	; (8006efc <xTaskResumeAll+0x128>)
 8006e5e:	441a      	add	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7fe fff7 	bl	8005e5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	4b23      	ldr	r3, [pc, #140]	; (8006f00 <xTaskResumeAll+0x12c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e7a:	4b22      	ldr	r3, [pc, #136]	; (8006f04 <xTaskResumeAll+0x130>)
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e80:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <xTaskResumeAll+0x120>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1cb      	bne.n	8006e20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e8e:	f000 fb55 	bl	800753c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e92:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <xTaskResumeAll+0x134>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d010      	beq.n	8006ec0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e9e:	f000 f847 	bl	8006f30 <xTaskIncrementTick>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ea8:	4b16      	ldr	r3, [pc, #88]	; (8006f04 <xTaskResumeAll+0x130>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f1      	bne.n	8006e9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <xTaskResumeAll+0x134>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ec0:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <xTaskResumeAll+0x130>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <xTaskResumeAll+0x138>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006edc:	f001 f8da 	bl	8008094 <vPortExitCritical>

	return xAlreadyYielded;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000be4 	.word	0x20000be4
 8006ef0:	20000bbc 	.word	0x20000bbc
 8006ef4:	20000b7c 	.word	0x20000b7c
 8006ef8:	20000bc4 	.word	0x20000bc4
 8006efc:	200006ec 	.word	0x200006ec
 8006f00:	200006e8 	.word	0x200006e8
 8006f04:	20000bd0 	.word	0x20000bd0
 8006f08:	20000bcc 	.word	0x20000bcc
 8006f0c:	e000ed04 	.word	0xe000ed04

08006f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <xTaskGetTickCount+0x1c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f1c:	687b      	ldr	r3, [r7, #4]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	20000bc0 	.word	0x20000bc0

08006f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3a:	4b4f      	ldr	r3, [pc, #316]	; (8007078 <xTaskIncrementTick+0x148>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 808f 	bne.w	8007062 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f44:	4b4d      	ldr	r3, [pc, #308]	; (800707c <xTaskIncrementTick+0x14c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f4c:	4a4b      	ldr	r2, [pc, #300]	; (800707c <xTaskIncrementTick+0x14c>)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d120      	bne.n	8006f9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f58:	4b49      	ldr	r3, [pc, #292]	; (8007080 <xTaskIncrementTick+0x150>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	603b      	str	r3, [r7, #0]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xTaskIncrementTick+0x46>
 8006f78:	4b41      	ldr	r3, [pc, #260]	; (8007080 <xTaskIncrementTick+0x150>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	4b41      	ldr	r3, [pc, #260]	; (8007084 <xTaskIncrementTick+0x154>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a3f      	ldr	r2, [pc, #252]	; (8007080 <xTaskIncrementTick+0x150>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <xTaskIncrementTick+0x154>)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	4b3e      	ldr	r3, [pc, #248]	; (8007088 <xTaskIncrementTick+0x158>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	4a3d      	ldr	r2, [pc, #244]	; (8007088 <xTaskIncrementTick+0x158>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	f000 fad1 	bl	800753c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f9a:	4b3c      	ldr	r3, [pc, #240]	; (800708c <xTaskIncrementTick+0x15c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d349      	bcc.n	8007038 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fa4:	4b36      	ldr	r3, [pc, #216]	; (8007080 <xTaskIncrementTick+0x150>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fae:	4b37      	ldr	r3, [pc, #220]	; (800708c <xTaskIncrementTick+0x15c>)
 8006fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fb4:	601a      	str	r2, [r3, #0]
					break;
 8006fb6:	e03f      	b.n	8007038 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb8:	4b31      	ldr	r3, [pc, #196]	; (8007080 <xTaskIncrementTick+0x150>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d203      	bcs.n	8006fd8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fd0:	4a2e      	ldr	r2, [pc, #184]	; (800708c <xTaskIncrementTick+0x15c>)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fd6:	e02f      	b.n	8007038 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fe ff99 	bl	8005f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	3318      	adds	r3, #24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe ff90 	bl	8005f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff8:	4b25      	ldr	r3, [pc, #148]	; (8007090 <xTaskIncrementTick+0x160>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d903      	bls.n	8007008 <xTaskIncrementTick+0xd8>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	4a22      	ldr	r2, [pc, #136]	; (8007090 <xTaskIncrementTick+0x160>)
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4a1f      	ldr	r2, [pc, #124]	; (8007094 <xTaskIncrementTick+0x164>)
 8007016:	441a      	add	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3304      	adds	r3, #4
 800701c:	4619      	mov	r1, r3
 800701e:	4610      	mov	r0, r2
 8007020:	f7fe ff1b 	bl	8005e5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007028:	4b1b      	ldr	r3, [pc, #108]	; (8007098 <xTaskIncrementTick+0x168>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702e:	429a      	cmp	r2, r3
 8007030:	d3b8      	bcc.n	8006fa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007036:	e7b5      	b.n	8006fa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007038:	4b17      	ldr	r3, [pc, #92]	; (8007098 <xTaskIncrementTick+0x168>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	4915      	ldr	r1, [pc, #84]	; (8007094 <xTaskIncrementTick+0x164>)
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d901      	bls.n	8007054 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007054:	4b11      	ldr	r3, [pc, #68]	; (800709c <xTaskIncrementTick+0x16c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	e004      	b.n	800706c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007062:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <xTaskIncrementTick+0x170>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	4a0d      	ldr	r2, [pc, #52]	; (80070a0 <xTaskIncrementTick+0x170>)
 800706a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800706c:	697b      	ldr	r3, [r7, #20]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000be4 	.word	0x20000be4
 800707c:	20000bc0 	.word	0x20000bc0
 8007080:	20000b74 	.word	0x20000b74
 8007084:	20000b78 	.word	0x20000b78
 8007088:	20000bd4 	.word	0x20000bd4
 800708c:	20000bdc 	.word	0x20000bdc
 8007090:	20000bc4 	.word	0x20000bc4
 8007094:	200006ec 	.word	0x200006ec
 8007098:	200006e8 	.word	0x200006e8
 800709c:	20000bd0 	.word	0x20000bd0
 80070a0:	20000bcc 	.word	0x20000bcc

080070a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070aa:	4b28      	ldr	r3, [pc, #160]	; (800714c <vTaskSwitchContext+0xa8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070b2:	4b27      	ldr	r3, [pc, #156]	; (8007150 <vTaskSwitchContext+0xac>)
 80070b4:	2201      	movs	r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070b8:	e041      	b.n	800713e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <vTaskSwitchContext+0xac>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c0:	4b24      	ldr	r3, [pc, #144]	; (8007154 <vTaskSwitchContext+0xb0>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	e010      	b.n	80070ea <vTaskSwitchContext+0x46>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	607b      	str	r3, [r7, #4]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <vTaskSwitchContext+0x3e>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	491b      	ldr	r1, [pc, #108]	; (8007158 <vTaskSwitchContext+0xb4>)
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	440b      	add	r3, r1
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0e4      	beq.n	80070c8 <vTaskSwitchContext+0x24>
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4a13      	ldr	r2, [pc, #76]	; (8007158 <vTaskSwitchContext+0xb4>)
 800710a:	4413      	add	r3, r2
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	605a      	str	r2, [r3, #4]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	3308      	adds	r3, #8
 8007120:	429a      	cmp	r2, r3
 8007122:	d104      	bne.n	800712e <vTaskSwitchContext+0x8a>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	605a      	str	r2, [r3, #4]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	4a09      	ldr	r2, [pc, #36]	; (800715c <vTaskSwitchContext+0xb8>)
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	4a06      	ldr	r2, [pc, #24]	; (8007154 <vTaskSwitchContext+0xb0>)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6013      	str	r3, [r2, #0]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000be4 	.word	0x20000be4
 8007150:	20000bd0 	.word	0x20000bd0
 8007154:	20000bc4 	.word	0x20000bc4
 8007158:	200006ec 	.word	0x200006ec
 800715c:	200006e8 	.word	0x200006e8

08007160 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007186:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <vTaskPlaceOnEventList+0x44>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3318      	adds	r3, #24
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fe fe87 	bl	8005ea2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007194:	2101      	movs	r1, #1
 8007196:	6838      	ldr	r0, [r7, #0]
 8007198:	f000 fa7c 	bl	8007694 <prvAddCurrentTaskToDelayedList>
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200006e8 	.word	0x200006e8

080071a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10a      	bne.n	80071d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	617b      	str	r3, [r7, #20]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <vTaskPlaceOnEventListRestricted+0x54>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3318      	adds	r3, #24
 80071d6:	4619      	mov	r1, r3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7fe fe3e 	bl	8005e5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	68b8      	ldr	r0, [r7, #8]
 80071ee:	f000 fa51 	bl	8007694 <prvAddCurrentTaskToDelayedList>
	}
 80071f2:	bf00      	nop
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	200006e8 	.word	0x200006e8

08007200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	3318      	adds	r3, #24
 8007230:	4618      	mov	r0, r3
 8007232:	f7fe fe6f 	bl	8005f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007236:	4b1e      	ldr	r3, [pc, #120]	; (80072b0 <xTaskRemoveFromEventList+0xb0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d11d      	bne.n	800727a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	3304      	adds	r3, #4
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fe66 	bl	8005f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800724c:	4b19      	ldr	r3, [pc, #100]	; (80072b4 <xTaskRemoveFromEventList+0xb4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d903      	bls.n	800725c <xTaskRemoveFromEventList+0x5c>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <xTaskRemoveFromEventList+0xb4>)
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007260:	4613      	mov	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <xTaskRemoveFromEventList+0xb8>)
 800726a:	441a      	add	r2, r3
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3304      	adds	r3, #4
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fe fdf1 	bl	8005e5a <vListInsertEnd>
 8007278:	e005      	b.n	8007286 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	3318      	adds	r3, #24
 800727e:	4619      	mov	r1, r3
 8007280:	480e      	ldr	r0, [pc, #56]	; (80072bc <xTaskRemoveFromEventList+0xbc>)
 8007282:	f7fe fdea 	bl	8005e5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <xTaskRemoveFromEventList+0xc0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	429a      	cmp	r2, r3
 8007292:	d905      	bls.n	80072a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007298:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <xTaskRemoveFromEventList+0xc4>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]
 800729e:	e001      	b.n	80072a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072a4:	697b      	ldr	r3, [r7, #20]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000be4 	.word	0x20000be4
 80072b4:	20000bc4 	.word	0x20000bc4
 80072b8:	200006ec 	.word	0x200006ec
 80072bc:	20000b7c 	.word	0x20000b7c
 80072c0:	200006e8 	.word	0x200006e8
 80072c4:	20000bd0 	.word	0x20000bd0

080072c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072d0:	4b06      	ldr	r3, [pc, #24]	; (80072ec <vTaskInternalSetTimeOutState+0x24>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <vTaskInternalSetTimeOutState+0x28>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	605a      	str	r2, [r3, #4]
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20000bd4 	.word	0x20000bd4
 80072f0:	20000bc0 	.word	0x20000bc0

080072f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	613b      	str	r3, [r7, #16]
}
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007336:	f000 fe7d 	bl	8008034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800733a:	4b1d      	ldr	r3, [pc, #116]	; (80073b0 <xTaskCheckForTimeOut+0xbc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007352:	d102      	bne.n	800735a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007354:	2300      	movs	r3, #0
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	e023      	b.n	80073a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <xTaskCheckForTimeOut+0xc0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d007      	beq.n	8007376 <xTaskCheckForTimeOut+0x82>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	429a      	cmp	r2, r3
 800736e:	d302      	bcc.n	8007376 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e015      	b.n	80073a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	429a      	cmp	r2, r3
 800737e:	d20b      	bcs.n	8007398 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ff9b 	bl	80072c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
 8007396:	e004      	b.n	80073a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073a2:	f000 fe77 	bl	8008094 <vPortExitCritical>

	return xReturn;
 80073a6:	69fb      	ldr	r3, [r7, #28]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20000bc0 	.word	0x20000bc0
 80073b4:	20000bd4 	.word	0x20000bd4

080073b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <vTaskMissedYield+0x14>)
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20000bd0 	.word	0x20000bd0

080073d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073d8:	f000 f852 	bl	8007480 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <prvIdleTask+0x28>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d9f9      	bls.n	80073d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <prvIdleTask+0x2c>)
 80073e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073f4:	e7f0      	b.n	80073d8 <prvIdleTask+0x8>
 80073f6:	bf00      	nop
 80073f8:	200006ec 	.word	0x200006ec
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	e00c      	b.n	8007426 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4a12      	ldr	r2, [pc, #72]	; (8007460 <prvInitialiseTaskLists+0x60>)
 8007418:	4413      	add	r3, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fcf0 	bl	8005e00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3301      	adds	r3, #1
 8007424:	607b      	str	r3, [r7, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b37      	cmp	r3, #55	; 0x37
 800742a:	d9ef      	bls.n	800740c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800742c:	480d      	ldr	r0, [pc, #52]	; (8007464 <prvInitialiseTaskLists+0x64>)
 800742e:	f7fe fce7 	bl	8005e00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007432:	480d      	ldr	r0, [pc, #52]	; (8007468 <prvInitialiseTaskLists+0x68>)
 8007434:	f7fe fce4 	bl	8005e00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007438:	480c      	ldr	r0, [pc, #48]	; (800746c <prvInitialiseTaskLists+0x6c>)
 800743a:	f7fe fce1 	bl	8005e00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800743e:	480c      	ldr	r0, [pc, #48]	; (8007470 <prvInitialiseTaskLists+0x70>)
 8007440:	f7fe fcde 	bl	8005e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007444:	480b      	ldr	r0, [pc, #44]	; (8007474 <prvInitialiseTaskLists+0x74>)
 8007446:	f7fe fcdb 	bl	8005e00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <prvInitialiseTaskLists+0x78>)
 800744c:	4a05      	ldr	r2, [pc, #20]	; (8007464 <prvInitialiseTaskLists+0x64>)
 800744e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <prvInitialiseTaskLists+0x7c>)
 8007452:	4a05      	ldr	r2, [pc, #20]	; (8007468 <prvInitialiseTaskLists+0x68>)
 8007454:	601a      	str	r2, [r3, #0]
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200006ec 	.word	0x200006ec
 8007464:	20000b4c 	.word	0x20000b4c
 8007468:	20000b60 	.word	0x20000b60
 800746c:	20000b7c 	.word	0x20000b7c
 8007470:	20000b90 	.word	0x20000b90
 8007474:	20000ba8 	.word	0x20000ba8
 8007478:	20000b74 	.word	0x20000b74
 800747c:	20000b78 	.word	0x20000b78

08007480 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007486:	e019      	b.n	80074bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007488:	f000 fdd4 	bl	8008034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <prvCheckTasksWaitingTermination+0x50>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	4618      	mov	r0, r3
 800749a:	f7fe fd3b 	bl	8005f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800749e:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <prvCheckTasksWaitingTermination+0x54>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	4a0b      	ldr	r2, [pc, #44]	; (80074d4 <prvCheckTasksWaitingTermination+0x54>)
 80074a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074a8:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <prvCheckTasksWaitingTermination+0x58>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	4a0a      	ldr	r2, [pc, #40]	; (80074d8 <prvCheckTasksWaitingTermination+0x58>)
 80074b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074b2:	f000 fdef 	bl	8008094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f810 	bl	80074dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <prvCheckTasksWaitingTermination+0x58>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e1      	bne.n	8007488 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000b90 	.word	0x20000b90
 80074d4:	20000bbc 	.word	0x20000bbc
 80074d8:	20000ba4 	.word	0x20000ba4

080074dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d108      	bne.n	8007500 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 ff8c 	bl	8008410 <vPortFree>
				vPortFree( pxTCB );
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 ff89 	bl	8008410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074fe:	e018      	b.n	8007532 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007506:	2b01      	cmp	r3, #1
 8007508:	d103      	bne.n	8007512 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 ff80 	bl	8008410 <vPortFree>
	}
 8007510:	e00f      	b.n	8007532 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007518:	2b02      	cmp	r3, #2
 800751a:	d00a      	beq.n	8007532 <prvDeleteTCB+0x56>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	60fb      	str	r3, [r7, #12]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <prvDeleteTCB+0x54>
	}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007542:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <prvResetNextTaskUnblockTime+0x38>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <prvResetNextTaskUnblockTime+0x3c>)
 800754e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007552:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007554:	e008      	b.n	8007568 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007556:	4b07      	ldr	r3, [pc, #28]	; (8007574 <prvResetNextTaskUnblockTime+0x38>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a04      	ldr	r2, [pc, #16]	; (8007578 <prvResetNextTaskUnblockTime+0x3c>)
 8007566:	6013      	str	r3, [r2, #0]
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	20000b74 	.word	0x20000b74
 8007578:	20000bdc 	.word	0x20000bdc

0800757c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007582:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <xTaskGetSchedulerState+0x34>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800758a:	2301      	movs	r3, #1
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	e008      	b.n	80075a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <xTaskGetSchedulerState+0x38>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007598:	2302      	movs	r3, #2
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	e001      	b.n	80075a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075a2:	687b      	ldr	r3, [r7, #4]
	}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000bc8 	.word	0x20000bc8
 80075b4:	20000be4 	.word	0x20000be4

080075b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d056      	beq.n	800767c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075ce:	4b2e      	ldr	r3, [pc, #184]	; (8007688 <xTaskPriorityDisinherit+0xd0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d00a      	beq.n	80075ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	60fb      	str	r3, [r7, #12]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	60bb      	str	r3, [r7, #8]
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	429a      	cmp	r2, r3
 8007620:	d02c      	beq.n	800767c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007626:	2b00      	cmp	r3, #0
 8007628:	d128      	bne.n	800767c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	3304      	adds	r3, #4
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fc70 	bl	8005f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <xTaskPriorityDisinherit+0xd4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d903      	bls.n	800765c <xTaskPriorityDisinherit+0xa4>
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a0c      	ldr	r2, [pc, #48]	; (800768c <xTaskPriorityDisinherit+0xd4>)
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4a09      	ldr	r2, [pc, #36]	; (8007690 <xTaskPriorityDisinherit+0xd8>)
 800766a:	441a      	add	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe fbf1 	bl	8005e5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800767c:	697b      	ldr	r3, [r7, #20]
	}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	200006e8 	.word	0x200006e8
 800768c:	20000bc4 	.word	0x20000bc4
 8007690:	200006ec 	.word	0x200006ec

08007694 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800769e:	4b21      	ldr	r3, [pc, #132]	; (8007724 <prvAddCurrentTaskToDelayedList+0x90>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a4:	4b20      	ldr	r3, [pc, #128]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fc32 	bl	8005f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b6:	d10a      	bne.n	80076ce <prvAddCurrentTaskToDelayedList+0x3a>
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d007      	beq.n	80076ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076be:	4b1a      	ldr	r3, [pc, #104]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4819      	ldr	r0, [pc, #100]	; (800772c <prvAddCurrentTaskToDelayedList+0x98>)
 80076c8:	f7fe fbc7 	bl	8005e5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076cc:	e026      	b.n	800771c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4413      	add	r3, r2
 80076d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076d6:	4b14      	ldr	r3, [pc, #80]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d209      	bcs.n	80076fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3304      	adds	r3, #4
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f7fe fbd5 	bl	8005ea2 <vListInsert>
}
 80076f8:	e010      	b.n	800771c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076fa:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <prvAddCurrentTaskToDelayedList+0x94>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f7fe fbcb 	bl	8005ea2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <prvAddCurrentTaskToDelayedList+0xa4>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	d202      	bcs.n	800771c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	6013      	str	r3, [r2, #0]
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000bc0 	.word	0x20000bc0
 8007728:	200006e8 	.word	0x200006e8
 800772c:	20000ba8 	.word	0x20000ba8
 8007730:	20000b78 	.word	0x20000b78
 8007734:	20000b74 	.word	0x20000b74
 8007738:	20000bdc 	.word	0x20000bdc

0800773c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007746:	f000 fb07 	bl	8007d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800774a:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <xTimerCreateTimerTask+0x80>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d021      	beq.n	8007796 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800775a:	1d3a      	adds	r2, r7, #4
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	f107 030c 	add.w	r3, r7, #12
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fb31 	bl	8005dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	9202      	str	r2, [sp, #8]
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	2302      	movs	r3, #2
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	460a      	mov	r2, r1
 800777c:	4910      	ldr	r1, [pc, #64]	; (80077c0 <xTimerCreateTimerTask+0x84>)
 800777e:	4811      	ldr	r0, [pc, #68]	; (80077c4 <xTimerCreateTimerTask+0x88>)
 8007780:	f7ff f8de 	bl	8006940 <xTaskCreateStatic>
 8007784:	4603      	mov	r3, r0
 8007786:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <xTimerCreateTimerTask+0x8c>)
 8007788:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <xTimerCreateTimerTask+0x8c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007792:	2301      	movs	r3, #1
 8007794:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	613b      	str	r3, [r7, #16]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077b2:	697b      	ldr	r3, [r7, #20]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	20000c18 	.word	0x20000c18
 80077c0:	08008710 	.word	0x08008710
 80077c4:	08007901 	.word	0x08007901
 80077c8:	20000c1c 	.word	0x20000c1c

080077cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077da:	2300      	movs	r3, #0
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	623b      	str	r3, [r7, #32]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077fa:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <xTimerGenericCommand+0x98>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d02a      	beq.n	8007858 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b05      	cmp	r3, #5
 8007812:	dc18      	bgt.n	8007846 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007814:	f7ff feb2 	bl	800757c <xTaskGetSchedulerState>
 8007818:	4603      	mov	r3, r0
 800781a:	2b02      	cmp	r3, #2
 800781c:	d109      	bne.n	8007832 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <xTimerGenericCommand+0x98>)
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f107 0110 	add.w	r1, r7, #16
 8007826:	2300      	movs	r3, #0
 8007828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782a:	f7fe fca1 	bl	8006170 <xQueueGenericSend>
 800782e:	6278      	str	r0, [r7, #36]	; 0x24
 8007830:	e012      	b.n	8007858 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <xTimerGenericCommand+0x98>)
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	f107 0110 	add.w	r1, r7, #16
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	f7fe fc97 	bl	8006170 <xQueueGenericSend>
 8007842:	6278      	str	r0, [r7, #36]	; 0x24
 8007844:	e008      	b.n	8007858 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <xTimerGenericCommand+0x98>)
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	f107 0110 	add.w	r1, r7, #16
 800784e:	2300      	movs	r3, #0
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	f7fe fd8b 	bl	800636c <xQueueGenericSendFromISR>
 8007856:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000c18 	.word	0x20000c18

08007868 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af02      	add	r7, sp, #8
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007872:	4b22      	ldr	r3, [pc, #136]	; (80078fc <prvProcessExpiredTimer+0x94>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3304      	adds	r3, #4
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fb47 	bl	8005f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d022      	beq.n	80078da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	699a      	ldr	r2, [r3, #24]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	18d1      	adds	r1, r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	6978      	ldr	r0, [r7, #20]
 80078a2:	f000 f8d1 	bl	8007a48 <prvInsertTimerInActiveList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01f      	beq.n	80078ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078ac:	2300      	movs	r3, #0
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	2100      	movs	r1, #0
 80078b6:	6978      	ldr	r0, [r7, #20]
 80078b8:	f7ff ff88 	bl	80077cc <xTimerGenericCommand>
 80078bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d113      	bne.n	80078ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60fb      	str	r3, [r7, #12]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e0:	f023 0301 	bic.w	r3, r3, #1
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	6978      	ldr	r0, [r7, #20]
 80078f2:	4798      	blx	r3
}
 80078f4:	bf00      	nop
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20000c10 	.word	0x20000c10

08007900 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	4618      	mov	r0, r3
 800790e:	f000 f857 	bl	80079c0 <prvGetNextExpireTime>
 8007912:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4619      	mov	r1, r3
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f803 	bl	8007924 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800791e:	f000 f8d5 	bl	8007acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007922:	e7f1      	b.n	8007908 <prvTimerTask+0x8>

08007924 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800792e:	f7ff fa43 	bl	8006db8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f866 	bl	8007a08 <prvSampleTimeNow>
 800793c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d130      	bne.n	80079a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <prvProcessTimerOrBlockTask+0x3c>
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	429a      	cmp	r2, r3
 8007950:	d806      	bhi.n	8007960 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007952:	f7ff fa3f 	bl	8006dd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007956:	68f9      	ldr	r1, [r7, #12]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff ff85 	bl	8007868 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800795e:	e024      	b.n	80079aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <prvProcessTimerOrBlockTask+0x90>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <prvProcessTimerOrBlockTask+0x50>
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <prvProcessTimerOrBlockTask+0x52>
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <prvProcessTimerOrBlockTask+0x94>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	f7fe ffa7 	bl	80068d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800798a:	f7ff fa23 	bl	8006dd4 <xTaskResumeAll>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007994:	4b09      	ldr	r3, [pc, #36]	; (80079bc <prvProcessTimerOrBlockTask+0x98>)
 8007996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	f3bf 8f6f 	isb	sy
}
 80079a4:	e001      	b.n	80079aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079a6:	f7ff fa15 	bl	8006dd4 <xTaskResumeAll>
}
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000c14 	.word	0x20000c14
 80079b8:	20000c18 	.word	0x20000c18
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079c8:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <prvGetNextExpireTime+0x44>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <prvGetNextExpireTime+0x16>
 80079d2:	2201      	movs	r2, #1
 80079d4:	e000      	b.n	80079d8 <prvGetNextExpireTime+0x18>
 80079d6:	2200      	movs	r2, #0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079e4:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <prvGetNextExpireTime+0x44>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e001      	b.n	80079f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079f4:	68fb      	ldr	r3, [r7, #12]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000c10 	.word	0x20000c10

08007a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a10:	f7ff fa7e 	bl	8006f10 <xTaskGetTickCount>
 8007a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <prvSampleTimeNow+0x3c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d205      	bcs.n	8007a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a20:	f000 f936 	bl	8007c90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a32:	4a04      	ldr	r2, [pc, #16]	; (8007a44 <prvSampleTimeNow+0x3c>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a38:	68fb      	ldr	r3, [r7, #12]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000c20 	.word	0x20000c20

08007a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d812      	bhi.n	8007a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d302      	bcc.n	8007a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
 8007a80:	e01b      	b.n	8007aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a82:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <prvInsertTimerInActiveList+0x7c>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe fa08 	bl	8005ea2 <vListInsert>
 8007a92:	e012      	b.n	8007aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d206      	bcs.n	8007aaa <prvInsertTimerInActiveList+0x62>
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d302      	bcc.n	8007aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e007      	b.n	8007aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <prvInsertTimerInActiveList+0x80>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fe f9f4 	bl	8005ea2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aba:	697b      	ldr	r3, [r7, #20]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000c14 	.word	0x20000c14
 8007ac8:	20000c10 	.word	0x20000c10

08007acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	; 0x38
 8007ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ad2:	e0ca      	b.n	8007c6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da18      	bge.n	8007b0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	3304      	adds	r3, #4
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	61fb      	str	r3, [r7, #28]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b02:	6850      	ldr	r0, [r2, #4]
 8007b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b06:	6892      	ldr	r2, [r2, #8]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f2c0 80aa 	blt.w	8007c68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe f9f5 	bl	8005f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b2a:	463b      	mov	r3, r7
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff ff6b 	bl	8007a08 <prvSampleTimeNow>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	f200 8097 	bhi.w	8007c6a <prvProcessReceivedCommands+0x19e>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <prvProcessReceivedCommands+0x78>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007b6d 	.word	0x08007b6d
 8007b50:	08007be1 	.word	0x08007be1
 8007b54:	08007bf5 	.word	0x08007bf5
 8007b58:	08007c3f 	.word	0x08007c3f
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b6d 	.word	0x08007b6d
 8007b64:	08007be1 	.word	0x08007be1
 8007b68:	08007bf5 	.word	0x08007bf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	18d1      	adds	r1, r2, r3
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8c:	f7ff ff5c 	bl	8007a48 <prvInsertTimerInActiveList>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d069      	beq.n	8007c6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d05e      	beq.n	8007c6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	441a      	add	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2100      	movs	r1, #0
 8007bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bbe:	f7ff fe05 	bl	80077cc <xTimerGenericCommand>
 8007bc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d14f      	bne.n	8007c6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	61bb      	str	r3, [r7, #24]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007bf2:	e03a      	b.n	8007c6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	617b      	str	r3, [r7, #20]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	18d1      	adds	r1, r2, r3
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c38:	f7ff ff06 	bl	8007a48 <prvInsertTimerInActiveList>
					break;
 8007c3c:	e015      	b.n	8007c6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c4e:	f000 fbdf 	bl	8008410 <vPortFree>
 8007c52:	e00a      	b.n	8007c6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c66:	e000      	b.n	8007c6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <prvProcessReceivedCommands+0x1c0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	1d39      	adds	r1, r7, #4
 8007c70:	2200      	movs	r2, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe fc16 	bl	80064a4 <xQueueReceive>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f47f af2a 	bne.w	8007ad4 <prvProcessReceivedCommands+0x8>
	}
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	3730      	adds	r7, #48	; 0x30
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000c18 	.word	0x20000c18

08007c90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c96:	e048      	b.n	8007d2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c98:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <prvSwitchTimerLists+0xc0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca2:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <prvSwitchTimerLists+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe f92f 	bl	8005f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02e      	beq.n	8007d2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d90e      	bls.n	8007cfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cea:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <prvSwitchTimerLists+0xc0>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f7fe f8d4 	bl	8005ea2 <vListInsert>
 8007cfa:	e016      	b.n	8007d2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	2300      	movs	r3, #0
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	2100      	movs	r1, #0
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f7ff fd60 	bl	80077cc <xTimerGenericCommand>
 8007d0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	603b      	str	r3, [r7, #0]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <prvSwitchTimerLists+0xc0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1b1      	bne.n	8007c98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <prvSwitchTimerLists+0xc0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <prvSwitchTimerLists+0xc4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a04      	ldr	r2, [pc, #16]	; (8007d50 <prvSwitchTimerLists+0xc0>)
 8007d40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d42:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvSwitchTimerLists+0xc4>)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	6013      	str	r3, [r2, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000c10 	.word	0x20000c10
 8007d54:	20000c14 	.word	0x20000c14

08007d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d5e:	f000 f969 	bl	8008034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d120      	bne.n	8007dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d6a:	4814      	ldr	r0, [pc, #80]	; (8007dbc <prvCheckForValidListAndQueue+0x64>)
 8007d6c:	f7fe f848 	bl	8005e00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d70:	4813      	ldr	r0, [pc, #76]	; (8007dc0 <prvCheckForValidListAndQueue+0x68>)
 8007d72:	f7fe f845 	bl	8005e00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d76:	4b13      	ldr	r3, [pc, #76]	; (8007dc4 <prvCheckForValidListAndQueue+0x6c>)
 8007d78:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <prvCheckForValidListAndQueue+0x64>)
 8007d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <prvCheckForValidListAndQueue+0x70>)
 8007d7e:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <prvCheckForValidListAndQueue+0x68>)
 8007d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d82:	2300      	movs	r3, #0
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <prvCheckForValidListAndQueue+0x74>)
 8007d88:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <prvCheckForValidListAndQueue+0x78>)
 8007d8a:	2110      	movs	r1, #16
 8007d8c:	200a      	movs	r0, #10
 8007d8e:	f7fe f953 	bl	8006038 <xQueueGenericCreateStatic>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	490b      	ldr	r1, [pc, #44]	; (8007dd4 <prvCheckForValidListAndQueue+0x7c>)
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fd6c 	bl	8006884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dac:	f000 f972 	bl	8008094 <vPortExitCritical>
}
 8007db0:	bf00      	nop
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000c18 	.word	0x20000c18
 8007dbc:	20000be8 	.word	0x20000be8
 8007dc0:	20000bfc 	.word	0x20000bfc
 8007dc4:	20000c10 	.word	0x20000c10
 8007dc8:	20000c14 	.word	0x20000c14
 8007dcc:	20000cc4 	.word	0x20000cc4
 8007dd0:	20000c24 	.word	0x20000c24
 8007dd4:	08008718 	.word	0x08008718

08007dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b04      	subs	r3, #4
 8007de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3b04      	subs	r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e08:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <pxPortInitialiseStack+0x64>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3b14      	subs	r3, #20
 8007e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f06f 0202 	mvn.w	r2, #2
 8007e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b20      	subs	r3, #32
 8007e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	08007e41 	.word	0x08007e41

08007e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <prvTaskExitError+0x54>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e52:	d00a      	beq.n	8007e6a <prvTaskExitError+0x2a>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	60fb      	str	r3, [r7, #12]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <prvTaskExitError+0x28>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	60bb      	str	r3, [r7, #8]
}
 8007e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e7e:	bf00      	nop
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0fc      	beq.n	8007e80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	2000000c 	.word	0x2000000c
	...

08007ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <pxCurrentTCBConst2>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6808      	ldr	r0, [r1, #0]
 8007ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	f380 8809 	msr	PSP, r0
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8811 	msr	BASEPRI, r0
 8007eba:	4770      	bx	lr
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst2>:
 8007ec0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ec8:	4808      	ldr	r0, [pc, #32]	; (8007eec <prvPortStartFirstTask+0x24>)
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	6800      	ldr	r0, [r0, #0]
 8007ece:	f380 8808 	msr	MSP, r0
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8814 	msr	CONTROL, r0
 8007eda:	b662      	cpsie	i
 8007edc:	b661      	cpsie	f
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	df00      	svc	0
 8007ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eea:	bf00      	nop
 8007eec:	e000ed08 	.word	0xe000ed08

08007ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ef6:	4b46      	ldr	r3, [pc, #280]	; (8008010 <xPortStartScheduler+0x120>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a46      	ldr	r2, [pc, #280]	; (8008014 <xPortStartScheduler+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10a      	bne.n	8007f16 <xPortStartScheduler+0x26>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f16:	4b3e      	ldr	r3, [pc, #248]	; (8008010 <xPortStartScheduler+0x120>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3f      	ldr	r2, [pc, #252]	; (8008018 <xPortStartScheduler+0x128>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d10a      	bne.n	8007f36 <xPortStartScheduler+0x46>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60fb      	str	r3, [r7, #12]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f36:	4b39      	ldr	r3, [pc, #228]	; (800801c <xPortStartScheduler+0x12c>)
 8007f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <xPortStartScheduler+0x130>)
 8007f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f5e:	4b31      	ldr	r3, [pc, #196]	; (8008024 <xPortStartScheduler+0x134>)
 8007f60:	2207      	movs	r2, #7
 8007f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f64:	e009      	b.n	8007f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f66:	4b2f      	ldr	r3, [pc, #188]	; (8008024 <xPortStartScheduler+0x134>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	4a2d      	ldr	r2, [pc, #180]	; (8008024 <xPortStartScheduler+0x134>)
 8007f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f82:	2b80      	cmp	r3, #128	; 0x80
 8007f84:	d0ef      	beq.n	8007f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f86:	4b27      	ldr	r3, [pc, #156]	; (8008024 <xPortStartScheduler+0x134>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1c3 0307 	rsb	r3, r3, #7
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d00a      	beq.n	8007fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	60bb      	str	r3, [r7, #8]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <xPortStartScheduler+0x134>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <xPortStartScheduler+0x134>)
 8007fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <xPortStartScheduler+0x134>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fba:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <xPortStartScheduler+0x134>)
 8007fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fc6:	4b18      	ldr	r3, [pc, #96]	; (8008028 <xPortStartScheduler+0x138>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a17      	ldr	r2, [pc, #92]	; (8008028 <xPortStartScheduler+0x138>)
 8007fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fd2:	4b15      	ldr	r3, [pc, #84]	; (8008028 <xPortStartScheduler+0x138>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a14      	ldr	r2, [pc, #80]	; (8008028 <xPortStartScheduler+0x138>)
 8007fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fde:	f000 f8dd 	bl	800819c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fe2:	4b12      	ldr	r3, [pc, #72]	; (800802c <xPortStartScheduler+0x13c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fe8:	f000 f8fc 	bl	80081e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <xPortStartScheduler+0x140>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <xPortStartScheduler+0x140>)
 8007ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ff8:	f7ff ff66 	bl	8007ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ffc:	f7ff f852 	bl	80070a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008000:	f7ff ff1e 	bl	8007e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	e000ed00 	.word	0xe000ed00
 8008014:	410fc271 	.word	0x410fc271
 8008018:	410fc270 	.word	0x410fc270
 800801c:	e000e400 	.word	0xe000e400
 8008020:	20000d14 	.word	0x20000d14
 8008024:	20000d18 	.word	0x20000d18
 8008028:	e000ed20 	.word	0xe000ed20
 800802c:	2000000c 	.word	0x2000000c
 8008030:	e000ef34 	.word	0xe000ef34

08008034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	607b      	str	r3, [r7, #4]
}
 800804c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <vPortEnterCritical+0x58>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	4a0d      	ldr	r2, [pc, #52]	; (800808c <vPortEnterCritical+0x58>)
 8008056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008058:	4b0c      	ldr	r3, [pc, #48]	; (800808c <vPortEnterCritical+0x58>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d10f      	bne.n	8008080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008060:	4b0b      	ldr	r3, [pc, #44]	; (8008090 <vPortEnterCritical+0x5c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <vPortEnterCritical+0x4c>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	603b      	str	r3, [r7, #0]
}
 800807c:	bf00      	nop
 800807e:	e7fe      	b.n	800807e <vPortEnterCritical+0x4a>
	}
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	2000000c 	.word	0x2000000c
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800809a:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <vPortExitCritical+0x50>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <vPortExitCritical+0x24>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	607b      	str	r3, [r7, #4]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <vPortExitCritical+0x50>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3b01      	subs	r3, #1
 80080be:	4a09      	ldr	r2, [pc, #36]	; (80080e4 <vPortExitCritical+0x50>)
 80080c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080c2:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <vPortExitCritical+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d105      	bne.n	80080d6 <vPortExitCritical+0x42>
 80080ca:	2300      	movs	r3, #0
 80080cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	f383 8811 	msr	BASEPRI, r3
}
 80080d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080d6:	bf00      	nop
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c
	...

080080f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080f0:	f3ef 8009 	mrs	r0, PSP
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	4b15      	ldr	r3, [pc, #84]	; (8008150 <pxCurrentTCBConst>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f01e 0f10 	tst.w	lr, #16
 8008100:	bf08      	it	eq
 8008102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	6010      	str	r0, [r2, #0]
 800810c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008114:	f380 8811 	msr	BASEPRI, r0
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f7fe ffc0 	bl	80070a4 <vTaskSwitchContext>
 8008124:	f04f 0000 	mov.w	r0, #0
 8008128:	f380 8811 	msr	BASEPRI, r0
 800812c:	bc09      	pop	{r0, r3}
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008136:	f01e 0f10 	tst.w	lr, #16
 800813a:	bf08      	it	eq
 800813c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008140:	f380 8809 	msr	PSP, r0
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w

08008150 <pxCurrentTCBConst>:
 8008150:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008172:	f7fe fedd 	bl	8006f30 <xTaskIncrementTick>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <xPortSysTickHandler+0x40>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	2300      	movs	r3, #0
 8008186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f383 8811 	msr	BASEPRI, r3
}
 800818e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	e000ed04 	.word	0xe000ed04

0800819c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <vPortSetupTimerInterrupt+0x38>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <vPortSetupTimerInterrupt+0x3c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <vPortSetupTimerInterrupt+0x40>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	4a09      	ldr	r2, [pc, #36]	; (80081e0 <vPortSetupTimerInterrupt+0x44>)
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081be:	4b04      	ldr	r3, [pc, #16]	; (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	e000e010 	.word	0xe000e010
 80081d4:	e000e018 	.word	0xe000e018
 80081d8:	20000000 	.word	0x20000000
 80081dc:	10624dd3 	.word	0x10624dd3
 80081e0:	e000e014 	.word	0xe000e014

080081e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081f4 <vPortEnableVFP+0x10>
 80081e8:	6801      	ldr	r1, [r0, #0]
 80081ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ee:	6001      	str	r1, [r0, #0]
 80081f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081f2:	bf00      	nop
 80081f4:	e000ed88 	.word	0xe000ed88

080081f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081fe:	f3ef 8305 	mrs	r3, IPSR
 8008202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d914      	bls.n	8008234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800820a:	4a17      	ldr	r2, [pc, #92]	; (8008268 <vPortValidateInterruptPriority+0x70>)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008214:	4b15      	ldr	r3, [pc, #84]	; (800826c <vPortValidateInterruptPriority+0x74>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	7afa      	ldrb	r2, [r7, #11]
 800821a:	429a      	cmp	r2, r3
 800821c:	d20a      	bcs.n	8008234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <vPortValidateInterruptPriority+0x78>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800823c:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <vPortValidateInterruptPriority+0x7c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	429a      	cmp	r2, r3
 8008242:	d90a      	bls.n	800825a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	603b      	str	r3, [r7, #0]
}
 8008256:	bf00      	nop
 8008258:	e7fe      	b.n	8008258 <vPortValidateInterruptPriority+0x60>
	}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	e000e3f0 	.word	0xe000e3f0
 800826c:	20000d14 	.word	0x20000d14
 8008270:	e000ed0c 	.word	0xe000ed0c
 8008274:	20000d18 	.word	0x20000d18

08008278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b08a      	sub	sp, #40	; 0x28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008280:	2300      	movs	r3, #0
 8008282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008284:	f7fe fd98 	bl	8006db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008288:	4b5b      	ldr	r3, [pc, #364]	; (80083f8 <pvPortMalloc+0x180>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008290:	f000 f920 	bl	80084d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008294:	4b59      	ldr	r3, [pc, #356]	; (80083fc <pvPortMalloc+0x184>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 8093 	bne.w	80083c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01d      	beq.n	80082e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082a8:	2208      	movs	r2, #8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4413      	add	r3, r2
 80082ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d014      	beq.n	80082e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f023 0307 	bic.w	r3, r3, #7
 80082c0:	3308      	adds	r3, #8
 80082c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <pvPortMalloc+0x6c>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	617b      	str	r3, [r7, #20]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d06e      	beq.n	80083c8 <pvPortMalloc+0x150>
 80082ea:	4b45      	ldr	r3, [pc, #276]	; (8008400 <pvPortMalloc+0x188>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d869      	bhi.n	80083c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082f4:	4b43      	ldr	r3, [pc, #268]	; (8008404 <pvPortMalloc+0x18c>)
 80082f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082f8:	4b42      	ldr	r3, [pc, #264]	; (8008404 <pvPortMalloc+0x18c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082fe:	e004      	b.n	800830a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d903      	bls.n	800831c <pvPortMalloc+0xa4>
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1f1      	bne.n	8008300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800831c:	4b36      	ldr	r3, [pc, #216]	; (80083f8 <pvPortMalloc+0x180>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	429a      	cmp	r2, r3
 8008324:	d050      	beq.n	80083c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2208      	movs	r2, #8
 800832c:	4413      	add	r3, r2
 800832e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	2308      	movs	r3, #8
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	429a      	cmp	r2, r3
 8008346:	d91f      	bls.n	8008388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f003 0307 	and.w	r3, r3, #7
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <pvPortMalloc+0xf8>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	613b      	str	r3, [r7, #16]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	1ad2      	subs	r2, r2, r3
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008382:	69b8      	ldr	r0, [r7, #24]
 8008384:	f000 f908 	bl	8008598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008388:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <pvPortMalloc+0x188>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	4a1b      	ldr	r2, [pc, #108]	; (8008400 <pvPortMalloc+0x188>)
 8008394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008396:	4b1a      	ldr	r3, [pc, #104]	; (8008400 <pvPortMalloc+0x188>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b1b      	ldr	r3, [pc, #108]	; (8008408 <pvPortMalloc+0x190>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d203      	bcs.n	80083aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083a2:	4b17      	ldr	r3, [pc, #92]	; (8008400 <pvPortMalloc+0x188>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a18      	ldr	r2, [pc, #96]	; (8008408 <pvPortMalloc+0x190>)
 80083a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <pvPortMalloc+0x184>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083be:	4b13      	ldr	r3, [pc, #76]	; (800840c <pvPortMalloc+0x194>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3301      	adds	r3, #1
 80083c4:	4a11      	ldr	r2, [pc, #68]	; (800840c <pvPortMalloc+0x194>)
 80083c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083c8:	f7fe fd04 	bl	8006dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <pvPortMalloc+0x174>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	60fb      	str	r3, [r7, #12]
}
 80083e8:	bf00      	nop
 80083ea:	e7fe      	b.n	80083ea <pvPortMalloc+0x172>
	return pvReturn;
 80083ec:	69fb      	ldr	r3, [r7, #28]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	200018dc 	.word	0x200018dc
 80083fc:	200018f0 	.word	0x200018f0
 8008400:	200018e0 	.word	0x200018e0
 8008404:	200018d4 	.word	0x200018d4
 8008408:	200018e4 	.word	0x200018e4
 800840c:	200018e8 	.word	0x200018e8

08008410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d04d      	beq.n	80084be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008422:	2308      	movs	r3, #8
 8008424:	425b      	negs	r3, r3
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <vPortFree+0xb8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4013      	ands	r3, r2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <vPortFree+0x44>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	60fb      	str	r3, [r7, #12]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <vPortFree+0x62>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60bb      	str	r3, [r7, #8]
}
 800846e:	bf00      	nop
 8008470:	e7fe      	b.n	8008470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <vPortFree+0xb8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01e      	beq.n	80084be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11a      	bne.n	80084be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	685a      	ldr	r2, [r3, #4]
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <vPortFree+0xb8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	43db      	mvns	r3, r3
 8008492:	401a      	ands	r2, r3
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008498:	f7fe fc8e 	bl	8006db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <vPortFree+0xbc>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <vPortFree+0xbc>)
 80084a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084aa:	6938      	ldr	r0, [r7, #16]
 80084ac:	f000 f874 	bl	8008598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <vPortFree+0xc0>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <vPortFree+0xc0>)
 80084b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084ba:	f7fe fc8b 	bl	8006dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084be:	bf00      	nop
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200018f0 	.word	0x200018f0
 80084cc:	200018e0 	.word	0x200018e0
 80084d0:	200018ec 	.word	0x200018ec

080084d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80084de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084e0:	4b27      	ldr	r3, [pc, #156]	; (8008580 <prvHeapInit+0xac>)
 80084e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3307      	adds	r3, #7
 80084f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <prvHeapInit+0xac>)
 8008504:	4413      	add	r3, r2
 8008506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800850c:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <prvHeapInit+0xb0>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <prvHeapInit+0xb0>)
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	4413      	add	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008520:	2208      	movs	r2, #8
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a15      	ldr	r2, [pc, #84]	; (8008588 <prvHeapInit+0xb4>)
 8008534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <prvHeapInit+0xb4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800853e:	4b12      	ldr	r3, [pc, #72]	; (8008588 <prvHeapInit+0xb4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008554:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <prvHeapInit+0xb4>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4a0a      	ldr	r2, [pc, #40]	; (800858c <prvHeapInit+0xb8>)
 8008562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	4a09      	ldr	r2, [pc, #36]	; (8008590 <prvHeapInit+0xbc>)
 800856a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800856c:	4b09      	ldr	r3, [pc, #36]	; (8008594 <prvHeapInit+0xc0>)
 800856e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	20000d1c 	.word	0x20000d1c
 8008584:	200018d4 	.word	0x200018d4
 8008588:	200018dc 	.word	0x200018dc
 800858c:	200018e4 	.word	0x200018e4
 8008590:	200018e0 	.word	0x200018e0
 8008594:	200018f0 	.word	0x200018f0

08008598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085a0:	4b28      	ldr	r3, [pc, #160]	; (8008644 <prvInsertBlockIntoFreeList+0xac>)
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e002      	b.n	80085ac <prvInsertBlockIntoFreeList+0x14>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d8f7      	bhi.n	80085a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	4413      	add	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d108      	bne.n	80085da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d118      	bne.n	8008620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <prvInsertBlockIntoFreeList+0xb0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d00d      	beq.n	8008616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	e008      	b.n	8008628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvInsertBlockIntoFreeList+0xb0>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e003      	b.n	8008628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d002      	beq.n	8008636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	200018d4 	.word	0x200018d4
 8008648:	200018dc 	.word	0x200018dc

0800864c <__libc_init_array>:
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	4d0d      	ldr	r5, [pc, #52]	; (8008684 <__libc_init_array+0x38>)
 8008650:	4c0d      	ldr	r4, [pc, #52]	; (8008688 <__libc_init_array+0x3c>)
 8008652:	1b64      	subs	r4, r4, r5
 8008654:	10a4      	asrs	r4, r4, #2
 8008656:	2600      	movs	r6, #0
 8008658:	42a6      	cmp	r6, r4
 800865a:	d109      	bne.n	8008670 <__libc_init_array+0x24>
 800865c:	4d0b      	ldr	r5, [pc, #44]	; (800868c <__libc_init_array+0x40>)
 800865e:	4c0c      	ldr	r4, [pc, #48]	; (8008690 <__libc_init_array+0x44>)
 8008660:	f000 f82e 	bl	80086c0 <_init>
 8008664:	1b64      	subs	r4, r4, r5
 8008666:	10a4      	asrs	r4, r4, #2
 8008668:	2600      	movs	r6, #0
 800866a:	42a6      	cmp	r6, r4
 800866c:	d105      	bne.n	800867a <__libc_init_array+0x2e>
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	f855 3b04 	ldr.w	r3, [r5], #4
 8008674:	4798      	blx	r3
 8008676:	3601      	adds	r6, #1
 8008678:	e7ee      	b.n	8008658 <__libc_init_array+0xc>
 800867a:	f855 3b04 	ldr.w	r3, [r5], #4
 800867e:	4798      	blx	r3
 8008680:	3601      	adds	r6, #1
 8008682:	e7f2      	b.n	800866a <__libc_init_array+0x1e>
 8008684:	08008794 	.word	0x08008794
 8008688:	08008794 	.word	0x08008794
 800868c:	08008794 	.word	0x08008794
 8008690:	08008798 	.word	0x08008798

08008694 <memcpy>:
 8008694:	440a      	add	r2, r1
 8008696:	4291      	cmp	r1, r2
 8008698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800869c:	d100      	bne.n	80086a0 <memcpy+0xc>
 800869e:	4770      	bx	lr
 80086a0:	b510      	push	{r4, lr}
 80086a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086aa:	4291      	cmp	r1, r2
 80086ac:	d1f9      	bne.n	80086a2 <memcpy+0xe>
 80086ae:	bd10      	pop	{r4, pc}

080086b0 <memset>:
 80086b0:	4402      	add	r2, r0
 80086b2:	4603      	mov	r3, r0
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d100      	bne.n	80086ba <memset+0xa>
 80086b8:	4770      	bx	lr
 80086ba:	f803 1b01 	strb.w	r1, [r3], #1
 80086be:	e7f9      	b.n	80086b4 <memset+0x4>

080086c0 <_init>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr

080086cc <_fini>:
 80086cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ce:	bf00      	nop
 80086d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	469e      	mov	lr, r3
 80086d6:	4770      	bx	lr
