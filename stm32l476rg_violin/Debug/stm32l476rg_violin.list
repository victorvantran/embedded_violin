
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a290  0800a290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3cc  0800a3cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3d4  0800a3d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b60  20000074  0800a450  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  0800a450  00021bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e79  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee6  00000000  00000000  00042f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00046e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  00048920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005797  00000000  00000000  0004a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8d8  00000000  00000000  0004fa67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011309a  00000000  00000000  0006b33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e3d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc8  00000000  00000000  0017e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a278 	.word	0x0800a278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a278 	.word	0x0800a278

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000dac:	1d39      	adds	r1, r7, #4
 8000dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db2:	2201      	movs	r2, #1
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <__io_putchar+0x20>)
 8000db6:	f005 f8b1 	bl	8005f1c <HAL_UART_Transmit>
	return ch;
 8000dba:	687b      	ldr	r3, [r7, #4]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20001ab0 	.word	0x20001ab0

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 ff0a 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f832 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 faa2 	bl	800131c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd8:	f000 fa70 	bl	80012bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ddc:	f000 f8b4 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000de0:	f000 f928 	bl	8001034 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000de4:	f000 fa10 	bl	8001208 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000de8:	f000 f9b4 	bl	8001154 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <main+0x58>)
 8000df0:	f004 f82e 	bl	8004e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <main+0x5c>)
 8000df8:	f004 f82a 	bl	8004e50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480a      	ldr	r0, [pc, #40]	; (8000e28 <main+0x60>)
 8000e00:	f004 f826 	bl	8004e50 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e04:	f005 fd54 	bl	80068b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of transDataTask */
  transDataTaskHandle = osThreadNew(StartTransferDataTask, NULL, &transDataTask_attributes);
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <main+0x64>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4808      	ldr	r0, [pc, #32]	; (8000e30 <main+0x68>)
 8000e0e:	f005 fd99 	bl	8006944 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <main+0x6c>)
 8000e16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e18:	f005 fd6e 	bl	80068f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <main+0x54>
 8000e1e:	bf00      	nop
 8000e20:	20001a18 	.word	0x20001a18
 8000e24:	20001a64 	.word	0x20001a64
 8000e28:	20001964 	.word	0x20001964
 8000e2c:	0800a2c8 	.word	0x0800a2c8
 8000e30:	08001495 	.word	0x08001495
 8000e34:	20001a14 	.word	0x20001a14

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0b8      	sub	sp, #224	; 0xe0
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e42:	2244      	movs	r2, #68	; 0x44
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f008 fab8 	bl	80093bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2288      	movs	r2, #136	; 0x88
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f008 faaa 	bl	80093bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	2310      	movs	r3, #16
 8000e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e8e:	230a      	movs	r3, #10
 8000e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e94:	2307      	movs	r3, #7
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fbcc 	bl	8003648 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eb6:	f000 fbab 	bl	8001610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	230f      	movs	r3, #15
 8000ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ed8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000edc:	2104      	movs	r1, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 ff98 	bl	8003e14 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eea:	f000 fb91 	bl	8001610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000eee:	f244 0302 	movw	r3, #16386	; 0x4002
 8000ef2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000efc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000efe:	2302      	movs	r3, #2
 8000f00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f06:	2308      	movs	r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f1a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 f9b0 	bl	8004284 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f2a:	f000 fb71 	bl	8001610 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f32:	f002 fb33 	bl	800359c <HAL_PWREx_ControlVoltageScaling>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000f3c:	f000 fb68 	bl	8001610 <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	37e0      	adds	r7, #224	; 0xe0
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f6c:	4a2f      	ldr	r2, [pc, #188]	; (800102c <MX_ADC1_Init+0xe4>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f76:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f82:	4b29      	ldr	r3, [pc, #164]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fcc:	f001 f82e 	bl	800202c <HAL_ADC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fd6:	f000 fb1b 	bl	8001610 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <MX_ADC1_Init+0xe0>)
 8000fe6:	f001 ff8f 	bl	8002f08 <HAL_ADCEx_MultiModeConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ff0:	f000 fb0e 	bl	8001610 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_ADC1_Init+0xe8>)
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001000:	237f      	movs	r3, #127	; 0x7f
 8001002:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001004:	2304      	movs	r3, #4
 8001006:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_ADC1_Init+0xe0>)
 8001012:	f001 fb01 	bl	8002618 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800101c:	f000 faf8 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200019b0 	.word	0x200019b0
 800102c:	50040000 	.word	0x50040000
 8001030:	14f00020 	.word	0x14f00020

08001034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b096      	sub	sp, #88	; 0x58
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	222c      	movs	r2, #44	; 0x2c
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f008 f9ab 	bl	80093bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <MX_TIM1_Init+0x118>)
 8001068:	4a39      	ldr	r2, [pc, #228]	; (8001150 <MX_TIM1_Init+0x11c>)
 800106a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80 - 1;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_TIM1_Init+0x118>)
 800106e:	224f      	movs	r2, #79	; 0x4f
 8001070:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <MX_TIM1_Init+0x118>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <MX_TIM1_Init+0x118>)
 800107a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <MX_TIM1_Init+0x118>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <MX_TIM1_Init+0x118>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b2f      	ldr	r3, [pc, #188]	; (800114c <MX_TIM1_Init+0x118>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001092:	482e      	ldr	r0, [pc, #184]	; (800114c <MX_TIM1_Init+0x118>)
 8001094:	f003 fe84 	bl	8004da0 <HAL_TIM_PWM_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800109e:	f000 fab7 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b2:	4619      	mov	r1, r3
 80010b4:	4825      	ldr	r0, [pc, #148]	; (800114c <MX_TIM1_Init+0x118>)
 80010b6:	f004 fdbf 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010c0:	f000 faa6 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	2360      	movs	r3, #96	; 0x60
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <MX_TIM1_Init+0x118>)
 80010ea:	f004 f8d7 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010f4:	f000 fa8c 	bl	8001610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800111a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM1_Init+0x118>)
 800112e:	f004 fe0b 	bl	8005d48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001138:	f000 fa6a 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM1_Init+0x118>)
 800113e:	f000 fb19 	bl	8001774 <HAL_TIM_MspPostInit>

}
 8001142:	bf00      	nop
 8001144:	3758      	adds	r7, #88	; 0x58
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20001a18 	.word	0x20001a18
 8001150:	40012c00 	.word	0x40012c00

08001154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_TIM2_Init+0xb0>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_TIM2_Init+0xb0>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_TIM2_Init+0xb0>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_TIM2_Init+0xb0>)
 800118e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_TIM2_Init+0xb0>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_TIM2_Init+0xb0>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_TIM2_Init+0xb0>)
 80011a2:	f003 fdfd 	bl	8004da0 <HAL_TIM_PWM_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011ac:	f000 fa30 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_TIM2_Init+0xb0>)
 80011c0:	f004 fd3a 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011ca:	f000 fa21 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ce:	2360      	movs	r3, #96	; 0x60
 80011d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM2_Init+0xb0>)
 80011e6:	f004 f859 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80011f0:	f000 fa0e 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <MX_TIM2_Init+0xb0>)
 80011f6:	f000 fabd 	bl	8001774 <HAL_TIM_MspPostInit>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20001a64 	.word	0x20001a64

08001208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]
 800122a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_TIM3_Init+0xac>)
 800122e:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <MX_TIM3_Init+0xb0>)
 8001230:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80 - 1;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001234:	224f      	movs	r2, #79	; 0x4f
 8001236:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_TIM3_Init+0xac>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001244:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_TIM3_Init+0xac>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001254:	f003 fda4 	bl	8004da0 <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800125e:	f000 f9d7 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001272:	f004 fce1 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800127c:	f000 f9c8 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM3_Init+0xac>)
 8001298:	f004 f800 	bl	800529c <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80012a2:	f000 f9b5 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM3_Init+0xac>)
 80012a8:	f000 fa64 	bl	8001774 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20001964 	.word	0x20001964
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_USART2_UART_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART2_UART_Init+0x58>)
 8001300:	f004 fdbe 	bl	8005e80 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 f981 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20001ab0 	.word	0x20001ab0
 8001318:	40004400 	.word	0x40004400

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_GPIO_Init+0x74>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <MX_GPIO_Init+0x74>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_GPIO_Init+0x74>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_GPIO_Init+0x74>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <MX_GPIO_Init+0x74>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_GPIO_Init+0x74>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_GPIO_Init+0x74>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <MX_GPIO_Init+0x74>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_GPIO_Init+0x74>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_GPIO_Init+0x74>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <MX_GPIO_Init+0x74>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_GPIO_Init+0x74>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <movingAverage>:




float movingAverage(float avg, float new)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	ed87 0a01 	vstr	s0, [r7, #4]
 800139e:	edc7 0a00 	vstr	s1, [r7]
	return (avg - avg/20.0 + new/20.0);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff f8c8 	bl	8000538 <__aeabi_f2d>
 80013a8:	4604      	mov	r4, r0
 80013aa:	460d      	mov	r5, r1
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff f8c3 	bl	8000538 <__aeabi_f2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <movingAverage+0x74>)
 80013b8:	f7ff fa40 	bl	800083c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7fe ff58 	bl	8000278 <__aeabi_dsub>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4614      	mov	r4, r2
 80013ce:	461d      	mov	r5, r3
 80013d0:	6838      	ldr	r0, [r7, #0]
 80013d2:	f7ff f8b1 	bl	8000538 <__aeabi_f2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <movingAverage+0x74>)
 80013dc:	f7ff fa2e 	bl	800083c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7fe ff48 	bl	800027c <__adddf3>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb0a 	bl	8000a0c <__aeabi_d2f>
 80013f8:	4603      	mov	r3, r0
 80013fa:	ee07 3a90 	vmov	s15, r3
}
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bdb0      	pop	{r4, r5, r7, pc}
 8001408:	40340000 	.word	0x40340000

0800140c <getPeriod>:


int16_t getPeriod(float v, float sLength, int16_t raw_adc)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	ed87 0a03 	vstr	s0, [r7, #12]
 8001416:	edc7 0a02 	vstr	s1, [r7, #8]
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
	// scale = 5.772727
	if (raw_adc < 300 || raw_adc > 2205) return 0;
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001426:	db05      	blt.n	8001434 <getPeriod+0x28>
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	f640 029d 	movw	r2, #2205	; 0x89d
 8001430:	4293      	cmp	r3, r2
 8001432:	dd01      	ble.n	8001438 <getPeriod+0x2c>
 8001434:	2300      	movs	r3, #0
 8001436:	e020      	b.n	800147a <getPeriod+0x6e>
	return (int16_t)( ((2*(sLength - (raw_adc/(5.772727f)) + 51.9685f))/v) * 1000000 );
 8001438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001444:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001488 <getPeriod+0x7c>
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001454:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800148c <getPeriod+0x80>
 8001458:	ee77 7a87 	vadd.f32	s15, s15, s14
 800145c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001460:	ed97 7a03 	vldr	s14, [r7, #12]
 8001464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001468:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001490 <getPeriod+0x84>
 800146c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	b21b      	sxth	r3, r3
	//return (int16_t)( ((2*(sLength - raw_adc/(5.772727f)))/v) * 1000000 );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40b8ba2e 	.word	0x40b8ba2e
 800148c:	424fdfbe 	.word	0x424fdfbe
 8001490:	49742400 	.word	0x49742400

08001494 <StartTransferDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTransferDataTask */
void StartTransferDataTask(void *argument)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint16_t prevData = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	83bb      	strh	r3, [r7, #28]
	uint16_t data = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	837b      	strh	r3, [r7, #26]


	uint16_t prevPeriod = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	833b      	strh	r3, [r7, #24]
	uint16_t period = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	82fb      	strh	r3, [r7, #22]


	int32_t j = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]

	uint16_t prevMovAvg = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t movAvg = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	84bb      	strh	r3, [r7, #36]	; 0x24

	float avg = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
	float new = 0;
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
	uint8_t count = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	77fb      	strb	r3, [r7, #31]
	/* Infinite loop */
  for(;;)
  {


  	HAL_ADC_Start(&hadc1);
 80014c8:	4840      	ldr	r0, [pc, #256]	; (80015cc <StartTransferDataTask+0x138>)
 80014ca:	f000 ff05 	bl	80022d8 <HAL_ADC_Start>
  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d2:	483e      	ldr	r0, [pc, #248]	; (80015cc <StartTransferDataTask+0x138>)
 80014d4:	f000 ffba 	bl	800244c <HAL_ADC_PollForConversion>
  	data = HAL_ADC_GetValue(&hadc1);
 80014d8:	483c      	ldr	r0, [pc, #240]	; (80015cc <StartTransferDataTask+0x138>)
 80014da:	f001 f88f 	bl	80025fc <HAL_ADC_GetValue>
 80014de:	4603      	mov	r3, r0
 80014e0:	837b      	strh	r3, [r7, #26]
  	//HAL_UART_Transmit(&huart2, (uint8_t *)&adc_raw, 2, HAL_MAX_DELAY);
    //printf("%u\r\n", data);
    //		osDelay(10);
    new = (float)data;
 80014e2:	8b7b      	ldrh	r3, [r7, #26]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ec:	edc7 7a03 	vstr	s15, [r7, #12]
    //avg = movingAverage(avg, new);

    if (count < 20)
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
 80014f2:	2b13      	cmp	r3, #19
 80014f4:	d813      	bhi.n	800151e <StartTransferDataTask+0x8a>
    {
    	if (count > 9)
 80014f6:	7ffb      	ldrb	r3, [r7, #31]
 80014f8:	2b09      	cmp	r3, #9
 80014fa:	d901      	bls.n	8001500 <StartTransferDataTask+0x6c>
    	{
    		avg = new;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	623b      	str	r3, [r7, #32]
    	}
    	if (count > 10)
 8001500:	7ffb      	ldrb	r3, [r7, #31]
 8001502:	2b0a      	cmp	r3, #10
 8001504:	d907      	bls.n	8001516 <StartTransferDataTask+0x82>
    	{
    		avg = movingAverage(avg, new);
 8001506:	edd7 0a03 	vldr	s1, [r7, #12]
 800150a:	ed97 0a08 	vldr	s0, [r7, #32]
 800150e:	f7ff ff41 	bl	8001394 <movingAverage>
 8001512:	ed87 0a08 	vstr	s0, [r7, #32]
    	}
    	count++;
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	3301      	adds	r3, #1
 800151a:	77fb      	strb	r3, [r7, #31]
 800151c:	e00e      	b.n	800153c <StartTransferDataTask+0xa8>
    }
    else
    {
  		avg = movingAverage(avg, new);
 800151e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001522:	ed97 0a08 	vldr	s0, [r7, #32]
 8001526:	f7ff ff35 	bl	8001394 <movingAverage>
 800152a:	ed87 0a08 	vstr	s0, [r7, #32]
      movAvg = (uint16_t)(avg);
 800152e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001536:	ee17 3a90 	vmov	r3, s15
 800153a:	84bb      	strh	r3, [r7, #36]	; 0x24
    //printf("%u\r\n", movAvg);


		//if ((prevPeriod - period) > 5 || (prevPeriod - period) < -5)
		//if ((prevData - data) > 20 || (prevData - data) < -20)
		if ((prevMovAvg - movAvg) > 5 || (prevMovAvg - movAvg) < -5)
 800153c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800153e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b05      	cmp	r3, #5
 8001544:	dc05      	bgt.n	8001552 <StartTransferDataTask+0xbe>
 8001546:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f113 0f05 	cmn.w	r3, #5
 8001550:	da31      	bge.n	80015b6 <StartTransferDataTask+0x122>
		{
			period = getPeriod(128772.0f, 328.5f, movAvg);
 8001552:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001556:	4618      	mov	r0, r3
 8001558:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80015d0 <StartTransferDataTask+0x13c>
 800155c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80015d4 <StartTransferDataTask+0x140>
 8001560:	f7ff ff54 	bl	800140c <getPeriod>
 8001564:	4603      	mov	r3, r0
 8001566:	82fb      	strh	r3, [r7, #22]
			printf("Period: %u\r\n", period);
 8001568:	8afb      	ldrh	r3, [r7, #22]
 800156a:	4619      	mov	r1, r3
 800156c:	481a      	ldr	r0, [pc, #104]	; (80015d8 <StartTransferDataTask+0x144>)
 800156e:	f007 ff2d 	bl	80093cc <iprintf>

			if (count >= 10)
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d916      	bls.n	80015a6 <StartTransferDataTask+0x112>
			{
				__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <StartTransferDataTask+0x148>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
				TIM1->ARR = (period);
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <StartTransferDataTask+0x14c>)
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	62d3      	str	r3, [r2, #44]	; 0x2c
				htim1.Instance->CCR1 = TIM1->ARR/2;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <StartTransferDataTask+0x14c>)
 8001588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <StartTransferDataTask+0x148>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0852      	lsrs	r2, r2, #1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34

				//__HAL_TIM_SET_COUNTER(&htim3, 0);
				TIM3->ARR = (period);
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <StartTransferDataTask+0x150>)
 8001594:	8afb      	ldrh	r3, [r7, #22]
 8001596:	62d3      	str	r3, [r2, #44]	; 0x2c
				htim3.Instance->CCR1 = TIM3->ARR/2;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <StartTransferDataTask+0x150>)
 800159a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <StartTransferDataTask+0x154>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0852      	lsrs	r2, r2, #1
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
 80015a4:	e005      	b.n	80015b2 <StartTransferDataTask+0x11e>
			}
			else
			{
				TIM1->ARR = (0);
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <StartTransferDataTask+0x14c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM1->ARR = (0);
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <StartTransferDataTask+0x14c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
			}


			//prevPeriod = period;
			//prevData = data;
			prevMovAvg = movAvg;
 80015b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015b4:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		osDelay(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f005 fa56 	bl	8006a68 <osDelay>

    if (data == 0)
 80015bc:	8b7b      	ldrh	r3, [r7, #26]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d182      	bne.n	80014c8 <StartTransferDataTask+0x34>
    {
    	movAvg = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	84bb      	strh	r3, [r7, #36]	; 0x24
    	count = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	77fb      	strb	r3, [r7, #31]
  	HAL_ADC_Start(&hadc1);
 80015ca:	e77d      	b.n	80014c8 <StartTransferDataTask+0x34>
 80015cc:	200019b0 	.word	0x200019b0
 80015d0:	43a44000 	.word	0x43a44000
 80015d4:	47fb8200 	.word	0x47fb8200
 80015d8:	0800a2a0 	.word	0x0800a2a0
 80015dc:	20001a18 	.word	0x20001a18
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	40000400 	.word	0x40000400
 80015e8:	20001964 	.word	0x20001964

080015ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015fe:	f000 fb11 	bl	8001c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40001000 	.word	0x40001000

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_MspInit+0x4c>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_MspInit+0x4c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6613      	str	r3, [r2, #96]	; 0x60
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_MspInit+0x4c>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_MspInit+0x4c>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6593      	str	r3, [r2, #88]	; 0x58
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_MspInit+0x4c>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f001 fdbd 	bl	80031d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <HAL_ADC_MspInit+0x74>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d124      	bne.n	80016d8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_ADC_MspInit+0x78>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_ADC_MspInit+0x78>)
 8001694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_ADC_MspInit+0x78>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_ADC_MspInit+0x78>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_ADC_MspInit+0x78>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_ADC_MspInit+0x78>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c2:	230b      	movs	r3, #11
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f001 fdaa 	bl	800322c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	50040000 	.word	0x50040000
 80016e4:	40021000 	.word	0x40021000

080016e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_TIM_PWM_MspInit+0x80>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10c      	bne.n	8001714 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001712:	e022      	b.n	800175a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d10c      	bne.n	8001738 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6593      	str	r3, [r2, #88]	; 0x58
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
}
 8001736:	e010      	b.n	800175a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_TIM_PWM_MspInit+0x88>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10b      	bne.n	800175a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6593      	str	r3, [r2, #88]	; 0x58
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <HAL_TIM_PWM_MspInit+0x84>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
}
 800175a:	bf00      	nop
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40000400 	.word	0x40000400

08001774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a35      	ldr	r2, [pc, #212]	; (8001868 <HAL_TIM_MspPostInit+0xf4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d11e      	bne.n	80017d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b35      	ldr	r3, [pc, #212]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ce:	f001 fd2d 	bl	800322c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017d2:	e044      	b.n	800185e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017dc:	d11d      	bne.n	800181a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f6:	2320      	movs	r3, #32
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001806:	2301      	movs	r3, #1
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f001 fd0a 	bl	800322c <HAL_GPIO_Init>
}
 8001818:	e021      	b.n	800185e <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_TIM_MspPostInit+0xfc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d11c      	bne.n	800185e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_TIM_MspPostInit+0xf8>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800183c:	2340      	movs	r3, #64	; 0x40
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800184c:	2302      	movs	r3, #2
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f001 fce7 	bl	800322c <HAL_GPIO_Init>
}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40000400 	.word	0x40000400

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_UART_MspInit+0x7c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d128      	bne.n	80018e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_UART_MspInit+0x80>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_UART_MspInit+0x80>)
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	6593      	str	r3, [r2, #88]	; 0x58
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0x80>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_UART_MspInit+0x80>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_UART_MspInit+0x80>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_UART_MspInit+0x80>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018c6:	230c      	movs	r3, #12
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d6:	2307      	movs	r3, #7
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f001 fca2 	bl	800322c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40004400 	.word	0x40004400
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2036      	movs	r0, #54	; 0x36
 800190e:	f001 fc63 	bl	80031d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001912:	2036      	movs	r0, #54	; 0x36
 8001914:	f001 fc7c 	bl	8003210 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_InitTick+0x9c>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_InitTick+0x9c>)
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	6593      	str	r3, [r2, #88]	; 0x58
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_InitTick+0x9c>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001930:	f107 0210 	add.w	r2, r7, #16
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fc10 	bl	8004160 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001940:	f002 fbe2 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8001944:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	4a13      	ldr	r2, [pc, #76]	; (8001998 <HAL_InitTick+0xa0>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0c9b      	lsrs	r3, r3, #18
 8001950:	3b01      	subs	r3, #1
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_InitTick+0xa4>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_InitTick+0xa8>)
 8001958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_InitTick+0xa4>)
 800195c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001960:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_InitTick+0xa4>)
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_InitTick+0xa4>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_InitTick+0xa4>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001974:	4809      	ldr	r0, [pc, #36]	; (800199c <HAL_InitTick+0xa4>)
 8001976:	f003 f941 	bl	8004bfc <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d104      	bne.n	800198a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001980:	4806      	ldr	r0, [pc, #24]	; (800199c <HAL_InitTick+0xa4>)
 8001982:	f003 f99d 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 8001986:	4603      	mov	r3, r0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	431bde83 	.word	0x431bde83
 800199c:	20001b34 	.word	0x20001b34
 80019a0:	40001000 	.word	0x40001000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM6_DAC_IRQHandler+0x10>)
 80019d6:	f003 fb41 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20001b34 	.word	0x20001b34

080019e4 <_read>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e00a      	b.n	8001a0c <_read+0x28>
 80019f6:	f3af 8000 	nop.w
 80019fa:	4601      	mov	r1, r0
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	b2ca      	uxtb	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbf0      	blt.n	80019f6 <_read+0x12>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_write>:
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e009      	b.n	8001a44 <_write+0x26>
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60ba      	str	r2, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f9b3 	bl	8000da4 <__io_putchar>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbf1      	blt.n	8001a30 <_write+0x12>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_close>:
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_fstat>:
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	2300      	movs	r3, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_isatty>:
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	2301      	movs	r3, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_lseek>:
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <_sbrk>:
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
 8001af0:	f007 fc2c 	bl	800934c <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20018000 	.word	0x20018000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000090 	.word	0x20000090
 8001b28:	20001bd8 	.word	0x20001bd8

08001b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <SystemInit+0x5c>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <SystemInit+0x5c>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <SystemInit+0x60>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <SystemInit+0x60>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <SystemInit+0x60>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <SystemInit+0x60>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <SystemInit+0x60>)
 8001b58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <SystemInit+0x60>)
 8001b64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <SystemInit+0x60>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <SystemInit+0x60>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SystemInit+0x60>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00
 8001b8c:	40021000 	.word	0x40021000

08001b90 <Reset_Handler>:
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopForever+0x2>
 8001b94:	f7ff ffca 	bl	8001b2c <SystemInit>
 8001b98:	2100      	movs	r1, #0
 8001b9a:	e003      	b.n	8001ba4 <LoopCopyDataInit>

08001b9c <CopyDataInit>:
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <LoopForever+0x6>)
 8001b9e:	585b      	ldr	r3, [r3, r1]
 8001ba0:	5043      	str	r3, [r0, r1]
 8001ba2:	3104      	adds	r1, #4

08001ba4 <LoopCopyDataInit>:
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <LoopForever+0xa>)
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <LoopForever+0xe>)
 8001ba8:	1842      	adds	r2, r0, r1
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3f6      	bcc.n	8001b9c <CopyDataInit>
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <LoopForever+0x12>)
 8001bb0:	e002      	b.n	8001bb8 <LoopFillZerobss>

08001bb2 <FillZerobss>:
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f842 3b04 	str.w	r3, [r2], #4

08001bb8 <LoopFillZerobss>:
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <LoopForever+0x16>)
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3f9      	bcc.n	8001bb2 <FillZerobss>
 8001bbe:	f007 fbcb 	bl	8009358 <__libc_init_array>
 8001bc2:	f7ff f901 	bl	8000dc8 <main>

08001bc6 <LoopForever>:
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
 8001bc8:	20018000 	.word	0x20018000
 8001bcc:	0800a3dc 	.word	0x0800a3dc
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000074 	.word	0x20000074
 8001bd8:	20000074 	.word	0x20000074
 8001bdc:	20001bd4 	.word	0x20001bd4

08001be0 <ADC1_2_IRQHandler>:
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_Init+0x3c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_Init+0x3c>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	f001 fae1 	bl	80031c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fe79 	bl	80018f8 <HAL_InitTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	e001      	b.n	8001c16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c12:	f7ff fd03 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20001b80 	.word	0x20001b80

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20001b80 	.word	0x20001b80

08001c64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3360      	adds	r3, #96	; 0x60
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <LL_ADC_SetOffset+0x44>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	03fff000 	.word	0x03fff000

08001d14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3360      	adds	r3, #96	; 0x60
 8001d22:	461a      	mov	r2, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3360      	adds	r3, #96	; 0x60
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3330      	adds	r3, #48	; 0x30
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	4413      	add	r3, r2
 8001dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	211f      	movs	r1, #31
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	f003 011f 	and.w	r1, r3, #31
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3314      	adds	r3, #20
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0e5b      	lsrs	r3, r3, #25
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0d1b      	lsrs	r3, r3, #20
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2107      	movs	r1, #7
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	401a      	ands	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	0d1b      	lsrs	r3, r3, #20
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401a      	ands	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0318 	and.w	r3, r3, #24
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e70:	40d9      	lsrs	r1, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	400b      	ands	r3, r1
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	0007ffff 	.word	0x0007ffff

08001e94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001edc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6093      	str	r3, [r2, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f04:	d101      	bne.n	8001f0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f54:	d101      	bne.n	8001f5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <LL_ADC_IsEnabled+0x18>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <LL_ADC_IsEnabled+0x1a>
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fca:	f043 0204 	orr.w	r2, r3, #4
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b08      	cmp	r3, #8
 8002016:	d101      	bne.n	800201c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e136      	b.n	80022b4 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	2b00      	cmp	r3, #0
 8002052:	d109      	bne.n	8002068 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff fb09 	bl	800166c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff3f 	bl	8001ef0 <LL_ADC_IsDeepPowerDownEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff25 	bl	8001ecc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff5a 	bl	8001f40 <LL_ADC_IsInternalRegulatorEnabled>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d115      	bne.n	80020be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff3e 	bl	8001f18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800209c:	4b87      	ldr	r3, [pc, #540]	; (80022bc <HAL_ADC_Init+0x290>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	4a87      	ldr	r2, [pc, #540]	; (80022c0 <HAL_ADC_Init+0x294>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff3c 	bl	8001f40 <LL_ADC_IsInternalRegulatorEnabled>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff75 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 80020f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80cf 	bne.w	80022a2 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80cb 	bne.w	80022a2 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002114:	f043 0202 	orr.w	r2, r3, #2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff35 	bl	8001f90 <LL_ADC_IsEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d115      	bne.n	8002158 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800212c:	4865      	ldr	r0, [pc, #404]	; (80022c4 <HAL_ADC_Init+0x298>)
 800212e:	f7ff ff2f 	bl	8001f90 <LL_ADC_IsEnabled>
 8002132:	4604      	mov	r4, r0
 8002134:	4864      	ldr	r0, [pc, #400]	; (80022c8 <HAL_ADC_Init+0x29c>)
 8002136:	f7ff ff2b 	bl	8001f90 <LL_ADC_IsEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	431c      	orrs	r4, r3
 800213e:	4863      	ldr	r0, [pc, #396]	; (80022cc <HAL_ADC_Init+0x2a0>)
 8002140:	f7ff ff26 	bl	8001f90 <LL_ADC_IsEnabled>
 8002144:	4603      	mov	r3, r0
 8002146:	4323      	orrs	r3, r4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4619      	mov	r1, r3
 8002152:	485f      	ldr	r0, [pc, #380]	; (80022d0 <HAL_ADC_Init+0x2a4>)
 8002154:	f7ff fd86 	bl	8001c64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7e5b      	ldrb	r3, [r3, #25]
 800215c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002162:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002168:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800216e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002176:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d106      	bne.n	8002194 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	045b      	lsls	r3, r3, #17
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <HAL_ADC_Init+0x2a8>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff08 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 80021ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff15 	bl	8002004 <LL_ADC_INJ_IsConversionOngoing>
 80021da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d13d      	bne.n	800225e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d13a      	bne.n	800225e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002204:	f023 0302 	bic.w	r3, r3, #2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	69b9      	ldr	r1, [r7, #24]
 800220e:	430b      	orrs	r3, r1
 8002210:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002218:	2b01      	cmp	r3, #1
 800221a:	d118      	bne.n	800224e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	611a      	str	r2, [r3, #16]
 800224c:	e007      	b.n	800225e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10c      	bne.n	8002280 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f023 010f 	bic.w	r1, r3, #15
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
 800227e:	e007      	b.n	8002290 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 020f 	bic.w	r2, r2, #15
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f023 0303 	bic.w	r3, r3, #3
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
 80022a0:	e007      	b.n	80022b2 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3724      	adds	r7, #36	; 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	20000000 	.word	0x20000000
 80022c0:	053e2d63 	.word	0x053e2d63
 80022c4:	50040000 	.word	0x50040000
 80022c8:	50040100 	.word	0x50040100
 80022cc:	50040200 	.word	0x50040200
 80022d0:	50040300 	.word	0x50040300
 80022d4:	fff0c007 	.word	0xfff0c007

080022d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022e0:	4857      	ldr	r0, [pc, #348]	; (8002440 <HAL_ADC_Start+0x168>)
 80022e2:	f7ff fdd7 	bl	8001e94 <LL_ADC_GetMultimode>
 80022e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fe76 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 809c 	bne.w	8002432 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_Start+0x30>
 8002304:	2302      	movs	r3, #2
 8002306:	e097      	b.n	8002438 <HAL_ADC_Start+0x160>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fd71 	bl	8002df8 <ADC_Enable>
 8002316:	4603      	mov	r3, r0
 8002318:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 8083 	bne.w	8002428 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a42      	ldr	r2, [pc, #264]	; (8002444 <HAL_ADC_Start+0x16c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d002      	beq.n	8002346 <HAL_ADC_Start+0x6e>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	e000      	b.n	8002348 <HAL_ADC_Start+0x70>
 8002346:	4b40      	ldr	r3, [pc, #256]	; (8002448 <HAL_ADC_Start+0x170>)
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	4293      	cmp	r3, r2
 800234e:	d002      	beq.n	8002356 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d105      	bne.n	8002362 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d106      	bne.n	800237e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f023 0206 	bic.w	r2, r3, #6
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	659a      	str	r2, [r3, #88]	; 0x58
 800237c:	e002      	b.n	8002384 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	221c      	movs	r2, #28
 800238a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2a      	ldr	r2, [pc, #168]	; (8002444 <HAL_ADC_Start+0x16c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <HAL_ADC_Start+0xcc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_Start+0xce>
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_ADC_Start+0x170>)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d008      	beq.n	80023c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b05      	cmp	r3, #5
 80023b8:	d002      	beq.n	80023c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d114      	bne.n	80023ea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fde7 	bl	8001fb6 <LL_ADC_REG_StartConversion>
 80023e8:	e025      	b.n	8002436 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_ADC_Start+0x16c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d002      	beq.n	8002406 <HAL_ADC_Start+0x12e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	e000      	b.n	8002408 <HAL_ADC_Start+0x130>
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <HAL_ADC_Start+0x170>)
 8002408:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00f      	beq.n	8002436 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800241e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
 8002426:	e006      	b.n	8002436 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002430:	e001      	b.n	8002436 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	50040300 	.word	0x50040300
 8002444:	50040100 	.word	0x50040100
 8002448:	50040000 	.word	0x50040000

0800244c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002456:	4866      	ldr	r0, [pc, #408]	; (80025f0 <HAL_ADC_PollForConversion+0x1a4>)
 8002458:	f7ff fd1c 	bl	8001e94 <LL_ADC_GetMultimode>
 800245c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	2b08      	cmp	r3, #8
 8002464:	d102      	bne.n	800246c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002466:	2308      	movs	r3, #8
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e02a      	b.n	80024c2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b05      	cmp	r3, #5
 8002476:	d002      	beq.n	800247e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b09      	cmp	r3, #9
 800247c:	d111      	bne.n	80024a2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0a4      	b.n	80025e6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800249c:	2304      	movs	r3, #4
 800249e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024a0:	e00f      	b.n	80024c2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024a2:	4853      	ldr	r0, [pc, #332]	; (80025f0 <HAL_ADC_PollForConversion+0x1a4>)
 80024a4:	f7ff fd04 	bl	8001eb0 <LL_ADC_GetMultiDMATransfer>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e093      	b.n	80025e6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024be:	2304      	movs	r3, #4
 80024c0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024c2:	f7ff fbc3 	bl	8001c4c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024c8:	e021      	b.n	800250e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d0:	d01d      	beq.n	800250e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024d2:	f7ff fbbb 	bl	8001c4c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d302      	bcc.n	80024e8 <HAL_ADC_PollForConversion+0x9c>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e06b      	b.n	80025e6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0d6      	beq.n	80024ca <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc22 	bl	8001d76 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01c      	beq.n	8002572 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7e5b      	ldrb	r3, [r3, #25]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d118      	bne.n	8002572 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b08      	cmp	r3, #8
 800254c:	d111      	bne.n	8002572 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d105      	bne.n	8002572 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_ADC_PollForConversion+0x1a8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d002      	beq.n	8002582 <HAL_ADC_PollForConversion+0x136>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	e000      	b.n	8002584 <HAL_ADC_PollForConversion+0x138>
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_ADC_PollForConversion+0x1ac>)
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	4293      	cmp	r3, r2
 800258a:	d008      	beq.n	800259e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d002      	beq.n	800259e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b09      	cmp	r3, #9
 800259c:	d104      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e00c      	b.n	80025c2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_ADC_PollForConversion+0x1a8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d002      	beq.n	80025b8 <HAL_ADC_PollForConversion+0x16c>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e000      	b.n	80025ba <HAL_ADC_PollForConversion+0x16e>
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_ADC_PollForConversion+0x1ac>)
 80025ba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d104      	bne.n	80025d2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2208      	movs	r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e008      	b.n	80025e4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	220c      	movs	r2, #12
 80025e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	50040300 	.word	0x50040300
 80025f4:	50040100 	.word	0x50040100
 80025f8:	50040000 	.word	0x50040000

080025fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0b6      	sub	sp, #216	; 0xd8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x22>
 8002636:	2302      	movs	r3, #2
 8002638:	e3c7      	b.n	8002dca <HAL_ADC_ConfigChannel+0x7b2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fcc9 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 83a8 	bne.w	8002da4 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d824      	bhi.n	80026a6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	3b02      	subs	r3, #2
 8002662:	2b03      	cmp	r3, #3
 8002664:	d81b      	bhi.n	800269e <HAL_ADC_ConfigChannel+0x86>
 8002666:	a201      	add	r2, pc, #4	; (adr r2, 800266c <HAL_ADC_ConfigChannel+0x54>)
 8002668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266c:	0800267d 	.word	0x0800267d
 8002670:	08002685 	.word	0x08002685
 8002674:	0800268d 	.word	0x0800268d
 8002678:	08002695 	.word	0x08002695
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	220c      	movs	r2, #12
 8002680:	605a      	str	r2, [r3, #4]
          break;
 8002682:	e011      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2212      	movs	r2, #18
 8002688:	605a      	str	r2, [r3, #4]
          break;
 800268a:	e00d      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2218      	movs	r2, #24
 8002690:	605a      	str	r2, [r3, #4]
          break;
 8002692:	e009      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269a:	605a      	str	r2, [r3, #4]
          break;
 800269c:	e004      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2206      	movs	r2, #6
 80026a2:	605a      	str	r2, [r3, #4]
          break;
 80026a4:	e000      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026a6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	f7ff fb71 	bl	8001d9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc8d 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 80026c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fc99 	bl	8002004 <LL_ADC_INJ_IsConversionOngoing>
 80026d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 81a6 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 81a1 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	461a      	mov	r2, r3
 80026f8:	f7ff fb7c 	bl	8001df4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d00a      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800272e:	f7ff facd 	bl	8001ccc <LL_ADC_SetOffset>
 8002732:	e17b      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff faea 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x148>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fadf 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	f003 021f 	and.w	r2, r3, #31
 800275e:	e01e      	b.n	800279e <HAL_ADC_ConfigChannel+0x186>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fad4 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800277e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e004      	b.n	800279c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x19e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	e018      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x1d0>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80027ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80027d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e004      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80027de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff faa3 	bl	8001d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fa87 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 8002806:	4603      	mov	r3, r0
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x20e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fa7c 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	0e9b      	lsrs	r3, r3, #26
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	e01e      	b.n	8002864 <HAL_ADC_ConfigChannel+0x24c>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fa71 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002844:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002848:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800284c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e004      	b.n	8002862 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_ADC_ConfigChannel+0x264>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	e018      	b.n	80028ae <HAL_ADC_ConfigChannel+0x296>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002890:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e004      	b.n	80028ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d106      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	2101      	movs	r1, #1
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fa40 	bl	8001d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2102      	movs	r1, #2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fa24 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x2d4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2102      	movs	r1, #2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fa19 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 80028e2:	4603      	mov	r3, r0
 80028e4:	0e9b      	lsrs	r3, r3, #26
 80028e6:	f003 021f 	and.w	r2, r3, #31
 80028ea:	e01e      	b.n	800292a <HAL_ADC_ConfigChannel+0x312>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2102      	movs	r1, #2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fa0e 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800290a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800291a:	2320      	movs	r3, #32
 800291c:	e004      	b.n	8002928 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800291e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x32a>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	e016      	b.n	8002970 <HAL_ADC_ConfigChannel+0x358>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800295a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f9df 	bl	8001d40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2103      	movs	r1, #3
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f9c3 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x396>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2103      	movs	r1, #3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f9b8 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	e017      	b.n	80029de <HAL_ADC_ConfigChannel+0x3c6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2103      	movs	r1, #3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f9ad 	bl	8001d14 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80029c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80029ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e003      	b.n	80029dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80029d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x3de>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	e011      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x402>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e003      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d106      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2103      	movs	r1, #3
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f98a 	bl	8001d40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff faad 	bl	8001f90 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 813f 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7ff f9fe 	bl	8001e4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a8e      	ldr	r2, [pc, #568]	; (8002c90 <HAL_ADC_ConfigChannel+0x678>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	f040 8130 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x46c>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	bf94      	ite	ls
 8002a7c:	2301      	movls	r3, #1
 8002a7e:	2300      	movhi	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e019      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x4a0>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	bf94      	ite	ls
 8002ab2:	2301      	movls	r3, #1
 8002ab4:	2300      	movhi	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d079      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x4c0>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	069b      	lsls	r3, r3, #26
 8002ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad6:	e015      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x4ec>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	069b      	lsls	r3, r3, #26
 8002b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x50c>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	e017      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x53c>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	ea42 0103 	orr.w	r1, r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x562>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	e018      	b.n	8002bac <HAL_ADC_ConfigChannel+0x594>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e003      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	430b      	orrs	r3, r1
 8002bae:	e080      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x5b4>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	069b      	lsls	r3, r3, #26
 8002bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bca:	e015      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x5e0>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	069b      	lsls	r3, r3, #26
 8002bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x600>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	e017      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x630>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	61fb      	str	r3, [r7, #28]
  return result;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	ea42 0103 	orr.w	r1, r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x65c>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b1e      	subs	r3, #30
 8002c6c:	051b      	lsls	r3, r3, #20
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c72:	e01d      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x698>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	613b      	str	r3, [r7, #16]
  return result;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e005      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x684>
 8002c90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f003 021f 	and.w	r2, r3, #31
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b1e      	subs	r3, #30
 8002caa:	051b      	lsls	r3, r3, #20
 8002cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7ff f89c 	bl	8001df4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d07a      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cc8:	4843      	ldr	r0, [pc, #268]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cca:	f7fe fff1 	bl	8001cb0 <LL_ADC_GetCommonPathInternalCh>
 8002cce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a41      	ldr	r2, [pc, #260]	; (8002ddc <HAL_ADC_ConfigChannel+0x7c4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d12c      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d126      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_ADC_ConfigChannel+0x6e4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d15d      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d04:	4619      	mov	r1, r3
 8002d06:	4834      	ldr	r0, [pc, #208]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d08:	f7fe ffbf 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	4a36      	ldr	r2, [pc, #216]	; (8002dec <HAL_ADC_ConfigChannel+0x7d4>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d26:	e002      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f9      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d34:	e040      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	; (8002df0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d118      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x75a>
 8002d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d112      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_ADC_ConfigChannel+0x748>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d12d      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d68:	4619      	mov	r1, r3
 8002d6a:	481b      	ldr	r0, [pc, #108]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d6c:	f7fe ff8d 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d70:	e024      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d120      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11a      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d115      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480e      	ldr	r0, [pc, #56]	; (8002dd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d9e:	f7fe ff74 	bl	8001c8a <LL_ADC_SetCommonPathInternalCh>
 8002da2:	e00c      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002db6:	e002      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dc6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	37d8      	adds	r7, #216	; 0xd8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	80080000 	.word	0x80080000
 8002dd8:	50040300 	.word	0x50040300
 8002ddc:	c7520000 	.word	0xc7520000
 8002de0:	50040000 	.word	0x50040000
 8002de4:	50040200 	.word	0x50040200
 8002de8:	20000000 	.word	0x20000000
 8002dec:	053e2d63 	.word	0x053e2d63
 8002df0:	cb840000 	.word	0xcb840000
 8002df4:	80000001 	.word	0x80000001

08002df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f8c3 	bl	8001f90 <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d14d      	bne.n	8002eac <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <ADC_Enable+0xc0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f043 0210 	orr.w	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e039      	b.n	8002eae <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff f892 	bl	8001f68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e44:	f7fe ff02 	bl	8001c4c <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4a:	e028      	b.n	8002e9e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff f89d 	bl	8001f90 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f881 	bl	8001f68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e66:	f7fe fef1 	bl	8001c4c <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d914      	bls.n	8002e9e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d00d      	beq.n	8002e9e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f043 0210 	orr.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e007      	b.n	8002eae <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d1cf      	bne.n	8002e4c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	8000003f 	.word	0x8000003f

08002ebc <LL_ADC_IsEnabled>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <LL_ADC_IsEnabled+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_ADC_IsEnabled+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d101      	bne.n	8002efa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b09f      	sub	sp, #124	; 0x7c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e093      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f32:	2300      	movs	r3, #0
 8002f34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d102      	bne.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f40:	4b46      	ldr	r3, [pc, #280]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	e001      	b.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e072      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ffb9 	bl	8002ee2 <LL_ADC_REG_IsConversionOngoing>
 8002f70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ffb3 	bl	8002ee2 <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d154      	bne.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d151      	bne.n	800302c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f88:	4b35      	ldr	r3, [pc, #212]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d02c      	beq.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fa6:	035b      	lsls	r3, r3, #13
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb0:	4829      	ldr	r0, [pc, #164]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fb2:	f7ff ff83 	bl	8002ebc <LL_ADC_IsEnabled>
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4828      	ldr	r0, [pc, #160]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fba:	f7ff ff7f 	bl	8002ebc <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	431c      	orrs	r4, r3
 8002fc2:	4828      	ldr	r0, [pc, #160]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fc4:	f7ff ff7a 	bl	8002ebc <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d137      	bne.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fd8:	f023 030f 	bic.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6811      	ldr	r1, [r2, #0]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fec:	e028      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ffc:	f7ff ff5e 	bl	8002ebc <LL_ADC_IsEnabled>
 8003000:	4604      	mov	r4, r0
 8003002:	4816      	ldr	r0, [pc, #88]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003004:	f7ff ff5a 	bl	8002ebc <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	431c      	orrs	r4, r3
 800300c:	4815      	ldr	r0, [pc, #84]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800300e:	f7ff ff55 	bl	8002ebc <LL_ADC_IsEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	4323      	orrs	r3, r4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d112      	bne.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800301a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003022:	f023 030f 	bic.w	r3, r3, #15
 8003026:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003028:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302a:	e009      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800303e:	e000      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003040:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800304a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800304e:	4618      	mov	r0, r3
 8003050:	377c      	adds	r7, #124	; 0x7c
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop
 8003058:	50040000 	.word	0x50040000
 800305c:	50040100 	.word	0x50040100
 8003060:	50040300 	.word	0x50040300
 8003064:	50040200 	.word	0x50040200

08003068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003084:	4013      	ands	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309a:	4a04      	ldr	r2, [pc, #16]	; (80030ac <__NVIC_SetPriorityGrouping+0x44>)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	60d3      	str	r3, [r2, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <__NVIC_GetPriorityGrouping+0x18>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	f003 0307 	and.w	r3, r3, #7
}
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	db0b      	blt.n	80030f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <__NVIC_EnableIRQ+0x38>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2001      	movs	r0, #1
 80030ee:	fa00 f202 	lsl.w	r2, r0, r2
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0a      	blt.n	8003132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	490c      	ldr	r1, [pc, #48]	; (8003154 <__NVIC_SetPriority+0x4c>)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	0112      	lsls	r2, r2, #4
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	440b      	add	r3, r1
 800312c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003130:	e00a      	b.n	8003148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <__NVIC_SetPriority+0x50>)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	3b04      	subs	r3, #4
 8003140:	0112      	lsls	r2, r2, #4
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	440b      	add	r3, r1
 8003146:	761a      	strb	r2, [r3, #24]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f1c3 0307 	rsb	r3, r3, #7
 8003176:	2b04      	cmp	r3, #4
 8003178:	bf28      	it	cs
 800317a:	2304      	movcs	r3, #4
 800317c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3304      	adds	r3, #4
 8003182:	2b06      	cmp	r3, #6
 8003184:	d902      	bls.n	800318c <NVIC_EncodePriority+0x30>
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3b03      	subs	r3, #3
 800318a:	e000      	b.n	800318e <NVIC_EncodePriority+0x32>
 800318c:	2300      	movs	r3, #0
 800318e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	401a      	ands	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	4313      	orrs	r3, r2
         );
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ff4c 	bl	8003068 <__NVIC_SetPriorityGrouping>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ea:	f7ff ff61 	bl	80030b0 <__NVIC_GetPriorityGrouping>
 80031ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	6978      	ldr	r0, [r7, #20]
 80031f6:	f7ff ffb1 	bl	800315c <NVIC_EncodePriority>
 80031fa:	4602      	mov	r2, r0
 80031fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff80 	bl	8003108 <__NVIC_SetPriority>
}
 8003208:	bf00      	nop
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff54 	bl	80030cc <__NVIC_EnableIRQ>
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323a:	e17f      	b.n	800353c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8171 	beq.w	8003536 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d00b      	beq.n	8003274 <HAL_GPIO_Init+0x48>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d007      	beq.n	8003274 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003268:	2b11      	cmp	r3, #17
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b12      	cmp	r3, #18
 8003272:	d130      	bne.n	80032d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032aa:	2201      	movs	r2, #1
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 0201 	and.w	r2, r3, #1
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d118      	bne.n	8003314 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032e8:	2201      	movs	r2, #1
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f003 0201 	and.w	r2, r3, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x128>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b12      	cmp	r3, #18
 8003352:	d123      	bne.n	800339c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	08da      	lsrs	r2, r3, #3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	220f      	movs	r2, #15
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	08da      	lsrs	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3208      	adds	r2, #8
 8003396:	6939      	ldr	r1, [r7, #16]
 8003398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0203 	and.w	r2, r3, #3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80ac 	beq.w	8003536 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_GPIO_Init+0x330>)
 80033e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e2:	4a5e      	ldr	r2, [pc, #376]	; (800355c <HAL_GPIO_Init+0x330>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6613      	str	r3, [r2, #96]	; 0x60
 80033ea:	4b5c      	ldr	r3, [pc, #368]	; (800355c <HAL_GPIO_Init+0x330>)
 80033ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f6:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_GPIO_Init+0x334>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x242>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4f      	ldr	r2, [pc, #316]	; (8003564 <HAL_GPIO_Init+0x338>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x23e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4e      	ldr	r2, [pc, #312]	; (8003568 <HAL_GPIO_Init+0x33c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x23a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4d      	ldr	r2, [pc, #308]	; (800356c <HAL_GPIO_Init+0x340>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x236>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4c      	ldr	r2, [pc, #304]	; (8003570 <HAL_GPIO_Init+0x344>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x232>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4b      	ldr	r2, [pc, #300]	; (8003574 <HAL_GPIO_Init+0x348>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x22e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4a      	ldr	r2, [pc, #296]	; (8003578 <HAL_GPIO_Init+0x34c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x22a>
 8003452:	2306      	movs	r3, #6
 8003454:	e00c      	b.n	8003470 <HAL_GPIO_Init+0x244>
 8003456:	2307      	movs	r3, #7
 8003458:	e00a      	b.n	8003470 <HAL_GPIO_Init+0x244>
 800345a:	2305      	movs	r3, #5
 800345c:	e008      	b.n	8003470 <HAL_GPIO_Init+0x244>
 800345e:	2304      	movs	r3, #4
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x244>
 8003462:	2303      	movs	r3, #3
 8003464:	e004      	b.n	8003470 <HAL_GPIO_Init+0x244>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_Init+0x244>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_Init+0x244>
 800346e:	2300      	movs	r3, #0
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	f002 0203 	and.w	r2, r2, #3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4093      	lsls	r3, r2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003480:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_GPIO_Init+0x334>)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_GPIO_Init+0x350>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034b2:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_GPIO_Init+0x350>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034b8:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_GPIO_Init+0x350>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_GPIO_Init+0x350>)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_GPIO_Init+0x350>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4013      	ands	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_GPIO_Init+0x350>)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_GPIO_Init+0x350>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003530:	4a12      	ldr	r2, [pc, #72]	; (800357c <HAL_GPIO_Init+0x350>)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3301      	adds	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	f47f ae78 	bne.w	800323c <HAL_GPIO_Init+0x10>
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800
 800356c:	48000c00 	.word	0x48000c00
 8003570:	48001000 	.word	0x48001000
 8003574:	48001400 	.word	0x48001400
 8003578:	48001800 	.word	0x48001800
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_PWREx_GetVoltageRange+0x18>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035aa:	d130      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ac:	4b23      	ldr	r3, [pc, #140]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d038      	beq.n	800362c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2232      	movs	r2, #50	; 0x32
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0c9b      	lsrs	r3, r3, #18
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e0:	e002      	b.n	80035e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d102      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f2      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d110      	bne.n	800362c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e00f      	b.n	800362e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d007      	beq.n	800362c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003624:	4a05      	ldr	r2, [pc, #20]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800362a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40007000 	.word	0x40007000
 8003640:	20000000 	.word	0x20000000
 8003644:	431bde83 	.word	0x431bde83

08003648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e3d4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4ba1      	ldr	r3, [pc, #644]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003664:	4b9e      	ldr	r3, [pc, #632]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80e4 	beq.w	8003844 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_RCC_OscConfig+0x4a>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	f040 808b 	bne.w	80037a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b01      	cmp	r3, #1
 800368e:	f040 8087 	bne.w	80037a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003692:	4b93      	ldr	r3, [pc, #588]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e3ac      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_RCC_OscConfig+0x7c>
 80036ba:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_OscConfig+0x88>
 80036c4:	4b86      	ldr	r3, [pc, #536]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d223      	bcs.n	800371c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fd73 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e38d      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e8:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7c      	ldr	r2, [pc, #496]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036ee:	f043 0308 	orr.w	r3, r3, #8
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	4b7a      	ldr	r3, [pc, #488]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4977      	ldr	r1, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003706:	4b76      	ldr	r3, [pc, #472]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	4972      	ldr	r1, [pc, #456]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
 800371a:	e025      	b.n	8003768 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800371c:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6f      	ldr	r2, [pc, #444]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003722:	f043 0308 	orr.w	r3, r3, #8
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b6d      	ldr	r3, [pc, #436]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	496a      	ldr	r1, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	4965      	ldr	r1, [pc, #404]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fd33 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e34d      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003768:	f000 fc36 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	495a      	ldr	r1, [pc, #360]	; (80038e4 <HAL_RCC_OscConfig+0x29c>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_RCC_OscConfig+0x2a0>)
 8003786:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003788:	4b58      	ldr	r3, [pc, #352]	; (80038ec <HAL_RCC_OscConfig+0x2a4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe f8b3 	bl	80018f8 <HAL_InitTick>
 8003792:	4603      	mov	r3, r0
 8003794:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d052      	beq.n	8003842 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	e331      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d032      	beq.n	800380e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037a8:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a4c      	ldr	r2, [pc, #304]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037b4:	f7fe fa4a 	bl	8001c4c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037bc:	f7fe fa46 	bl	8001c4c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e31a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ce:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	493b      	ldr	r1, [pc, #236]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	4936      	ldr	r1, [pc, #216]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
 800380c:	e01a      	b.n	8003844 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800380e:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800381a:	f7fe fa17 	bl	8001c4c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003822:	f7fe fa13 	bl	8001c4c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e2e7      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x1da>
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d074      	beq.n	800393a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d005      	beq.n	8003862 <HAL_RCC_OscConfig+0x21a>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	d10e      	bne.n	800387a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003862:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d064      	beq.n	8003938 <HAL_RCC_OscConfig+0x2f0>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d160      	bne.n	8003938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e2c4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x24a>
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a15      	ldr	r2, [pc, #84]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800388a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	e01d      	b.n	80038ce <HAL_RCC_OscConfig+0x286>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x26e>
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0c      	ldr	r2, [pc, #48]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x286>
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <HAL_RCC_OscConfig+0x298>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01c      	beq.n	8003910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe f9b9 	bl	8001c4c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038dc:	e011      	b.n	8003902 <HAL_RCC_OscConfig+0x2ba>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	0800a2ec 	.word	0x0800a2ec
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe f9ac 	bl	8001c4c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e280      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003902:	4baf      	ldr	r3, [pc, #700]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2a8>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe f99c 	bl	8001c4c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe f998 	bl	8001c4c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e26c      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800392a:	4ba5      	ldr	r3, [pc, #660]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0x2d0>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d060      	beq.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b04      	cmp	r3, #4
 800394a:	d005      	beq.n	8003958 <HAL_RCC_OscConfig+0x310>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d119      	bne.n	8003986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d116      	bne.n	8003986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003958:	4b99      	ldr	r3, [pc, #612]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_OscConfig+0x328>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e249      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b93      	ldr	r3, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	4990      	ldr	r1, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003984:	e040      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d023      	beq.n	80039d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800398e:	4b8c      	ldr	r3, [pc, #560]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a8b      	ldr	r2, [pc, #556]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe f957 	bl	8001c4c <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fe f953 	bl	8001c4c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e227      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b4:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	497c      	ldr	r1, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	e018      	b.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d6:	4b7a      	ldr	r3, [pc, #488]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a79      	ldr	r2, [pc, #484]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fe f933 	bl	8001c4c <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ea:	f7fe f92f 	bl	8001c4c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e203      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039fc:	4b70      	ldr	r3, [pc, #448]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d03c      	beq.n	8003a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01c      	beq.n	8003a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1c:	4b68      	ldr	r3, [pc, #416]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a22:	4a67      	ldr	r2, [pc, #412]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f90e 	bl	8001c4c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe f90a 	bl	8001c4c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1de      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a46:	4b5e      	ldr	r3, [pc, #376]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <HAL_RCC_OscConfig+0x3ec>
 8003a54:	e01b      	b.n	8003a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a56:	4b5a      	ldr	r3, [pc, #360]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fe f8f1 	bl	8001c4c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fe f8ed 	bl	8001c4c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1c1      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a80:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ef      	bne.n	8003a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80a6 	beq.w	8003be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003aa0:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aac:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac8:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d118      	bne.n	8003b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe f8b4 	bl	8001c4c <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fe f8b0 	bl	8001c4c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e184      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <HAL_RCC_OscConfig+0x57c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0f0      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d108      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4d8>
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b1e:	e024      	b.n	8003b6a <HAL_RCC_OscConfig+0x522>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d110      	bne.n	8003b4a <HAL_RCC_OscConfig+0x502>
 8003b28:	4b25      	ldr	r3, [pc, #148]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b30:	f043 0304 	orr.w	r3, r3, #4
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b48:	e00f      	b.n	8003b6a <HAL_RCC_OscConfig+0x522>
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	4a1b      	ldr	r2, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe f86b 	bl	8001c4c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b78:	e00a      	b.n	8003b90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe f867 	bl	8001c4c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e139      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x578>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ed      	beq.n	8003b7a <HAL_RCC_OscConfig+0x532>
 8003b9e:	e01a      	b.n	8003bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe f854 	bl	8001c4c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe f850 	bl	8001c4c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d906      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e122      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bc8:	4b90      	ldr	r3, [pc, #576]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e8      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd6:	7ffb      	ldrb	r3, [r7, #31]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bdc:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4a8a      	ldr	r2, [pc, #552]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8108 	beq.w	8003e02 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	f040 80d0 	bne.w	8003d9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bfc:	4b83      	ldr	r3, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 0203 	and.w	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d130      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d127      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11f      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3c:	2a07      	cmp	r2, #7
 8003c3e:	bf14      	ite	ne
 8003c40:	2201      	movne	r2, #1
 8003c42:	2200      	moveq	r2, #0
 8003c44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d113      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	3b01      	subs	r3, #1
 8003c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d06e      	beq.n	8003d50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d069      	beq.n	8003d4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c78:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0b7      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c94:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5c      	ldr	r2, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca0:	f7fd ffd4 	bl	8001c4c <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd ffd0 	bl	8001c4c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0a4      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc6:	4b51      	ldr	r3, [pc, #324]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_RCC_OscConfig+0x7c8>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cd6:	3a01      	subs	r2, #1
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce0:	0212      	lsls	r2, r2, #8
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0552      	lsls	r2, r2, #21
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0652      	lsls	r2, r2, #25
 8003cfa:	4311      	orrs	r1, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d00:	0912      	lsrs	r2, r2, #4
 8003d02:	0452      	lsls	r2, r2, #17
 8003d04:	430a      	orrs	r2, r1
 8003d06:	4941      	ldr	r1, [pc, #260]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3e      	ldr	r2, [pc, #248]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d18:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a3b      	ldr	r2, [pc, #236]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d24:	f7fd ff92 	bl	8001c4c <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fd ff8e 	bl	8001c4c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e062      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4a:	e05a      	b.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e059      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d50:	4b2e      	ldr	r3, [pc, #184]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d152      	bne.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d68:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a27      	ldr	r2, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d74:	f7fd ff6a 	bl	8001c4c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7c:	f7fd ff66 	bl	8001c4c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e03a      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x734>
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d02d      	beq.n	8003dfe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003dae:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003dba:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4a13      	ldr	r2, [pc, #76]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dc0:	f023 0303 	bic.w	r3, r3, #3
 8003dc4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003dcc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd ff39 	bl	8001c4c <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fd ff35 	bl	8001c4c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e009      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_OscConfig+0x7c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x796>
 8003dfc:	e001      	b.n	8003e02 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3720      	adds	r7, #32
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	f99d808c 	.word	0xf99d808c

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0c8      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	4961      	ldr	r1, [pc, #388]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b0      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d04c      	beq.n	8003efe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d121      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e09e      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e84:	4b50      	ldr	r3, [pc, #320]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e092      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e9c:	4b4a      	ldr	r3, [pc, #296]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e086      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eac:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e07e      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 0203 	bic.w	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	493f      	ldr	r1, [pc, #252]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ece:	f7fd febd 	bl	8001c4c <HAL_GetTick>
 8003ed2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed6:	f7fd feb9 	bl	8001c4c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e066      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eec:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 020c 	and.w	r2, r3, #12
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d1eb      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d008      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	492c      	ldr	r1, [pc, #176]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d210      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f023 0207 	bic.w	r2, r3, #7
 8003f32:	4924      	ldr	r1, [pc, #144]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e036      	b.n	8003fba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b1b      	ldr	r3, [pc, #108]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4918      	ldr	r1, [pc, #96]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8a:	f000 f825 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490c      	ldr	r1, [pc, #48]	; (8003fcc <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd fca2 	bl	80018f8 <HAL_InitTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40022000 	.word	0x40022000
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	0800a2ec 	.word	0x0800a2ec
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000004 	.word	0x20000004

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b089      	sub	sp, #36	; 0x24
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe6:	4b3e      	ldr	r3, [pc, #248]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d121      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d11e      	bne.n	800404a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800400c:	4b34      	ldr	r3, [pc, #208]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004018:	4b31      	ldr	r3, [pc, #196]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e005      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004028:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d102      	bne.n	8004056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e004      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d101      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0c      	cmp	r3, #12
 8004064:	d134      	bne.n	80040d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d003      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0xa6>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d003      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0xac>
 800407c:	e005      	b.n	800408a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004080:	617b      	str	r3, [r7, #20]
      break;
 8004082:	e005      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004086:	617b      	str	r3, [r7, #20]
      break;
 8004088:	e002      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	617b      	str	r3, [r7, #20]
      break;
 800408e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800409e:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	fb02 f203 	mul.w	r2, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	0e5b      	lsrs	r3, r3, #25
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	3301      	adds	r3, #1
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040d0:	69bb      	ldr	r3, [r7, #24]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3724      	adds	r7, #36	; 0x24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	0800a304 	.word	0x0800a304
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	007a1200 	.word	0x007a1200

080040f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f6:	681b      	ldr	r3, [r3, #0]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800410c:	f7ff fff0 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	0800a2fc 	.word	0x0800a2fc

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004138:	f7ff ffda 	bl	80040f0 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0adb      	lsrs	r3, r3, #11
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	0800a2fc 	.word	0x0800a2fc

08004160 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	220f      	movs	r2, #15
 800416e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0203 	and.w	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800417c:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_GetClockConfig+0x5c>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_RCC_GetClockConfig+0x60>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0207 	and.w	r2, r3, #7
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	601a      	str	r2, [r3, #0]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40022000 	.word	0x40022000

080041c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041d0:	4b2a      	ldr	r3, [pc, #168]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041dc:	f7ff f9d0 	bl	8003580 <HAL_PWREx_GetVoltageRange>
 80041e0:	6178      	str	r0, [r7, #20]
 80041e2:	e014      	b.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6593      	str	r3, [r2, #88]	; 0x58
 80041f0:	4b22      	ldr	r3, [pc, #136]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041fc:	f7ff f9c0 	bl	8003580 <HAL_PWREx_GetVoltageRange>
 8004200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	4a1d      	ldr	r2, [pc, #116]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	d10b      	bne.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d919      	bls.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2ba0      	cmp	r3, #160	; 0xa0
 8004220:	d902      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004222:	2302      	movs	r3, #2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e013      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e010      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d902      	bls.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004234:	2303      	movs	r3, #3
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e00a      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d102      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004240:	2302      	movs	r3, #2
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e004      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b70      	cmp	r3, #112	; 0x70
 800424a:	d101      	bne.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800424c:	2301      	movs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 0207 	bic.w	r2, r3, #7
 8004258:	4909      	ldr	r1, [pc, #36]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40022000 	.word	0x40022000

08004284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800428c:	2300      	movs	r3, #0
 800428e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004290:	2300      	movs	r3, #0
 8004292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	2b00      	cmp	r3, #0
 800429e:	d041      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a8:	d02a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ae:	d824      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ba:	d81e      	bhi.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c4:	d010      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042c6:	e018      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042c8:	4b86      	ldr	r3, [pc, #536]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a85      	ldr	r2, [pc, #532]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042d4:	e015      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fabb 	bl	8004858 <RCCEx_PLLSAI1_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042e6:	e00c      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3320      	adds	r3, #32
 80042ec:	2100      	movs	r1, #0
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fba6 	bl	8004a40 <RCCEx_PLLSAI2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	74fb      	strb	r3, [r7, #19]
      break;
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004308:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004316:	4973      	ldr	r1, [pc, #460]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800431e:	e001      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d041      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004338:	d02a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800433a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800433e:	d824      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004344:	d008      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434a:	d81e      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004354:	d010      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004356:	e018      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004358:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a61      	ldr	r2, [pc, #388]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004364:	e015      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fa73 	bl	8004858 <RCCEx_PLLSAI1_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004376:	e00c      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3320      	adds	r3, #32
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb5e 	bl	8004a40 <RCCEx_PLLSAI2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	74fb      	strb	r3, [r7, #19]
      break;
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004398:	4b52      	ldr	r3, [pc, #328]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a6:	494f      	ldr	r1, [pc, #316]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ae:	e001      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a0 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043d6:	2300      	movs	r3, #0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043dc:	4b41      	ldr	r3, [pc, #260]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e0:	4a40      	ldr	r2, [pc, #256]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e6:	6593      	str	r3, [r2, #88]	; 0x58
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f4:	2301      	movs	r3, #1
 80043f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043f8:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3a      	ldr	r2, [pc, #232]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004404:	f7fd fc22 	bl	8001c4c <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800440a:	e009      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fd fc1e 	bl	8001c4c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d902      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	74fb      	strb	r3, [r7, #19]
        break;
 800441e:	e005      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004420:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ef      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d15c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004432:	4b2c      	ldr	r3, [pc, #176]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01f      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	429a      	cmp	r2, r3
 800444e:	d019      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004462:	4a20      	ldr	r2, [pc, #128]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800447c:	4a19      	ldr	r2, [pc, #100]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd fbdd 	bl	8001c4c <HAL_GetTick>
 8004492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004494:	e00b      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fd fbd9 	bl	8001c4c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d902      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	74fb      	strb	r3, [r7, #19]
            break;
 80044ac:	e006      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ec      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d2:	4904      	ldr	r1, [pc, #16]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044da:	e009      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
 80044e0:	e006      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044f0:	7c7b      	ldrb	r3, [r7, #17]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d105      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f6:	4b9e      	ldr	r3, [pc, #632]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	4a9d      	ldr	r2, [pc, #628]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800450e:	4b98      	ldr	r3, [pc, #608]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 0203 	bic.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	4994      	ldr	r1, [pc, #592]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004530:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 020c 	bic.w	r2, r3, #12
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	498c      	ldr	r1, [pc, #560]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004552:	4b87      	ldr	r3, [pc, #540]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4983      	ldr	r1, [pc, #524]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004574:	4b7e      	ldr	r3, [pc, #504]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	497b      	ldr	r1, [pc, #492]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	4972      	ldr	r1, [pc, #456]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b8:	4b6d      	ldr	r3, [pc, #436]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	496a      	ldr	r1, [pc, #424]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045da:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	4961      	ldr	r1, [pc, #388]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045fc:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460a:	4959      	ldr	r1, [pc, #356]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800461e:	4b54      	ldr	r3, [pc, #336]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	4950      	ldr	r1, [pc, #320]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004640:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	4948      	ldr	r1, [pc, #288]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004662:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	493f      	ldr	r1, [pc, #252]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d028      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004684:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800469e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046a2:	d106      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4a31      	ldr	r2, [pc, #196]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ae:	60d3      	str	r3, [r2, #12]
 80046b0:	e011      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
 80046c0:	2101      	movs	r1, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f8c8 	bl	8004858 <RCCEx_PLLSAI1_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046cc:	7cfb      	ldrb	r3, [r7, #19]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046d2:	7cfb      	ldrb	r3, [r7, #19]
 80046d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d028      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	491f      	ldr	r1, [pc, #124]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004700:	d106      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004702:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470c:	60d3      	str	r3, [r2, #12]
 800470e:	e011      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004718:	d10c      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f899 	bl	8004858 <RCCEx_PLLSAI1_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	4908      	ldr	r1, [pc, #32]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800475e:	d109      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a02      	ldr	r2, [pc, #8]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800476a:	60d3      	str	r3, [r2, #12]
 800476c:	e014      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800477c:	d10c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3304      	adds	r3, #4
 8004782:	2101      	movs	r1, #1
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f867 	bl	8004858 <RCCEx_PLLSAI1_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a4:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	4928      	ldr	r1, [pc, #160]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2102      	movs	r1, #2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f844 	bl	8004858 <RCCEx_PLLSAI1_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d014      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	74bb      	strb	r3, [r7, #18]
 80047de:	e011      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3320      	adds	r3, #32
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f925 	bl	8004a40 <RCCEx_PLLSAI2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004810:	4b10      	ldr	r3, [pc, #64]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004842:	4904      	ldr	r1, [pc, #16]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800484a:	7cbb      	ldrb	r3, [r7, #18]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000

08004858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004866:	4b75      	ldr	r3, [pc, #468]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d018      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004872:	4b72      	ldr	r3, [pc, #456]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0203 	and.w	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d10d      	bne.n	800489e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
       ||
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800488a:	4b6c      	ldr	r3, [pc, #432]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
       ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d047      	beq.n	800492e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	e044      	b.n	800492e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d018      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x86>
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d825      	bhi.n	80048fc <RCCEx_PLLSAI1_Config+0xa4>
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d002      	beq.n	80048ba <RCCEx_PLLSAI1_Config+0x62>
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d009      	beq.n	80048cc <RCCEx_PLLSAI1_Config+0x74>
 80048b8:	e020      	b.n	80048fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048ba:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d11d      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ca:	e01a      	b.n	8004902 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048cc:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048dc:	e013      	b.n	8004906 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048de:	4b57      	ldr	r3, [pc, #348]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ea:	4b54      	ldr	r3, [pc, #336]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048fa:	e006      	b.n	800490a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004900:	e004      	b.n	800490c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004902:	bf00      	nop
 8004904:	e002      	b.n	800490c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004906:	bf00      	nop
 8004908:	e000      	b.n	800490c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800490a:	bf00      	nop
    }

    if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004912:	4b4a      	ldr	r3, [pc, #296]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6819      	ldr	r1, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	3b01      	subs	r3, #1
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	430b      	orrs	r3, r1
 8004928:	4944      	ldr	r1, [pc, #272]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d17d      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a40      	ldr	r2, [pc, #256]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800493e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004940:	f7fd f984 	bl	8001c4c <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004946:	e009      	b.n	800495c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004948:	f7fd f980 	bl	8001c4c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d902      	bls.n	800495c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	73fb      	strb	r3, [r7, #15]
        break;
 800495a:	e005      	b.n	8004968 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800495c:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ef      	bne.n	8004948 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d160      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d111      	bne.n	8004998 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004974:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800497c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	0211      	lsls	r1, r2, #8
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68d2      	ldr	r2, [r2, #12]
 800498a:	0912      	lsrs	r2, r2, #4
 800498c:	0452      	lsls	r2, r2, #17
 800498e:	430a      	orrs	r2, r1
 8004990:	492a      	ldr	r1, [pc, #168]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
 8004996:	e027      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d112      	bne.n	80049c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800499e:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	0211      	lsls	r1, r2, #8
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6912      	ldr	r2, [r2, #16]
 80049b4:	0852      	lsrs	r2, r2, #1
 80049b6:	3a01      	subs	r2, #1
 80049b8:	0552      	lsls	r2, r2, #21
 80049ba:	430a      	orrs	r2, r1
 80049bc:	491f      	ldr	r1, [pc, #124]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	610b      	str	r3, [r1, #16]
 80049c2:	e011      	b.n	80049e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6892      	ldr	r2, [r2, #8]
 80049d4:	0211      	lsls	r1, r2, #8
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6952      	ldr	r2, [r2, #20]
 80049da:	0852      	lsrs	r2, r2, #1
 80049dc:	3a01      	subs	r2, #1
 80049de:	0652      	lsls	r2, r2, #25
 80049e0:	430a      	orrs	r2, r1
 80049e2:	4916      	ldr	r1, [pc, #88]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049e8:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fd f92a 	bl	8001c4c <HAL_GetTick>
 80049f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049fa:	e009      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049fc:	f7fd f926 	bl	8001c4c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d902      	bls.n	8004a10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a0e:	e005      	b.n	8004a1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ef      	beq.n	80049fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	4904      	ldr	r1, [pc, #16]	; (8004a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40021000 	.word	0x40021000

08004a40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d018      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a5a:	4b67      	ldr	r3, [pc, #412]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f003 0203 	and.w	r2, r3, #3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d10d      	bne.n	8004a86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a72:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	091b      	lsrs	r3, r3, #4
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
       ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d047      	beq.n	8004b16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	e044      	b.n	8004b16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d018      	beq.n	8004ac6 <RCCEx_PLLSAI2_Config+0x86>
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d825      	bhi.n	8004ae4 <RCCEx_PLLSAI2_Config+0xa4>
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d002      	beq.n	8004aa2 <RCCEx_PLLSAI2_Config+0x62>
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d009      	beq.n	8004ab4 <RCCEx_PLLSAI2_Config+0x74>
 8004aa0:	e020      	b.n	8004ae4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004aa2:	4b55      	ldr	r3, [pc, #340]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11d      	bne.n	8004aea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab2:	e01a      	b.n	8004aea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d116      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e013      	b.n	8004aee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ac6:	4b4c      	ldr	r3, [pc, #304]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ad2:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ae2:	e006      	b.n	8004af2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e004      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004afa:	4b3f      	ldr	r3, [pc, #252]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	4939      	ldr	r1, [pc, #228]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d167      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b1c:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a35      	ldr	r2, [pc, #212]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd f890 	bl	8001c4c <HAL_GetTick>
 8004b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b2e:	e009      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b30:	f7fd f88c 	bl	8001c4c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d902      	bls.n	8004b44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	73fb      	strb	r3, [r7, #15]
        break;
 8004b42:	e005      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b44:	4b2c      	ldr	r3, [pc, #176]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ef      	bne.n	8004b30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d14a      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b5c:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6892      	ldr	r2, [r2, #8]
 8004b6c:	0211      	lsls	r1, r2, #8
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68d2      	ldr	r2, [r2, #12]
 8004b72:	0912      	lsrs	r2, r2, #4
 8004b74:	0452      	lsls	r2, r2, #17
 8004b76:	430a      	orrs	r2, r1
 8004b78:	491f      	ldr	r1, [pc, #124]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	614b      	str	r3, [r1, #20]
 8004b7e:	e011      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b80:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6892      	ldr	r2, [r2, #8]
 8004b90:	0211      	lsls	r1, r2, #8
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6912      	ldr	r2, [r2, #16]
 8004b96:	0852      	lsrs	r2, r2, #1
 8004b98:	3a01      	subs	r2, #1
 8004b9a:	0652      	lsls	r2, r2, #25
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd f84c 	bl	8001c4c <HAL_GetTick>
 8004bb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bb6:	e009      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bb8:	f7fd f848 	bl	8001c4c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d902      	bls.n	8004bcc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bca:	e005      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000

08004bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e049      	b.n	8004ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f841 	bl	8004caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f000 fc66 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04f      	b.n	8004d78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <HAL_TIM_Base_Start_IT+0x76>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d018      	beq.n	8004d36 <HAL_TIM_Base_Start_IT+0x76>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1f      	ldr	r2, [pc, #124]	; (8004d88 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <HAL_TIM_Base_Start_IT+0x76>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <HAL_TIM_Base_Start_IT+0xcc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIM_Base_Start_IT+0x76>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a1c      	ldr	r2, [pc, #112]	; (8004d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_TIM_Base_Start_IT+0x76>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1b      	ldr	r2, [pc, #108]	; (8004d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIM_Base_Start_IT+0x76>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d115      	bne.n	8004d62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b06      	cmp	r3, #6
 8004d46:	d015      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0xb4>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d011      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	e008      	b.n	8004d74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e000      	b.n	8004d76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40013400 	.word	0x40013400
 8004d98:	40014000 	.word	0x40014000
 8004d9c:	00010007 	.word	0x00010007

08004da0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e049      	b.n	8004e46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc fc8e 	bl	80016e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f000 fb94 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d109      	bne.n	8004e74 <HAL_TIM_PWM_Start+0x24>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	bf14      	ite	ne
 8004e6c:	2301      	movne	r3, #1
 8004e6e:	2300      	moveq	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	e03c      	b.n	8004eee <HAL_TIM_PWM_Start+0x9e>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d109      	bne.n	8004e8e <HAL_TIM_PWM_Start+0x3e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	bf14      	ite	ne
 8004e86:	2301      	movne	r3, #1
 8004e88:	2300      	moveq	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	e02f      	b.n	8004eee <HAL_TIM_PWM_Start+0x9e>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d109      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0x58>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	bf14      	ite	ne
 8004ea0:	2301      	movne	r3, #1
 8004ea2:	2300      	moveq	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e022      	b.n	8004eee <HAL_TIM_PWM_Start+0x9e>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d109      	bne.n	8004ec2 <HAL_TIM_PWM_Start+0x72>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	bf14      	ite	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	2300      	moveq	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	e015      	b.n	8004eee <HAL_TIM_PWM_Start+0x9e>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b10      	cmp	r3, #16
 8004ec6:	d109      	bne.n	8004edc <HAL_TIM_PWM_Start+0x8c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e008      	b.n	8004eee <HAL_TIM_PWM_Start+0x9e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e09c      	b.n	8005030 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_PWM_Start+0xb6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f04:	e023      	b.n	8004f4e <HAL_TIM_PWM_Start+0xfe>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0xc6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f14:	e01b      	b.n	8004f4e <HAL_TIM_PWM_Start+0xfe>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xd6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	e013      	b.n	8004f4e <HAL_TIM_PWM_Start+0xfe>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b0c      	cmp	r3, #12
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0xe6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f34:	e00b      	b.n	8004f4e <HAL_TIM_PWM_Start+0xfe>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_PWM_Start+0xf6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f44:	e003      	b.n	8004f4e <HAL_TIM_PWM_Start+0xfe>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fe48 	bl	8005bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a35      	ldr	r2, [pc, #212]	; (8005038 <HAL_TIM_PWM_Start+0x1e8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x13e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a34      	ldr	r2, [pc, #208]	; (800503c <HAL_TIM_PWM_Start+0x1ec>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x13e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a32      	ldr	r2, [pc, #200]	; (8005040 <HAL_TIM_PWM_Start+0x1f0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x13e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a31      	ldr	r2, [pc, #196]	; (8005044 <HAL_TIM_PWM_Start+0x1f4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x13e>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <HAL_TIM_PWM_Start+0x1f8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x142>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_TIM_PWM_Start+0x144>
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_TIM_PWM_Start+0x1e8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <HAL_TIM_PWM_Start+0x19e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d018      	beq.n	8004fee <HAL_TIM_PWM_Start+0x19e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a22      	ldr	r2, [pc, #136]	; (800504c <HAL_TIM_PWM_Start+0x1fc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_TIM_PWM_Start+0x19e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a21      	ldr	r2, [pc, #132]	; (8005050 <HAL_TIM_PWM_Start+0x200>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_TIM_PWM_Start+0x19e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_TIM_PWM_Start+0x204>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_TIM_PWM_Start+0x19e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <HAL_TIM_PWM_Start+0x1ec>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_TIM_PWM_Start+0x19e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a15      	ldr	r2, [pc, #84]	; (8005040 <HAL_TIM_PWM_Start+0x1f0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d115      	bne.n	800501a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_TIM_PWM_Start+0x208>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b06      	cmp	r3, #6
 8004ffe:	d015      	beq.n	800502c <HAL_TIM_PWM_Start+0x1dc>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d011      	beq.n	800502c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005018:	e008      	b.n	800502c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e000      	b.n	800502e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40013400 	.word	0x40013400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	00010007 	.word	0x00010007

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa16 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa08 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa19 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9ec 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9de 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9ef 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9c2 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9b4 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9c5 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f998 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f98a 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f99b 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fa06 	bl	80015ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fe26 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d10e      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d107      	bne.n	800523a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fe19 	bl	8005e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d10e      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d107      	bne.n	8005266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f949 	bl	80054f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d10e      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b20      	cmp	r3, #32
 8005280:	d107      	bne.n	8005292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0220 	mvn.w	r2, #32
 800528a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fdd9 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e0fd      	b.n	80054b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b14      	cmp	r3, #20
 80052c2:	f200 80f0 	bhi.w	80054a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	08005321 	.word	0x08005321
 80052d0:	080054a7 	.word	0x080054a7
 80052d4:	080054a7 	.word	0x080054a7
 80052d8:	080054a7 	.word	0x080054a7
 80052dc:	08005361 	.word	0x08005361
 80052e0:	080054a7 	.word	0x080054a7
 80052e4:	080054a7 	.word	0x080054a7
 80052e8:	080054a7 	.word	0x080054a7
 80052ec:	080053a3 	.word	0x080053a3
 80052f0:	080054a7 	.word	0x080054a7
 80052f4:	080054a7 	.word	0x080054a7
 80052f8:	080054a7 	.word	0x080054a7
 80052fc:	080053e3 	.word	0x080053e3
 8005300:	080054a7 	.word	0x080054a7
 8005304:	080054a7 	.word	0x080054a7
 8005308:	080054a7 	.word	0x080054a7
 800530c:	08005425 	.word	0x08005425
 8005310:	080054a7 	.word	0x080054a7
 8005314:	080054a7 	.word	0x080054a7
 8005318:	080054a7 	.word	0x080054a7
 800531c:	08005465 	.word	0x08005465
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f98a 	bl	8005640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0208 	orr.w	r2, r2, #8
 800533a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6999      	ldr	r1, [r3, #24]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	619a      	str	r2, [r3, #24]
      break;
 800535e:	e0a3      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f9fa 	bl	8005760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6999      	ldr	r1, [r3, #24]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	021a      	lsls	r2, r3, #8
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	619a      	str	r2, [r3, #24]
      break;
 80053a0:	e082      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fa63 	bl	8005874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0208 	orr.w	r2, r2, #8
 80053bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0204 	bic.w	r2, r2, #4
 80053cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69d9      	ldr	r1, [r3, #28]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	61da      	str	r2, [r3, #28]
      break;
 80053e0:	e062      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 facb 	bl	8005984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69d9      	ldr	r1, [r3, #28]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	021a      	lsls	r2, r3, #8
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	61da      	str	r2, [r3, #28]
      break;
 8005422:	e041      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fb14 	bl	8005a58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0208 	orr.w	r2, r2, #8
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0204 	bic.w	r2, r2, #4
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005462:	e021      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fb58 	bl	8005b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054a4:	e000      	b.n	80054a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80054a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop

080054bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a40      	ldr	r2, [pc, #256]	; (8005620 <TIM_Base_SetConfig+0x114>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <TIM_Base_SetConfig+0x118>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <TIM_Base_SetConfig+0x11c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3b      	ldr	r2, [pc, #236]	; (800562c <TIM_Base_SetConfig+0x120>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3a      	ldr	r2, [pc, #232]	; (8005630 <TIM_Base_SetConfig+0x124>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <TIM_Base_SetConfig+0x114>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d01b      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <TIM_Base_SetConfig+0x118>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d017      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <TIM_Base_SetConfig+0x11c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2a      	ldr	r2, [pc, #168]	; (800562c <TIM_Base_SetConfig+0x120>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a29      	ldr	r2, [pc, #164]	; (8005630 <TIM_Base_SetConfig+0x124>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <TIM_Base_SetConfig+0x128>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a26      	ldr	r2, [pc, #152]	; (800563c <TIM_Base_SetConfig+0x130>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <TIM_Base_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a12      	ldr	r2, [pc, #72]	; (8005630 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a11      	ldr	r2, [pc, #68]	; (8005634 <TIM_Base_SetConfig+0x128>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a10      	ldr	r2, [pc, #64]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0f      	ldr	r2, [pc, #60]	; (800563c <TIM_Base_SetConfig+0x130>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800

08005640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0201 	bic.w	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 0302 	bic.w	r3, r3, #2
 800568c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2c      	ldr	r2, [pc, #176]	; (800574c <TIM_OC1_SetConfig+0x10c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_OC1_SetConfig+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2b      	ldr	r2, [pc, #172]	; (8005750 <TIM_OC1_SetConfig+0x110>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_OC1_SetConfig+0x80>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <TIM_OC1_SetConfig+0x114>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_OC1_SetConfig+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a29      	ldr	r2, [pc, #164]	; (8005758 <TIM_OC1_SetConfig+0x118>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC1_SetConfig+0x80>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a28      	ldr	r2, [pc, #160]	; (800575c <TIM_OC1_SetConfig+0x11c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10c      	bne.n	80056da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0308 	bic.w	r3, r3, #8
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1b      	ldr	r2, [pc, #108]	; (800574c <TIM_OC1_SetConfig+0x10c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00f      	beq.n	8005702 <TIM_OC1_SetConfig+0xc2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1a      	ldr	r2, [pc, #104]	; (8005750 <TIM_OC1_SetConfig+0x110>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00b      	beq.n	8005702 <TIM_OC1_SetConfig+0xc2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a19      	ldr	r2, [pc, #100]	; (8005754 <TIM_OC1_SetConfig+0x114>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <TIM_OC1_SetConfig+0xc2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <TIM_OC1_SetConfig+0x118>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d003      	beq.n	8005702 <TIM_OC1_SetConfig+0xc2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC1_SetConfig+0x11c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d111      	bne.n	8005726 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0210 	bic.w	r2, r3, #16
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0320 	bic.w	r3, r3, #32
 80057ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a28      	ldr	r2, [pc, #160]	; (8005860 <TIM_OC2_SetConfig+0x100>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_OC2_SetConfig+0x6c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a27      	ldr	r2, [pc, #156]	; (8005864 <TIM_OC2_SetConfig+0x104>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10d      	bne.n	80057e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <TIM_OC2_SetConfig+0x100>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00f      	beq.n	8005810 <TIM_OC2_SetConfig+0xb0>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <TIM_OC2_SetConfig+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00b      	beq.n	8005810 <TIM_OC2_SetConfig+0xb0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <TIM_OC2_SetConfig+0x108>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <TIM_OC2_SetConfig+0xb0>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a1a      	ldr	r2, [pc, #104]	; (800586c <TIM_OC2_SetConfig+0x10c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d003      	beq.n	8005810 <TIM_OC2_SetConfig+0xb0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a19      	ldr	r2, [pc, #100]	; (8005870 <TIM_OC2_SetConfig+0x110>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d113      	bne.n	8005838 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40013400 	.word	0x40013400
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0303 	bic.w	r3, r3, #3
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <TIM_OC3_SetConfig+0xfc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d003      	beq.n	80058de <TIM_OC3_SetConfig+0x6a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <TIM_OC3_SetConfig+0x100>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10d      	bne.n	80058fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <TIM_OC3_SetConfig+0xfc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00f      	beq.n	8005922 <TIM_OC3_SetConfig+0xae>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <TIM_OC3_SetConfig+0x100>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_OC3_SetConfig+0xae>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a1a      	ldr	r2, [pc, #104]	; (8005978 <TIM_OC3_SetConfig+0x104>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC3_SetConfig+0xae>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a19      	ldr	r2, [pc, #100]	; (800597c <TIM_OC3_SetConfig+0x108>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC3_SetConfig+0xae>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a18      	ldr	r2, [pc, #96]	; (8005980 <TIM_OC3_SetConfig+0x10c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d113      	bne.n	800594a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40013400 	.word	0x40013400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800

08005984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	031b      	lsls	r3, r3, #12
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a18      	ldr	r2, [pc, #96]	; (8005a44 <TIM_OC4_SetConfig+0xc0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00f      	beq.n	8005a08 <TIM_OC4_SetConfig+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <TIM_OC4_SetConfig+0xc4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00b      	beq.n	8005a08 <TIM_OC4_SetConfig+0x84>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <TIM_OC4_SetConfig+0xc8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC4_SetConfig+0x84>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <TIM_OC4_SetConfig+0xcc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC4_SetConfig+0x84>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <TIM_OC4_SetConfig+0xd0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d109      	bne.n	8005a1c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40013400 	.word	0x40013400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800

08005a58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <TIM_OC5_SetConfig+0xb4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x7a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a16      	ldr	r2, [pc, #88]	; (8005b10 <TIM_OC5_SetConfig+0xb8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x7a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <TIM_OC5_SetConfig+0xbc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x7a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <TIM_OC5_SetConfig+0xc0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x7a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <TIM_OC5_SetConfig+0xc4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d109      	bne.n	8005ae6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	051b      	lsls	r3, r3, #20
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <TIM_OC6_SetConfig+0xb8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00f      	beq.n	8005b9c <TIM_OC6_SetConfig+0x7c>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <TIM_OC6_SetConfig+0xbc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <TIM_OC6_SetConfig+0x7c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <TIM_OC6_SetConfig+0xc0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_OC6_SetConfig+0x7c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <TIM_OC6_SetConfig+0xc4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC6_SetConfig+0x7c>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <TIM_OC6_SetConfig+0xc8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d109      	bne.n	8005bb0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	029b      	lsls	r3, r3, #10
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40013400 	.word	0x40013400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400
 8005be8:	40014800 	.word	0x40014800

08005bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2201      	movs	r2, #1
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1a      	ldr	r2, [r3, #32]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	401a      	ands	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	fa01 f303 	lsl.w	r3, r1, r3
 8005c24:	431a      	orrs	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e068      	b.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a2d      	ldr	r2, [pc, #180]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d108      	bne.n	8005c96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01d      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc2:	d018      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1a      	ldr	r2, [pc, #104]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a14      	ldr	r2, [pc, #80]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d10c      	bne.n	8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40014000 	.word	0x40014000

08005d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e065      	b.n	8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	041b      	lsls	r3, r3, #16
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a16      	ldr	r2, [pc, #88]	; (8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a14      	ldr	r2, [pc, #80]	; (8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d115      	bne.n	8005e1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e040      	b.n	8005f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fb fce6 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8c0 	bl	8006044 <UART_SetConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e022      	b.n	8005f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb3e 	bl	8006558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbc5 	bl	800669c <UART_CheckIdleState>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	f040 8082 	bne.w	800603a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit+0x26>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07a      	b.n	800603c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit+0x38>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e073      	b.n	800603c <HAL_UART_Transmit+0x120>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2221      	movs	r2, #33	; 0x21
 8005f68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6a:	f7fb fe6f 	bl	8001c4c <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d108      	bne.n	8005f9c <HAL_UART_Transmit+0x80>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e003      	b.n	8005fa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fac:	e02d      	b.n	800600a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fbb8 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e039      	b.n	800603c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e008      	b.n	8005ff8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1cb      	bne.n	8005fae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	2140      	movs	r1, #64	; 0x40
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fb84 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e005      	b.n	800603c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	b5b0      	push	{r4, r5, r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4313      	orrs	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4bad      	ldr	r3, [pc, #692]	; (8006324 <UART_SetConfig+0x2e0>)
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	69f9      	ldr	r1, [r7, #28]
 8006078:	430b      	orrs	r3, r1
 800607a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4aa2      	ldr	r2, [pc, #648]	; (8006328 <UART_SetConfig+0x2e4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a99      	ldr	r2, [pc, #612]	; (800632c <UART_SetConfig+0x2e8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d121      	bne.n	800610e <UART_SetConfig+0xca>
 80060ca:	4b99      	ldr	r3, [pc, #612]	; (8006330 <UART_SetConfig+0x2ec>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d817      	bhi.n	8006108 <UART_SetConfig+0xc4>
 80060d8:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <UART_SetConfig+0x9c>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	080060f7 	.word	0x080060f7
 80060ec:	08006103 	.word	0x08006103
 80060f0:	2301      	movs	r3, #1
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e0e7      	b.n	80062c6 <UART_SetConfig+0x282>
 80060f6:	2302      	movs	r3, #2
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e0e4      	b.n	80062c6 <UART_SetConfig+0x282>
 80060fc:	2304      	movs	r3, #4
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e0e1      	b.n	80062c6 <UART_SetConfig+0x282>
 8006102:	2308      	movs	r3, #8
 8006104:	76fb      	strb	r3, [r7, #27]
 8006106:	e0de      	b.n	80062c6 <UART_SetConfig+0x282>
 8006108:	2310      	movs	r3, #16
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	e0db      	b.n	80062c6 <UART_SetConfig+0x282>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a88      	ldr	r2, [pc, #544]	; (8006334 <UART_SetConfig+0x2f0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d132      	bne.n	800617e <UART_SetConfig+0x13a>
 8006118:	4b85      	ldr	r3, [pc, #532]	; (8006330 <UART_SetConfig+0x2ec>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	2b0c      	cmp	r3, #12
 8006124:	d828      	bhi.n	8006178 <UART_SetConfig+0x134>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0xe8>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006161 	.word	0x08006161
 8006130:	08006179 	.word	0x08006179
 8006134:	08006179 	.word	0x08006179
 8006138:	08006179 	.word	0x08006179
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006179 	.word	0x08006179
 8006144:	08006179 	.word	0x08006179
 8006148:	08006179 	.word	0x08006179
 800614c:	08006167 	.word	0x08006167
 8006150:	08006179 	.word	0x08006179
 8006154:	08006179 	.word	0x08006179
 8006158:	08006179 	.word	0x08006179
 800615c:	08006173 	.word	0x08006173
 8006160:	2300      	movs	r3, #0
 8006162:	76fb      	strb	r3, [r7, #27]
 8006164:	e0af      	b.n	80062c6 <UART_SetConfig+0x282>
 8006166:	2302      	movs	r3, #2
 8006168:	76fb      	strb	r3, [r7, #27]
 800616a:	e0ac      	b.n	80062c6 <UART_SetConfig+0x282>
 800616c:	2304      	movs	r3, #4
 800616e:	76fb      	strb	r3, [r7, #27]
 8006170:	e0a9      	b.n	80062c6 <UART_SetConfig+0x282>
 8006172:	2308      	movs	r3, #8
 8006174:	76fb      	strb	r3, [r7, #27]
 8006176:	e0a6      	b.n	80062c6 <UART_SetConfig+0x282>
 8006178:	2310      	movs	r3, #16
 800617a:	76fb      	strb	r3, [r7, #27]
 800617c:	e0a3      	b.n	80062c6 <UART_SetConfig+0x282>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6d      	ldr	r2, [pc, #436]	; (8006338 <UART_SetConfig+0x2f4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d120      	bne.n	80061ca <UART_SetConfig+0x186>
 8006188:	4b69      	ldr	r3, [pc, #420]	; (8006330 <UART_SetConfig+0x2ec>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006192:	2b30      	cmp	r3, #48	; 0x30
 8006194:	d013      	beq.n	80061be <UART_SetConfig+0x17a>
 8006196:	2b30      	cmp	r3, #48	; 0x30
 8006198:	d814      	bhi.n	80061c4 <UART_SetConfig+0x180>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d009      	beq.n	80061b2 <UART_SetConfig+0x16e>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d810      	bhi.n	80061c4 <UART_SetConfig+0x180>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <UART_SetConfig+0x168>
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d006      	beq.n	80061b8 <UART_SetConfig+0x174>
 80061aa:	e00b      	b.n	80061c4 <UART_SetConfig+0x180>
 80061ac:	2300      	movs	r3, #0
 80061ae:	76fb      	strb	r3, [r7, #27]
 80061b0:	e089      	b.n	80062c6 <UART_SetConfig+0x282>
 80061b2:	2302      	movs	r3, #2
 80061b4:	76fb      	strb	r3, [r7, #27]
 80061b6:	e086      	b.n	80062c6 <UART_SetConfig+0x282>
 80061b8:	2304      	movs	r3, #4
 80061ba:	76fb      	strb	r3, [r7, #27]
 80061bc:	e083      	b.n	80062c6 <UART_SetConfig+0x282>
 80061be:	2308      	movs	r3, #8
 80061c0:	76fb      	strb	r3, [r7, #27]
 80061c2:	e080      	b.n	80062c6 <UART_SetConfig+0x282>
 80061c4:	2310      	movs	r3, #16
 80061c6:	76fb      	strb	r3, [r7, #27]
 80061c8:	e07d      	b.n	80062c6 <UART_SetConfig+0x282>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5b      	ldr	r2, [pc, #364]	; (800633c <UART_SetConfig+0x2f8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d120      	bne.n	8006216 <UART_SetConfig+0x1d2>
 80061d4:	4b56      	ldr	r3, [pc, #344]	; (8006330 <UART_SetConfig+0x2ec>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061de:	2bc0      	cmp	r3, #192	; 0xc0
 80061e0:	d013      	beq.n	800620a <UART_SetConfig+0x1c6>
 80061e2:	2bc0      	cmp	r3, #192	; 0xc0
 80061e4:	d814      	bhi.n	8006210 <UART_SetConfig+0x1cc>
 80061e6:	2b80      	cmp	r3, #128	; 0x80
 80061e8:	d009      	beq.n	80061fe <UART_SetConfig+0x1ba>
 80061ea:	2b80      	cmp	r3, #128	; 0x80
 80061ec:	d810      	bhi.n	8006210 <UART_SetConfig+0x1cc>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <UART_SetConfig+0x1b4>
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d006      	beq.n	8006204 <UART_SetConfig+0x1c0>
 80061f6:	e00b      	b.n	8006210 <UART_SetConfig+0x1cc>
 80061f8:	2300      	movs	r3, #0
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e063      	b.n	80062c6 <UART_SetConfig+0x282>
 80061fe:	2302      	movs	r3, #2
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e060      	b.n	80062c6 <UART_SetConfig+0x282>
 8006204:	2304      	movs	r3, #4
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e05d      	b.n	80062c6 <UART_SetConfig+0x282>
 800620a:	2308      	movs	r3, #8
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e05a      	b.n	80062c6 <UART_SetConfig+0x282>
 8006210:	2310      	movs	r3, #16
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e057      	b.n	80062c6 <UART_SetConfig+0x282>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a49      	ldr	r2, [pc, #292]	; (8006340 <UART_SetConfig+0x2fc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d125      	bne.n	800626c <UART_SetConfig+0x228>
 8006220:	4b43      	ldr	r3, [pc, #268]	; (8006330 <UART_SetConfig+0x2ec>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622e:	d017      	beq.n	8006260 <UART_SetConfig+0x21c>
 8006230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006234:	d817      	bhi.n	8006266 <UART_SetConfig+0x222>
 8006236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623a:	d00b      	beq.n	8006254 <UART_SetConfig+0x210>
 800623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006240:	d811      	bhi.n	8006266 <UART_SetConfig+0x222>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <UART_SetConfig+0x20a>
 8006246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624a:	d006      	beq.n	800625a <UART_SetConfig+0x216>
 800624c:	e00b      	b.n	8006266 <UART_SetConfig+0x222>
 800624e:	2300      	movs	r3, #0
 8006250:	76fb      	strb	r3, [r7, #27]
 8006252:	e038      	b.n	80062c6 <UART_SetConfig+0x282>
 8006254:	2302      	movs	r3, #2
 8006256:	76fb      	strb	r3, [r7, #27]
 8006258:	e035      	b.n	80062c6 <UART_SetConfig+0x282>
 800625a:	2304      	movs	r3, #4
 800625c:	76fb      	strb	r3, [r7, #27]
 800625e:	e032      	b.n	80062c6 <UART_SetConfig+0x282>
 8006260:	2308      	movs	r3, #8
 8006262:	76fb      	strb	r3, [r7, #27]
 8006264:	e02f      	b.n	80062c6 <UART_SetConfig+0x282>
 8006266:	2310      	movs	r3, #16
 8006268:	76fb      	strb	r3, [r7, #27]
 800626a:	e02c      	b.n	80062c6 <UART_SetConfig+0x282>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <UART_SetConfig+0x2e4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d125      	bne.n	80062c2 <UART_SetConfig+0x27e>
 8006276:	4b2e      	ldr	r3, [pc, #184]	; (8006330 <UART_SetConfig+0x2ec>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006284:	d017      	beq.n	80062b6 <UART_SetConfig+0x272>
 8006286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800628a:	d817      	bhi.n	80062bc <UART_SetConfig+0x278>
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006290:	d00b      	beq.n	80062aa <UART_SetConfig+0x266>
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006296:	d811      	bhi.n	80062bc <UART_SetConfig+0x278>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <UART_SetConfig+0x260>
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a0:	d006      	beq.n	80062b0 <UART_SetConfig+0x26c>
 80062a2:	e00b      	b.n	80062bc <UART_SetConfig+0x278>
 80062a4:	2300      	movs	r3, #0
 80062a6:	76fb      	strb	r3, [r7, #27]
 80062a8:	e00d      	b.n	80062c6 <UART_SetConfig+0x282>
 80062aa:	2302      	movs	r3, #2
 80062ac:	76fb      	strb	r3, [r7, #27]
 80062ae:	e00a      	b.n	80062c6 <UART_SetConfig+0x282>
 80062b0:	2304      	movs	r3, #4
 80062b2:	76fb      	strb	r3, [r7, #27]
 80062b4:	e007      	b.n	80062c6 <UART_SetConfig+0x282>
 80062b6:	2308      	movs	r3, #8
 80062b8:	76fb      	strb	r3, [r7, #27]
 80062ba:	e004      	b.n	80062c6 <UART_SetConfig+0x282>
 80062bc:	2310      	movs	r3, #16
 80062be:	76fb      	strb	r3, [r7, #27]
 80062c0:	e001      	b.n	80062c6 <UART_SetConfig+0x282>
 80062c2:	2310      	movs	r3, #16
 80062c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <UART_SetConfig+0x2e4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	f040 8087 	bne.w	80063e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062d2:	7efb      	ldrb	r3, [r7, #27]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d837      	bhi.n	8006348 <UART_SetConfig+0x304>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x29c>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006305 	.word	0x08006305
 80062e4:	08006349 	.word	0x08006349
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006349 	.word	0x08006349
 80062f0:	08006313 	.word	0x08006313
 80062f4:	08006349 	.word	0x08006349
 80062f8:	08006349 	.word	0x08006349
 80062fc:	08006349 	.word	0x08006349
 8006300:	0800631b 	.word	0x0800631b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fd ff00 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8006308:	6178      	str	r0, [r7, #20]
        break;
 800630a:	e022      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x300>)
 800630e:	617b      	str	r3, [r7, #20]
        break;
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006312:	f7fd fe61 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8006316:	6178      	str	r0, [r7, #20]
        break;
 8006318:	e01b      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e017      	b.n	8006352 <UART_SetConfig+0x30e>
 8006322:	bf00      	nop
 8006324:	efff69f3 	.word	0xefff69f3
 8006328:	40008000 	.word	0x40008000
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	40004c00 	.word	0x40004c00
 8006340:	40005000 	.word	0x40005000
 8006344:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	76bb      	strb	r3, [r7, #26]
        break;
 8006350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80f1 	beq.w	800653c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d305      	bcc.n	8006376 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	429a      	cmp	r2, r3
 8006374:	d902      	bls.n	800637c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	76bb      	strb	r3, [r7, #26]
 800637a:	e0df      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4618      	mov	r0, r3
 8006380:	f04f 0100 	mov.w	r1, #0
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	020b      	lsls	r3, r1, #8
 800638e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006392:	0202      	lsls	r2, r0, #8
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	0849      	lsrs	r1, r1, #1
 800639a:	4608      	mov	r0, r1
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	1814      	adds	r4, r2, r0
 80063a2:	eb43 0501 	adc.w	r5, r3, r1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	4620      	mov	r0, r4
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7fa fb7a 	bl	8000aac <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4613      	mov	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c6:	d308      	bcc.n	80063da <UART_SetConfig+0x396>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ce:	d204      	bcs.n	80063da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e0b0      	b.n	800653c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	76bb      	strb	r3, [r7, #26]
 80063de:	e0ad      	b.n	800653c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e8:	d15c      	bne.n	80064a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80063ea:	7efb      	ldrb	r3, [r7, #27]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d828      	bhi.n	8006442 <UART_SetConfig+0x3fe>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x3b4>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fd fe74 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fd fe86 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 8006428:	6178      	str	r0, [r7, #20]
        break;
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b49      	ldr	r3, [pc, #292]	; (8006554 <UART_SetConfig+0x510>)
 800642e:	617b      	str	r3, [r7, #20]
        break;
 8006430:	e00c      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fd fdd1 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8006436:	6178      	str	r0, [r7, #20]
        break;
 8006438:	e008      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	617b      	str	r3, [r7, #20]
        break;
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	76bb      	strb	r3, [r7, #26]
        break;
 800644a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d074      	beq.n	800653c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005a      	lsls	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	441a      	add	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	b29b      	uxth	r3, r3
 8006468:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b0f      	cmp	r3, #15
 800646e:	d916      	bls.n	800649e <UART_SetConfig+0x45a>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006476:	d212      	bcs.n	800649e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f023 030f 	bic.w	r3, r3, #15
 8006480:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	b29a      	uxth	r2, r3
 800648e:	89fb      	ldrh	r3, [r7, #14]
 8006490:	4313      	orrs	r3, r2
 8006492:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	89fa      	ldrh	r2, [r7, #14]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e04e      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	76bb      	strb	r3, [r7, #26]
 80064a2:	e04b      	b.n	800653c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d827      	bhi.n	80064fa <UART_SetConfig+0x4b6>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x46c>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fd fe18 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80064d8:	6178      	str	r0, [r7, #20]
        break;
 80064da:	e013      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fd fe2a 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 80064e0:	6178      	str	r0, [r7, #20]
        break;
 80064e2:	e00f      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <UART_SetConfig+0x510>)
 80064e6:	617b      	str	r3, [r7, #20]
        break;
 80064e8:	e00c      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd fd75 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 80064ee:	6178      	str	r0, [r7, #20]
        break;
 80064f0:	e008      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	617b      	str	r3, [r7, #20]
        break;
 80064f8:	e004      	b.n	8006504 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	76bb      	strb	r3, [r7, #26]
        break;
 8006502:	bf00      	nop
    }

    if (pclk != 0U)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	085a      	lsrs	r2, r3, #1
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	441a      	add	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	b29b      	uxth	r3, r3
 800651e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	d908      	bls.n	8006538 <UART_SetConfig+0x4f4>
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d204      	bcs.n	8006538 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e001      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006548:	7ebb      	ldrb	r3, [r7, #26]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bdb0      	pop	{r4, r5, r7, pc}
 8006552:	bf00      	nop
 8006554:	00f42400 	.word	0x00f42400

08006558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01a      	beq.n	800666e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006656:	d10a      	bne.n	800666e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066ac:	f7fb face 	bl	8001c4c <HAL_GetTick>
 80066b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d10e      	bne.n	80066de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f82d 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e023      	b.n	8006726 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d10e      	bne.n	800670a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f817 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e00d      	b.n	8006726 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673e:	e05e      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006746:	d05a      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fb fa80 	bl	8001c4c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <UART_WaitOnFlagUntilTimeout+0x30>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11b      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800676c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e043      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02c      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b2:	d124      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067bc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d091      	beq.n	8006740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <__NVIC_SetPriority>:
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db0a      	blt.n	8006852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	490c      	ldr	r1, [pc, #48]	; (8006874 <__NVIC_SetPriority+0x4c>)
 8006842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006846:	0112      	lsls	r2, r2, #4
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	440b      	add	r3, r1
 800684c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006850:	e00a      	b.n	8006868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4908      	ldr	r1, [pc, #32]	; (8006878 <__NVIC_SetPriority+0x50>)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	3b04      	subs	r3, #4
 8006860:	0112      	lsls	r2, r2, #4
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	440b      	add	r3, r1
 8006866:	761a      	strb	r2, [r3, #24]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	e000e100 	.word	0xe000e100
 8006878:	e000ed00 	.word	0xe000ed00

0800687c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <SysTick_Handler+0x1c>)
 8006882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006884:	f001 fcfe 	bl	8008284 <xTaskGetSchedulerState>
 8006888:	4603      	mov	r3, r0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800688e:	f002 fae3 	bl	8008e58 <xPortSysTickHandler>
  }
}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	e000e010 	.word	0xe000e010

0800689c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068a0:	2100      	movs	r1, #0
 80068a2:	f06f 0004 	mvn.w	r0, #4
 80068a6:	f7ff ffbf 	bl	8006828 <__NVIC_SetPriority>
#endif
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b6:	f3ef 8305 	mrs	r3, IPSR
 80068ba:	603b      	str	r3, [r7, #0]
  return(result);
 80068bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068c2:	f06f 0305 	mvn.w	r3, #5
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	e00c      	b.n	80068e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <osKernelInitialize+0x44>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <osKernelInitialize+0x44>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068d8:	2300      	movs	r3, #0
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	e002      	b.n	80068e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068e4:	687b      	ldr	r3, [r7, #4]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20000094 	.word	0x20000094

080068f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fe:	f3ef 8305 	mrs	r3, IPSR
 8006902:	603b      	str	r3, [r7, #0]
  return(result);
 8006904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800690a:	f06f 0305 	mvn.w	r3, #5
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	e010      	b.n	8006934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <osKernelStart+0x48>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d109      	bne.n	800692e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800691a:	f7ff ffbf 	bl	800689c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800691e:	4b08      	ldr	r3, [pc, #32]	; (8006940 <osKernelStart+0x48>)
 8006920:	2202      	movs	r2, #2
 8006922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006924:	f001 f866 	bl	80079f4 <vTaskStartScheduler>
      stat = osOK;
 8006928:	2300      	movs	r3, #0
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	e002      	b.n	8006934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800692e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006934:	687b      	ldr	r3, [r7, #4]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000094 	.word	0x20000094

08006944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b08e      	sub	sp, #56	; 0x38
 8006948:	af04      	add	r7, sp, #16
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006954:	f3ef 8305 	mrs	r3, IPSR
 8006958:	617b      	str	r3, [r7, #20]
  return(result);
 800695a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800695c:	2b00      	cmp	r3, #0
 800695e:	d17e      	bne.n	8006a5e <osThreadNew+0x11a>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d07b      	beq.n	8006a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800696a:	2318      	movs	r3, #24
 800696c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d045      	beq.n	8006a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <osThreadNew+0x48>
        name = attr->name;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <osThreadNew+0x6e>
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b38      	cmp	r3, #56	; 0x38
 80069a4:	d805      	bhi.n	80069b2 <osThreadNew+0x6e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <osThreadNew+0x72>
        return (NULL);
 80069b2:	2300      	movs	r3, #0
 80069b4:	e054      	b.n	8006a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <osThreadNew+0xa8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b5b      	cmp	r3, #91	; 0x5b
 80069d4:	d90a      	bls.n	80069ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <osThreadNew+0xa8>
        mem = 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e010      	b.n	8006a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10c      	bne.n	8006a0e <osThreadNew+0xca>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <osThreadNew+0xca>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <osThreadNew+0xca>
          mem = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e001      	b.n	8006a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d110      	bne.n	8006a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a1c:	9202      	str	r2, [sp, #8]
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fe0c 	bl	8007648 <xTaskCreateStatic>
 8006a30:	4603      	mov	r3, r0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e013      	b.n	8006a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fe57 	bl	8007702 <xTaskCreate>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <osThreadNew+0x11a>
            hTask = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a5e:	693b      	ldr	r3, [r7, #16]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3728      	adds	r7, #40	; 0x28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a70:	f3ef 8305 	mrs	r3, IPSR
 8006a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <osDelay+0x1c>
    stat = osErrorISR;
 8006a7c:	f06f 0305 	mvn.w	r3, #5
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e007      	b.n	8006a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ff7c 	bl	800798c <vTaskDelay>
    }
  }

  return (stat);
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a07      	ldr	r2, [pc, #28]	; (8006acc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8006ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20000098 	.word	0x20000098
 8006ad0:	200000f4 	.word	0x200000f4

08006ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a07      	ldr	r2, [pc, #28]	; (8006b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	4a06      	ldr	r2, [pc, #24]	; (8006b04 <vApplicationGetTimerTaskMemory+0x30>)
 8006aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	200002f4 	.word	0x200002f4
 8006b04:	20000350 	.word	0x20000350

08006b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0208 	add.w	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f103 0208 	add.w	r2, r3, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 0208 	add.w	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d103      	bne.n	8006bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e00c      	b.n	8006be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e002      	b.n	8006bd8 <vListInsert+0x2e>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d2f6      	bcs.n	8006bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6892      	ldr	r2, [r2, #8]
 8006c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6852      	ldr	r2, [r2, #4]
 8006c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d103      	bne.n	8006c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	1e5a      	subs	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c9a:	f002 f84b 	bl	8008d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	441a      	add	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	68f9      	ldr	r1, [r7, #12]
 8006cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d114      	bne.n	8006d1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01a      	beq.n	8006d2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f903 	bl	8007f08 <xTaskRemoveFromEventList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d012      	beq.n	8006d2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <xQueueGenericReset+0xcc>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e009      	b.n	8006d2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fef2 	bl	8006b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff feed 	bl	8006b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d2e:	f002 f831 	bl	8008d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d32:	2301      	movs	r3, #1
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08e      	sub	sp, #56	; 0x38
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <xQueueGenericCreateStatic+0x52>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <xQueueGenericCreateStatic+0x56>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xQueueGenericCreateStatic+0x58>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xQueueGenericCreateStatic+0x7e>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xQueueGenericCreateStatic+0x82>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueGenericCreateStatic+0x84>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	61fb      	str	r3, [r7, #28]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dde:	2350      	movs	r3, #80	; 0x50
 8006de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b50      	cmp	r3, #80	; 0x50
 8006de6:	d00a      	beq.n	8006dfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	61bb      	str	r3, [r7, #24]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00d      	beq.n	8006e26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f805 	bl	8006e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3730      	adds	r7, #48	; 0x30
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e5e:	2101      	movs	r1, #1
 8006e60:	69b8      	ldr	r0, [r7, #24]
 8006e62:	f7ff ff05 	bl	8006c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e86:	2300      	movs	r3, #0
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueueGenericSend+0x32>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <xQueueGenericSend+0x40>
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <xQueueGenericSend+0x44>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <xQueueGenericSend+0x46>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d103      	bne.n	8006ee6 <xQueueGenericSend+0x6e>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <xQueueGenericSend+0x72>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueGenericSend+0x74>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	623b      	str	r3, [r7, #32]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f06:	f001 f9bd 	bl	8008284 <xTaskGetSchedulerState>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <xQueueGenericSend+0x9e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <xQueueGenericSend+0xa2>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <xQueueGenericSend+0xa4>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61fb      	str	r3, [r7, #28]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f36:	f001 fefd 	bl	8008d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d302      	bcc.n	8006f4c <xQueueGenericSend+0xd4>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d129      	bne.n	8006fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f52:	f000 fa0b 	bl	800736c <prvCopyDataToQueue>
 8006f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ffcf 	bl	8007f08 <xTaskRemoveFromEventList>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d013      	beq.n	8006f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f70:	4b3f      	ldr	r3, [pc, #252]	; (8007070 <xQueueGenericSend+0x1f8>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	e00a      	b.n	8006f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f88:	4b39      	ldr	r3, [pc, #228]	; (8007070 <xQueueGenericSend+0x1f8>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f98:	f001 fefc 	bl	8008d94 <vPortExitCritical>
				return pdPASS;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e063      	b.n	8007068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fa6:	f001 fef5 	bl	8008d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e05c      	b.n	8007068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f809 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc2:	f001 fee7 	bl	8008d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc6:	f000 fd7b 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fca:	f001 feb3 	bl	8008d34 <vPortEnterCritical>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fda:	d103      	bne.n	8006fe4 <xQueueGenericSend+0x16c>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff0:	d103      	bne.n	8006ffa <xQueueGenericSend+0x182>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ffa:	f001 fecb 	bl	8008d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ffe:	1d3a      	adds	r2, r7, #4
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fff8 	bl	8007ffc <xTaskCheckForTimeOut>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d124      	bne.n	800705c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007014:	f000 faa2 	bl	800755c <prvIsQueueFull>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	3310      	adds	r3, #16
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f000 ff1e 	bl	8007e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800702c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702e:	f000 fa2d 	bl	800748c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007032:	f000 fd53 	bl	8007adc <xTaskResumeAll>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af7c 	bne.w	8006f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <xQueueGenericSend+0x1f8>)
 8007040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	e772      	b.n	8006f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007052:	f000 fa1b 	bl	800748c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007056:	f000 fd41 	bl	8007adc <xTaskResumeAll>
 800705a:	e76c      	b.n	8006f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800705c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705e:	f000 fa15 	bl	800748c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007062:	f000 fd3b 	bl	8007adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007068:	4618      	mov	r0, r3
 800706a:	3738      	adds	r7, #56	; 0x38
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b090      	sub	sp, #64	; 0x40
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <xQueueGenericSendFromISR+0x3c>
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <xQueueGenericSendFromISR+0x40>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <xQueueGenericSendFromISR+0x42>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d103      	bne.n	80070de <xQueueGenericSendFromISR+0x6a>
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <xQueueGenericSendFromISR+0x6e>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <xQueueGenericSendFromISR+0x70>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	623b      	str	r3, [r7, #32]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070fe:	f001 fefb 	bl	8008ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007102:	f3ef 8211 	mrs	r2, BASEPRI
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	61fa      	str	r2, [r7, #28]
 8007118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800711a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <xQueueGenericSendFromISR+0xbc>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d12f      	bne.n	8007190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007146:	f000 f911 	bl	800736c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800714a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007152:	d112      	bne.n	800717a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d016      	beq.n	800718a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	3324      	adds	r3, #36	; 0x24
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fed1 	bl	8007f08 <xTaskRemoveFromEventList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e007      	b.n	800718a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800717a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800717e:	3301      	adds	r3, #1
 8007180:	b2db      	uxtb	r3, r3
 8007182:	b25a      	sxtb	r2, r3
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800718a:	2301      	movs	r3, #1
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800718e:	e001      	b.n	8007194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007190:	2300      	movs	r3, #0
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800719e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3740      	adds	r7, #64	; 0x40
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	; 0x30
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <xQueueReceive+0x30>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	623b      	str	r3, [r7, #32]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <xQueueReceive+0x3e>
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueReceive+0x42>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueReceive+0x44>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueReceive+0x5e>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	61fb      	str	r3, [r7, #28]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f001 f83b 	bl	8008284 <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xQueueReceive+0x6e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueReceive+0x72>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueReceive+0x74>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueReceive+0x8e>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61bb      	str	r3, [r7, #24]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723a:	f001 fd7b 	bl	8008d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01f      	beq.n	800728a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724e:	f000 f8f7 	bl	8007440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00f      	beq.n	8007282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	3310      	adds	r3, #16
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fe4e 	bl	8007f08 <xTaskRemoveFromEventList>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007272:	4b3d      	ldr	r3, [pc, #244]	; (8007368 <xQueueReceive+0x1bc>)
 8007274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007282:	f001 fd87 	bl	8008d94 <vPortExitCritical>
				return pdPASS;
 8007286:	2301      	movs	r3, #1
 8007288:	e069      	b.n	800735e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007290:	f001 fd80 	bl	8008d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007294:	2300      	movs	r3, #0
 8007296:	e062      	b.n	800735e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800729e:	f107 0310 	add.w	r3, r7, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fe94 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ac:	f001 fd72 	bl	8008d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b0:	f000 fc06 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072b4:	f001 fd3e 	bl	8008d34 <vPortEnterCritical>
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d103      	bne.n	80072ce <xQueueReceive+0x122>
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d4:	b25b      	sxtb	r3, r3
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072da:	d103      	bne.n	80072e4 <xQueueReceive+0x138>
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e4:	f001 fd56 	bl	8008d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e8:	1d3a      	adds	r2, r7, #4
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fe83 	bl	8007ffc <xTaskCheckForTimeOut>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d123      	bne.n	8007344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fe:	f000 f917 	bl	8007530 <prvIsQueueEmpty>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d017      	beq.n	8007338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fda9 	bl	8007e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007318:	f000 f8b8 	bl	800748c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800731c:	f000 fbde 	bl	8007adc <xTaskResumeAll>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d189      	bne.n	800723a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <xQueueReceive+0x1bc>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	e780      	b.n	800723a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733a:	f000 f8a7 	bl	800748c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800733e:	f000 fbcd 	bl	8007adc <xTaskResumeAll>
 8007342:	e77a      	b.n	800723a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007346:	f000 f8a1 	bl	800748c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800734a:	f000 fbc7 	bl	8007adc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800734e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007350:	f000 f8ee 	bl	8007530 <prvIsQueueEmpty>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	f43f af6f 	beq.w	800723a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800735c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800735e:	4618      	mov	r0, r3
 8007360:	3730      	adds	r7, #48	; 0x30
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10d      	bne.n	80073a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d14d      	bne.n	800742e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 ff92 	bl	80082c0 <xTaskPriorityDisinherit>
 800739c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	e043      	b.n	800742e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d119      	bne.n	80073e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6858      	ldr	r0, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	461a      	mov	r2, r3
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	f001 fff2 	bl	80093a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	441a      	add	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d32b      	bcc.n	800742e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	e026      	b.n	800742e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68d8      	ldr	r0, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	461a      	mov	r2, r3
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	f001 ffd8 	bl	80093a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	425b      	negs	r3, r3
 80073fa:	441a      	add	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d207      	bcs.n	800741c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	425b      	negs	r3, r3
 8007416:	441a      	add	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d105      	bne.n	800742e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3b01      	subs	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007436:	697b      	ldr	r3, [r7, #20]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d018      	beq.n	8007484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	441a      	add	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	d303      	bcc.n	8007474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68d9      	ldr	r1, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	461a      	mov	r2, r3
 800747e:	6838      	ldr	r0, [r7, #0]
 8007480:	f001 ff8e 	bl	80093a0 <memcpy>
	}
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007494:	f001 fc4e 	bl	8008d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800749e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a0:	e011      	b.n	80074c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fd2a 	bl	8007f08 <xTaskRemoveFromEventList>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074ba:	f000 fe01 	bl	80080c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dce9      	bgt.n	80074a2 <prvUnlockQueue+0x16>
 80074ce:	e000      	b.n	80074d2 <prvUnlockQueue+0x46>
					break;
 80074d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074da:	f001 fc5b 	bl	8008d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074de:	f001 fc29 	bl	8008d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ea:	e011      	b.n	8007510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3310      	adds	r3, #16
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fd05 	bl	8007f08 <xTaskRemoveFromEventList>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007504:	f000 fddc 	bl	80080c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	3b01      	subs	r3, #1
 800750c:	b2db      	uxtb	r3, r3
 800750e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dce9      	bgt.n	80074ec <prvUnlockQueue+0x60>
 8007518:	e000      	b.n	800751c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800751a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	22ff      	movs	r2, #255	; 0xff
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007524:	f001 fc36 	bl	8008d94 <vPortExitCritical>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007538:	f001 fbfc 	bl	8008d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e001      	b.n	800754e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800754e:	f001 fc21 	bl	8008d94 <vPortExitCritical>

	return xReturn;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007564:	f001 fbe6 	bl	8008d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	429a      	cmp	r2, r3
 8007572:	d102      	bne.n	800757a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e001      	b.n	800757e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757e:	f001 fc09 	bl	8008d94 <vPortExitCritical>

	return xReturn;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e014      	b.n	80075c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800759c:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <vQueueAddToRegistry+0x50>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075a8:	490c      	ldr	r1, [pc, #48]	; (80075dc <vQueueAddToRegistry+0x50>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075b2:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <vQueueAddToRegistry+0x50>)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075be:	e006      	b.n	80075ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d9e7      	bls.n	800759c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20001b84 	.word	0x20001b84

080075e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075f0:	f001 fba0 	bl	8008d34 <vPortEnterCritical>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007600:	d103      	bne.n	800760a <vQueueWaitForMessageRestricted+0x2a>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007616:	d103      	bne.n	8007620 <vQueueWaitForMessageRestricted+0x40>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007620:	f001 fbb8 	bl	8008d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fc3b 	bl	8007eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800763a:	6978      	ldr	r0, [r7, #20]
 800763c:	f7ff ff26 	bl	800748c <prvUnlockQueue>
	}
 8007640:	bf00      	nop
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af04      	add	r7, sp, #16
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	623b      	str	r3, [r7, #32]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xTaskCreateStatic+0x46>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768e:	235c      	movs	r3, #92	; 0x5c
 8007690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b5c      	cmp	r3, #92	; 0x5c
 8007696:	d00a      	beq.n	80076ae <xTaskCreateStatic+0x66>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	61bb      	str	r3, [r7, #24]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01e      	beq.n	80076f4 <xTaskCreateStatic+0xac>
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076ce:	2300      	movs	r3, #0
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f850 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ee:	f000 f8dd 	bl	80078ac <prvAddNewTaskToReadyList>
 80076f2:	e001      	b.n	80076f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f8:	697b      	ldr	r3, [r7, #20]
	}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007702:	b580      	push	{r7, lr}
 8007704:	b08c      	sub	sp, #48	; 0x30
 8007706:	af04      	add	r7, sp, #16
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4618      	mov	r0, r3
 8007718:	f001 fc2e 	bl	8008f78 <pvPortMalloc>
 800771c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007724:	205c      	movs	r0, #92	; 0x5c
 8007726:	f001 fc27 	bl	8008f78 <pvPortMalloc>
 800772a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
 8007738:	e005      	b.n	8007746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800773a:	6978      	ldr	r0, [r7, #20]
 800773c:	f001 fce8 	bl	8009110 <vPortFree>
 8007740:	e001      	b.n	8007746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	2300      	movs	r3, #0
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f80e 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007770:	69f8      	ldr	r0, [r7, #28]
 8007772:	f000 f89b 	bl	80078ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007776:	2301      	movs	r3, #1
 8007778:	61bb      	str	r3, [r7, #24]
 800777a:	e002      	b.n	8007782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800777c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007782:	69bb      	ldr	r3, [r7, #24]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	21a5      	movs	r1, #165	; 0xa5
 80077a6:	f001 fe09 	bl	80093bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077b4:	3b01      	subs	r3, #1
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f023 0307 	bic.w	r3, r3, #7
 80077c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e012      	b.n	8007816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	7819      	ldrb	r1, [r3, #0]
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	3334      	adds	r3, #52	; 0x34
 8007800:	460a      	mov	r2, r1
 8007802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3301      	adds	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b0f      	cmp	r3, #15
 800781a:	d9e9      	bls.n	80077f0 <prvInitialiseNewTask+0x64>
 800781c:	e000      	b.n	8007820 <prvInitialiseNewTask+0x94>
			{
				break;
 800781e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	e003      	b.n	8007832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	2b37      	cmp	r3, #55	; 0x37
 8007836:	d901      	bls.n	800783c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007838:	2337      	movs	r3, #55	; 0x37
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	2200      	movs	r2, #0
 800784c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff f978 	bl	8006b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	3318      	adds	r3, #24
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff f973 	bl	8006b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	2200      	movs	r2, #0
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	69b8      	ldr	r0, [r7, #24]
 800788c:	f001 f928 	bl	8008ae0 <pxPortInitialiseStack>
 8007890:	4602      	mov	r2, r0
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a2:	bf00      	nop
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078b4:	f001 fa3e 	bl	8008d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078b8:	4b2d      	ldr	r3, [pc, #180]	; (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a2c      	ldr	r2, [pc, #176]	; (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078c2:	4b2c      	ldr	r3, [pc, #176]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ca:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078d0:	4b27      	ldr	r3, [pc, #156]	; (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d110      	bne.n	80078fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078d8:	f000 fc16 	bl	8008108 <prvInitialiseTaskLists>
 80078dc:	e00d      	b.n	80078fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078de:	4b26      	ldr	r3, [pc, #152]	; (8007978 <prvAddNewTaskToReadyList+0xcc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d802      	bhi.n	80078fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078f4:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <prvAddNewTaskToReadyList+0xd0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <prvAddNewTaskToReadyList+0xd0>)
 8007902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007904:	4b1d      	ldr	r3, [pc, #116]	; (800797c <prvAddNewTaskToReadyList+0xd0>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <prvAddNewTaskToReadyList+0xd4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d903      	bls.n	8007920 <prvAddNewTaskToReadyList+0x74>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4a18      	ldr	r2, [pc, #96]	; (8007980 <prvAddNewTaskToReadyList+0xd4>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4a15      	ldr	r2, [pc, #84]	; (8007984 <prvAddNewTaskToReadyList+0xd8>)
 800792e:	441a      	add	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7ff f913 	bl	8006b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800793c:	f001 fa2a 	bl	8008d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007940:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <prvAddNewTaskToReadyList+0xcc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	429a      	cmp	r2, r3
 8007954:	d207      	bcs.n	8007966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007956:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <prvAddNewTaskToReadyList+0xdc>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000c24 	.word	0x20000c24
 8007974:	20000750 	.word	0x20000750
 8007978:	20000c30 	.word	0x20000c30
 800797c:	20000c40 	.word	0x20000c40
 8007980:	20000c2c 	.word	0x20000c2c
 8007984:	20000754 	.word	0x20000754
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d017      	beq.n	80079ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <vTaskDelay+0x60>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <vTaskDelay+0x30>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60bb      	str	r3, [r7, #8]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079bc:	f000 f880 	bl	8007ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fcea 	bl	800839c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079c8:	f000 f888 	bl	8007adc <xTaskResumeAll>
 80079cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079d4:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <vTaskDelay+0x64>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000c4c 	.word	0x20000c4c
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	; 0x28
 80079f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a02:	463a      	mov	r2, r7
 8007a04:	1d39      	adds	r1, r7, #4
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff f848 	bl	8006aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	9202      	str	r2, [sp, #8]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	460a      	mov	r2, r1
 8007a22:	4921      	ldr	r1, [pc, #132]	; (8007aa8 <vTaskStartScheduler+0xb4>)
 8007a24:	4821      	ldr	r0, [pc, #132]	; (8007aac <vTaskStartScheduler+0xb8>)
 8007a26:	f7ff fe0f 	bl	8007648 <xTaskCreateStatic>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <vTaskStartScheduler+0xbc>)
 8007a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a30:	4b1f      	ldr	r3, [pc, #124]	; (8007ab0 <vTaskStartScheduler+0xbc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e001      	b.n	8007a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d102      	bne.n	8007a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a48:	f000 fcfc 	bl	8008444 <xTimerCreateTimerTask>
 8007a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d116      	bne.n	8007a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	613b      	str	r3, [r7, #16]
}
 8007a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a68:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <vTaskStartScheduler+0xc0>)
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a70:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <vTaskStartScheduler+0xc4>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <vTaskStartScheduler+0xc8>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a7c:	f001 f8b8 	bl	8008bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a80:	e00e      	b.n	8007aa0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d10a      	bne.n	8007aa0 <vTaskStartScheduler+0xac>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	60fb      	str	r3, [r7, #12]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <vTaskStartScheduler+0xaa>
}
 8007aa0:	bf00      	nop
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	0800a2b0 	.word	0x0800a2b0
 8007aac:	080080d9 	.word	0x080080d9
 8007ab0:	20000c48 	.word	0x20000c48
 8007ab4:	20000c44 	.word	0x20000c44
 8007ab8:	20000c30 	.word	0x20000c30
 8007abc:	20000c28 	.word	0x20000c28

08007ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <vTaskSuspendAll+0x18>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a03      	ldr	r2, [pc, #12]	; (8007ad8 <vTaskSuspendAll+0x18>)
 8007acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	20000c4c 	.word	0x20000c4c

08007adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aea:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	603b      	str	r3, [r7, #0]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b08:	f001 f914 	bl	8008d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b0c:	4b39      	ldr	r3, [pc, #228]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	4a38      	ldr	r2, [pc, #224]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b16:	4b37      	ldr	r3, [pc, #220]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d162      	bne.n	8007be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <xTaskResumeAll+0x11c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d05e      	beq.n	8007be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b26:	e02f      	b.n	8007b88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <xTaskResumeAll+0x120>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3318      	adds	r3, #24
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff f871 	bl	8006c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff f86c 	bl	8006c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b2d      	ldr	r3, [pc, #180]	; (8007c00 <xTaskResumeAll+0x124>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d903      	bls.n	8007b58 <xTaskResumeAll+0x7c>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	4a2a      	ldr	r2, [pc, #168]	; (8007c00 <xTaskResumeAll+0x124>)
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <xTaskResumeAll+0x128>)
 8007b66:	441a      	add	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f7fe fff7 	bl	8006b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <xTaskResumeAll+0x12c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <xTaskResumeAll+0x130>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b88:	4b1c      	ldr	r3, [pc, #112]	; (8007bfc <xTaskResumeAll+0x120>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1cb      	bne.n	8007b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b96:	f000 fb55 	bl	8008244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <xTaskResumeAll+0x134>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ba6:	f000 f847 	bl	8007c38 <xTaskIncrementTick>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <xTaskResumeAll+0x130>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f1      	bne.n	8007ba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <xTaskResumeAll+0x134>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <xTaskResumeAll+0x130>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <xTaskResumeAll+0x138>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007be4:	f001 f8d6 	bl	8008d94 <vPortExitCritical>

	return xAlreadyYielded;
 8007be8:	68bb      	ldr	r3, [r7, #8]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000c4c 	.word	0x20000c4c
 8007bf8:	20000c24 	.word	0x20000c24
 8007bfc:	20000be4 	.word	0x20000be4
 8007c00:	20000c2c 	.word	0x20000c2c
 8007c04:	20000754 	.word	0x20000754
 8007c08:	20000750 	.word	0x20000750
 8007c0c:	20000c38 	.word	0x20000c38
 8007c10:	20000c34 	.word	0x20000c34
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <xTaskGetTickCount+0x1c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c24:	687b      	ldr	r3, [r7, #4]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000c28 	.word	0x20000c28

08007c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c42:	4b4f      	ldr	r3, [pc, #316]	; (8007d80 <xTaskIncrementTick+0x148>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 808f 	bne.w	8007d6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c4c:	4b4d      	ldr	r3, [pc, #308]	; (8007d84 <xTaskIncrementTick+0x14c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c54:	4a4b      	ldr	r2, [pc, #300]	; (8007d84 <xTaskIncrementTick+0x14c>)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d120      	bne.n	8007ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c60:	4b49      	ldr	r3, [pc, #292]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	603b      	str	r3, [r7, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xTaskIncrementTick+0x46>
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	4b41      	ldr	r3, [pc, #260]	; (8007d8c <xTaskIncrementTick+0x154>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4a3f      	ldr	r2, [pc, #252]	; (8007d8c <xTaskIncrementTick+0x154>)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <xTaskIncrementTick+0x158>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <xTaskIncrementTick+0x158>)
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	f000 fad1 	bl	8008244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ca2:	4b3c      	ldr	r3, [pc, #240]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d349      	bcc.n	8007d40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d104      	bne.n	8007cc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cbc:	601a      	str	r2, [r3, #0]
					break;
 8007cbe:	e03f      	b.n	8007d40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc0:	4b31      	ldr	r3, [pc, #196]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d203      	bcs.n	8007ce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cd8:	4a2e      	ldr	r2, [pc, #184]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cde:	e02f      	b.n	8007d40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe ff99 	bl	8006c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3318      	adds	r3, #24
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe ff90 	bl	8006c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <xTaskIncrementTick+0x160>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d903      	bls.n	8007d10 <xTaskIncrementTick+0xd8>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <xTaskIncrementTick+0x160>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <xTaskIncrementTick+0x164>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fe ff1b 	bl	8006b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <xTaskIncrementTick+0x168>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d3b8      	bcc.n	8007cac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d3e:	e7b5      	b.n	8007cac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d40:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <xTaskIncrementTick+0x168>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d46:	4915      	ldr	r1, [pc, #84]	; (8007d9c <xTaskIncrementTick+0x164>)
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d901      	bls.n	8007d5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d5c:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <xTaskIncrementTick+0x16c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e004      	b.n	8007d74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <xTaskIncrementTick+0x170>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <xTaskIncrementTick+0x170>)
 8007d72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d74:	697b      	ldr	r3, [r7, #20]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000c4c 	.word	0x20000c4c
 8007d84:	20000c28 	.word	0x20000c28
 8007d88:	20000bdc 	.word	0x20000bdc
 8007d8c:	20000be0 	.word	0x20000be0
 8007d90:	20000c3c 	.word	0x20000c3c
 8007d94:	20000c44 	.word	0x20000c44
 8007d98:	20000c2c 	.word	0x20000c2c
 8007d9c:	20000754 	.word	0x20000754
 8007da0:	20000750 	.word	0x20000750
 8007da4:	20000c38 	.word	0x20000c38
 8007da8:	20000c34 	.word	0x20000c34

08007dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <vTaskSwitchContext+0xa8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dba:	4b27      	ldr	r3, [pc, #156]	; (8007e58 <vTaskSwitchContext+0xac>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dc0:	e041      	b.n	8007e46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007dc2:	4b25      	ldr	r3, [pc, #148]	; (8007e58 <vTaskSwitchContext+0xac>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc8:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e010      	b.n	8007df2 <vTaskSwitchContext+0x46>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <vTaskSwitchContext+0x40>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	607b      	str	r3, [r7, #4]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vTaskSwitchContext+0x3e>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	491b      	ldr	r1, [pc, #108]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0e4      	beq.n	8007dd0 <vTaskSwitchContext+0x24>
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007e12:	4413      	add	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	605a      	str	r2, [r3, #4]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	3308      	adds	r3, #8
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d104      	bne.n	8007e36 <vTaskSwitchContext+0x8a>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <vTaskSwitchContext+0xb8>)
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	4a06      	ldr	r2, [pc, #24]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6013      	str	r3, [r2, #0]
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000c4c 	.word	0x20000c4c
 8007e58:	20000c38 	.word	0x20000c38
 8007e5c:	20000c2c 	.word	0x20000c2c
 8007e60:	20000754 	.word	0x20000754
 8007e64:	20000750 	.word	0x20000750

08007e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	60fb      	str	r3, [r7, #12]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <vTaskPlaceOnEventList+0x44>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3318      	adds	r3, #24
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fe fe87 	bl	8006baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6838      	ldr	r0, [r7, #0]
 8007ea0:	f000 fa7c 	bl	800839c <prvAddCurrentTaskToDelayedList>
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000750 	.word	0x20000750

08007eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	617b      	str	r3, [r7, #20]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3318      	adds	r3, #24
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7fe fe3e 	bl	8006b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	68b8      	ldr	r0, [r7, #8]
 8007ef6:	f000 fa51 	bl	800839c <prvAddCurrentTaskToDelayedList>
	}
 8007efa:	bf00      	nop
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000750 	.word	0x20000750

08007f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60fb      	str	r3, [r7, #12]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fe6f 	bl	8006c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <xTaskRemoveFromEventList+0xb0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d11d      	bne.n	8007f82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fe66 	bl	8006c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f54:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <xTaskRemoveFromEventList+0xb4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d903      	bls.n	8007f64 <xTaskRemoveFromEventList+0x5c>
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <xTaskRemoveFromEventList+0xb4>)
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <xTaskRemoveFromEventList+0xb8>)
 8007f72:	441a      	add	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f7fe fdf1 	bl	8006b62 <vListInsertEnd>
 8007f80:	e005      	b.n	8007f8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3318      	adds	r3, #24
 8007f86:	4619      	mov	r1, r3
 8007f88:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <xTaskRemoveFromEventList+0xbc>)
 8007f8a:	f7fe fdea 	bl	8006b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f92:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <xTaskRemoveFromEventList+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d905      	bls.n	8007fa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <xTaskRemoveFromEventList+0xc4>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e001      	b.n	8007fac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fac:	697b      	ldr	r3, [r7, #20]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000c4c 	.word	0x20000c4c
 8007fbc:	20000c2c 	.word	0x20000c2c
 8007fc0:	20000754 	.word	0x20000754
 8007fc4:	20000be4 	.word	0x20000be4
 8007fc8:	20000750 	.word	0x20000750
 8007fcc:	20000c38 	.word	0x20000c38

08007fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <vTaskInternalSetTimeOutState+0x24>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <vTaskInternalSetTimeOutState+0x28>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	605a      	str	r2, [r3, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000c3c 	.word	0x20000c3c
 8007ff8:	20000c28 	.word	0x20000c28

08007ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	613b      	str	r3, [r7, #16]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	60fb      	str	r3, [r7, #12]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800803e:	f000 fe79 	bl	8008d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <xTaskCheckForTimeOut+0xbc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800805a:	d102      	bne.n	8008062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	e023      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b15      	ldr	r3, [pc, #84]	; (80080bc <xTaskCheckForTimeOut+0xc0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d007      	beq.n	800807e <xTaskCheckForTimeOut+0x82>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	d302      	bcc.n	800807e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	e015      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	429a      	cmp	r2, r3
 8008086:	d20b      	bcs.n	80080a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff9b 	bl	8007fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	e004      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080aa:	f000 fe73 	bl	8008d94 <vPortExitCritical>

	return xReturn;
 80080ae:	69fb      	ldr	r3, [r7, #28]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000c28 	.word	0x20000c28
 80080bc:	20000c3c 	.word	0x20000c3c

080080c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <vTaskMissedYield+0x14>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
}
 80080ca:	bf00      	nop
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000c38 	.word	0x20000c38

080080d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080e0:	f000 f852 	bl	8008188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <prvIdleTask+0x28>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d9f9      	bls.n	80080e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <prvIdleTask+0x2c>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080fc:	e7f0      	b.n	80080e0 <prvIdleTask+0x8>
 80080fe:	bf00      	nop
 8008100:	20000754 	.word	0x20000754
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	e00c      	b.n	800812e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4a12      	ldr	r2, [pc, #72]	; (8008168 <prvInitialiseTaskLists+0x60>)
 8008120:	4413      	add	r3, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fcf0 	bl	8006b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3301      	adds	r3, #1
 800812c:	607b      	str	r3, [r7, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b37      	cmp	r3, #55	; 0x37
 8008132:	d9ef      	bls.n	8008114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008134:	480d      	ldr	r0, [pc, #52]	; (800816c <prvInitialiseTaskLists+0x64>)
 8008136:	f7fe fce7 	bl	8006b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800813a:	480d      	ldr	r0, [pc, #52]	; (8008170 <prvInitialiseTaskLists+0x68>)
 800813c:	f7fe fce4 	bl	8006b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008140:	480c      	ldr	r0, [pc, #48]	; (8008174 <prvInitialiseTaskLists+0x6c>)
 8008142:	f7fe fce1 	bl	8006b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008146:	480c      	ldr	r0, [pc, #48]	; (8008178 <prvInitialiseTaskLists+0x70>)
 8008148:	f7fe fcde 	bl	8006b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800814c:	480b      	ldr	r0, [pc, #44]	; (800817c <prvInitialiseTaskLists+0x74>)
 800814e:	f7fe fcdb 	bl	8006b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <prvInitialiseTaskLists+0x78>)
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <prvInitialiseTaskLists+0x64>)
 8008156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvInitialiseTaskLists+0x7c>)
 800815a:	4a05      	ldr	r2, [pc, #20]	; (8008170 <prvInitialiseTaskLists+0x68>)
 800815c:	601a      	str	r2, [r3, #0]
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000754 	.word	0x20000754
 800816c:	20000bb4 	.word	0x20000bb4
 8008170:	20000bc8 	.word	0x20000bc8
 8008174:	20000be4 	.word	0x20000be4
 8008178:	20000bf8 	.word	0x20000bf8
 800817c:	20000c10 	.word	0x20000c10
 8008180:	20000bdc 	.word	0x20000bdc
 8008184:	20000be0 	.word	0x20000be0

08008188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800818e:	e019      	b.n	80081c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008190:	f000 fdd0 	bl	8008d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <prvCheckTasksWaitingTermination+0x50>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fd3b 	bl	8006c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081a6:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <prvCheckTasksWaitingTermination+0x54>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <prvCheckTasksWaitingTermination+0x54>)
 80081ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ba:	f000 fdeb 	bl	8008d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f810 	bl	80081e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081c4:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e1      	bne.n	8008190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000bf8 	.word	0x20000bf8
 80081dc:	20000c24 	.word	0x20000c24
 80081e0:	20000c0c 	.word	0x20000c0c

080081e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d108      	bne.n	8008208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ff88 	bl	8009110 <vPortFree>
				vPortFree( pxTCB );
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 ff85 	bl	8009110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008206:	e018      	b.n	800823a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800820e:	2b01      	cmp	r3, #1
 8008210:	d103      	bne.n	800821a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 ff7c 	bl	8009110 <vPortFree>
	}
 8008218:	e00f      	b.n	800823a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008220:	2b02      	cmp	r3, #2
 8008222:	d00a      	beq.n	800823a <prvDeleteTCB+0x56>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	60fb      	str	r3, [r7, #12]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <prvDeleteTCB+0x54>
	}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <prvResetNextTaskUnblockTime+0x38>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <prvResetNextTaskUnblockTime+0x3c>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800825a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800825c:	e008      	b.n	8008270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <prvResetNextTaskUnblockTime+0x38>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4a04      	ldr	r2, [pc, #16]	; (8008280 <prvResetNextTaskUnblockTime+0x3c>)
 800826e:	6013      	str	r3, [r2, #0]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000bdc 	.word	0x20000bdc
 8008280:	20000c44 	.word	0x20000c44

08008284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <xTaskGetSchedulerState+0x34>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008292:	2301      	movs	r3, #1
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	e008      	b.n	80082aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008298:	4b08      	ldr	r3, [pc, #32]	; (80082bc <xTaskGetSchedulerState+0x38>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082a0:	2302      	movs	r3, #2
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e001      	b.n	80082aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082aa:	687b      	ldr	r3, [r7, #4]
	}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	20000c30 	.word	0x20000c30
 80082bc:	20000c4c 	.word	0x20000c4c

080082c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d056      	beq.n	8008384 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082d6:	4b2e      	ldr	r3, [pc, #184]	; (8008390 <xTaskPriorityDisinherit+0xd0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d00a      	beq.n	80082f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10a      	bne.n	8008314 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008318:	1e5a      	subs	r2, r3, #1
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008326:	429a      	cmp	r2, r3
 8008328:	d02c      	beq.n	8008384 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832e:	2b00      	cmp	r3, #0
 8008330:	d128      	bne.n	8008384 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	3304      	adds	r3, #4
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fc70 	bl	8006c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008354:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <xTaskPriorityDisinherit+0xd4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d903      	bls.n	8008364 <xTaskPriorityDisinherit+0xa4>
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <xTaskPriorityDisinherit+0xd4>)
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4a09      	ldr	r2, [pc, #36]	; (8008398 <xTaskPriorityDisinherit+0xd8>)
 8008372:	441a      	add	r2, r3
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	3304      	adds	r3, #4
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7fe fbf1 	bl	8006b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008380:	2301      	movs	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008384:	697b      	ldr	r3, [r7, #20]
	}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000750 	.word	0x20000750
 8008394:	20000c2c 	.word	0x20000c2c
 8008398:	20000754 	.word	0x20000754

0800839c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083a6:	4b21      	ldr	r3, [pc, #132]	; (800842c <prvAddCurrentTaskToDelayedList+0x90>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ac:	4b20      	ldr	r3, [pc, #128]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fc32 	bl	8006c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083be:	d10a      	bne.n	80083d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4819      	ldr	r0, [pc, #100]	; (8008434 <prvAddCurrentTaskToDelayedList+0x98>)
 80083d0:	f7fe fbc7 	bl	8006b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083d4:	e026      	b.n	8008424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083de:	4b14      	ldr	r3, [pc, #80]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d209      	bcs.n	8008402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fe fbd5 	bl	8006baa <vListInsert>
}
 8008400:	e010      	b.n	8008424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008402:	4b0e      	ldr	r3, [pc, #56]	; (800843c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f7fe fbcb 	bl	8006baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	429a      	cmp	r2, r3
 800841c:	d202      	bcs.n	8008424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800841e:	4a08      	ldr	r2, [pc, #32]	; (8008440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6013      	str	r3, [r2, #0]
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20000c28 	.word	0x20000c28
 8008430:	20000750 	.word	0x20000750
 8008434:	20000c10 	.word	0x20000c10
 8008438:	20000be0 	.word	0x20000be0
 800843c:	20000bdc 	.word	0x20000bdc
 8008440:	20000c44 	.word	0x20000c44

08008444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800844e:	f000 fb07 	bl	8008a60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <xTimerCreateTimerTask+0x80>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d021      	beq.n	800849e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800845e:	2300      	movs	r3, #0
 8008460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008462:	1d3a      	adds	r2, r7, #4
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fb31 	bl	8006ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	9202      	str	r2, [sp, #8]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	2302      	movs	r3, #2
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	460a      	mov	r2, r1
 8008484:	4910      	ldr	r1, [pc, #64]	; (80084c8 <xTimerCreateTimerTask+0x84>)
 8008486:	4811      	ldr	r0, [pc, #68]	; (80084cc <xTimerCreateTimerTask+0x88>)
 8008488:	f7ff f8de 	bl	8007648 <xTaskCreateStatic>
 800848c:	4603      	mov	r3, r0
 800848e:	4a10      	ldr	r2, [pc, #64]	; (80084d0 <xTimerCreateTimerTask+0x8c>)
 8008490:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <xTimerCreateTimerTask+0x8c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800849a:	2301      	movs	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	613b      	str	r3, [r7, #16]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084ba:	697b      	ldr	r3, [r7, #20]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000c80 	.word	0x20000c80
 80084c8:	0800a2b8 	.word	0x0800a2b8
 80084cc:	08008609 	.word	0x08008609
 80084d0:	20000c84 	.word	0x20000c84

080084d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	; 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <xTimerGenericCommand+0x2e>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	623b      	str	r3, [r7, #32]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008502:	4b1a      	ldr	r3, [pc, #104]	; (800856c <xTimerGenericCommand+0x98>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d02a      	beq.n	8008560 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b05      	cmp	r3, #5
 800851a:	dc18      	bgt.n	800854e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800851c:	f7ff feb2 	bl	8008284 <xTaskGetSchedulerState>
 8008520:	4603      	mov	r3, r0
 8008522:	2b02      	cmp	r3, #2
 8008524:	d109      	bne.n	800853a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008526:	4b11      	ldr	r3, [pc, #68]	; (800856c <xTimerGenericCommand+0x98>)
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f107 0110 	add.w	r1, r7, #16
 800852e:	2300      	movs	r3, #0
 8008530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008532:	f7fe fca1 	bl	8006e78 <xQueueGenericSend>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24
 8008538:	e012      	b.n	8008560 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <xTimerGenericCommand+0x98>)
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	f107 0110 	add.w	r1, r7, #16
 8008542:	2300      	movs	r3, #0
 8008544:	2200      	movs	r2, #0
 8008546:	f7fe fc97 	bl	8006e78 <xQueueGenericSend>
 800854a:	6278      	str	r0, [r7, #36]	; 0x24
 800854c:	e008      	b.n	8008560 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <xTimerGenericCommand+0x98>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f107 0110 	add.w	r1, r7, #16
 8008556:	2300      	movs	r3, #0
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	f7fe fd8b 	bl	8007074 <xQueueGenericSendFromISR>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008562:	4618      	mov	r0, r3
 8008564:	3728      	adds	r7, #40	; 0x28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000c80 	.word	0x20000c80

08008570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857a:	4b22      	ldr	r3, [pc, #136]	; (8008604 <prvProcessExpiredTimer+0x94>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	3304      	adds	r3, #4
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fb47 	bl	8006c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d022      	beq.n	80085e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	18d1      	adds	r1, r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	6978      	ldr	r0, [r7, #20]
 80085aa:	f000 f8d1 	bl	8008750 <prvInsertTimerInActiveList>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01f      	beq.n	80085f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085b4:	2300      	movs	r3, #0
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2300      	movs	r3, #0
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	f7ff ff88 	bl	80084d4 <xTimerGenericCommand>
 80085c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d113      	bne.n	80085f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	6978      	ldr	r0, [r7, #20]
 80085fa:	4798      	blx	r3
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20000c78 	.word	0x20000c78

08008608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f857 	bl	80086c8 <prvGetNextExpireTime>
 800861a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4619      	mov	r1, r3
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f803 	bl	800862c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008626:	f000 f8d5 	bl	80087d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800862a:	e7f1      	b.n	8008610 <prvTimerTask+0x8>

0800862c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008636:	f7ff fa43 	bl	8007ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f866 	bl	8008710 <prvSampleTimeNow>
 8008644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d130      	bne.n	80086ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <prvProcessTimerOrBlockTask+0x3c>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	429a      	cmp	r2, r3
 8008658:	d806      	bhi.n	8008668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800865a:	f7ff fa3f 	bl	8007adc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800865e:	68f9      	ldr	r1, [r7, #12]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff85 	bl	8008570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008666:	e024      	b.n	80086b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <prvProcessTimerOrBlockTask+0x90>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <prvProcessTimerOrBlockTask+0x50>
 8008678:	2301      	movs	r3, #1
 800867a:	e000      	b.n	800867e <prvProcessTimerOrBlockTask+0x52>
 800867c:	2300      	movs	r3, #0
 800867e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <prvProcessTimerOrBlockTask+0x94>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4619      	mov	r1, r3
 800868e:	f7fe ffa7 	bl	80075e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008692:	f7ff fa23 	bl	8007adc <xTaskResumeAll>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <prvProcessTimerOrBlockTask+0x98>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
}
 80086ac:	e001      	b.n	80086b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086ae:	f7ff fa15 	bl	8007adc <xTaskResumeAll>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000c7c 	.word	0x20000c7c
 80086c0:	20000c80 	.word	0x20000c80
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086d0:	4b0e      	ldr	r3, [pc, #56]	; (800870c <prvGetNextExpireTime+0x44>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <prvGetNextExpireTime+0x16>
 80086da:	2201      	movs	r2, #1
 80086dc:	e000      	b.n	80086e0 <prvGetNextExpireTime+0x18>
 80086de:	2200      	movs	r2, #0
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086ec:	4b07      	ldr	r3, [pc, #28]	; (800870c <prvGetNextExpireTime+0x44>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e001      	b.n	80086fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086fc:	68fb      	ldr	r3, [r7, #12]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20000c78 	.word	0x20000c78

08008710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008718:	f7ff fa7e 	bl	8007c18 <xTaskGetTickCount>
 800871c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800871e:	4b0b      	ldr	r3, [pc, #44]	; (800874c <prvSampleTimeNow+0x3c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	429a      	cmp	r2, r3
 8008726:	d205      	bcs.n	8008734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008728:	f000 f936 	bl	8008998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e002      	b.n	800873a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800873a:	4a04      	ldr	r2, [pc, #16]	; (800874c <prvSampleTimeNow+0x3c>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008740:	68fb      	ldr	r3, [r7, #12]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000c88 	.word	0x20000c88

08008750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d812      	bhi.n	800879c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	1ad2      	subs	r2, r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	429a      	cmp	r2, r3
 8008782:	d302      	bcc.n	800878a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008784:	2301      	movs	r3, #1
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e01b      	b.n	80087c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <prvInsertTimerInActiveList+0x7c>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3304      	adds	r3, #4
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f7fe fa08 	bl	8006baa <vListInsert>
 800879a:	e012      	b.n	80087c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d206      	bcs.n	80087b2 <prvInsertTimerInActiveList+0x62>
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d302      	bcc.n	80087b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e007      	b.n	80087c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <prvInsertTimerInActiveList+0x80>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f7fe f9f4 	bl	8006baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087c2:	697b      	ldr	r3, [r7, #20]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000c7c 	.word	0x20000c7c
 80087d0:	20000c78 	.word	0x20000c78

080087d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08e      	sub	sp, #56	; 0x38
 80087d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087da:	e0ca      	b.n	8008972 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da18      	bge.n	8008814 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087e2:	1d3b      	adds	r3, r7, #4
 80087e4:	3304      	adds	r3, #4
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	61fb      	str	r3, [r7, #28]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880a:	6850      	ldr	r0, [r2, #4]
 800880c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880e:	6892      	ldr	r2, [r2, #8]
 8008810:	4611      	mov	r1, r2
 8008812:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f2c0 80aa 	blt.w	8008970 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	3304      	adds	r3, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe f9f5 	bl	8006c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008832:	463b      	mov	r3, r7
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff ff6b 	bl	8008710 <prvSampleTimeNow>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b09      	cmp	r3, #9
 8008840:	f200 8097 	bhi.w	8008972 <prvProcessReceivedCommands+0x19e>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <prvProcessReceivedCommands+0x78>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008875 	.word	0x08008875
 8008850:	08008875 	.word	0x08008875
 8008854:	08008875 	.word	0x08008875
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088fd 	.word	0x080088fd
 8008860:	08008947 	.word	0x08008947
 8008864:	08008875 	.word	0x08008875
 8008868:	08008875 	.word	0x08008875
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088fd 	.word	0x080088fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	18d1      	adds	r1, r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008894:	f7ff ff5c 	bl	8008750 <prvInsertTimerInActiveList>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d069      	beq.n	8008972 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05e      	beq.n	8008972 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	441a      	add	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	2300      	movs	r3, #0
 80088c2:	2100      	movs	r1, #0
 80088c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c6:	f7ff fe05 	bl	80084d4 <xTimerGenericCommand>
 80088ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d14f      	bne.n	8008972 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	61bb      	str	r3, [r7, #24]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088fa:	e03a      	b.n	8008972 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	617b      	str	r3, [r7, #20]
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	18d1      	adds	r1, r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008940:	f7ff ff06 	bl	8008750 <prvInsertTimerInActiveList>
					break;
 8008944:	e015      	b.n	8008972 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008956:	f000 fbdb 	bl	8009110 <vPortFree>
 800895a:	e00a      	b.n	8008972 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800896e:	e000      	b.n	8008972 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008972:	4b08      	ldr	r3, [pc, #32]	; (8008994 <prvProcessReceivedCommands+0x1c0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	1d39      	adds	r1, r7, #4
 8008978:	2200      	movs	r2, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fc16 	bl	80071ac <xQueueReceive>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	f47f af2a 	bne.w	80087dc <prvProcessReceivedCommands+0x8>
	}
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	3730      	adds	r7, #48	; 0x30
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000c80 	.word	0x20000c80

08008998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800899e:	e048      	b.n	8008a32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089a0:	4b2d      	ldr	r3, [pc, #180]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089aa:	4b2b      	ldr	r3, [pc, #172]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe f92f 	bl	8006c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d02e      	beq.n	8008a32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4413      	add	r3, r2
 80089dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d90e      	bls.n	8008a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089f2:	4b19      	ldr	r3, [pc, #100]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3304      	adds	r3, #4
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7fe f8d4 	bl	8006baa <vListInsert>
 8008a02:	e016      	b.n	8008a32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a04:	2300      	movs	r3, #0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7ff fd60 	bl	80084d4 <xTimerGenericCommand>
 8008a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	603b      	str	r3, [r7, #0]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1b1      	bne.n	80089a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <prvSwitchTimerLists+0xc4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a04      	ldr	r2, [pc, #16]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 8008a48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a4a:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <prvSwitchTimerLists+0xc4>)
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	6013      	str	r3, [r2, #0]
}
 8008a50:	bf00      	nop
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000c78 	.word	0x20000c78
 8008a5c:	20000c7c 	.word	0x20000c7c

08008a60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a66:	f000 f965 	bl	8008d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d120      	bne.n	8008ab4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a72:	4814      	ldr	r0, [pc, #80]	; (8008ac4 <prvCheckForValidListAndQueue+0x64>)
 8008a74:	f7fe f848 	bl	8006b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a78:	4813      	ldr	r0, [pc, #76]	; (8008ac8 <prvCheckForValidListAndQueue+0x68>)
 8008a7a:	f7fe f845 	bl	8006b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <prvCheckForValidListAndQueue+0x6c>)
 8008a80:	4a10      	ldr	r2, [pc, #64]	; (8008ac4 <prvCheckForValidListAndQueue+0x64>)
 8008a82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a84:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <prvCheckForValidListAndQueue+0x70>)
 8008a86:	4a10      	ldr	r2, [pc, #64]	; (8008ac8 <prvCheckForValidListAndQueue+0x68>)
 8008a88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <prvCheckForValidListAndQueue+0x74>)
 8008a90:	4a11      	ldr	r2, [pc, #68]	; (8008ad8 <prvCheckForValidListAndQueue+0x78>)
 8008a92:	2110      	movs	r1, #16
 8008a94:	200a      	movs	r0, #10
 8008a96:	f7fe f953 	bl	8006d40 <xQueueGenericCreateStatic>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008a9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008aa8:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	490b      	ldr	r1, [pc, #44]	; (8008adc <prvCheckForValidListAndQueue+0x7c>)
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fd6c 	bl	800758c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ab4:	f000 f96e 	bl	8008d94 <vPortExitCritical>
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000c80 	.word	0x20000c80
 8008ac4:	20000c50 	.word	0x20000c50
 8008ac8:	20000c64 	.word	0x20000c64
 8008acc:	20000c78 	.word	0x20000c78
 8008ad0:	20000c7c 	.word	0x20000c7c
 8008ad4:	20000d2c 	.word	0x20000d2c
 8008ad8:	20000c8c 	.word	0x20000c8c
 8008adc:	0800a2c0 	.word	0x0800a2c0

08008ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3b04      	subs	r3, #4
 8008af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3b04      	subs	r3, #4
 8008afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0201 	bic.w	r2, r3, #1
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b10:	4a0c      	ldr	r2, [pc, #48]	; (8008b44 <pxPortInitialiseStack+0x64>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b14      	subs	r3, #20
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f06f 0202 	mvn.w	r2, #2
 8008b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3b20      	subs	r3, #32
 8008b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b36:	68fb      	ldr	r3, [r7, #12]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	08008b49 	.word	0x08008b49

08008b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <prvTaskExitError+0x54>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b5a:	d00a      	beq.n	8008b72 <prvTaskExitError+0x2a>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <prvTaskExitError+0x28>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60bb      	str	r3, [r7, #8]
}
 8008b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b86:	bf00      	nop
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0fc      	beq.n	8008b88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	2000000c 	.word	0x2000000c

08008ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <pxCurrentTCBConst2>)
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	6808      	ldr	r0, [r1, #0]
 8008ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	f380 8809 	msr	PSP, r0
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8811 	msr	BASEPRI, r0
 8008bba:	4770      	bx	lr
 8008bbc:	f3af 8000 	nop.w

08008bc0 <pxCurrentTCBConst2>:
 8008bc0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop

08008bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bc8:	4808      	ldr	r0, [pc, #32]	; (8008bec <prvPortStartFirstTask+0x24>)
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	6800      	ldr	r0, [r0, #0]
 8008bce:	f380 8808 	msr	MSP, r0
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8814 	msr	CONTROL, r0
 8008bda:	b662      	cpsie	i
 8008bdc:	b661      	cpsie	f
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	df00      	svc	0
 8008be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bea:	bf00      	nop
 8008bec:	e000ed08 	.word	0xe000ed08

08008bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bf6:	4b46      	ldr	r3, [pc, #280]	; (8008d10 <xPortStartScheduler+0x120>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a46      	ldr	r2, [pc, #280]	; (8008d14 <xPortStartScheduler+0x124>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10a      	bne.n	8008c16 <xPortStartScheduler+0x26>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	613b      	str	r3, [r7, #16]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c16:	4b3e      	ldr	r3, [pc, #248]	; (8008d10 <xPortStartScheduler+0x120>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	; (8008d18 <xPortStartScheduler+0x128>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10a      	bne.n	8008c36 <xPortStartScheduler+0x46>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	60fb      	str	r3, [r7, #12]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c36:	4b39      	ldr	r3, [pc, #228]	; (8008d1c <xPortStartScheduler+0x12c>)
 8008c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	22ff      	movs	r2, #255	; 0xff
 8008c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	4b31      	ldr	r3, [pc, #196]	; (8008d20 <xPortStartScheduler+0x130>)
 8008c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c5e:	4b31      	ldr	r3, [pc, #196]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c64:	e009      	b.n	8008c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c66:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	4a2d      	ldr	r2, [pc, #180]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c82:	2b80      	cmp	r3, #128	; 0x80
 8008c84:	d0ef      	beq.n	8008c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c86:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f1c3 0307 	rsb	r3, r3, #7
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d00a      	beq.n	8008ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ca8:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <xPortStartScheduler+0x134>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <xPortStartScheduler+0x134>)
 8008cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cb2:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <xPortStartScheduler+0x134>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cba:	4a1a      	ldr	r2, [pc, #104]	; (8008d24 <xPortStartScheduler+0x134>)
 8008cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cc6:	4b18      	ldr	r3, [pc, #96]	; (8008d28 <xPortStartScheduler+0x138>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <xPortStartScheduler+0x138>)
 8008ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <xPortStartScheduler+0x138>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <xPortStartScheduler+0x138>)
 8008cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cde:	f000 f8dd 	bl	8008e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <xPortStartScheduler+0x13c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ce8:	f000 f8fc 	bl	8008ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cec:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <xPortStartScheduler+0x140>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a0f      	ldr	r2, [pc, #60]	; (8008d30 <xPortStartScheduler+0x140>)
 8008cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cf8:	f7ff ff66 	bl	8008bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cfc:	f7ff f856 	bl	8007dac <vTaskSwitchContext>
	prvTaskExitError();
 8008d00:	f7ff ff22 	bl	8008b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	e000ed00 	.word	0xe000ed00
 8008d14:	410fc271 	.word	0x410fc271
 8008d18:	410fc270 	.word	0x410fc270
 8008d1c:	e000e400 	.word	0xe000e400
 8008d20:	20000d7c 	.word	0x20000d7c
 8008d24:	20000d80 	.word	0x20000d80
 8008d28:	e000ed20 	.word	0xe000ed20
 8008d2c:	2000000c 	.word	0x2000000c
 8008d30:	e000ef34 	.word	0xe000ef34

08008d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	607b      	str	r3, [r7, #4]
}
 8008d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <vPortEnterCritical+0x58>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	4a0d      	ldr	r2, [pc, #52]	; (8008d8c <vPortEnterCritical+0x58>)
 8008d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d58:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <vPortEnterCritical+0x58>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d10f      	bne.n	8008d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <vPortEnterCritical+0x5c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	603b      	str	r3, [r7, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <vPortEnterCritical+0x4a>
	}
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	2000000c 	.word	0x2000000c
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d9a:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <vPortExitCritical+0x50>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <vPortExitCritical+0x24>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	607b      	str	r3, [r7, #4]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <vPortExitCritical+0x50>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <vPortExitCritical+0x50>)
 8008dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <vPortExitCritical+0x50>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <vPortExitCritical+0x42>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	f383 8811 	msr	BASEPRI, r3
}
 8008dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2000000c 	.word	0x2000000c
	...

08008df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <pxCurrentTCBConst>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	f01e 0f10 	tst.w	lr, #16
 8008e00:	bf08      	it	eq
 8008e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e14:	f380 8811 	msr	BASEPRI, r0
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f7fe ffc4 	bl	8007dac <vTaskSwitchContext>
 8008e24:	f04f 0000 	mov.w	r0, #0
 8008e28:	f380 8811 	msr	BASEPRI, r0
 8008e2c:	bc09      	pop	{r0, r3}
 8008e2e:	6819      	ldr	r1, [r3, #0]
 8008e30:	6808      	ldr	r0, [r1, #0]
 8008e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e36:	f01e 0f10 	tst.w	lr, #16
 8008e3a:	bf08      	it	eq
 8008e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e40:	f380 8809 	msr	PSP, r0
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	f3af 8000 	nop.w

08008e50 <pxCurrentTCBConst>:
 8008e50:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e72:	f7fe fee1 	bl	8007c38 <xTaskIncrementTick>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <xPortSysTickHandler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
}
 8008e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <vPortSetupTimerInterrupt+0x38>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <vPortSetupTimerInterrupt+0x3c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <vPortSetupTimerInterrupt+0x40>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <vPortSetupTimerInterrupt+0x44>)
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ebe:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	e000e010 	.word	0xe000e010
 8008ed4:	e000e018 	.word	0xe000e018
 8008ed8:	20000000 	.word	0x20000000
 8008edc:	10624dd3 	.word	0x10624dd3
 8008ee0:	e000e014 	.word	0xe000e014

08008ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ef4 <vPortEnableVFP+0x10>
 8008ee8:	6801      	ldr	r1, [r0, #0]
 8008eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eee:	6001      	str	r1, [r0, #0]
 8008ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ef2:	bf00      	nop
 8008ef4:	e000ed88 	.word	0xe000ed88

08008ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008efe:	f3ef 8305 	mrs	r3, IPSR
 8008f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b0f      	cmp	r3, #15
 8008f08:	d914      	bls.n	8008f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f0a:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <vPortValidateInterruptPriority+0x70>)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f14:	4b15      	ldr	r3, [pc, #84]	; (8008f6c <vPortValidateInterruptPriority+0x74>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	7afa      	ldrb	r2, [r7, #11]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d20a      	bcs.n	8008f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	607b      	str	r3, [r7, #4]
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <vPortValidateInterruptPriority+0x78>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <vPortValidateInterruptPriority+0x7c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d90a      	bls.n	8008f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	603b      	str	r3, [r7, #0]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <vPortValidateInterruptPriority+0x60>
	}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	e000e3f0 	.word	0xe000e3f0
 8008f6c:	20000d7c 	.word	0x20000d7c
 8008f70:	e000ed0c 	.word	0xe000ed0c
 8008f74:	20000d80 	.word	0x20000d80

08008f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	; 0x28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f84:	f7fe fd9c 	bl	8007ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f88:	4b5b      	ldr	r3, [pc, #364]	; (80090f8 <pvPortMalloc+0x180>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f90:	f000 f920 	bl	80091d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f94:	4b59      	ldr	r3, [pc, #356]	; (80090fc <pvPortMalloc+0x184>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 8093 	bne.w	80090c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01d      	beq.n	8008fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fa8:	2208      	movs	r2, #8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4413      	add	r3, r2
 8008fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d014      	beq.n	8008fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	617b      	str	r3, [r7, #20]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d06e      	beq.n	80090c8 <pvPortMalloc+0x150>
 8008fea:	4b45      	ldr	r3, [pc, #276]	; (8009100 <pvPortMalloc+0x188>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d869      	bhi.n	80090c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ff4:	4b43      	ldr	r3, [pc, #268]	; (8009104 <pvPortMalloc+0x18c>)
 8008ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ff8:	4b42      	ldr	r3, [pc, #264]	; (8009104 <pvPortMalloc+0x18c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ffe:	e004      	b.n	800900a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d903      	bls.n	800901c <pvPortMalloc+0xa4>
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f1      	bne.n	8009000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800901c:	4b36      	ldr	r3, [pc, #216]	; (80090f8 <pvPortMalloc+0x180>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009022:	429a      	cmp	r2, r3
 8009024:	d050      	beq.n	80090c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2208      	movs	r2, #8
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	2308      	movs	r3, #8
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	429a      	cmp	r2, r3
 8009046:	d91f      	bls.n	8009088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <pvPortMalloc+0xf8>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	613b      	str	r3, [r7, #16]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	1ad2      	subs	r2, r2, r3
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009082:	69b8      	ldr	r0, [r7, #24]
 8009084:	f000 f908 	bl	8009298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009088:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <pvPortMalloc+0x188>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1b      	ldr	r2, [pc, #108]	; (8009100 <pvPortMalloc+0x188>)
 8009094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009096:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <pvPortMalloc+0x188>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <pvPortMalloc+0x190>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d203      	bcs.n	80090aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090a2:	4b17      	ldr	r3, [pc, #92]	; (8009100 <pvPortMalloc+0x188>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a18      	ldr	r2, [pc, #96]	; (8009108 <pvPortMalloc+0x190>)
 80090a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	4b13      	ldr	r3, [pc, #76]	; (80090fc <pvPortMalloc+0x184>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <pvPortMalloc+0x194>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	4a11      	ldr	r2, [pc, #68]	; (800910c <pvPortMalloc+0x194>)
 80090c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090c8:	f7fe fd08 	bl	8007adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <pvPortMalloc+0x174>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60fb      	str	r3, [r7, #12]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <pvPortMalloc+0x172>
	return pvReturn;
 80090ec:	69fb      	ldr	r3, [r7, #28]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3728      	adds	r7, #40	; 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001944 	.word	0x20001944
 80090fc:	20001958 	.word	0x20001958
 8009100:	20001948 	.word	0x20001948
 8009104:	2000193c 	.word	0x2000193c
 8009108:	2000194c 	.word	0x2000194c
 800910c:	20001950 	.word	0x20001950

08009110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d04d      	beq.n	80091be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009122:	2308      	movs	r3, #8
 8009124:	425b      	negs	r3, r3
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4413      	add	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <vPortFree+0xb8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4013      	ands	r3, r2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <vPortFree+0x44>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	60fb      	str	r3, [r7, #12]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <vPortFree+0x62>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	60bb      	str	r3, [r7, #8]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <vPortFree+0xb8>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01e      	beq.n	80091be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d11a      	bne.n	80091be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <vPortFree+0xb8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	43db      	mvns	r3, r3
 8009192:	401a      	ands	r2, r3
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009198:	f7fe fc92 	bl	8007ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <vPortFree+0xbc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4413      	add	r3, r2
 80091a6:	4a09      	ldr	r2, [pc, #36]	; (80091cc <vPortFree+0xbc>)
 80091a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091aa:	6938      	ldr	r0, [r7, #16]
 80091ac:	f000 f874 	bl	8009298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <vPortFree+0xc0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	4a06      	ldr	r2, [pc, #24]	; (80091d0 <vPortFree+0xc0>)
 80091b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091ba:	f7fe fc8f 	bl	8007adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091be:	bf00      	nop
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001958 	.word	0x20001958
 80091cc:	20001948 	.word	0x20001948
 80091d0:	20001954 	.word	0x20001954

080091d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80091de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091e0:	4b27      	ldr	r3, [pc, #156]	; (8009280 <prvHeapInit+0xac>)
 80091e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00c      	beq.n	8009208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3307      	adds	r3, #7
 80091f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <prvHeapInit+0xac>)
 8009204:	4413      	add	r3, r2
 8009206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800920c:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <prvHeapInit+0xb0>)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009212:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <prvHeapInit+0xb0>)
 8009214:	2200      	movs	r2, #0
 8009216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009220:	2208      	movs	r2, #8
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0307 	bic.w	r3, r3, #7
 800922e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a15      	ldr	r2, [pc, #84]	; (8009288 <prvHeapInit+0xb4>)
 8009234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <prvHeapInit+0xb4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800923e:	4b12      	ldr	r3, [pc, #72]	; (8009288 <prvHeapInit+0xb4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	1ad2      	subs	r2, r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009254:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvHeapInit+0xb4>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <prvHeapInit+0xb8>)
 8009262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	4a09      	ldr	r2, [pc, #36]	; (8009290 <prvHeapInit+0xbc>)
 800926a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <prvHeapInit+0xc0>)
 800926e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	20000d84 	.word	0x20000d84
 8009284:	2000193c 	.word	0x2000193c
 8009288:	20001944 	.word	0x20001944
 800928c:	2000194c 	.word	0x2000194c
 8009290:	20001948 	.word	0x20001948
 8009294:	20001958 	.word	0x20001958

08009298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092a0:	4b28      	ldr	r3, [pc, #160]	; (8009344 <prvInsertBlockIntoFreeList+0xac>)
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e002      	b.n	80092ac <prvInsertBlockIntoFreeList+0x14>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d8f7      	bhi.n	80092a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	4413      	add	r3, r2
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d108      	bne.n	80092da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	441a      	add	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d118      	bne.n	8009320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	4b15      	ldr	r3, [pc, #84]	; (8009348 <prvInsertBlockIntoFreeList+0xb0>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d00d      	beq.n	8009316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	441a      	add	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e008      	b.n	8009328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <prvInsertBlockIntoFreeList+0xb0>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e003      	b.n	8009328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d002      	beq.n	8009336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009336:	bf00      	nop
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	2000193c 	.word	0x2000193c
 8009348:	20001944 	.word	0x20001944

0800934c <__errno>:
 800934c:	4b01      	ldr	r3, [pc, #4]	; (8009354 <__errno+0x8>)
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000010 	.word	0x20000010

08009358 <__libc_init_array>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	4d0d      	ldr	r5, [pc, #52]	; (8009390 <__libc_init_array+0x38>)
 800935c:	4c0d      	ldr	r4, [pc, #52]	; (8009394 <__libc_init_array+0x3c>)
 800935e:	1b64      	subs	r4, r4, r5
 8009360:	10a4      	asrs	r4, r4, #2
 8009362:	2600      	movs	r6, #0
 8009364:	42a6      	cmp	r6, r4
 8009366:	d109      	bne.n	800937c <__libc_init_array+0x24>
 8009368:	4d0b      	ldr	r5, [pc, #44]	; (8009398 <__libc_init_array+0x40>)
 800936a:	4c0c      	ldr	r4, [pc, #48]	; (800939c <__libc_init_array+0x44>)
 800936c:	f000 ff84 	bl	800a278 <_init>
 8009370:	1b64      	subs	r4, r4, r5
 8009372:	10a4      	asrs	r4, r4, #2
 8009374:	2600      	movs	r6, #0
 8009376:	42a6      	cmp	r6, r4
 8009378:	d105      	bne.n	8009386 <__libc_init_array+0x2e>
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009380:	4798      	blx	r3
 8009382:	3601      	adds	r6, #1
 8009384:	e7ee      	b.n	8009364 <__libc_init_array+0xc>
 8009386:	f855 3b04 	ldr.w	r3, [r5], #4
 800938a:	4798      	blx	r3
 800938c:	3601      	adds	r6, #1
 800938e:	e7f2      	b.n	8009376 <__libc_init_array+0x1e>
 8009390:	0800a3d4 	.word	0x0800a3d4
 8009394:	0800a3d4 	.word	0x0800a3d4
 8009398:	0800a3d4 	.word	0x0800a3d4
 800939c:	0800a3d8 	.word	0x0800a3d8

080093a0 <memcpy>:
 80093a0:	440a      	add	r2, r1
 80093a2:	4291      	cmp	r1, r2
 80093a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093a8:	d100      	bne.n	80093ac <memcpy+0xc>
 80093aa:	4770      	bx	lr
 80093ac:	b510      	push	{r4, lr}
 80093ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093b6:	4291      	cmp	r1, r2
 80093b8:	d1f9      	bne.n	80093ae <memcpy+0xe>
 80093ba:	bd10      	pop	{r4, pc}

080093bc <memset>:
 80093bc:	4402      	add	r2, r0
 80093be:	4603      	mov	r3, r0
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d100      	bne.n	80093c6 <memset+0xa>
 80093c4:	4770      	bx	lr
 80093c6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ca:	e7f9      	b.n	80093c0 <memset+0x4>

080093cc <iprintf>:
 80093cc:	b40f      	push	{r0, r1, r2, r3}
 80093ce:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <iprintf+0x2c>)
 80093d0:	b513      	push	{r0, r1, r4, lr}
 80093d2:	681c      	ldr	r4, [r3, #0]
 80093d4:	b124      	cbz	r4, 80093e0 <iprintf+0x14>
 80093d6:	69a3      	ldr	r3, [r4, #24]
 80093d8:	b913      	cbnz	r3, 80093e0 <iprintf+0x14>
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 f866 	bl	80094ac <__sinit>
 80093e0:	ab05      	add	r3, sp, #20
 80093e2:	9a04      	ldr	r2, [sp, #16]
 80093e4:	68a1      	ldr	r1, [r4, #8]
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 f983 	bl	80096f4 <_vfiprintf_r>
 80093ee:	b002      	add	sp, #8
 80093f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f4:	b004      	add	sp, #16
 80093f6:	4770      	bx	lr
 80093f8:	20000010 	.word	0x20000010

080093fc <std>:
 80093fc:	2300      	movs	r3, #0
 80093fe:	b510      	push	{r4, lr}
 8009400:	4604      	mov	r4, r0
 8009402:	e9c0 3300 	strd	r3, r3, [r0]
 8009406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800940a:	6083      	str	r3, [r0, #8]
 800940c:	8181      	strh	r1, [r0, #12]
 800940e:	6643      	str	r3, [r0, #100]	; 0x64
 8009410:	81c2      	strh	r2, [r0, #14]
 8009412:	6183      	str	r3, [r0, #24]
 8009414:	4619      	mov	r1, r3
 8009416:	2208      	movs	r2, #8
 8009418:	305c      	adds	r0, #92	; 0x5c
 800941a:	f7ff ffcf 	bl	80093bc <memset>
 800941e:	4b05      	ldr	r3, [pc, #20]	; (8009434 <std+0x38>)
 8009420:	6263      	str	r3, [r4, #36]	; 0x24
 8009422:	4b05      	ldr	r3, [pc, #20]	; (8009438 <std+0x3c>)
 8009424:	62a3      	str	r3, [r4, #40]	; 0x28
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <std+0x40>)
 8009428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <std+0x44>)
 800942c:	6224      	str	r4, [r4, #32]
 800942e:	6323      	str	r3, [r4, #48]	; 0x30
 8009430:	bd10      	pop	{r4, pc}
 8009432:	bf00      	nop
 8009434:	08009c9d 	.word	0x08009c9d
 8009438:	08009cbf 	.word	0x08009cbf
 800943c:	08009cf7 	.word	0x08009cf7
 8009440:	08009d1b 	.word	0x08009d1b

08009444 <_cleanup_r>:
 8009444:	4901      	ldr	r1, [pc, #4]	; (800944c <_cleanup_r+0x8>)
 8009446:	f000 b8af 	b.w	80095a8 <_fwalk_reent>
 800944a:	bf00      	nop
 800944c:	08009ff5 	.word	0x08009ff5

08009450 <__sfmoreglue>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	1e4a      	subs	r2, r1, #1
 8009454:	2568      	movs	r5, #104	; 0x68
 8009456:	4355      	muls	r5, r2
 8009458:	460e      	mov	r6, r1
 800945a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800945e:	f000 f8c5 	bl	80095ec <_malloc_r>
 8009462:	4604      	mov	r4, r0
 8009464:	b140      	cbz	r0, 8009478 <__sfmoreglue+0x28>
 8009466:	2100      	movs	r1, #0
 8009468:	e9c0 1600 	strd	r1, r6, [r0]
 800946c:	300c      	adds	r0, #12
 800946e:	60a0      	str	r0, [r4, #8]
 8009470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009474:	f7ff ffa2 	bl	80093bc <memset>
 8009478:	4620      	mov	r0, r4
 800947a:	bd70      	pop	{r4, r5, r6, pc}

0800947c <__sfp_lock_acquire>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__sfp_lock_acquire+0x8>)
 800947e:	f000 b8b3 	b.w	80095e8 <__retarget_lock_acquire_recursive>
 8009482:	bf00      	nop
 8009484:	20001bcc 	.word	0x20001bcc

08009488 <__sfp_lock_release>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__sfp_lock_release+0x8>)
 800948a:	f000 b8ae 	b.w	80095ea <__retarget_lock_release_recursive>
 800948e:	bf00      	nop
 8009490:	20001bcc 	.word	0x20001bcc

08009494 <__sinit_lock_acquire>:
 8009494:	4801      	ldr	r0, [pc, #4]	; (800949c <__sinit_lock_acquire+0x8>)
 8009496:	f000 b8a7 	b.w	80095e8 <__retarget_lock_acquire_recursive>
 800949a:	bf00      	nop
 800949c:	20001bc7 	.word	0x20001bc7

080094a0 <__sinit_lock_release>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__sinit_lock_release+0x8>)
 80094a2:	f000 b8a2 	b.w	80095ea <__retarget_lock_release_recursive>
 80094a6:	bf00      	nop
 80094a8:	20001bc7 	.word	0x20001bc7

080094ac <__sinit>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	f7ff fff0 	bl	8009494 <__sinit_lock_acquire>
 80094b4:	69a3      	ldr	r3, [r4, #24]
 80094b6:	b11b      	cbz	r3, 80094c0 <__sinit+0x14>
 80094b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094bc:	f7ff bff0 	b.w	80094a0 <__sinit_lock_release>
 80094c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094c4:	6523      	str	r3, [r4, #80]	; 0x50
 80094c6:	4b13      	ldr	r3, [pc, #76]	; (8009514 <__sinit+0x68>)
 80094c8:	4a13      	ldr	r2, [pc, #76]	; (8009518 <__sinit+0x6c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	bf04      	itt	eq
 80094d2:	2301      	moveq	r3, #1
 80094d4:	61a3      	streq	r3, [r4, #24]
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 f820 	bl	800951c <__sfp>
 80094dc:	6060      	str	r0, [r4, #4]
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f81c 	bl	800951c <__sfp>
 80094e4:	60a0      	str	r0, [r4, #8]
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 f818 	bl	800951c <__sfp>
 80094ec:	2200      	movs	r2, #0
 80094ee:	60e0      	str	r0, [r4, #12]
 80094f0:	2104      	movs	r1, #4
 80094f2:	6860      	ldr	r0, [r4, #4]
 80094f4:	f7ff ff82 	bl	80093fc <std>
 80094f8:	68a0      	ldr	r0, [r4, #8]
 80094fa:	2201      	movs	r2, #1
 80094fc:	2109      	movs	r1, #9
 80094fe:	f7ff ff7d 	bl	80093fc <std>
 8009502:	68e0      	ldr	r0, [r4, #12]
 8009504:	2202      	movs	r2, #2
 8009506:	2112      	movs	r1, #18
 8009508:	f7ff ff78 	bl	80093fc <std>
 800950c:	2301      	movs	r3, #1
 800950e:	61a3      	str	r3, [r4, #24]
 8009510:	e7d2      	b.n	80094b8 <__sinit+0xc>
 8009512:	bf00      	nop
 8009514:	0800a334 	.word	0x0800a334
 8009518:	08009445 	.word	0x08009445

0800951c <__sfp>:
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951e:	4607      	mov	r7, r0
 8009520:	f7ff ffac 	bl	800947c <__sfp_lock_acquire>
 8009524:	4b1e      	ldr	r3, [pc, #120]	; (80095a0 <__sfp+0x84>)
 8009526:	681e      	ldr	r6, [r3, #0]
 8009528:	69b3      	ldr	r3, [r6, #24]
 800952a:	b913      	cbnz	r3, 8009532 <__sfp+0x16>
 800952c:	4630      	mov	r0, r6
 800952e:	f7ff ffbd 	bl	80094ac <__sinit>
 8009532:	3648      	adds	r6, #72	; 0x48
 8009534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009538:	3b01      	subs	r3, #1
 800953a:	d503      	bpl.n	8009544 <__sfp+0x28>
 800953c:	6833      	ldr	r3, [r6, #0]
 800953e:	b30b      	cbz	r3, 8009584 <__sfp+0x68>
 8009540:	6836      	ldr	r6, [r6, #0]
 8009542:	e7f7      	b.n	8009534 <__sfp+0x18>
 8009544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009548:	b9d5      	cbnz	r5, 8009580 <__sfp+0x64>
 800954a:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <__sfp+0x88>)
 800954c:	60e3      	str	r3, [r4, #12]
 800954e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009552:	6665      	str	r5, [r4, #100]	; 0x64
 8009554:	f000 f847 	bl	80095e6 <__retarget_lock_init_recursive>
 8009558:	f7ff ff96 	bl	8009488 <__sfp_lock_release>
 800955c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009560:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009564:	6025      	str	r5, [r4, #0]
 8009566:	61a5      	str	r5, [r4, #24]
 8009568:	2208      	movs	r2, #8
 800956a:	4629      	mov	r1, r5
 800956c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009570:	f7ff ff24 	bl	80093bc <memset>
 8009574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800957c:	4620      	mov	r0, r4
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	3468      	adds	r4, #104	; 0x68
 8009582:	e7d9      	b.n	8009538 <__sfp+0x1c>
 8009584:	2104      	movs	r1, #4
 8009586:	4638      	mov	r0, r7
 8009588:	f7ff ff62 	bl	8009450 <__sfmoreglue>
 800958c:	4604      	mov	r4, r0
 800958e:	6030      	str	r0, [r6, #0]
 8009590:	2800      	cmp	r0, #0
 8009592:	d1d5      	bne.n	8009540 <__sfp+0x24>
 8009594:	f7ff ff78 	bl	8009488 <__sfp_lock_release>
 8009598:	230c      	movs	r3, #12
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	e7ee      	b.n	800957c <__sfp+0x60>
 800959e:	bf00      	nop
 80095a0:	0800a334 	.word	0x0800a334
 80095a4:	ffff0001 	.word	0xffff0001

080095a8 <_fwalk_reent>:
 80095a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ac:	4606      	mov	r6, r0
 80095ae:	4688      	mov	r8, r1
 80095b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095b4:	2700      	movs	r7, #0
 80095b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095ba:	f1b9 0901 	subs.w	r9, r9, #1
 80095be:	d505      	bpl.n	80095cc <_fwalk_reent+0x24>
 80095c0:	6824      	ldr	r4, [r4, #0]
 80095c2:	2c00      	cmp	r4, #0
 80095c4:	d1f7      	bne.n	80095b6 <_fwalk_reent+0xe>
 80095c6:	4638      	mov	r0, r7
 80095c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095cc:	89ab      	ldrh	r3, [r5, #12]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d907      	bls.n	80095e2 <_fwalk_reent+0x3a>
 80095d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095d6:	3301      	adds	r3, #1
 80095d8:	d003      	beq.n	80095e2 <_fwalk_reent+0x3a>
 80095da:	4629      	mov	r1, r5
 80095dc:	4630      	mov	r0, r6
 80095de:	47c0      	blx	r8
 80095e0:	4307      	orrs	r7, r0
 80095e2:	3568      	adds	r5, #104	; 0x68
 80095e4:	e7e9      	b.n	80095ba <_fwalk_reent+0x12>

080095e6 <__retarget_lock_init_recursive>:
 80095e6:	4770      	bx	lr

080095e8 <__retarget_lock_acquire_recursive>:
 80095e8:	4770      	bx	lr

080095ea <__retarget_lock_release_recursive>:
 80095ea:	4770      	bx	lr

080095ec <_malloc_r>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	1ccd      	adds	r5, r1, #3
 80095f0:	f025 0503 	bic.w	r5, r5, #3
 80095f4:	3508      	adds	r5, #8
 80095f6:	2d0c      	cmp	r5, #12
 80095f8:	bf38      	it	cc
 80095fa:	250c      	movcc	r5, #12
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	4606      	mov	r6, r0
 8009600:	db01      	blt.n	8009606 <_malloc_r+0x1a>
 8009602:	42a9      	cmp	r1, r5
 8009604:	d903      	bls.n	800960e <_malloc_r+0x22>
 8009606:	230c      	movs	r3, #12
 8009608:	6033      	str	r3, [r6, #0]
 800960a:	2000      	movs	r0, #0
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800960e:	f000 fda3 	bl	800a158 <__malloc_lock>
 8009612:	4921      	ldr	r1, [pc, #132]	; (8009698 <_malloc_r+0xac>)
 8009614:	680a      	ldr	r2, [r1, #0]
 8009616:	4614      	mov	r4, r2
 8009618:	b99c      	cbnz	r4, 8009642 <_malloc_r+0x56>
 800961a:	4f20      	ldr	r7, [pc, #128]	; (800969c <_malloc_r+0xb0>)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	b923      	cbnz	r3, 800962a <_malloc_r+0x3e>
 8009620:	4621      	mov	r1, r4
 8009622:	4630      	mov	r0, r6
 8009624:	f000 fb2a 	bl	8009c7c <_sbrk_r>
 8009628:	6038      	str	r0, [r7, #0]
 800962a:	4629      	mov	r1, r5
 800962c:	4630      	mov	r0, r6
 800962e:	f000 fb25 	bl	8009c7c <_sbrk_r>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d123      	bne.n	800967e <_malloc_r+0x92>
 8009636:	230c      	movs	r3, #12
 8009638:	6033      	str	r3, [r6, #0]
 800963a:	4630      	mov	r0, r6
 800963c:	f000 fd92 	bl	800a164 <__malloc_unlock>
 8009640:	e7e3      	b.n	800960a <_malloc_r+0x1e>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	1b5b      	subs	r3, r3, r5
 8009646:	d417      	bmi.n	8009678 <_malloc_r+0x8c>
 8009648:	2b0b      	cmp	r3, #11
 800964a:	d903      	bls.n	8009654 <_malloc_r+0x68>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	441c      	add	r4, r3
 8009650:	6025      	str	r5, [r4, #0]
 8009652:	e004      	b.n	800965e <_malloc_r+0x72>
 8009654:	6863      	ldr	r3, [r4, #4]
 8009656:	42a2      	cmp	r2, r4
 8009658:	bf0c      	ite	eq
 800965a:	600b      	streq	r3, [r1, #0]
 800965c:	6053      	strne	r3, [r2, #4]
 800965e:	4630      	mov	r0, r6
 8009660:	f000 fd80 	bl	800a164 <__malloc_unlock>
 8009664:	f104 000b 	add.w	r0, r4, #11
 8009668:	1d23      	adds	r3, r4, #4
 800966a:	f020 0007 	bic.w	r0, r0, #7
 800966e:	1ac2      	subs	r2, r0, r3
 8009670:	d0cc      	beq.n	800960c <_malloc_r+0x20>
 8009672:	1a1b      	subs	r3, r3, r0
 8009674:	50a3      	str	r3, [r4, r2]
 8009676:	e7c9      	b.n	800960c <_malloc_r+0x20>
 8009678:	4622      	mov	r2, r4
 800967a:	6864      	ldr	r4, [r4, #4]
 800967c:	e7cc      	b.n	8009618 <_malloc_r+0x2c>
 800967e:	1cc4      	adds	r4, r0, #3
 8009680:	f024 0403 	bic.w	r4, r4, #3
 8009684:	42a0      	cmp	r0, r4
 8009686:	d0e3      	beq.n	8009650 <_malloc_r+0x64>
 8009688:	1a21      	subs	r1, r4, r0
 800968a:	4630      	mov	r0, r6
 800968c:	f000 faf6 	bl	8009c7c <_sbrk_r>
 8009690:	3001      	adds	r0, #1
 8009692:	d1dd      	bne.n	8009650 <_malloc_r+0x64>
 8009694:	e7cf      	b.n	8009636 <_malloc_r+0x4a>
 8009696:	bf00      	nop
 8009698:	2000195c 	.word	0x2000195c
 800969c:	20001960 	.word	0x20001960

080096a0 <__sfputc_r>:
 80096a0:	6893      	ldr	r3, [r2, #8]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	b410      	push	{r4}
 80096a8:	6093      	str	r3, [r2, #8]
 80096aa:	da08      	bge.n	80096be <__sfputc_r+0x1e>
 80096ac:	6994      	ldr	r4, [r2, #24]
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	db01      	blt.n	80096b6 <__sfputc_r+0x16>
 80096b2:	290a      	cmp	r1, #10
 80096b4:	d103      	bne.n	80096be <__sfputc_r+0x1e>
 80096b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ba:	f000 bb33 	b.w	8009d24 <__swbuf_r>
 80096be:	6813      	ldr	r3, [r2, #0]
 80096c0:	1c58      	adds	r0, r3, #1
 80096c2:	6010      	str	r0, [r2, #0]
 80096c4:	7019      	strb	r1, [r3, #0]
 80096c6:	4608      	mov	r0, r1
 80096c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <__sfputs_r>:
 80096ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d0:	4606      	mov	r6, r0
 80096d2:	460f      	mov	r7, r1
 80096d4:	4614      	mov	r4, r2
 80096d6:	18d5      	adds	r5, r2, r3
 80096d8:	42ac      	cmp	r4, r5
 80096da:	d101      	bne.n	80096e0 <__sfputs_r+0x12>
 80096dc:	2000      	movs	r0, #0
 80096de:	e007      	b.n	80096f0 <__sfputs_r+0x22>
 80096e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e4:	463a      	mov	r2, r7
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ffda 	bl	80096a0 <__sfputc_r>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d1f3      	bne.n	80096d8 <__sfputs_r+0xa>
 80096f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096f4 <_vfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	460d      	mov	r5, r1
 80096fa:	b09d      	sub	sp, #116	; 0x74
 80096fc:	4614      	mov	r4, r2
 80096fe:	4698      	mov	r8, r3
 8009700:	4606      	mov	r6, r0
 8009702:	b118      	cbz	r0, 800970c <_vfiprintf_r+0x18>
 8009704:	6983      	ldr	r3, [r0, #24]
 8009706:	b90b      	cbnz	r3, 800970c <_vfiprintf_r+0x18>
 8009708:	f7ff fed0 	bl	80094ac <__sinit>
 800970c:	4b89      	ldr	r3, [pc, #548]	; (8009934 <_vfiprintf_r+0x240>)
 800970e:	429d      	cmp	r5, r3
 8009710:	d11b      	bne.n	800974a <_vfiprintf_r+0x56>
 8009712:	6875      	ldr	r5, [r6, #4]
 8009714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009716:	07d9      	lsls	r1, r3, #31
 8009718:	d405      	bmi.n	8009726 <_vfiprintf_r+0x32>
 800971a:	89ab      	ldrh	r3, [r5, #12]
 800971c:	059a      	lsls	r2, r3, #22
 800971e:	d402      	bmi.n	8009726 <_vfiprintf_r+0x32>
 8009720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009722:	f7ff ff61 	bl	80095e8 <__retarget_lock_acquire_recursive>
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	071b      	lsls	r3, r3, #28
 800972a:	d501      	bpl.n	8009730 <_vfiprintf_r+0x3c>
 800972c:	692b      	ldr	r3, [r5, #16]
 800972e:	b9eb      	cbnz	r3, 800976c <_vfiprintf_r+0x78>
 8009730:	4629      	mov	r1, r5
 8009732:	4630      	mov	r0, r6
 8009734:	f000 fb5a 	bl	8009dec <__swsetup_r>
 8009738:	b1c0      	cbz	r0, 800976c <_vfiprintf_r+0x78>
 800973a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800973c:	07dc      	lsls	r4, r3, #31
 800973e:	d50e      	bpl.n	800975e <_vfiprintf_r+0x6a>
 8009740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009744:	b01d      	add	sp, #116	; 0x74
 8009746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974a:	4b7b      	ldr	r3, [pc, #492]	; (8009938 <_vfiprintf_r+0x244>)
 800974c:	429d      	cmp	r5, r3
 800974e:	d101      	bne.n	8009754 <_vfiprintf_r+0x60>
 8009750:	68b5      	ldr	r5, [r6, #8]
 8009752:	e7df      	b.n	8009714 <_vfiprintf_r+0x20>
 8009754:	4b79      	ldr	r3, [pc, #484]	; (800993c <_vfiprintf_r+0x248>)
 8009756:	429d      	cmp	r5, r3
 8009758:	bf08      	it	eq
 800975a:	68f5      	ldreq	r5, [r6, #12]
 800975c:	e7da      	b.n	8009714 <_vfiprintf_r+0x20>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	0598      	lsls	r0, r3, #22
 8009762:	d4ed      	bmi.n	8009740 <_vfiprintf_r+0x4c>
 8009764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009766:	f7ff ff40 	bl	80095ea <__retarget_lock_release_recursive>
 800976a:	e7e9      	b.n	8009740 <_vfiprintf_r+0x4c>
 800976c:	2300      	movs	r3, #0
 800976e:	9309      	str	r3, [sp, #36]	; 0x24
 8009770:	2320      	movs	r3, #32
 8009772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009776:	f8cd 800c 	str.w	r8, [sp, #12]
 800977a:	2330      	movs	r3, #48	; 0x30
 800977c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009940 <_vfiprintf_r+0x24c>
 8009780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009784:	f04f 0901 	mov.w	r9, #1
 8009788:	4623      	mov	r3, r4
 800978a:	469a      	mov	sl, r3
 800978c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009790:	b10a      	cbz	r2, 8009796 <_vfiprintf_r+0xa2>
 8009792:	2a25      	cmp	r2, #37	; 0x25
 8009794:	d1f9      	bne.n	800978a <_vfiprintf_r+0x96>
 8009796:	ebba 0b04 	subs.w	fp, sl, r4
 800979a:	d00b      	beq.n	80097b4 <_vfiprintf_r+0xc0>
 800979c:	465b      	mov	r3, fp
 800979e:	4622      	mov	r2, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff93 	bl	80096ce <__sfputs_r>
 80097a8:	3001      	adds	r0, #1
 80097aa:	f000 80aa 	beq.w	8009902 <_vfiprintf_r+0x20e>
 80097ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097b0:	445a      	add	r2, fp
 80097b2:	9209      	str	r2, [sp, #36]	; 0x24
 80097b4:	f89a 3000 	ldrb.w	r3, [sl]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80a2 	beq.w	8009902 <_vfiprintf_r+0x20e>
 80097be:	2300      	movs	r3, #0
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c8:	f10a 0a01 	add.w	sl, sl, #1
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	9307      	str	r3, [sp, #28]
 80097d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097d4:	931a      	str	r3, [sp, #104]	; 0x68
 80097d6:	4654      	mov	r4, sl
 80097d8:	2205      	movs	r2, #5
 80097da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097de:	4858      	ldr	r0, [pc, #352]	; (8009940 <_vfiprintf_r+0x24c>)
 80097e0:	f7f6 fcf6 	bl	80001d0 <memchr>
 80097e4:	9a04      	ldr	r2, [sp, #16]
 80097e6:	b9d8      	cbnz	r0, 8009820 <_vfiprintf_r+0x12c>
 80097e8:	06d1      	lsls	r1, r2, #27
 80097ea:	bf44      	itt	mi
 80097ec:	2320      	movmi	r3, #32
 80097ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f2:	0713      	lsls	r3, r2, #28
 80097f4:	bf44      	itt	mi
 80097f6:	232b      	movmi	r3, #43	; 0x2b
 80097f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009800:	2b2a      	cmp	r3, #42	; 0x2a
 8009802:	d015      	beq.n	8009830 <_vfiprintf_r+0x13c>
 8009804:	9a07      	ldr	r2, [sp, #28]
 8009806:	4654      	mov	r4, sl
 8009808:	2000      	movs	r0, #0
 800980a:	f04f 0c0a 	mov.w	ip, #10
 800980e:	4621      	mov	r1, r4
 8009810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009814:	3b30      	subs	r3, #48	; 0x30
 8009816:	2b09      	cmp	r3, #9
 8009818:	d94e      	bls.n	80098b8 <_vfiprintf_r+0x1c4>
 800981a:	b1b0      	cbz	r0, 800984a <_vfiprintf_r+0x156>
 800981c:	9207      	str	r2, [sp, #28]
 800981e:	e014      	b.n	800984a <_vfiprintf_r+0x156>
 8009820:	eba0 0308 	sub.w	r3, r0, r8
 8009824:	fa09 f303 	lsl.w	r3, r9, r3
 8009828:	4313      	orrs	r3, r2
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	46a2      	mov	sl, r4
 800982e:	e7d2      	b.n	80097d6 <_vfiprintf_r+0xe2>
 8009830:	9b03      	ldr	r3, [sp, #12]
 8009832:	1d19      	adds	r1, r3, #4
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	9103      	str	r1, [sp, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	bfbb      	ittet	lt
 800983c:	425b      	neglt	r3, r3
 800983e:	f042 0202 	orrlt.w	r2, r2, #2
 8009842:	9307      	strge	r3, [sp, #28]
 8009844:	9307      	strlt	r3, [sp, #28]
 8009846:	bfb8      	it	lt
 8009848:	9204      	strlt	r2, [sp, #16]
 800984a:	7823      	ldrb	r3, [r4, #0]
 800984c:	2b2e      	cmp	r3, #46	; 0x2e
 800984e:	d10c      	bne.n	800986a <_vfiprintf_r+0x176>
 8009850:	7863      	ldrb	r3, [r4, #1]
 8009852:	2b2a      	cmp	r3, #42	; 0x2a
 8009854:	d135      	bne.n	80098c2 <_vfiprintf_r+0x1ce>
 8009856:	9b03      	ldr	r3, [sp, #12]
 8009858:	1d1a      	adds	r2, r3, #4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	9203      	str	r2, [sp, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	bfb8      	it	lt
 8009862:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009866:	3402      	adds	r4, #2
 8009868:	9305      	str	r3, [sp, #20]
 800986a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009950 <_vfiprintf_r+0x25c>
 800986e:	7821      	ldrb	r1, [r4, #0]
 8009870:	2203      	movs	r2, #3
 8009872:	4650      	mov	r0, sl
 8009874:	f7f6 fcac 	bl	80001d0 <memchr>
 8009878:	b140      	cbz	r0, 800988c <_vfiprintf_r+0x198>
 800987a:	2340      	movs	r3, #64	; 0x40
 800987c:	eba0 000a 	sub.w	r0, r0, sl
 8009880:	fa03 f000 	lsl.w	r0, r3, r0
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	4303      	orrs	r3, r0
 8009888:	3401      	adds	r4, #1
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009890:	482c      	ldr	r0, [pc, #176]	; (8009944 <_vfiprintf_r+0x250>)
 8009892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009896:	2206      	movs	r2, #6
 8009898:	f7f6 fc9a 	bl	80001d0 <memchr>
 800989c:	2800      	cmp	r0, #0
 800989e:	d03f      	beq.n	8009920 <_vfiprintf_r+0x22c>
 80098a0:	4b29      	ldr	r3, [pc, #164]	; (8009948 <_vfiprintf_r+0x254>)
 80098a2:	bb1b      	cbnz	r3, 80098ec <_vfiprintf_r+0x1f8>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	3307      	adds	r3, #7
 80098a8:	f023 0307 	bic.w	r3, r3, #7
 80098ac:	3308      	adds	r3, #8
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	443b      	add	r3, r7
 80098b4:	9309      	str	r3, [sp, #36]	; 0x24
 80098b6:	e767      	b.n	8009788 <_vfiprintf_r+0x94>
 80098b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098bc:	460c      	mov	r4, r1
 80098be:	2001      	movs	r0, #1
 80098c0:	e7a5      	b.n	800980e <_vfiprintf_r+0x11a>
 80098c2:	2300      	movs	r3, #0
 80098c4:	3401      	adds	r4, #1
 80098c6:	9305      	str	r3, [sp, #20]
 80098c8:	4619      	mov	r1, r3
 80098ca:	f04f 0c0a 	mov.w	ip, #10
 80098ce:	4620      	mov	r0, r4
 80098d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098d4:	3a30      	subs	r2, #48	; 0x30
 80098d6:	2a09      	cmp	r2, #9
 80098d8:	d903      	bls.n	80098e2 <_vfiprintf_r+0x1ee>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d0c5      	beq.n	800986a <_vfiprintf_r+0x176>
 80098de:	9105      	str	r1, [sp, #20]
 80098e0:	e7c3      	b.n	800986a <_vfiprintf_r+0x176>
 80098e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098e6:	4604      	mov	r4, r0
 80098e8:	2301      	movs	r3, #1
 80098ea:	e7f0      	b.n	80098ce <_vfiprintf_r+0x1da>
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	462a      	mov	r2, r5
 80098f2:	4b16      	ldr	r3, [pc, #88]	; (800994c <_vfiprintf_r+0x258>)
 80098f4:	a904      	add	r1, sp, #16
 80098f6:	4630      	mov	r0, r6
 80098f8:	f3af 8000 	nop.w
 80098fc:	4607      	mov	r7, r0
 80098fe:	1c78      	adds	r0, r7, #1
 8009900:	d1d6      	bne.n	80098b0 <_vfiprintf_r+0x1bc>
 8009902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009904:	07d9      	lsls	r1, r3, #31
 8009906:	d405      	bmi.n	8009914 <_vfiprintf_r+0x220>
 8009908:	89ab      	ldrh	r3, [r5, #12]
 800990a:	059a      	lsls	r2, r3, #22
 800990c:	d402      	bmi.n	8009914 <_vfiprintf_r+0x220>
 800990e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009910:	f7ff fe6b 	bl	80095ea <__retarget_lock_release_recursive>
 8009914:	89ab      	ldrh	r3, [r5, #12]
 8009916:	065b      	lsls	r3, r3, #25
 8009918:	f53f af12 	bmi.w	8009740 <_vfiprintf_r+0x4c>
 800991c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800991e:	e711      	b.n	8009744 <_vfiprintf_r+0x50>
 8009920:	ab03      	add	r3, sp, #12
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	462a      	mov	r2, r5
 8009926:	4b09      	ldr	r3, [pc, #36]	; (800994c <_vfiprintf_r+0x258>)
 8009928:	a904      	add	r1, sp, #16
 800992a:	4630      	mov	r0, r6
 800992c:	f000 f880 	bl	8009a30 <_printf_i>
 8009930:	e7e4      	b.n	80098fc <_vfiprintf_r+0x208>
 8009932:	bf00      	nop
 8009934:	0800a358 	.word	0x0800a358
 8009938:	0800a378 	.word	0x0800a378
 800993c:	0800a338 	.word	0x0800a338
 8009940:	0800a398 	.word	0x0800a398
 8009944:	0800a3a2 	.word	0x0800a3a2
 8009948:	00000000 	.word	0x00000000
 800994c:	080096cf 	.word	0x080096cf
 8009950:	0800a39e 	.word	0x0800a39e

08009954 <_printf_common>:
 8009954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009958:	4616      	mov	r6, r2
 800995a:	4699      	mov	r9, r3
 800995c:	688a      	ldr	r2, [r1, #8]
 800995e:	690b      	ldr	r3, [r1, #16]
 8009960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009964:	4293      	cmp	r3, r2
 8009966:	bfb8      	it	lt
 8009968:	4613      	movlt	r3, r2
 800996a:	6033      	str	r3, [r6, #0]
 800996c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009970:	4607      	mov	r7, r0
 8009972:	460c      	mov	r4, r1
 8009974:	b10a      	cbz	r2, 800997a <_printf_common+0x26>
 8009976:	3301      	adds	r3, #1
 8009978:	6033      	str	r3, [r6, #0]
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	0699      	lsls	r1, r3, #26
 800997e:	bf42      	ittt	mi
 8009980:	6833      	ldrmi	r3, [r6, #0]
 8009982:	3302      	addmi	r3, #2
 8009984:	6033      	strmi	r3, [r6, #0]
 8009986:	6825      	ldr	r5, [r4, #0]
 8009988:	f015 0506 	ands.w	r5, r5, #6
 800998c:	d106      	bne.n	800999c <_printf_common+0x48>
 800998e:	f104 0a19 	add.w	sl, r4, #25
 8009992:	68e3      	ldr	r3, [r4, #12]
 8009994:	6832      	ldr	r2, [r6, #0]
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	42ab      	cmp	r3, r5
 800999a:	dc26      	bgt.n	80099ea <_printf_common+0x96>
 800999c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099a0:	1e13      	subs	r3, r2, #0
 80099a2:	6822      	ldr	r2, [r4, #0]
 80099a4:	bf18      	it	ne
 80099a6:	2301      	movne	r3, #1
 80099a8:	0692      	lsls	r2, r2, #26
 80099aa:	d42b      	bmi.n	8009a04 <_printf_common+0xb0>
 80099ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099b0:	4649      	mov	r1, r9
 80099b2:	4638      	mov	r0, r7
 80099b4:	47c0      	blx	r8
 80099b6:	3001      	adds	r0, #1
 80099b8:	d01e      	beq.n	80099f8 <_printf_common+0xa4>
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	68e5      	ldr	r5, [r4, #12]
 80099be:	6832      	ldr	r2, [r6, #0]
 80099c0:	f003 0306 	and.w	r3, r3, #6
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	bf08      	it	eq
 80099c8:	1aad      	subeq	r5, r5, r2
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	6922      	ldr	r2, [r4, #16]
 80099ce:	bf0c      	ite	eq
 80099d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099d4:	2500      	movne	r5, #0
 80099d6:	4293      	cmp	r3, r2
 80099d8:	bfc4      	itt	gt
 80099da:	1a9b      	subgt	r3, r3, r2
 80099dc:	18ed      	addgt	r5, r5, r3
 80099de:	2600      	movs	r6, #0
 80099e0:	341a      	adds	r4, #26
 80099e2:	42b5      	cmp	r5, r6
 80099e4:	d11a      	bne.n	8009a1c <_printf_common+0xc8>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e008      	b.n	80099fc <_printf_common+0xa8>
 80099ea:	2301      	movs	r3, #1
 80099ec:	4652      	mov	r2, sl
 80099ee:	4649      	mov	r1, r9
 80099f0:	4638      	mov	r0, r7
 80099f2:	47c0      	blx	r8
 80099f4:	3001      	adds	r0, #1
 80099f6:	d103      	bne.n	8009a00 <_printf_common+0xac>
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a00:	3501      	adds	r5, #1
 8009a02:	e7c6      	b.n	8009992 <_printf_common+0x3e>
 8009a04:	18e1      	adds	r1, r4, r3
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	2030      	movs	r0, #48	; 0x30
 8009a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a0e:	4422      	add	r2, r4
 8009a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a18:	3302      	adds	r3, #2
 8009a1a:	e7c7      	b.n	80099ac <_printf_common+0x58>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	4622      	mov	r2, r4
 8009a20:	4649      	mov	r1, r9
 8009a22:	4638      	mov	r0, r7
 8009a24:	47c0      	blx	r8
 8009a26:	3001      	adds	r0, #1
 8009a28:	d0e6      	beq.n	80099f8 <_printf_common+0xa4>
 8009a2a:	3601      	adds	r6, #1
 8009a2c:	e7d9      	b.n	80099e2 <_printf_common+0x8e>
	...

08009a30 <_printf_i>:
 8009a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a34:	460c      	mov	r4, r1
 8009a36:	4691      	mov	r9, r2
 8009a38:	7e27      	ldrb	r7, [r4, #24]
 8009a3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a3c:	2f78      	cmp	r7, #120	; 0x78
 8009a3e:	4680      	mov	r8, r0
 8009a40:	469a      	mov	sl, r3
 8009a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a46:	d807      	bhi.n	8009a58 <_printf_i+0x28>
 8009a48:	2f62      	cmp	r7, #98	; 0x62
 8009a4a:	d80a      	bhi.n	8009a62 <_printf_i+0x32>
 8009a4c:	2f00      	cmp	r7, #0
 8009a4e:	f000 80d8 	beq.w	8009c02 <_printf_i+0x1d2>
 8009a52:	2f58      	cmp	r7, #88	; 0x58
 8009a54:	f000 80a3 	beq.w	8009b9e <_printf_i+0x16e>
 8009a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a60:	e03a      	b.n	8009ad8 <_printf_i+0xa8>
 8009a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a66:	2b15      	cmp	r3, #21
 8009a68:	d8f6      	bhi.n	8009a58 <_printf_i+0x28>
 8009a6a:	a001      	add	r0, pc, #4	; (adr r0, 8009a70 <_printf_i+0x40>)
 8009a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a70:	08009ac9 	.word	0x08009ac9
 8009a74:	08009add 	.word	0x08009add
 8009a78:	08009a59 	.word	0x08009a59
 8009a7c:	08009a59 	.word	0x08009a59
 8009a80:	08009a59 	.word	0x08009a59
 8009a84:	08009a59 	.word	0x08009a59
 8009a88:	08009add 	.word	0x08009add
 8009a8c:	08009a59 	.word	0x08009a59
 8009a90:	08009a59 	.word	0x08009a59
 8009a94:	08009a59 	.word	0x08009a59
 8009a98:	08009a59 	.word	0x08009a59
 8009a9c:	08009be9 	.word	0x08009be9
 8009aa0:	08009b0d 	.word	0x08009b0d
 8009aa4:	08009bcb 	.word	0x08009bcb
 8009aa8:	08009a59 	.word	0x08009a59
 8009aac:	08009a59 	.word	0x08009a59
 8009ab0:	08009c0b 	.word	0x08009c0b
 8009ab4:	08009a59 	.word	0x08009a59
 8009ab8:	08009b0d 	.word	0x08009b0d
 8009abc:	08009a59 	.word	0x08009a59
 8009ac0:	08009a59 	.word	0x08009a59
 8009ac4:	08009bd3 	.word	0x08009bd3
 8009ac8:	680b      	ldr	r3, [r1, #0]
 8009aca:	1d1a      	adds	r2, r3, #4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	600a      	str	r2, [r1, #0]
 8009ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e0a3      	b.n	8009c24 <_printf_i+0x1f4>
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	6808      	ldr	r0, [r1, #0]
 8009ae0:	062e      	lsls	r6, r5, #24
 8009ae2:	f100 0304 	add.w	r3, r0, #4
 8009ae6:	d50a      	bpl.n	8009afe <_printf_i+0xce>
 8009ae8:	6805      	ldr	r5, [r0, #0]
 8009aea:	600b      	str	r3, [r1, #0]
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	da03      	bge.n	8009af8 <_printf_i+0xc8>
 8009af0:	232d      	movs	r3, #45	; 0x2d
 8009af2:	426d      	negs	r5, r5
 8009af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af8:	485e      	ldr	r0, [pc, #376]	; (8009c74 <_printf_i+0x244>)
 8009afa:	230a      	movs	r3, #10
 8009afc:	e019      	b.n	8009b32 <_printf_i+0x102>
 8009afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b02:	6805      	ldr	r5, [r0, #0]
 8009b04:	600b      	str	r3, [r1, #0]
 8009b06:	bf18      	it	ne
 8009b08:	b22d      	sxthne	r5, r5
 8009b0a:	e7ef      	b.n	8009aec <_printf_i+0xbc>
 8009b0c:	680b      	ldr	r3, [r1, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	1d18      	adds	r0, r3, #4
 8009b12:	6008      	str	r0, [r1, #0]
 8009b14:	0628      	lsls	r0, r5, #24
 8009b16:	d501      	bpl.n	8009b1c <_printf_i+0xec>
 8009b18:	681d      	ldr	r5, [r3, #0]
 8009b1a:	e002      	b.n	8009b22 <_printf_i+0xf2>
 8009b1c:	0669      	lsls	r1, r5, #25
 8009b1e:	d5fb      	bpl.n	8009b18 <_printf_i+0xe8>
 8009b20:	881d      	ldrh	r5, [r3, #0]
 8009b22:	4854      	ldr	r0, [pc, #336]	; (8009c74 <_printf_i+0x244>)
 8009b24:	2f6f      	cmp	r7, #111	; 0x6f
 8009b26:	bf0c      	ite	eq
 8009b28:	2308      	moveq	r3, #8
 8009b2a:	230a      	movne	r3, #10
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b32:	6866      	ldr	r6, [r4, #4]
 8009b34:	60a6      	str	r6, [r4, #8]
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	bfa2      	ittt	ge
 8009b3a:	6821      	ldrge	r1, [r4, #0]
 8009b3c:	f021 0104 	bicge.w	r1, r1, #4
 8009b40:	6021      	strge	r1, [r4, #0]
 8009b42:	b90d      	cbnz	r5, 8009b48 <_printf_i+0x118>
 8009b44:	2e00      	cmp	r6, #0
 8009b46:	d04d      	beq.n	8009be4 <_printf_i+0x1b4>
 8009b48:	4616      	mov	r6, r2
 8009b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8009b52:	5dc7      	ldrb	r7, [r0, r7]
 8009b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b58:	462f      	mov	r7, r5
 8009b5a:	42bb      	cmp	r3, r7
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	d9f4      	bls.n	8009b4a <_printf_i+0x11a>
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d10b      	bne.n	8009b7c <_printf_i+0x14c>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	07df      	lsls	r7, r3, #31
 8009b68:	d508      	bpl.n	8009b7c <_printf_i+0x14c>
 8009b6a:	6923      	ldr	r3, [r4, #16]
 8009b6c:	6861      	ldr	r1, [r4, #4]
 8009b6e:	4299      	cmp	r1, r3
 8009b70:	bfde      	ittt	le
 8009b72:	2330      	movle	r3, #48	; 0x30
 8009b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b78:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009b7c:	1b92      	subs	r2, r2, r6
 8009b7e:	6122      	str	r2, [r4, #16]
 8009b80:	f8cd a000 	str.w	sl, [sp]
 8009b84:	464b      	mov	r3, r9
 8009b86:	aa03      	add	r2, sp, #12
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	f7ff fee2 	bl	8009954 <_printf_common>
 8009b90:	3001      	adds	r0, #1
 8009b92:	d14c      	bne.n	8009c2e <_printf_i+0x1fe>
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b98:	b004      	add	sp, #16
 8009b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9e:	4835      	ldr	r0, [pc, #212]	; (8009c74 <_printf_i+0x244>)
 8009ba0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	680e      	ldr	r6, [r1, #0]
 8009ba8:	061f      	lsls	r7, r3, #24
 8009baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8009bae:	600e      	str	r6, [r1, #0]
 8009bb0:	d514      	bpl.n	8009bdc <_printf_i+0x1ac>
 8009bb2:	07d9      	lsls	r1, r3, #31
 8009bb4:	bf44      	itt	mi
 8009bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009bba:	6023      	strmi	r3, [r4, #0]
 8009bbc:	b91d      	cbnz	r5, 8009bc6 <_printf_i+0x196>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	f023 0320 	bic.w	r3, r3, #32
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	2310      	movs	r3, #16
 8009bc8:	e7b0      	b.n	8009b2c <_printf_i+0xfc>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	f043 0320 	orr.w	r3, r3, #32
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	2378      	movs	r3, #120	; 0x78
 8009bd4:	4828      	ldr	r0, [pc, #160]	; (8009c78 <_printf_i+0x248>)
 8009bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bda:	e7e3      	b.n	8009ba4 <_printf_i+0x174>
 8009bdc:	065e      	lsls	r6, r3, #25
 8009bde:	bf48      	it	mi
 8009be0:	b2ad      	uxthmi	r5, r5
 8009be2:	e7e6      	b.n	8009bb2 <_printf_i+0x182>
 8009be4:	4616      	mov	r6, r2
 8009be6:	e7bb      	b.n	8009b60 <_printf_i+0x130>
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	6826      	ldr	r6, [r4, #0]
 8009bec:	6960      	ldr	r0, [r4, #20]
 8009bee:	1d1d      	adds	r5, r3, #4
 8009bf0:	600d      	str	r5, [r1, #0]
 8009bf2:	0635      	lsls	r5, r6, #24
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0x1cc>
 8009bf8:	6018      	str	r0, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0x1d2>
 8009bfc:	0671      	lsls	r1, r6, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0x1c8>
 8009c00:	8018      	strh	r0, [r3, #0]
 8009c02:	2300      	movs	r3, #0
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	4616      	mov	r6, r2
 8009c08:	e7ba      	b.n	8009b80 <_printf_i+0x150>
 8009c0a:	680b      	ldr	r3, [r1, #0]
 8009c0c:	1d1a      	adds	r2, r3, #4
 8009c0e:	600a      	str	r2, [r1, #0]
 8009c10:	681e      	ldr	r6, [r3, #0]
 8009c12:	6862      	ldr	r2, [r4, #4]
 8009c14:	2100      	movs	r1, #0
 8009c16:	4630      	mov	r0, r6
 8009c18:	f7f6 fada 	bl	80001d0 <memchr>
 8009c1c:	b108      	cbz	r0, 8009c22 <_printf_i+0x1f2>
 8009c1e:	1b80      	subs	r0, r0, r6
 8009c20:	6060      	str	r0, [r4, #4]
 8009c22:	6863      	ldr	r3, [r4, #4]
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	2300      	movs	r3, #0
 8009c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2c:	e7a8      	b.n	8009b80 <_printf_i+0x150>
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	4632      	mov	r2, r6
 8009c32:	4649      	mov	r1, r9
 8009c34:	4640      	mov	r0, r8
 8009c36:	47d0      	blx	sl
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d0ab      	beq.n	8009b94 <_printf_i+0x164>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	079b      	lsls	r3, r3, #30
 8009c40:	d413      	bmi.n	8009c6a <_printf_i+0x23a>
 8009c42:	68e0      	ldr	r0, [r4, #12]
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	4298      	cmp	r0, r3
 8009c48:	bfb8      	it	lt
 8009c4a:	4618      	movlt	r0, r3
 8009c4c:	e7a4      	b.n	8009b98 <_printf_i+0x168>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4632      	mov	r2, r6
 8009c52:	4649      	mov	r1, r9
 8009c54:	4640      	mov	r0, r8
 8009c56:	47d0      	blx	sl
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d09b      	beq.n	8009b94 <_printf_i+0x164>
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	9903      	ldr	r1, [sp, #12]
 8009c62:	1a5b      	subs	r3, r3, r1
 8009c64:	42ab      	cmp	r3, r5
 8009c66:	dcf2      	bgt.n	8009c4e <_printf_i+0x21e>
 8009c68:	e7eb      	b.n	8009c42 <_printf_i+0x212>
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	f104 0619 	add.w	r6, r4, #25
 8009c70:	e7f5      	b.n	8009c5e <_printf_i+0x22e>
 8009c72:	bf00      	nop
 8009c74:	0800a3a9 	.word	0x0800a3a9
 8009c78:	0800a3ba 	.word	0x0800a3ba

08009c7c <_sbrk_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d06      	ldr	r5, [pc, #24]	; (8009c98 <_sbrk_r+0x1c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	f7f7 ff1a 	bl	8001ac0 <_sbrk>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_sbrk_r+0x1a>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_sbrk_r+0x1a>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20001bd0 	.word	0x20001bd0

08009c9c <__sread>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	f000 fab4 	bl	800a210 <_read_r>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	bfab      	itete	ge
 8009cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cae:	89a3      	ldrhlt	r3, [r4, #12]
 8009cb0:	181b      	addge	r3, r3, r0
 8009cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cb6:	bfac      	ite	ge
 8009cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cba:	81a3      	strhlt	r3, [r4, #12]
 8009cbc:	bd10      	pop	{r4, pc}

08009cbe <__swrite>:
 8009cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc2:	461f      	mov	r7, r3
 8009cc4:	898b      	ldrh	r3, [r1, #12]
 8009cc6:	05db      	lsls	r3, r3, #23
 8009cc8:	4605      	mov	r5, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4616      	mov	r6, r2
 8009cce:	d505      	bpl.n	8009cdc <__swrite+0x1e>
 8009cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f000 f9c8 	bl	800a06c <_lseek_r>
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce6:	81a3      	strh	r3, [r4, #12]
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	4628      	mov	r0, r5
 8009cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	f000 b869 	b.w	8009dc8 <_write_r>

08009cf6 <__sseek>:
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfe:	f000 f9b5 	bl	800a06c <_lseek_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	bf15      	itete	ne
 8009d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d12:	81a3      	strheq	r3, [r4, #12]
 8009d14:	bf18      	it	ne
 8009d16:	81a3      	strhne	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__sclose>:
 8009d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1e:	f000 b8d3 	b.w	8009ec8 <_close_r>
	...

08009d24 <__swbuf_r>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	460e      	mov	r6, r1
 8009d28:	4614      	mov	r4, r2
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b118      	cbz	r0, 8009d36 <__swbuf_r+0x12>
 8009d2e:	6983      	ldr	r3, [r0, #24]
 8009d30:	b90b      	cbnz	r3, 8009d36 <__swbuf_r+0x12>
 8009d32:	f7ff fbbb 	bl	80094ac <__sinit>
 8009d36:	4b21      	ldr	r3, [pc, #132]	; (8009dbc <__swbuf_r+0x98>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d12b      	bne.n	8009d94 <__swbuf_r+0x70>
 8009d3c:	686c      	ldr	r4, [r5, #4]
 8009d3e:	69a3      	ldr	r3, [r4, #24]
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	071a      	lsls	r2, r3, #28
 8009d46:	d52f      	bpl.n	8009da8 <__swbuf_r+0x84>
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	b36b      	cbz	r3, 8009da8 <__swbuf_r+0x84>
 8009d4c:	6923      	ldr	r3, [r4, #16]
 8009d4e:	6820      	ldr	r0, [r4, #0]
 8009d50:	1ac0      	subs	r0, r0, r3
 8009d52:	6963      	ldr	r3, [r4, #20]
 8009d54:	b2f6      	uxtb	r6, r6
 8009d56:	4283      	cmp	r3, r0
 8009d58:	4637      	mov	r7, r6
 8009d5a:	dc04      	bgt.n	8009d66 <__swbuf_r+0x42>
 8009d5c:	4621      	mov	r1, r4
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 f948 	bl	8009ff4 <_fflush_r>
 8009d64:	bb30      	cbnz	r0, 8009db4 <__swbuf_r+0x90>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	60a3      	str	r3, [r4, #8]
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	6022      	str	r2, [r4, #0]
 8009d72:	701e      	strb	r6, [r3, #0]
 8009d74:	6963      	ldr	r3, [r4, #20]
 8009d76:	3001      	adds	r0, #1
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d004      	beq.n	8009d86 <__swbuf_r+0x62>
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	07db      	lsls	r3, r3, #31
 8009d80:	d506      	bpl.n	8009d90 <__swbuf_r+0x6c>
 8009d82:	2e0a      	cmp	r6, #10
 8009d84:	d104      	bne.n	8009d90 <__swbuf_r+0x6c>
 8009d86:	4621      	mov	r1, r4
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f000 f933 	bl	8009ff4 <_fflush_r>
 8009d8e:	b988      	cbnz	r0, 8009db4 <__swbuf_r+0x90>
 8009d90:	4638      	mov	r0, r7
 8009d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d94:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <__swbuf_r+0x9c>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swbuf_r+0x7a>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7cf      	b.n	8009d3e <__swbuf_r+0x1a>
 8009d9e:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <__swbuf_r+0xa0>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7ca      	b.n	8009d3e <__swbuf_r+0x1a>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f81e 	bl	8009dec <__swsetup_r>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d0cb      	beq.n	8009d4c <__swbuf_r+0x28>
 8009db4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009db8:	e7ea      	b.n	8009d90 <__swbuf_r+0x6c>
 8009dba:	bf00      	nop
 8009dbc:	0800a358 	.word	0x0800a358
 8009dc0:	0800a378 	.word	0x0800a378
 8009dc4:	0800a338 	.word	0x0800a338

08009dc8 <_write_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4d07      	ldr	r5, [pc, #28]	; (8009de8 <_write_r+0x20>)
 8009dcc:	4604      	mov	r4, r0
 8009dce:	4608      	mov	r0, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f7 fe21 	bl	8001a1e <_write>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_write_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_write_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20001bd0 	.word	0x20001bd0

08009dec <__swsetup_r>:
 8009dec:	4b32      	ldr	r3, [pc, #200]	; (8009eb8 <__swsetup_r+0xcc>)
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	681d      	ldr	r5, [r3, #0]
 8009df2:	4606      	mov	r6, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	b125      	cbz	r5, 8009e02 <__swsetup_r+0x16>
 8009df8:	69ab      	ldr	r3, [r5, #24]
 8009dfa:	b913      	cbnz	r3, 8009e02 <__swsetup_r+0x16>
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f7ff fb55 	bl	80094ac <__sinit>
 8009e02:	4b2e      	ldr	r3, [pc, #184]	; (8009ebc <__swsetup_r+0xd0>)
 8009e04:	429c      	cmp	r4, r3
 8009e06:	d10f      	bne.n	8009e28 <__swsetup_r+0x3c>
 8009e08:	686c      	ldr	r4, [r5, #4]
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e10:	0719      	lsls	r1, r3, #28
 8009e12:	d42c      	bmi.n	8009e6e <__swsetup_r+0x82>
 8009e14:	06dd      	lsls	r5, r3, #27
 8009e16:	d411      	bmi.n	8009e3c <__swsetup_r+0x50>
 8009e18:	2309      	movs	r3, #9
 8009e1a:	6033      	str	r3, [r6, #0]
 8009e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e26:	e03e      	b.n	8009ea6 <__swsetup_r+0xba>
 8009e28:	4b25      	ldr	r3, [pc, #148]	; (8009ec0 <__swsetup_r+0xd4>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d101      	bne.n	8009e32 <__swsetup_r+0x46>
 8009e2e:	68ac      	ldr	r4, [r5, #8]
 8009e30:	e7eb      	b.n	8009e0a <__swsetup_r+0x1e>
 8009e32:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <__swsetup_r+0xd8>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	bf08      	it	eq
 8009e38:	68ec      	ldreq	r4, [r5, #12]
 8009e3a:	e7e6      	b.n	8009e0a <__swsetup_r+0x1e>
 8009e3c:	0758      	lsls	r0, r3, #29
 8009e3e:	d512      	bpl.n	8009e66 <__swsetup_r+0x7a>
 8009e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e42:	b141      	cbz	r1, 8009e56 <__swsetup_r+0x6a>
 8009e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	d002      	beq.n	8009e52 <__swsetup_r+0x66>
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f000 f98f 	bl	800a170 <_free_r>
 8009e52:	2300      	movs	r3, #0
 8009e54:	6363      	str	r3, [r4, #52]	; 0x34
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e5c:	81a3      	strh	r3, [r4, #12]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	6923      	ldr	r3, [r4, #16]
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f043 0308 	orr.w	r3, r3, #8
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	6923      	ldr	r3, [r4, #16]
 8009e70:	b94b      	cbnz	r3, 8009e86 <__swsetup_r+0x9a>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e7c:	d003      	beq.n	8009e86 <__swsetup_r+0x9a>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4630      	mov	r0, r6
 8009e82:	f000 f929 	bl	800a0d8 <__smakebuf_r>
 8009e86:	89a0      	ldrh	r0, [r4, #12]
 8009e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e8c:	f010 0301 	ands.w	r3, r0, #1
 8009e90:	d00a      	beq.n	8009ea8 <__swsetup_r+0xbc>
 8009e92:	2300      	movs	r3, #0
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	6963      	ldr	r3, [r4, #20]
 8009e98:	425b      	negs	r3, r3
 8009e9a:	61a3      	str	r3, [r4, #24]
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	b943      	cbnz	r3, 8009eb2 <__swsetup_r+0xc6>
 8009ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ea4:	d1ba      	bne.n	8009e1c <__swsetup_r+0x30>
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	0781      	lsls	r1, r0, #30
 8009eaa:	bf58      	it	pl
 8009eac:	6963      	ldrpl	r3, [r4, #20]
 8009eae:	60a3      	str	r3, [r4, #8]
 8009eb0:	e7f4      	b.n	8009e9c <__swsetup_r+0xb0>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e7f7      	b.n	8009ea6 <__swsetup_r+0xba>
 8009eb6:	bf00      	nop
 8009eb8:	20000010 	.word	0x20000010
 8009ebc:	0800a358 	.word	0x0800a358
 8009ec0:	0800a378 	.word	0x0800a378
 8009ec4:	0800a338 	.word	0x0800a338

08009ec8 <_close_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4d06      	ldr	r5, [pc, #24]	; (8009ee4 <_close_r+0x1c>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4608      	mov	r0, r1
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	f7f7 fdbf 	bl	8001a56 <_close>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_close_r+0x1a>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_close_r+0x1a>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20001bd0 	.word	0x20001bd0

08009ee8 <__sflush_r>:
 8009ee8:	898a      	ldrh	r2, [r1, #12]
 8009eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	4605      	mov	r5, r0
 8009ef0:	0710      	lsls	r0, r2, #28
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	d458      	bmi.n	8009fa8 <__sflush_r+0xc0>
 8009ef6:	684b      	ldr	r3, [r1, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dc05      	bgt.n	8009f08 <__sflush_r+0x20>
 8009efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dc02      	bgt.n	8009f08 <__sflush_r+0x20>
 8009f02:	2000      	movs	r0, #0
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	d0f9      	beq.n	8009f02 <__sflush_r+0x1a>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f14:	682f      	ldr	r7, [r5, #0]
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	d032      	beq.n	8009f80 <__sflush_r+0x98>
 8009f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	075a      	lsls	r2, r3, #29
 8009f20:	d505      	bpl.n	8009f2e <__sflush_r+0x46>
 8009f22:	6863      	ldr	r3, [r4, #4]
 8009f24:	1ac0      	subs	r0, r0, r3
 8009f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f28:	b10b      	cbz	r3, 8009f2e <__sflush_r+0x46>
 8009f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f2c:	1ac0      	subs	r0, r0, r3
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4602      	mov	r2, r0
 8009f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f34:	6a21      	ldr	r1, [r4, #32]
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b0      	blx	r6
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	d106      	bne.n	8009f4e <__sflush_r+0x66>
 8009f40:	6829      	ldr	r1, [r5, #0]
 8009f42:	291d      	cmp	r1, #29
 8009f44:	d82c      	bhi.n	8009fa0 <__sflush_r+0xb8>
 8009f46:	4a2a      	ldr	r2, [pc, #168]	; (8009ff0 <__sflush_r+0x108>)
 8009f48:	40ca      	lsrs	r2, r1
 8009f4a:	07d6      	lsls	r6, r2, #31
 8009f4c:	d528      	bpl.n	8009fa0 <__sflush_r+0xb8>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	6062      	str	r2, [r4, #4]
 8009f52:	04d9      	lsls	r1, r3, #19
 8009f54:	6922      	ldr	r2, [r4, #16]
 8009f56:	6022      	str	r2, [r4, #0]
 8009f58:	d504      	bpl.n	8009f64 <__sflush_r+0x7c>
 8009f5a:	1c42      	adds	r2, r0, #1
 8009f5c:	d101      	bne.n	8009f62 <__sflush_r+0x7a>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	b903      	cbnz	r3, 8009f64 <__sflush_r+0x7c>
 8009f62:	6560      	str	r0, [r4, #84]	; 0x54
 8009f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f66:	602f      	str	r7, [r5, #0]
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	d0ca      	beq.n	8009f02 <__sflush_r+0x1a>
 8009f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f70:	4299      	cmp	r1, r3
 8009f72:	d002      	beq.n	8009f7a <__sflush_r+0x92>
 8009f74:	4628      	mov	r0, r5
 8009f76:	f000 f8fb 	bl	800a170 <_free_r>
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f7e:	e7c1      	b.n	8009f04 <__sflush_r+0x1c>
 8009f80:	6a21      	ldr	r1, [r4, #32]
 8009f82:	2301      	movs	r3, #1
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b0      	blx	r6
 8009f88:	1c41      	adds	r1, r0, #1
 8009f8a:	d1c7      	bne.n	8009f1c <__sflush_r+0x34>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d0c4      	beq.n	8009f1c <__sflush_r+0x34>
 8009f92:	2b1d      	cmp	r3, #29
 8009f94:	d001      	beq.n	8009f9a <__sflush_r+0xb2>
 8009f96:	2b16      	cmp	r3, #22
 8009f98:	d101      	bne.n	8009f9e <__sflush_r+0xb6>
 8009f9a:	602f      	str	r7, [r5, #0]
 8009f9c:	e7b1      	b.n	8009f02 <__sflush_r+0x1a>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	e7ad      	b.n	8009f04 <__sflush_r+0x1c>
 8009fa8:	690f      	ldr	r7, [r1, #16]
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	d0a9      	beq.n	8009f02 <__sflush_r+0x1a>
 8009fae:	0793      	lsls	r3, r2, #30
 8009fb0:	680e      	ldr	r6, [r1, #0]
 8009fb2:	bf08      	it	eq
 8009fb4:	694b      	ldreq	r3, [r1, #20]
 8009fb6:	600f      	str	r7, [r1, #0]
 8009fb8:	bf18      	it	ne
 8009fba:	2300      	movne	r3, #0
 8009fbc:	eba6 0807 	sub.w	r8, r6, r7
 8009fc0:	608b      	str	r3, [r1, #8]
 8009fc2:	f1b8 0f00 	cmp.w	r8, #0
 8009fc6:	dd9c      	ble.n	8009f02 <__sflush_r+0x1a>
 8009fc8:	6a21      	ldr	r1, [r4, #32]
 8009fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fcc:	4643      	mov	r3, r8
 8009fce:	463a      	mov	r2, r7
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b0      	blx	r6
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	dc06      	bgt.n	8009fe6 <__sflush_r+0xfe>
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fe4:	e78e      	b.n	8009f04 <__sflush_r+0x1c>
 8009fe6:	4407      	add	r7, r0
 8009fe8:	eba8 0800 	sub.w	r8, r8, r0
 8009fec:	e7e9      	b.n	8009fc2 <__sflush_r+0xda>
 8009fee:	bf00      	nop
 8009ff0:	20400001 	.word	0x20400001

08009ff4 <_fflush_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	690b      	ldr	r3, [r1, #16]
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	b913      	cbnz	r3, 800a004 <_fflush_r+0x10>
 8009ffe:	2500      	movs	r5, #0
 800a000:	4628      	mov	r0, r5
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	b118      	cbz	r0, 800a00e <_fflush_r+0x1a>
 800a006:	6983      	ldr	r3, [r0, #24]
 800a008:	b90b      	cbnz	r3, 800a00e <_fflush_r+0x1a>
 800a00a:	f7ff fa4f 	bl	80094ac <__sinit>
 800a00e:	4b14      	ldr	r3, [pc, #80]	; (800a060 <_fflush_r+0x6c>)
 800a010:	429c      	cmp	r4, r3
 800a012:	d11b      	bne.n	800a04c <_fflush_r+0x58>
 800a014:	686c      	ldr	r4, [r5, #4]
 800a016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0ef      	beq.n	8009ffe <_fflush_r+0xa>
 800a01e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a020:	07d0      	lsls	r0, r2, #31
 800a022:	d404      	bmi.n	800a02e <_fflush_r+0x3a>
 800a024:	0599      	lsls	r1, r3, #22
 800a026:	d402      	bmi.n	800a02e <_fflush_r+0x3a>
 800a028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a02a:	f7ff fadd 	bl	80095e8 <__retarget_lock_acquire_recursive>
 800a02e:	4628      	mov	r0, r5
 800a030:	4621      	mov	r1, r4
 800a032:	f7ff ff59 	bl	8009ee8 <__sflush_r>
 800a036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a038:	07da      	lsls	r2, r3, #31
 800a03a:	4605      	mov	r5, r0
 800a03c:	d4e0      	bmi.n	800a000 <_fflush_r+0xc>
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	059b      	lsls	r3, r3, #22
 800a042:	d4dd      	bmi.n	800a000 <_fflush_r+0xc>
 800a044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a046:	f7ff fad0 	bl	80095ea <__retarget_lock_release_recursive>
 800a04a:	e7d9      	b.n	800a000 <_fflush_r+0xc>
 800a04c:	4b05      	ldr	r3, [pc, #20]	; (800a064 <_fflush_r+0x70>)
 800a04e:	429c      	cmp	r4, r3
 800a050:	d101      	bne.n	800a056 <_fflush_r+0x62>
 800a052:	68ac      	ldr	r4, [r5, #8]
 800a054:	e7df      	b.n	800a016 <_fflush_r+0x22>
 800a056:	4b04      	ldr	r3, [pc, #16]	; (800a068 <_fflush_r+0x74>)
 800a058:	429c      	cmp	r4, r3
 800a05a:	bf08      	it	eq
 800a05c:	68ec      	ldreq	r4, [r5, #12]
 800a05e:	e7da      	b.n	800a016 <_fflush_r+0x22>
 800a060:	0800a358 	.word	0x0800a358
 800a064:	0800a378 	.word	0x0800a378
 800a068:	0800a338 	.word	0x0800a338

0800a06c <_lseek_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4d07      	ldr	r5, [pc, #28]	; (800a08c <_lseek_r+0x20>)
 800a070:	4604      	mov	r4, r0
 800a072:	4608      	mov	r0, r1
 800a074:	4611      	mov	r1, r2
 800a076:	2200      	movs	r2, #0
 800a078:	602a      	str	r2, [r5, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	f7f7 fd12 	bl	8001aa4 <_lseek>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_lseek_r+0x1e>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_lseek_r+0x1e>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20001bd0 	.word	0x20001bd0

0800a090 <__swhatbuf_r>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	460e      	mov	r6, r1
 800a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a098:	2900      	cmp	r1, #0
 800a09a:	b096      	sub	sp, #88	; 0x58
 800a09c:	4614      	mov	r4, r2
 800a09e:	461d      	mov	r5, r3
 800a0a0:	da07      	bge.n	800a0b2 <__swhatbuf_r+0x22>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	89b3      	ldrh	r3, [r6, #12]
 800a0a8:	061a      	lsls	r2, r3, #24
 800a0aa:	d410      	bmi.n	800a0ce <__swhatbuf_r+0x3e>
 800a0ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0b0:	e00e      	b.n	800a0d0 <__swhatbuf_r+0x40>
 800a0b2:	466a      	mov	r2, sp
 800a0b4:	f000 f8be 	bl	800a234 <_fstat_r>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	dbf2      	blt.n	800a0a2 <__swhatbuf_r+0x12>
 800a0bc:	9a01      	ldr	r2, [sp, #4]
 800a0be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0c6:	425a      	negs	r2, r3
 800a0c8:	415a      	adcs	r2, r3
 800a0ca:	602a      	str	r2, [r5, #0]
 800a0cc:	e7ee      	b.n	800a0ac <__swhatbuf_r+0x1c>
 800a0ce:	2340      	movs	r3, #64	; 0x40
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	b016      	add	sp, #88	; 0x58
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}

0800a0d8 <__smakebuf_r>:
 800a0d8:	898b      	ldrh	r3, [r1, #12]
 800a0da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0dc:	079d      	lsls	r5, r3, #30
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	d507      	bpl.n	800a0f4 <__smakebuf_r+0x1c>
 800a0e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	6123      	str	r3, [r4, #16]
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	6163      	str	r3, [r4, #20]
 800a0f0:	b002      	add	sp, #8
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}
 800a0f4:	ab01      	add	r3, sp, #4
 800a0f6:	466a      	mov	r2, sp
 800a0f8:	f7ff ffca 	bl	800a090 <__swhatbuf_r>
 800a0fc:	9900      	ldr	r1, [sp, #0]
 800a0fe:	4605      	mov	r5, r0
 800a100:	4630      	mov	r0, r6
 800a102:	f7ff fa73 	bl	80095ec <_malloc_r>
 800a106:	b948      	cbnz	r0, 800a11c <__smakebuf_r+0x44>
 800a108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a10c:	059a      	lsls	r2, r3, #22
 800a10e:	d4ef      	bmi.n	800a0f0 <__smakebuf_r+0x18>
 800a110:	f023 0303 	bic.w	r3, r3, #3
 800a114:	f043 0302 	orr.w	r3, r3, #2
 800a118:	81a3      	strh	r3, [r4, #12]
 800a11a:	e7e3      	b.n	800a0e4 <__smakebuf_r+0xc>
 800a11c:	4b0d      	ldr	r3, [pc, #52]	; (800a154 <__smakebuf_r+0x7c>)
 800a11e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	6020      	str	r0, [r4, #0]
 800a124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a128:	81a3      	strh	r3, [r4, #12]
 800a12a:	9b00      	ldr	r3, [sp, #0]
 800a12c:	6163      	str	r3, [r4, #20]
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	6120      	str	r0, [r4, #16]
 800a132:	b15b      	cbz	r3, 800a14c <__smakebuf_r+0x74>
 800a134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a138:	4630      	mov	r0, r6
 800a13a:	f000 f88d 	bl	800a258 <_isatty_r>
 800a13e:	b128      	cbz	r0, 800a14c <__smakebuf_r+0x74>
 800a140:	89a3      	ldrh	r3, [r4, #12]
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	f043 0301 	orr.w	r3, r3, #1
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	89a0      	ldrh	r0, [r4, #12]
 800a14e:	4305      	orrs	r5, r0
 800a150:	81a5      	strh	r5, [r4, #12]
 800a152:	e7cd      	b.n	800a0f0 <__smakebuf_r+0x18>
 800a154:	08009445 	.word	0x08009445

0800a158 <__malloc_lock>:
 800a158:	4801      	ldr	r0, [pc, #4]	; (800a160 <__malloc_lock+0x8>)
 800a15a:	f7ff ba45 	b.w	80095e8 <__retarget_lock_acquire_recursive>
 800a15e:	bf00      	nop
 800a160:	20001bc8 	.word	0x20001bc8

0800a164 <__malloc_unlock>:
 800a164:	4801      	ldr	r0, [pc, #4]	; (800a16c <__malloc_unlock+0x8>)
 800a166:	f7ff ba40 	b.w	80095ea <__retarget_lock_release_recursive>
 800a16a:	bf00      	nop
 800a16c:	20001bc8 	.word	0x20001bc8

0800a170 <_free_r>:
 800a170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a172:	2900      	cmp	r1, #0
 800a174:	d048      	beq.n	800a208 <_free_r+0x98>
 800a176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17a:	9001      	str	r0, [sp, #4]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f1a1 0404 	sub.w	r4, r1, #4
 800a182:	bfb8      	it	lt
 800a184:	18e4      	addlt	r4, r4, r3
 800a186:	f7ff ffe7 	bl	800a158 <__malloc_lock>
 800a18a:	4a20      	ldr	r2, [pc, #128]	; (800a20c <_free_r+0x9c>)
 800a18c:	9801      	ldr	r0, [sp, #4]
 800a18e:	6813      	ldr	r3, [r2, #0]
 800a190:	4615      	mov	r5, r2
 800a192:	b933      	cbnz	r3, 800a1a2 <_free_r+0x32>
 800a194:	6063      	str	r3, [r4, #4]
 800a196:	6014      	str	r4, [r2, #0]
 800a198:	b003      	add	sp, #12
 800a19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a19e:	f7ff bfe1 	b.w	800a164 <__malloc_unlock>
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	d90b      	bls.n	800a1be <_free_r+0x4e>
 800a1a6:	6821      	ldr	r1, [r4, #0]
 800a1a8:	1862      	adds	r2, r4, r1
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	bf04      	itt	eq
 800a1ae:	681a      	ldreq	r2, [r3, #0]
 800a1b0:	685b      	ldreq	r3, [r3, #4]
 800a1b2:	6063      	str	r3, [r4, #4]
 800a1b4:	bf04      	itt	eq
 800a1b6:	1852      	addeq	r2, r2, r1
 800a1b8:	6022      	streq	r2, [r4, #0]
 800a1ba:	602c      	str	r4, [r5, #0]
 800a1bc:	e7ec      	b.n	800a198 <_free_r+0x28>
 800a1be:	461a      	mov	r2, r3
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	b10b      	cbz	r3, 800a1c8 <_free_r+0x58>
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d9fa      	bls.n	800a1be <_free_r+0x4e>
 800a1c8:	6811      	ldr	r1, [r2, #0]
 800a1ca:	1855      	adds	r5, r2, r1
 800a1cc:	42a5      	cmp	r5, r4
 800a1ce:	d10b      	bne.n	800a1e8 <_free_r+0x78>
 800a1d0:	6824      	ldr	r4, [r4, #0]
 800a1d2:	4421      	add	r1, r4
 800a1d4:	1854      	adds	r4, r2, r1
 800a1d6:	42a3      	cmp	r3, r4
 800a1d8:	6011      	str	r1, [r2, #0]
 800a1da:	d1dd      	bne.n	800a198 <_free_r+0x28>
 800a1dc:	681c      	ldr	r4, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	6053      	str	r3, [r2, #4]
 800a1e2:	4421      	add	r1, r4
 800a1e4:	6011      	str	r1, [r2, #0]
 800a1e6:	e7d7      	b.n	800a198 <_free_r+0x28>
 800a1e8:	d902      	bls.n	800a1f0 <_free_r+0x80>
 800a1ea:	230c      	movs	r3, #12
 800a1ec:	6003      	str	r3, [r0, #0]
 800a1ee:	e7d3      	b.n	800a198 <_free_r+0x28>
 800a1f0:	6825      	ldr	r5, [r4, #0]
 800a1f2:	1961      	adds	r1, r4, r5
 800a1f4:	428b      	cmp	r3, r1
 800a1f6:	bf04      	itt	eq
 800a1f8:	6819      	ldreq	r1, [r3, #0]
 800a1fa:	685b      	ldreq	r3, [r3, #4]
 800a1fc:	6063      	str	r3, [r4, #4]
 800a1fe:	bf04      	itt	eq
 800a200:	1949      	addeq	r1, r1, r5
 800a202:	6021      	streq	r1, [r4, #0]
 800a204:	6054      	str	r4, [r2, #4]
 800a206:	e7c7      	b.n	800a198 <_free_r+0x28>
 800a208:	b003      	add	sp, #12
 800a20a:	bd30      	pop	{r4, r5, pc}
 800a20c:	2000195c 	.word	0x2000195c

0800a210 <_read_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d07      	ldr	r5, [pc, #28]	; (800a230 <_read_r+0x20>)
 800a214:	4604      	mov	r4, r0
 800a216:	4608      	mov	r0, r1
 800a218:	4611      	mov	r1, r2
 800a21a:	2200      	movs	r2, #0
 800a21c:	602a      	str	r2, [r5, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	f7f7 fbe0 	bl	80019e4 <_read>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_read_r+0x1e>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_read_r+0x1e>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20001bd0 	.word	0x20001bd0

0800a234 <_fstat_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_fstat_r+0x20>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f7f7 fc14 	bl	8001a6e <_fstat>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d102      	bne.n	800a250 <_fstat_r+0x1c>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b103      	cbz	r3, 800a250 <_fstat_r+0x1c>
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	bf00      	nop
 800a254:	20001bd0 	.word	0x20001bd0

0800a258 <_isatty_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	; (800a274 <_isatty_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f7 fc13 	bl	8001a8e <_isatty>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_isatty_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_isatty_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20001bd0 	.word	0x20001bd0

0800a278 <_init>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	bf00      	nop
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr

0800a284 <_fini>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	bf00      	nop
 800a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28a:	bc08      	pop	{r3}
 800a28c:	469e      	mov	lr, r3
 800a28e:	4770      	bx	lr
