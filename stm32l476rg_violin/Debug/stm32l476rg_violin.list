
stm32l476rg_violin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001001c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  080101ac  080101ac  000201ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a88  08010a88  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08010a88  08010a88  00020a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a90  08010a90  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a90  08010a90  00020a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a94  08010a94  00020a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08010a98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010478  2000008c  08010b24  0003008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010504  08010b24  00030504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e10d  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000556f  00000000  00000000  0005e1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002268  00000000  00000000  00063738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002050  00000000  00000000  000659a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e5d3  00000000  00000000  000679f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027b30  00000000  00000000  00095fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117a14  00000000  00000000  000bdaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d5507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ae8  00000000  00000000  001d555c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010194 	.word	0x08010194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08010194 	.word	0x08010194

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <SELECT+0x18>)
 8000dbe:	f003 fb25 	bl	800440c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f001 fe1e 	bl	8002a04 <HAL_Delay>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <DESELECT+0x18>)
 8000dda:	f003 fb17 	bl	800440c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f001 fe10 	bl	8002a04 <HAL_Delay>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	48000400 	.word	0x48000400

08000dec <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000df6:	bf00      	nop
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SPI_TxByte+0x30>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d1f8      	bne.n	8000df8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000e06:	1df9      	adds	r1, r7, #7
 8000e08:	2364      	movs	r3, #100	; 0x64
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <SPI_TxByte+0x30>)
 8000e0e:	f004 fef6 	bl	8005bfe <HAL_SPI_Transmit>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000d2d4 	.word	0x2000d2d4

08000e20 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e2c:	bf00      	nop
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <SPI_TxBuffer+0x30>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d1f8      	bne.n	8000e2e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4803      	ldr	r0, [pc, #12]	; (8000e50 <SPI_TxBuffer+0x30>)
 8000e44:	f004 fedb 	bl	8005bfe <HAL_SPI_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000d2d4 	.word	0x2000d2d4

08000e54 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e5e:	bf00      	nop
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <SPI_RxByte+0x34>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d1f8      	bne.n	8000e60 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e6e:	1dba      	adds	r2, r7, #6
 8000e70:	1df9      	adds	r1, r7, #7
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <SPI_RxByte+0x34>)
 8000e7a:	f005 f82e 	bl	8005eda <HAL_SPI_TransmitReceive>

	return data;
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000d2d4 	.word	0x2000d2d4

08000e8c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e94:	f7ff ffde 	bl	8000e54 <SPI_RxByte>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	701a      	strb	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <SD_ReadyWait+0x30>)
 8000eb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eb4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000eb6:	f7ff ffcd 	bl	8000e54 <SPI_RxByte>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2bff      	cmp	r3, #255	; 0xff
 8000ec2:	d003      	beq.n	8000ecc <SD_ReadyWait+0x24>
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SD_ReadyWait+0x30>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f4      	bne.n	8000eb6 <SD_ReadyWait+0xe>

	return res;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200040c8 	.word	0x200040c8

08000edc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000ee2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ee6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ee8:	f7ff ff72 	bl	8000dd0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	e005      	b.n	8000efe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ef2:	20ff      	movs	r0, #255	; 0xff
 8000ef4:	f7ff ff7a 	bl	8000dec <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	ddf6      	ble.n	8000ef2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000f04:	f7ff ff56 	bl	8000db4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000f1c:	2395      	movs	r3, #149	; 0x95
 8000f1e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000f20:	463b      	mov	r3, r7
 8000f22:	2106      	movs	r1, #6
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff7b 	bl	8000e20 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000f2a:	e002      	b.n	8000f32 <SD_PowerOn+0x56>
	{
		cnt--;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000f32:	f7ff ff8f 	bl	8000e54 <SPI_RxByte>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <SD_PowerOn+0x66>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f4      	bne.n	8000f2c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000f42:	f7ff ff45 	bl	8000dd0 <DESELECT>
	SPI_TxByte(0XFF);
 8000f46:	20ff      	movs	r0, #255	; 0xff
 8000f48:	f7ff ff50 	bl	8000dec <SPI_TxByte>

	PowerFlag = 1;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <SD_PowerOn+0x80>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000a9 	.word	0x200000a9

08000f60 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <SD_PowerOff+0x14>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200000a9 	.word	0x200000a9

08000f78 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <SD_CheckPower+0x14>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000a9 	.word	0x200000a9

08000f90 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <SD_RxDataBlock+0x58>)
 8000f9c:	22c8      	movs	r2, #200	; 0xc8
 8000f9e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000fa0:	f7ff ff58 	bl	8000e54 <SPI_RxByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2bff      	cmp	r3, #255	; 0xff
 8000fac:	d103      	bne.n	8000fb6 <SD_RxDataBlock+0x26>
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <SD_RxDataBlock+0x58>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f4      	bne.n	8000fa0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2bfe      	cmp	r3, #254	; 0xfe
 8000fba:	d001      	beq.n	8000fc0 <SD_RxDataBlock+0x30>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e00f      	b.n	8000fe0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff60 	bl	8000e8c <SPI_RxBytePtr>
	} while(len--);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	603a      	str	r2, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f4      	bne.n	8000fc0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000fd6:	f7ff ff3d 	bl	8000e54 <SPI_RxByte>
	SPI_RxByte();
 8000fda:	f7ff ff3b 	bl	8000e54 <SPI_RxByte>

	return TRUE;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200040ca 	.word	0x200040ca

08000fec <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ffc:	f7ff ff54 	bl	8000ea8 <SD_ReadyWait>
 8001000:	4603      	mov	r3, r0
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d001      	beq.n	800100a <SD_TxDataBlock+0x1e>
 8001006:	2300      	movs	r3, #0
 8001008:	e02f      	b.n	800106a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff feed 	bl	8000dec <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	2bfd      	cmp	r3, #253	; 0xfd
 8001016:	d020      	beq.n	800105a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff feff 	bl	8000e20 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001022:	f7ff ff17 	bl	8000e54 <SPI_RxByte>
		SPI_RxByte();
 8001026:	f7ff ff15 	bl	8000e54 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800102a:	e00b      	b.n	8001044 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800102c:	f7ff ff12 	bl	8000e54 <SPI_RxByte>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	f003 031f 	and.w	r3, r3, #31
 800103a:	2b05      	cmp	r3, #5
 800103c:	d006      	beq.n	800104c <SD_TxDataBlock+0x60>
			i++;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	3301      	adds	r3, #1
 8001042:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	2b40      	cmp	r3, #64	; 0x40
 8001048:	d9f0      	bls.n	800102c <SD_TxDataBlock+0x40>
 800104a:	e000      	b.n	800104e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800104c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800104e:	bf00      	nop
 8001050:	f7ff ff00 	bl	8000e54 <SPI_RxByte>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0fa      	beq.n	8001050 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	2b05      	cmp	r3, #5
 8001062:	d101      	bne.n	8001068 <SD_TxDataBlock+0x7c>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	6039      	str	r1, [r7, #0]
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800107e:	f7ff ff13 	bl	8000ea8 <SD_ReadyWait>
 8001082:	4603      	mov	r3, r0
 8001084:	2bff      	cmp	r3, #255	; 0xff
 8001086:	d001      	beq.n	800108c <SD_SendCmd+0x1a>
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	e042      	b.n	8001112 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff feac 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	0e1b      	lsrs	r3, r3, #24
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fea6 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fea0 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fe9a 	bl	8000dec <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fe95 	bl	8000dec <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b40      	cmp	r3, #64	; 0x40
 80010c6:	d102      	bne.n	80010ce <SD_SendCmd+0x5c>
 80010c8:	2395      	movs	r3, #149	; 0x95
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e007      	b.n	80010de <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b48      	cmp	r3, #72	; 0x48
 80010d2:	d102      	bne.n	80010da <SD_SendCmd+0x68>
 80010d4:	2387      	movs	r3, #135	; 0x87
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <SD_SendCmd+0x6c>
	else crc = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fe83 	bl	8000dec <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b4c      	cmp	r3, #76	; 0x4c
 80010ea:	d101      	bne.n	80010f0 <SD_SendCmd+0x7e>
 80010ec:	f7ff feb2 	bl	8000e54 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80010f0:	230a      	movs	r3, #10
 80010f2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80010f4:	f7ff feae 	bl	8000e54 <SPI_RxByte>
 80010f8:	4603      	mov	r3, r0
 80010fa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80010fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da05      	bge.n	8001110 <SD_SendCmd+0x9e>
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	3b01      	subs	r3, #1
 8001108:	73bb      	strb	r3, [r7, #14]
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f1      	bne.n	80010f4 <SD_SendCmd+0x82>

	return res;
 8001110:	7b7b      	ldrb	r3, [r7, #13]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SD_disk_initialize+0x14>
 800112c:	2301      	movs	r3, #1
 800112e:	e0d1      	b.n	80012d4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001130:	4b6a      	ldr	r3, [pc, #424]	; (80012dc <SD_disk_initialize+0x1c0>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <SD_disk_initialize+0x2a>
 800113e:	4b67      	ldr	r3, [pc, #412]	; (80012dc <SD_disk_initialize+0x1c0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	e0c6      	b.n	80012d4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001146:	f7ff fec9 	bl	8000edc <SD_PowerOn>

	/* slave select */
	SELECT();
 800114a:	f7ff fe33 	bl	8000db4 <SELECT>

	/* check disk type */
	type = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001152:	2100      	movs	r1, #0
 8001154:	2040      	movs	r0, #64	; 0x40
 8001156:	f7ff ff8c 	bl	8001072 <SD_SendCmd>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	f040 80a1 	bne.w	80012a4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <SD_disk_initialize+0x1c4>)
 8001164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001168:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800116a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800116e:	2048      	movs	r0, #72	; 0x48
 8001170:	f7ff ff7f 	bl	8001072 <SD_SendCmd>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d155      	bne.n	8001226 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e00c      	b.n	800119a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001180:	7bfc      	ldrb	r4, [r7, #15]
 8001182:	f7ff fe67 	bl	8000e54 <SPI_RxByte>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4423      	add	r3, r4
 8001190:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d9ef      	bls.n	8001180 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d17e      	bne.n	80012a4 <SD_disk_initialize+0x188>
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	2baa      	cmp	r3, #170	; 0xaa
 80011aa:	d17b      	bne.n	80012a4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011ac:	2100      	movs	r1, #0
 80011ae:	2077      	movs	r0, #119	; 0x77
 80011b0:	f7ff ff5f 	bl	8001072 <SD_SendCmd>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d807      	bhi.n	80011ca <SD_disk_initialize+0xae>
 80011ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80011be:	2069      	movs	r0, #105	; 0x69
 80011c0:	f7ff ff57 	bl	8001072 <SD_SendCmd>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80011ca:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <SD_disk_initialize+0x1c4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ec      	bne.n	80011ac <SD_disk_initialize+0x90>
 80011d2:	e000      	b.n	80011d6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80011d4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80011d6:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <SD_disk_initialize+0x1c4>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d062      	beq.n	80012a4 <SD_disk_initialize+0x188>
 80011de:	2100      	movs	r1, #0
 80011e0:	207a      	movs	r0, #122	; 0x7a
 80011e2:	f7ff ff46 	bl	8001072 <SD_SendCmd>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d15b      	bne.n	80012a4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e00c      	b.n	800120c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80011f2:	7bfc      	ldrb	r4, [r7, #15]
 80011f4:	f7ff fe2e 	bl	8000e54 <SPI_RxByte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4423      	add	r3, r4
 8001202:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	3301      	adds	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d9ef      	bls.n	80011f2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001212:	7a3b      	ldrb	r3, [r7, #8]
 8001214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SD_disk_initialize+0x104>
 800121c:	230c      	movs	r3, #12
 800121e:	e000      	b.n	8001222 <SD_disk_initialize+0x106>
 8001220:	2304      	movs	r3, #4
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	e03e      	b.n	80012a4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001226:	2100      	movs	r1, #0
 8001228:	2077      	movs	r0, #119	; 0x77
 800122a:	f7ff ff22 	bl	8001072 <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d808      	bhi.n	8001246 <SD_disk_initialize+0x12a>
 8001234:	2100      	movs	r1, #0
 8001236:	2069      	movs	r0, #105	; 0x69
 8001238:	f7ff ff1b 	bl	8001072 <SD_SendCmd>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d801      	bhi.n	8001246 <SD_disk_initialize+0x12a>
 8001242:	2302      	movs	r3, #2
 8001244:	e000      	b.n	8001248 <SD_disk_initialize+0x12c>
 8001246:	2301      	movs	r3, #1
 8001248:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d10e      	bne.n	800126e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001250:	2100      	movs	r1, #0
 8001252:	2077      	movs	r0, #119	; 0x77
 8001254:	f7ff ff0d 	bl	8001072 <SD_SendCmd>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d80e      	bhi.n	800127c <SD_disk_initialize+0x160>
 800125e:	2100      	movs	r1, #0
 8001260:	2069      	movs	r0, #105	; 0x69
 8001262:	f7ff ff06 	bl	8001072 <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <SD_disk_initialize+0x160>
 800126c:	e00c      	b.n	8001288 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800126e:	2100      	movs	r1, #0
 8001270:	2041      	movs	r0, #65	; 0x41
 8001272:	f7ff fefe 	bl	8001072 <SD_SendCmd>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <SD_disk_initialize+0x1c4>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e2      	bne.n	800124a <SD_disk_initialize+0x12e>
 8001284:	e000      	b.n	8001288 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001286:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <SD_disk_initialize+0x1c4>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <SD_disk_initialize+0x184>
 8001290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001294:	2050      	movs	r0, #80	; 0x50
 8001296:	f7ff feec 	bl	8001072 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SD_disk_initialize+0x188>
 80012a0:	2300      	movs	r3, #0
 80012a2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <SD_disk_initialize+0x1c8>)
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80012aa:	f7ff fd91 	bl	8000dd0 <DESELECT>
	SPI_RxByte();
 80012ae:	f7ff fdd1 	bl	8000e54 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80012b2:	7bbb      	ldrb	r3, [r7, #14]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d008      	beq.n	80012ca <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <SD_disk_initialize+0x1c0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SD_disk_initialize+0x1c0>)
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e001      	b.n	80012ce <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80012ca:	f7ff fe49 	bl	8000f60 <SD_PowerOff>
	}

	return Stat;
 80012ce:	4b03      	ldr	r3, [pc, #12]	; (80012dc <SD_disk_initialize+0x1c0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	200040ca 	.word	0x200040ca
 80012e4:	200000a8 	.word	0x200000a8

080012e8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SD_disk_status+0x14>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e002      	b.n	8001302 <SD_disk_status+0x1a>
	return Stat;
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <SD_disk_status+0x28>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <SD_disk_read+0x1c>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <SD_disk_read+0x20>
 8001330:	2304      	movs	r3, #4
 8001332:	e051      	b.n	80013d8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <SD_disk_read+0xcc>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SD_disk_read+0x32>
 8001342:	2303      	movs	r3, #3
 8001344:	e048      	b.n	80013d8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <SD_disk_read+0xd0>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <SD_disk_read+0x44>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	607b      	str	r3, [r7, #4]

	SELECT();
 8001358:	f7ff fd2c 	bl	8000db4 <SELECT>

	if (count == 1)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d111      	bne.n	8001386 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	2051      	movs	r0, #81	; 0x51
 8001366:	f7ff fe84 	bl	8001072 <SD_SendCmd>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d129      	bne.n	80013c4 <SD_disk_read+0xb0>
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff fe0b 	bl	8000f90 <SD_RxDataBlock>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d021      	beq.n	80013c4 <SD_disk_read+0xb0>
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	e01e      	b.n	80013c4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	2052      	movs	r0, #82	; 0x52
 800138a:	f7ff fe72 	bl	8001072 <SD_SendCmd>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d117      	bne.n	80013c4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f7ff fdf9 	bl	8000f90 <SD_RxDataBlock>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <SD_disk_read+0xa6>
				buff += 512;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013aa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ed      	bne.n	8001394 <SD_disk_read+0x80>
 80013b8:	e000      	b.n	80013bc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80013ba:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80013bc:	2100      	movs	r1, #0
 80013be:	204c      	movs	r0, #76	; 0x4c
 80013c0:	f7ff fe57 	bl	8001072 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80013c4:	f7ff fd04 	bl	8000dd0 <DESELECT>
	SPI_RxByte();
 80013c8:	f7ff fd44 	bl	8000e54 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000000 	.word	0x20000000
 80013e4:	200000a8 	.word	0x200000a8

080013e8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <SD_disk_write+0x1c>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <SD_disk_write+0x20>
 8001404:	2304      	movs	r3, #4
 8001406:	e06b      	b.n	80014e0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <SD_disk_write+0x100>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SD_disk_write+0x32>
 8001416:	2303      	movs	r3, #3
 8001418:	e062      	b.n	80014e0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <SD_disk_write+0x100>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SD_disk_write+0x44>
 8001428:	2302      	movs	r3, #2
 800142a:	e059      	b.n	80014e0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <SD_disk_write+0x104>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <SD_disk_write+0x56>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	607b      	str	r3, [r7, #4]

	SELECT();
 800143e:	f7ff fcb9 	bl	8000db4 <SELECT>

	if (count == 1)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d110      	bne.n	800146a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	2058      	movs	r0, #88	; 0x58
 800144c:	f7ff fe11 	bl	8001072 <SD_SendCmd>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d13a      	bne.n	80014cc <SD_disk_write+0xe4>
 8001456:	21fe      	movs	r1, #254	; 0xfe
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f7ff fdc7 	bl	8000fec <SD_TxDataBlock>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d033      	beq.n	80014cc <SD_disk_write+0xe4>
			count = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	e030      	b.n	80014cc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <SD_disk_write+0x104>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001476:	2100      	movs	r1, #0
 8001478:	2077      	movs	r0, #119	; 0x77
 800147a:	f7ff fdfa 	bl	8001072 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	2057      	movs	r0, #87	; 0x57
 8001482:	f7ff fdf6 	bl	8001072 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	2059      	movs	r0, #89	; 0x59
 800148a:	f7ff fdf2 	bl	8001072 <SD_SendCmd>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d11b      	bne.n	80014cc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001494:	21fc      	movs	r1, #252	; 0xfc
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7ff fda8 	bl	8000fec <SD_TxDataBlock>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <SD_disk_write+0xd0>
				buff += 512;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1ee      	bne.n	8001494 <SD_disk_write+0xac>
 80014b6:	e000      	b.n	80014ba <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80014b8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80014ba:	21fd      	movs	r1, #253	; 0xfd
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fd95 	bl	8000fec <SD_TxDataBlock>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <SD_disk_write+0xe4>
			{
				count = 1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80014cc:	f7ff fc80 	bl	8000dd0 <DESELECT>
	SPI_RxByte();
 80014d0:	f7ff fcc0 	bl	8000e54 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	200000a8 	.word	0x200000a8

080014f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	603a      	str	r2, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SD_disk_ioctl+0x1e>
 800150a:	2304      	movs	r3, #4
 800150c:	e115      	b.n	800173a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d124      	bne.n	8001564 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d012      	beq.n	8001548 <SD_disk_ioctl+0x58>
 8001522:	2b02      	cmp	r3, #2
 8001524:	dc1a      	bgt.n	800155c <SD_disk_ioctl+0x6c>
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <SD_disk_ioctl+0x40>
 800152a:	2b01      	cmp	r3, #1
 800152c:	d006      	beq.n	800153c <SD_disk_ioctl+0x4c>
 800152e:	e015      	b.n	800155c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001530:	f7ff fd16 	bl	8000f60 <SD_PowerOff>
			res = RES_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800153a:	e0fc      	b.n	8001736 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800153c:	f7ff fcce 	bl	8000edc <SD_PowerOn>
			res = RES_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001546:	e0f6      	b.n	8001736 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	1c5c      	adds	r4, r3, #1
 800154c:	f7ff fd14 	bl	8000f78 <SD_CheckPower>
 8001550:	4603      	mov	r3, r0
 8001552:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800155a:	e0ec      	b.n	8001736 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800155c:	2304      	movs	r3, #4
 800155e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001562:	e0e8      	b.n	8001736 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b77      	ldr	r3, [pc, #476]	; (8001744 <SD_disk_ioctl+0x254>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_ioctl+0x86>
 8001572:	2303      	movs	r3, #3
 8001574:	e0e1      	b.n	800173a <SD_disk_ioctl+0x24a>

		SELECT();
 8001576:	f7ff fc1d 	bl	8000db4 <SELECT>

		switch (ctrl)
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b0d      	cmp	r3, #13
 800157e:	f200 80cb 	bhi.w	8001718 <SD_disk_ioctl+0x228>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <SD_disk_ioctl+0x98>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001683 	.word	0x08001683
 800158c:	080015c1 	.word	0x080015c1
 8001590:	08001673 	.word	0x08001673
 8001594:	08001719 	.word	0x08001719
 8001598:	08001719 	.word	0x08001719
 800159c:	08001719 	.word	0x08001719
 80015a0:	08001719 	.word	0x08001719
 80015a4:	08001719 	.word	0x08001719
 80015a8:	08001719 	.word	0x08001719
 80015ac:	08001719 	.word	0x08001719
 80015b0:	08001719 	.word	0x08001719
 80015b4:	08001695 	.word	0x08001695
 80015b8:	080016b9 	.word	0x080016b9
 80015bc:	080016dd 	.word	0x080016dd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80015c0:	2100      	movs	r1, #0
 80015c2:	2049      	movs	r0, #73	; 0x49
 80015c4:	f7ff fd55 	bl	8001072 <SD_SendCmd>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80a8 	bne.w	8001720 <SD_disk_ioctl+0x230>
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2110      	movs	r1, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fcda 	bl	8000f90 <SD_RxDataBlock>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 809e 	beq.w	8001720 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10e      	bne.n	800160c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015ee:	7d7b      	ldrb	r3, [r7, #21]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	7d3b      	ldrb	r3, [r7, #20]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001602:	8bfb      	ldrh	r3, [r7, #30]
 8001604:	029a      	lsls	r2, r3, #10
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e02e      	b.n	800166a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	b2da      	uxtb	r2, r3
 8001614:	7dbb      	ldrb	r3, [r7, #22]
 8001616:	09db      	lsrs	r3, r3, #7
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	7d7b      	ldrb	r3, [r7, #21]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f003 0306 	and.w	r3, r3, #6
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3302      	adds	r3, #2
 8001630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001634:	7d3b      	ldrb	r3, [r7, #20]
 8001636:	099b      	lsrs	r3, r3, #6
 8001638:	b2db      	uxtb	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	b29b      	uxth	r3, r3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	7cbb      	ldrb	r3, [r7, #18]
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	b29b      	uxth	r3, r3
 800164e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001652:	b29b      	uxth	r3, r3
 8001654:	4413      	add	r3, r2
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800165c:	8bfa      	ldrh	r2, [r7, #30]
 800165e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001662:	3b09      	subs	r3, #9
 8001664:	409a      	lsls	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001670:	e056      	b.n	8001720 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001680:	e055      	b.n	800172e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001682:	f7ff fc11 	bl	8000ea8 <SD_ReadyWait>
 8001686:	4603      	mov	r3, r0
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d14b      	bne.n	8001724 <SD_disk_ioctl+0x234>
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001692:	e047      	b.n	8001724 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001694:	2100      	movs	r1, #0
 8001696:	2049      	movs	r0, #73	; 0x49
 8001698:	f7ff fceb 	bl	8001072 <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d142      	bne.n	8001728 <SD_disk_ioctl+0x238>
 80016a2:	2110      	movs	r1, #16
 80016a4:	6a38      	ldr	r0, [r7, #32]
 80016a6:	f7ff fc73 	bl	8000f90 <SD_RxDataBlock>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03b      	beq.n	8001728 <SD_disk_ioctl+0x238>
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016b6:	e037      	b.n	8001728 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80016b8:	2100      	movs	r1, #0
 80016ba:	204a      	movs	r0, #74	; 0x4a
 80016bc:	f7ff fcd9 	bl	8001072 <SD_SendCmd>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d132      	bne.n	800172c <SD_disk_ioctl+0x23c>
 80016c6:	2110      	movs	r1, #16
 80016c8:	6a38      	ldr	r0, [r7, #32]
 80016ca:	f7ff fc61 	bl	8000f90 <SD_RxDataBlock>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d02b      	beq.n	800172c <SD_disk_ioctl+0x23c>
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016da:	e027      	b.n	800172c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80016dc:	2100      	movs	r1, #0
 80016de:	207a      	movs	r0, #122	; 0x7a
 80016e0:	f7ff fcc7 	bl	8001072 <SD_SendCmd>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016f0:	e00b      	b.n	800170a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80016f2:	6a3c      	ldr	r4, [r7, #32]
 80016f4:	1c63      	adds	r3, r4, #1
 80016f6:	623b      	str	r3, [r7, #32]
 80016f8:	f7ff fbac 	bl	8000e54 <SPI_RxByte>
 80016fc:	4603      	mov	r3, r0
 80016fe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001704:	3301      	adds	r3, #1
 8001706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800170a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800170e:	2b03      	cmp	r3, #3
 8001710:	d9ef      	bls.n	80016f2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001718:	2304      	movs	r3, #4
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800171e:	e006      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 8001720:	bf00      	nop
 8001722:	e004      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 8001724:	bf00      	nop
 8001726:	e002      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 8001728:	bf00      	nop
 800172a:	e000      	b.n	800172e <SD_disk_ioctl+0x23e>
			break;
 800172c:	bf00      	nop
		}

		DESELECT();
 800172e:	f7ff fb4f 	bl	8000dd0 <DESELECT>
		SPI_RxByte();
 8001732:	f7ff fb8f 	bl	8000e54 <SPI_RxByte>
	}

	return res;
 8001736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800173a:	4618      	mov	r0, r3
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8001750:	1d39      	adds	r1, r7, #4
 8001752:	2364      	movs	r3, #100	; 0x64
 8001754:	2201      	movs	r2, #1
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <__io_putchar+0x20>)
 8001758:	f006 f8c2 	bl	80078e0 <HAL_UART_Transmit>
	return ch;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000d338 	.word	0x2000d338

0800176c <transmit_uart>:

void transmit_uart(char *string) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7fe fd2b 	bl	80001d0 <strlen>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, pdMS_TO_TICKS(100));
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	b29a      	uxth	r2, r3
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4803      	ldr	r0, [pc, #12]	; (8001794 <transmit_uart+0x28>)
 8001788:	f006 f8aa 	bl	80078e0 <HAL_UART_Transmit>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000d338 	.word	0x2000d338

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f001 f8f2 	bl	8002984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f84c 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a4:	f000 fa46 	bl	8001c34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017a8:	f000 fa14 	bl	8001bd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017ac:	f000 f8ce 	bl	800194c <MX_ADC1_Init>
  MX_TIM1_Init();
 80017b0:	f000 f980 	bl	8001ab4 <MX_TIM1_Init>
  MX_FATFS_Init();
 80017b4:	f006 fd1a 	bl	80081ec <MX_FATFS_Init>
  MX_SPI1_Init();
 80017b8:	f000 f93e 	bl	8001a38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	4813      	ldr	r0, [pc, #76]	; (800180c <main+0x74>)
 80017c0:	f005 f828 	bl	8006814 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80017c4:	f009 fdfc 	bl	800b3c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of xMainMenuTask */
  xMainMenuTaskHandle = osThreadNew(StartMainMenuTask, NULL, &xMainMenuTask_attributes);
 80017c8:	4a11      	ldr	r2, [pc, #68]	; (8001810 <main+0x78>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4811      	ldr	r0, [pc, #68]	; (8001814 <main+0x7c>)
 80017ce:	f009 fe41 	bl	800b454 <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <main+0x80>)
 80017d6:	6013      	str	r3, [r2, #0]

  /* creation of xPlayTickTask */
  xPlayTickTaskHandle = osThreadNew(StartPlayTickTask, NULL, &xPlayTickTask_attributes);
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <main+0x84>)
 80017da:	2100      	movs	r1, #0
 80017dc:	4810      	ldr	r0, [pc, #64]	; (8001820 <main+0x88>)
 80017de:	f009 fe39 	bl	800b454 <osThreadNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <main+0x8c>)
 80017e6:	6013      	str	r3, [r2, #0]

  /* creation of xPlayStateTask */
  xPlayStateTaskHandle = osThreadNew(StartPlayState, NULL, &xPlayStateTask_attributes);
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <main+0x90>)
 80017ea:	2100      	movs	r1, #0
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <main+0x94>)
 80017ee:	f009 fe31 	bl	800b454 <osThreadNew>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <main+0x98>)
 80017f6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEmbeddedViolinEventGroup */
  xEmbeddedViolinEventGroupHandle = osEventFlagsNew(&xEmbeddedViolinEventGroup_attributes);
 80017f8:	480e      	ldr	r0, [pc, #56]	; (8001834 <main+0x9c>)
 80017fa:	f009 fed8 	bl	800b5ae <osEventFlagsNew>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <main+0xa0>)
 8001802:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001804:	f009 fe00 	bl	800b408 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001808:	e7fe      	b.n	8001808 <main+0x70>
 800180a:	bf00      	nop
 800180c:	2000d27c 	.word	0x2000d27c
 8001810:	080104e0 	.word	0x080104e0
 8001814:	08001ce1 	.word	0x08001ce1
 8001818:	20005180 	.word	0x20005180
 800181c:	08010504 	.word	0x08010504
 8001820:	08001e3d 	.word	0x08001e3d
 8001824:	200040d0 	.word	0x200040d0
 8001828:	08010528 	.word	0x08010528
 800182c:	08001ea1 	.word	0x08001ea1
 8001830:	2000d2cc 	.word	0x2000d2cc
 8001834:	0801054c 	.word	0x0801054c
 8001838:	200040d4 	.word	0x200040d4

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0b8      	sub	sp, #224	; 0xe0
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001846:	2244      	movs	r2, #68	; 0x44
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f00d fcce 	bl	800f1ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2288      	movs	r2, #136	; 0x88
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f00d fcc0 	bl	800f1ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187a:	2310      	movs	r3, #16
 800187c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001892:	230a      	movs	r3, #10
 8001894:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001898:	2307      	movs	r3, #7
 800189a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fe28 	bl	8004504 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018ba:	f000 fb29 	bl	8001f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018be:	230f      	movs	r3, #15
 80018c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018dc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80018e0:	2104      	movs	r1, #4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 f9f4 	bl	8004cd0 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80018ee:	f000 fb0f 	bl	8001f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80018f2:	f244 0302 	movw	r3, #16386	; 0x4002
 80018f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001900:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001902:	2302      	movs	r3, #2
 8001904:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800190a:	2308      	movs	r3, #8
 800190c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800190e:	2307      	movs	r3, #7
 8001910:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001912:	2302      	movs	r3, #2
 8001914:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800191a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fc0c 	bl	8005140 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800192e:	f000 faef 	bl	8001f10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001932:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001936:	f002 fd8f 	bl	8004458 <HAL_PWREx_ControlVoltageScaling>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001940:	f000 fae6 	bl	8001f10 <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	37e0      	adds	r7, #224	; 0xe0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001970:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <MX_ADC1_Init+0xe4>)
 8001972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MX_ADC1_Init+0xe0>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <MX_ADC1_Init+0xe0>)
 800198e:	2204      	movs	r2, #4
 8001990:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001994:	2200      	movs	r2, #0
 8001996:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_ADC1_Init+0xe0>)
 800199a:	2200      	movs	r2, #0
 800199c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ce:	4817      	ldr	r0, [pc, #92]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019d0:	f001 fa0a 	bl	8002de8 <HAL_ADC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019da:	f000 fa99 	bl	8001f10 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4810      	ldr	r0, [pc, #64]	; (8001a2c <MX_ADC1_Init+0xe0>)
 80019ea:	f002 f9d3 	bl	8003d94 <HAL_ADCEx_MultiModeConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80019f4:	f000 fa8c 	bl	8001f10 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_ADC1_Init+0xe8>)
 80019fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019fc:	2306      	movs	r3, #6
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a04:	237f      	movs	r3, #127	; 0x7f
 8001a06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_ADC1_Init+0xe0>)
 8001a16:	f001 fd75 	bl	8003504 <HAL_ADC_ConfigChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001a20:	f000 fa76 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000511c 	.word	0x2000511c
 8001a30:	50040000 	.word	0x50040000
 8001a34:	14f00020 	.word	0x14f00020

08001a38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <MX_SPI1_Init+0x78>)
 8001a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a6e:	2220      	movs	r2, #32
 8001a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a86:	2207      	movs	r2, #7
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a92:	2208      	movs	r2, #8
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a98:	f004 f80e 	bl	8005ab8 <HAL_SPI_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aa2:	f000 fa35 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000d2d4 	.word	0x2000d2d4
 8001ab0:	40013000 	.word	0x40013000

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b096      	sub	sp, #88	; 0x58
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	222c      	movs	r2, #44	; 0x2c
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00d fb83 	bl	800f1ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001ae8:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <MX_TIM1_Init+0x11c>)
 8001aea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10 - 1;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001aee:	2209      	movs	r2, #9
 8001af0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b12:	482e      	ldr	r0, [pc, #184]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b14:	f004 fe26 	bl	8006764 <HAL_TIM_PWM_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 f9f7 	bl	8001f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4825      	ldr	r0, [pc, #148]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b36:	f005 fd61 	bl	80075fc <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b40:	f000 f9e6 	bl	8001f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b44:	2360      	movs	r3, #96	; 0x60
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4818      	ldr	r0, [pc, #96]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001b6a:	f005 f879 	bl	8006c60 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b74:	f000 f9cc 	bl	8001f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4619      	mov	r1, r3
 8001bac:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001bae:	f005 fdad 	bl	800770c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001bb8:	f000 f9aa 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x118>)
 8001bbe:	f000 fccf 	bl	8002560 <HAL_TIM_MspPostInit>

}
 8001bc2:	bf00      	nop
 8001bc4:	3758      	adds	r7, #88	; 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000d27c 	.word	0x2000d27c
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <MX_USART2_UART_Init+0x5c>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART2_UART_Init+0x58>)
 8001c18:	f005 fe14 	bl	8007844 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c22:	f000 f975 	bl	8001f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000d338 	.word	0x2000d338
 8001c30:	40004400 	.word	0x40004400

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_GPIO_Init+0xa4>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	480b      	ldr	r0, [pc, #44]	; (8001cdc <MX_GPIO_Init+0xa8>)
 8001cb0:	f002 fbac 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb4:	2340      	movs	r3, #64	; 0x40
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_GPIO_Init+0xa8>)
 8001ccc:	f002 f9f4 	bl	80040b8 <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48000400 	.word	0x48000400

08001ce0 <StartMainMenuTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainMenuTask */
void StartMainMenuTask(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN StartMainMenuTask */
  /* Infinite loop */
  for(;;)
  {
  	printf("Main Menu\r\n");
 8001ce8:	4841      	ldr	r0, [pc, #260]	; (8001df0 <StartMainMenuTask+0x110>)
 8001cea:	f00d fb0d 	bl	800f308 <puts>
    osDelay(1000);
 8001cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf2:	f009 fc41 	bl	800b578 <osDelay>

    printf("Reading song\r\n");
 8001cf6:	483f      	ldr	r0, [pc, #252]	; (8001df4 <StartMainMenuTask+0x114>)
 8001cf8:	f00d fb06 	bl	800f308 <puts>
    osDelay(1000);
 8001cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d00:	f009 fc3a 	bl	800b578 <osDelay>



    // Mount
		fres = f_mount(&fs, "", 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	493c      	ldr	r1, [pc, #240]	; (8001df8 <StartMainMenuTask+0x118>)
 8001d08:	483c      	ldr	r0, [pc, #240]	; (8001dfc <StartMainMenuTask+0x11c>)
 8001d0a:	f008 fd03 	bl	800a714 <f_mount>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d14:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <StartMainMenuTask+0x46>
			transmit_uart("Micro SD card is mounted successfully!\n");
 8001d1e:	4839      	ldr	r0, [pc, #228]	; (8001e04 <StartMainMenuTask+0x124>)
 8001d20:	f7ff fd24 	bl	800176c <transmit_uart>
 8001d24:	e006      	b.n	8001d34 <StartMainMenuTask+0x54>
		} else if (fres != FR_OK) {
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <StartMainMenuTask+0x54>
			transmit_uart("Micro SD card's mount error!\n");
 8001d2e:	4836      	ldr	r0, [pc, #216]	; (8001e08 <StartMainMenuTask+0x128>)
 8001d30:	f7ff fd1c 	bl	800176c <transmit_uart>
		}



		fres = f_open(&fil, "glazunov_violin_concerto.piece", FA_READ);
 8001d34:	2201      	movs	r2, #1
 8001d36:	4935      	ldr	r1, [pc, #212]	; (8001e0c <StartMainMenuTask+0x12c>)
 8001d38:	4835      	ldr	r0, [pc, #212]	; (8001e10 <StartMainMenuTask+0x130>)
 8001d3a:	f008 fd4f 	bl	800a7dc <f_open>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d44:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <StartMainMenuTask+0x76>
			transmit_uart("File opened for reading.\n");
 8001d4e:	4831      	ldr	r0, [pc, #196]	; (8001e14 <StartMainMenuTask+0x134>)
 8001d50:	f7ff fd0c 	bl	800176c <transmit_uart>
 8001d54:	e006      	b.n	8001d64 <StartMainMenuTask+0x84>
		} else if (fres != FR_OK) {
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <StartMainMenuTask+0x84>
			transmit_uart("File was not opened for reading!\n");
 8001d5e:	482e      	ldr	r0, [pc, #184]	; (8001e18 <StartMainMenuTask+0x138>)
 8001d60:	f7ff fd04 	bl	800176c <transmit_uart>





		Piece_vInit(&xPiece, &fil);
 8001d64:	492a      	ldr	r1, [pc, #168]	; (8001e10 <StartMainMenuTask+0x130>)
 8001d66:	482d      	ldr	r0, [pc, #180]	; (8001e1c <StartMainMenuTask+0x13c>)
 8001d68:	f000 f8d8 	bl	8001f1c <Piece_vInit>
		Piece_vSetComposition(&xPiece, &fil);
 8001d6c:	4928      	ldr	r1, [pc, #160]	; (8001e10 <StartMainMenuTask+0x130>)
 8001d6e:	482b      	ldr	r0, [pc, #172]	; (8001e1c <StartMainMenuTask+0x13c>)
 8001d70:	f000 f90a 	bl	8001f88 <Piece_vSetComposition>


		/* Close file */
		fres = f_close(&fil);
 8001d74:	4826      	ldr	r0, [pc, #152]	; (8001e10 <StartMainMenuTask+0x130>)
 8001d76:	f009 f930 	bl	800afda <f_close>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d80:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <StartMainMenuTask+0xb2>
			transmit_uart("The file is closed.\n");
 8001d8a:	4825      	ldr	r0, [pc, #148]	; (8001e20 <StartMainMenuTask+0x140>)
 8001d8c:	f7ff fcee 	bl	800176c <transmit_uart>
 8001d90:	e006      	b.n	8001da0 <StartMainMenuTask+0xc0>
		} else if (fres != FR_OK) {
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <StartMainMenuTask+0x120>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <StartMainMenuTask+0xc0>
			transmit_uart("The file was not closed.\n");
 8001d9a:	4822      	ldr	r0, [pc, #136]	; (8001e24 <StartMainMenuTask+0x144>)
 8001d9c:	f7ff fce6 	bl	800176c <transmit_uart>
		}

		f_mount(NULL, "", 1);
 8001da0:	2201      	movs	r2, #1
 8001da2:	4915      	ldr	r1, [pc, #84]	; (8001df8 <StartMainMenuTask+0x118>)
 8001da4:	2000      	movs	r0, #0
 8001da6:	f008 fcb5 	bl	800a714 <f_mount>
		if (fres == FR_OK) {
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <StartMainMenuTask+0x120>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <StartMainMenuTask+0xda>
			transmit_uart("The Micro SD card is unmounted!\n");
 8001db2:	481d      	ldr	r0, [pc, #116]	; (8001e28 <StartMainMenuTask+0x148>)
 8001db4:	f7ff fcda 	bl	800176c <transmit_uart>
 8001db8:	e006      	b.n	8001dc8 <StartMainMenuTask+0xe8>
		} else if (fres != FR_OK) {
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <StartMainMenuTask+0x120>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <StartMainMenuTask+0xe8>
			transmit_uart("The Micro SD was not unmounted!");
 8001dc2:	481a      	ldr	r0, [pc, #104]	; (8001e2c <StartMainMenuTask+0x14c>)
 8001dc4:	f7ff fcd2 	bl	800176c <transmit_uart>
		}


		// Initial Command
		xSynchWakeTime = xTaskGetTickCount();
 8001dc8:	f00b fc68 	bl	800d69c <xTaskGetTickCount>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a18      	ldr	r2, [pc, #96]	; (8001e30 <StartMainMenuTask+0x150>)
 8001dd0:	6013      	str	r3, [r2, #0]
		running = 1;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <StartMainMenuTask+0x154>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
		osEventFlagsSet(xEmbeddedViolinEventGroupHandle, (EB_PLAY_TICK | EB_PLAY_STATE));
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <StartMainMenuTask+0x158>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2106      	movs	r1, #6
 8001dde:	4618      	mov	r0, r3
 8001de0:	f009 fc24 	bl	800b62c <osEventFlagsSet>


		// WAIT EVENT SYNCHRONIZE?

    osDelay(7000);
 8001de4:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001de8:	f009 fbc6 	bl	800b578 <osDelay>
  	printf("Main Menu\r\n");
 8001dec:	e77c      	b.n	8001ce8 <StartMainMenuTask+0x8>
 8001dee:	bf00      	nop
 8001df0:	080101f8 	.word	0x080101f8
 8001df4:	08010204 	.word	0x08010204
 8001df8:	08010214 	.word	0x08010214
 8001dfc:	200040d8 	.word	0x200040d8
 8001e00:	2000d3bc 	.word	0x2000d3bc
 8001e04:	08010218 	.word	0x08010218
 8001e08:	08010240 	.word	0x08010240
 8001e0c:	08010260 	.word	0x08010260
 8001e10:	2000d3c0 	.word	0x2000d3c0
 8001e14:	08010280 	.word	0x08010280
 8001e18:	0801029c 	.word	0x0801029c
 8001e1c:	200051e8 	.word	0x200051e8
 8001e20:	080102c0 	.word	0x080102c0
 8001e24:	080102d8 	.word	0x080102d8
 8001e28:	080102f4 	.word	0x080102f4
 8001e2c:	08010318 	.word	0x08010318
 8001e30:	20005114 	.word	0x20005114
 8001e34:	200000ac 	.word	0x200000ac
 8001e38:	200040d4 	.word	0x200040d4

08001e3c <StartPlayTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayTickTask */
void StartPlayTickTask(void *argument)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
  /* Infinite loop */
	for(;;)
  {
		// wait for a semaphore
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <StartPlayTickTask+0x4c>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <StartPlayTickTask+0x50>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	2200      	movs	r2, #0
 8001e54:	f009 fc2e 	bl	800b6b4 <osEventFlagsWait>
 8001e58:	60f8      	str	r0, [r7, #12]

		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_TICK) != 0)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	dbf1      	blt.n	8001e44 <StartPlayTickTask+0x8>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ec      	beq.n	8001e44 <StartPlayTickTask+0x8>
		{
			while (running)
 8001e6a:	e008      	b.n	8001e7e <StartPlayTickTask+0x42>
			{
				printf("Capture Tick\r\n");
 8001e6c:	4808      	ldr	r0, [pc, #32]	; (8001e90 <StartPlayTickTask+0x54>)
 8001e6e:	f00d fa4b 	bl	800f308 <puts>
		    vTaskDelayUntil(&xSynchWakeTime, xFrequency);
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <StartPlayTickTask+0x58>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <StartPlayTickTask+0x5c>)
 8001e7a:	f00b fa4b 	bl	800d314 <vTaskDelayUntil>
			while (running)
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <StartPlayTickTask+0x60>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f2      	bne.n	8001e6c <StartPlayTickTask+0x30>
		xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001e86:	e7dd      	b.n	8001e44 <StartPlayTickTask+0x8>
 8001e88:	200040d4 	.word	0x200040d4
 8001e8c:	0801055c 	.word	0x0801055c
 8001e90:	08010338 	.word	0x08010338
 8001e94:	08010560 	.word	0x08010560
 8001e98:	20005114 	.word	0x20005114
 8001e9c:	200000ac 	.word	0x200000ac

08001ea0 <StartPlayState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPlayState */
void StartPlayState(void *argument)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	uint32_t xEventGroupValue;
	static const int32_t xBitsToWaitFor = (EB_PLAY_STATE);
  /* Infinite loop */
  for(;;)
  {
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <StartPlayState+0x3c>)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <StartPlayState+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f009 fbfc 	bl	800b6b4 <osEventFlagsWait>
 8001ebc:	60f8      	str	r0, [r7, #12]
		if ((xEventGroupValue & EB_ERROR) == 0 && (xEventGroupValue & EB_PLAY_STATE) != 0)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dbf1      	blt.n	8001ea8 <StartPlayState+0x8>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0ec      	beq.n	8001ea8 <StartPlayState+0x8>
		{
			Piece_vParseCommand(&xPiece);
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <StartPlayState+0x44>)
 8001ed0:	f000 f87c 	bl	8001fcc <Piece_vParseCommand>
			running = 0;
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <StartPlayState+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
  	xEventGroupValue = osEventFlagsWait(xEmbeddedViolinEventGroupHandle, xBitsToWaitFor, osFlagsWaitAny, 1000);
 8001eda:	e7e5      	b.n	8001ea8 <StartPlayState+0x8>
 8001edc:	200040d4 	.word	0x200040d4
 8001ee0:	08010564 	.word	0x08010564
 8001ee4:	200051e8 	.word	0x200051e8
 8001ee8:	200000ac 	.word	0x200000ac

08001eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001efe:	f000 fd61 	bl	80029c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40001000 	.word	0x40001000

08001f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f14:	b672      	cpsid	i
}
 8001f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <Error_Handler+0x8>
	...

08001f1c <Piece_vInit>:

#include "piece.h"


void Piece_vInit(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xPieceInformation.pusName, sizeof(pxPiece->xPieceInformation.pusName), &ulNumBytesRead);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f103 0108 	add.w	r1, r3, #8
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	6838      	ldr	r0, [r7, #0]
 8001f34:	f008 fe3a 	bl	800abac <f_read>
	printf("Name: %s\r\n", pxPiece->xPieceInformation.pusName);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <Piece_vInit+0x30>)
 8001f40:	f00d f95c 	bl	800f1fc <iprintf>
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08010348 	.word	0x08010348

08001f50 <Piece_vSetCompositionByteSize>:


void Piece_vSetCompositionByteSize(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	uint32_t ulNumBytesRead;
	f_read(pFil, &(pxPiece->xComposition.ulCompositionByteSize), sizeof(pxPiece->xComposition.ulCompositionByteSize), &ulNumBytesRead);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2204      	movs	r2, #4
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f008 fe20 	bl	800abac <f_read>
	printf("Composition size: %u\r\n", pxPiece->xComposition.ulCompositionByteSize);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4619      	mov	r1, r3
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <Piece_vSetCompositionByteSize+0x34>)
 8001f76:	f00d f941 	bl	800f1fc <iprintf>
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	08010354 	.word	0x08010354

08001f88 <Piece_vSetComposition>:


void Piece_vSetComposition(PieceHandle_t *pxPiece, FIL *pFil)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	Piece_vSetCompositionByteSize(pxPiece, pFil);
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffdb 	bl	8001f50 <Piece_vSetCompositionByteSize>

	uint32_t ulNumBytesRead;
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f103 0194 	add.w	r1, r3, #148	; 0x94
			pxPiece->xComposition.ulCompositionByteSize < sizeof(pxPiece->xComposition.pusComposition) ? pxPiece->xComposition.ulCompositionByteSize : sizeof(pxPiece->xComposition.pusComposition),
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001faa:	bf28      	it	cs
 8001fac:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8001fb0:	461a      	mov	r2, r3
	f_read(pFil, pxPiece->xComposition.pusComposition,
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f008 fdf8 	bl	800abac <f_read>
			&ulNumBytesRead);

	pxPiece->xPieceInstruction.ulInstructionCounter = 0;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <Piece_vParseCommand>:


void Piece_vParseCommand(PieceHandle_t *pxPiece)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	memcpy(&pxPiece->xPieceInstruction.usCommand, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.usCommand));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += 1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]

	printf("Command: %u\r\n", pxPiece->xPieceInstruction.usCommand);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	791b      	ldrb	r3, [r3, #4]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4818      	ldr	r0, [pc, #96]	; (800205c <Piece_vParseCommand+0x90>)
 8001ffa:	f00d f8ff 	bl	800f1fc <iprintf>

	switch (pxPiece->xPieceInstruction.usCommand)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791b      	ldrb	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <Piece_vParseCommand+0x40>
 8002006:	2b7f      	cmp	r3, #127	; 0x7f
 8002008:	d004      	beq.n	8002014 <Piece_vParseCommand+0x48>
 800200a:	e007      	b.n	800201c <Piece_vParseCommand+0x50>
	{
	case 0b00000000:
		printf("END OF COMPOSITION\r\n");
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <Piece_vParseCommand+0x94>)
 800200e:	f00d f97b 	bl	800f308 <puts>
		return;
 8002012:	e01f      	b.n	8002054 <Piece_vParseCommand+0x88>
	case 0b01111111:
		Piece_vConfigureAll(pxPiece);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f86f 	bl	80020f8 <Piece_vConfigureAll>
		break;
 800201a:	e018      	b.n	800204e <Piece_vParseCommand+0x82>
	default:
		if (bIsPlayCommand(pxPiece->xPieceInstruction.usCommand))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f9bd 	bl	80023a0 <bIsPlayCommand>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00c      	beq.n	8002046 <Piece_vParseCommand+0x7a>
		{
			uint8_t usNumNotes = (uint8_t)((0x03) & (pxPiece->xPieceInstruction.usCommand) + 1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	3301      	adds	r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	73fb      	strb	r3, [r7, #15]
			Piece_vPlayNotes(pxPiece, usNumNotes);
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8fc 	bl	800223c <Piece_vPlayNotes>
		}
		else
		{
			printf("UNKNOWN COMMAND\r\n");
		}
		break;
 8002044:	e002      	b.n	800204c <Piece_vParseCommand+0x80>
			printf("UNKNOWN COMMAND\r\n");
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <Piece_vParseCommand+0x98>)
 8002048:	f00d f95e 	bl	800f308 <puts>
		break;
 800204c:	bf00      	nop
	}

	Piece_vParseCommand(pxPiece);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffbc 	bl	8001fcc <Piece_vParseCommand>
}
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0801036c 	.word	0x0801036c
 8002060:	0801037c 	.word	0x0801037c
 8002064:	08010390 	.word	0x08010390

08002068 <Piece_vSetMovement>:




void Piece_vSetMovement(PieceHandle_t *pxPiece, uint8_t usMovement)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usMovement = usMovement;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	printf("Movement: %u\r\n", pxPiece->xPieceConfiguration.usMovement);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002082:	4619      	mov	r1, r3
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <Piece_vSetMovement+0x2c>)
 8002086:	f00d f8b9 	bl	800f1fc <iprintf>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	080103a4 	.word	0x080103a4

08002098 <Piece_vSetBPM>:

void Piece_vSetBPM(PieceHandle_t *pxPiece, uint16_t uBPM)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
	pxPiece->xPieceConfiguration.uBPM = uBPM;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	printf("BPM: %u\r\n", pxPiece->xPieceConfiguration.uBPM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80020b2:	4619      	mov	r1, r3
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <Piece_vSetBPM+0x2c>)
 80020b6:	f00d f8a1 	bl	800f1fc <iprintf>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	080103b4 	.word	0x080103b4

080020c8 <Piece_vSetDynamic>:

void Piece_vSetDynamic(PieceHandle_t *pxPiece, uint8_t usDynamic)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	70fb      	strb	r3, [r7, #3]
	pxPiece->xPieceConfiguration.usDynamic = usDynamic;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	printf("Dynamic: %u\r\n", pxPiece->xPieceConfiguration.usDynamic);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <Piece_vSetDynamic+0x2c>)
 80020e6:	f00d f889 	bl	800f1fc <iprintf>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	080103c0 	.word	0x080103c0

080020f8 <Piece_vConfigureAll>:

void Piece_vConfigureAll(PieceHandle_t *pxPiece)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	printf("Configuring All piece...\r\n");
 8002100:	481e      	ldr	r0, [pc, #120]	; (800217c <Piece_vConfigureAll+0x84>)
 8002102:	f00d f901 	bl	800f308 <puts>

	uint8_t usMovement;
	memcpy(&usMovement, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usMovement));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	73fb      	strb	r3, [r7, #15]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usMovement);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]

	uint16_t uBPM;
	memcpy(&uBPM, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(uBPM));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	81bb      	strh	r3, [r7, #12]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(uBPM);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	1c9a      	adds	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]

	uint8_t usDynamic;
	memcpy(&usDynamic, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(usDynamic));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	72fb      	strb	r3, [r7, #11]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(usDynamic);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	601a      	str	r2, [r3, #0]


	Piece_vSetMovement(pxPiece, usMovement);
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff84 	bl	8002068 <Piece_vSetMovement>
	Piece_vSetBPM(pxPiece, uBPM);
 8002160:	89bb      	ldrh	r3, [r7, #12]
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff97 	bl	8002098 <Piece_vSetBPM>
	Piece_vSetDynamic(pxPiece, usDynamic);
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffaa 	bl	80020c8 <Piece_vSetDynamic>
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	080103d0 	.word	0x080103d0

08002180 <Piece_vPlayNote>:


void Piece_vPlayNote(PieceHandle_t *pxPiece, uint8_t *pusMaxBeatValue)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
	memcpy(&pxPiece->xPieceInstruction.uPlay, pxPiece->xComposition.pusComposition + pxPiece->xPieceInstruction.ulInstructionCounter, sizeof(pxPiece->xPieceInstruction.uPlay));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3306      	adds	r3, #6
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	f102 0194 	add.w	r1, r2, #148	; 0x94
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	440a      	add	r2, r1
 800219a:	8812      	ldrh	r2, [r2, #0]
 800219c:	b292      	uxth	r2, r2
 800219e:	801a      	strh	r2, [r3, #0]
	pxPiece->xPieceInstruction.ulInstructionCounter += sizeof(pxPiece->xPieceInstruction.uPlay);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c9a      	adds	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]

	uint8_t usTechnique = (uint8_t)(((0xF000) & (pxPiece->xPieceInstruction.uPlay)) >> 12);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	88db      	ldrh	r3, [r3, #6]
 80021ae:	0b1b      	lsrs	r3, r3, #12
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	73fb      	strb	r3, [r7, #15]
	uint8_t usBeatValue = (uint8_t)(((0x0F00) & (pxPiece->xPieceInstruction.uPlay)) >> 8);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	88db      	ldrh	r3, [r3, #6]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	73bb      	strb	r3, [r7, #14]
	uint8_t usNoteBase = (uint8_t)(((0x00C0) & (pxPiece->xPieceInstruction.uPlay)) >> 6); // String
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	88db      	ldrh	r3, [r3, #6]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	737b      	strb	r3, [r7, #13]
	uint8_t usNoteOffset = (uint8_t)((0x003F) & (pxPiece->xPieceInstruction.uPlay));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	88db      	ldrh	r3, [r3, #6]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021de:	733b      	strb	r3, [r7, #12]

	printf("Play note:\r\n");
 80021e0:	4811      	ldr	r0, [pc, #68]	; (8002228 <Piece_vPlayNote+0xa8>)
 80021e2:	f00d f891 	bl	800f308 <puts>
	printf("	Technique: %u\r\n", usTechnique);
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4810      	ldr	r0, [pc, #64]	; (800222c <Piece_vPlayNote+0xac>)
 80021ec:	f00d f806 	bl	800f1fc <iprintf>
	printf("	Beat Value: %u\r\n", usBeatValue);
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	4619      	mov	r1, r3
 80021f4:	480e      	ldr	r0, [pc, #56]	; (8002230 <Piece_vPlayNote+0xb0>)
 80021f6:	f00d f801 	bl	800f1fc <iprintf>
	printf("	Note Base: %u\r\n", usNoteBase);
 80021fa:	7b7b      	ldrb	r3, [r7, #13]
 80021fc:	4619      	mov	r1, r3
 80021fe:	480d      	ldr	r0, [pc, #52]	; (8002234 <Piece_vPlayNote+0xb4>)
 8002200:	f00c fffc 	bl	800f1fc <iprintf>
	printf("	Note Offset: %u\r\n", usNoteOffset);
 8002204:	7b3b      	ldrb	r3, [r7, #12]
 8002206:	4619      	mov	r1, r3
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <Piece_vPlayNote+0xb8>)
 800220a:	f00c fff7 	bl	800f1fc <iprintf>

	if (usBeatValue < *pusMaxBeatValue)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	7bba      	ldrb	r2, [r7, #14]
 8002214:	429a      	cmp	r2, r3
 8002216:	d202      	bcs.n	800221e <Piece_vPlayNote+0x9e>
	{
		*pusMaxBeatValue = usBeatValue;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7bba      	ldrb	r2, [r7, #14]
 800221c:	701a      	strb	r2, [r3, #0]
	}
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	080103ec 	.word	0x080103ec
 800222c:	080103f8 	.word	0x080103f8
 8002230:	0801040c 	.word	0x0801040c
 8002234:	08010420 	.word	0x08010420
 8002238:	08010434 	.word	0x08010434

0800223c <Piece_vPlayNotes>:


void Piece_vPlayNotes(PieceHandle_t *pxPiece, uint8_t usNumNotes)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
	printf("Play Notes: %u\r\n", usNumNotes);
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	4619      	mov	r1, r3
 800224c:	484f      	ldr	r0, [pc, #316]	; (800238c <Piece_vPlayNotes+0x150>)
 800224e:	f00c ffd5 	bl	800f1fc <iprintf>

	uint8_t usMaxBeatValue = 0xFF; // lower value means longer beat
 8002252:	23ff      	movs	r3, #255	; 0xff
 8002254:	73fb      	strb	r3, [r7, #15]
	for (int16_t i = 0; i < usNumNotes; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	82fb      	strh	r3, [r7, #22]
 800225a:	e00b      	b.n	8002274 <Piece_vPlayNotes+0x38>
	{
		Piece_vPlayNote(pxPiece, &usMaxBeatValue);
 800225c:	f107 030f 	add.w	r3, r7, #15
 8002260:	4619      	mov	r1, r3
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ff8c 	bl	8002180 <Piece_vPlayNote>
	for (int16_t i = 0; i < usNumNotes; i++)
 8002268:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800226c:	b29b      	uxth	r3, r3
 800226e:	3301      	adds	r3, #1
 8002270:	b29b      	uxth	r3, r3
 8002272:	82fb      	strh	r3, [r7, #22]
 8002274:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	429a      	cmp	r2, r3
 800227c:	dbee      	blt.n	800225c <Piece_vPlayNotes+0x20>
	}


	// Wait until
	printf("LONGEST NOTE: %u\r\n", usMaxBeatValue);
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	4843      	ldr	r0, [pc, #268]	; (8002390 <Piece_vPlayNotes+0x154>)
 8002284:	f00c ffba 	bl	800f1fc <iprintf>
	float fMPB = ((60.0/(float)pxPiece->xPieceConfiguration.uBPM)/8.0f) * 1000.0f;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	ee17 0a90 	vmov	r0, s15
 800229a:	f7fe f955 	bl	8000548 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	493b      	ldr	r1, [pc, #236]	; (8002394 <Piece_vPlayNotes+0x158>)
 80022a8:	f7fe fad0 	bl	800084c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	4b37      	ldr	r3, [pc, #220]	; (8002398 <Piece_vPlayNotes+0x15c>)
 80022ba:	f7fe fac7 	bl	800084c <__aeabi_ddiv>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4b34      	ldr	r3, [pc, #208]	; (800239c <Piece_vPlayNotes+0x160>)
 80022cc:	f7fe f994 	bl	80005f8 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fba0 	bl	8000a1c <__aeabi_d2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	613b      	str	r3, [r7, #16]
	switch (usMaxBeatValue)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d84d      	bhi.n	8002382 <Piece_vPlayNotes+0x146>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <Piece_vPlayNotes+0xb0>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	08002305 	.word	0x08002305
 80022f0:	0800230d 	.word	0x0800230d
 80022f4:	08002327 	.word	0x08002327
 80022f8:	08002341 	.word	0x08002341
 80022fc:	0800235b 	.word	0x0800235b
 8002300:	08002371 	.word	0x08002371
	{
	case 0x00:
		osDelay(250);
 8002304:	20fa      	movs	r0, #250	; 0xfa
 8002306:	f009 f937 	bl	800b578 <osDelay>
		//osDelay((uint32_t)(fMPB*32.0f));
		break;
 800230a:	e03b      	b.n	8002384 <Piece_vPlayNotes+0x148>
	case 0x01:
		osDelay((uint32_t)(fMPB*16.0f));
 800230c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002310:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231c:	ee17 0a90 	vmov	r0, s15
 8002320:	f009 f92a 	bl	800b578 <osDelay>
		break;
 8002324:	e02e      	b.n	8002384 <Piece_vPlayNotes+0x148>
	case 0x02:
		osDelay((uint32_t)(fMPB*8.0f));
 8002326:	edd7 7a04 	vldr	s15, [r7, #16]
 800232a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800232e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002336:	ee17 0a90 	vmov	r0, s15
 800233a:	f009 f91d 	bl	800b578 <osDelay>
		break;
 800233e:	e021      	b.n	8002384 <Piece_vPlayNotes+0x148>
	case 0x03:
		osDelay((uint32_t)(fMPB*4.0f));
 8002340:	edd7 7a04 	vldr	s15, [r7, #16]
 8002344:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002350:	ee17 0a90 	vmov	r0, s15
 8002354:	f009 f910 	bl	800b578 <osDelay>
		break;
 8002358:	e014      	b.n	8002384 <Piece_vPlayNotes+0x148>
	case 0x04:
		osDelay((uint32_t)(fMPB*2.0f));
 800235a:	edd7 7a04 	vldr	s15, [r7, #16]
 800235e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002366:	ee17 0a90 	vmov	r0, s15
 800236a:	f009 f905 	bl	800b578 <osDelay>
		break;
 800236e:	e009      	b.n	8002384 <Piece_vPlayNotes+0x148>
	case 0x05:
		osDelay((uint32_t)fMPB);
 8002370:	edd7 7a04 	vldr	s15, [r7, #16]
 8002374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002378:	ee17 0a90 	vmov	r0, s15
 800237c:	f009 f8fc 	bl	800b578 <osDelay>
		break;
 8002380:	e000      	b.n	8002384 <Piece_vPlayNotes+0x148>
	default:
		break;
 8002382:	bf00      	nop
	}

	// osDelay
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	08010448 	.word	0x08010448
 8002390:	0801045c 	.word	0x0801045c
 8002394:	404e0000 	.word	0x404e0000
 8002398:	40200000 	.word	0x40200000
 800239c:	408f4000 	.word	0x408f4000

080023a0 <bIsPlayCommand>:




uint8_t bIsPlayCommand(uint8_t usCommand)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
	return usCommand >= 0b10000000;
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	09db      	lsrs	r3, r3, #7
 80023b2:	b2db      	uxtb	r3, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_MspInit+0x4c>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_MspInit+0x4c>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6613      	str	r3, [r2, #96]	; 0x60
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_MspInit+0x4c>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_MspInit+0x4c>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	; 0x58
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_MspInit+0x4c>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	210f      	movs	r1, #15
 80023fa:	f06f 0001 	mvn.w	r0, #1
 80023fe:	f001 fe31 	bl	8004064 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000

08002410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a19      	ldr	r2, [pc, #100]	; (8002494 <HAL_ADC_MspInit+0x84>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d12c      	bne.n	800248c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_ADC_MspInit+0x88>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_ADC_MspInit+0x88>)
 8002438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800243c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_ADC_MspInit+0x88>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_ADC_MspInit+0x88>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_ADC_MspInit+0x88>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_ADC_MspInit+0x88>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002462:	2301      	movs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002466:	230b      	movs	r3, #11
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002478:	f001 fe1e 	bl	80040b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2105      	movs	r1, #5
 8002480:	2012      	movs	r0, #18
 8002482:	f001 fdef 	bl	8004064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002486:	2012      	movs	r0, #18
 8002488:	f001 fe08 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	; 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	50040000 	.word	0x50040000
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_SPI_MspInit+0x7c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d128      	bne.n	8002510 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_SPI_MspInit+0x80>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024ee:	23e0      	movs	r3, #224	; 0xe0
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024fe:	2305      	movs	r3, #5
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f107 0314 	add.w	r3, r7, #20
 8002506:	4619      	mov	r1, r3
 8002508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250c:	f001 fdd4 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	3728      	adds	r7, #40	; 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40013000 	.word	0x40013000
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x38>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10b      	bne.n	800254a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_TIM_PWM_MspInit+0x3c>)
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_TIM_PWM_MspInit+0x3c>)
 8002538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800253c:	6613      	str	r3, [r2, #96]	; 0x60
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_TIM_PWM_MspInit+0x3c>)
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_TIM_MspPostInit+0x68>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11d      	bne.n	80025be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_TIM_MspPostInit+0x6c>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_TIM_MspPostInit+0x6c>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_TIM_MspPostInit+0x6c>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4619      	mov	r1, r3
 80025b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ba:	f001 fd7d 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_UART_MspInit+0x7c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d128      	bne.n	8002644 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f2:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_UART_MspInit+0x80>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <HAL_UART_MspInit+0x80>)
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <HAL_UART_MspInit+0x80>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_UART_MspInit+0x80>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_UART_MspInit+0x80>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <HAL_UART_MspInit+0x80>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002622:	230c      	movs	r3, #12
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002632:	2307      	movs	r3, #7
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f001 fd3a 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002644:	bf00      	nop
 8002646:	3728      	adds	r7, #40	; 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40004400 	.word	0x40004400
 8002650:	40021000 	.word	0x40021000

08002654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	; 0x30
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	2036      	movs	r0, #54	; 0x36
 800266a:	f001 fcfb 	bl	8004064 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800266e:	2036      	movs	r0, #54	; 0x36
 8002670:	f001 fd14 	bl	800409c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_InitTick+0x9c>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <HAL_InitTick+0x9c>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_InitTick+0x9c>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800268c:	f107 0210 	add.w	r2, r7, #16
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fcc0 	bl	800501c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800269c:	f002 fc92 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 80026a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <HAL_InitTick+0xa0>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	0c9b      	lsrs	r3, r3, #18
 80026ac:	3b01      	subs	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_InitTick+0xa4>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_InitTick+0xa8>)
 80026b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_InitTick+0xa4>)
 80026b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80026be:	4a0e      	ldr	r2, [pc, #56]	; (80026f8 <HAL_InitTick+0xa4>)
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_InitTick+0xa4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_InitTick+0xa4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80026d0:	4809      	ldr	r0, [pc, #36]	; (80026f8 <HAL_InitTick+0xa4>)
 80026d2:	f003 ff75 	bl	80065c0 <HAL_TIM_Base_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80026dc:	4806      	ldr	r0, [pc, #24]	; (80026f8 <HAL_InitTick+0xa4>)
 80026de:	f003 ffd1 	bl	8006684 <HAL_TIM_Base_Start_IT>
 80026e2:	4603      	mov	r3, r0
 80026e4:	e000      	b.n	80026e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3730      	adds	r7, #48	; 0x30
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	2000e3f0 	.word	0x2000e3f0
 80026fc:	40001000 	.word	0x40001000

08002700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <NMI_Handler+0x4>

08002706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <MemManage_Handler+0x4>

08002712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <BusFault_Handler+0x4>

08002718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <UsageFault_Handler+0x4>

0800271e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <ADC1_2_IRQHandler+0x10>)
 8002732:	f000 fcaf 	bl	8003094 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000511c 	.word	0x2000511c

08002740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (Timer1 > 0)
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <TIM6_DAC_IRQHandler+0x38>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <TIM6_DAC_IRQHandler+0x18>
	{
		Timer1--;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <TIM6_DAC_IRQHandler+0x38>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <TIM6_DAC_IRQHandler+0x38>)
 8002756:	801a      	strh	r2, [r3, #0]
	}

	if (Timer2 > 0)
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <TIM6_DAC_IRQHandler+0x3c>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <TIM6_DAC_IRQHandler+0x2c>
	{
		Timer2--;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <TIM6_DAC_IRQHandler+0x3c>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <TIM6_DAC_IRQHandler+0x3c>)
 800276a:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <TIM6_DAC_IRQHandler+0x40>)
 800276e:	f004 f957 	bl	8006a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200040ca 	.word	0x200040ca
 800277c:	200040c8 	.word	0x200040c8
 8002780:	2000e3f0 	.word	0x2000e3f0

08002784 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e00a      	b.n	80027ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002796:	f3af 8000 	nop.w
 800279a:	4601      	mov	r1, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	60ba      	str	r2, [r7, #8]
 80027a2:	b2ca      	uxtb	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dbf0      	blt.n	8002796 <_read+0x12>
	}

return len;
 80027b4:	687b      	ldr	r3, [r7, #4]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e009      	b.n	80027e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60ba      	str	r2, [r7, #8]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe ffb5 	bl	8001748 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbf1      	blt.n	80027d0 <_write+0x12>
	}
	return len;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_close>:

int _close(int file)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	return -1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800281e:	605a      	str	r2, [r3, #4]
	return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_isatty>:

int _isatty(int file)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	return 1;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
	return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f00c fc74 	bl	800f17c <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <_sbrk+0x64>)
 80028b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20018000 	.word	0x20018000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	200000b0 	.word	0x200000b0
 80028c8:	20010508 	.word	0x20010508

080028cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <SystemInit+0x5c>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <SystemInit+0x5c>)
 80028d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <SystemInit+0x60>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a11      	ldr	r2, [pc, #68]	; (800292c <SystemInit+0x60>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <SystemInit+0x60>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <SystemInit+0x60>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a0d      	ldr	r2, [pc, #52]	; (800292c <SystemInit+0x60>)
 80028f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002900:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002902:	4b0a      	ldr	r3, [pc, #40]	; (800292c <SystemInit+0x60>)
 8002904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002908:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <SystemInit+0x60>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <SystemInit+0x60>)
 8002910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <SystemInit+0x60>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00
 800292c:	40021000 	.word	0x40021000

08002930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002934:	f7ff ffca 	bl	80028cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002938:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800293a:	e003      	b.n	8002944 <LoopCopyDataInit>

0800293c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800293e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002940:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002942:	3104      	adds	r1, #4

08002944 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002944:	480a      	ldr	r0, [pc, #40]	; (8002970 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002948:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800294a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800294c:	d3f6      	bcc.n	800293c <CopyDataInit>
	ldr	r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002950:	e002      	b.n	8002958 <LoopFillZerobss>

08002952 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002952:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002954:	f842 3b04 	str.w	r3, [r2], #4

08002958 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <LoopForever+0x16>)
	cmp	r2, r3
 800295a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800295c:	d3f9      	bcc.n	8002952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295e:	f00c fc13 	bl	800f188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002962:	f7fe ff19 	bl	8001798 <main>

08002966 <LoopForever>:

LoopForever:
    b LoopForever
 8002966:	e7fe      	b.n	8002966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002968:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800296c:	08010a98 	.word	0x08010a98
	ldr	r0, =_sdata
 8002970:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002974:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 8002978:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 800297c:	20010504 	.word	0x20010504

08002980 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC3_IRQHandler>
	...

08002984 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_Init+0x3c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_Init+0x3c>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299a:	2003      	movs	r0, #3
 800299c:	f001 fb57 	bl	800404e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fe57 	bl	8002654 <HAL_InitTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	e001      	b.n	80029b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029b2:	f7ff fd05 	bl	80023c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000

080029c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_IncTick+0x20>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x24>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_IncTick+0x24>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	2000000c 	.word	0x2000000c
 80029e8:	2000e43c 	.word	0x2000e43c

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	2000e43c 	.word	0x2000e43c

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1c:	d005      	beq.n	8002a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_Delay+0x44>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2a:	bf00      	nop
 8002a2c:	f7ff ffde 	bl	80029ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d8f7      	bhi.n	8002a2c <HAL_Delay+0x28>
  {
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	609a      	str	r2, [r3, #8]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <LL_ADC_SetOffset+0x44>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	03fff000 	.word	0x03fff000

08002afc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3360      	adds	r3, #96	; 0x60
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3360      	adds	r3, #96	; 0x60
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3330      	adds	r3, #48	; 0x30
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	4413      	add	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	211f      	movs	r1, #31
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0e9b      	lsrs	r3, r3, #26
 8002bbc:	f003 011f 	and.w	r1, r3, #31
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 031f 	and.w	r3, r3, #31
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b087      	sub	sp, #28
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3314      	adds	r3, #20
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	0e5b      	lsrs	r3, r3, #25
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	0d1b      	lsrs	r3, r3, #20
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	2107      	movs	r1, #7
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	0d1b      	lsrs	r3, r3, #20
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	431a      	orrs	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	43db      	mvns	r3, r3
 8002c72:	401a      	ands	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0318 	and.w	r3, r3, #24
 8002c7a:	4908      	ldr	r1, [pc, #32]	; (8002c9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c7c:	40d9      	lsrs	r1, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	400b      	ands	r3, r1
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	431a      	orrs	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	0007ffff 	.word	0x0007ffff

08002ca0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 031f 	and.w	r3, r3, #31
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ce8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6093      	str	r3, [r2, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d10:	d101      	bne.n	8002d16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <LL_ADC_IsEnabled+0x18>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <LL_ADC_IsEnabled+0x1a>
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d101      	bne.n	8002dd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e136      	b.n	8003070 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fafd 	bl	8002410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff67 	bl	8002cfc <LL_ADC_IsDeepPowerDownEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d004      	beq.n	8002e3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff4d 	bl	8002cd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff82 	bl	8002d4c <LL_ADC_IsInternalRegulatorEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff66 	bl	8002d24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b87      	ldr	r3, [pc, #540]	; (8003078 <HAL_ADC_Init+0x290>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a87      	ldr	r2, [pc, #540]	; (800307c <HAL_ADC_Init+0x294>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f9      	bne.n	8002e6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff64 	bl	8002d4c <LL_ADC_IsInternalRegulatorEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff75 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 8002eb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 80cf 	bne.w	800305e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 80cb 	bne.w	800305e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff49 	bl	8002d74 <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee8:	4865      	ldr	r0, [pc, #404]	; (8003080 <HAL_ADC_Init+0x298>)
 8002eea:	f7ff ff43 	bl	8002d74 <LL_ADC_IsEnabled>
 8002eee:	4604      	mov	r4, r0
 8002ef0:	4864      	ldr	r0, [pc, #400]	; (8003084 <HAL_ADC_Init+0x29c>)
 8002ef2:	f7ff ff3f 	bl	8002d74 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	431c      	orrs	r4, r3
 8002efa:	4863      	ldr	r0, [pc, #396]	; (8003088 <HAL_ADC_Init+0x2a0>)
 8002efc:	f7ff ff3a 	bl	8002d74 <LL_ADC_IsEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4323      	orrs	r3, r4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	485f      	ldr	r0, [pc, #380]	; (800308c <HAL_ADC_Init+0x2a4>)
 8002f10:	f7ff fd9c 	bl	8002a4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7e5b      	ldrb	r3, [r3, #25]
 8002f18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d106      	bne.n	8002f50 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	3b01      	subs	r3, #1
 8002f48:	045b      	lsls	r3, r3, #17
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_ADC_Init+0x2a8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	69b9      	ldr	r1, [r7, #24]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff08 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 8002f8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff15 	bl	8002dc0 <LL_ADC_INJ_IsConversionOngoing>
 8002f96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d13d      	bne.n	800301a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d13a      	bne.n	800301a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fa8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fb0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc0:	f023 0302 	bic.w	r3, r3, #2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	69b9      	ldr	r1, [r7, #24]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d118      	bne.n	800300a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fe2:	f023 0304 	bic.w	r3, r3, #4
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ff4:	4311      	orrs	r1, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	611a      	str	r2, [r3, #16]
 8003008:	e007      	b.n	800301a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10c      	bne.n	800303c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	f023 010f 	bic.w	r1, r3, #15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
 800303a:	e007      	b.n	800304c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 020f 	bic.w	r2, r2, #15
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f023 0303 	bic.w	r3, r3, #3
 8003054:	f043 0201 	orr.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54
 800305c:	e007      	b.n	800306e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800306e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3724      	adds	r7, #36	; 0x24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}
 8003078:	20000004 	.word	0x20000004
 800307c:	053e2d63 	.word	0x053e2d63
 8003080:	50040000 	.word	0x50040000
 8003084:	50040100 	.word	0x50040100
 8003088:	50040200 	.word	0x50040200
 800308c:	50040300 	.word	0x50040300
 8003090:	fff0c007 	.word	0xfff0c007

08003094 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b0:	4882      	ldr	r0, [pc, #520]	; (80032bc <HAL_ADC_IRQHandler+0x228>)
 80030b2:	f7ff fdf5 	bl	8002ca0 <LL_ADC_GetMultimode>
 80030b6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d017      	beq.n	80030f2 <HAL_ADC_IRQHandler+0x5e>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fe4b 	bl	8003d80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2202      	movs	r2, #2
 80030f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_IRQHandler+0x72>
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8083 	beq.w	8003218 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d07d      	beq.n	8003218 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fd10 	bl	8002b5e <LL_ADC_REG_IsTriggerSourceSWStart>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d062      	beq.n	800320a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5d      	ldr	r2, [pc, #372]	; (80032c0 <HAL_ADC_IRQHandler+0x22c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d002      	beq.n	8003154 <HAL_ADC_IRQHandler+0xc0>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e000      	b.n	8003156 <HAL_ADC_IRQHandler+0xc2>
 8003154:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_ADC_IRQHandler+0x230>)
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	4293      	cmp	r3, r2
 800315c:	d008      	beq.n	8003170 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d002      	beq.n	8003170 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b09      	cmp	r3, #9
 800316e:	d104      	bne.n	800317a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	623b      	str	r3, [r7, #32]
 8003178:	e00c      	b.n	8003194 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a50      	ldr	r2, [pc, #320]	; (80032c0 <HAL_ADC_IRQHandler+0x22c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d002      	beq.n	800318a <HAL_ADC_IRQHandler+0xf6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e000      	b.n	800318c <HAL_ADC_IRQHandler+0xf8>
 800318a:	4b4e      	ldr	r3, [pc, #312]	; (80032c4 <HAL_ADC_IRQHandler+0x230>)
 800318c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d135      	bne.n	800320a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d12e      	bne.n	800320a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fdf2 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11a      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020c 	bic.w	r2, r2, #12
 80031ca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d112      	bne.n	800320a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	f043 0201 	orr.w	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
 80031f0:	e00b      	b.n	800320a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f95c 	bl	80034c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	220c      	movs	r2, #12
 8003216:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_ADC_IRQHandler+0x198>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 809f 	beq.w	8003376 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8099 	beq.w	8003376 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fcbb 	bl	8002bdc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003266:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fc76 	bl	8002b5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003272:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_ADC_IRQHandler+0x22c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d002      	beq.n	8003284 <HAL_ADC_IRQHandler+0x1f0>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e000      	b.n	8003286 <HAL_ADC_IRQHandler+0x1f2>
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_ADC_IRQHandler+0x230>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4293      	cmp	r3, r2
 800328c:	d008      	beq.n	80032a0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d002      	beq.n	80032a0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b07      	cmp	r3, #7
 800329e:	d104      	bne.n	80032aa <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	e013      	b.n	80032d2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a04      	ldr	r2, [pc, #16]	; (80032c0 <HAL_ADC_IRQHandler+0x22c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x234>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e007      	b.n	80032ca <HAL_ADC_IRQHandler+0x236>
 80032ba:	bf00      	nop
 80032bc:	50040300 	.word	0x50040300
 80032c0:	50040100 	.word	0x50040100
 80032c4:	50040000 	.word	0x50040000
 80032c8:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <HAL_ADC_IRQHandler+0x42c>)
 80032ca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d047      	beq.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_ADC_IRQHandler+0x25e>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d03f      	beq.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d13a      	bne.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d133      	bne.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d12e      	bne.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fd56 	bl	8002dc0 <LL_ADC_INJ_IsConversionOngoing>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11a      	bne.n	8003350 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003328:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d112      	bne.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
 800334e:	e00b      	b.n	8003368 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fce1 	bl	8003d30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2260      	movs	r2, #96	; 0x60
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b00      	cmp	r3, #0
 800337e:	d011      	beq.n	80033a4 <HAL_ADC_IRQHandler+0x310>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8a0 	bl	80034dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d012      	beq.n	80033d4 <HAL_ADC_IRQHandler+0x340>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fcc7 	bl	8003d58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <HAL_ADC_IRQHandler+0x370>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fcb9 	bl	8003d6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d036      	beq.n	800347c <HAL_ADC_IRQHandler+0x3e8>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d031      	beq.n	800347c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d102      	bne.n	8003426 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003420:	2301      	movs	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	e014      	b.n	8003450 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800342c:	4825      	ldr	r0, [pc, #148]	; (80034c4 <HAL_ADC_IRQHandler+0x430>)
 800342e:	f7ff fc45 	bl	8002cbc <LL_ADC_GetMultiDMATransfer>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003438:	2301      	movs	r3, #1
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
 800343c:	e008      	b.n	8003450 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10e      	bne.n	8003474 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f83e 	bl	80034f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2210      	movs	r2, #16
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x424>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f043 0208 	orr.w	r2, r3, #8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fc46 	bl	8003d44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034b8:	bf00      	nop
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	50040000 	.word	0x50040000
 80034c4:	50040300 	.word	0x50040300

080034c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0b6      	sub	sp, #216	; 0xd8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x22>
 8003522:	2302      	movs	r3, #2
 8003524:	e3c7      	b.n	8003cb6 <HAL_ADC_ConfigChannel+0x7b2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fc31 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 83a8 	bne.w	8003c90 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b05      	cmp	r3, #5
 8003546:	d824      	bhi.n	8003592 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	3b02      	subs	r3, #2
 800354e:	2b03      	cmp	r3, #3
 8003550:	d81b      	bhi.n	800358a <HAL_ADC_ConfigChannel+0x86>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_ADC_ConfigChannel+0x54>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	08003569 	.word	0x08003569
 800355c:	08003571 	.word	0x08003571
 8003560:	08003579 	.word	0x08003579
 8003564:	08003581 	.word	0x08003581
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	220c      	movs	r2, #12
 800356c:	605a      	str	r2, [r3, #4]
          break;
 800356e:	e011      	b.n	8003594 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2212      	movs	r2, #18
 8003574:	605a      	str	r2, [r3, #4]
          break;
 8003576:	e00d      	b.n	8003594 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2218      	movs	r2, #24
 800357c:	605a      	str	r2, [r3, #4]
          break;
 800357e:	e009      	b.n	8003594 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003586:	605a      	str	r2, [r3, #4]
          break;
 8003588:	e004      	b.n	8003594 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2206      	movs	r2, #6
 800358e:	605a      	str	r2, [r3, #4]
          break;
 8003590:	e000      	b.n	8003594 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003592:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f7ff faef 	bl	8002b84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fbf5 	bl	8002d9a <LL_ADC_REG_IsConversionOngoing>
 80035b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fc01 	bl	8002dc0 <LL_ADC_INJ_IsConversionOngoing>
 80035be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 81a6 	bne.w	8003918 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 81a1 	bne.w	8003918 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f7ff fb0d 	bl	8002c02 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	08db      	lsrs	r3, r3, #3
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00a      	beq.n	8003620 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6919      	ldr	r1, [r3, #16]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800361a:	f7ff fa4b 	bl	8002ab4 <LL_ADC_SetOffset>
 800361e:	e17b      	b.n	8003918 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fa68 	bl	8002afc <LL_ADC_GetOffsetChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_ADC_ConfigChannel+0x148>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fa5d 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	f003 021f 	and.w	r2, r3, #31
 800364a:	e01e      	b.n	800368a <HAL_ADC_ConfigChannel+0x186>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fa52 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800366a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800366e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003672:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e004      	b.n	8003688 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800367e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x19e>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	e018      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x1d0>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e004      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80036ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d106      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fa21 	bl	8002b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fa05 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x20e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f9fa 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	e01e      	b.n	8003750 <HAL_ADC_ConfigChannel+0x24c>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f9ef 	bl	8002afc <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003728:	fa93 f3a3 	rbit	r3, r3
 800372c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e004      	b.n	800374e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x264>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	0e9b      	lsrs	r3, r3, #26
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	e018      	b.n	800379a <HAL_ADC_ConfigChannel+0x296>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800377c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e004      	b.n	800379a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003794:	fab3 f383 	clz	r3, r3
 8003798:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800379a:	429a      	cmp	r2, r3
 800379c:	d106      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff f9be 	bl	8002b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f9a2 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x2d4>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f997 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	e01e      	b.n	8003816 <HAL_ADC_ConfigChannel+0x312>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2102      	movs	r1, #2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff f98c 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80037f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80037fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e004      	b.n	8003814 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800380a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_ADC_ConfigChannel+0x32a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	e016      	b.n	800385c <HAL_ADC_ConfigChannel+0x358>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e004      	b.n	800385c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800385c:	429a      	cmp	r2, r3
 800385e:	d106      	bne.n	800386e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	2102      	movs	r1, #2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f95d 	bl	8002b28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2103      	movs	r1, #3
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff f941 	bl	8002afc <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_ADC_ConfigChannel+0x396>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2103      	movs	r1, #3
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f936 	bl	8002afc <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	0e9b      	lsrs	r3, r3, #26
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	e017      	b.n	80038ca <HAL_ADC_ConfigChannel+0x3c6>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2103      	movs	r1, #3
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff f92b 	bl	8002afc <LL_ADC_GetOffsetChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80038c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x3de>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	e011      	b.n	8003906 <HAL_ADC_ConfigChannel+0x402>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e003      	b.n	8003906 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003906:	429a      	cmp	r2, r3
 8003908:	d106      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	2103      	movs	r1, #3
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f908 	bl	8002b28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fa29 	bl	8002d74 <LL_ADC_IsEnabled>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 813f 	bne.w	8003ba8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6819      	ldr	r1, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	461a      	mov	r2, r3
 8003938:	f7ff f98e 	bl	8002c58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a8e      	ldr	r2, [pc, #568]	; (8003b7c <HAL_ADC_ConfigChannel+0x678>)
 8003942:	4293      	cmp	r3, r2
 8003944:	f040 8130 	bne.w	8003ba8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x46c>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	0e9b      	lsrs	r3, r3, #26
 800395e:	3301      	adds	r3, #1
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	2b09      	cmp	r3, #9
 8003966:	bf94      	ite	ls
 8003968:	2301      	movls	r3, #1
 800396a:	2300      	movhi	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e019      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x4a0>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003978:	fa93 f3a3 	rbit	r3, r3
 800397c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800397e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003980:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003988:	2320      	movs	r3, #32
 800398a:	e003      	b.n	8003994 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800398c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b09      	cmp	r3, #9
 800399c:	bf94      	ite	ls
 800399e:	2301      	movls	r3, #1
 80039a0:	2300      	movhi	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d079      	beq.n	8003a9c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x4c0>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	3301      	adds	r3, #1
 80039bc:	069b      	lsls	r3, r3, #26
 80039be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039c2:	e015      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x4ec>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e003      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	069b      	lsls	r3, r3, #26
 80039ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x50c>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0e9b      	lsrs	r3, r3, #26
 8003a02:	3301      	adds	r3, #1
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2101      	movs	r1, #1
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	e017      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x53c>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003a28:	2320      	movs	r3, #32
 8003a2a:	e003      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	fab3 f383 	clz	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	ea42 0103 	orr.w	r1, r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x562>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	3301      	adds	r3, #1
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	051b      	lsls	r3, r3, #20
 8003a64:	e018      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x594>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	e003      	b.n	8003a8a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a84:	fab3 f383 	clz	r3, r3
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	e080      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x5b4>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	0e9b      	lsrs	r3, r3, #26
 8003aae:	3301      	adds	r3, #1
 8003ab0:	069b      	lsls	r3, r3, #26
 8003ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ab6:	e015      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x5e0>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	069b      	lsls	r3, r3, #26
 8003ae0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x600>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0e9b      	lsrs	r3, r3, #26
 8003af6:	3301      	adds	r3, #1
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	e017      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x630>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	61fb      	str	r3, [r7, #28]
  return result;
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e003      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	2101      	movs	r1, #1
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x65c>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	3b1e      	subs	r3, #30
 8003b58:	051b      	lsls	r3, r3, #20
 8003b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	e01d      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x698>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	613b      	str	r3, [r7, #16]
  return result;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e005      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x684>
 8003b7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f003 021f 	and.w	r2, r3, #31
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	3b1e      	subs	r3, #30
 8003b96:	051b      	lsls	r3, r3, #20
 8003b98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	6892      	ldr	r2, [r2, #8]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f7ff f82d 	bl	8002c02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d07a      	beq.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb4:	4843      	ldr	r0, [pc, #268]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003bb6:	f7fe ff6f 	bl	8002a98 <LL_ADC_GetCommonPathInternalCh>
 8003bba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d12c      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d126      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3c      	ldr	r2, [pc, #240]	; (8003ccc <HAL_ADC_ConfigChannel+0x7c8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_ConfigChannel+0x6e4>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3b      	ldr	r2, [pc, #236]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d15d      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4834      	ldr	r0, [pc, #208]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003bf4:	f7fe ff3d 	bl	8002a72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	4a36      	ldr	r2, [pc, #216]	; (8003cd8 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c12:	e002      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f9      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c20:	e040      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2d      	ldr	r2, [pc, #180]	; (8003cdc <HAL_ADC_ConfigChannel+0x7d8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d118      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x75a>
 8003c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d112      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_ADC_ConfigChannel+0x7c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x748>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a22      	ldr	r2, [pc, #136]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d12d      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c54:	4619      	mov	r1, r3
 8003c56:	481b      	ldr	r0, [pc, #108]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c58:	f7fe ff0b 	bl	8002a72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c5c:	e024      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d120      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11a      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_ADC_ConfigChannel+0x7c8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d115      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c86:	4619      	mov	r1, r3
 8003c88:	480e      	ldr	r0, [pc, #56]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c8a:	f7fe fef2 	bl	8002a72 <LL_ADC_SetCommonPathInternalCh>
 8003c8e:	e00c      	b.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ca2:	e002      	b.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	37d8      	adds	r7, #216	; 0xd8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	80080000 	.word	0x80080000
 8003cc4:	50040300 	.word	0x50040300
 8003cc8:	c7520000 	.word	0xc7520000
 8003ccc:	50040000 	.word	0x50040000
 8003cd0:	50040200 	.word	0x50040200
 8003cd4:	20000004 	.word	0x20000004
 8003cd8:	053e2d63 	.word	0x053e2d63
 8003cdc:	cb840000 	.word	0xcb840000
 8003ce0:	80000001 	.word	0x80000001

08003ce4 <LL_ADC_IsEnabled>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <LL_ADC_IsEnabled+0x18>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <LL_ADC_IsEnabled+0x1a>
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_REG_IsConversionOngoing>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d101      	bne.n	8003d22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b09f      	sub	sp, #124	; 0x7c
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e093      	b.n	8003eda <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a47      	ldr	r2, [pc, #284]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	e001      	b.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10b      	bne.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e072      	b.n	8003eda <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff87 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8003dfc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff81 	bl	8003d0a <LL_ADC_REG_IsConversionOngoing>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d154      	bne.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d151      	bne.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e14:	4b35      	ldr	r3, [pc, #212]	; (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d02c      	beq.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e32:	035b      	lsls	r3, r3, #13
 8003e34:	430b      	orrs	r3, r1
 8003e36:	431a      	orrs	r2, r3
 8003e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e3c:	4829      	ldr	r0, [pc, #164]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e3e:	f7ff ff51 	bl	8003ce4 <LL_ADC_IsEnabled>
 8003e42:	4604      	mov	r4, r0
 8003e44:	4828      	ldr	r0, [pc, #160]	; (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e46:	f7ff ff4d 	bl	8003ce4 <LL_ADC_IsEnabled>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	431c      	orrs	r4, r3
 8003e4e:	4828      	ldr	r0, [pc, #160]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e50:	f7ff ff48 	bl	8003ce4 <LL_ADC_IsEnabled>
 8003e54:	4603      	mov	r3, r0
 8003e56:	4323      	orrs	r3, r4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d137      	bne.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	6811      	ldr	r1, [r2, #0]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	6892      	ldr	r2, [r2, #8]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e78:	e028      	b.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e86:	4817      	ldr	r0, [pc, #92]	; (8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e88:	f7ff ff2c 	bl	8003ce4 <LL_ADC_IsEnabled>
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	4816      	ldr	r0, [pc, #88]	; (8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e90:	f7ff ff28 	bl	8003ce4 <LL_ADC_IsEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	431c      	orrs	r4, r3
 8003e98:	4815      	ldr	r0, [pc, #84]	; (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e9a:	f7ff ff23 	bl	8003ce4 <LL_ADC_IsEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4323      	orrs	r3, r4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d112      	bne.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003eae:	f023 030f 	bic.w	r3, r3, #15
 8003eb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003eb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eb6:	e009      	b.n	8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003eca:	e000      	b.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ed6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	377c      	adds	r7, #124	; 0x7c
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	50040000 	.word	0x50040000
 8003ee8:	50040100 	.word	0x50040100
 8003eec:	50040300 	.word	0x50040300
 8003ef0:	50040200 	.word	0x50040200

08003ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f10:	4013      	ands	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <__NVIC_SetPriorityGrouping+0x44>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	60d3      	str	r3, [r2, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <__NVIC_GetPriorityGrouping+0x18>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0a1b      	lsrs	r3, r3, #8
 8003f46:	f003 0307 	and.w	r3, r3, #7
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	db0b      	blt.n	8003f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	f003 021f 	and.w	r2, r3, #31
 8003f70:	4907      	ldr	r1, [pc, #28]	; (8003f90 <__NVIC_EnableIRQ+0x38>)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2001      	movs	r0, #1
 8003f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000e100 	.word	0xe000e100

08003f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	db0a      	blt.n	8003fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	490c      	ldr	r1, [pc, #48]	; (8003fe0 <__NVIC_SetPriority+0x4c>)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	0112      	lsls	r2, r2, #4
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fbc:	e00a      	b.n	8003fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <__NVIC_SetPriority+0x50>)
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	3b04      	subs	r3, #4
 8003fcc:	0112      	lsls	r2, r2, #4
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	761a      	strb	r2, [r3, #24]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	e000e100 	.word	0xe000e100
 8003fe4:	e000ed00 	.word	0xe000ed00

08003fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f1c3 0307 	rsb	r3, r3, #7
 8004002:	2b04      	cmp	r3, #4
 8004004:	bf28      	it	cs
 8004006:	2304      	movcs	r3, #4
 8004008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3304      	adds	r3, #4
 800400e:	2b06      	cmp	r3, #6
 8004010:	d902      	bls.n	8004018 <NVIC_EncodePriority+0x30>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3b03      	subs	r3, #3
 8004016:	e000      	b.n	800401a <NVIC_EncodePriority+0x32>
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800401c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	401a      	ands	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	43d9      	mvns	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004040:	4313      	orrs	r3, r2
         );
}
 8004042:	4618      	mov	r0, r3
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ff4c 	bl	8003ef4 <__NVIC_SetPriorityGrouping>
}
 800405c:	bf00      	nop
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004076:	f7ff ff61 	bl	8003f3c <__NVIC_GetPriorityGrouping>
 800407a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	6978      	ldr	r0, [r7, #20]
 8004082:	f7ff ffb1 	bl	8003fe8 <NVIC_EncodePriority>
 8004086:	4602      	mov	r2, r0
 8004088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408c:	4611      	mov	r1, r2
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff80 	bl	8003f94 <__NVIC_SetPriority>
}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff54 	bl	8003f58 <__NVIC_EnableIRQ>
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040c6:	e17f      	b.n	80043c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2101      	movs	r1, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8171 	beq.w	80043c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d00b      	beq.n	8004100 <HAL_GPIO_Init+0x48>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d007      	beq.n	8004100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040f4:	2b11      	cmp	r3, #17
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b12      	cmp	r3, #18
 80040fe:	d130      	bne.n	8004162 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004136:	2201      	movs	r2, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0201 	and.w	r2, r3, #1
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b03      	cmp	r3, #3
 800416c:	d118      	bne.n	80041a0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004174:	2201      	movs	r2, #1
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	08db      	lsrs	r3, r3, #3
 800418a:	f003 0201 	and.w	r2, r3, #1
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	2203      	movs	r2, #3
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x128>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b12      	cmp	r3, #18
 80041de:	d123      	bne.n	8004228 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	08da      	lsrs	r2, r3, #3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3208      	adds	r2, #8
 80041e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	220f      	movs	r2, #15
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4013      	ands	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	08da      	lsrs	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3208      	adds	r2, #8
 8004222:	6939      	ldr	r1, [r7, #16]
 8004224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	2203      	movs	r2, #3
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4013      	ands	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0203 	and.w	r2, r3, #3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80ac 	beq.w	80043c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426a:	4b5f      	ldr	r3, [pc, #380]	; (80043e8 <HAL_GPIO_Init+0x330>)
 800426c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426e:	4a5e      	ldr	r2, [pc, #376]	; (80043e8 <HAL_GPIO_Init+0x330>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6613      	str	r3, [r2, #96]	; 0x60
 8004276:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <HAL_GPIO_Init+0x330>)
 8004278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004282:	4a5a      	ldr	r2, [pc, #360]	; (80043ec <HAL_GPIO_Init+0x334>)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	3302      	adds	r3, #2
 800428a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	220f      	movs	r2, #15
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042ac:	d025      	beq.n	80042fa <HAL_GPIO_Init+0x242>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4f      	ldr	r2, [pc, #316]	; (80043f0 <HAL_GPIO_Init+0x338>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <HAL_GPIO_Init+0x23e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4e      	ldr	r2, [pc, #312]	; (80043f4 <HAL_GPIO_Init+0x33c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d019      	beq.n	80042f2 <HAL_GPIO_Init+0x23a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4d      	ldr	r2, [pc, #308]	; (80043f8 <HAL_GPIO_Init+0x340>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_GPIO_Init+0x236>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4c      	ldr	r2, [pc, #304]	; (80043fc <HAL_GPIO_Init+0x344>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00d      	beq.n	80042ea <HAL_GPIO_Init+0x232>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4b      	ldr	r2, [pc, #300]	; (8004400 <HAL_GPIO_Init+0x348>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <HAL_GPIO_Init+0x22e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <HAL_GPIO_Init+0x34c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <HAL_GPIO_Init+0x22a>
 80042de:	2306      	movs	r3, #6
 80042e0:	e00c      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042e2:	2307      	movs	r3, #7
 80042e4:	e00a      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042e6:	2305      	movs	r3, #5
 80042e8:	e008      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042ea:	2304      	movs	r3, #4
 80042ec:	e006      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042ee:	2303      	movs	r3, #3
 80042f0:	e004      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e002      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_GPIO_Init+0x244>
 80042fa:	2300      	movs	r3, #0
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	f002 0203 	and.w	r2, r2, #3
 8004302:	0092      	lsls	r2, r2, #2
 8004304:	4093      	lsls	r3, r2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800430c:	4937      	ldr	r1, [pc, #220]	; (80043ec <HAL_GPIO_Init+0x334>)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	3302      	adds	r3, #2
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800431a:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_GPIO_Init+0x350>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	43db      	mvns	r3, r3
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800433e:	4a32      	ldr	r2, [pc, #200]	; (8004408 <HAL_GPIO_Init+0x350>)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_GPIO_Init+0x350>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	43db      	mvns	r3, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004368:	4a27      	ldr	r2, [pc, #156]	; (8004408 <HAL_GPIO_Init+0x350>)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_GPIO_Init+0x350>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	43db      	mvns	r3, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4013      	ands	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004392:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_GPIO_Init+0x350>)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_GPIO_Init+0x350>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043bc:	4a12      	ldr	r2, [pc, #72]	; (8004408 <HAL_GPIO_Init+0x350>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa22 f303 	lsr.w	r3, r2, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f ae78 	bne.w	80040c8 <HAL_GPIO_Init+0x10>
  }
}
 80043d8:	bf00      	nop
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40010000 	.word	0x40010000
 80043f0:	48000400 	.word	0x48000400
 80043f4:	48000800 	.word	0x48000800
 80043f8:	48000c00 	.word	0x48000c00
 80043fc:	48001000 	.word	0x48001000
 8004400:	48001400 	.word	0x48001400
 8004404:	48001800 	.word	0x48001800
 8004408:	40010400 	.word	0x40010400

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004428:	e002      	b.n	8004430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_PWREx_GetVoltageRange+0x18>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000

08004458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004466:	d130      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004474:	d038      	beq.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2232      	movs	r2, #50	; 0x32
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0c9b      	lsrs	r3, r3, #18
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449c:	e002      	b.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d102      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f2      	bne.n	800449e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c4:	d110      	bne.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e00f      	b.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d007      	beq.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044e0:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40007000 	.word	0x40007000
 80044fc:	20000004 	.word	0x20000004
 8004500:	431bde83 	.word	0x431bde83

08004504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e3d4      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004516:	4ba1      	ldr	r3, [pc, #644]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
 800451e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004520:	4b9e      	ldr	r3, [pc, #632]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80e4 	beq.w	8004700 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_RCC_OscConfig+0x4a>
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b0c      	cmp	r3, #12
 8004542:	f040 808b 	bne.w	800465c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b01      	cmp	r3, #1
 800454a:	f040 8087 	bne.w	800465c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800454e:	4b93      	ldr	r3, [pc, #588]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x62>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e3ac      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	4b8c      	ldr	r3, [pc, #560]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_RCC_OscConfig+0x7c>
 8004576:	4b89      	ldr	r3, [pc, #548]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800457e:	e005      	b.n	800458c <HAL_RCC_OscConfig+0x88>
 8004580:	4b86      	ldr	r3, [pc, #536]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458c:	4293      	cmp	r3, r2
 800458e:	d223      	bcs.n	80045d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fd73 	bl	8005080 <RCC_SetFlashLatencyFromMSIRange>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e38d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a4:	4b7d      	ldr	r3, [pc, #500]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045aa:	f043 0308 	orr.w	r3, r3, #8
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b7a      	ldr	r3, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4977      	ldr	r1, [pc, #476]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c2:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	4972      	ldr	r1, [pc, #456]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
 80045d6:	e025      	b.n	8004624 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d8:	4b70      	ldr	r3, [pc, #448]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6f      	ldr	r2, [pc, #444]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b6d      	ldr	r3, [pc, #436]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	496a      	ldr	r1, [pc, #424]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f6:	4b69      	ldr	r3, [pc, #420]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	4965      	ldr	r1, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fd33 	bl	8005080 <RCC_SetFlashLatencyFromMSIRange>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e34d      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004624:	f000 fc36 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b5c      	ldr	r3, [pc, #368]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	495a      	ldr	r1, [pc, #360]	; (80047a0 <HAL_RCC_OscConfig+0x29c>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
 8004640:	4a58      	ldr	r2, [pc, #352]	; (80047a4 <HAL_RCC_OscConfig+0x2a0>)
 8004642:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004644:	4b58      	ldr	r3, [pc, #352]	; (80047a8 <HAL_RCC_OscConfig+0x2a4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe f803 	bl	8002654 <HAL_InitTick>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d052      	beq.n	80046fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	e331      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d032      	beq.n	80046ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a4c      	ldr	r2, [pc, #304]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004670:	f7fe f9bc 	bl	80029ec <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004678:	f7fe f9b8 	bl	80029ec <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e31a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468a:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004696:	4b41      	ldr	r3, [pc, #260]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a40      	ldr	r2, [pc, #256]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b3e      	ldr	r3, [pc, #248]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	493b      	ldr	r1, [pc, #236]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b4:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	4936      	ldr	r1, [pc, #216]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
 80046c8:	e01a      	b.n	8004700 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046d6:	f7fe f989 	bl	80029ec <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046de:	f7fe f985 	bl	80029ec <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e2e7      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x298>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x1da>
 80046fc:	e000      	b.n	8004700 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d074      	beq.n	80047f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b08      	cmp	r3, #8
 8004710:	d005      	beq.n	800471e <HAL_RCC_OscConfig+0x21a>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	d10e      	bne.n	8004736 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d10b      	bne.n	8004736 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471e:	4b1f      	ldr	r3, [pc, #124]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d064      	beq.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d160      	bne.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e2c4      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x24a>
 8004740:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a15      	ldr	r2, [pc, #84]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e01d      	b.n	800478a <HAL_RCC_OscConfig+0x286>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004756:	d10c      	bne.n	8004772 <HAL_RCC_OscConfig+0x26e>
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a0f      	ldr	r2, [pc, #60]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800475e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0c      	ldr	r2, [pc, #48]	; (800479c <HAL_RCC_OscConfig+0x298>)
 800476a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e00b      	b.n	800478a <HAL_RCC_OscConfig+0x286>
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a06      	ldr	r2, [pc, #24]	; (800479c <HAL_RCC_OscConfig+0x298>)
 8004784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004788:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01c      	beq.n	80047cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fe f92b 	bl	80029ec <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004798:	e011      	b.n	80047be <HAL_RCC_OscConfig+0x2ba>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	08010568 	.word	0x08010568
 80047a4:	20000004 	.word	0x20000004
 80047a8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fe f91e 	bl	80029ec <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e280      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047be:	4baf      	ldr	r3, [pc, #700]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x2a8>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fe f90e 	bl	80029ec <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fe f90a 	bl	80029ec <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e26c      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e6:	4ba5      	ldr	r3, [pc, #660]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x2d0>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d060      	beq.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d005      	beq.n	8004814 <HAL_RCC_OscConfig+0x310>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d119      	bne.n	8004842 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d116      	bne.n	8004842 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x328>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e249      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b93      	ldr	r3, [pc, #588]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	4990      	ldr	r1, [pc, #576]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004840:	e040      	b.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d023      	beq.n	8004892 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484a:	4b8c      	ldr	r3, [pc, #560]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a8b      	ldr	r2, [pc, #556]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fe f8c9 	bl	80029ec <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485e:	f7fe f8c5 	bl	80029ec <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e227      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487c:	4b7f      	ldr	r3, [pc, #508]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	497c      	ldr	r1, [pc, #496]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
 8004890:	e018      	b.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004892:	4b7a      	ldr	r3, [pc, #488]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a79      	ldr	r2, [pc, #484]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fe f8a5 	bl	80029ec <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fe f8a1 	bl	80029ec <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e203      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b8:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d03c      	beq.n	800494a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01c      	beq.n	8004912 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d8:	4b68      	ldr	r3, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	4a67      	ldr	r2, [pc, #412]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fe f880 	bl	80029ec <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe f87c 	bl	80029ec <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1de      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004902:	4b5e      	ldr	r3, [pc, #376]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ef      	beq.n	80048f0 <HAL_RCC_OscConfig+0x3ec>
 8004910:	e01b      	b.n	800494a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004912:	4b5a      	ldr	r3, [pc, #360]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004918:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fe f863 	bl	80029ec <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492a:	f7fe f85f 	bl	80029ec <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e1c1      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493c:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800493e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ef      	bne.n	800492a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80a6 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004958:	2300      	movs	r3, #0
 800495a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800495c:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10d      	bne.n	8004984 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6593      	str	r3, [r2, #88]	; 0x58
 8004974:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004980:	2301      	movs	r3, #1
 8004982:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004984:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <HAL_RCC_OscConfig+0x57c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d118      	bne.n	80049c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004990:	4b3b      	ldr	r3, [pc, #236]	; (8004a80 <HAL_RCC_OscConfig+0x57c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <HAL_RCC_OscConfig+0x57c>)
 8004996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499c:	f7fe f826 	bl	80029ec <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a4:	f7fe f822 	bl	80029ec <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e184      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b6:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <HAL_RCC_OscConfig+0x57c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d108      	bne.n	80049dc <HAL_RCC_OscConfig+0x4d8>
 80049ca:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049da:	e024      	b.n	8004a26 <HAL_RCC_OscConfig+0x522>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d110      	bne.n	8004a06 <HAL_RCC_OscConfig+0x502>
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	4a24      	ldr	r2, [pc, #144]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f4:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a04:	e00f      	b.n	8004a26 <HAL_RCC_OscConfig+0x522>
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fd ffdd 	bl	80029ec <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a36:	f7fd ffd9 	bl	80029ec <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e139      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x578>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ed      	beq.n	8004a36 <HAL_RCC_OscConfig+0x532>
 8004a5a:	e01a      	b.n	8004a92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd ffc6 	bl	80029ec <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a62:	e00f      	b.n	8004a84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7fd ffc2 	bl	80029ec <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d906      	bls.n	8004a84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e122      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a84:	4b90      	ldr	r3, [pc, #576]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1e8      	bne.n	8004a64 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b8b      	ldr	r3, [pc, #556]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a8a      	ldr	r2, [pc, #552]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 8108 	beq.w	8004cbe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	f040 80d0 	bne.w	8004c58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ab8:	4b83      	ldr	r3, [pc, #524]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f003 0203 	and.w	r2, r3, #3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d130      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d127      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d11f      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af8:	2a07      	cmp	r2, #7
 8004afa:	bf14      	ite	ne
 8004afc:	2201      	movne	r2, #1
 8004afe:	2200      	moveq	r2, #0
 8004b00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d113      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d06e      	beq.n	8004c0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b0c      	cmp	r3, #12
 8004b32:	d069      	beq.n	8004c08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b34:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b40:	4b61      	ldr	r3, [pc, #388]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0b7      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b50:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5c      	ldr	r2, [pc, #368]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b5c:	f7fd ff46 	bl	80029ec <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fd ff42 	bl	80029ec <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e0a4      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b76:	4b54      	ldr	r3, [pc, #336]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b82:	4b51      	ldr	r3, [pc, #324]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	4b51      	ldr	r3, [pc, #324]	; (8004ccc <HAL_RCC_OscConfig+0x7c8>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b92:	3a01      	subs	r2, #1
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	4311      	orrs	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b9c:	0212      	lsls	r2, r2, #8
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ba4:	0852      	lsrs	r2, r2, #1
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	0552      	lsls	r2, r2, #21
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bb0:	0852      	lsrs	r2, r2, #1
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	0652      	lsls	r2, r2, #25
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bbc:	0912      	lsrs	r2, r2, #4
 8004bbe:	0452      	lsls	r2, r2, #17
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	4941      	ldr	r1, [pc, #260]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bc8:	4b3f      	ldr	r3, [pc, #252]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3e      	ldr	r2, [pc, #248]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd4:	4b3c      	ldr	r3, [pc, #240]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a3b      	ldr	r2, [pc, #236]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004be0:	f7fd ff04 	bl	80029ec <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fd ff00 	bl	80029ec <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e062      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c06:	e05a      	b.n	8004cbe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e059      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d152      	bne.n	8004cbe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c18:	4b2b      	ldr	r3, [pc, #172]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c24:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c30:	f7fd fedc 	bl	80029ec <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fd fed8 	bl	80029ec <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e03a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x734>
 8004c56:	e032      	b.n	8004cbe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d02d      	beq.n	8004cba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d105      	bne.n	8004c82 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c7c:	f023 0303 	bic.w	r3, r3, #3
 8004c80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c82:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004c88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fd feab 	bl	80029ec <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9a:	f7fd fea7 	bl	80029ec <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e009      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <HAL_RCC_OscConfig+0x7c4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <HAL_RCC_OscConfig+0x796>
 8004cb8:	e001      	b.n	8004cbe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	f99d808c 	.word	0xf99d808c

08004cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0c8      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b66      	ldr	r3, [pc, #408]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d910      	bls.n	8004d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b63      	ldr	r3, [pc, #396]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 0207 	bic.w	r2, r3, #7
 8004cfa:	4961      	ldr	r1, [pc, #388]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b5f      	ldr	r3, [pc, #380]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0b0      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d04c      	beq.n	8004dba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d28:	4b56      	ldr	r3, [pc, #344]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d121      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e09e      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d40:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d115      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e092      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d58:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e086      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d68:	4b46      	ldr	r3, [pc, #280]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e07e      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d78:	4b42      	ldr	r3, [pc, #264]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 0203 	bic.w	r2, r3, #3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	493f      	ldr	r1, [pc, #252]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8a:	f7fd fe2f 	bl	80029ec <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d92:	f7fd fe2b 	bl	80029ec <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e066      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 020c 	and.w	r2, r3, #12
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d1eb      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	492c      	ldr	r1, [pc, #176]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d210      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 0207 	bic.w	r2, r3, #7
 8004dee:	4924      	ldr	r1, [pc, #144]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <HAL_RCC_ClockConfig+0x1b0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e036      	b.n	8004e76 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4918      	ldr	r1, [pc, #96]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e32:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4910      	ldr	r1, [pc, #64]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e46:	f000 f825 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <HAL_RCC_ClockConfig+0x1b4>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	490c      	ldr	r1, [pc, #48]	; (8004e88 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	5ccb      	ldrb	r3, [r1, r3]
 8004e5a:	f003 031f 	and.w	r3, r3, #31
 8004e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e62:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd fbf2 	bl	8002654 <HAL_InitTick>
 8004e70:	4603      	mov	r3, r0
 8004e72:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e74:	7afb      	ldrb	r3, [r7, #11]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40022000 	.word	0x40022000
 8004e84:	40021000 	.word	0x40021000
 8004e88:	08010568 	.word	0x08010568
 8004e8c:	20000004 	.word	0x20000004
 8004e90:	20000008 	.word	0x20000008

08004e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	; 0x24
 8004e98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea2:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eac:	4b3b      	ldr	r3, [pc, #236]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b0c      	cmp	r3, #12
 8004ec0:	d121      	bne.n	8004f06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d11e      	bne.n	8004f06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec8:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ed4:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	f003 030f 	and.w	r3, r3, #15
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ef0:	4a2b      	ldr	r2, [pc, #172]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d102      	bne.n	8004f12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e004      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f18:	4b23      	ldr	r3, [pc, #140]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d134      	bne.n	8004f8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d003      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0xac>
 8004f38:	e005      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f3c:	617b      	str	r3, [r7, #20]
      break;
 8004f3e:	e005      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f42:	617b      	str	r3, [r7, #20]
      break;
 8004f44:	e002      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	617b      	str	r3, [r7, #20]
      break;
 8004f4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	3301      	adds	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	fb02 f203 	mul.w	r2, r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	0e5b      	lsrs	r3, r3, #25
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3724      	adds	r7, #36	; 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	08010580 	.word	0x08010580
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	007a1200 	.word	0x007a1200

08004fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b03      	ldr	r3, [pc, #12]	; (8004fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000004 	.word	0x20000004

08004fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fc8:	f7ff fff0 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4904      	ldr	r1, [pc, #16]	; (8004fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	08010578 	.word	0x08010578

08004ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ff4:	f7ff ffda 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	0adb      	lsrs	r3, r3, #11
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4904      	ldr	r1, [pc, #16]	; (8005018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000
 8005018:	08010578 	.word	0x08010578

0800501c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	220f      	movs	r2, #15
 800502a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0203 	and.w	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_GetClockConfig+0x5c>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	08db      	lsrs	r3, r3, #3
 8005056:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <HAL_RCC_GetClockConfig+0x60>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0207 	and.w	r2, r3, #7
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	601a      	str	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000
 800507c:	40022000 	.word	0x40022000

08005080 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800508c:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005098:	f7ff f9d0 	bl	800443c <HAL_PWREx_GetVoltageRange>
 800509c:	6178      	str	r0, [r7, #20]
 800509e:	e014      	b.n	80050ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	4a24      	ldr	r2, [pc, #144]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6593      	str	r3, [r2, #88]	; 0x58
 80050ac:	4b22      	ldr	r3, [pc, #136]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050b8:	f7ff f9c0 	bl	800443c <HAL_PWREx_GetVoltageRange>
 80050bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d0:	d10b      	bne.n	80050ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	d919      	bls.n	800510c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2ba0      	cmp	r3, #160	; 0xa0
 80050dc:	d902      	bls.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050de:	2302      	movs	r3, #2
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e013      	b.n	800510c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050e4:	2301      	movs	r3, #1
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e010      	b.n	800510c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d902      	bls.n	80050f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050f0:	2303      	movs	r3, #3
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	e00a      	b.n	800510c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d102      	bne.n	8005102 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050fc:	2302      	movs	r3, #2
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	e004      	b.n	800510c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b70      	cmp	r3, #112	; 0x70
 8005106:	d101      	bne.n	800510c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005108:	2301      	movs	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 0207 	bic.w	r2, r3, #7
 8005114:	4909      	ldr	r1, [pc, #36]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d001      	beq.n	800512e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40021000 	.word	0x40021000
 800513c:	40022000 	.word	0x40022000

08005140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005148:	2300      	movs	r3, #0
 800514a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800514c:	2300      	movs	r3, #0
 800514e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005158:	2b00      	cmp	r3, #0
 800515a:	d041      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005160:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005164:	d02a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005166:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800516a:	d824      	bhi.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800516c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005170:	d008      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005176:	d81e      	bhi.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800517c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005180:	d010      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005182:	e018      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005184:	4b86      	ldr	r3, [pc, #536]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a85      	ldr	r2, [pc, #532]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005190:	e015      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fabb 	bl	8005714 <RCCEx_PLLSAI1_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a2:	e00c      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3320      	adds	r3, #32
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 fba6 	bl	80058fc <RCCEx_PLLSAI2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b4:	e003      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	74fb      	strb	r3, [r7, #19]
      break;
 80051ba:	e000      	b.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051c4:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d2:	4973      	ldr	r1, [pc, #460]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051da:	e001      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d041      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f4:	d02a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051fa:	d824      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005200:	d008      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005206:	d81e      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800520c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005210:	d010      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005212:	e018      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005214:	4b62      	ldr	r3, [pc, #392]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4a61      	ldr	r2, [pc, #388]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005220:	e015      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3304      	adds	r3, #4
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fa73 	bl	8005714 <RCCEx_PLLSAI1_Config>
 800522e:	4603      	mov	r3, r0
 8005230:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005232:	e00c      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3320      	adds	r3, #32
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f000 fb5e 	bl	80058fc <RCCEx_PLLSAI2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	74fb      	strb	r3, [r7, #19]
      break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800524c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005254:	4b52      	ldr	r3, [pc, #328]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005262:	494f      	ldr	r1, [pc, #316]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800526a:	e001      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a0 	beq.w	80053be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527e:	2300      	movs	r3, #0
 8005280:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005282:	4b47      	ldr	r3, [pc, #284]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005298:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6593      	str	r3, [r2, #88]	; 0x58
 80052a4:	4b3e      	ldr	r3, [pc, #248]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052b0:	2301      	movs	r3, #1
 80052b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052c0:	f7fd fb94 	bl	80029ec <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052c6:	e009      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c8:	f7fd fb90 	bl	80029ec <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d902      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	74fb      	strb	r3, [r7, #19]
        break;
 80052da:	e005      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ef      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d15c      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ee:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01f      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	429a      	cmp	r2, r3
 800530a:	d019      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005316:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005318:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531e:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005328:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005338:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d016      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534a:	f7fd fb4f 	bl	80029ec <HAL_GetTick>
 800534e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005350:	e00b      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005352:	f7fd fb4b 	bl	80029ec <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005360:	4293      	cmp	r3, r2
 8005362:	d902      	bls.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	74fb      	strb	r3, [r7, #19]
            break;
 8005368:	e006      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ec      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538e:	4904      	ldr	r1, [pc, #16]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005396:	e009      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	74bb      	strb	r3, [r7, #18]
 800539c:	e006      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ac:	7c7b      	ldrb	r3, [r7, #17]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d105      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b2:	4b9e      	ldr	r3, [pc, #632]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b6:	4a9d      	ldr	r2, [pc, #628]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053ca:	4b98      	ldr	r3, [pc, #608]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f023 0203 	bic.w	r2, r3, #3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	4994      	ldr	r1, [pc, #592]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ec:	4b8f      	ldr	r3, [pc, #572]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f023 020c 	bic.w	r2, r3, #12
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	498c      	ldr	r1, [pc, #560]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800540e:	4b87      	ldr	r3, [pc, #540]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	4983      	ldr	r1, [pc, #524]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005430:	4b7e      	ldr	r3, [pc, #504]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	497b      	ldr	r1, [pc, #492]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005452:	4b76      	ldr	r3, [pc, #472]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005460:	4972      	ldr	r1, [pc, #456]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005474:	4b6d      	ldr	r3, [pc, #436]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	496a      	ldr	r1, [pc, #424]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005496:	4b65      	ldr	r3, [pc, #404]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a4:	4961      	ldr	r1, [pc, #388]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054b8:	4b5c      	ldr	r3, [pc, #368]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c6:	4959      	ldr	r1, [pc, #356]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054da:	4b54      	ldr	r3, [pc, #336]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	4950      	ldr	r1, [pc, #320]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054fc:	4b4b      	ldr	r3, [pc, #300]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005502:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550a:	4948      	ldr	r1, [pc, #288]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800551e:	4b43      	ldr	r3, [pc, #268]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	493f      	ldr	r1, [pc, #252]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d028      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005540:	4b3a      	ldr	r3, [pc, #232]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554e:	4937      	ldr	r1, [pc, #220]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555e:	d106      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a31      	ldr	r2, [pc, #196]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556a:	60d3      	str	r3, [r2, #12]
 800556c:	e011      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005576:	d10c      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f8c8 	bl	8005714 <RCCEx_PLLSAI1_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d028      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800559e:	4b23      	ldr	r3, [pc, #140]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	491f      	ldr	r1, [pc, #124]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055bc:	d106      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055be:	4b1b      	ldr	r3, [pc, #108]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	4a1a      	ldr	r2, [pc, #104]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c8:	60d3      	str	r3, [r2, #12]
 80055ca:	e011      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	2101      	movs	r1, #1
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f899 	bl	8005714 <RCCEx_PLLSAI1_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055e6:	7cfb      	ldrb	r3, [r7, #19]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055ec:	7cfb      	ldrb	r3, [r7, #19]
 80055ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d02b      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560a:	4908      	ldr	r1, [pc, #32]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800561a:	d109      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800561c:	4b03      	ldr	r3, [pc, #12]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a02      	ldr	r2, [pc, #8]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005626:	60d3      	str	r3, [r2, #12]
 8005628:	e014      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005638:	d10c      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3304      	adds	r3, #4
 800563e:	2101      	movs	r1, #1
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f867 	bl	8005714 <RCCEx_PLLSAI1_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02f      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005660:	4b2b      	ldr	r3, [pc, #172]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800566e:	4928      	ldr	r1, [pc, #160]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800567a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800567e:	d10d      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	2102      	movs	r1, #2
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f844 	bl	8005714 <RCCEx_PLLSAI1_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d014      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	74bb      	strb	r3, [r7, #18]
 800569a:	e011      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3320      	adds	r3, #32
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f925 	bl	80058fc <RCCEx_PLLSAI2_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056da:	490d      	ldr	r1, [pc, #52]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056ee:	4b08      	ldr	r3, [pc, #32]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056fe:	4904      	ldr	r1, [pc, #16]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005706:	7cbb      	ldrb	r3, [r7, #18]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40021000 	.word	0x40021000

08005714 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005722:	4b75      	ldr	r3, [pc, #468]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d018      	beq.n	8005760 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800572e:	4b72      	ldr	r3, [pc, #456]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0203 	and.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d10d      	bne.n	800575a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
       ||
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
       ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d047      	beq.n	80057ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
 800575e:	e044      	b.n	80057ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d018      	beq.n	800579a <RCCEx_PLLSAI1_Config+0x86>
 8005768:	2b03      	cmp	r3, #3
 800576a:	d825      	bhi.n	80057b8 <RCCEx_PLLSAI1_Config+0xa4>
 800576c:	2b01      	cmp	r3, #1
 800576e:	d002      	beq.n	8005776 <RCCEx_PLLSAI1_Config+0x62>
 8005770:	2b02      	cmp	r3, #2
 8005772:	d009      	beq.n	8005788 <RCCEx_PLLSAI1_Config+0x74>
 8005774:	e020      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005776:	4b60      	ldr	r3, [pc, #384]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d11d      	bne.n	80057be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005786:	e01a      	b.n	80057be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005788:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005790:	2b00      	cmp	r3, #0
 8005792:	d116      	bne.n	80057c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e013      	b.n	80057c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800579a:	4b57      	ldr	r3, [pc, #348]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057a6:	4b54      	ldr	r3, [pc, #336]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057b6:	e006      	b.n	80057c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e004      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057be:	bf00      	nop
 80057c0:	e002      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057c2:	bf00      	nop
 80057c4:	e000      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10d      	bne.n	80057ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057ce:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	3b01      	subs	r3, #1
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	430b      	orrs	r3, r1
 80057e4:	4944      	ldr	r1, [pc, #272]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d17d      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057f0:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a40      	ldr	r2, [pc, #256]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fc:	f7fd f8f6 	bl	80029ec <HAL_GetTick>
 8005800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005802:	e009      	b.n	8005818 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005804:	f7fd f8f2 	bl	80029ec <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d902      	bls.n	8005818 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	73fb      	strb	r3, [r7, #15]
        break;
 8005816:	e005      	b.n	8005824 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005818:	4b37      	ldr	r3, [pc, #220]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1ef      	bne.n	8005804 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d160      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d111      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6892      	ldr	r2, [r2, #8]
 8005840:	0211      	lsls	r1, r2, #8
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68d2      	ldr	r2, [r2, #12]
 8005846:	0912      	lsrs	r2, r2, #4
 8005848:	0452      	lsls	r2, r2, #17
 800584a:	430a      	orrs	r2, r1
 800584c:	492a      	ldr	r1, [pc, #168]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584e:	4313      	orrs	r3, r2
 8005850:	610b      	str	r3, [r1, #16]
 8005852:	e027      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d112      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800585a:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005862:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6892      	ldr	r2, [r2, #8]
 800586a:	0211      	lsls	r1, r2, #8
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6912      	ldr	r2, [r2, #16]
 8005870:	0852      	lsrs	r2, r2, #1
 8005872:	3a01      	subs	r2, #1
 8005874:	0552      	lsls	r2, r2, #21
 8005876:	430a      	orrs	r2, r1
 8005878:	491f      	ldr	r1, [pc, #124]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]
 800587e:	e011      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005880:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005888:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6892      	ldr	r2, [r2, #8]
 8005890:	0211      	lsls	r1, r2, #8
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6952      	ldr	r2, [r2, #20]
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0652      	lsls	r2, r2, #25
 800589c:	430a      	orrs	r2, r1
 800589e:	4916      	ldr	r1, [pc, #88]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058a4:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a13      	ldr	r2, [pc, #76]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fd f89c 	bl	80029ec <HAL_GetTick>
 80058b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058b6:	e009      	b.n	80058cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058b8:	f7fd f898 	bl	80029ec <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d902      	bls.n	80058cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	73fb      	strb	r3, [r7, #15]
          break;
 80058ca:	e005      	b.n	80058d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0ef      	beq.n	80058b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058de:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	4904      	ldr	r1, [pc, #16]	; (80058f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000

080058fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800590a:	4b6a      	ldr	r3, [pc, #424]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005916:	4b67      	ldr	r3, [pc, #412]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0203 	and.w	r2, r3, #3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d10d      	bne.n	8005942 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
       ||
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800592e:	4b61      	ldr	r3, [pc, #388]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
       ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d047      	beq.n	80059d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
 8005946:	e044      	b.n	80059d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d018      	beq.n	8005982 <RCCEx_PLLSAI2_Config+0x86>
 8005950:	2b03      	cmp	r3, #3
 8005952:	d825      	bhi.n	80059a0 <RCCEx_PLLSAI2_Config+0xa4>
 8005954:	2b01      	cmp	r3, #1
 8005956:	d002      	beq.n	800595e <RCCEx_PLLSAI2_Config+0x62>
 8005958:	2b02      	cmp	r3, #2
 800595a:	d009      	beq.n	8005970 <RCCEx_PLLSAI2_Config+0x74>
 800595c:	e020      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800595e:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11d      	bne.n	80059a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800596e:	e01a      	b.n	80059a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005970:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005978:	2b00      	cmp	r3, #0
 800597a:	d116      	bne.n	80059aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005980:	e013      	b.n	80059aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005982:	4b4c      	ldr	r3, [pc, #304]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10f      	bne.n	80059ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800598e:	4b49      	ldr	r3, [pc, #292]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800599e:	e006      	b.n	80059ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      break;
 80059a4:	e004      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059a6:	bf00      	nop
 80059a8:	e002      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059b6:	4b3f      	ldr	r3, [pc, #252]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6819      	ldr	r1, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	3b01      	subs	r3, #1
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	430b      	orrs	r3, r1
 80059cc:	4939      	ldr	r1, [pc, #228]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d167      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059d8:	4b36      	ldr	r3, [pc, #216]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a35      	ldr	r2, [pc, #212]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e4:	f7fd f802 	bl	80029ec <HAL_GetTick>
 80059e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059ea:	e009      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059ec:	f7fc fffe 	bl	80029ec <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d902      	bls.n	8005a00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	73fb      	strb	r3, [r7, #15]
        break;
 80059fe:	e005      	b.n	8005a0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a00:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1ef      	bne.n	80059ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d14a      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d111      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a18:	4b26      	ldr	r3, [pc, #152]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6892      	ldr	r2, [r2, #8]
 8005a28:	0211      	lsls	r1, r2, #8
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	68d2      	ldr	r2, [r2, #12]
 8005a2e:	0912      	lsrs	r2, r2, #4
 8005a30:	0452      	lsls	r2, r2, #17
 8005a32:	430a      	orrs	r2, r1
 8005a34:	491f      	ldr	r1, [pc, #124]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	614b      	str	r3, [r1, #20]
 8005a3a:	e011      	b.n	8005a60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6892      	ldr	r2, [r2, #8]
 8005a4c:	0211      	lsls	r1, r2, #8
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6912      	ldr	r2, [r2, #16]
 8005a52:	0852      	lsrs	r2, r2, #1
 8005a54:	3a01      	subs	r2, #1
 8005a56:	0652      	lsls	r2, r2, #25
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	4916      	ldr	r1, [pc, #88]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a60:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc ffbe 	bl	80029ec <HAL_GetTick>
 8005a70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a72:	e009      	b.n	8005a88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a74:	f7fc ffba 	bl	80029ec <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d902      	bls.n	8005a88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	73fb      	strb	r3, [r7, #15]
          break;
 8005a86:	e005      	b.n	8005a94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ef      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9c:	695a      	ldr	r2, [r3, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4904      	ldr	r1, [pc, #16]	; (8005ab4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40021000 	.word	0x40021000

08005ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e095      	b.n	8005bf6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d108      	bne.n	8005ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ada:	d009      	beq.n	8005af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	61da      	str	r2, [r3, #28]
 8005ae2:	e005      	b.n	8005af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fc fcc6 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b30:	d902      	bls.n	8005b38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e002      	b.n	8005b3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b46:	d007      	beq.n	8005b58 <HAL_SPI_Init+0xa0>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b50:	d002      	beq.n	8005b58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	ea42 0103 	orr.w	r1, r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	0c1b      	lsrs	r3, r3, #16
 8005bb4:	f003 0204 	and.w	r2, r3, #4
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bd4:	ea42 0103 	orr.w	r1, r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b088      	sub	sp, #32
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_SPI_Transmit+0x22>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e158      	b.n	8005ed2 <HAL_SPI_Transmit+0x2d4>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c28:	f7fc fee0 	bl	80029ec <HAL_GetTick>
 8005c2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c42:	e13d      	b.n	8005ec0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <HAL_SPI_Transmit+0x52>
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c54:	e134      	b.n	8005ec0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	88fa      	ldrh	r2, [r7, #6]
 8005c74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d007      	beq.n	8005ce0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce8:	d94b      	bls.n	8005d82 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_SPI_Transmit+0xfa>
 8005cf2:	8afb      	ldrh	r3, [r7, #22]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d13e      	bne.n	8005d76 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	881a      	ldrh	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d1c:	e02b      	b.n	8005d76 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d112      	bne.n	8005d52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	881a      	ldrh	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	1c9a      	adds	r2, r3, #2
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d50:	e011      	b.n	8005d76 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d52:	f7fc fe4b 	bl	80029ec <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d803      	bhi.n	8005d6a <HAL_SPI_Transmit+0x16c>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d68:	d102      	bne.n	8005d70 <HAL_SPI_Transmit+0x172>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d74:	e0a4      	b.n	8005ec0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1ce      	bne.n	8005d1e <HAL_SPI_Transmit+0x120>
 8005d80:	e07c      	b.n	8005e7c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_SPI_Transmit+0x192>
 8005d8a:	8afb      	ldrh	r3, [r7, #22]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d170      	bne.n	8005e72 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d912      	bls.n	8005dc0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	881a      	ldrh	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	1c9a      	adds	r2, r3, #2
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b02      	subs	r3, #2
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dbe:	e058      	b.n	8005e72 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005de6:	e044      	b.n	8005e72 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d12b      	bne.n	8005e4e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d912      	bls.n	8005e26 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b02      	subs	r3, #2
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e24:	e025      	b.n	8005e72 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4c:	e011      	b.n	8005e72 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4e:	f7fc fdcd 	bl	80029ec <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d803      	bhi.n	8005e66 <HAL_SPI_Transmit+0x268>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_Transmit+0x26e>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e70:	e026      	b.n	8005ec0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1b5      	bne.n	8005de8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fb57 	bl	8006534 <SPI_EndRxTxTransaction>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e000      	b.n	8005ec0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ebe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ed0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b08a      	sub	sp, #40	; 0x28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x26>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e1fb      	b.n	80062f8 <HAL_SPI_TransmitReceive+0x41e>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f08:	f7fc fd70 	bl	80029ec <HAL_GetTick>
 8005f0c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f14:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005f20:	887b      	ldrh	r3, [r7, #2]
 8005f22:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f24:	7efb      	ldrb	r3, [r7, #27]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d00e      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x6e>
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f30:	d106      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x66>
 8005f3a:	7efb      	ldrb	r3, [r7, #27]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d003      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f46:	e1cd      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x80>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_SPI_TransmitReceive+0x80>
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f60:	e1c0      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d003      	beq.n	8005f76 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2205      	movs	r2, #5
 8005f72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	887a      	ldrh	r2, [r7, #2]
 8005f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	887a      	ldrh	r2, [r7, #2]
 8005f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	887a      	ldrh	r2, [r7, #2]
 8005fa2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fb8:	d802      	bhi.n	8005fc0 <HAL_SPI_TransmitReceive+0xe6>
 8005fba:	8a3b      	ldrh	r3, [r7, #16]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d908      	bls.n	8005fd2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	e007      	b.n	8005fe2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d007      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006008:	d97c      	bls.n	8006104 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x13e>
 8006012:	8a7b      	ldrh	r3, [r7, #18]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d169      	bne.n	80060ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	881a      	ldrh	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800603c:	e056      	b.n	80060ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d11b      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x1aa>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x1aa>
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	2b01      	cmp	r3, #1
 800605a:	d113      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d11c      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x1f2>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	b292      	uxth	r2, r2
 80060aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	1c9a      	adds	r2, r3, #2
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060c8:	2301      	movs	r3, #1
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060cc:	f7fc fc8e 	bl	80029ec <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d8:	429a      	cmp	r2, r3
 80060da:	d807      	bhi.n	80060ec <HAL_SPI_TransmitReceive+0x212>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e2:	d003      	beq.n	80060ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80060ea:	e0fb      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1a3      	bne.n	800603e <HAL_SPI_TransmitReceive+0x164>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d19d      	bne.n	800603e <HAL_SPI_TransmitReceive+0x164>
 8006102:	e0df      	b.n	80062c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_SPI_TransmitReceive+0x23a>
 800610c:	8a7b      	ldrh	r3, [r7, #18]
 800610e:	2b01      	cmp	r3, #1
 8006110:	f040 80cb 	bne.w	80062aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d912      	bls.n	8006144 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b02      	subs	r3, #2
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006142:	e0b2      	b.n	80062aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616a:	e09e      	b.n	80062aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	d134      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x30a>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02f      	beq.n	80061e4 <HAL_SPI_TransmitReceive+0x30a>
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	2b01      	cmp	r3, #1
 8006188:	d12c      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d912      	bls.n	80061ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	881a      	ldrh	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	1c9a      	adds	r2, r3, #2
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b02      	subs	r3, #2
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b8:	e012      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d148      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x3aa>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d042      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d923      	bls.n	8006252 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	b292      	uxth	r2, r2
 8006216:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	1c9a      	adds	r2, r3, #2
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b02      	subs	r3, #2
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d81f      	bhi.n	8006280 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	e016      	b.n	8006280 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f103 020c 	add.w	r2, r3, #12
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006280:	2301      	movs	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006284:	f7fc fbb2 	bl	80029ec <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006290:	429a      	cmp	r2, r3
 8006292:	d803      	bhi.n	800629c <HAL_SPI_TransmitReceive+0x3c2>
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800629a:	d102      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x3c8>
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062a8:	e01c      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f af5b 	bne.w	800616c <HAL_SPI_TransmitReceive+0x292>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af54 	bne.w	800616c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f933 	bl	8006534 <SPI_EndRxTxTransaction>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d006      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2220      	movs	r2, #32
 80062de:	661a      	str	r2, [r3, #96]	; 0x60
 80062e0:	e000      	b.n	80062e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80062e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3728      	adds	r7, #40	; 0x28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	4613      	mov	r3, r2
 800630e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006310:	f7fc fb6c 	bl	80029ec <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	1a9b      	subs	r3, r3, r2
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	4413      	add	r3, r2
 800631e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006320:	f7fc fb64 	bl	80029ec <HAL_GetTick>
 8006324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006326:	4b39      	ldr	r3, [pc, #228]	; (800640c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	015b      	lsls	r3, r3, #5
 800632c:	0d1b      	lsrs	r3, r3, #20
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	fb02 f303 	mul.w	r3, r2, r3
 8006334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006336:	e054      	b.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633e:	d050      	beq.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006340:	f7fc fb54 	bl	80029ec <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	429a      	cmp	r2, r3
 800634e:	d902      	bls.n	8006356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d13d      	bne.n	80063d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636e:	d111      	bne.n	8006394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006378:	d004      	beq.n	8006384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006382:	d107      	bne.n	8006394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639c:	d10f      	bne.n	80063be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e017      	b.n	8006402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3b01      	subs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	bf0c      	ite	eq
 80063f2:	2301      	moveq	r3, #1
 80063f4:	2300      	movne	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d19b      	bne.n	8006338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000004 	.word	0x20000004

08006410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800641e:	f7fc fae5 	bl	80029ec <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	4413      	add	r3, r2
 800642c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800642e:	f7fc fadd 	bl	80029ec <HAL_GetTick>
 8006432:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006434:	4b3e      	ldr	r3, [pc, #248]	; (8006530 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	00da      	lsls	r2, r3, #3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	0d1b      	lsrs	r3, r3, #20
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800644c:	e062      	b.n	8006514 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006454:	d109      	bne.n	800646a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006468:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006470:	d050      	beq.n	8006514 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006472:	f7fc fabb 	bl	80029ec <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	429a      	cmp	r2, r3
 8006480:	d902      	bls.n	8006488 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d13d      	bne.n	8006504 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006496:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a0:	d111      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064aa:	d004      	beq.n	80064b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b4:	d107      	bne.n	80064c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ce:	d10f      	bne.n	80064f0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e010      	b.n	8006526 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3b01      	subs	r3, #1
 8006512:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d194      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000004 	.word	0x20000004

08006534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2200      	movs	r2, #0
 8006548:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff ff5f 	bl	8006410 <SPI_WaitFifoStateUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655c:	f043 0220 	orr.w	r2, r3, #32
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e027      	b.n	80065b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	2180      	movs	r1, #128	; 0x80
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7ff fec4 	bl	8006300 <SPI_WaitFlagStateUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e014      	b.n	80065b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff ff38 	bl	8006410 <SPI_WaitFifoStateUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065aa:	f043 0220 	orr.w	r2, r3, #32
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e000      	b.n	80065b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e049      	b.n	8006666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f841 	bl	800666e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f000 fc66 	bl	8006ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	d001      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e04f      	b.n	800673c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a23      	ldr	r2, [pc, #140]	; (8006748 <HAL_TIM_Base_Start_IT+0xc4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01d      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x76>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c6:	d018      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x76>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <HAL_TIM_Base_Start_IT+0xc8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x76>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <HAL_TIM_Base_Start_IT+0xcc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x76>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <HAL_TIM_Base_Start_IT+0xd0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x76>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	; (8006758 <HAL_TIM_Base_Start_IT+0xd4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_TIM_Base_Start_IT+0x76>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <HAL_TIM_Base_Start_IT+0xd8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d115      	bne.n	8006726 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	4b17      	ldr	r3, [pc, #92]	; (8006760 <HAL_TIM_Base_Start_IT+0xdc>)
 8006702:	4013      	ands	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b06      	cmp	r3, #6
 800670a:	d015      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0xb4>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d011      	beq.n	8006738 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	e008      	b.n	8006738 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e000      	b.n	800673a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006738:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800
 8006754:	40000c00 	.word	0x40000c00
 8006758:	40013400 	.word	0x40013400
 800675c:	40014000 	.word	0x40014000
 8006760:	00010007 	.word	0x00010007

08006764 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e049      	b.n	800680a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fb fec8 	bl	8002520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 fb94 	bl	8006ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x24>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e03c      	b.n	80068b2 <HAL_TIM_PWM_Start+0x9e>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b04      	cmp	r3, #4
 800683c:	d109      	bne.n	8006852 <HAL_TIM_PWM_Start+0x3e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b01      	cmp	r3, #1
 8006848:	bf14      	ite	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2300      	moveq	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	e02f      	b.n	80068b2 <HAL_TIM_PWM_Start+0x9e>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b08      	cmp	r3, #8
 8006856:	d109      	bne.n	800686c <HAL_TIM_PWM_Start+0x58>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e022      	b.n	80068b2 <HAL_TIM_PWM_Start+0x9e>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b0c      	cmp	r3, #12
 8006870:	d109      	bne.n	8006886 <HAL_TIM_PWM_Start+0x72>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b01      	cmp	r3, #1
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	e015      	b.n	80068b2 <HAL_TIM_PWM_Start+0x9e>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b10      	cmp	r3, #16
 800688a:	d109      	bne.n	80068a0 <HAL_TIM_PWM_Start+0x8c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	e008      	b.n	80068b2 <HAL_TIM_PWM_Start+0x9e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e09c      	b.n	80069f4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <HAL_TIM_PWM_Start+0xb6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c8:	e023      	b.n	8006912 <HAL_TIM_PWM_Start+0xfe>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d104      	bne.n	80068da <HAL_TIM_PWM_Start+0xc6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d8:	e01b      	b.n	8006912 <HAL_TIM_PWM_Start+0xfe>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d104      	bne.n	80068ea <HAL_TIM_PWM_Start+0xd6>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e8:	e013      	b.n	8006912 <HAL_TIM_PWM_Start+0xfe>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	d104      	bne.n	80068fa <HAL_TIM_PWM_Start+0xe6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068f8:	e00b      	b.n	8006912 <HAL_TIM_PWM_Start+0xfe>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d104      	bne.n	800690a <HAL_TIM_PWM_Start+0xf6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	e003      	b.n	8006912 <HAL_TIM_PWM_Start+0xfe>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2202      	movs	r2, #2
 800690e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2201      	movs	r2, #1
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fe48 	bl	80075b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a35      	ldr	r2, [pc, #212]	; (80069fc <HAL_TIM_PWM_Start+0x1e8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <HAL_TIM_PWM_Start+0x13e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a34      	ldr	r2, [pc, #208]	; (8006a00 <HAL_TIM_PWM_Start+0x1ec>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00e      	beq.n	8006952 <HAL_TIM_PWM_Start+0x13e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a32      	ldr	r2, [pc, #200]	; (8006a04 <HAL_TIM_PWM_Start+0x1f0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d009      	beq.n	8006952 <HAL_TIM_PWM_Start+0x13e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a31      	ldr	r2, [pc, #196]	; (8006a08 <HAL_TIM_PWM_Start+0x1f4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <HAL_TIM_PWM_Start+0x13e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2f      	ldr	r2, [pc, #188]	; (8006a0c <HAL_TIM_PWM_Start+0x1f8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <HAL_TIM_PWM_Start+0x142>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <HAL_TIM_PWM_Start+0x144>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d007      	beq.n	800696c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800696a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a22      	ldr	r2, [pc, #136]	; (80069fc <HAL_TIM_PWM_Start+0x1e8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x19e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697e:	d018      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x19e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <HAL_TIM_PWM_Start+0x1fc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x19e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <HAL_TIM_PWM_Start+0x200>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x19e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_TIM_PWM_Start+0x204>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x19e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a17      	ldr	r2, [pc, #92]	; (8006a00 <HAL_TIM_PWM_Start+0x1ec>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x19e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <HAL_TIM_PWM_Start+0x1f0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d115      	bne.n	80069de <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <HAL_TIM_PWM_Start+0x208>)
 80069ba:	4013      	ands	r3, r2
 80069bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b06      	cmp	r3, #6
 80069c2:	d015      	beq.n	80069f0 <HAL_TIM_PWM_Start+0x1dc>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d011      	beq.n	80069f0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069dc:	e008      	b.n	80069f0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e000      	b.n	80069f2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40013400 	.word	0x40013400
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	00010007 	.word	0x00010007

08006a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d122      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d11b      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0202 	mvn.w	r2, #2
 8006a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa16 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006a68:	e005      	b.n	8006a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa08 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fa19 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d122      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d11b      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0204 	mvn.w	r2, #4
 8006aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9ec 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006abc:	e005      	b.n	8006aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9de 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9ef 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d122      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0208 	mvn.w	r2, #8
 8006af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2204      	movs	r2, #4
 8006afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9c2 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9b4 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f9c5 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f003 0310 	and.w	r3, r3, #16
 8006b2e:	2b10      	cmp	r3, #16
 8006b30:	d122      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0310 	and.w	r3, r3, #16
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d11b      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0210 	mvn.w	r2, #16
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f998 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f98a 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f99b 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0201 	mvn.w	r2, #1
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fb f9a4 	bl	8001eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b80      	cmp	r3, #128	; 0x80
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b80      	cmp	r3, #128	; 0x80
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fe26 	bl	800781c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bde:	d10e      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d107      	bne.n	8006bfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fe19 	bl	8007830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d10e      	bne.n	8006c2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d107      	bne.n	8006c2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f949 	bl	8006ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d10e      	bne.n	8006c56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d107      	bne.n	8006c56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f06f 0220 	mvn.w	r2, #32
 8006c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fdd9 	bl	8007808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e0fd      	b.n	8006e76 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b14      	cmp	r3, #20
 8006c86:	f200 80f0 	bhi.w	8006e6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006e6b 	.word	0x08006e6b
 8006c98:	08006e6b 	.word	0x08006e6b
 8006c9c:	08006e6b 	.word	0x08006e6b
 8006ca0:	08006d25 	.word	0x08006d25
 8006ca4:	08006e6b 	.word	0x08006e6b
 8006ca8:	08006e6b 	.word	0x08006e6b
 8006cac:	08006e6b 	.word	0x08006e6b
 8006cb0:	08006d67 	.word	0x08006d67
 8006cb4:	08006e6b 	.word	0x08006e6b
 8006cb8:	08006e6b 	.word	0x08006e6b
 8006cbc:	08006e6b 	.word	0x08006e6b
 8006cc0:	08006da7 	.word	0x08006da7
 8006cc4:	08006e6b 	.word	0x08006e6b
 8006cc8:	08006e6b 	.word	0x08006e6b
 8006ccc:	08006e6b 	.word	0x08006e6b
 8006cd0:	08006de9 	.word	0x08006de9
 8006cd4:	08006e6b 	.word	0x08006e6b
 8006cd8:	08006e6b 	.word	0x08006e6b
 8006cdc:	08006e6b 	.word	0x08006e6b
 8006ce0:	08006e29 	.word	0x08006e29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f98a 	bl	8007004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0204 	bic.w	r2, r2, #4
 8006d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	619a      	str	r2, [r3, #24]
      break;
 8006d22:	e0a3      	b.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f9fa 	bl	8007124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6999      	ldr	r1, [r3, #24]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	021a      	lsls	r2, r3, #8
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	619a      	str	r2, [r3, #24]
      break;
 8006d64:	e082      	b.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fa63 	bl	8007238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0208 	orr.w	r2, r2, #8
 8006d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0204 	bic.w	r2, r2, #4
 8006d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	61da      	str	r2, [r3, #28]
      break;
 8006da4:	e062      	b.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 facb 	bl	8007348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69da      	ldr	r2, [r3, #28]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69d9      	ldr	r1, [r3, #28]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	021a      	lsls	r2, r3, #8
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	61da      	str	r2, [r3, #28]
      break;
 8006de6:	e041      	b.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb14 	bl	800741c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0208 	orr.w	r2, r2, #8
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e26:	e021      	b.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fb58 	bl	80074e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	021a      	lsls	r2, r3, #8
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e68:	e000      	b.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006e6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop

08006e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a40      	ldr	r2, [pc, #256]	; (8006fe4 <TIM_Base_SetConfig+0x114>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eee:	d00f      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3d      	ldr	r2, [pc, #244]	; (8006fe8 <TIM_Base_SetConfig+0x118>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3c      	ldr	r2, [pc, #240]	; (8006fec <TIM_Base_SetConfig+0x11c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a3b      	ldr	r2, [pc, #236]	; (8006ff0 <TIM_Base_SetConfig+0x120>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a3a      	ldr	r2, [pc, #232]	; (8006ff4 <TIM_Base_SetConfig+0x124>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d108      	bne.n	8006f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2f      	ldr	r2, [pc, #188]	; (8006fe4 <TIM_Base_SetConfig+0x114>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d01f      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f30:	d01b      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2c      	ldr	r2, [pc, #176]	; (8006fe8 <TIM_Base_SetConfig+0x118>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d017      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2b      	ldr	r2, [pc, #172]	; (8006fec <TIM_Base_SetConfig+0x11c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d013      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2a      	ldr	r2, [pc, #168]	; (8006ff0 <TIM_Base_SetConfig+0x120>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00f      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a29      	ldr	r2, [pc, #164]	; (8006ff4 <TIM_Base_SetConfig+0x124>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00b      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a28      	ldr	r2, [pc, #160]	; (8006ff8 <TIM_Base_SetConfig+0x128>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d007      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <TIM_Base_SetConfig+0x12c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d003      	beq.n	8006f6a <TIM_Base_SetConfig+0x9a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a26      	ldr	r2, [pc, #152]	; (8007000 <TIM_Base_SetConfig+0x130>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d108      	bne.n	8006f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a10      	ldr	r2, [pc, #64]	; (8006fe4 <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00f      	beq.n	8006fc8 <TIM_Base_SetConfig+0xf8>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <TIM_Base_SetConfig+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00b      	beq.n	8006fc8 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a11      	ldr	r2, [pc, #68]	; (8006ff8 <TIM_Base_SetConfig+0x128>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d007      	beq.n	8006fc8 <TIM_Base_SetConfig+0xf8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <TIM_Base_SetConfig+0x12c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_Base_SetConfig+0xf8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <TIM_Base_SetConfig+0x130>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d103      	bne.n	8006fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	615a      	str	r2, [r3, #20]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40000c00 	.word	0x40000c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800

08007004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0201 	bic.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f023 0302 	bic.w	r3, r3, #2
 8007050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <TIM_OC1_SetConfig+0x10c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00f      	beq.n	8007084 <TIM_OC1_SetConfig+0x80>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <TIM_OC1_SetConfig+0x110>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00b      	beq.n	8007084 <TIM_OC1_SetConfig+0x80>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <TIM_OC1_SetConfig+0x114>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d007      	beq.n	8007084 <TIM_OC1_SetConfig+0x80>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a29      	ldr	r2, [pc, #164]	; (800711c <TIM_OC1_SetConfig+0x118>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d003      	beq.n	8007084 <TIM_OC1_SetConfig+0x80>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a28      	ldr	r2, [pc, #160]	; (8007120 <TIM_OC1_SetConfig+0x11c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d10c      	bne.n	800709e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0308 	bic.w	r3, r3, #8
 800708a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 0304 	bic.w	r3, r3, #4
 800709c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <TIM_OC1_SetConfig+0x10c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d00f      	beq.n	80070c6 <TIM_OC1_SetConfig+0xc2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <TIM_OC1_SetConfig+0x110>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00b      	beq.n	80070c6 <TIM_OC1_SetConfig+0xc2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a19      	ldr	r2, [pc, #100]	; (8007118 <TIM_OC1_SetConfig+0x114>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d007      	beq.n	80070c6 <TIM_OC1_SetConfig+0xc2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a18      	ldr	r2, [pc, #96]	; (800711c <TIM_OC1_SetConfig+0x118>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC1_SetConfig+0xc2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a17      	ldr	r2, [pc, #92]	; (8007120 <TIM_OC1_SetConfig+0x11c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d111      	bne.n	80070ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	621a      	str	r2, [r3, #32]
}
 8007104:	bf00      	nop
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40013400 	.word	0x40013400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800

08007124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0210 	bic.w	r2, r3, #16
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800715e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	021b      	lsls	r3, r3, #8
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f023 0320 	bic.w	r3, r3, #32
 8007172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a28      	ldr	r2, [pc, #160]	; (8007224 <TIM_OC2_SetConfig+0x100>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_OC2_SetConfig+0x6c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a27      	ldr	r2, [pc, #156]	; (8007228 <TIM_OC2_SetConfig+0x104>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d10d      	bne.n	80071ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <TIM_OC2_SetConfig+0x100>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00f      	beq.n	80071d4 <TIM_OC2_SetConfig+0xb0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a1c      	ldr	r2, [pc, #112]	; (8007228 <TIM_OC2_SetConfig+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_OC2_SetConfig+0xb0>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a1b      	ldr	r2, [pc, #108]	; (800722c <TIM_OC2_SetConfig+0x108>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC2_SetConfig+0xb0>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <TIM_OC2_SetConfig+0x10c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC2_SetConfig+0xb0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a19      	ldr	r2, [pc, #100]	; (8007234 <TIM_OC2_SetConfig+0x110>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d113      	bne.n	80071fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a27      	ldr	r2, [pc, #156]	; (8007334 <TIM_OC3_SetConfig+0xfc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_OC3_SetConfig+0x6a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a26      	ldr	r2, [pc, #152]	; (8007338 <TIM_OC3_SetConfig+0x100>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d10d      	bne.n	80072be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <TIM_OC3_SetConfig+0xfc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00f      	beq.n	80072e6 <TIM_OC3_SetConfig+0xae>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <TIM_OC3_SetConfig+0x100>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_OC3_SetConfig+0xae>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1a      	ldr	r2, [pc, #104]	; (800733c <TIM_OC3_SetConfig+0x104>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <TIM_OC3_SetConfig+0xae>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a19      	ldr	r2, [pc, #100]	; (8007340 <TIM_OC3_SetConfig+0x108>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC3_SetConfig+0xae>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a18      	ldr	r2, [pc, #96]	; (8007344 <TIM_OC3_SetConfig+0x10c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d113      	bne.n	800730e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	621a      	str	r2, [r3, #32]
}
 8007328:	bf00      	nop
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40012c00 	.word	0x40012c00
 8007338:	40013400 	.word	0x40013400
 800733c:	40014000 	.word	0x40014000
 8007340:	40014400 	.word	0x40014400
 8007344:	40014800 	.word	0x40014800

08007348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	031b      	lsls	r3, r3, #12
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a18      	ldr	r2, [pc, #96]	; (8007408 <TIM_OC4_SetConfig+0xc0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00f      	beq.n	80073cc <TIM_OC4_SetConfig+0x84>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a17      	ldr	r2, [pc, #92]	; (800740c <TIM_OC4_SetConfig+0xc4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00b      	beq.n	80073cc <TIM_OC4_SetConfig+0x84>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a16      	ldr	r2, [pc, #88]	; (8007410 <TIM_OC4_SetConfig+0xc8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_OC4_SetConfig+0x84>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a15      	ldr	r2, [pc, #84]	; (8007414 <TIM_OC4_SetConfig+0xcc>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC4_SetConfig+0x84>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a14      	ldr	r2, [pc, #80]	; (8007418 <TIM_OC4_SetConfig+0xd0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d109      	bne.n	80073e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	019b      	lsls	r3, r3, #6
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40012c00 	.word	0x40012c00
 800740c:	40013400 	.word	0x40013400
 8007410:	40014000 	.word	0x40014000
 8007414:	40014400 	.word	0x40014400
 8007418:	40014800 	.word	0x40014800

0800741c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <TIM_OC5_SetConfig+0xb4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00f      	beq.n	8007496 <TIM_OC5_SetConfig+0x7a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <TIM_OC5_SetConfig+0xb8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d00b      	beq.n	8007496 <TIM_OC5_SetConfig+0x7a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a15      	ldr	r2, [pc, #84]	; (80074d8 <TIM_OC5_SetConfig+0xbc>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d007      	beq.n	8007496 <TIM_OC5_SetConfig+0x7a>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <TIM_OC5_SetConfig+0xc0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d003      	beq.n	8007496 <TIM_OC5_SetConfig+0x7a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <TIM_OC5_SetConfig+0xc4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d109      	bne.n	80074aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800749c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	621a      	str	r2, [r3, #32]
}
 80074c4:	bf00      	nop
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40013400 	.word	0x40013400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800

080074e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800752a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	051b      	lsls	r3, r3, #20
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a18      	ldr	r2, [pc, #96]	; (800759c <TIM_OC6_SetConfig+0xb8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_OC6_SetConfig+0x7c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a17      	ldr	r2, [pc, #92]	; (80075a0 <TIM_OC6_SetConfig+0xbc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_OC6_SetConfig+0x7c>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <TIM_OC6_SetConfig+0xc0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_OC6_SetConfig+0x7c>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <TIM_OC6_SetConfig+0xc4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC6_SetConfig+0x7c>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a14      	ldr	r2, [pc, #80]	; (80075ac <TIM_OC6_SetConfig+0xc8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d109      	bne.n	8007574 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	029b      	lsls	r3, r3, #10
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40012c00 	.word	0x40012c00
 80075a0:	40013400 	.word	0x40013400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40014400 	.word	0x40014400
 80075ac:	40014800 	.word	0x40014800

080075b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2201      	movs	r2, #1
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1a      	ldr	r2, [r3, #32]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1a      	ldr	r2, [r3, #32]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	fa01 f303 	lsl.w	r3, r1, r3
 80075e8:	431a      	orrs	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	621a      	str	r2, [r3, #32]
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e068      	b.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a2e      	ldr	r2, [pc, #184]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800764e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d01d      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d018      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d013      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1a      	ldr	r2, [pc, #104]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d00e      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a18      	ldr	r2, [pc, #96]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a14      	ldr	r2, [pc, #80]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d10c      	bne.n	80076d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40012c00 	.word	0x40012c00
 80076f8:	40013400 	.word	0x40013400
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40014000 	.word	0x40014000

0800770c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007724:	2302      	movs	r3, #2
 8007726:	e065      	b.n	80077f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a16      	ldr	r2, [pc, #88]	; (8007800 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a14      	ldr	r2, [pc, #80]	; (8007804 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d115      	bne.n	80077e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	051b      	lsls	r3, r3, #20
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40013400 	.word	0x40013400

08007808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e040      	b.n	80078d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fa feb2 	bl	80025d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	; 0x24
 8007870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8c0 	bl	8007a08 <UART_SetConfig>
 8007888:	4603      	mov	r3, r0
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e022      	b.n	80078d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fb3e 	bl	8007f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fbc5 	bl	8008060 <UART_CheckIdleState>
 80078d6:	4603      	mov	r3, r0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	f040 8082 	bne.w	80079fe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_UART_Transmit+0x26>
 8007900:	88fb      	ldrh	r3, [r7, #6]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e07a      	b.n	8007a00 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_UART_Transmit+0x38>
 8007914:	2302      	movs	r3, #2
 8007916:	e073      	b.n	8007a00 <HAL_UART_Transmit+0x120>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2221      	movs	r2, #33	; 0x21
 800792c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800792e:	f7fb f85d 	bl	80029ec <HAL_GetTick>
 8007932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794c:	d108      	bne.n	8007960 <HAL_UART_Transmit+0x80>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007956:	2300      	movs	r3, #0
 8007958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e003      	b.n	8007968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007970:	e02d      	b.n	80079ce <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	2180      	movs	r1, #128	; 0x80
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fbb8 	bl	80080f2 <UART_WaitOnFlagUntilTimeout>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e039      	b.n	8007a00 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799e:	b292      	uxth	r2, r2
 80079a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	3302      	adds	r3, #2
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e008      	b.n	80079bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	781a      	ldrb	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	b292      	uxth	r2, r2
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1cb      	bne.n	8007972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2140      	movs	r1, #64	; 0x40
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 fb84 	bl	80080f2 <UART_WaitOnFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e005      	b.n	8007a00 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2220      	movs	r2, #32
 80079f8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a08:	b5b0      	push	{r4, r5, r7, lr}
 8007a0a:	b088      	sub	sp, #32
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4bad      	ldr	r3, [pc, #692]	; (8007ce8 <UART_SetConfig+0x2e0>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	69f9      	ldr	r1, [r7, #28]
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4aa2      	ldr	r2, [pc, #648]	; (8007cec <UART_SetConfig+0x2e4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d004      	beq.n	8007a70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a99      	ldr	r2, [pc, #612]	; (8007cf0 <UART_SetConfig+0x2e8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d121      	bne.n	8007ad2 <UART_SetConfig+0xca>
 8007a8e:	4b99      	ldr	r3, [pc, #612]	; (8007cf4 <UART_SetConfig+0x2ec>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d817      	bhi.n	8007acc <UART_SetConfig+0xc4>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x9c>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007abb 	.word	0x08007abb
 8007ab0:	08007ac7 	.word	0x08007ac7
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	76fb      	strb	r3, [r7, #27]
 8007ab8:	e0e7      	b.n	8007c8a <UART_SetConfig+0x282>
 8007aba:	2302      	movs	r3, #2
 8007abc:	76fb      	strb	r3, [r7, #27]
 8007abe:	e0e4      	b.n	8007c8a <UART_SetConfig+0x282>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	76fb      	strb	r3, [r7, #27]
 8007ac4:	e0e1      	b.n	8007c8a <UART_SetConfig+0x282>
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	76fb      	strb	r3, [r7, #27]
 8007aca:	e0de      	b.n	8007c8a <UART_SetConfig+0x282>
 8007acc:	2310      	movs	r3, #16
 8007ace:	76fb      	strb	r3, [r7, #27]
 8007ad0:	e0db      	b.n	8007c8a <UART_SetConfig+0x282>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a88      	ldr	r2, [pc, #544]	; (8007cf8 <UART_SetConfig+0x2f0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d132      	bne.n	8007b42 <UART_SetConfig+0x13a>
 8007adc:	4b85      	ldr	r3, [pc, #532]	; (8007cf4 <UART_SetConfig+0x2ec>)
 8007ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae2:	f003 030c 	and.w	r3, r3, #12
 8007ae6:	2b0c      	cmp	r3, #12
 8007ae8:	d828      	bhi.n	8007b3c <UART_SetConfig+0x134>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <UART_SetConfig+0xe8>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b25 	.word	0x08007b25
 8007af4:	08007b3d 	.word	0x08007b3d
 8007af8:	08007b3d 	.word	0x08007b3d
 8007afc:	08007b3d 	.word	0x08007b3d
 8007b00:	08007b31 	.word	0x08007b31
 8007b04:	08007b3d 	.word	0x08007b3d
 8007b08:	08007b3d 	.word	0x08007b3d
 8007b0c:	08007b3d 	.word	0x08007b3d
 8007b10:	08007b2b 	.word	0x08007b2b
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b37 	.word	0x08007b37
 8007b24:	2300      	movs	r3, #0
 8007b26:	76fb      	strb	r3, [r7, #27]
 8007b28:	e0af      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	76fb      	strb	r3, [r7, #27]
 8007b2e:	e0ac      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b30:	2304      	movs	r3, #4
 8007b32:	76fb      	strb	r3, [r7, #27]
 8007b34:	e0a9      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b36:	2308      	movs	r3, #8
 8007b38:	76fb      	strb	r3, [r7, #27]
 8007b3a:	e0a6      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	76fb      	strb	r3, [r7, #27]
 8007b40:	e0a3      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a6d      	ldr	r2, [pc, #436]	; (8007cfc <UART_SetConfig+0x2f4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d120      	bne.n	8007b8e <UART_SetConfig+0x186>
 8007b4c:	4b69      	ldr	r3, [pc, #420]	; (8007cf4 <UART_SetConfig+0x2ec>)
 8007b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b56:	2b30      	cmp	r3, #48	; 0x30
 8007b58:	d013      	beq.n	8007b82 <UART_SetConfig+0x17a>
 8007b5a:	2b30      	cmp	r3, #48	; 0x30
 8007b5c:	d814      	bhi.n	8007b88 <UART_SetConfig+0x180>
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d009      	beq.n	8007b76 <UART_SetConfig+0x16e>
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d810      	bhi.n	8007b88 <UART_SetConfig+0x180>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <UART_SetConfig+0x168>
 8007b6a:	2b10      	cmp	r3, #16
 8007b6c:	d006      	beq.n	8007b7c <UART_SetConfig+0x174>
 8007b6e:	e00b      	b.n	8007b88 <UART_SetConfig+0x180>
 8007b70:	2300      	movs	r3, #0
 8007b72:	76fb      	strb	r3, [r7, #27]
 8007b74:	e089      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b76:	2302      	movs	r3, #2
 8007b78:	76fb      	strb	r3, [r7, #27]
 8007b7a:	e086      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b7c:	2304      	movs	r3, #4
 8007b7e:	76fb      	strb	r3, [r7, #27]
 8007b80:	e083      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b82:	2308      	movs	r3, #8
 8007b84:	76fb      	strb	r3, [r7, #27]
 8007b86:	e080      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b88:	2310      	movs	r3, #16
 8007b8a:	76fb      	strb	r3, [r7, #27]
 8007b8c:	e07d      	b.n	8007c8a <UART_SetConfig+0x282>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a5b      	ldr	r2, [pc, #364]	; (8007d00 <UART_SetConfig+0x2f8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d120      	bne.n	8007bda <UART_SetConfig+0x1d2>
 8007b98:	4b56      	ldr	r3, [pc, #344]	; (8007cf4 <UART_SetConfig+0x2ec>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ba4:	d013      	beq.n	8007bce <UART_SetConfig+0x1c6>
 8007ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ba8:	d814      	bhi.n	8007bd4 <UART_SetConfig+0x1cc>
 8007baa:	2b80      	cmp	r3, #128	; 0x80
 8007bac:	d009      	beq.n	8007bc2 <UART_SetConfig+0x1ba>
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d810      	bhi.n	8007bd4 <UART_SetConfig+0x1cc>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <UART_SetConfig+0x1b4>
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d006      	beq.n	8007bc8 <UART_SetConfig+0x1c0>
 8007bba:	e00b      	b.n	8007bd4 <UART_SetConfig+0x1cc>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	76fb      	strb	r3, [r7, #27]
 8007bc0:	e063      	b.n	8007c8a <UART_SetConfig+0x282>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	76fb      	strb	r3, [r7, #27]
 8007bc6:	e060      	b.n	8007c8a <UART_SetConfig+0x282>
 8007bc8:	2304      	movs	r3, #4
 8007bca:	76fb      	strb	r3, [r7, #27]
 8007bcc:	e05d      	b.n	8007c8a <UART_SetConfig+0x282>
 8007bce:	2308      	movs	r3, #8
 8007bd0:	76fb      	strb	r3, [r7, #27]
 8007bd2:	e05a      	b.n	8007c8a <UART_SetConfig+0x282>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	76fb      	strb	r3, [r7, #27]
 8007bd8:	e057      	b.n	8007c8a <UART_SetConfig+0x282>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a49      	ldr	r2, [pc, #292]	; (8007d04 <UART_SetConfig+0x2fc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d125      	bne.n	8007c30 <UART_SetConfig+0x228>
 8007be4:	4b43      	ldr	r3, [pc, #268]	; (8007cf4 <UART_SetConfig+0x2ec>)
 8007be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf2:	d017      	beq.n	8007c24 <UART_SetConfig+0x21c>
 8007bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf8:	d817      	bhi.n	8007c2a <UART_SetConfig+0x222>
 8007bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bfe:	d00b      	beq.n	8007c18 <UART_SetConfig+0x210>
 8007c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c04:	d811      	bhi.n	8007c2a <UART_SetConfig+0x222>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <UART_SetConfig+0x20a>
 8007c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0e:	d006      	beq.n	8007c1e <UART_SetConfig+0x216>
 8007c10:	e00b      	b.n	8007c2a <UART_SetConfig+0x222>
 8007c12:	2300      	movs	r3, #0
 8007c14:	76fb      	strb	r3, [r7, #27]
 8007c16:	e038      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	76fb      	strb	r3, [r7, #27]
 8007c1c:	e035      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c1e:	2304      	movs	r3, #4
 8007c20:	76fb      	strb	r3, [r7, #27]
 8007c22:	e032      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c24:	2308      	movs	r3, #8
 8007c26:	76fb      	strb	r3, [r7, #27]
 8007c28:	e02f      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c2a:	2310      	movs	r3, #16
 8007c2c:	76fb      	strb	r3, [r7, #27]
 8007c2e:	e02c      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2d      	ldr	r2, [pc, #180]	; (8007cec <UART_SetConfig+0x2e4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d125      	bne.n	8007c86 <UART_SetConfig+0x27e>
 8007c3a:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <UART_SetConfig+0x2ec>)
 8007c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c48:	d017      	beq.n	8007c7a <UART_SetConfig+0x272>
 8007c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c4e:	d817      	bhi.n	8007c80 <UART_SetConfig+0x278>
 8007c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c54:	d00b      	beq.n	8007c6e <UART_SetConfig+0x266>
 8007c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c5a:	d811      	bhi.n	8007c80 <UART_SetConfig+0x278>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <UART_SetConfig+0x260>
 8007c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c64:	d006      	beq.n	8007c74 <UART_SetConfig+0x26c>
 8007c66:	e00b      	b.n	8007c80 <UART_SetConfig+0x278>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	76fb      	strb	r3, [r7, #27]
 8007c6c:	e00d      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	76fb      	strb	r3, [r7, #27]
 8007c72:	e00a      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c74:	2304      	movs	r3, #4
 8007c76:	76fb      	strb	r3, [r7, #27]
 8007c78:	e007      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	76fb      	strb	r3, [r7, #27]
 8007c7e:	e004      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c80:	2310      	movs	r3, #16
 8007c82:	76fb      	strb	r3, [r7, #27]
 8007c84:	e001      	b.n	8007c8a <UART_SetConfig+0x282>
 8007c86:	2310      	movs	r3, #16
 8007c88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a17      	ldr	r2, [pc, #92]	; (8007cec <UART_SetConfig+0x2e4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	f040 8087 	bne.w	8007da4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c96:	7efb      	ldrb	r3, [r7, #27]
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d837      	bhi.n	8007d0c <UART_SetConfig+0x304>
 8007c9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <UART_SetConfig+0x29c>)
 8007c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca2:	bf00      	nop
 8007ca4:	08007cc9 	.word	0x08007cc9
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007cd7 	.word	0x08007cd7
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007d0d 	.word	0x08007d0d
 8007cc4:	08007cdf 	.word	0x08007cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc8:	f7fd f97c 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007ccc:	6178      	str	r0, [r7, #20]
        break;
 8007cce:	e022      	b.n	8007d16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <UART_SetConfig+0x300>)
 8007cd2:	617b      	str	r3, [r7, #20]
        break;
 8007cd4:	e01f      	b.n	8007d16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd6:	f7fd f8dd 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8007cda:	6178      	str	r0, [r7, #20]
        break;
 8007cdc:	e01b      	b.n	8007d16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ce2:	617b      	str	r3, [r7, #20]
        break;
 8007ce4:	e017      	b.n	8007d16 <UART_SetConfig+0x30e>
 8007ce6:	bf00      	nop
 8007ce8:	efff69f3 	.word	0xefff69f3
 8007cec:	40008000 	.word	0x40008000
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	40004400 	.word	0x40004400
 8007cfc:	40004800 	.word	0x40004800
 8007d00:	40004c00 	.word	0x40004c00
 8007d04:	40005000 	.word	0x40005000
 8007d08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	76bb      	strb	r3, [r7, #26]
        break;
 8007d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80f1 	beq.w	8007f00 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4413      	add	r3, r2
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d305      	bcc.n	8007d3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d902      	bls.n	8007d40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	76bb      	strb	r3, [r7, #26]
 8007d3e:	e0df      	b.n	8007f00 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f04f 0100 	mov.w	r1, #0
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	020b      	lsls	r3, r1, #8
 8007d52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d56:	0202      	lsls	r2, r0, #8
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	6849      	ldr	r1, [r1, #4]
 8007d5c:	0849      	lsrs	r1, r1, #1
 8007d5e:	4608      	mov	r0, r1
 8007d60:	f04f 0100 	mov.w	r1, #0
 8007d64:	1814      	adds	r4, r2, r0
 8007d66:	eb43 0501 	adc.w	r5, r3, r1
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fea0 	bl	8000abc <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4613      	mov	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d8a:	d308      	bcc.n	8007d9e <UART_SetConfig+0x396>
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d92:	d204      	bcs.n	8007d9e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	60da      	str	r2, [r3, #12]
 8007d9c:	e0b0      	b.n	8007f00 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	76bb      	strb	r3, [r7, #26]
 8007da2:	e0ad      	b.n	8007f00 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dac:	d15c      	bne.n	8007e68 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007dae:	7efb      	ldrb	r3, [r7, #27]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d828      	bhi.n	8007e06 <UART_SetConfig+0x3fe>
 8007db4:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <UART_SetConfig+0x3b4>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007de1 	.word	0x08007de1
 8007dc0:	08007de9 	.word	0x08007de9
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	08007e07 	.word	0x08007e07
 8007dcc:	08007df7 	.word	0x08007df7
 8007dd0:	08007e07 	.word	0x08007e07
 8007dd4:	08007e07 	.word	0x08007e07
 8007dd8:	08007e07 	.word	0x08007e07
 8007ddc:	08007dff 	.word	0x08007dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007de0:	f7fd f8f0 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007de4:	6178      	str	r0, [r7, #20]
        break;
 8007de6:	e013      	b.n	8007e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de8:	f7fd f902 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
 8007dec:	6178      	str	r0, [r7, #20]
        break;
 8007dee:	e00f      	b.n	8007e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007df0:	4b49      	ldr	r3, [pc, #292]	; (8007f18 <UART_SetConfig+0x510>)
 8007df2:	617b      	str	r3, [r7, #20]
        break;
 8007df4:	e00c      	b.n	8007e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007df6:	f7fd f84d 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8007dfa:	6178      	str	r0, [r7, #20]
        break;
 8007dfc:	e008      	b.n	8007e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e02:	617b      	str	r3, [r7, #20]
        break;
 8007e04:	e004      	b.n	8007e10 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	76bb      	strb	r3, [r7, #26]
        break;
 8007e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d074      	beq.n	8007f00 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	005a      	lsls	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	085b      	lsrs	r3, r3, #1
 8007e20:	441a      	add	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	2b0f      	cmp	r3, #15
 8007e32:	d916      	bls.n	8007e62 <UART_SetConfig+0x45a>
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3a:	d212      	bcs.n	8007e62 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f023 030f 	bic.w	r3, r3, #15
 8007e44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	085b      	lsrs	r3, r3, #1
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	89fb      	ldrh	r3, [r7, #14]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	89fa      	ldrh	r2, [r7, #14]
 8007e5e:	60da      	str	r2, [r3, #12]
 8007e60:	e04e      	b.n	8007f00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	76bb      	strb	r3, [r7, #26]
 8007e66:	e04b      	b.n	8007f00 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e68:	7efb      	ldrb	r3, [r7, #27]
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d827      	bhi.n	8007ebe <UART_SetConfig+0x4b6>
 8007e6e:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <UART_SetConfig+0x46c>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e99 	.word	0x08007e99
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007ea9 	.word	0x08007ea9
 8007e80:	08007ebf 	.word	0x08007ebf
 8007e84:	08007eaf 	.word	0x08007eaf
 8007e88:	08007ebf 	.word	0x08007ebf
 8007e8c:	08007ebf 	.word	0x08007ebf
 8007e90:	08007ebf 	.word	0x08007ebf
 8007e94:	08007eb7 	.word	0x08007eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e98:	f7fd f894 	bl	8004fc4 <HAL_RCC_GetPCLK1Freq>
 8007e9c:	6178      	str	r0, [r7, #20]
        break;
 8007e9e:	e013      	b.n	8007ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea0:	f7fd f8a6 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
 8007ea4:	6178      	str	r0, [r7, #20]
        break;
 8007ea6:	e00f      	b.n	8007ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <UART_SetConfig+0x510>)
 8007eaa:	617b      	str	r3, [r7, #20]
        break;
 8007eac:	e00c      	b.n	8007ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fc fff1 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8007eb2:	6178      	str	r0, [r7, #20]
        break;
 8007eb4:	e008      	b.n	8007ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eba:	617b      	str	r3, [r7, #20]
        break;
 8007ebc:	e004      	b.n	8007ec8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	76bb      	strb	r3, [r7, #26]
        break;
 8007ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d018      	beq.n	8007f00 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	085a      	lsrs	r2, r3, #1
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	441a      	add	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d908      	bls.n	8007efc <UART_SetConfig+0x4f4>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef0:	d204      	bcs.n	8007efc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	e001      	b.n	8007f00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007f0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3720      	adds	r7, #32
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bdb0      	pop	{r4, r5, r7, pc}
 8007f16:	bf00      	nop
 8007f18:	00f42400 	.word	0x00f42400

08007f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	f003 0308 	and.w	r3, r3, #8
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00a      	beq.n	8007fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01a      	beq.n	8008032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801a:	d10a      	bne.n	8008032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af02      	add	r7, sp, #8
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008070:	f7fa fcbc 	bl	80029ec <HAL_GetTick>
 8008074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0308 	and.w	r3, r3, #8
 8008080:	2b08      	cmp	r3, #8
 8008082:	d10e      	bne.n	80080a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f82d 	bl	80080f2 <UART_WaitOnFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e023      	b.n	80080ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0304 	and.w	r3, r3, #4
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d10e      	bne.n	80080ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f817 	bl	80080f2 <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e00d      	b.n	80080ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	603b      	str	r3, [r7, #0]
 80080fe:	4613      	mov	r3, r2
 8008100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008102:	e05e      	b.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800810a:	d05a      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800810c:	f7fa fc6e 	bl	80029ec <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	429a      	cmp	r2, r3
 800811a:	d302      	bcc.n	8008122 <UART_WaitOnFlagUntilTimeout+0x30>
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d11b      	bne.n	800815a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008130:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0201 	bic.w	r2, r2, #1
 8008140:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2220      	movs	r2, #32
 800814c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e043      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d02c      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008176:	d124      	bne.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008180:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008190:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0201 	bic.w	r2, r2, #1
 80081a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2220      	movs	r2, #32
 80081a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2220      	movs	r2, #32
 80081ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e00f      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69da      	ldr	r2, [r3, #28]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	4013      	ands	r3, r2
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	bf0c      	ite	eq
 80081d2:	2301      	moveq	r3, #1
 80081d4:	2300      	movne	r3, #0
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d091      	beq.n	8008104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80081f0:	4904      	ldr	r1, [pc, #16]	; (8008204 <MX_FATFS_Init+0x18>)
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <MX_FATFS_Init+0x1c>)
 80081f4:	f002 ff6c 	bl	800b0d0 <FATFS_LinkDriver>
 80081f8:	4603      	mov	r3, r0
 80081fa:	461a      	mov	r2, r3
 80081fc:	4b03      	ldr	r3, [pc, #12]	; (800820c <MX_FATFS_Init+0x20>)
 80081fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}
 8008204:	2000e440 	.word	0x2000e440
 8008208:	20000010 	.word	0x20000010
 800820c:	2000e444 	.word	0x2000e444

08008210 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008214:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008216:	4618      	mov	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_initialize (pdrv);
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	4618      	mov	r0, r3
 800822e:	f7f8 ff75 	bl	800111c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8008232:	bf00      	nop
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
		SD_disk_status (pdrv);
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	4618      	mov	r0, r3
 800824a:	f7f9 f84d 	bl	80012e8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800824e:	bf00      	nop
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
		SD_disk_read (pdrv, buff, sector, count);
 8008268:	7bf8      	ldrb	r0, [r7, #15]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	f7f9 f850 	bl	8001314 <SD_disk_read>
  /* USER CODE END READ */
}
 8008274:	bf00      	nop
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
		SD_disk_write (pdrv, buff, sector, count);
 800828e:	7bf8      	ldrb	r0, [r7, #15]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	f7f9 f8a7 	bl	80013e8 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800829a:	bf00      	nop
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	4603      	mov	r3, r0
 80082ac:	603a      	str	r2, [r7, #0]
 80082ae:	71fb      	strb	r3, [r7, #7]
 80082b0:	460b      	mov	r3, r1
 80082b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
		SD_disk_ioctl (pdrv, cmd, buff);
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	79b9      	ldrb	r1, [r7, #6]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7f9 f918 	bl	80014f0 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80082c0:	bf00      	nop
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	4a08      	ldr	r2, [pc, #32]	; (80082fc <disk_status+0x30>)
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	79fa      	ldrb	r2, [r7, #7]
 80082e4:	4905      	ldr	r1, [pc, #20]	; (80082fc <disk_status+0x30>)
 80082e6:	440a      	add	r2, r1
 80082e8:	7a12      	ldrb	r2, [r2, #8]
 80082ea:	4610      	mov	r0, r2
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200000dc 	.word	0x200000dc

08008300 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <disk_initialize+0x48>)
 8008312:	5cd3      	ldrb	r3, [r2, r3]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d111      	bne.n	800833c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	4a0b      	ldr	r2, [pc, #44]	; (8008348 <disk_initialize+0x48>)
 800831c:	2101      	movs	r1, #1
 800831e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	4a09      	ldr	r2, [pc, #36]	; (8008348 <disk_initialize+0x48>)
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	4906      	ldr	r1, [pc, #24]	; (8008348 <disk_initialize+0x48>)
 8008330:	440a      	add	r2, r1
 8008332:	7a12      	ldrb	r2, [r2, #8]
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	4603      	mov	r3, r0
 800833a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200000dc 	.word	0x200000dc

0800834c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	603b      	str	r3, [r7, #0]
 8008358:	4603      	mov	r3, r0
 800835a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800835c:	7bfb      	ldrb	r3, [r7, #15]
 800835e:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <disk_read+0x3c>)
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	689c      	ldr	r4, [r3, #8]
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	4a07      	ldr	r2, [pc, #28]	; (8008388 <disk_read+0x3c>)
 800836c:	4413      	add	r3, r2
 800836e:	7a18      	ldrb	r0, [r3, #8]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	47a0      	blx	r4
 8008378:	4603      	mov	r3, r0
 800837a:	75fb      	strb	r3, [r7, #23]
  return res;
 800837c:	7dfb      	ldrb	r3, [r7, #23]
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd90      	pop	{r4, r7, pc}
 8008386:	bf00      	nop
 8008388:	200000dc 	.word	0x200000dc

0800838c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	607a      	str	r2, [r7, #4]
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	4a0a      	ldr	r2, [pc, #40]	; (80083c8 <disk_write+0x3c>)
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	68dc      	ldr	r4, [r3, #12]
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <disk_write+0x3c>)
 80083ac:	4413      	add	r3, r2
 80083ae:	7a18      	ldrb	r0, [r3, #8]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	47a0      	blx	r4
 80083b8:	4603      	mov	r3, r0
 80083ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200000dc 	.word	0x200000dc

080083cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	603a      	str	r2, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
 80083d8:	460b      	mov	r3, r1
 80083da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <disk_ioctl+0x38>)
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	79fa      	ldrb	r2, [r7, #7]
 80083ea:	4906      	ldr	r1, [pc, #24]	; (8008404 <disk_ioctl+0x38>)
 80083ec:	440a      	add	r2, r1
 80083ee:	7a10      	ldrb	r0, [r2, #8]
 80083f0:	79b9      	ldrb	r1, [r7, #6]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	200000dc 	.word	0x200000dc

08008408 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3301      	adds	r3, #1
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008418:	89fb      	ldrh	r3, [r7, #14]
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	b21a      	sxth	r2, r3
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b21b      	sxth	r3, r3
 8008424:	4313      	orrs	r3, r2
 8008426:	b21b      	sxth	r3, r3
 8008428:	81fb      	strh	r3, [r7, #14]
	return rv;
 800842a:	89fb      	ldrh	r3, [r7, #14]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3303      	adds	r3, #3
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	3202      	adds	r2, #2
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	3201      	adds	r2, #1
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008470:	68fb      	ldr	r3, [r7, #12]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	887a      	ldrh	r2, [r7, #2]
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	887b      	ldrh	r3, [r7, #2]
 8008498:	0a1b      	lsrs	r3, r3, #8
 800849a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	607a      	str	r2, [r7, #4]
 80084a2:	887a      	ldrh	r2, [r7, #2]
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	1c5a      	adds	r2, r3, #1
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	701a      	strb	r2, [r3, #0]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	0a1b      	lsrs	r3, r3, #8
 80084ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	607a      	str	r2, [r7, #4]
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	0a1b      	lsrs	r3, r3, #8
 80084e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	607a      	str	r2, [r7, #4]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	701a      	strb	r2, [r3, #0]
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	1c53      	adds	r3, r2, #1
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	6179      	str	r1, [r7, #20]
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3b01      	subs	r3, #1
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f1      	bne.n	8008526 <mem_cpy+0x1a>
	}
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800854e:	b480      	push	{r7}
 8008550:	b087      	sub	sp, #28
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	617a      	str	r2, [r7, #20]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f3      	bne.n	800855e <mem_set+0x10>
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	371c      	adds	r7, #28
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008584:	b480      	push	{r7}
 8008586:	b089      	sub	sp, #36	; 0x24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	61fa      	str	r2, [r7, #28]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	4619      	mov	r1, r3
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	61ba      	str	r2, [r7, #24]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	1acb      	subs	r3, r1, r3
 80085b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <mem_cmp+0x40>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0eb      	beq.n	800859c <mem_cmp+0x18>

	return r;
 80085c4:	697b      	ldr	r3, [r7, #20]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3724      	adds	r7, #36	; 0x24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085dc:	e002      	b.n	80085e4 <chk_chr+0x12>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3301      	adds	r3, #1
 80085e2:	607b      	str	r3, [r7, #4]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <chk_chr+0x26>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d1f2      	bne.n	80085de <chk_chr+0xc>
	return *str;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	781b      	ldrb	r3, [r3, #0]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <lock_fs+0x22>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	4618      	mov	r0, r3
 800861c:	f002 fe55 	bl	800b2ca <ff_req_grant>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <lock_fs+0x22>
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <lock_fs+0x24>
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00d      	beq.n	8008662 <unlock_fs+0x2e>
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	2b0c      	cmp	r3, #12
 800864a:	d00a      	beq.n	8008662 <unlock_fs+0x2e>
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	2b0b      	cmp	r3, #11
 8008650:	d007      	beq.n	8008662 <unlock_fs+0x2e>
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	2b0f      	cmp	r3, #15
 8008656:	d004      	beq.n	8008662 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	4618      	mov	r0, r3
 800865e:	f002 fe49 	bl	800b2f4 <ff_rel_grant>
	}
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	e029      	b.n	80086d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008680:	4a27      	ldr	r2, [pc, #156]	; (8008720 <chk_lock+0xb4>)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	4413      	add	r3, r2
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01d      	beq.n	80086ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800868e:	4a24      	ldr	r2, [pc, #144]	; (8008720 <chk_lock+0xb4>)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	4413      	add	r3, r2
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d116      	bne.n	80086ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80086a0:	4a1f      	ldr	r2, [pc, #124]	; (8008720 <chk_lock+0xb4>)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	4413      	add	r3, r2
 80086a8:	3304      	adds	r3, #4
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d10c      	bne.n	80086ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086b4:	4a1a      	ldr	r2, [pc, #104]	; (8008720 <chk_lock+0xb4>)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	4413      	add	r3, r2
 80086bc:	3308      	adds	r3, #8
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d102      	bne.n	80086ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80086c8:	e007      	b.n	80086da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80086ca:	2301      	movs	r3, #1
 80086cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3301      	adds	r3, #1
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d9d2      	bls.n	8008680 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d109      	bne.n	80086f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <chk_lock+0x80>
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d101      	bne.n	80086f0 <chk_lock+0x84>
 80086ec:	2300      	movs	r3, #0
 80086ee:	e010      	b.n	8008712 <chk_lock+0xa6>
 80086f0:	2312      	movs	r3, #18
 80086f2:	e00e      	b.n	8008712 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d108      	bne.n	800870c <chk_lock+0xa0>
 80086fa:	4a09      	ldr	r2, [pc, #36]	; (8008720 <chk_lock+0xb4>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	4413      	add	r3, r2
 8008702:	330c      	adds	r3, #12
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870a:	d101      	bne.n	8008710 <chk_lock+0xa4>
 800870c:	2310      	movs	r3, #16
 800870e:	e000      	b.n	8008712 <chk_lock+0xa6>
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	200000bc 	.word	0x200000bc

08008724 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800872a:	2300      	movs	r3, #0
 800872c:	607b      	str	r3, [r7, #4]
 800872e:	e002      	b.n	8008736 <enq_lock+0x12>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3301      	adds	r3, #1
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d806      	bhi.n	800874a <enq_lock+0x26>
 800873c:	4a09      	ldr	r2, [pc, #36]	; (8008764 <enq_lock+0x40>)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	011b      	lsls	r3, r3, #4
 8008742:	4413      	add	r3, r2
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1f2      	bne.n	8008730 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b02      	cmp	r3, #2
 800874e:	bf14      	ite	ne
 8008750:	2301      	movne	r3, #1
 8008752:	2300      	moveq	r3, #0
 8008754:	b2db      	uxtb	r3, r3
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	200000bc 	.word	0x200000bc

08008768 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	e01f      	b.n	80087b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008778:	4a41      	ldr	r2, [pc, #260]	; (8008880 <inc_lock+0x118>)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	4413      	add	r3, r2
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d113      	bne.n	80087b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800878a:	4a3d      	ldr	r2, [pc, #244]	; (8008880 <inc_lock+0x118>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	4413      	add	r3, r2
 8008792:	3304      	adds	r3, #4
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800879a:	429a      	cmp	r2, r3
 800879c:	d109      	bne.n	80087b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800879e:	4a38      	ldr	r2, [pc, #224]	; (8008880 <inc_lock+0x118>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	4413      	add	r3, r2
 80087a6:	3308      	adds	r3, #8
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d006      	beq.n	80087c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d9dc      	bls.n	8008778 <inc_lock+0x10>
 80087be:	e000      	b.n	80087c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80087c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d132      	bne.n	800882e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	e002      	b.n	80087d4 <inc_lock+0x6c>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d806      	bhi.n	80087e8 <inc_lock+0x80>
 80087da:	4a29      	ldr	r2, [pc, #164]	; (8008880 <inc_lock+0x118>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	4413      	add	r3, r2
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1f2      	bne.n	80087ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d101      	bne.n	80087f2 <inc_lock+0x8a>
 80087ee:	2300      	movs	r3, #0
 80087f0:	e040      	b.n	8008874 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4922      	ldr	r1, [pc, #136]	; (8008880 <inc_lock+0x118>)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	440b      	add	r3, r1
 80087fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689a      	ldr	r2, [r3, #8]
 8008804:	491e      	ldr	r1, [pc, #120]	; (8008880 <inc_lock+0x118>)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	440b      	add	r3, r1
 800880c:	3304      	adds	r3, #4
 800880e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695a      	ldr	r2, [r3, #20]
 8008814:	491a      	ldr	r1, [pc, #104]	; (8008880 <inc_lock+0x118>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	440b      	add	r3, r1
 800881c:	3308      	adds	r3, #8
 800881e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008820:	4a17      	ldr	r2, [pc, #92]	; (8008880 <inc_lock+0x118>)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	4413      	add	r3, r2
 8008828:	330c      	adds	r3, #12
 800882a:	2200      	movs	r2, #0
 800882c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d009      	beq.n	8008848 <inc_lock+0xe0>
 8008834:	4a12      	ldr	r2, [pc, #72]	; (8008880 <inc_lock+0x118>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	4413      	add	r3, r2
 800883c:	330c      	adds	r3, #12
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <inc_lock+0xe0>
 8008844:	2300      	movs	r3, #0
 8008846:	e015      	b.n	8008874 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d108      	bne.n	8008860 <inc_lock+0xf8>
 800884e:	4a0c      	ldr	r2, [pc, #48]	; (8008880 <inc_lock+0x118>)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	4413      	add	r3, r2
 8008856:	330c      	adds	r3, #12
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	e001      	b.n	8008864 <inc_lock+0xfc>
 8008860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008864:	4906      	ldr	r1, [pc, #24]	; (8008880 <inc_lock+0x118>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	011b      	lsls	r3, r3, #4
 800886a:	440b      	add	r3, r1
 800886c:	330c      	adds	r3, #12
 800886e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	200000bc 	.word	0x200000bc

08008884 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3b01      	subs	r3, #1
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d825      	bhi.n	80088e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008898:	4a17      	ldr	r2, [pc, #92]	; (80088f8 <dec_lock+0x74>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	4413      	add	r3, r2
 80088a0:	330c      	adds	r3, #12
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80088a6:	89fb      	ldrh	r3, [r7, #14]
 80088a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ac:	d101      	bne.n	80088b2 <dec_lock+0x2e>
 80088ae:	2300      	movs	r3, #0
 80088b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80088b2:	89fb      	ldrh	r3, [r7, #14]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <dec_lock+0x3a>
 80088b8:	89fb      	ldrh	r3, [r7, #14]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80088be:	4a0e      	ldr	r2, [pc, #56]	; (80088f8 <dec_lock+0x74>)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	4413      	add	r3, r2
 80088c6:	330c      	adds	r3, #12
 80088c8:	89fa      	ldrh	r2, [r7, #14]
 80088ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80088cc:	89fb      	ldrh	r3, [r7, #14]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d105      	bne.n	80088de <dec_lock+0x5a>
 80088d2:	4a09      	ldr	r2, [pc, #36]	; (80088f8 <dec_lock+0x74>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	4413      	add	r3, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	737b      	strb	r3, [r7, #13]
 80088e2:	e001      	b.n	80088e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80088e4:	2302      	movs	r3, #2
 80088e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80088e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	200000bc 	.word	0x200000bc

080088fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	e010      	b.n	800892c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800890a:	4a0d      	ldr	r2, [pc, #52]	; (8008940 <clear_lock+0x44>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	4413      	add	r3, r2
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	429a      	cmp	r2, r3
 8008918:	d105      	bne.n	8008926 <clear_lock+0x2a>
 800891a:	4a09      	ldr	r2, [pc, #36]	; (8008940 <clear_lock+0x44>)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	4413      	add	r3, r2
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3301      	adds	r3, #1
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d9eb      	bls.n	800890a <clear_lock+0xe>
	}
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	200000bc 	.word	0x200000bc

08008944 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d034      	beq.n	80089c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7858      	ldrb	r0, [r3, #1]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008968:	2301      	movs	r3, #1
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	f7ff fd0e 	bl	800838c <disk_write>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008976:	2301      	movs	r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
 800897a:	e022      	b.n	80089c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	1ad2      	subs	r2, r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	429a      	cmp	r2, r3
 8008990:	d217      	bcs.n	80089c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	789b      	ldrb	r3, [r3, #2]
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	e010      	b.n	80089bc <sync_window+0x78>
					wsect += fs->fsize;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4413      	add	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7858      	ldrb	r0, [r3, #1]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80089ae:	2301      	movs	r3, #1
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	f7ff fceb 	bl	800838c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	613b      	str	r3, [r7, #16]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d8eb      	bhi.n	800899a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d01b      	beq.n	8008a1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff ffad 	bl	8008944 <sync_window>
 80089ea:	4603      	mov	r3, r0
 80089ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d113      	bne.n	8008a1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7858      	ldrb	r0, [r3, #1]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80089fe:	2301      	movs	r3, #1
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	f7ff fca3 	bl	800834c <disk_read>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff ff87 	bl	8008944 <sync_window>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d159      	bne.n	8008af4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d149      	bne.n	8008adc <sync_fs+0xb4>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	791b      	ldrb	r3, [r3, #4]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d145      	bne.n	8008adc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	899b      	ldrh	r3, [r3, #12]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	f7ff fd76 	bl	800854e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	333c      	adds	r3, #60	; 0x3c
 8008a66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a6a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fd05 	bl	800847e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	333c      	adds	r3, #60	; 0x3c
 8008a78:	4921      	ldr	r1, [pc, #132]	; (8008b00 <sync_fs+0xd8>)
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fd1a 	bl	80084b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	333c      	adds	r3, #60	; 0x3c
 8008a84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a88:	491e      	ldr	r1, [pc, #120]	; (8008b04 <sync_fs+0xdc>)
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fd12 	bl	80084b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	333c      	adds	r3, #60	; 0x3c
 8008a94:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f7ff fd08 	bl	80084b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	333c      	adds	r3, #60	; 0x3c
 8008aa8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7ff fcfe 	bl	80084b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7858      	ldrb	r0, [r3, #1]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f7ff fc5b 	bl	800838c <disk_write>
			fs->fsi_flag = 0;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fc71 	bl	80083cc <disk_ioctl>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <sync_fs+0xcc>
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	41615252 	.word	0x41615252
 8008b04:	61417272 	.word	0x61417272

08008b08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	3b02      	subs	r3, #2
 8008b16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	3b02      	subs	r3, #2
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d301      	bcc.n	8008b28 <clust2sect+0x20>
 8008b24:	2300      	movs	r3, #0
 8008b26:	e008      	b.n	8008b3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	895b      	ldrh	r3, [r3, #10]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	fb03 f202 	mul.w	r2, r3, r2
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b38:	4413      	add	r3, r2
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d904      	bls.n	8008b66 <get_fat+0x20>
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d302      	bcc.n	8008b6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b66:	2301      	movs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
 8008b6a:	e0bb      	b.n	8008ce4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	f000 8083 	beq.w	8008c82 <get_fat+0x13c>
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	f300 80a7 	bgt.w	8008cd0 <get_fat+0x18a>
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d002      	beq.n	8008b8c <get_fat+0x46>
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d056      	beq.n	8008c38 <get_fat+0xf2>
 8008b8a:	e0a1      	b.n	8008cd0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	085b      	lsrs	r3, r3, #1
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	899b      	ldrh	r3, [r3, #12]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008baa:	4413      	add	r3, r2
 8008bac:	4619      	mov	r1, r3
 8008bae:	6938      	ldr	r0, [r7, #16]
 8008bb0:	f7ff ff0c 	bl	80089cc <move_window>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 808d 	bne.w	8008cd6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	60fa      	str	r2, [r7, #12]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	8992      	ldrh	r2, [r2, #12]
 8008bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bca:	fb02 f201 	mul.w	r2, r2, r1
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bd8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	899b      	ldrh	r3, [r3, #12]
 8008be2:	4619      	mov	r1, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bea:	4413      	add	r3, r2
 8008bec:	4619      	mov	r1, r3
 8008bee:	6938      	ldr	r0, [r7, #16]
 8008bf0:	f7ff feec 	bl	80089cc <move_window>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d16f      	bne.n	8008cda <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	899b      	ldrh	r3, [r3, #12]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c06:	fb02 f201 	mul.w	r2, r2, r1
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c14:	021b      	lsls	r3, r3, #8
 8008c16:	461a      	mov	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <get_fat+0xe8>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	091b      	lsrs	r3, r3, #4
 8008c2c:	e002      	b.n	8008c34 <get_fat+0xee>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c34:	617b      	str	r3, [r7, #20]
			break;
 8008c36:	e055      	b.n	8008ce4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	899b      	ldrh	r3, [r3, #12]
 8008c40:	085b      	lsrs	r3, r3, #1
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4619      	mov	r1, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c4c:	4413      	add	r3, r2
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6938      	ldr	r0, [r7, #16]
 8008c52:	f7ff febb 	bl	80089cc <move_window>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d140      	bne.n	8008cde <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	8992      	ldrh	r2, [r2, #12]
 8008c6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c6e:	fb02 f200 	mul.w	r2, r2, r0
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	440b      	add	r3, r1
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7ff fbc6 	bl	8008408 <ld_word>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	617b      	str	r3, [r7, #20]
			break;
 8008c80:	e030      	b.n	8008ce4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	899b      	ldrh	r3, [r3, #12]
 8008c8a:	089b      	lsrs	r3, r3, #2
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c96:	4413      	add	r3, r2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6938      	ldr	r0, [r7, #16]
 8008c9c:	f7ff fe96 	bl	80089cc <move_window>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d11d      	bne.n	8008ce2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	8992      	ldrh	r2, [r2, #12]
 8008cb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cb8:	fb02 f200 	mul.w	r2, r2, r0
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fbb9 	bl	8008438 <ld_dword>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ccc:	617b      	str	r3, [r7, #20]
			break;
 8008cce:	e009      	b.n	8008ce4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	e006      	b.n	8008ce4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cd6:	bf00      	nop
 8008cd8:	e004      	b.n	8008ce4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cda:	bf00      	nop
 8008cdc:	e002      	b.n	8008ce4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ce2:	bf00      	nop
		}
	}

	return val;
 8008ce4:	697b      	ldr	r3, [r7, #20]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008cee:	b590      	push	{r4, r7, lr}
 8008cf0:	b089      	sub	sp, #36	; 0x24
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	f240 8102 	bls.w	8008f0a <put_fat+0x21c>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	f080 80fc 	bcs.w	8008f0a <put_fat+0x21c>
		switch (fs->fs_type) {
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	f000 80b6 	beq.w	8008e88 <put_fat+0x19a>
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	f300 80fd 	bgt.w	8008f1c <put_fat+0x22e>
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d003      	beq.n	8008d2e <put_fat+0x40>
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f000 8083 	beq.w	8008e32 <put_fat+0x144>
 8008d2c:	e0f6      	b.n	8008f1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	61bb      	str	r3, [r7, #24]
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	4413      	add	r3, r2
 8008d3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	899b      	ldrh	r3, [r3, #12]
 8008d44:	4619      	mov	r1, r3
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fe3b 	bl	80089cc <move_window>
 8008d56:	4603      	mov	r3, r0
 8008d58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d5a:	7ffb      	ldrb	r3, [r7, #31]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f040 80d6 	bne.w	8008f0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	61ba      	str	r2, [r7, #24]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	8992      	ldrh	r2, [r2, #12]
 8008d72:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d76:	fb02 f200 	mul.w	r2, r2, r0
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00d      	beq.n	8008da6 <put_fat+0xb8>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b25b      	sxtb	r3, r3
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	b25a      	sxtb	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	b25b      	sxtb	r3, r3
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	e001      	b.n	8008daa <put_fat+0xbc>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2201      	movs	r2, #1
 8008db2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	899b      	ldrh	r3, [r3, #12]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dc4:	4413      	add	r3, r2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fdff 	bl	80089cc <move_window>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dd2:	7ffb      	ldrb	r3, [r7, #31]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 809c 	bne.w	8008f12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	899b      	ldrh	r3, [r3, #12]
 8008de4:	461a      	mov	r2, r3
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dec:	fb02 f200 	mul.w	r2, r2, r0
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	440b      	add	r3, r1
 8008df4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <put_fat+0x11a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	091b      	lsrs	r3, r3, #4
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	e00e      	b.n	8008e26 <put_fat+0x138>
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	b25b      	sxtb	r3, r3
 8008e0e:	f023 030f 	bic.w	r3, r3, #15
 8008e12:	b25a      	sxtb	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	0a1b      	lsrs	r3, r3, #8
 8008e18:	b25b      	sxtb	r3, r3
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	b25b      	sxtb	r3, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b25b      	sxtb	r3, r3
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	70da      	strb	r2, [r3, #3]
			break;
 8008e30:	e074      	b.n	8008f1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	899b      	ldrh	r3, [r3, #12]
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e46:	4413      	add	r3, r2
 8008e48:	4619      	mov	r1, r3
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f7ff fdbe 	bl	80089cc <move_window>
 8008e50:	4603      	mov	r3, r0
 8008e52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e54:	7ffb      	ldrb	r3, [r7, #31]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d15d      	bne.n	8008f16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	8992      	ldrh	r2, [r2, #12]
 8008e68:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e6c:	fb02 f200 	mul.w	r2, r2, r0
 8008e70:	1a9b      	subs	r3, r3, r2
 8008e72:	440b      	add	r3, r1
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	b292      	uxth	r2, r2
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff faff 	bl	800847e <st_word>
			fs->wflag = 1;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	70da      	strb	r2, [r3, #3]
			break;
 8008e86:	e049      	b.n	8008f1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	899b      	ldrh	r3, [r3, #12]
 8008e90:	089b      	lsrs	r3, r3, #2
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4619      	mov	r1, r3
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fd93 	bl	80089cc <move_window>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008eaa:	7ffb      	ldrb	r3, [r7, #31]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d134      	bne.n	8008f1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	8992      	ldrh	r2, [r2, #12]
 8008ec4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ec8:	fb02 f200 	mul.w	r2, r2, r0
 8008ecc:	1a9b      	subs	r3, r3, r2
 8008ece:	440b      	add	r3, r1
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7ff fab1 	bl	8008438 <ld_dword>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008edc:	4323      	orrs	r3, r4
 8008ede:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	8992      	ldrh	r2, [r2, #12]
 8008eee:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ef2:	fb02 f200 	mul.w	r2, r2, r0
 8008ef6:	1a9b      	subs	r3, r3, r2
 8008ef8:	440b      	add	r3, r1
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7ff fad9 	bl	80084b4 <st_dword>
			fs->wflag = 1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	70da      	strb	r2, [r3, #3]
			break;
 8008f08:	e008      	b.n	8008f1c <put_fat+0x22e>
		}
	}
 8008f0a:	bf00      	nop
 8008f0c:	e006      	b.n	8008f1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008f1a:	bf00      	nop
	return res;
 8008f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3724      	adds	r7, #36	; 0x24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd90      	pop	{r4, r7, pc}

08008f26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b088      	sub	sp, #32
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d904      	bls.n	8008f4c <remove_chain+0x26>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d301      	bcc.n	8008f50 <remove_chain+0x2a>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e04b      	b.n	8008fe8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00c      	beq.n	8008f70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	69b8      	ldr	r0, [r7, #24]
 8008f5e:	f7ff fec6 	bl	8008cee <put_fat>
 8008f62:	4603      	mov	r3, r0
 8008f64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008f66:	7ffb      	ldrb	r3, [r7, #31]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <remove_chain+0x4a>
 8008f6c:	7ffb      	ldrb	r3, [r7, #31]
 8008f6e:	e03b      	b.n	8008fe8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008f70:	68b9      	ldr	r1, [r7, #8]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f7ff fde7 	bl	8008b46 <get_fat>
 8008f78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d031      	beq.n	8008fe4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <remove_chain+0x64>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e02e      	b.n	8008fe8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f90:	d101      	bne.n	8008f96 <remove_chain+0x70>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e028      	b.n	8008fe8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008f96:	2200      	movs	r2, #0
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	69b8      	ldr	r0, [r7, #24]
 8008f9c:	f7ff fea7 	bl	8008cee <put_fat>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008fa4:	7ffb      	ldrb	r3, [r7, #31]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <remove_chain+0x88>
 8008faa:	7ffb      	ldrb	r3, [r7, #31]
 8008fac:	e01c      	b.n	8008fe8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	69da      	ldr	r2, [r3, #28]
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	3b02      	subs	r3, #2
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d20b      	bcs.n	8008fd4 <remove_chain+0xae>
			fs->free_clst++;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	791b      	ldrb	r3, [r3, #4]
 8008fca:	f043 0301 	orr.w	r3, r3, #1
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d3c6      	bcc.n	8008f70 <remove_chain+0x4a>
 8008fe2:	e000      	b.n	8008fe6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008fe4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10d      	bne.n	8009022 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <create_chain+0x2c>
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	429a      	cmp	r2, r3
 800901a:	d31b      	bcc.n	8009054 <create_chain+0x64>
 800901c:	2301      	movs	r3, #1
 800901e:	61bb      	str	r3, [r7, #24]
 8009020:	e018      	b.n	8009054 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff fd8e 	bl	8008b46 <get_fat>
 800902a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d801      	bhi.n	8009036 <create_chain+0x46>
 8009032:	2301      	movs	r3, #1
 8009034:	e070      	b.n	8009118 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800903c:	d101      	bne.n	8009042 <create_chain+0x52>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	e06a      	b.n	8009118 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	429a      	cmp	r2, r3
 800904a:	d201      	bcs.n	8009050 <create_chain+0x60>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	e063      	b.n	8009118 <create_chain+0x128>
		scl = clst;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	3301      	adds	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	429a      	cmp	r2, r3
 8009066:	d307      	bcc.n	8009078 <create_chain+0x88>
				ncl = 2;
 8009068:	2302      	movs	r3, #2
 800906a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	429a      	cmp	r2, r3
 8009072:	d901      	bls.n	8009078 <create_chain+0x88>
 8009074:	2300      	movs	r3, #0
 8009076:	e04f      	b.n	8009118 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009078:	69f9      	ldr	r1, [r7, #28]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fd63 	bl	8008b46 <get_fat>
 8009080:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00e      	beq.n	80090a6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d003      	beq.n	8009096 <create_chain+0xa6>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009094:	d101      	bne.n	800909a <create_chain+0xaa>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	e03e      	b.n	8009118 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800909a:	69fa      	ldr	r2, [r7, #28]
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d1da      	bne.n	8009058 <create_chain+0x68>
 80090a2:	2300      	movs	r3, #0
 80090a4:	e038      	b.n	8009118 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80090a6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80090a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090ac:	69f9      	ldr	r1, [r7, #28]
 80090ae:	6938      	ldr	r0, [r7, #16]
 80090b0:	f7ff fe1d 	bl	8008cee <put_fat>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <create_chain+0xe2>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6938      	ldr	r0, [r7, #16]
 80090ca:	f7ff fe10 	bl	8008cee <put_fat>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d116      	bne.n	8009106 <create_chain+0x116>
		fs->last_clst = ncl;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	69da      	ldr	r2, [r3, #28]
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	3b02      	subs	r3, #2
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d804      	bhi.n	80090f6 <create_chain+0x106>
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	1e5a      	subs	r2, r3, #1
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	791b      	ldrb	r3, [r3, #4]
 80090fa:	f043 0301 	orr.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	711a      	strb	r2, [r3, #4]
 8009104:	e007      	b.n	8009116 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d102      	bne.n	8009112 <create_chain+0x122>
 800910c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009110:	e000      	b.n	8009114 <create_chain+0x124>
 8009112:	2301      	movs	r3, #1
 8009114:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009116:	69fb      	ldr	r3, [r7, #28]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009120:	b480      	push	{r7}
 8009122:	b087      	sub	sp, #28
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009134:	3304      	adds	r3, #4
 8009136:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	899b      	ldrh	r3, [r3, #12]
 800913c:	461a      	mov	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	fbb3 f3f2 	udiv	r3, r3, r2
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	8952      	ldrh	r2, [r2, #10]
 8009148:	fbb3 f3f2 	udiv	r3, r3, r2
 800914c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1d1a      	adds	r2, r3, #4
 8009152:	613a      	str	r2, [r7, #16]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <clmt_clust+0x42>
 800915e:	2300      	movs	r3, #0
 8009160:	e010      	b.n	8009184 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	429a      	cmp	r2, r3
 8009168:	d307      	bcc.n	800917a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	3304      	adds	r3, #4
 8009176:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009178:	e7e9      	b.n	800914e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800917a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	4413      	add	r3, r2
}
 8009184:	4618      	mov	r0, r3
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091a6:	d204      	bcs.n	80091b2 <dir_sdi+0x22>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	f003 031f 	and.w	r3, r3, #31
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e071      	b.n	800929a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <dir_sdi+0x46>
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d902      	bls.n	80091d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10c      	bne.n	80091f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	095b      	lsrs	r3, r3, #5
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	8912      	ldrh	r2, [r2, #8]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d301      	bcc.n	80091ec <dir_sdi+0x5c>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e056      	b.n	800929a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	61da      	str	r2, [r3, #28]
 80091f4:	e02d      	b.n	8009252 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	895b      	ldrh	r3, [r3, #10]
 80091fa:	461a      	mov	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	899b      	ldrh	r3, [r3, #12]
 8009200:	fb03 f302 	mul.w	r3, r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009206:	e019      	b.n	800923c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6979      	ldr	r1, [r7, #20]
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fc9a 	bl	8008b46 <get_fat>
 8009212:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800921a:	d101      	bne.n	8009220 <dir_sdi+0x90>
 800921c:	2301      	movs	r3, #1
 800921e:	e03c      	b.n	800929a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d904      	bls.n	8009230 <dir_sdi+0xa0>
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	429a      	cmp	r2, r3
 800922e:	d301      	bcc.n	8009234 <dir_sdi+0xa4>
 8009230:	2302      	movs	r3, #2
 8009232:	e032      	b.n	800929a <dir_sdi+0x10a>
			ofs -= csz;
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	429a      	cmp	r2, r3
 8009242:	d2e1      	bcs.n	8009208 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009244:	6979      	ldr	r1, [r7, #20]
 8009246:	6938      	ldr	r0, [r7, #16]
 8009248:	f7ff fc5e 	bl	8008b08 <clust2sect>
 800924c:	4602      	mov	r2, r0
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <dir_sdi+0xd4>
 8009260:	2302      	movs	r3, #2
 8009262:	e01a      	b.n	800929a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	69da      	ldr	r2, [r3, #28]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	899b      	ldrh	r3, [r3, #12]
 800926c:	4619      	mov	r1, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	fbb3 f3f1 	udiv	r3, r3, r1
 8009274:	441a      	add	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	899b      	ldrh	r3, [r3, #12]
 8009284:	461a      	mov	r2, r3
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	fbb3 f0f2 	udiv	r0, r3, r2
 800928c:	fb02 f200 	mul.w	r2, r2, r0
 8009290:	1a9b      	subs	r3, r3, r2
 8009292:	18ca      	adds	r2, r1, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b086      	sub	sp, #24
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	3320      	adds	r3, #32
 80092b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <dir_next+0x28>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092c8:	d301      	bcc.n	80092ce <dir_next+0x2c>
 80092ca:	2304      	movs	r3, #4
 80092cc:	e0bb      	b.n	8009446 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	899b      	ldrh	r3, [r3, #12]
 80092d2:	461a      	mov	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80092da:	fb02 f201 	mul.w	r2, r2, r1
 80092de:	1a9b      	subs	r3, r3, r2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f040 809d 	bne.w	8009420 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10b      	bne.n	8009310 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	8912      	ldrh	r2, [r2, #8]
 8009300:	4293      	cmp	r3, r2
 8009302:	f0c0 808d 	bcc.w	8009420 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	61da      	str	r2, [r3, #28]
 800930c:	2304      	movs	r3, #4
 800930e:	e09a      	b.n	8009446 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	899b      	ldrh	r3, [r3, #12]
 8009314:	461a      	mov	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	fbb3 f3f2 	udiv	r3, r3, r2
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	8952      	ldrh	r2, [r2, #10]
 8009320:	3a01      	subs	r2, #1
 8009322:	4013      	ands	r3, r2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d17b      	bne.n	8009420 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	4619      	mov	r1, r3
 8009330:	4610      	mov	r0, r2
 8009332:	f7ff fc08 	bl	8008b46 <get_fat>
 8009336:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d801      	bhi.n	8009342 <dir_next+0xa0>
 800933e:	2302      	movs	r3, #2
 8009340:	e081      	b.n	8009446 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009348:	d101      	bne.n	800934e <dir_next+0xac>
 800934a:	2301      	movs	r3, #1
 800934c:	e07b      	b.n	8009446 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	429a      	cmp	r2, r3
 8009356:	d359      	bcc.n	800940c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	61da      	str	r2, [r3, #28]
 8009364:	2304      	movs	r3, #4
 8009366:	e06e      	b.n	8009446 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	4619      	mov	r1, r3
 8009370:	4610      	mov	r0, r2
 8009372:	f7ff fe3d 	bl	8008ff0 <create_chain>
 8009376:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <dir_next+0xe0>
 800937e:	2307      	movs	r3, #7
 8009380:	e061      	b.n	8009446 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <dir_next+0xea>
 8009388:	2302      	movs	r3, #2
 800938a:	e05c      	b.n	8009446 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009392:	d101      	bne.n	8009398 <dir_next+0xf6>
 8009394:	2301      	movs	r3, #1
 8009396:	e056      	b.n	8009446 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7ff fad3 	bl	8008944 <sync_window>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <dir_next+0x106>
 80093a4:	2301      	movs	r3, #1
 80093a6:	e04e      	b.n	8009446 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	899b      	ldrh	r3, [r3, #12]
 80093b2:	461a      	mov	r2, r3
 80093b4:	2100      	movs	r1, #0
 80093b6:	f7ff f8ca 	bl	800854e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093ba:	2300      	movs	r3, #0
 80093bc:	613b      	str	r3, [r7, #16]
 80093be:	6979      	ldr	r1, [r7, #20]
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff fba1 	bl	8008b08 <clust2sect>
 80093c6:	4602      	mov	r2, r0
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	639a      	str	r2, [r3, #56]	; 0x38
 80093cc:	e012      	b.n	80093f4 <dir_next+0x152>
						fs->wflag = 1;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f7ff fab5 	bl	8008944 <sync_window>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <dir_next+0x142>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e030      	b.n	8009446 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	3301      	adds	r3, #1
 80093e8:	613b      	str	r3, [r7, #16]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	895b      	ldrh	r3, [r3, #10]
 80093f8:	461a      	mov	r2, r3
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d3e6      	bcc.n	80093ce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009412:	6979      	ldr	r1, [r7, #20]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff fb77 	bl	8008b08 <clust2sect>
 800941a:	4602      	mov	r2, r0
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	899b      	ldrh	r3, [r3, #12]
 8009430:	461a      	mov	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	fbb3 f0f2 	udiv	r0, r3, r2
 8009438:	fb02 f200 	mul.w	r2, r2, r0
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	18ca      	adds	r2, r1, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b086      	sub	sp, #24
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800945e:	2100      	movs	r1, #0
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fe95 	bl	8009190 <dir_sdi>
 8009466:	4603      	mov	r3, r0
 8009468:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d12b      	bne.n	80094c8 <dir_alloc+0x7a>
		n = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	4619      	mov	r1, r3
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff faa6 	bl	80089cc <move_window>
 8009480:	4603      	mov	r3, r0
 8009482:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d11d      	bne.n	80094c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2be5      	cmp	r3, #229	; 0xe5
 8009492:	d004      	beq.n	800949e <dir_alloc+0x50>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d107      	bne.n	80094ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	3301      	adds	r3, #1
 80094a2:	613b      	str	r3, [r7, #16]
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d102      	bne.n	80094b2 <dir_alloc+0x64>
 80094ac:	e00c      	b.n	80094c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80094b2:	2101      	movs	r1, #1
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff fef4 	bl	80092a2 <dir_next>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0d7      	beq.n	8009474 <dir_alloc+0x26>
 80094c4:	e000      	b.n	80094c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80094c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d101      	bne.n	80094d2 <dir_alloc+0x84>
 80094ce:	2307      	movs	r3, #7
 80094d0:	75fb      	strb	r3, [r7, #23]
	return res;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	331a      	adds	r3, #26
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe ff8c 	bl	8008408 <ld_word>
 80094f0:	4603      	mov	r3, r0
 80094f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d109      	bne.n	8009510 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe ff81 	bl	8008408 <ld_word>
 8009506:	4603      	mov	r3, r0
 8009508:	041b      	lsls	r3, r3, #16
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	4313      	orrs	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009510:	68fb      	ldr	r3, [r7, #12]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	331a      	adds	r3, #26
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	b292      	uxth	r2, r2
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe ffa4 	bl	800847e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b03      	cmp	r3, #3
 800953c:	d109      	bne.n	8009552 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f103 0214 	add.w	r2, r3, #20
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	0c1b      	lsrs	r3, r3, #16
 8009548:	b29b      	uxth	r3, r3
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe ff96 	bl	800847e <st_word>
	}
}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	331a      	adds	r3, #26
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe ff4c 	bl	8008408 <ld_word>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <cmp_lfn+0x1e>
 8009576:	2300      	movs	r3, #0
 8009578:	e059      	b.n	800962e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009582:	1e5a      	subs	r2, r3, #1
 8009584:	4613      	mov	r3, r2
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009590:	2301      	movs	r3, #1
 8009592:	81fb      	strh	r3, [r7, #14]
 8009594:	2300      	movs	r3, #0
 8009596:	613b      	str	r3, [r7, #16]
 8009598:	e033      	b.n	8009602 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800959a:	4a27      	ldr	r2, [pc, #156]	; (8009638 <cmp_lfn+0xdc>)
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	4413      	add	r3, r2
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	4413      	add	r3, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe ff2d 	bl	8008408 <ld_word>
 80095ae:	4603      	mov	r3, r0
 80095b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80095b2:	89fb      	ldrh	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d01a      	beq.n	80095ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2bfe      	cmp	r3, #254	; 0xfe
 80095bc:	d812      	bhi.n	80095e4 <cmp_lfn+0x88>
 80095be:	89bb      	ldrh	r3, [r7, #12]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 fdd1 	bl	800b168 <ff_wtoupper>
 80095c6:	4603      	mov	r3, r0
 80095c8:	461c      	mov	r4, r3
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	617a      	str	r2, [r7, #20]
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	4413      	add	r3, r2
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 fdc5 	bl	800b168 <ff_wtoupper>
 80095de:	4603      	mov	r3, r0
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d001      	beq.n	80095e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80095e4:	2300      	movs	r3, #0
 80095e6:	e022      	b.n	800962e <cmp_lfn+0xd2>
			}
			wc = uc;
 80095e8:	89bb      	ldrh	r3, [r7, #12]
 80095ea:	81fb      	strh	r3, [r7, #14]
 80095ec:	e006      	b.n	80095fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80095ee:	89bb      	ldrh	r3, [r7, #12]
 80095f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d001      	beq.n	80095fc <cmp_lfn+0xa0>
 80095f8:	2300      	movs	r3, #0
 80095fa:	e018      	b.n	800962e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3301      	adds	r3, #1
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b0c      	cmp	r3, #12
 8009606:	d9c8      	bls.n	800959a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <cmp_lfn+0xd0>
 8009614:	89fb      	ldrh	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <cmp_lfn+0xd0>
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	4413      	add	r3, r2
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <cmp_lfn+0xd0>
 8009628:	2300      	movs	r3, #0
 800962a:	e000      	b.n	800962e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800962c:	2301      	movs	r3, #1
}
 800962e:	4618      	mov	r0, r3
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	bd90      	pop	{r4, r7, pc}
 8009636:	bf00      	nop
 8009638:	08010630 	.word	0x08010630

0800963c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4611      	mov	r1, r2
 8009648:	461a      	mov	r2, r3
 800964a:	460b      	mov	r3, r1
 800964c:	71fb      	strb	r3, [r7, #7]
 800964e:	4613      	mov	r3, r2
 8009650:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	330d      	adds	r3, #13
 8009656:	79ba      	ldrb	r2, [r7, #6]
 8009658:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	330b      	adds	r3, #11
 800965e:	220f      	movs	r2, #15
 8009660:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	330c      	adds	r3, #12
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	331a      	adds	r3, #26
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f7fe ff04 	bl	800847e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	1e5a      	subs	r2, r3, #1
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	82fb      	strh	r3, [r7, #22]
 800968a:	2300      	movs	r3, #0
 800968c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800968e:	8afb      	ldrh	r3, [r7, #22]
 8009690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <put_lfn+0x6c>
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	61fa      	str	r2, [r7, #28]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80096a8:	4a17      	ldr	r2, [pc, #92]	; (8009708 <put_lfn+0xcc>)
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4413      	add	r3, r2
 80096b6:	8afa      	ldrh	r2, [r7, #22]
 80096b8:	4611      	mov	r1, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fedf 	bl	800847e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80096c0:	8afb      	ldrh	r3, [r7, #22]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <put_lfn+0x90>
 80096c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	2b0c      	cmp	r3, #12
 80096d6:	d9da      	bls.n	800968e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80096d8:	8afb      	ldrh	r3, [r7, #22]
 80096da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096de:	4293      	cmp	r3, r2
 80096e0:	d006      	beq.n	80096f0 <put_lfn+0xb4>
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	005b      	lsls	r3, r3, #1
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d103      	bne.n	80096f8 <put_lfn+0xbc>
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	79fa      	ldrb	r2, [r7, #7]
 80096fc:	701a      	strb	r2, [r3, #0]
}
 80096fe:	bf00      	nop
 8009700:	3720      	adds	r7, #32
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	08010630 	.word	0x08010630

0800970c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08c      	sub	sp, #48	; 0x30
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800971a:	220b      	movs	r2, #11
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7fe fef4 	bl	800850c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b05      	cmp	r3, #5
 8009728:	d92b      	bls.n	8009782 <gen_numname+0x76>
		sr = seq;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800972e:	e022      	b.n	8009776 <gen_numname+0x6a>
			wc = *lfn++;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	1c9a      	adds	r2, r3, #2
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800973a:	2300      	movs	r3, #0
 800973c:	62bb      	str	r3, [r7, #40]	; 0x28
 800973e:	e017      	b.n	8009770 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	005a      	lsls	r2, r3, #1
 8009744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800974e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d005      	beq.n	800976a <gen_numname+0x5e>
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009764:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009768:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	3301      	adds	r3, #1
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d9e4      	bls.n	8009740 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1d8      	bne.n	8009730 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009782:	2307      	movs	r3, #7
 8009784:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	b2db      	uxtb	r3, r3
 8009790:	3330      	adds	r3, #48	; 0x30
 8009792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800979a:	2b39      	cmp	r3, #57	; 0x39
 800979c:	d904      	bls.n	80097a8 <gen_numname+0x9c>
 800979e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097a2:	3307      	adds	r3, #7
 80097a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	1e5a      	subs	r2, r3, #1
 80097ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80097ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80097b2:	4413      	add	r3, r2
 80097b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80097b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	091b      	lsrs	r3, r3, #4
 80097c0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1de      	bne.n	8009786 <gen_numname+0x7a>
	ns[i] = '~';
 80097c8:	f107 0214 	add.w	r2, r7, #20
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	4413      	add	r3, r2
 80097d0:	227e      	movs	r2, #126	; 0x7e
 80097d2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80097d4:	2300      	movs	r3, #0
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
 80097d8:	e002      	b.n	80097e0 <gen_numname+0xd4>
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	3301      	adds	r3, #1
 80097de:	627b      	str	r3, [r7, #36]	; 0x24
 80097e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d205      	bcs.n	80097f4 <gen_numname+0xe8>
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	4413      	add	r3, r2
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2b20      	cmp	r3, #32
 80097f2:	d1f2      	bne.n	80097da <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	2b07      	cmp	r3, #7
 80097f8:	d808      	bhi.n	800980c <gen_numname+0x100>
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8009800:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009804:	4413      	add	r3, r2
 8009806:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800980a:	e000      	b.n	800980e <gen_numname+0x102>
 800980c:	2120      	movs	r1, #32
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	627a      	str	r2, [r7, #36]	; 0x24
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	460a      	mov	r2, r1
 800981a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	2b07      	cmp	r3, #7
 8009820:	d9e8      	bls.n	80097f4 <gen_numname+0xe8>
}
 8009822:	bf00      	nop
 8009824:	bf00      	nop
 8009826:	3730      	adds	r7, #48	; 0x30
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009838:	230b      	movs	r3, #11
 800983a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	b2da      	uxtb	r2, r3
 8009840:	0852      	lsrs	r2, r2, #1
 8009842:	01db      	lsls	r3, r3, #7
 8009844:	4313      	orrs	r3, r2
 8009846:	b2da      	uxtb	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	1c59      	adds	r1, r3, #1
 800984c:	6079      	str	r1, [r7, #4]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	4413      	add	r3, r2
 8009852:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	3b01      	subs	r3, #1
 8009858:	60bb      	str	r3, [r7, #8]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ed      	bne.n	800983c <sum_sfn+0x10>
	return sum;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800987c:	2100      	movs	r1, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7ff fc86 	bl	8009190 <dir_sdi>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <dir_find+0x24>
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	e0a9      	b.n	80099e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009892:	23ff      	movs	r3, #255	; 0xff
 8009894:	753b      	strb	r3, [r7, #20]
 8009896:	7d3b      	ldrb	r3, [r7, #20]
 8009898:	757b      	strb	r3, [r7, #21]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6938      	ldr	r0, [r7, #16]
 80098aa:	f7ff f88f 	bl	80089cc <move_window>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f040 8090 	bne.w	80099da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d102      	bne.n	80098ce <dir_find+0x60>
 80098c8:	2304      	movs	r3, #4
 80098ca:	75fb      	strb	r3, [r7, #23]
 80098cc:	e08a      	b.n	80099e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	330b      	adds	r3, #11
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7bfa      	ldrb	r2, [r7, #15]
 80098e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80098e2:	7dbb      	ldrb	r3, [r7, #22]
 80098e4:	2be5      	cmp	r3, #229	; 0xe5
 80098e6:	d007      	beq.n	80098f8 <dir_find+0x8a>
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <dir_find+0x98>
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
 80098f4:	2b0f      	cmp	r3, #15
 80098f6:	d006      	beq.n	8009906 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80098f8:	23ff      	movs	r3, #255	; 0xff
 80098fa:	757b      	strb	r3, [r7, #21]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009902:	631a      	str	r2, [r3, #48]	; 0x30
 8009904:	e05e      	b.n	80099c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	2b0f      	cmp	r3, #15
 800990a:	d136      	bne.n	800997a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	d154      	bne.n	80099c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800991a:	7dbb      	ldrb	r3, [r7, #22]
 800991c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00d      	beq.n	8009940 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	7b5b      	ldrb	r3, [r3, #13]
 800992a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800992c:	7dbb      	ldrb	r3, [r7, #22]
 800992e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009932:	75bb      	strb	r3, [r7, #22]
 8009934:	7dbb      	ldrb	r3, [r7, #22]
 8009936:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	695a      	ldr	r2, [r3, #20]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009940:	7dba      	ldrb	r2, [r7, #22]
 8009942:	7d7b      	ldrb	r3, [r7, #21]
 8009944:	429a      	cmp	r2, r3
 8009946:	d115      	bne.n	8009974 <dir_find+0x106>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a1b      	ldr	r3, [r3, #32]
 800994c:	330d      	adds	r3, #13
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	7d3a      	ldrb	r2, [r7, #20]
 8009952:	429a      	cmp	r2, r3
 8009954:	d10e      	bne.n	8009974 <dir_find+0x106>
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	691a      	ldr	r2, [r3, #16]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f7ff fdfb 	bl	800955c <cmp_lfn>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <dir_find+0x106>
 800996c:	7d7b      	ldrb	r3, [r7, #21]
 800996e:	3b01      	subs	r3, #1
 8009970:	b2db      	uxtb	r3, r3
 8009972:	e000      	b.n	8009976 <dir_find+0x108>
 8009974:	23ff      	movs	r3, #255	; 0xff
 8009976:	757b      	strb	r3, [r7, #21]
 8009978:	e024      	b.n	80099c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800997a:	7d7b      	ldrb	r3, [r7, #21]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d109      	bne.n	8009994 <dir_find+0x126>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff ff51 	bl	800982c <sum_sfn>
 800998a:	4603      	mov	r3, r0
 800998c:	461a      	mov	r2, r3
 800998e:	7d3b      	ldrb	r3, [r7, #20]
 8009990:	4293      	cmp	r3, r2
 8009992:	d024      	beq.n	80099de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10a      	bne.n	80099b8 <dir_find+0x14a>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a18      	ldr	r0, [r3, #32]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3324      	adds	r3, #36	; 0x24
 80099aa:	220b      	movs	r2, #11
 80099ac:	4619      	mov	r1, r3
 80099ae:	f7fe fde9 	bl	8008584 <mem_cmp>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d014      	beq.n	80099e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80099b8:	23ff      	movs	r3, #255	; 0xff
 80099ba:	757b      	strb	r3, [r7, #21]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80099c4:	2100      	movs	r1, #0
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7ff fc6b 	bl	80092a2 <dir_next>
 80099cc:	4603      	mov	r3, r0
 80099ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80099d0:	7dfb      	ldrb	r3, [r7, #23]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f43f af65 	beq.w	80098a2 <dir_find+0x34>
 80099d8:	e004      	b.n	80099e4 <dir_find+0x176>
		if (res != FR_OK) break;
 80099da:	bf00      	nop
 80099dc:	e002      	b.n	80099e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80099e2:	bf00      	nop

	return res;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08c      	sub	sp, #48	; 0x30
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <dir_register+0x20>
 8009a0c:	2306      	movs	r3, #6
 8009a0e:	e0e0      	b.n	8009bd2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009a10:	2300      	movs	r3, #0
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
 8009a14:	e002      	b.n	8009a1c <dir_register+0x2c>
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	3301      	adds	r3, #1
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f4      	bne.n	8009a16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009a32:	f107 030c 	add.w	r3, r7, #12
 8009a36:	220c      	movs	r2, #12
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe fd67 	bl	800850c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d032      	beq.n	8009aae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2240      	movs	r2, #64	; 0x40
 8009a4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009a50:	2301      	movs	r3, #1
 8009a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a54:	e016      	b.n	8009a84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	691a      	ldr	r2, [r3, #16]
 8009a60:	f107 010c 	add.w	r1, r7, #12
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f7ff fe51 	bl	800970c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff feff 	bl	800986e <dir_find>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	3301      	adds	r3, #1
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	2b63      	cmp	r3, #99	; 0x63
 8009a88:	d9e5      	bls.n	8009a56 <dir_register+0x66>
 8009a8a:	e000      	b.n	8009a8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8009a8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	2b64      	cmp	r3, #100	; 0x64
 8009a92:	d101      	bne.n	8009a98 <dir_register+0xa8>
 8009a94:	2307      	movs	r3, #7
 8009a96:	e09c      	b.n	8009bd2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	d002      	beq.n	8009aa6 <dir_register+0xb6>
 8009aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	e095      	b.n	8009bd2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009aa6:	7dfa      	ldrb	r2, [r7, #23]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d007      	beq.n	8009ac8 <dir_register+0xd8>
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	330c      	adds	r3, #12
 8009abc:	4a47      	ldr	r2, [pc, #284]	; (8009bdc <dir_register+0x1ec>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	089b      	lsrs	r3, r3, #2
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	e000      	b.n	8009aca <dir_register+0xda>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009acc:	6a39      	ldr	r1, [r7, #32]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff fcbd 	bl	800944e <dir_alloc>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d148      	bne.n	8009b74 <dir_register+0x184>
 8009ae2:	6a3b      	ldr	r3, [r7, #32]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	623b      	str	r3, [r7, #32]
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d042      	beq.n	8009b74 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	695a      	ldr	r2, [r3, #20]
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	015b      	lsls	r3, r3, #5
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fb48 	bl	8009190 <dir_sdi>
 8009b00:	4603      	mov	r3, r0
 8009b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d132      	bne.n	8009b74 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	3324      	adds	r3, #36	; 0x24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fe8a 	bl	800982c <sum_sfn>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	4619      	mov	r1, r3
 8009b22:	69f8      	ldr	r0, [r7, #28]
 8009b24:	f7fe ff52 	bl	80089cc <move_window>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d11d      	bne.n	8009b72 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	6918      	ldr	r0, [r3, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a19      	ldr	r1, [r3, #32]
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	7efb      	ldrb	r3, [r7, #27]
 8009b44:	f7ff fd7a 	bl	800963c <put_lfn>
				fs->wflag = 1;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009b4e:	2100      	movs	r1, #0
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fba6 	bl	80092a2 <dir_next>
 8009b56:	4603      	mov	r3, r0
 8009b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d107      	bne.n	8009b74 <dir_register+0x184>
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	623b      	str	r3, [r7, #32]
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1d5      	bne.n	8009b1c <dir_register+0x12c>
 8009b70:	e000      	b.n	8009b74 <dir_register+0x184>
				if (res != FR_OK) break;
 8009b72:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d128      	bne.n	8009bce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	4619      	mov	r1, r3
 8009b82:	69f8      	ldr	r0, [r7, #28]
 8009b84:	f7fe ff22 	bl	80089cc <move_window>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d11b      	bne.n	8009bce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fcd5 	bl	800854e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a18      	ldr	r0, [r3, #32]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3324      	adds	r3, #36	; 0x24
 8009bac:	220b      	movs	r2, #11
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f7fe fcac 	bl	800850c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	330c      	adds	r3, #12
 8009bc0:	f002 0218 	and.w	r2, r2, #24
 8009bc4:	b2d2      	uxtb	r2, r2
 8009bc6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009bce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3730      	adds	r7, #48	; 0x30
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	4ec4ec4f 	.word	0x4ec4ec4f

08009be0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	613b      	str	r3, [r7, #16]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	61ba      	str	r2, [r7, #24]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	4413      	add	r3, r2
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c10:	2b1f      	cmp	r3, #31
 8009c12:	d940      	bls.n	8009c96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c16:	2b2f      	cmp	r3, #47	; 0x2f
 8009c18:	d006      	beq.n	8009c28 <create_name+0x48>
 8009c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c1c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c1e:	d110      	bne.n	8009c42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009c20:	e002      	b.n	8009c28 <create_name+0x48>
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	3301      	adds	r3, #1
 8009c26:	61bb      	str	r3, [r7, #24]
 8009c28:	693a      	ldr	r2, [r7, #16]
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b2f      	cmp	r3, #47	; 0x2f
 8009c32:	d0f6      	beq.n	8009c22 <create_name+0x42>
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	4413      	add	r3, r2
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c3e:	d0f0      	beq.n	8009c22 <create_name+0x42>
			break;
 8009c40:	e02a      	b.n	8009c98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2bfe      	cmp	r3, #254	; 0xfe
 8009c46:	d901      	bls.n	8009c4c <create_name+0x6c>
 8009c48:	2306      	movs	r3, #6
 8009c4a:	e177      	b.n	8009f3c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c54:	2101      	movs	r1, #1
 8009c56:	4618      	mov	r0, r3
 8009c58:	f001 fa4a 	bl	800b0f0 <ff_convert>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <create_name+0x8a>
 8009c66:	2306      	movs	r3, #6
 8009c68:	e168      	b.n	8009f3c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009c6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8009c6e:	d809      	bhi.n	8009c84 <create_name+0xa4>
 8009c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c72:	4619      	mov	r1, r3
 8009c74:	48b3      	ldr	r0, [pc, #716]	; (8009f44 <create_name+0x364>)
 8009c76:	f7fe fcac 	bl	80085d2 <chk_chr>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <create_name+0xa4>
 8009c80:	2306      	movs	r3, #6
 8009c82:	e15b      	b.n	8009f3c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	617a      	str	r2, [r7, #20]
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009c94:	e7b4      	b.n	8009c00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009c96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	441a      	add	r2, r3
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ca4:	2b1f      	cmp	r3, #31
 8009ca6:	d801      	bhi.n	8009cac <create_name+0xcc>
 8009ca8:	2304      	movs	r3, #4
 8009caa:	e000      	b.n	8009cae <create_name+0xce>
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009cb2:	e011      	b.n	8009cd8 <create_name+0xf8>
		w = lfn[di - 1];
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009cc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc8:	2b20      	cmp	r3, #32
 8009cca:	d002      	beq.n	8009cd2 <create_name+0xf2>
 8009ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cce:	2b2e      	cmp	r3, #46	; 0x2e
 8009cd0:	d106      	bne.n	8009ce0 <create_name+0x100>
		di--;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1ea      	bne.n	8009cb4 <create_name+0xd4>
 8009cde:	e000      	b.n	8009ce2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009ce0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	2200      	movs	r2, #0
 8009cec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <create_name+0x118>
 8009cf4:	2306      	movs	r3, #6
 8009cf6:	e121      	b.n	8009f3c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3324      	adds	r3, #36	; 0x24
 8009cfc:	220b      	movs	r2, #11
 8009cfe:	2120      	movs	r1, #32
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fc24 	bl	800854e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009d06:	2300      	movs	r3, #0
 8009d08:	61bb      	str	r3, [r7, #24]
 8009d0a:	e002      	b.n	8009d12 <create_name+0x132>
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	61bb      	str	r3, [r7, #24]
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d0f5      	beq.n	8009d0c <create_name+0x12c>
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	4413      	add	r3, r2
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d2c:	d0ee      	beq.n	8009d0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d009      	beq.n	8009d48 <create_name+0x168>
 8009d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d38:	f043 0303 	orr.w	r3, r3, #3
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009d40:	e002      	b.n	8009d48 <create_name+0x168>
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	617b      	str	r3, [r7, #20]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d009      	beq.n	8009d62 <create_name+0x182>
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d54:	3b01      	subs	r3, #1
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d60:	d1ef      	bne.n	8009d42 <create_name+0x162>

	i = b = 0; ni = 8;
 8009d62:	2300      	movs	r3, #0
 8009d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d68:	2300      	movs	r3, #0
 8009d6a:	623b      	str	r3, [r7, #32]
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	61ba      	str	r2, [r7, #24]
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8090 	beq.w	8009ea8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d8a:	2b20      	cmp	r3, #32
 8009d8c:	d006      	beq.n	8009d9c <create_name+0x1bc>
 8009d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d90:	2b2e      	cmp	r3, #46	; 0x2e
 8009d92:	d10a      	bne.n	8009daa <create_name+0x1ca>
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d006      	beq.n	8009daa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da0:	f043 0303 	orr.w	r3, r3, #3
 8009da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009da8:	e07d      	b.n	8009ea6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009daa:	6a3a      	ldr	r2, [r7, #32]
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d203      	bcs.n	8009dba <create_name+0x1da>
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d123      	bne.n	8009e02 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b0b      	cmp	r3, #11
 8009dbe:	d106      	bne.n	8009dce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc4:	f043 0303 	orr.w	r3, r3, #3
 8009dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dcc:	e06f      	b.n	8009eae <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d005      	beq.n	8009de2 <create_name+0x202>
 8009dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dda:	f043 0303 	orr.w	r3, r3, #3
 8009dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d860      	bhi.n	8009eac <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	2308      	movs	r3, #8
 8009df0:	623b      	str	r3, [r7, #32]
 8009df2:	230b      	movs	r3, #11
 8009df4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e00:	e051      	b.n	8009ea6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e04:	2b7f      	cmp	r3, #127	; 0x7f
 8009e06:	d914      	bls.n	8009e32 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 f96f 	bl	800b0f0 <ff_convert>
 8009e12:	4603      	mov	r3, r0
 8009e14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <create_name+0x246>
 8009e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e1e:	3b80      	subs	r3, #128	; 0x80
 8009e20:	4a49      	ldr	r2, [pc, #292]	; (8009f48 <create_name+0x368>)
 8009e22:	5cd3      	ldrb	r3, [r2, r3]
 8009e24:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e2a:	f043 0302 	orr.w	r3, r3, #2
 8009e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d007      	beq.n	8009e48 <create_name+0x268>
 8009e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4843      	ldr	r0, [pc, #268]	; (8009f4c <create_name+0x36c>)
 8009e3e:	f7fe fbc8 	bl	80085d2 <chk_chr>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d008      	beq.n	8009e5a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009e48:	235f      	movs	r3, #95	; 0x5f
 8009e4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e50:	f043 0303 	orr.w	r3, r3, #3
 8009e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e58:	e01b      	b.n	8009e92 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e5c:	2b40      	cmp	r3, #64	; 0x40
 8009e5e:	d909      	bls.n	8009e74 <create_name+0x294>
 8009e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e62:	2b5a      	cmp	r3, #90	; 0x5a
 8009e64:	d806      	bhi.n	8009e74 <create_name+0x294>
					b |= 2;
 8009e66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e6a:	f043 0302 	orr.w	r3, r3, #2
 8009e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e72:	e00e      	b.n	8009e92 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e76:	2b60      	cmp	r3, #96	; 0x60
 8009e78:	d90b      	bls.n	8009e92 <create_name+0x2b2>
 8009e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e7c:	2b7a      	cmp	r3, #122	; 0x7a
 8009e7e:	d808      	bhi.n	8009e92 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e84:	f043 0301 	orr.w	r3, r3, #1
 8009e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e8e:	3b20      	subs	r3, #32
 8009e90:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	623a      	str	r2, [r7, #32]
 8009e98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e9a:	b2d1      	uxtb	r1, r2
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	460a      	mov	r2, r1
 8009ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009ea6:	e763      	b.n	8009d70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009ea8:	bf00      	nop
 8009eaa:	e000      	b.n	8009eae <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009eac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009eb4:	2be5      	cmp	r3, #229	; 0xe5
 8009eb6:	d103      	bne.n	8009ec0 <create_name+0x2e0>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2205      	movs	r2, #5
 8009ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	2b08      	cmp	r3, #8
 8009ec4:	d104      	bne.n	8009ed0 <create_name+0x2f0>
 8009ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009ed0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ed4:	f003 030c 	and.w	r3, r3, #12
 8009ed8:	2b0c      	cmp	r3, #12
 8009eda:	d005      	beq.n	8009ee8 <create_name+0x308>
 8009edc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ee0:	f003 0303 	and.w	r3, r3, #3
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d105      	bne.n	8009ef4 <create_name+0x314>
 8009ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eec:	f043 0302 	orr.w	r3, r3, #2
 8009ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef8:	f003 0302 	and.w	r3, r3, #2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d117      	bne.n	8009f30 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009f00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f04:	f003 0303 	and.w	r3, r3, #3
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d105      	bne.n	8009f18 <create_name+0x338>
 8009f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f10:	f043 0310 	orr.w	r3, r3, #16
 8009f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f1c:	f003 030c 	and.w	r3, r3, #12
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d105      	bne.n	8009f30 <create_name+0x350>
 8009f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f28:	f043 0308 	orr.w	r3, r3, #8
 8009f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009f3a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3728      	adds	r7, #40	; 0x28
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	08010480 	.word	0x08010480
 8009f48:	080105b0 	.word	0x080105b0
 8009f4c:	0801048c 	.word	0x0801048c

08009f50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f64:	e002      	b.n	8009f6c <follow_path+0x1c>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b2f      	cmp	r3, #47	; 0x2f
 8009f72:	d0f8      	beq.n	8009f66 <follow_path+0x16>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b5c      	cmp	r3, #92	; 0x5c
 8009f7a:	d0f4      	beq.n	8009f66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b1f      	cmp	r3, #31
 8009f88:	d80a      	bhi.n	8009fa0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2280      	movs	r2, #128	; 0x80
 8009f8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f92:	2100      	movs	r1, #0
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff f8fb 	bl	8009190 <dir_sdi>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75fb      	strb	r3, [r7, #23]
 8009f9e:	e048      	b.n	800a032 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fa0:	463b      	mov	r3, r7
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7ff fe1b 	bl	8009be0 <create_name>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d139      	bne.n	800a028 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff fc5a 	bl	800986e <dir_find>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00a      	beq.n	8009fe2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d12c      	bne.n	800a02c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d127      	bne.n	800a02c <follow_path+0xdc>
 8009fdc:	2305      	movs	r3, #5
 8009fde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009fe0:	e024      	b.n	800a02c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fe2:	7afb      	ldrb	r3, [r7, #11]
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d121      	bne.n	800a030 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	799b      	ldrb	r3, [r3, #6]
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009ff8:	2305      	movs	r3, #5
 8009ffa:	75fb      	strb	r3, [r7, #23]
 8009ffc:	e019      	b.n	800a032 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	8992      	ldrh	r2, [r2, #12]
 800a00c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a010:	fb02 f200 	mul.w	r2, r2, r0
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	440b      	add	r3, r1
 800a018:	4619      	mov	r1, r3
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7ff fa5e 	bl	80094dc <ld_clust>
 800a020:	4602      	mov	r2, r0
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a026:	e7bb      	b.n	8009fa0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a028:	bf00      	nop
 800a02a:	e002      	b.n	800a032 <follow_path+0xe2>
				break;
 800a02c:	bf00      	nop
 800a02e:	e000      	b.n	800a032 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a030:	bf00      	nop
			}
		}
	}

	return res;
 800a032:	7dfb      	ldrb	r3, [r7, #23]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a048:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d031      	beq.n	800a0b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	e002      	b.n	800a060 <get_ldnumber+0x24>
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3301      	adds	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b1f      	cmp	r3, #31
 800a066:	d903      	bls.n	800a070 <get_ldnumber+0x34>
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b3a      	cmp	r3, #58	; 0x3a
 800a06e:	d1f4      	bne.n	800a05a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b3a      	cmp	r3, #58	; 0x3a
 800a076:	d11c      	bne.n	800a0b2 <get_ldnumber+0x76>
			tp = *path;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	60fa      	str	r2, [r7, #12]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	3b30      	subs	r3, #48	; 0x30
 800a088:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d80e      	bhi.n	800a0ae <get_ldnumber+0x72>
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	429a      	cmp	r2, r3
 800a096:	d10a      	bne.n	800a0ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d107      	bne.n	800a0ae <get_ldnumber+0x72>
					vol = (int)i;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	e002      	b.n	800a0b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a0b6:	693b      	ldr	r3, [r7, #16]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	371c      	adds	r7, #28
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	70da      	strb	r2, [r3, #3]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7fe fc74 	bl	80089cc <move_window>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <check_fs+0x2a>
 800a0ea:	2304      	movs	r3, #4
 800a0ec:	e038      	b.n	800a160 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	333c      	adds	r3, #60	; 0x3c
 800a0f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe f986 	bl	8008408 <ld_word>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	461a      	mov	r2, r3
 800a100:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a104:	429a      	cmp	r2, r3
 800a106:	d001      	beq.n	800a10c <check_fs+0x48>
 800a108:	2303      	movs	r3, #3
 800a10a:	e029      	b.n	800a160 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a112:	2be9      	cmp	r3, #233	; 0xe9
 800a114:	d009      	beq.n	800a12a <check_fs+0x66>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11c:	2beb      	cmp	r3, #235	; 0xeb
 800a11e:	d11e      	bne.n	800a15e <check_fs+0x9a>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a126:	2b90      	cmp	r3, #144	; 0x90
 800a128:	d119      	bne.n	800a15e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	333c      	adds	r3, #60	; 0x3c
 800a12e:	3336      	adds	r3, #54	; 0x36
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe f981 	bl	8008438 <ld_dword>
 800a136:	4603      	mov	r3, r0
 800a138:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a13c:	4a0a      	ldr	r2, [pc, #40]	; (800a168 <check_fs+0xa4>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d101      	bne.n	800a146 <check_fs+0x82>
 800a142:	2300      	movs	r3, #0
 800a144:	e00c      	b.n	800a160 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	333c      	adds	r3, #60	; 0x3c
 800a14a:	3352      	adds	r3, #82	; 0x52
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe f973 	bl	8008438 <ld_dword>
 800a152:	4603      	mov	r3, r0
 800a154:	4a05      	ldr	r2, [pc, #20]	; (800a16c <check_fs+0xa8>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d101      	bne.n	800a15e <check_fs+0x9a>
 800a15a:	2300      	movs	r3, #0
 800a15c:	e000      	b.n	800a160 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a15e:	2302      	movs	r3, #2
}
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	00544146 	.word	0x00544146
 800a16c:	33544146 	.word	0x33544146

0800a170 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b096      	sub	sp, #88	; 0x58
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4613      	mov	r3, r2
 800a17c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7ff ff59 	bl	800a03c <get_ldnumber>
 800a18a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da01      	bge.n	800a196 <find_volume+0x26>
 800a192:	230b      	movs	r3, #11
 800a194:	e26c      	b.n	800a670 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a196:	4aa4      	ldr	r2, [pc, #656]	; (800a428 <find_volume+0x2b8>)
 800a198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a19e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <find_volume+0x3a>
 800a1a6:	230c      	movs	r3, #12
 800a1a8:	e262      	b.n	800a670 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800a1aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1ac:	f7fe fa2c 	bl	8008608 <lock_fs>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <find_volume+0x4a>
 800a1b6:	230f      	movs	r3, #15
 800a1b8:	e25a      	b.n	800a670 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	f023 0301 	bic.w	r3, r3, #1
 800a1c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01a      	beq.n	800a206 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	785b      	ldrb	r3, [r3, #1]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fe f879 	bl	80082cc <disk_status>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a1e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10c      	bne.n	800a206 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d007      	beq.n	800a202 <find_volume+0x92>
 800a1f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a1fe:	230a      	movs	r3, #10
 800a200:	e236      	b.n	800a670 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800a202:	2300      	movs	r3, #0
 800a204:	e234      	b.n	800a670 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	2200      	movs	r2, #0
 800a20a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe f871 	bl	8008300 <disk_initialize>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a228:	f003 0301 	and.w	r3, r3, #1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a230:	2303      	movs	r3, #3
 800a232:	e21d      	b.n	800a670 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d007      	beq.n	800a24a <find_volume+0xda>
 800a23a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a246:	230a      	movs	r3, #10
 800a248:	e212      	b.n	800a670 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24c:	7858      	ldrb	r0, [r3, #1]
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	330c      	adds	r3, #12
 800a252:	461a      	mov	r2, r3
 800a254:	2102      	movs	r1, #2
 800a256:	f7fe f8b9 	bl	80083cc <disk_ioctl>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <find_volume+0xf4>
 800a260:	2301      	movs	r3, #1
 800a262:	e205      	b.n	800a670 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	899b      	ldrh	r3, [r3, #12]
 800a268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a26c:	d80d      	bhi.n	800a28a <find_volume+0x11a>
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	899b      	ldrh	r3, [r3, #12]
 800a272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a276:	d308      	bcc.n	800a28a <find_volume+0x11a>
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	899b      	ldrh	r3, [r3, #12]
 800a27c:	461a      	mov	r2, r3
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	899b      	ldrh	r3, [r3, #12]
 800a282:	3b01      	subs	r3, #1
 800a284:	4013      	ands	r3, r2
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <find_volume+0x11e>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e1f0      	b.n	800a670 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a292:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a296:	f7ff ff15 	bl	800a0c4 <check_fs>
 800a29a:	4603      	mov	r3, r0
 800a29c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a2a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d14b      	bne.n	800a340 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ac:	e01f      	b.n	800a2ee <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800a2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a2bc:	4413      	add	r3, r2
 800a2be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d006      	beq.n	800a2d8 <find_volume+0x168>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe f8b2 	bl	8008438 <ld_dword>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	e000      	b.n	800a2da <find_volume+0x16a>
 800a2d8:	2200      	movs	r2, #0
 800a2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a2e2:	440b      	add	r3, r1
 800a2e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d9dc      	bls.n	800a2ae <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <find_volume+0x194>
 800a2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a300:	3b01      	subs	r3, #1
 800a302:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a30c:	4413      	add	r3, r2
 800a30e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a312:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a316:	2b00      	cmp	r3, #0
 800a318:	d005      	beq.n	800a326 <find_volume+0x1b6>
 800a31a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a31c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a31e:	f7ff fed1 	bl	800a0c4 <check_fs>
 800a322:	4603      	mov	r3, r0
 800a324:	e000      	b.n	800a328 <find_volume+0x1b8>
 800a326:	2303      	movs	r3, #3
 800a328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a330:	2b01      	cmp	r3, #1
 800a332:	d905      	bls.n	800a340 <find_volume+0x1d0>
 800a334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a336:	3301      	adds	r3, #1
 800a338:	643b      	str	r3, [r7, #64]	; 0x40
 800a33a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d9e1      	bls.n	800a304 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a344:	2b04      	cmp	r3, #4
 800a346:	d101      	bne.n	800a34c <find_volume+0x1dc>
 800a348:	2301      	movs	r3, #1
 800a34a:	e191      	b.n	800a670 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a34c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a350:	2b01      	cmp	r3, #1
 800a352:	d901      	bls.n	800a358 <find_volume+0x1e8>
 800a354:	230d      	movs	r3, #13
 800a356:	e18b      	b.n	800a670 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35a:	333c      	adds	r3, #60	; 0x3c
 800a35c:	330b      	adds	r3, #11
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fe f852 	bl	8008408 <ld_word>
 800a364:	4603      	mov	r3, r0
 800a366:	461a      	mov	r2, r3
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	899b      	ldrh	r3, [r3, #12]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d001      	beq.n	800a374 <find_volume+0x204>
 800a370:	230d      	movs	r3, #13
 800a372:	e17d      	b.n	800a670 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	333c      	adds	r3, #60	; 0x3c
 800a378:	3316      	adds	r3, #22
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe f844 	bl	8008408 <ld_word>
 800a380:	4603      	mov	r3, r0
 800a382:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <find_volume+0x228>
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	333c      	adds	r3, #60	; 0x3c
 800a38e:	3324      	adds	r3, #36	; 0x24
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe f851 	bl	8008438 <ld_dword>
 800a396:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a39c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	789b      	ldrb	r3, [r3, #2]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d005      	beq.n	800a3bc <find_volume+0x24c>
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	789b      	ldrb	r3, [r3, #2]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d001      	beq.n	800a3bc <find_volume+0x24c>
 800a3b8:	230d      	movs	r3, #13
 800a3ba:	e159      	b.n	800a670 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3be:	789b      	ldrb	r3, [r3, #2]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3c4:	fb02 f303 	mul.w	r3, r2, r3
 800a3c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	895b      	ldrh	r3, [r3, #10]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d008      	beq.n	800a3f0 <find_volume+0x280>
 800a3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e0:	895b      	ldrh	r3, [r3, #10]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	895b      	ldrh	r3, [r3, #10]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <find_volume+0x284>
 800a3f0:	230d      	movs	r3, #13
 800a3f2:	e13d      	b.n	800a670 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	333c      	adds	r3, #60	; 0x3c
 800a3f8:	3311      	adds	r3, #17
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fe f804 	bl	8008408 <ld_word>
 800a400:	4603      	mov	r3, r0
 800a402:	461a      	mov	r2, r3
 800a404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a406:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	891b      	ldrh	r3, [r3, #8]
 800a40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a40e:	8992      	ldrh	r2, [r2, #12]
 800a410:	0952      	lsrs	r2, r2, #5
 800a412:	b292      	uxth	r2, r2
 800a414:	fbb3 f1f2 	udiv	r1, r3, r2
 800a418:	fb02 f201 	mul.w	r2, r2, r1
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	b29b      	uxth	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	d003      	beq.n	800a42c <find_volume+0x2bc>
 800a424:	230d      	movs	r3, #13
 800a426:	e123      	b.n	800a670 <find_volume+0x500>
 800a428:	200000b4 	.word	0x200000b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	333c      	adds	r3, #60	; 0x3c
 800a430:	3313      	adds	r3, #19
 800a432:	4618      	mov	r0, r3
 800a434:	f7fd ffe8 	bl	8008408 <ld_word>
 800a438:	4603      	mov	r3, r0
 800a43a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a43c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <find_volume+0x2e0>
 800a442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a444:	333c      	adds	r3, #60	; 0x3c
 800a446:	3320      	adds	r3, #32
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fd fff5 	bl	8008438 <ld_dword>
 800a44e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	333c      	adds	r3, #60	; 0x3c
 800a454:	330e      	adds	r3, #14
 800a456:	4618      	mov	r0, r3
 800a458:	f7fd ffd6 	bl	8008408 <ld_word>
 800a45c:	4603      	mov	r3, r0
 800a45e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a460:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <find_volume+0x2fa>
 800a466:	230d      	movs	r3, #13
 800a468:	e102      	b.n	800a670 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a46a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a46e:	4413      	add	r3, r2
 800a470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a472:	8911      	ldrh	r1, [r2, #8]
 800a474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a476:	8992      	ldrh	r2, [r2, #12]
 800a478:	0952      	lsrs	r2, r2, #5
 800a47a:	b292      	uxth	r2, r2
 800a47c:	fbb1 f2f2 	udiv	r2, r1, r2
 800a480:	b292      	uxth	r2, r2
 800a482:	4413      	add	r3, r2
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d201      	bcs.n	800a492 <find_volume+0x322>
 800a48e:	230d      	movs	r3, #13
 800a490:	e0ee      	b.n	800a670 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a49a:	8952      	ldrh	r2, [r2, #10]
 800a49c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <find_volume+0x33c>
 800a4a8:	230d      	movs	r3, #13
 800a4aa:	e0e1      	b.n	800a670 <find_volume+0x500>
		fmt = FS_FAT32;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d802      	bhi.n	800a4c2 <find_volume+0x352>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d802      	bhi.n	800a4d2 <find_volume+0x362>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	1c9a      	adds	r2, r3, #2
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a4e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4e4:	441a      	add	r2, r3
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800a4ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	441a      	add	r2, r3
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800a4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d11e      	bne.n	800a53a <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	333c      	adds	r3, #60	; 0x3c
 800a500:	332a      	adds	r3, #42	; 0x2a
 800a502:	4618      	mov	r0, r3
 800a504:	f7fd ff80 	bl	8008408 <ld_word>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <find_volume+0x3a2>
 800a50e:	230d      	movs	r3, #13
 800a510:	e0ae      	b.n	800a670 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	891b      	ldrh	r3, [r3, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <find_volume+0x3ae>
 800a51a:	230d      	movs	r3, #13
 800a51c:	e0a8      	b.n	800a670 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	333c      	adds	r3, #60	; 0x3c
 800a522:	332c      	adds	r3, #44	; 0x2c
 800a524:	4618      	mov	r0, r3
 800a526:	f7fd ff87 	bl	8008438 <ld_dword>
 800a52a:	4602      	mov	r2, r0
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	647b      	str	r3, [r7, #68]	; 0x44
 800a538:	e01f      	b.n	800a57a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	891b      	ldrh	r3, [r3, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <find_volume+0x3d6>
 800a542:	230d      	movs	r3, #13
 800a544:	e094      	b.n	800a670 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54c:	441a      	add	r2, r3
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a556:	2b02      	cmp	r3, #2
 800a558:	d103      	bne.n	800a562 <find_volume+0x3f2>
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	e00a      	b.n	800a578 <find_volume+0x408>
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	6a1a      	ldr	r2, [r3, #32]
 800a566:	4613      	mov	r3, r2
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	4413      	add	r3, r2
 800a56c:	085a      	lsrs	r2, r3, #1
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a578:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	899b      	ldrh	r3, [r3, #12]
 800a582:	4619      	mov	r1, r3
 800a584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a586:	440b      	add	r3, r1
 800a588:	3b01      	subs	r3, #1
 800a58a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a58c:	8989      	ldrh	r1, [r1, #12]
 800a58e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a592:	429a      	cmp	r2, r3
 800a594:	d201      	bcs.n	800a59a <find_volume+0x42a>
 800a596:	230d      	movs	r3, #13
 800a598:	e06a      	b.n	800a670 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5a0:	61da      	str	r2, [r3, #28]
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	69da      	ldr	r2, [r3, #28]
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ac:	2280      	movs	r2, #128	; 0x80
 800a5ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d149      	bne.n	800a64c <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	333c      	adds	r3, #60	; 0x3c
 800a5bc:	3330      	adds	r3, #48	; 0x30
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fd ff22 	bl	8008408 <ld_word>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d140      	bne.n	800a64c <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5d2:	f7fe f9fb 	bl	80089cc <move_window>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d137      	bne.n	800a64c <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	2200      	movs	r2, #0
 800a5e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	333c      	adds	r3, #60	; 0x3c
 800a5e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fd ff0c 	bl	8008408 <ld_word>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d127      	bne.n	800a64c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	333c      	adds	r3, #60	; 0x3c
 800a600:	4618      	mov	r0, r3
 800a602:	f7fd ff19 	bl	8008438 <ld_dword>
 800a606:	4603      	mov	r3, r0
 800a608:	4a1b      	ldr	r2, [pc, #108]	; (800a678 <find_volume+0x508>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d11e      	bne.n	800a64c <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	333c      	adds	r3, #60	; 0x3c
 800a612:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd ff0e 	bl	8008438 <ld_dword>
 800a61c:	4603      	mov	r3, r0
 800a61e:	4a17      	ldr	r2, [pc, #92]	; (800a67c <find_volume+0x50c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d113      	bne.n	800a64c <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	333c      	adds	r3, #60	; 0x3c
 800a628:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fd ff03 	bl	8008438 <ld_dword>
 800a632:	4602      	mov	r2, r0
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	333c      	adds	r3, #60	; 0x3c
 800a63c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a640:	4618      	mov	r0, r3
 800a642:	f7fd fef9 	bl	8008438 <ld_dword>
 800a646:	4602      	mov	r2, r0
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a652:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a654:	4b0a      	ldr	r3, [pc, #40]	; (800a680 <find_volume+0x510>)
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	3301      	adds	r3, #1
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	4b08      	ldr	r3, [pc, #32]	; (800a680 <find_volume+0x510>)
 800a65e:	801a      	strh	r2, [r3, #0]
 800a660:	4b07      	ldr	r3, [pc, #28]	; (800a680 <find_volume+0x510>)
 800a662:	881a      	ldrh	r2, [r3, #0]
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a668:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a66a:	f7fe f947 	bl	80088fc <clear_lock>
#endif
	return FR_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3758      	adds	r7, #88	; 0x58
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	41615252 	.word	0x41615252
 800a67c:	61417272 	.word	0x61417272
 800a680:	200000b8 	.word	0x200000b8

0800a684 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a68e:	2309      	movs	r3, #9
 800a690:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d02e      	beq.n	800a6f6 <validate+0x72>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d02a      	beq.n	800a6f6 <validate+0x72>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d025      	beq.n	800a6f6 <validate+0x72>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	889a      	ldrh	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	88db      	ldrh	r3, [r3, #6]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d11e      	bne.n	800a6f6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fd ffa3 	bl	8008608 <lock_fs>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d014      	beq.n	800a6f2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	785b      	ldrb	r3, [r3, #1]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd fdfc 	bl	80082cc <disk_status>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d102      	bne.n	800a6e4 <validate+0x60>
				res = FR_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73fb      	strb	r3, [r7, #15]
 800a6e2:	e008      	b.n	800a6f6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fd ffa2 	bl	8008634 <unlock_fs>
 800a6f0:	e001      	b.n	800a6f6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a6f2:	230f      	movs	r3, #15
 800a6f4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <validate+0x7e>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	e000      	b.n	800a704 <validate+0x80>
 800a702:	2300      	movs	r3, #0
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	6013      	str	r3, [r2, #0]
	return res;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4613      	mov	r3, r2
 800a720:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a726:	f107 0310 	add.w	r3, r7, #16
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff fc86 	bl	800a03c <get_ldnumber>
 800a730:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	da01      	bge.n	800a73c <f_mount+0x28>
 800a738:	230b      	movs	r3, #11
 800a73a:	e048      	b.n	800a7ce <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a73c:	4a26      	ldr	r2, [pc, #152]	; (800a7d8 <f_mount+0xc4>)
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a744:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00f      	beq.n	800a76c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a74c:	69b8      	ldr	r0, [r7, #24]
 800a74e:	f7fe f8d5 	bl	80088fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fdab 	bl	800b2b2 <ff_del_syncobj>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <f_mount+0x52>
 800a762:	2302      	movs	r3, #2
 800a764:	e033      	b.n	800a7ce <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2200      	movs	r2, #0
 800a76a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00f      	beq.n	800a792 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3314      	adds	r3, #20
 800a780:	4619      	mov	r1, r3
 800a782:	4610      	mov	r0, r2
 800a784:	f000 fd7a 	bl	800b27c <ff_cre_syncobj>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <f_mount+0x7e>
 800a78e:	2302      	movs	r3, #2
 800a790:	e01d      	b.n	800a7ce <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4910      	ldr	r1, [pc, #64]	; (800a7d8 <f_mount+0xc4>)
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <f_mount+0x94>
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d001      	beq.n	800a7ac <f_mount+0x98>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	e010      	b.n	800a7ce <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a7ac:	f107 010c 	add.w	r1, r7, #12
 800a7b0:	f107 0308 	add.w	r3, r7, #8
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff fcda 	bl	800a170 <find_volume>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	7dfa      	ldrb	r2, [r7, #23]
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fd ff34 	bl	8008634 <unlock_fs>
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3720      	adds	r7, #32
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	200000b4 	.word	0x200000b4

0800a7dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b09a      	sub	sp, #104	; 0x68
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <f_open+0x18>
 800a7f0:	2309      	movs	r3, #9
 800a7f2:	e1d7      	b.n	800aba4 <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a7fc:	79fa      	ldrb	r2, [r7, #7]
 800a7fe:	f107 0110 	add.w	r1, r7, #16
 800a802:	f107 0308 	add.w	r3, r7, #8
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fcb2 	bl	800a170 <find_volume>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a816:	2b00      	cmp	r3, #0
 800a818:	f040 81b4 	bne.w	800ab84 <f_open+0x3a8>
		dj.obj.fs = fs;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800a820:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a824:	f000 fd71 	bl	800b30a <ff_memalloc>
 800a828:	65b8      	str	r0, [r7, #88]	; 0x58
 800a82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d106      	bne.n	800a83e <f_open+0x62>
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2111      	movs	r1, #17
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd fefd 	bl	8008634 <unlock_fs>
 800a83a:	2311      	movs	r3, #17
 800a83c:	e1b2      	b.n	800aba4 <f_open+0x3c8>
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a842:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	f107 0314 	add.w	r3, r7, #20
 800a84a:	4611      	mov	r1, r2
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff fb7f 	bl	8009f50 <follow_path>
 800a852:	4603      	mov	r3, r0
 800a854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d11a      	bne.n	800a896 <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a860:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a864:	b25b      	sxtb	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	da03      	bge.n	800a872 <f_open+0x96>
				res = FR_INVALID_NAME;
 800a86a:	2306      	movs	r3, #6
 800a86c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a870:	e011      	b.n	800a896 <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	f023 0301 	bic.w	r3, r3, #1
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bf14      	ite	ne
 800a87c:	2301      	movne	r3, #1
 800a87e:	2300      	moveq	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	f107 0314 	add.w	r3, r7, #20
 800a888:	4611      	mov	r1, r2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fd feee 	bl	800866c <chk_lock>
 800a890:	4603      	mov	r3, r0
 800a892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	f003 031c 	and.w	r3, r3, #28
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d07f      	beq.n	800a9a0 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 800a8a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d017      	beq.n	800a8d8 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d10e      	bne.n	800a8ce <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a8b0:	f7fd ff38 	bl	8008724 <enq_lock>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d006      	beq.n	800a8c8 <f_open+0xec>
 800a8ba:	f107 0314 	add.w	r3, r7, #20
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff f896 	bl	80099f0 <dir_register>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	e000      	b.n	800a8ca <f_open+0xee>
 800a8c8:	2312      	movs	r3, #18
 800a8ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	f043 0308 	orr.w	r3, r3, #8
 800a8d4:	71fb      	strb	r3, [r7, #7]
 800a8d6:	e010      	b.n	800a8fa <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8d8:	7ebb      	ldrb	r3, [r7, #26]
 800a8da:	f003 0311 	and.w	r3, r3, #17
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <f_open+0x10e>
					res = FR_DENIED;
 800a8e2:	2307      	movs	r3, #7
 800a8e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8e8:	e007      	b.n	800a8fa <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <f_open+0x11e>
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a8fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d168      	bne.n	800a9d4 <f_open+0x1f8>
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d063      	beq.n	800a9d4 <f_open+0x1f8>
				dw = GET_FATTIME();
 800a90c:	f7fd fc80 	bl	8008210 <get_fattime>
 800a910:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	330e      	adds	r3, #14
 800a916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fd fdcb 	bl	80084b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a920:	3316      	adds	r3, #22
 800a922:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a924:	4618      	mov	r0, r3
 800a926:	f7fd fdc5 	bl	80084b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92c:	330b      	adds	r3, #11
 800a92e:	2220      	movs	r2, #32
 800a930:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a936:	4611      	mov	r1, r2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fdcf 	bl	80094dc <ld_clust>
 800a93e:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a944:	2200      	movs	r2, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f7fe fde7 	bl	800951a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	331c      	adds	r3, #28
 800a950:	2100      	movs	r1, #0
 800a952:	4618      	mov	r0, r3
 800a954:	f7fd fdae 	bl	80084b4 <st_dword>
					fs->wflag = 1;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2201      	movs	r2, #1
 800a95c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a960:	2b00      	cmp	r3, #0
 800a962:	d037      	beq.n	800a9d4 <f_open+0x1f8>
						dw = fs->winsect;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800a96a:	f107 0314 	add.w	r3, r7, #20
 800a96e:	2200      	movs	r2, #0
 800a970:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe fad7 	bl	8008f26 <remove_chain>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a97e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a982:	2b00      	cmp	r3, #0
 800a984:	d126      	bne.n	800a9d4 <f_open+0x1f8>
							res = move_window(fs, dw);
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe f81e 	bl	80089cc <move_window>
 800a990:	4603      	mov	r3, r0
 800a992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a99a:	3a01      	subs	r2, #1
 800a99c:	619a      	str	r2, [r3, #24]
 800a99e:	e019      	b.n	800a9d4 <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a9a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d115      	bne.n	800a9d4 <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a9a8:	7ebb      	ldrb	r3, [r7, #26]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <f_open+0x1de>
					res = FR_NO_FILE;
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a9b8:	e00c      	b.n	800a9d4 <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d007      	beq.n	800a9d4 <f_open+0x1f8>
 800a9c4:	7ebb      	ldrb	r3, [r7, #26]
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <f_open+0x1f8>
						res = FR_DENIED;
 800a9ce:	2307      	movs	r3, #7
 800a9d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a9d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d128      	bne.n	800aa2e <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	f003 0308 	and.w	r3, r3, #8
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <f_open+0x212>
				mode |= FA_MODIFIED;
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9fc:	79fb      	ldrb	r3, [r7, #7]
 800a9fe:	f023 0301 	bic.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2300      	moveq	r3, #0
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f107 0314 	add.w	r3, r7, #20
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fd fea7 	bl	8008768 <inc_lock>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <f_open+0x252>
 800aa28:	2302      	movs	r3, #2
 800aa2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f040 80a3 	bne.w	800ab7e <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fd4c 	bl	80094dc <ld_clust>
 800aa44:	4602      	mov	r2, r0
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4c:	331c      	adds	r3, #28
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fd fcf2 	bl	8008438 <ld_dword>
 800aa54:	4602      	mov	r2, r0
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	88da      	ldrh	r2, [r3, #6]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	79fa      	ldrb	r2, [r7, #7]
 800aa72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3330      	adds	r3, #48	; 0x30
 800aa8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fd fd5c 	bl	800854e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	f003 0320 	and.w	r3, r3, #32
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d06e      	beq.n	800ab7e <f_open+0x3a2>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d06a      	beq.n	800ab7e <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	895b      	ldrh	r3, [r3, #10]
 800aab4:	461a      	mov	r2, r3
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	899b      	ldrh	r3, [r3, #12]
 800aaba:	fb03 f302 	mul.w	r3, r3, r2
 800aabe:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aacc:	e016      	b.n	800aafc <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe f837 	bl	8008b46 <get_fat>
 800aad8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d802      	bhi.n	800aae6 <f_open+0x30a>
 800aae0:	2302      	movs	r3, #2
 800aae2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaec:	d102      	bne.n	800aaf4 <f_open+0x318>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aaf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aafc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d103      	bne.n	800ab0c <f_open+0x330>
 800ab04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d8e0      	bhi.n	800aace <f_open+0x2f2>
				}
				fp->clust = clst;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ab12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d131      	bne.n	800ab7e <f_open+0x3a2>
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	899b      	ldrh	r3, [r3, #12]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab26:	fb02 f201 	mul.w	r2, r2, r1
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d026      	beq.n	800ab7e <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fd ffe7 	bl	8008b08 <clust2sect>
 800ab3a:	64b8      	str	r0, [r7, #72]	; 0x48
 800ab3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d103      	bne.n	800ab4a <f_open+0x36e>
						res = FR_INT_ERR;
 800ab42:	2302      	movs	r3, #2
 800ab44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ab48:	e019      	b.n	800ab7e <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	899b      	ldrh	r3, [r3, #12]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab52:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab58:	441a      	add	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	7858      	ldrb	r0, [r3, #1]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a1a      	ldr	r2, [r3, #32]
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f7fd fbed 	bl	800834c <disk_read>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <f_open+0x3a2>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800ab7e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ab80:	f000 fbcf 	bl	800b322 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <f_open+0x3b6>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ab98:	4611      	mov	r1, r2
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fd fd4a 	bl	8008634 <unlock_fs>
 800aba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3768      	adds	r7, #104	; 0x68
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b08e      	sub	sp, #56	; 0x38
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f107 0214 	add.w	r2, r7, #20
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fd59 	bl	800a684 <validate>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800abd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d107      	bne.n	800abf0 <f_read+0x44>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	7d5b      	ldrb	r3, [r3, #21]
 800abe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800abe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abec:	2b00      	cmp	r3, #0
 800abee:	d009      	beq.n	800ac04 <f_read+0x58>
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800abf6:	4611      	mov	r1, r2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fd fd1b 	bl	8008634 <unlock_fs>
 800abfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac02:	e15d      	b.n	800aec0 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	7d1b      	ldrb	r3, [r3, #20]
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d106      	bne.n	800ac1e <f_read+0x72>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2107      	movs	r1, #7
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fd fd0d 	bl	8008634 <unlock_fs>
 800ac1a:	2307      	movs	r3, #7
 800ac1c:	e150      	b.n	800aec0 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	68da      	ldr	r2, [r3, #12]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	699b      	ldr	r3, [r3, #24]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	f240 813c 	bls.w	800aeac <f_read+0x300>
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ac38:	e138      	b.n	800aeac <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	8992      	ldrh	r2, [r2, #12]
 800ac42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac46:	fb02 f201 	mul.w	r2, r2, r1
 800ac4a:	1a9b      	subs	r3, r3, r2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f040 80f3 	bne.w	800ae38 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	8992      	ldrh	r2, [r2, #12]
 800ac5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	8952      	ldrh	r2, [r2, #10]
 800ac62:	3a01      	subs	r2, #1
 800ac64:	4013      	ands	r3, r2
 800ac66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d139      	bne.n	800ace2 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d103      	bne.n	800ac7e <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	633b      	str	r3, [r7, #48]	; 0x30
 800ac7c:	e013      	b.n	800aca6 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d007      	beq.n	800ac96 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7fe fa47 	bl	8009120 <clmt_clust>
 800ac92:	6338      	str	r0, [r7, #48]	; 0x30
 800ac94:	e007      	b.n	800aca6 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f7fd ff51 	bl	8008b46 <get_fat>
 800aca4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d809      	bhi.n	800acc0 <f_read+0x114>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2202      	movs	r2, #2
 800acb0:	755a      	strb	r2, [r3, #21]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2102      	movs	r1, #2
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fd fcbc 	bl	8008634 <unlock_fs>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e0ff      	b.n	800aec0 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc6:	d109      	bne.n	800acdc <f_read+0x130>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	755a      	strb	r2, [r3, #21]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fd fcae 	bl	8008634 <unlock_fs>
 800acd8:	2301      	movs	r3, #1
 800acda:	e0f1      	b.n	800aec0 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	69db      	ldr	r3, [r3, #28]
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fd ff0c 	bl	8008b08 <clust2sect>
 800acf0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d109      	bne.n	800ad0c <f_read+0x160>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2202      	movs	r2, #2
 800acfc:	755a      	strb	r2, [r3, #21]
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2102      	movs	r1, #2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fd fc96 	bl	8008634 <unlock_fs>
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e0d9      	b.n	800aec0 <f_read+0x314>
			sect += csect;
 800ad0c:	69ba      	ldr	r2, [r7, #24]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	899b      	ldrh	r3, [r3, #12]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad20:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ad22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d046      	beq.n	800adb6 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	4413      	add	r3, r2
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	8952      	ldrh	r2, [r2, #10]
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d905      	bls.n	800ad42 <f_read+0x196>
					cc = fs->csize - csect;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	895b      	ldrh	r3, [r3, #10]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	7858      	ldrb	r0, [r3, #1]
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad4c:	f7fd fafe 	bl	800834c <disk_read>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d009      	beq.n	800ad6a <f_read+0x1be>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	755a      	strb	r2, [r3, #21]
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2101      	movs	r1, #1
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fd fc67 	bl	8008634 <unlock_fs>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e0aa      	b.n	800aec0 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	7d1b      	ldrb	r3, [r3, #20]
 800ad6e:	b25b      	sxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	da18      	bge.n	800ada6 <f_read+0x1fa>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6a1a      	ldr	r2, [r3, #32]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d911      	bls.n	800ada6 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6a1a      	ldr	r2, [r3, #32]
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	8992      	ldrh	r2, [r2, #12]
 800ad8e:	fb02 f303 	mul.w	r3, r2, r3
 800ad92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad94:	18d0      	adds	r0, r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	899b      	ldrh	r3, [r3, #12]
 800ada0:	461a      	mov	r2, r3
 800ada2:	f7fd fbb3 	bl	800850c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	899b      	ldrh	r3, [r3, #12]
 800adaa:	461a      	mov	r2, r3
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	fb02 f303 	mul.w	r3, r2, r3
 800adb2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800adb4:	e066      	b.n	800ae84 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	69ba      	ldr	r2, [r7, #24]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d038      	beq.n	800ae32 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	7d1b      	ldrb	r3, [r3, #20]
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da1d      	bge.n	800ae06 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	7858      	ldrb	r0, [r3, #1]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1a      	ldr	r2, [r3, #32]
 800add8:	2301      	movs	r3, #1
 800adda:	f7fd fad7 	bl	800838c <disk_write>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d009      	beq.n	800adf8 <f_read+0x24c>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2201      	movs	r2, #1
 800ade8:	755a      	strb	r2, [r3, #21]
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	2101      	movs	r1, #1
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd fc20 	bl	8008634 <unlock_fs>
 800adf4:	2301      	movs	r3, #1
 800adf6:	e063      	b.n	800aec0 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	7d1b      	ldrb	r3, [r3, #20]
 800adfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	7858      	ldrb	r0, [r3, #1]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae10:	2301      	movs	r3, #1
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	f7fd fa9a 	bl	800834c <disk_read>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <f_read+0x286>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2201      	movs	r2, #1
 800ae22:	755a      	strb	r2, [r3, #21]
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	2101      	movs	r1, #1
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fd fc03 	bl	8008634 <unlock_fs>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e046      	b.n	800aec0 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	899b      	ldrh	r3, [r3, #12]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	8992      	ldrh	r2, [r2, #12]
 800ae46:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae4a:	fb02 f201 	mul.w	r2, r2, r1
 800ae4e:	1a9b      	subs	r3, r3, r2
 800ae50:	1ac3      	subs	r3, r0, r3
 800ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ae54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d901      	bls.n	800ae60 <f_read+0x2b4>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	8992      	ldrh	r2, [r2, #12]
 800ae6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae72:	fb02 f200 	mul.w	r2, r2, r0
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	440b      	add	r3, r1
 800ae7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae80:	f7fd fb44 	bl	800850c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ae84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	4413      	add	r3, r2
 800ae8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae92:	441a      	add	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	619a      	str	r2, [r3, #24]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	441a      	add	r2, r3
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f47f aec3 	bne.w	800ac3a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fd fbbb 	bl	8008634 <unlock_fs>
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3738      	adds	r7, #56	; 0x38
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f107 0208 	add.w	r2, r7, #8
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff fbd3 	bl	800a684 <validate>
 800aede:	4603      	mov	r3, r0
 800aee0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d16d      	bne.n	800afc4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7d1b      	ldrb	r3, [r3, #20]
 800aeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d067      	beq.n	800afc4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7d1b      	ldrb	r3, [r3, #20]
 800aef8:	b25b      	sxtb	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	da1a      	bge.n	800af34 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	7858      	ldrb	r0, [r3, #1]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1a      	ldr	r2, [r3, #32]
 800af0c:	2301      	movs	r3, #1
 800af0e:	f7fd fa3d 	bl	800838c <disk_write>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d006      	beq.n	800af26 <f_sync+0x5e>
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	2101      	movs	r1, #1
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fd fb89 	bl	8008634 <unlock_fs>
 800af22:	2301      	movs	r3, #1
 800af24:	e055      	b.n	800afd2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7d1b      	ldrb	r3, [r3, #20]
 800af2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af34:	f7fd f96c 	bl	8008210 <get_fattime>
 800af38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fd fd42 	bl	80089cc <move_window>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d138      	bne.n	800afc4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	330b      	adds	r3, #11
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	330b      	adds	r3, #11
 800af62:	f042 0220 	orr.w	r2, r2, #32
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6818      	ldr	r0, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	461a      	mov	r2, r3
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	f7fe fad0 	bl	800951a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f103 021c 	add.w	r2, r3, #28
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	f7fd fa94 	bl	80084b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3316      	adds	r3, #22
 800af90:	6939      	ldr	r1, [r7, #16]
 800af92:	4618      	mov	r0, r3
 800af94:	f7fd fa8e 	bl	80084b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3312      	adds	r3, #18
 800af9c:	2100      	movs	r1, #0
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fd fa6d 	bl	800847e <st_word>
					fs->wflag = 1;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2201      	movs	r2, #1
 800afa8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f7fd fd3b 	bl	8008a28 <sync_fs>
 800afb2:	4603      	mov	r3, r0
 800afb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	7d1b      	ldrb	r3, [r3, #20]
 800afba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	7dfa      	ldrb	r2, [r7, #23]
 800afc8:	4611      	mov	r1, r2
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fd fb32 	bl	8008634 <unlock_fs>
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff ff70 	bl	800aec8 <f_sync>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d11d      	bne.n	800b02e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f107 0208 	add.w	r2, r7, #8
 800aff8:	4611      	mov	r1, r2
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fb42 	bl	800a684 <validate>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d111      	bne.n	800b02e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fc38 	bl	8008884 <dec_lock>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fd fb03 	bl	8008634 <unlock_fs>
#endif
		}
	}
	return res;
 800b02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	4613      	mov	r3, r2
 800b044:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b046:	2301      	movs	r3, #1
 800b048:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b04e:	4b1f      	ldr	r3, [pc, #124]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b050:	7a5b      	ldrb	r3, [r3, #9]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b00      	cmp	r3, #0
 800b056:	d131      	bne.n	800b0bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b058:	4b1c      	ldr	r3, [pc, #112]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b05a:	7a5b      	ldrb	r3, [r3, #9]
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	461a      	mov	r2, r3
 800b060:	4b1a      	ldr	r3, [pc, #104]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b062:	2100      	movs	r1, #0
 800b064:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b066:	4b19      	ldr	r3, [pc, #100]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b068:	7a5b      	ldrb	r3, [r3, #9]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b076:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b078:	7a5b      	ldrb	r3, [r3, #9]
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b080:	4413      	add	r3, r2
 800b082:	79fa      	ldrb	r2, [r7, #7]
 800b084:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b086:	4b11      	ldr	r3, [pc, #68]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b088:	7a5b      	ldrb	r3, [r3, #9]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	b2d1      	uxtb	r1, r2
 800b090:	4a0e      	ldr	r2, [pc, #56]	; (800b0cc <FATFS_LinkDriverEx+0x94>)
 800b092:	7251      	strb	r1, [r2, #9]
 800b094:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b096:	7dbb      	ldrb	r3, [r7, #22]
 800b098:	3330      	adds	r3, #48	; 0x30
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	223a      	movs	r2, #58	; 0x3a
 800b0a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	3302      	adds	r3, #2
 800b0ac:	222f      	movs	r2, #47	; 0x2f
 800b0ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	3303      	adds	r3, #3
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	371c      	adds	r7, #28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	200000dc 	.word	0x200000dc

0800b0d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0da:	2200      	movs	r2, #0
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7ff ffaa 	bl	800b038 <FATFS_LinkDriverEx>
 800b0e4:	4603      	mov	r3, r0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b100:	d802      	bhi.n	800b108 <ff_convert+0x18>
		c = chr;
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	81fb      	strh	r3, [r7, #14]
 800b106:	e025      	b.n	800b154 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00b      	beq.n	800b126 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b10e:	88fb      	ldrh	r3, [r7, #6]
 800b110:	2bff      	cmp	r3, #255	; 0xff
 800b112:	d805      	bhi.n	800b120 <ff_convert+0x30>
 800b114:	88fb      	ldrh	r3, [r7, #6]
 800b116:	3b80      	subs	r3, #128	; 0x80
 800b118:	4a12      	ldr	r2, [pc, #72]	; (800b164 <ff_convert+0x74>)
 800b11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b11e:	e000      	b.n	800b122 <ff_convert+0x32>
 800b120:	2300      	movs	r3, #0
 800b122:	81fb      	strh	r3, [r7, #14]
 800b124:	e016      	b.n	800b154 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b126:	2300      	movs	r3, #0
 800b128:	81fb      	strh	r3, [r7, #14]
 800b12a:	e009      	b.n	800b140 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b12c:	89fb      	ldrh	r3, [r7, #14]
 800b12e:	4a0d      	ldr	r2, [pc, #52]	; (800b164 <ff_convert+0x74>)
 800b130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b134:	88fa      	ldrh	r2, [r7, #6]
 800b136:	429a      	cmp	r2, r3
 800b138:	d006      	beq.n	800b148 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b13a:	89fb      	ldrh	r3, [r7, #14]
 800b13c:	3301      	adds	r3, #1
 800b13e:	81fb      	strh	r3, [r7, #14]
 800b140:	89fb      	ldrh	r3, [r7, #14]
 800b142:	2b7f      	cmp	r3, #127	; 0x7f
 800b144:	d9f2      	bls.n	800b12c <ff_convert+0x3c>
 800b146:	e000      	b.n	800b14a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b148:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b14a:	89fb      	ldrh	r3, [r7, #14]
 800b14c:	3380      	adds	r3, #128	; 0x80
 800b14e:	b29b      	uxth	r3, r3
 800b150:	b2db      	uxtb	r3, r3
 800b152:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b154:	89fb      	ldrh	r3, [r7, #14]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	08010640 	.word	0x08010640

0800b168 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b172:	88fb      	ldrh	r3, [r7, #6]
 800b174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b178:	d201      	bcs.n	800b17e <ff_wtoupper+0x16>
 800b17a:	4b3e      	ldr	r3, [pc, #248]	; (800b274 <ff_wtoupper+0x10c>)
 800b17c:	e000      	b.n	800b180 <ff_wtoupper+0x18>
 800b17e:	4b3e      	ldr	r3, [pc, #248]	; (800b278 <ff_wtoupper+0x110>)
 800b180:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	1c9a      	adds	r2, r3, #2
 800b186:	617a      	str	r2, [r7, #20]
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b18c:	8a7b      	ldrh	r3, [r7, #18]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d068      	beq.n	800b264 <ff_wtoupper+0xfc>
 800b192:	88fa      	ldrh	r2, [r7, #6]
 800b194:	8a7b      	ldrh	r3, [r7, #18]
 800b196:	429a      	cmp	r2, r3
 800b198:	d364      	bcc.n	800b264 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	1c9a      	adds	r2, r3, #2
 800b19e:	617a      	str	r2, [r7, #20]
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	823b      	strh	r3, [r7, #16]
 800b1a4:	8a3b      	ldrh	r3, [r7, #16]
 800b1a6:	0a1b      	lsrs	r3, r3, #8
 800b1a8:	81fb      	strh	r3, [r7, #14]
 800b1aa:	8a3b      	ldrh	r3, [r7, #16]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	8a79      	ldrh	r1, [r7, #18]
 800b1b4:	8a3b      	ldrh	r3, [r7, #16]
 800b1b6:	440b      	add	r3, r1
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	da49      	bge.n	800b250 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	2b08      	cmp	r3, #8
 800b1c0:	d84f      	bhi.n	800b262 <ff_wtoupper+0xfa>
 800b1c2:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <ff_wtoupper+0x60>)
 800b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c8:	0800b1ed 	.word	0x0800b1ed
 800b1cc:	0800b1ff 	.word	0x0800b1ff
 800b1d0:	0800b215 	.word	0x0800b215
 800b1d4:	0800b21d 	.word	0x0800b21d
 800b1d8:	0800b225 	.word	0x0800b225
 800b1dc:	0800b22d 	.word	0x0800b22d
 800b1e0:	0800b235 	.word	0x0800b235
 800b1e4:	0800b23d 	.word	0x0800b23d
 800b1e8:	0800b245 	.word	0x0800b245
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b1ec:	88fa      	ldrh	r2, [r7, #6]
 800b1ee:	8a7b      	ldrh	r3, [r7, #18]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	80fb      	strh	r3, [r7, #6]
 800b1fc:	e027      	b.n	800b24e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b1fe:	88fa      	ldrh	r2, [r7, #6]
 800b200:	8a7b      	ldrh	r3, [r7, #18]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	b29b      	uxth	r3, r3
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	88fa      	ldrh	r2, [r7, #6]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	80fb      	strh	r3, [r7, #6]
 800b212:	e01c      	b.n	800b24e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	3b10      	subs	r3, #16
 800b218:	80fb      	strh	r3, [r7, #6]
 800b21a:	e018      	b.n	800b24e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	3b20      	subs	r3, #32
 800b220:	80fb      	strh	r3, [r7, #6]
 800b222:	e014      	b.n	800b24e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b224:	88fb      	ldrh	r3, [r7, #6]
 800b226:	3b30      	subs	r3, #48	; 0x30
 800b228:	80fb      	strh	r3, [r7, #6]
 800b22a:	e010      	b.n	800b24e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b22c:	88fb      	ldrh	r3, [r7, #6]
 800b22e:	3b1a      	subs	r3, #26
 800b230:	80fb      	strh	r3, [r7, #6]
 800b232:	e00c      	b.n	800b24e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	3308      	adds	r3, #8
 800b238:	80fb      	strh	r3, [r7, #6]
 800b23a:	e008      	b.n	800b24e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b23c:	88fb      	ldrh	r3, [r7, #6]
 800b23e:	3b50      	subs	r3, #80	; 0x50
 800b240:	80fb      	strh	r3, [r7, #6]
 800b242:	e004      	b.n	800b24e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b244:	88fb      	ldrh	r3, [r7, #6]
 800b246:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b24a:	80fb      	strh	r3, [r7, #6]
 800b24c:	bf00      	nop
			}
			break;
 800b24e:	e008      	b.n	800b262 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b250:	89fb      	ldrh	r3, [r7, #14]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d195      	bne.n	800b182 <ff_wtoupper+0x1a>
 800b256:	8a3b      	ldrh	r3, [r7, #16]
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	4413      	add	r3, r2
 800b25e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b260:	e78f      	b.n	800b182 <ff_wtoupper+0x1a>
			break;
 800b262:	bf00      	nop
	}

	return chr;
 800b264:	88fb      	ldrh	r3, [r7, #6]
}
 800b266:	4618      	mov	r0, r3
 800b268:	371c      	adds	r7, #28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	08010740 	.word	0x08010740
 800b278:	08010934 	.word	0x08010934

0800b27c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	6039      	str	r1, [r7, #0]
 800b286:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800b288:	2200      	movs	r2, #0
 800b28a:	2101      	movs	r1, #1
 800b28c:	2001      	movs	r0, #1
 800b28e:	f000 fa77 	bl	800b780 <osSemaphoreNew>
 800b292:	4602      	mov	r2, r0
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	bf14      	ite	ne
 800b2a0:	2301      	movne	r3, #1
 800b2a2:	2300      	moveq	r3, #0
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	60fb      	str	r3, [r7, #12]

    return ret;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fb80 	bl	800b9c0 <osSemaphoreDelete>
#endif
    return 1;
 800b2c0:	2301      	movs	r3, #1
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b084      	sub	sp, #16
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800b2d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fada 	bl	800b894 <osSemaphoreAcquire>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fb1b 	bl	800b938 <osSemaphoreRelease>
#endif
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f003 fd48 	bl	800eda8 <pvPortMalloc>
 800b318:	4603      	mov	r3, r0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f003 fe08 	bl	800ef40 <vPortFree>
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <__NVIC_SetPriority>:
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	db0a      	blt.n	800b362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	490c      	ldr	r1, [pc, #48]	; (800b384 <__NVIC_SetPriority+0x4c>)
 800b352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b356:	0112      	lsls	r2, r2, #4
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	440b      	add	r3, r1
 800b35c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b360:	e00a      	b.n	800b378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	b2da      	uxtb	r2, r3
 800b366:	4908      	ldr	r1, [pc, #32]	; (800b388 <__NVIC_SetPriority+0x50>)
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	f003 030f 	and.w	r3, r3, #15
 800b36e:	3b04      	subs	r3, #4
 800b370:	0112      	lsls	r2, r2, #4
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	440b      	add	r3, r1
 800b376:	761a      	strb	r2, [r3, #24]
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	e000e100 	.word	0xe000e100
 800b388:	e000ed00 	.word	0xe000ed00

0800b38c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b390:	4b05      	ldr	r3, [pc, #20]	; (800b3a8 <SysTick_Handler+0x1c>)
 800b392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b394:	f002 fd56 	bl	800de44 <xTaskGetSchedulerState>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d001      	beq.n	800b3a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b39e:	f003 fc73 	bl	800ec88 <xPortSysTickHandler>
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	e000e010 	.word	0xe000e010

0800b3ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	f06f 0004 	mvn.w	r0, #4
 800b3b6:	f7ff ffbf 	bl	800b338 <__NVIC_SetPriority>
#endif
}
 800b3ba:	bf00      	nop
 800b3bc:	bd80      	pop	{r7, pc}
	...

0800b3c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3c6:	f3ef 8305 	mrs	r3, IPSR
 800b3ca:	603b      	str	r3, [r7, #0]
  return(result);
 800b3cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3d2:	f06f 0305 	mvn.w	r3, #5
 800b3d6:	607b      	str	r3, [r7, #4]
 800b3d8:	e00c      	b.n	800b3f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3da:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <osKernelInitialize+0x44>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3e2:	4b08      	ldr	r3, [pc, #32]	; (800b404 <osKernelInitialize+0x44>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	607b      	str	r3, [r7, #4]
 800b3ec:	e002      	b.n	800b3f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3f4:	687b      	ldr	r3, [r7, #4]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	200000e8 	.word	0x200000e8

0800b408 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b40e:	f3ef 8305 	mrs	r3, IPSR
 800b412:	603b      	str	r3, [r7, #0]
  return(result);
 800b414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b416:	2b00      	cmp	r3, #0
 800b418:	d003      	beq.n	800b422 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b41a:	f06f 0305 	mvn.w	r3, #5
 800b41e:	607b      	str	r3, [r7, #4]
 800b420:	e010      	b.n	800b444 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b422:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <osKernelStart+0x48>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d109      	bne.n	800b43e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b42a:	f7ff ffbf 	bl	800b3ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b42e:	4b08      	ldr	r3, [pc, #32]	; (800b450 <osKernelStart+0x48>)
 800b430:	2202      	movs	r2, #2
 800b432:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b434:	f002 f820 	bl	800d478 <vTaskStartScheduler>
      stat = osOK;
 800b438:	2300      	movs	r3, #0
 800b43a:	607b      	str	r3, [r7, #4]
 800b43c:	e002      	b.n	800b444 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b444:	687b      	ldr	r3, [r7, #4]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	200000e8 	.word	0x200000e8

0800b454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b454:	b580      	push	{r7, lr}
 800b456:	b08e      	sub	sp, #56	; 0x38
 800b458:	af04      	add	r7, sp, #16
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b460:	2300      	movs	r3, #0
 800b462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b464:	f3ef 8305 	mrs	r3, IPSR
 800b468:	617b      	str	r3, [r7, #20]
  return(result);
 800b46a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d17e      	bne.n	800b56e <osThreadNew+0x11a>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d07b      	beq.n	800b56e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b476:	2380      	movs	r3, #128	; 0x80
 800b478:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b47a:	2318      	movs	r3, #24
 800b47c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b47e:	2300      	movs	r3, #0
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d045      	beq.n	800b51a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <osThreadNew+0x48>
        name = attr->name;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d008      	beq.n	800b4c2 <osThreadNew+0x6e>
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	2b38      	cmp	r3, #56	; 0x38
 800b4b4:	d805      	bhi.n	800b4c2 <osThreadNew+0x6e>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <osThreadNew+0x72>
        return (NULL);
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e054      	b.n	800b570 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	089b      	lsrs	r3, r3, #2
 800b4d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00e      	beq.n	800b4fc <osThreadNew+0xa8>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	2b5b      	cmp	r3, #91	; 0x5b
 800b4e4:	d90a      	bls.n	800b4fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d006      	beq.n	800b4fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <osThreadNew+0xa8>
        mem = 1;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	61bb      	str	r3, [r7, #24]
 800b4fa:	e010      	b.n	800b51e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10c      	bne.n	800b51e <osThreadNew+0xca>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d108      	bne.n	800b51e <osThreadNew+0xca>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d104      	bne.n	800b51e <osThreadNew+0xca>
          mem = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	61bb      	str	r3, [r7, #24]
 800b518:	e001      	b.n	800b51e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d110      	bne.n	800b546 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b52c:	9202      	str	r2, [sp, #8]
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	6a3a      	ldr	r2, [r7, #32]
 800b538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f001 fd48 	bl	800cfd0 <xTaskCreateStatic>
 800b540:	4603      	mov	r3, r0
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	e013      	b.n	800b56e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d110      	bne.n	800b56e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	b29a      	uxth	r2, r3
 800b550:	f107 0310 	add.w	r3, r7, #16
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f001 fd93 	bl	800d08a <xTaskCreate>
 800b564:	4603      	mov	r3, r0
 800b566:	2b01      	cmp	r3, #1
 800b568:	d001      	beq.n	800b56e <osThreadNew+0x11a>
            hTask = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b56e:	693b      	ldr	r3, [r7, #16]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3728      	adds	r7, #40	; 0x28
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b580:	f3ef 8305 	mrs	r3, IPSR
 800b584:	60bb      	str	r3, [r7, #8]
  return(result);
 800b586:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <osDelay+0x1c>
    stat = osErrorISR;
 800b58c:	f06f 0305 	mvn.w	r3, #5
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e007      	b.n	800b5a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 ff36 	bl	800d410 <vTaskDelay>
    }
  }

  return (stat);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b086      	sub	sp, #24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ba:	f3ef 8305 	mrs	r3, IPSR
 800b5be:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5c0:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d12d      	bne.n	800b622 <osEventFlagsNew+0x74>
    mem = -1;
 800b5c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5ca:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d015      	beq.n	800b5fe <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d006      	beq.n	800b5e8 <osEventFlagsNew+0x3a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	2b1f      	cmp	r3, #31
 800b5e0:	d902      	bls.n	800b5e8 <osEventFlagsNew+0x3a>
        mem = 1;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	613b      	str	r3, [r7, #16]
 800b5e6:	e00c      	b.n	800b602 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d108      	bne.n	800b602 <osEventFlagsNew+0x54>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <osEventFlagsNew+0x54>
          mem = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	613b      	str	r3, [r7, #16]
 800b5fc:	e001      	b.n	800b602 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800b5fe:	2300      	movs	r3, #0
 800b600:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d106      	bne.n	800b616 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 fa2f 	bl	800ba70 <xEventGroupCreateStatic>
 800b612:	6178      	str	r0, [r7, #20]
 800b614:	e005      	b.n	800b622 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800b61c:	f000 fa5f 	bl	800bade <xEventGroupCreate>
 800b620:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800b622:	697b      	ldr	r3, [r7, #20]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <osEventFlagsSet+0x1e>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800b64a:	f06f 0303 	mvn.w	r3, #3
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	e028      	b.n	800b6a4 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b652:	f3ef 8305 	mrs	r3, IPSR
 800b656:	60fb      	str	r3, [r7, #12]
  return(result);
 800b658:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d01d      	beq.n	800b69a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800b65e:	2300      	movs	r3, #0
 800b660:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800b662:	f107 0308 	add.w	r3, r7, #8
 800b666:	461a      	mov	r2, r3
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6938      	ldr	r0, [r7, #16]
 800b66c:	f000 fbda 	bl	800be24 <xEventGroupSetBitsFromISR>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800b676:	f06f 0302 	mvn.w	r3, #2
 800b67a:	617b      	str	r3, [r7, #20]
 800b67c:	e012      	b.n	800b6a4 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00d      	beq.n	800b6a4 <osEventFlagsSet+0x78>
 800b688:	4b09      	ldr	r3, [pc, #36]	; (800b6b0 <osEventFlagsSet+0x84>)
 800b68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68e:	601a      	str	r2, [r3, #0]
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	e004      	b.n	800b6a4 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6938      	ldr	r0, [r7, #16]
 800b69e:	f000 fb07 	bl	800bcb0 <xEventGroupSetBits>
 800b6a2:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800b6a4:	697b      	ldr	r3, [r7, #20]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b08c      	sub	sp, #48	; 0x30
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <osEventFlagsWait+0x22>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800b6d6:	f06f 0303 	mvn.w	r3, #3
 800b6da:	61fb      	str	r3, [r7, #28]
 800b6dc:	e04b      	b.n	800b776 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6de:	f3ef 8305 	mrs	r3, IPSR
 800b6e2:	617b      	str	r3, [r7, #20]
  return(result);
 800b6e4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800b6ea:	f06f 0305 	mvn.w	r3, #5
 800b6ee:	61fb      	str	r3, [r7, #28]
 800b6f0:	e041      	b.n	800b776 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f003 0301 	and.w	r3, r3, #1
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b700:	e001      	b.n	800b706 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800b702:	2300      	movs	r3, #0
 800b704:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800b710:	2300      	movs	r3, #0
 800b712:	623b      	str	r3, [r7, #32]
 800b714:	e001      	b.n	800b71a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800b716:	2301      	movs	r3, #1
 800b718:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	6a3a      	ldr	r2, [r7, #32]
 800b722:	68b9      	ldr	r1, [r7, #8]
 800b724:	69b8      	ldr	r0, [r7, #24]
 800b726:	f000 f9f5 	bl	800bb14 <xEventGroupWaitBits>
 800b72a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d010      	beq.n	800b758 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	4013      	ands	r3, r2
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d019      	beq.n	800b776 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800b748:	f06f 0301 	mvn.w	r3, #1
 800b74c:	61fb      	str	r3, [r7, #28]
 800b74e:	e012      	b.n	800b776 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b750:	f06f 0302 	mvn.w	r3, #2
 800b754:	61fb      	str	r3, [r7, #28]
 800b756:	e00e      	b.n	800b776 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	4013      	ands	r3, r2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d003      	beq.n	800b770 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800b768:	f06f 0301 	mvn.w	r3, #1
 800b76c:	61fb      	str	r3, [r7, #28]
 800b76e:	e002      	b.n	800b776 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800b770:	f06f 0302 	mvn.w	r3, #2
 800b774:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800b776:	69fb      	ldr	r3, [r7, #28]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3728      	adds	r7, #40	; 0x28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af02      	add	r7, sp, #8
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b78c:	2300      	movs	r3, #0
 800b78e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b790:	f3ef 8305 	mrs	r3, IPSR
 800b794:	613b      	str	r3, [r7, #16]
  return(result);
 800b796:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d175      	bne.n	800b888 <osSemaphoreNew+0x108>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d072      	beq.n	800b888 <osSemaphoreNew+0x108>
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d86e      	bhi.n	800b888 <osSemaphoreNew+0x108>
    mem = -1;
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d015      	beq.n	800b7e2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d006      	beq.n	800b7cc <osSemaphoreNew+0x4c>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	2b4f      	cmp	r3, #79	; 0x4f
 800b7c4:	d902      	bls.n	800b7cc <osSemaphoreNew+0x4c>
        mem = 1;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	e00c      	b.n	800b7e6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d108      	bne.n	800b7e6 <osSemaphoreNew+0x66>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d104      	bne.n	800b7e6 <osSemaphoreNew+0x66>
          mem = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61bb      	str	r3, [r7, #24]
 800b7e0:	e001      	b.n	800b7e6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7ec:	d04c      	beq.n	800b888 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d128      	bne.n	800b846 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d10a      	bne.n	800b810 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	2203      	movs	r2, #3
 800b800:	9200      	str	r2, [sp, #0]
 800b802:	2200      	movs	r2, #0
 800b804:	2100      	movs	r1, #0
 800b806:	2001      	movs	r0, #1
 800b808:	f000 fc3c 	bl	800c084 <xQueueGenericCreateStatic>
 800b80c:	61f8      	str	r0, [r7, #28]
 800b80e:	e005      	b.n	800b81c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b810:	2203      	movs	r2, #3
 800b812:	2100      	movs	r1, #0
 800b814:	2001      	movs	r0, #1
 800b816:	f000 fcad 	bl	800c174 <xQueueGenericCreate>
 800b81a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d022      	beq.n	800b868 <osSemaphoreNew+0xe8>
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01f      	beq.n	800b868 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b828:	2300      	movs	r3, #0
 800b82a:	2200      	movs	r2, #0
 800b82c:	2100      	movs	r1, #0
 800b82e:	69f8      	ldr	r0, [r7, #28]
 800b830:	f000 fd68 	bl	800c304 <xQueueGenericSend>
 800b834:	4603      	mov	r3, r0
 800b836:	2b01      	cmp	r3, #1
 800b838:	d016      	beq.n	800b868 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b83a:	69f8      	ldr	r0, [r7, #28]
 800b83c:	f001 f9f4 	bl	800cc28 <vQueueDelete>
            hSemaphore = NULL;
 800b840:	2300      	movs	r3, #0
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	e010      	b.n	800b868 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d108      	bne.n	800b85e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	461a      	mov	r2, r3
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fcea 	bl	800c22e <xQueueCreateCountingSemaphoreStatic>
 800b85a:	61f8      	str	r0, [r7, #28]
 800b85c:	e004      	b.n	800b868 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f000 fd1b 	bl	800c29c <xQueueCreateCountingSemaphore>
 800b866:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00c      	beq.n	800b888 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d003      	beq.n	800b87c <osSemaphoreNew+0xfc>
          name = attr->name;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	617b      	str	r3, [r7, #20]
 800b87a:	e001      	b.n	800b880 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b87c:	2300      	movs	r3, #0
 800b87e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b880:	6979      	ldr	r1, [r7, #20]
 800b882:	69f8      	ldr	r0, [r7, #28]
 800b884:	f001 fb1c 	bl	800cec0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b888:	69fb      	ldr	r3, [r7, #28]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d103      	bne.n	800b8b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b8ac:	f06f 0303 	mvn.w	r3, #3
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	e039      	b.n	800b928 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b4:	f3ef 8305 	mrs	r3, IPSR
 800b8b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d022      	beq.n	800b906 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b8c6:	f06f 0303 	mvn.w	r3, #3
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	e02c      	b.n	800b928 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b8d2:	f107 0308 	add.w	r3, r7, #8
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6938      	ldr	r0, [r7, #16]
 800b8dc:	f001 f924 	bl	800cb28 <xQueueReceiveFromISR>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d003      	beq.n	800b8ee <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b8e6:	f06f 0302 	mvn.w	r3, #2
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e01c      	b.n	800b928 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d019      	beq.n	800b928 <osSemaphoreAcquire+0x94>
 800b8f4:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <osSemaphoreAcquire+0xa0>)
 800b8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8fa:	601a      	str	r2, [r3, #0]
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	e010      	b.n	800b928 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6938      	ldr	r0, [r7, #16]
 800b90a:	f001 f801 	bl	800c910 <xQueueSemaphoreTake>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b01      	cmp	r3, #1
 800b912:	d009      	beq.n	800b928 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b91a:	f06f 0301 	mvn.w	r3, #1
 800b91e:	617b      	str	r3, [r7, #20]
 800b920:	e002      	b.n	800b928 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b922:	f06f 0302 	mvn.w	r3, #2
 800b926:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b928:	697b      	ldr	r3, [r7, #20]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	e000ed04 	.word	0xe000ed04

0800b938 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b944:	2300      	movs	r3, #0
 800b946:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d103      	bne.n	800b956 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b94e:	f06f 0303 	mvn.w	r3, #3
 800b952:	617b      	str	r3, [r7, #20]
 800b954:	e02c      	b.n	800b9b0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b956:	f3ef 8305 	mrs	r3, IPSR
 800b95a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b95c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d01a      	beq.n	800b998 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b962:	2300      	movs	r3, #0
 800b964:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b966:	f107 0308 	add.w	r3, r7, #8
 800b96a:	4619      	mov	r1, r3
 800b96c:	6938      	ldr	r0, [r7, #16]
 800b96e:	f000 fe62 	bl	800c636 <xQueueGiveFromISR>
 800b972:	4603      	mov	r3, r0
 800b974:	2b01      	cmp	r3, #1
 800b976:	d003      	beq.n	800b980 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b978:	f06f 0302 	mvn.w	r3, #2
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	e017      	b.n	800b9b0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d014      	beq.n	800b9b0 <osSemaphoreRelease+0x78>
 800b986:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <osSemaphoreRelease+0x84>)
 800b988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	e00b      	b.n	800b9b0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b998:	2300      	movs	r3, #0
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	6938      	ldr	r0, [r7, #16]
 800b9a0:	f000 fcb0 	bl	800c304 <xQueueGenericSend>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d002      	beq.n	800b9b0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b9aa:	f06f 0302 	mvn.w	r3, #2
 800b9ae:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b9b0:	697b      	ldr	r3, [r7, #20]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9cc:	f3ef 8305 	mrs	r3, IPSR
 800b9d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d003      	beq.n	800b9e0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b9d8:	f06f 0305 	mvn.w	r3, #5
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	e00e      	b.n	800b9fe <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d103      	bne.n	800b9ee <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b9e6:	f06f 0303 	mvn.w	r3, #3
 800b9ea:	617b      	str	r3, [r7, #20]
 800b9ec:	e007      	b.n	800b9fe <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b9ee:	6938      	ldr	r0, [r7, #16]
 800b9f0:	f001 fa90 	bl	800cf14 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b9f8:	6938      	ldr	r0, [r7, #16]
 800b9fa:	f001 f915 	bl	800cc28 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b9fe:	697b      	ldr	r3, [r7, #20]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4a07      	ldr	r2, [pc, #28]	; (800ba34 <vApplicationGetIdleTaskMemory+0x2c>)
 800ba18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	4a06      	ldr	r2, [pc, #24]	; (800ba38 <vApplicationGetIdleTaskMemory+0x30>)
 800ba1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2280      	movs	r2, #128	; 0x80
 800ba24:	601a      	str	r2, [r3, #0]
}
 800ba26:	bf00      	nop
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	200000ec 	.word	0x200000ec
 800ba38:	20000148 	.word	0x20000148

0800ba3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4a07      	ldr	r2, [pc, #28]	; (800ba68 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	4a06      	ldr	r2, [pc, #24]	; (800ba6c <vApplicationGetTimerTaskMemory+0x30>)
 800ba52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba5a:	601a      	str	r2, [r3, #0]
}
 800ba5c:	bf00      	nop
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	20000348 	.word	0x20000348
 800ba6c:	200003a4 	.word	0x200003a4

0800ba70 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ba94:	2320      	movs	r3, #32
 800ba96:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2b20      	cmp	r3, #32
 800ba9c:	d00a      	beq.n	800bab4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	60fb      	str	r3, [r7, #12]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00a      	beq.n	800bad4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 f9bf 	bl	800be4c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2201      	movs	r2, #1
 800bad2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800bad4:	697b      	ldr	r3, [r7, #20]
	}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800bae4:	2020      	movs	r0, #32
 800bae6:	f003 f95f 	bl	800eda8 <pvPortMalloc>
 800baea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00a      	beq.n	800bb08 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3304      	adds	r3, #4
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 f9a5 	bl	800be4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800bb08:	687b      	ldr	r3, [r7, #4]
	}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
	...

0800bb14 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b090      	sub	sp, #64	; 0x40
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d10a      	bne.n	800bb4a <xEventGroupWaitBits+0x36>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	f383 8811 	msr	BASEPRI, r3
 800bb3c:	f3bf 8f6f 	isb	sy
 800bb40:	f3bf 8f4f 	dsb	sy
 800bb44:	623b      	str	r3, [r7, #32]
}
 800bb46:	bf00      	nop
 800bb48:	e7fe      	b.n	800bb48 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00a      	beq.n	800bb6a <xEventGroupWaitBits+0x56>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	61fb      	str	r3, [r7, #28]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10a      	bne.n	800bb86 <xEventGroupWaitBits+0x72>
	__asm volatile
 800bb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	61bb      	str	r3, [r7, #24]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb86:	f002 f95d 	bl	800de44 <xTaskGetSchedulerState>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d102      	bne.n	800bb96 <xEventGroupWaitBits+0x82>
 800bb90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <xEventGroupWaitBits+0x86>
 800bb96:	2301      	movs	r3, #1
 800bb98:	e000      	b.n	800bb9c <xEventGroupWaitBits+0x88>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10a      	bne.n	800bbb6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	617b      	str	r3, [r7, #20]
}
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800bbb6:	f001 fcc5 	bl	800d544 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800bbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbc6:	f000 f90b 	bl	800bde0 <prvTestWaitCondition>
 800bbca:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00e      	beq.n	800bbf0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800bbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d028      	beq.n	800bc32 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bbe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	43db      	mvns	r3, r3
 800bbe8:	401a      	ands	r2, r3
 800bbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	e020      	b.n	800bc32 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800bbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d104      	bne.n	800bc00 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	633b      	str	r3, [r7, #48]	; 0x30
 800bbfe:	e018      	b.n	800bc32 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc0c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc1a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800bc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1e:	1d18      	adds	r0, r3, #4
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc24:	4313      	orrs	r3, r2
 800bc26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f001 fe83 	bl	800d934 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800bc32:	f001 fc95 	bl	800d560 <xTaskResumeAll>
 800bc36:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800bc38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d031      	beq.n	800bca2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d107      	bne.n	800bc54 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800bc44:	4b19      	ldr	r3, [pc, #100]	; (800bcac <xEventGroupWaitBits+0x198>)
 800bc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800bc54:	f002 fa6c 	bl	800e130 <uxTaskResetEventItemValue>
 800bc58:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d11a      	bne.n	800bc9a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800bc64:	f002 ff7e 	bl	800eb64 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800bc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	68b9      	ldr	r1, [r7, #8]
 800bc72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc74:	f000 f8b4 	bl	800bde0 <prvTestWaitCondition>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d009      	beq.n	800bc92 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d006      	beq.n	800bc92 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800bc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	43db      	mvns	r3, r3
 800bc8c:	401a      	ands	r2, r3
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc90:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800bc92:	2301      	movs	r3, #1
 800bc94:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800bc96:	f002 ff95 	bl	800ebc4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bca0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800bca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3740      	adds	r7, #64	; 0x40
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08e      	sub	sp, #56	; 0x38
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10a      	bne.n	800bce2 <xEventGroupSetBits+0x32>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	613b      	str	r3, [r7, #16]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00a      	beq.n	800bd02 <xEventGroupSetBits+0x52>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	60fb      	str	r3, [r7, #12]
}
 800bcfe:	bf00      	nop
 800bd00:	e7fe      	b.n	800bd00 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800bd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd04:	3304      	adds	r3, #4
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800bd0e:	f001 fc19 	bl	800d544 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800bd24:	e03c      	b.n	800bda0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800bd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800bd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800bd32:	2300      	movs	r3, #0
 800bd34:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bd3c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd44:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d108      	bne.n	800bd62 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	4013      	ands	r3, r2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00b      	beq.n	800bd74 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd60:	e008      	b.n	800bd74 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	4013      	ands	r3, r2
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d101      	bne.n	800bd74 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d010      	beq.n	800bd9c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d003      	beq.n	800bd8c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800bd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bd94:	4619      	mov	r1, r3
 800bd96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd98:	f001 fe98 	bl	800dacc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800bda0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d1be      	bne.n	800bd26 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	43db      	mvns	r3, r3
 800bdb0:	401a      	ands	r2, r3
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800bdb6:	f001 fbd3 	bl	800d560 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	681b      	ldr	r3, [r3, #0]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3738      	adds	r7, #56	; 0x38
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b082      	sub	sp, #8
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff ff6c 	bl	800bcb0 <xEventGroupSetBits>
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800bdec:	2300      	movs	r3, #0
 800bdee:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d107      	bne.n	800be06 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4013      	ands	r3, r2
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00a      	beq.n	800be16 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800be00:	2301      	movs	r3, #1
 800be02:	617b      	str	r3, [r7, #20]
 800be04:	e007      	b.n	800be16 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	4013      	ands	r3, r2
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d101      	bne.n	800be16 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800be12:	2301      	movs	r3, #1
 800be14:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800be16:	697b      	ldr	r3, [r7, #20]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	371c      	adds	r7, #28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	68f9      	ldr	r1, [r7, #12]
 800be36:	4804      	ldr	r0, [pc, #16]	; (800be48 <xEventGroupSetBitsFromISR+0x24>)
 800be38:	f002 fd48 	bl	800e8cc <xTimerPendFunctionCallFromISR>
 800be3c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800be3e:	697b      	ldr	r3, [r7, #20]
	}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	0800bdc7 	.word	0x0800bdc7

0800be4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f103 0208 	add.w	r2, r3, #8
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f103 0208 	add.w	r2, r3, #8
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f103 0208 	add.w	r2, r3, #8
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bea6:	b480      	push	{r7}
 800bea8:	b085      	sub	sp, #20
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	601a      	str	r2, [r3, #0]
}
 800bee2:	bf00      	nop
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf04:	d103      	bne.n	800bf0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	e00c      	b.n	800bf28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3308      	adds	r3, #8
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	e002      	b.n	800bf1c <vListInsert+0x2e>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	60fb      	str	r3, [r7, #12]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d2f6      	bcs.n	800bf16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	601a      	str	r2, [r3, #0]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6892      	ldr	r2, [r2, #8]
 800bf76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	6852      	ldr	r2, [r2, #4]
 800bf80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d103      	bne.n	800bf94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	1e5a      	subs	r2, r3, #1
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3714      	adds	r7, #20
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10a      	bne.n	800bfde <xQueueGenericReset+0x2a>
	__asm volatile
 800bfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfcc:	f383 8811 	msr	BASEPRI, r3
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	f3bf 8f4f 	dsb	sy
 800bfd8:	60bb      	str	r3, [r7, #8]
}
 800bfda:	bf00      	nop
 800bfdc:	e7fe      	b.n	800bfdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bfde:	f002 fdc1 	bl	800eb64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	441a      	add	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c00e:	3b01      	subs	r3, #1
 800c010:	68f9      	ldr	r1, [r7, #12]
 800c012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c014:	fb01 f303 	mul.w	r3, r1, r3
 800c018:	441a      	add	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	22ff      	movs	r2, #255	; 0xff
 800c022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	22ff      	movs	r2, #255	; 0xff
 800c02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d114      	bne.n	800c05e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01a      	beq.n	800c072 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	3310      	adds	r3, #16
 800c040:	4618      	mov	r0, r3
 800c042:	f001 fcdf 	bl	800da04 <xTaskRemoveFromEventList>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d012      	beq.n	800c072 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c04c:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <xQueueGenericReset+0xcc>)
 800c04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	e009      	b.n	800c072 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3310      	adds	r3, #16
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff fef2 	bl	800be4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3324      	adds	r3, #36	; 0x24
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff feed 	bl	800be4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c072:	f002 fda7 	bl	800ebc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c076:	2301      	movs	r3, #1
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08e      	sub	sp, #56	; 0x38
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d10a      	bne.n	800c0ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09c:	f383 8811 	msr	BASEPRI, r3
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0aa:	bf00      	nop
 800c0ac:	e7fe      	b.n	800c0ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10a      	bne.n	800c0ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <xQueueGenericCreateStatic+0x52>
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <xQueueGenericCreateStatic+0x56>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e000      	b.n	800c0dc <xQueueGenericCreateStatic+0x58>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	623b      	str	r3, [r7, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <xQueueGenericCreateStatic+0x7e>
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <xQueueGenericCreateStatic+0x82>
 800c102:	2301      	movs	r3, #1
 800c104:	e000      	b.n	800c108 <xQueueGenericCreateStatic+0x84>
 800c106:	2300      	movs	r3, #0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10a      	bne.n	800c122 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	61fb      	str	r3, [r7, #28]
}
 800c11e:	bf00      	nop
 800c120:	e7fe      	b.n	800c120 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c122:	2350      	movs	r3, #80	; 0x50
 800c124:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b50      	cmp	r3, #80	; 0x50
 800c12a:	d00a      	beq.n	800c142 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	61bb      	str	r3, [r7, #24]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c142:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00d      	beq.n	800c16a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	2201      	movs	r2, #1
 800c152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c156:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4613      	mov	r3, r2
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	68b9      	ldr	r1, [r7, #8]
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 f83f 	bl	800c1e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3730      	adds	r7, #48	; 0x30
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08a      	sub	sp, #40	; 0x28
 800c178:	af02      	add	r7, sp, #8
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	4613      	mov	r3, r2
 800c180:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10a      	bne.n	800c19e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	613b      	str	r3, [r7, #16]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	fb02 f303 	mul.w	r3, r2, r3
 800c1a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	3350      	adds	r3, #80	; 0x50
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f002 fdfb 	bl	800eda8 <pvPortMalloc>
 800c1b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d011      	beq.n	800c1de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	3350      	adds	r3, #80	; 0x50
 800c1c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1cc:	79fa      	ldrb	r2, [r7, #7]
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f000 f805 	bl	800c1e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1de:	69bb      	ldr	r3, [r7, #24]
	}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3720      	adds	r7, #32
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d103      	bne.n	800c204 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	601a      	str	r2, [r3, #0]
 800c202:	e002      	b.n	800c20a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c216:	2101      	movs	r1, #1
 800c218:	69b8      	ldr	r0, [r7, #24]
 800c21a:	f7ff fecb 	bl	800bfb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	78fa      	ldrb	r2, [r7, #3]
 800c222:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c226:	bf00      	nop
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b08a      	sub	sp, #40	; 0x28
 800c232:	af02      	add	r7, sp, #8
 800c234:	60f8      	str	r0, [r7, #12]
 800c236:	60b9      	str	r1, [r7, #8]
 800c238:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	61bb      	str	r3, [r7, #24]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d90a      	bls.n	800c274 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	617b      	str	r3, [r7, #20]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c274:	2302      	movs	r3, #2
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	2100      	movs	r1, #0
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff ff00 	bl	800c084 <xQueueGenericCreateStatic>
 800c284:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c292:	69fb      	ldr	r3, [r7, #28]
	}
 800c294:	4618      	mov	r0, r3
 800c296:	3720      	adds	r7, #32
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	613b      	str	r3, [r7, #16]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d90a      	bls.n	800c2e0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	60fb      	str	r3, [r7, #12]
}
 800c2dc:	bf00      	nop
 800c2de:	e7fe      	b.n	800c2de <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ff45 	bl	800c174 <xQueueGenericCreate>
 800c2ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c2f8:	697b      	ldr	r3, [r7, #20]
	}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b08e      	sub	sp, #56	; 0x38
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	607a      	str	r2, [r7, #4]
 800c310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c312:	2300      	movs	r3, #0
 800c314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10a      	bne.n	800c336 <xQueueGenericSend+0x32>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c332:	bf00      	nop
 800c334:	e7fe      	b.n	800c334 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d103      	bne.n	800c344 <xQueueGenericSend+0x40>
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <xQueueGenericSend+0x44>
 800c344:	2301      	movs	r3, #1
 800c346:	e000      	b.n	800c34a <xQueueGenericSend+0x46>
 800c348:	2300      	movs	r3, #0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10a      	bne.n	800c364 <xQueueGenericSend+0x60>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c360:	bf00      	nop
 800c362:	e7fe      	b.n	800c362 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	2b02      	cmp	r3, #2
 800c368:	d103      	bne.n	800c372 <xQueueGenericSend+0x6e>
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d101      	bne.n	800c376 <xQueueGenericSend+0x72>
 800c372:	2301      	movs	r3, #1
 800c374:	e000      	b.n	800c378 <xQueueGenericSend+0x74>
 800c376:	2300      	movs	r3, #0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10a      	bne.n	800c392 <xQueueGenericSend+0x8e>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	623b      	str	r3, [r7, #32]
}
 800c38e:	bf00      	nop
 800c390:	e7fe      	b.n	800c390 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c392:	f001 fd57 	bl	800de44 <xTaskGetSchedulerState>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d102      	bne.n	800c3a2 <xQueueGenericSend+0x9e>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <xQueueGenericSend+0xa2>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e000      	b.n	800c3a8 <xQueueGenericSend+0xa4>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	61fb      	str	r3, [r7, #28]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3c2:	f002 fbcf 	bl	800eb64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d302      	bcc.n	800c3d8 <xQueueGenericSend+0xd4>
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d129      	bne.n	800c42c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c3d8:	683a      	ldr	r2, [r7, #0]
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3de:	f000 fc5e 	bl	800cc9e <prvCopyDataToQueue>
 800c3e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d010      	beq.n	800c40e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ee:	3324      	adds	r3, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 fb07 	bl	800da04 <xTaskRemoveFromEventList>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d013      	beq.n	800c424 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c3fc:	4b3f      	ldr	r3, [pc, #252]	; (800c4fc <xQueueGenericSend+0x1f8>)
 800c3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	f3bf 8f4f 	dsb	sy
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	e00a      	b.n	800c424 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c414:	4b39      	ldr	r3, [pc, #228]	; (800c4fc <xQueueGenericSend+0x1f8>)
 800c416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c424:	f002 fbce 	bl	800ebc4 <vPortExitCritical>
				return pdPASS;
 800c428:	2301      	movs	r3, #1
 800c42a:	e063      	b.n	800c4f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d103      	bne.n	800c43a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c432:	f002 fbc7 	bl	800ebc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c436:	2300      	movs	r3, #0
 800c438:	e05c      	b.n	800c4f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d106      	bne.n	800c44e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c440:	f107 0314 	add.w	r3, r7, #20
 800c444:	4618      	mov	r0, r3
 800c446:	f001 fba3 	bl	800db90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c44a:	2301      	movs	r3, #1
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c44e:	f002 fbb9 	bl	800ebc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c452:	f001 f877 	bl	800d544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c456:	f002 fb85 	bl	800eb64 <vPortEnterCritical>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c460:	b25b      	sxtb	r3, r3
 800c462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c466:	d103      	bne.n	800c470 <xQueueGenericSend+0x16c>
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c476:	b25b      	sxtb	r3, r3
 800c478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c47c:	d103      	bne.n	800c486 <xQueueGenericSend+0x182>
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	2200      	movs	r2, #0
 800c482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c486:	f002 fb9d 	bl	800ebc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c48a:	1d3a      	adds	r2, r7, #4
 800c48c:	f107 0314 	add.w	r3, r7, #20
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f001 fb92 	bl	800dbbc <xTaskCheckForTimeOut>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d124      	bne.n	800c4e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c49e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4a0:	f000 fcf5 	bl	800ce8e <prvIsQueueFull>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d018      	beq.n	800c4dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	3310      	adds	r3, #16
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	4611      	mov	r1, r2
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f001 fa1a 	bl	800d8ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c4b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ba:	f000 fc80 	bl	800cdbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c4be:	f001 f84f 	bl	800d560 <xTaskResumeAll>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f47f af7c 	bne.w	800c3c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c4ca:	4b0c      	ldr	r3, [pc, #48]	; (800c4fc <xQueueGenericSend+0x1f8>)
 800c4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d0:	601a      	str	r2, [r3, #0]
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	e772      	b.n	800c3c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c4dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4de:	f000 fc6e 	bl	800cdbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4e2:	f001 f83d 	bl	800d560 <xTaskResumeAll>
 800c4e6:	e76c      	b.n	800c3c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4ea:	f000 fc68 	bl	800cdbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4ee:	f001 f837 	bl	800d560 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c4f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3738      	adds	r7, #56	; 0x38
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	e000ed04 	.word	0xe000ed04

0800c500 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b090      	sub	sp, #64	; 0x40
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c52a:	bf00      	nop
 800c52c:	e7fe      	b.n	800c52c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <xQueueGenericSendFromISR+0x3c>
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d101      	bne.n	800c540 <xQueueGenericSendFromISR+0x40>
 800c53c:	2301      	movs	r3, #1
 800c53e:	e000      	b.n	800c542 <xQueueGenericSendFromISR+0x42>
 800c540:	2300      	movs	r3, #0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10a      	bne.n	800c55c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d103      	bne.n	800c56a <xQueueGenericSendFromISR+0x6a>
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c566:	2b01      	cmp	r3, #1
 800c568:	d101      	bne.n	800c56e <xQueueGenericSendFromISR+0x6e>
 800c56a:	2301      	movs	r3, #1
 800c56c:	e000      	b.n	800c570 <xQueueGenericSendFromISR+0x70>
 800c56e:	2300      	movs	r3, #0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	623b      	str	r3, [r7, #32]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c58a:	f002 fbcd 	bl	800ed28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c58e:	f3ef 8211 	mrs	r2, BASEPRI
 800c592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c596:	f383 8811 	msr	BASEPRI, r3
 800c59a:	f3bf 8f6f 	isb	sy
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	61fa      	str	r2, [r7, #28]
 800c5a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d302      	bcc.n	800c5bc <xQueueGenericSendFromISR+0xbc>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d12f      	bne.n	800c61c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c5cc:	683a      	ldr	r2, [r7, #0]
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5d2:	f000 fb64 	bl	800cc9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5de:	d112      	bne.n	800c606 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d016      	beq.n	800c616 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	3324      	adds	r3, #36	; 0x24
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fa09 	bl	800da04 <xTaskRemoveFromEventList>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	e007      	b.n	800c616 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c606:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c60a:	3301      	adds	r3, #1
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	b25a      	sxtb	r2, r3
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c616:	2301      	movs	r3, #1
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c61a:	e001      	b.n	800c620 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c61c:	2300      	movs	r3, #0
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c62a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3740      	adds	r7, #64	; 0x40
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b08e      	sub	sp, #56	; 0x38
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	2b00      	cmp	r3, #0
 800c648:	d10a      	bne.n	800c660 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	623b      	str	r3, [r7, #32]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00a      	beq.n	800c67e <xQueueGiveFromISR+0x48>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	61fb      	str	r3, [r7, #28]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d103      	bne.n	800c68e <xQueueGiveFromISR+0x58>
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <xQueueGiveFromISR+0x5c>
 800c68e:	2301      	movs	r3, #1
 800c690:	e000      	b.n	800c694 <xQueueGiveFromISR+0x5e>
 800c692:	2300      	movs	r3, #0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10a      	bne.n	800c6ae <xQueueGiveFromISR+0x78>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	61bb      	str	r3, [r7, #24]
}
 800c6aa:	bf00      	nop
 800c6ac:	e7fe      	b.n	800c6ac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6ae:	f002 fb3b 	bl	800ed28 <vPortValidateInterruptPriority>
	__asm volatile
 800c6b2:	f3ef 8211 	mrs	r2, BASEPRI
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	617a      	str	r2, [r7, #20]
 800c6c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c6ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d22b      	bcs.n	800c736 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f8:	d112      	bne.n	800c720 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d016      	beq.n	800c730 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	3324      	adds	r3, #36	; 0x24
 800c706:	4618      	mov	r0, r3
 800c708:	f001 f97c 	bl	800da04 <xTaskRemoveFromEventList>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00e      	beq.n	800c730 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00b      	beq.n	800c730 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2201      	movs	r2, #1
 800c71c:	601a      	str	r2, [r3, #0]
 800c71e:	e007      	b.n	800c730 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c724:	3301      	adds	r3, #1
 800c726:	b2db      	uxtb	r3, r3
 800c728:	b25a      	sxtb	r2, r3
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c730:	2301      	movs	r3, #1
 800c732:	637b      	str	r3, [r7, #52]	; 0x34
 800c734:	e001      	b.n	800c73a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c736:	2300      	movs	r3, #0
 800c738:	637b      	str	r3, [r7, #52]	; 0x34
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f383 8811 	msr	BASEPRI, r3
}
 800c744:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3738      	adds	r7, #56	; 0x38
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08c      	sub	sp, #48	; 0x30
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c75c:	2300      	movs	r3, #0
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <xQueueReceive+0x30>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	623b      	str	r3, [r7, #32]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <xQueueReceive+0x3e>
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <xQueueReceive+0x42>
 800c78e:	2301      	movs	r3, #1
 800c790:	e000      	b.n	800c794 <xQueueReceive+0x44>
 800c792:	2300      	movs	r3, #0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <xQueueReceive+0x5e>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	61fb      	str	r3, [r7, #28]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7ae:	f001 fb49 	bl	800de44 <xTaskGetSchedulerState>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d102      	bne.n	800c7be <xQueueReceive+0x6e>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d101      	bne.n	800c7c2 <xQueueReceive+0x72>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e000      	b.n	800c7c4 <xQueueReceive+0x74>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10a      	bne.n	800c7de <xQueueReceive+0x8e>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	61bb      	str	r3, [r7, #24]
}
 800c7da:	bf00      	nop
 800c7dc:	e7fe      	b.n	800c7dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7de:	f002 f9c1 	bl	800eb64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d01f      	beq.n	800c82e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7f2:	f000 fabe 	bl	800cd72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f8:	1e5a      	subs	r2, r3, #1
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00f      	beq.n	800c826 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	3310      	adds	r3, #16
 800c80a:	4618      	mov	r0, r3
 800c80c:	f001 f8fa 	bl	800da04 <xTaskRemoveFromEventList>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d007      	beq.n	800c826 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c816:	4b3d      	ldr	r3, [pc, #244]	; (800c90c <xQueueReceive+0x1bc>)
 800c818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c81c:	601a      	str	r2, [r3, #0]
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c826:	f002 f9cd 	bl	800ebc4 <vPortExitCritical>
				return pdPASS;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e069      	b.n	800c902 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d103      	bne.n	800c83c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c834:	f002 f9c6 	bl	800ebc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c838:	2300      	movs	r3, #0
 800c83a:	e062      	b.n	800c902 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d106      	bne.n	800c850 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c842:	f107 0310 	add.w	r3, r7, #16
 800c846:	4618      	mov	r0, r3
 800c848:	f001 f9a2 	bl	800db90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c84c:	2301      	movs	r3, #1
 800c84e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c850:	f002 f9b8 	bl	800ebc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c854:	f000 fe76 	bl	800d544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c858:	f002 f984 	bl	800eb64 <vPortEnterCritical>
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c862:	b25b      	sxtb	r3, r3
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c868:	d103      	bne.n	800c872 <xQueueReceive+0x122>
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c878:	b25b      	sxtb	r3, r3
 800c87a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c87e:	d103      	bne.n	800c888 <xQueueReceive+0x138>
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	2200      	movs	r2, #0
 800c884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c888:	f002 f99c 	bl	800ebc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c88c:	1d3a      	adds	r2, r7, #4
 800c88e:	f107 0310 	add.w	r3, r7, #16
 800c892:	4611      	mov	r1, r2
 800c894:	4618      	mov	r0, r3
 800c896:	f001 f991 	bl	800dbbc <xTaskCheckForTimeOut>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d123      	bne.n	800c8e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a2:	f000 fade 	bl	800ce62 <prvIsQueueEmpty>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d017      	beq.n	800c8dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	3324      	adds	r3, #36	; 0x24
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	4611      	mov	r1, r2
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f001 f819 	bl	800d8ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8bc:	f000 fa7f 	bl	800cdbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8c0:	f000 fe4e 	bl	800d560 <xTaskResumeAll>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d189      	bne.n	800c7de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <xQueueReceive+0x1bc>)
 800c8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	e780      	b.n	800c7de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8de:	f000 fa6e 	bl	800cdbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8e2:	f000 fe3d 	bl	800d560 <xTaskResumeAll>
 800c8e6:	e77a      	b.n	800c7de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8ea:	f000 fa68 	bl	800cdbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8ee:	f000 fe37 	bl	800d560 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f4:	f000 fab5 	bl	800ce62 <prvIsQueueEmpty>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f43f af6f 	beq.w	800c7de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c900:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c902:	4618      	mov	r0, r3
 800c904:	3730      	adds	r7, #48	; 0x30
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	e000ed04 	.word	0xe000ed04

0800c910 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08e      	sub	sp, #56	; 0x38
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c91a:	2300      	movs	r3, #0
 800c91c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c922:	2300      	movs	r3, #0
 800c924:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d10a      	bne.n	800c942 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	623b      	str	r3, [r7, #32]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00a      	beq.n	800c960 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	61fb      	str	r3, [r7, #28]
}
 800c95c:	bf00      	nop
 800c95e:	e7fe      	b.n	800c95e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c960:	f001 fa70 	bl	800de44 <xTaskGetSchedulerState>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d102      	bne.n	800c970 <xQueueSemaphoreTake+0x60>
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <xQueueSemaphoreTake+0x64>
 800c970:	2301      	movs	r3, #1
 800c972:	e000      	b.n	800c976 <xQueueSemaphoreTake+0x66>
 800c974:	2300      	movs	r3, #0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10a      	bne.n	800c990 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	61bb      	str	r3, [r7, #24]
}
 800c98c:	bf00      	nop
 800c98e:	e7fe      	b.n	800c98e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c990:	f002 f8e8 	bl	800eb64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c998:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d024      	beq.n	800c9ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a2:	1e5a      	subs	r2, r3, #1
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c9b0:	f001 fbd6 	bl	800e160 <pvTaskIncrementMutexHeldCount>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00f      	beq.n	800c9e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	3310      	adds	r3, #16
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f001 f81c 	bl	800da04 <xTaskRemoveFromEventList>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d007      	beq.n	800c9e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c9d2:	4b54      	ldr	r3, [pc, #336]	; (800cb24 <xQueueSemaphoreTake+0x214>)
 800c9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c9e2:	f002 f8ef 	bl	800ebc4 <vPortExitCritical>
				return pdPASS;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e097      	b.n	800cb1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d111      	bne.n	800ca14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00a      	beq.n	800ca0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	617b      	str	r3, [r7, #20]
}
 800ca08:	bf00      	nop
 800ca0a:	e7fe      	b.n	800ca0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca0c:	f002 f8da 	bl	800ebc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca10:	2300      	movs	r3, #0
 800ca12:	e082      	b.n	800cb1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca1a:	f107 030c 	add.w	r3, r7, #12
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f001 f8b6 	bl	800db90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca24:	2301      	movs	r3, #1
 800ca26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca28:	f002 f8cc 	bl	800ebc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca2c:	f000 fd8a 	bl	800d544 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca30:	f002 f898 	bl	800eb64 <vPortEnterCritical>
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca3a:	b25b      	sxtb	r3, r3
 800ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca40:	d103      	bne.n	800ca4a <xQueueSemaphoreTake+0x13a>
 800ca42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca50:	b25b      	sxtb	r3, r3
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca56:	d103      	bne.n	800ca60 <xQueueSemaphoreTake+0x150>
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca60:	f002 f8b0 	bl	800ebc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca64:	463a      	mov	r2, r7
 800ca66:	f107 030c 	add.w	r3, r7, #12
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f001 f8a5 	bl	800dbbc <xTaskCheckForTimeOut>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d132      	bne.n	800cade <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca7a:	f000 f9f2 	bl	800ce62 <prvIsQueueEmpty>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d026      	beq.n	800cad2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d109      	bne.n	800caa0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ca8c:	f002 f86a 	bl	800eb64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 f9f3 	bl	800de80 <xTaskPriorityInherit>
 800ca9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ca9c:	f002 f892 	bl	800ebc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	3324      	adds	r3, #36	; 0x24
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	4611      	mov	r1, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 ff1f 	bl	800d8ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800caae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab0:	f000 f985 	bl	800cdbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cab4:	f000 fd54 	bl	800d560 <xTaskResumeAll>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	f47f af68 	bne.w	800c990 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cac0:	4b18      	ldr	r3, [pc, #96]	; (800cb24 <xQueueSemaphoreTake+0x214>)
 800cac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	f3bf 8f6f 	isb	sy
 800cad0:	e75e      	b.n	800c990 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cad4:	f000 f973 	bl	800cdbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cad8:	f000 fd42 	bl	800d560 <xTaskResumeAll>
 800cadc:	e758      	b.n	800c990 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cae0:	f000 f96d 	bl	800cdbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cae4:	f000 fd3c 	bl	800d560 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caea:	f000 f9ba 	bl	800ce62 <prvIsQueueEmpty>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f43f af4d 	beq.w	800c990 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00d      	beq.n	800cb18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cafc:	f002 f832 	bl	800eb64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb02:	f000 f8b4 	bl	800cc6e <prvGetDisinheritPriorityAfterTimeout>
 800cb06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f001 fa8c 	bl	800e02c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cb14:	f002 f856 	bl	800ebc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3738      	adds	r7, #56	; 0x38
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08e      	sub	sp, #56	; 0x38
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10a      	bne.n	800cb54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	623b      	str	r3, [r7, #32]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <xQueueReceiveFromISR+0x3a>
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <xQueueReceiveFromISR+0x3e>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <xQueueReceiveFromISR+0x40>
 800cb66:	2300      	movs	r3, #0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10a      	bne.n	800cb82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	61fb      	str	r3, [r7, #28]
}
 800cb7e:	bf00      	nop
 800cb80:	e7fe      	b.n	800cb80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb82:	f002 f8d1 	bl	800ed28 <vPortValidateInterruptPriority>
	__asm volatile
 800cb86:	f3ef 8211 	mrs	r2, BASEPRI
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	61ba      	str	r2, [r7, #24]
 800cb9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cb9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d02f      	beq.n	800cc0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cbb8:	68b9      	ldr	r1, [r7, #8]
 800cbba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cbbc:	f000 f8d9 	bl	800cd72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	1e5a      	subs	r2, r3, #1
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cbc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbd0:	d112      	bne.n	800cbf8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d016      	beq.n	800cc08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	3310      	adds	r3, #16
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 ff10 	bl	800da04 <xTaskRemoveFromEventList>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00e      	beq.n	800cc08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00b      	beq.n	800cc08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	e007      	b.n	800cc08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	b25a      	sxtb	r2, r3
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34
 800cc0c:	e001      	b.n	800cc12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	637b      	str	r3, [r7, #52]	; 0x34
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	f383 8811 	msr	BASEPRI, r3
}
 800cc1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3738      	adds	r7, #56	; 0x38
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10a      	bne.n	800cc50 <vQueueDelete+0x28>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	60bb      	str	r3, [r7, #8]
}
 800cc4c:	bf00      	nop
 800cc4e:	e7fe      	b.n	800cc4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f000 f95f 	bl	800cf14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d102      	bne.n	800cc66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f002 f96d 	bl	800ef40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cc66:	bf00      	nop
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc6e:	b480      	push	{r7}
 800cc70:	b085      	sub	sp, #20
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d006      	beq.n	800cc8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cc88:	60fb      	str	r3, [r7, #12]
 800cc8a:	e001      	b.n	800cc90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cc90:	68fb      	ldr	r3, [r7, #12]
	}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr

0800cc9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b086      	sub	sp, #24
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	60f8      	str	r0, [r7, #12]
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10d      	bne.n	800ccd8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d14d      	bne.n	800cd60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f001 f941 	bl	800df50 <xTaskPriorityDisinherit>
 800ccce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	609a      	str	r2, [r3, #8]
 800ccd6:	e043      	b.n	800cd60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d119      	bne.n	800cd12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6858      	ldr	r0, [r3, #4]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce6:	461a      	mov	r2, r3
 800cce8:	68b9      	ldr	r1, [r7, #8]
 800ccea:	f002 fa71 	bl	800f1d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf6:	441a      	add	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d32b      	bcc.n	800cd60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	605a      	str	r2, [r3, #4]
 800cd10:	e026      	b.n	800cd60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	68d8      	ldr	r0, [r3, #12]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	68b9      	ldr	r1, [r7, #8]
 800cd1e:	f002 fa57 	bl	800f1d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2a:	425b      	negs	r3, r3
 800cd2c:	441a      	add	r2, r3
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	68da      	ldr	r2, [r3, #12]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d207      	bcs.n	800cd4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	689a      	ldr	r2, [r3, #8]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	425b      	negs	r3, r3
 800cd48:	441a      	add	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d105      	bne.n	800cd60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d002      	beq.n	800cd60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	3b01      	subs	r3, #1
 800cd5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cd68:	697b      	ldr	r3, [r7, #20]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3718      	adds	r7, #24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d018      	beq.n	800cdb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	68da      	ldr	r2, [r3, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8c:	441a      	add	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68da      	ldr	r2, [r3, #12]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d303      	bcc.n	800cda6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68d9      	ldr	r1, [r3, #12]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdae:	461a      	mov	r2, r3
 800cdb0:	6838      	ldr	r0, [r7, #0]
 800cdb2:	f002 fa0d 	bl	800f1d0 <memcpy>
	}
}
 800cdb6:	bf00      	nop
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cdc6:	f001 fecd 	bl	800eb64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdd2:	e011      	b.n	800cdf8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d012      	beq.n	800ce02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3324      	adds	r3, #36	; 0x24
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 fe0f 	bl	800da04 <xTaskRemoveFromEventList>
 800cde6:	4603      	mov	r3, r0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cdec:	f000 ff48 	bl	800dc80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cdf0:	7bfb      	ldrb	r3, [r7, #15]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	dce9      	bgt.n	800cdd4 <prvUnlockQueue+0x16>
 800ce00:	e000      	b.n	800ce04 <prvUnlockQueue+0x46>
					break;
 800ce02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	22ff      	movs	r2, #255	; 0xff
 800ce08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ce0c:	f001 feda 	bl	800ebc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce10:	f001 fea8 	bl	800eb64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce1c:	e011      	b.n	800ce42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d012      	beq.n	800ce4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	3310      	adds	r3, #16
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fdea 	bl	800da04 <xTaskRemoveFromEventList>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce36:	f000 ff23 	bl	800dc80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	dce9      	bgt.n	800ce1e <prvUnlockQueue+0x60>
 800ce4a:	e000      	b.n	800ce4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	22ff      	movs	r2, #255	; 0xff
 800ce52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ce56:	f001 feb5 	bl	800ebc4 <vPortExitCritical>
}
 800ce5a:	bf00      	nop
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce6a:	f001 fe7b 	bl	800eb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce76:	2301      	movs	r3, #1
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	e001      	b.n	800ce80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce80:	f001 fea0 	bl	800ebc4 <vPortExitCritical>

	return xReturn;
 800ce84:	68fb      	ldr	r3, [r7, #12]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce96:	f001 fe65 	bl	800eb64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d102      	bne.n	800ceac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cea6:	2301      	movs	r3, #1
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	e001      	b.n	800ceb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ceac:	2300      	movs	r3, #0
 800ceae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ceb0:	f001 fe88 	bl	800ebc4 <vPortExitCritical>

	return xReturn;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ceca:	2300      	movs	r3, #0
 800cecc:	60fb      	str	r3, [r7, #12]
 800cece:	e014      	b.n	800cefa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ced0:	4a0f      	ldr	r2, [pc, #60]	; (800cf10 <vQueueAddToRegistry+0x50>)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10b      	bne.n	800cef4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cedc:	490c      	ldr	r1, [pc, #48]	; (800cf10 <vQueueAddToRegistry+0x50>)
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	683a      	ldr	r2, [r7, #0]
 800cee2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cee6:	4a0a      	ldr	r2, [pc, #40]	; (800cf10 <vQueueAddToRegistry+0x50>)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	00db      	lsls	r3, r3, #3
 800ceec:	4413      	add	r3, r2
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cef2:	e006      	b.n	800cf02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	3301      	adds	r3, #1
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b07      	cmp	r3, #7
 800cefe:	d9e7      	bls.n	800ced0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cf00:	bf00      	nop
 800cf02:	bf00      	nop
 800cf04:	3714      	adds	r7, #20
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	200104b4 	.word	0x200104b4

0800cf14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e016      	b.n	800cf50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cf22:	4a10      	ldr	r2, [pc, #64]	; (800cf64 <vQueueUnregisterQueue+0x50>)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	00db      	lsls	r3, r3, #3
 800cf28:	4413      	add	r3, r2
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d10b      	bne.n	800cf4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cf32:	4a0c      	ldr	r2, [pc, #48]	; (800cf64 <vQueueUnregisterQueue+0x50>)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2100      	movs	r1, #0
 800cf38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cf3c:	4a09      	ldr	r2, [pc, #36]	; (800cf64 <vQueueUnregisterQueue+0x50>)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	4413      	add	r3, r2
 800cf44:	2200      	movs	r2, #0
 800cf46:	605a      	str	r2, [r3, #4]
				break;
 800cf48:	e006      	b.n	800cf58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b07      	cmp	r3, #7
 800cf54:	d9e5      	bls.n	800cf22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cf56:	bf00      	nop
 800cf58:	bf00      	nop
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	200104b4 	.word	0x200104b4

0800cf68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cf78:	f001 fdf4 	bl	800eb64 <vPortEnterCritical>
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf82:	b25b      	sxtb	r3, r3
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf88:	d103      	bne.n	800cf92 <vQueueWaitForMessageRestricted+0x2a>
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf98:	b25b      	sxtb	r3, r3
 800cf9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf9e:	d103      	bne.n	800cfa8 <vQueueWaitForMessageRestricted+0x40>
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cfa8:	f001 fe0c 	bl	800ebc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	3324      	adds	r3, #36	; 0x24
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	68b9      	ldr	r1, [r7, #8]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 fcf5 	bl	800d9ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cfc2:	6978      	ldr	r0, [r7, #20]
 800cfc4:	f7ff fefb 	bl	800cdbe <prvUnlockQueue>
	}
 800cfc8:	bf00      	nop
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08e      	sub	sp, #56	; 0x38
 800cfd4:	af04      	add	r7, sp, #16
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10a      	bne.n	800cffa <xTaskCreateStatic+0x2a>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	623b      	str	r3, [r7, #32]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xTaskCreateStatic+0x46>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	61fb      	str	r3, [r7, #28]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d016:	235c      	movs	r3, #92	; 0x5c
 800d018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	2b5c      	cmp	r3, #92	; 0x5c
 800d01e:	d00a      	beq.n	800d036 <xTaskCreateStatic+0x66>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	61bb      	str	r3, [r7, #24]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d036:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d01e      	beq.n	800d07c <xTaskCreateStatic+0xac>
 800d03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d040:	2b00      	cmp	r3, #0
 800d042:	d01b      	beq.n	800d07c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d04c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	2202      	movs	r2, #2
 800d052:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d056:	2300      	movs	r3, #0
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	9302      	str	r3, [sp, #8]
 800d05e:	f107 0314 	add.w	r3, r7, #20
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	68b9      	ldr	r1, [r7, #8]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f000 f850 	bl	800d114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d076:	f000 f8dd 	bl	800d234 <prvAddNewTaskToReadyList>
 800d07a:	e001      	b.n	800d080 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d07c:	2300      	movs	r3, #0
 800d07e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d080:	697b      	ldr	r3, [r7, #20]
	}
 800d082:	4618      	mov	r0, r3
 800d084:	3728      	adds	r7, #40	; 0x28
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b08c      	sub	sp, #48	; 0x30
 800d08e:	af04      	add	r7, sp, #16
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	603b      	str	r3, [r7, #0]
 800d096:	4613      	mov	r3, r2
 800d098:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d09a:	88fb      	ldrh	r3, [r7, #6]
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f001 fe82 	bl	800eda8 <pvPortMalloc>
 800d0a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00e      	beq.n	800d0ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d0ac:	205c      	movs	r0, #92	; 0x5c
 800d0ae:	f001 fe7b 	bl	800eda8 <pvPortMalloc>
 800d0b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d003      	beq.n	800d0c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	697a      	ldr	r2, [r7, #20]
 800d0be:	631a      	str	r2, [r3, #48]	; 0x30
 800d0c0:	e005      	b.n	800d0ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d0c2:	6978      	ldr	r0, [r7, #20]
 800d0c4:	f001 ff3c 	bl	800ef40 <vPortFree>
 800d0c8:	e001      	b.n	800d0ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d017      	beq.n	800d104 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d0dc:	88fa      	ldrh	r2, [r7, #6]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	9303      	str	r3, [sp, #12]
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	9302      	str	r3, [sp, #8]
 800d0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 f80e 	bl	800d114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d0f8:	69f8      	ldr	r0, [r7, #28]
 800d0fa:	f000 f89b 	bl	800d234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d0fe:	2301      	movs	r3, #1
 800d100:	61bb      	str	r3, [r7, #24]
 800d102:	e002      	b.n	800d10a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d108:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d10a:	69bb      	ldr	r3, [r7, #24]
	}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3720      	adds	r7, #32
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	607a      	str	r2, [r7, #4]
 800d120:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	461a      	mov	r2, r3
 800d12c:	21a5      	movs	r1, #165	; 0xa5
 800d12e:	f002 f85d 	bl	800f1ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d13c:	3b01      	subs	r3, #1
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	f023 0307 	bic.w	r3, r3, #7
 800d14a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	2b00      	cmp	r3, #0
 800d154:	d00a      	beq.n	800d16c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	617b      	str	r3, [r7, #20]
}
 800d168:	bf00      	nop
 800d16a:	e7fe      	b.n	800d16a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d01f      	beq.n	800d1b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d172:	2300      	movs	r3, #0
 800d174:	61fb      	str	r3, [r7, #28]
 800d176:	e012      	b.n	800d19e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d178:	68ba      	ldr	r2, [r7, #8]
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	4413      	add	r3, r2
 800d17e:	7819      	ldrb	r1, [r3, #0]
 800d180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	4413      	add	r3, r2
 800d186:	3334      	adds	r3, #52	; 0x34
 800d188:	460a      	mov	r2, r1
 800d18a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	4413      	add	r3, r2
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d006      	beq.n	800d1a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	3301      	adds	r3, #1
 800d19c:	61fb      	str	r3, [r7, #28]
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	2b0f      	cmp	r3, #15
 800d1a2:	d9e9      	bls.n	800d178 <prvInitialiseNewTask+0x64>
 800d1a4:	e000      	b.n	800d1a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800d1a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1b0:	e003      	b.n	800d1ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	2b37      	cmp	r3, #55	; 0x37
 800d1be:	d901      	bls.n	800d1c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d1c0:	2337      	movs	r3, #55	; 0x37
 800d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	3304      	adds	r3, #4
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fe56 	bl	800be8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e2:	3318      	adds	r3, #24
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe fe51 	bl	800be8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	2200      	movs	r2, #0
 800d204:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	68f9      	ldr	r1, [r7, #12]
 800d212:	69b8      	ldr	r0, [r7, #24]
 800d214:	f001 fb7a 	bl	800e90c <pxPortInitialiseStack>
 800d218:	4602      	mov	r2, r0
 800d21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d22a:	bf00      	nop
 800d22c:	3720      	adds	r7, #32
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d23c:	f001 fc92 	bl	800eb64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d240:	4b2d      	ldr	r3, [pc, #180]	; (800d2f8 <prvAddNewTaskToReadyList+0xc4>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3301      	adds	r3, #1
 800d246:	4a2c      	ldr	r2, [pc, #176]	; (800d2f8 <prvAddNewTaskToReadyList+0xc4>)
 800d248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d24a:	4b2c      	ldr	r3, [pc, #176]	; (800d2fc <prvAddNewTaskToReadyList+0xc8>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d109      	bne.n	800d266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d252:	4a2a      	ldr	r2, [pc, #168]	; (800d2fc <prvAddNewTaskToReadyList+0xc8>)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d258:	4b27      	ldr	r3, [pc, #156]	; (800d2f8 <prvAddNewTaskToReadyList+0xc4>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d110      	bne.n	800d282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d260:	f000 fd32 	bl	800dcc8 <prvInitialiseTaskLists>
 800d264:	e00d      	b.n	800d282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d266:	4b26      	ldr	r3, [pc, #152]	; (800d300 <prvAddNewTaskToReadyList+0xcc>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d109      	bne.n	800d282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d26e:	4b23      	ldr	r3, [pc, #140]	; (800d2fc <prvAddNewTaskToReadyList+0xc8>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	429a      	cmp	r2, r3
 800d27a:	d802      	bhi.n	800d282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d27c:	4a1f      	ldr	r2, [pc, #124]	; (800d2fc <prvAddNewTaskToReadyList+0xc8>)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d282:	4b20      	ldr	r3, [pc, #128]	; (800d304 <prvAddNewTaskToReadyList+0xd0>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3301      	adds	r3, #1
 800d288:	4a1e      	ldr	r2, [pc, #120]	; (800d304 <prvAddNewTaskToReadyList+0xd0>)
 800d28a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d28c:	4b1d      	ldr	r3, [pc, #116]	; (800d304 <prvAddNewTaskToReadyList+0xd0>)
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d298:	4b1b      	ldr	r3, [pc, #108]	; (800d308 <prvAddNewTaskToReadyList+0xd4>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d903      	bls.n	800d2a8 <prvAddNewTaskToReadyList+0x74>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	4a18      	ldr	r2, [pc, #96]	; (800d308 <prvAddNewTaskToReadyList+0xd4>)
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4a15      	ldr	r2, [pc, #84]	; (800d30c <prvAddNewTaskToReadyList+0xd8>)
 800d2b6:	441a      	add	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	4619      	mov	r1, r3
 800d2be:	4610      	mov	r0, r2
 800d2c0:	f7fe fdf1 	bl	800bea6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d2c4:	f001 fc7e 	bl	800ebc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d2c8:	4b0d      	ldr	r3, [pc, #52]	; (800d300 <prvAddNewTaskToReadyList+0xcc>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00e      	beq.n	800d2ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d2d0:	4b0a      	ldr	r3, [pc, #40]	; (800d2fc <prvAddNewTaskToReadyList+0xc8>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d207      	bcs.n	800d2ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d2de:	4b0c      	ldr	r3, [pc, #48]	; (800d310 <prvAddNewTaskToReadyList+0xdc>)
 800d2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2ee:	bf00      	nop
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20000c78 	.word	0x20000c78
 800d2fc:	200007a4 	.word	0x200007a4
 800d300:	20000c84 	.word	0x20000c84
 800d304:	20000c94 	.word	0x20000c94
 800d308:	20000c80 	.word	0x20000c80
 800d30c:	200007a8 	.word	0x200007a8
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	; 0x28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d31e:	2300      	movs	r3, #0
 800d320:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10a      	bne.n	800d33e <vTaskDelayUntil+0x2a>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	617b      	str	r3, [r7, #20]
}
 800d33a:	bf00      	nop
 800d33c:	e7fe      	b.n	800d33c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <vTaskDelayUntil+0x46>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	613b      	str	r3, [r7, #16]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d35a:	4b2a      	ldr	r3, [pc, #168]	; (800d404 <vTaskDelayUntil+0xf0>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00a      	beq.n	800d378 <vTaskDelayUntil+0x64>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	60fb      	str	r3, [r7, #12]
}
 800d374:	bf00      	nop
 800d376:	e7fe      	b.n	800d376 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d378:	f000 f8e4 	bl	800d544 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d37c:	4b22      	ldr	r3, [pc, #136]	; (800d408 <vTaskDelayUntil+0xf4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	683a      	ldr	r2, [r7, #0]
 800d388:	4413      	add	r3, r2
 800d38a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6a3a      	ldr	r2, [r7, #32]
 800d392:	429a      	cmp	r2, r3
 800d394:	d20b      	bcs.n	800d3ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	69fa      	ldr	r2, [r7, #28]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d211      	bcs.n	800d3c4 <vTaskDelayUntil+0xb0>
 800d3a0:	69fa      	ldr	r2, [r7, #28]
 800d3a2:	6a3b      	ldr	r3, [r7, #32]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d90d      	bls.n	800d3c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ac:	e00a      	b.n	800d3c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	69fa      	ldr	r2, [r7, #28]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d303      	bcc.n	800d3c0 <vTaskDelayUntil+0xac>
 800d3b8:	69fa      	ldr	r2, [r7, #28]
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d901      	bls.n	800d3c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	69fa      	ldr	r2, [r7, #28]
 800d3c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d006      	beq.n	800d3de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d3d0:	69fa      	ldr	r2, [r7, #28]
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fed5 	bl	800e188 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d3de:	f000 f8bf 	bl	800d560 <xTaskResumeAll>
 800d3e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d3e4:	69bb      	ldr	r3, [r7, #24]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d107      	bne.n	800d3fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d3ea:	4b08      	ldr	r3, [pc, #32]	; (800d40c <vTaskDelayUntil+0xf8>)
 800d3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f0:	601a      	str	r2, [r3, #0]
 800d3f2:	f3bf 8f4f 	dsb	sy
 800d3f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3fa:	bf00      	nop
 800d3fc:	3728      	adds	r7, #40	; 0x28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20000ca0 	.word	0x20000ca0
 800d408:	20000c7c 	.word	0x20000c7c
 800d40c:	e000ed04 	.word	0xe000ed04

0800d410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d418:	2300      	movs	r3, #0
 800d41a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d017      	beq.n	800d452 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d422:	4b13      	ldr	r3, [pc, #76]	; (800d470 <vTaskDelay+0x60>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00a      	beq.n	800d440 <vTaskDelay+0x30>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	60bb      	str	r3, [r7, #8]
}
 800d43c:	bf00      	nop
 800d43e:	e7fe      	b.n	800d43e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d440:	f000 f880 	bl	800d544 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d444:	2100      	movs	r1, #0
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fe9e 	bl	800e188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d44c:	f000 f888 	bl	800d560 <xTaskResumeAll>
 800d450:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d107      	bne.n	800d468 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d458:	4b06      	ldr	r3, [pc, #24]	; (800d474 <vTaskDelay+0x64>)
 800d45a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d45e:	601a      	str	r2, [r3, #0]
 800d460:	f3bf 8f4f 	dsb	sy
 800d464:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d468:	bf00      	nop
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20000ca0 	.word	0x20000ca0
 800d474:	e000ed04 	.word	0xe000ed04

0800d478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08a      	sub	sp, #40	; 0x28
 800d47c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d47e:	2300      	movs	r3, #0
 800d480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d486:	463a      	mov	r2, r7
 800d488:	1d39      	adds	r1, r7, #4
 800d48a:	f107 0308 	add.w	r3, r7, #8
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe faba 	bl	800ba08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	68ba      	ldr	r2, [r7, #8]
 800d49a:	9202      	str	r2, [sp, #8]
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	460a      	mov	r2, r1
 800d4a6:	4921      	ldr	r1, [pc, #132]	; (800d52c <vTaskStartScheduler+0xb4>)
 800d4a8:	4821      	ldr	r0, [pc, #132]	; (800d530 <vTaskStartScheduler+0xb8>)
 800d4aa:	f7ff fd91 	bl	800cfd0 <xTaskCreateStatic>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	4a20      	ldr	r2, [pc, #128]	; (800d534 <vTaskStartScheduler+0xbc>)
 800d4b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d4b4:	4b1f      	ldr	r3, [pc, #124]	; (800d534 <vTaskStartScheduler+0xbc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	e001      	b.n	800d4c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d102      	bne.n	800d4d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4cc:	f000 feb0 	bl	800e230 <xTimerCreateTimerTask>
 800d4d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d116      	bne.n	800d506 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	613b      	str	r3, [r7, #16]
}
 800d4ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d4ec:	4b12      	ldr	r3, [pc, #72]	; (800d538 <vTaskStartScheduler+0xc0>)
 800d4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d4f4:	4b11      	ldr	r3, [pc, #68]	; (800d53c <vTaskStartScheduler+0xc4>)
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d4fa:	4b11      	ldr	r3, [pc, #68]	; (800d540 <vTaskStartScheduler+0xc8>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d500:	f001 fa8e 	bl	800ea20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d504:	e00e      	b.n	800d524 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d50c:	d10a      	bne.n	800d524 <vTaskStartScheduler+0xac>
	__asm volatile
 800d50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d512:	f383 8811 	msr	BASEPRI, r3
 800d516:	f3bf 8f6f 	isb	sy
 800d51a:	f3bf 8f4f 	dsb	sy
 800d51e:	60fb      	str	r3, [r7, #12]
}
 800d520:	bf00      	nop
 800d522:	e7fe      	b.n	800d522 <vTaskStartScheduler+0xaa>
}
 800d524:	bf00      	nop
 800d526:	3718      	adds	r7, #24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	080104c8 	.word	0x080104c8
 800d530:	0800dc99 	.word	0x0800dc99
 800d534:	20000c9c 	.word	0x20000c9c
 800d538:	20000c98 	.word	0x20000c98
 800d53c:	20000c84 	.word	0x20000c84
 800d540:	20000c7c 	.word	0x20000c7c

0800d544 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d544:	b480      	push	{r7}
 800d546:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d548:	4b04      	ldr	r3, [pc, #16]	; (800d55c <vTaskSuspendAll+0x18>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3301      	adds	r3, #1
 800d54e:	4a03      	ldr	r2, [pc, #12]	; (800d55c <vTaskSuspendAll+0x18>)
 800d550:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d552:	bf00      	nop
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	20000ca0 	.word	0x20000ca0

0800d560 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d566:	2300      	movs	r3, #0
 800d568:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d56e:	4b42      	ldr	r3, [pc, #264]	; (800d678 <xTaskResumeAll+0x118>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10a      	bne.n	800d58c <xTaskResumeAll+0x2c>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	603b      	str	r3, [r7, #0]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d58c:	f001 faea 	bl	800eb64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d590:	4b39      	ldr	r3, [pc, #228]	; (800d678 <xTaskResumeAll+0x118>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3b01      	subs	r3, #1
 800d596:	4a38      	ldr	r2, [pc, #224]	; (800d678 <xTaskResumeAll+0x118>)
 800d598:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d59a:	4b37      	ldr	r3, [pc, #220]	; (800d678 <xTaskResumeAll+0x118>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d162      	bne.n	800d668 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5a2:	4b36      	ldr	r3, [pc, #216]	; (800d67c <xTaskResumeAll+0x11c>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d05e      	beq.n	800d668 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5aa:	e02f      	b.n	800d60c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ac:	4b34      	ldr	r3, [pc, #208]	; (800d680 <xTaskResumeAll+0x120>)
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3318      	adds	r3, #24
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fe fcd1 	bl	800bf60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fe fccc 	bl	800bf60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5cc:	4b2d      	ldr	r3, [pc, #180]	; (800d684 <xTaskResumeAll+0x124>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d903      	bls.n	800d5dc <xTaskResumeAll+0x7c>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	4a2a      	ldr	r2, [pc, #168]	; (800d684 <xTaskResumeAll+0x124>)
 800d5da:	6013      	str	r3, [r2, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	4a27      	ldr	r2, [pc, #156]	; (800d688 <xTaskResumeAll+0x128>)
 800d5ea:	441a      	add	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	f7fe fc57 	bl	800bea6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fc:	4b23      	ldr	r3, [pc, #140]	; (800d68c <xTaskResumeAll+0x12c>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d602:	429a      	cmp	r2, r3
 800d604:	d302      	bcc.n	800d60c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d606:	4b22      	ldr	r3, [pc, #136]	; (800d690 <xTaskResumeAll+0x130>)
 800d608:	2201      	movs	r2, #1
 800d60a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d60c:	4b1c      	ldr	r3, [pc, #112]	; (800d680 <xTaskResumeAll+0x120>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1cb      	bne.n	800d5ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d61a:	f000 fbf3 	bl	800de04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d61e:	4b1d      	ldr	r3, [pc, #116]	; (800d694 <xTaskResumeAll+0x134>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d010      	beq.n	800d64c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d62a:	f000 f847 	bl	800d6bc <xTaskIncrementTick>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d002      	beq.n	800d63a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d634:	4b16      	ldr	r3, [pc, #88]	; (800d690 <xTaskResumeAll+0x130>)
 800d636:	2201      	movs	r2, #1
 800d638:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1f1      	bne.n	800d62a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d646:	4b13      	ldr	r3, [pc, #76]	; (800d694 <xTaskResumeAll+0x134>)
 800d648:	2200      	movs	r2, #0
 800d64a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d64c:	4b10      	ldr	r3, [pc, #64]	; (800d690 <xTaskResumeAll+0x130>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d009      	beq.n	800d668 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d654:	2301      	movs	r3, #1
 800d656:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d658:	4b0f      	ldr	r3, [pc, #60]	; (800d698 <xTaskResumeAll+0x138>)
 800d65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d668:	f001 faac 	bl	800ebc4 <vPortExitCritical>

	return xAlreadyYielded;
 800d66c:	68bb      	ldr	r3, [r7, #8]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000ca0 	.word	0x20000ca0
 800d67c:	20000c78 	.word	0x20000c78
 800d680:	20000c38 	.word	0x20000c38
 800d684:	20000c80 	.word	0x20000c80
 800d688:	200007a8 	.word	0x200007a8
 800d68c:	200007a4 	.word	0x200007a4
 800d690:	20000c8c 	.word	0x20000c8c
 800d694:	20000c88 	.word	0x20000c88
 800d698:	e000ed04 	.word	0xe000ed04

0800d69c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6a2:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <xTaskGetTickCount+0x1c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d6a8:	687b      	ldr	r3, [r7, #4]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	20000c7c 	.word	0x20000c7c

0800d6bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6c6:	4b4f      	ldr	r3, [pc, #316]	; (800d804 <xTaskIncrementTick+0x148>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f040 808f 	bne.w	800d7ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d6d0:	4b4d      	ldr	r3, [pc, #308]	; (800d808 <xTaskIncrementTick+0x14c>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d6d8:	4a4b      	ldr	r2, [pc, #300]	; (800d808 <xTaskIncrementTick+0x14c>)
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d120      	bne.n	800d726 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d6e4:	4b49      	ldr	r3, [pc, #292]	; (800d80c <xTaskIncrementTick+0x150>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00a      	beq.n	800d704 <xTaskIncrementTick+0x48>
	__asm volatile
 800d6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f2:	f383 8811 	msr	BASEPRI, r3
 800d6f6:	f3bf 8f6f 	isb	sy
 800d6fa:	f3bf 8f4f 	dsb	sy
 800d6fe:	603b      	str	r3, [r7, #0]
}
 800d700:	bf00      	nop
 800d702:	e7fe      	b.n	800d702 <xTaskIncrementTick+0x46>
 800d704:	4b41      	ldr	r3, [pc, #260]	; (800d80c <xTaskIncrementTick+0x150>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	4b41      	ldr	r3, [pc, #260]	; (800d810 <xTaskIncrementTick+0x154>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a3f      	ldr	r2, [pc, #252]	; (800d80c <xTaskIncrementTick+0x150>)
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	4a3f      	ldr	r2, [pc, #252]	; (800d810 <xTaskIncrementTick+0x154>)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	4b3e      	ldr	r3, [pc, #248]	; (800d814 <xTaskIncrementTick+0x158>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3301      	adds	r3, #1
 800d71e:	4a3d      	ldr	r2, [pc, #244]	; (800d814 <xTaskIncrementTick+0x158>)
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	f000 fb6f 	bl	800de04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d726:	4b3c      	ldr	r3, [pc, #240]	; (800d818 <xTaskIncrementTick+0x15c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	693a      	ldr	r2, [r7, #16]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d349      	bcc.n	800d7c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d730:	4b36      	ldr	r3, [pc, #216]	; (800d80c <xTaskIncrementTick+0x150>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d104      	bne.n	800d744 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d73a:	4b37      	ldr	r3, [pc, #220]	; (800d818 <xTaskIncrementTick+0x15c>)
 800d73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d740:	601a      	str	r2, [r3, #0]
					break;
 800d742:	e03f      	b.n	800d7c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d744:	4b31      	ldr	r3, [pc, #196]	; (800d80c <xTaskIncrementTick+0x150>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d203      	bcs.n	800d764 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d75c:	4a2e      	ldr	r2, [pc, #184]	; (800d818 <xTaskIncrementTick+0x15c>)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d762:	e02f      	b.n	800d7c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	3304      	adds	r3, #4
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe fbf9 	bl	800bf60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d772:	2b00      	cmp	r3, #0
 800d774:	d004      	beq.n	800d780 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	3318      	adds	r3, #24
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe fbf0 	bl	800bf60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d784:	4b25      	ldr	r3, [pc, #148]	; (800d81c <xTaskIncrementTick+0x160>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d903      	bls.n	800d794 <xTaskIncrementTick+0xd8>
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	4a22      	ldr	r2, [pc, #136]	; (800d81c <xTaskIncrementTick+0x160>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4a1f      	ldr	r2, [pc, #124]	; (800d820 <xTaskIncrementTick+0x164>)
 800d7a2:	441a      	add	r2, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	f7fe fb7b 	bl	800bea6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b4:	4b1b      	ldr	r3, [pc, #108]	; (800d824 <xTaskIncrementTick+0x168>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d3b8      	bcc.n	800d730 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7c2:	e7b5      	b.n	800d730 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7c4:	4b17      	ldr	r3, [pc, #92]	; (800d824 <xTaskIncrementTick+0x168>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ca:	4915      	ldr	r1, [pc, #84]	; (800d820 <xTaskIncrementTick+0x164>)
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	440b      	add	r3, r1
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d901      	bls.n	800d7e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d7e0:	4b11      	ldr	r3, [pc, #68]	; (800d828 <xTaskIncrementTick+0x16c>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d007      	beq.n	800d7f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	617b      	str	r3, [r7, #20]
 800d7ec:	e004      	b.n	800d7f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <xTaskIncrementTick+0x170>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a0d      	ldr	r2, [pc, #52]	; (800d82c <xTaskIncrementTick+0x170>)
 800d7f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d7f8:	697b      	ldr	r3, [r7, #20]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20000ca0 	.word	0x20000ca0
 800d808:	20000c7c 	.word	0x20000c7c
 800d80c:	20000c30 	.word	0x20000c30
 800d810:	20000c34 	.word	0x20000c34
 800d814:	20000c90 	.word	0x20000c90
 800d818:	20000c98 	.word	0x20000c98
 800d81c:	20000c80 	.word	0x20000c80
 800d820:	200007a8 	.word	0x200007a8
 800d824:	200007a4 	.word	0x200007a4
 800d828:	20000c8c 	.word	0x20000c8c
 800d82c:	20000c88 	.word	0x20000c88

0800d830 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d836:	4b28      	ldr	r3, [pc, #160]	; (800d8d8 <vTaskSwitchContext+0xa8>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d83e:	4b27      	ldr	r3, [pc, #156]	; (800d8dc <vTaskSwitchContext+0xac>)
 800d840:	2201      	movs	r2, #1
 800d842:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d844:	e041      	b.n	800d8ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d846:	4b25      	ldr	r3, [pc, #148]	; (800d8dc <vTaskSwitchContext+0xac>)
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d84c:	4b24      	ldr	r3, [pc, #144]	; (800d8e0 <vTaskSwitchContext+0xb0>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	e010      	b.n	800d876 <vTaskSwitchContext+0x46>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d10a      	bne.n	800d870 <vTaskSwitchContext+0x40>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	f383 8811 	msr	BASEPRI, r3
 800d862:	f3bf 8f6f 	isb	sy
 800d866:	f3bf 8f4f 	dsb	sy
 800d86a:	607b      	str	r3, [r7, #4]
}
 800d86c:	bf00      	nop
 800d86e:	e7fe      	b.n	800d86e <vTaskSwitchContext+0x3e>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	3b01      	subs	r3, #1
 800d874:	60fb      	str	r3, [r7, #12]
 800d876:	491b      	ldr	r1, [pc, #108]	; (800d8e4 <vTaskSwitchContext+0xb4>)
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	4613      	mov	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	440b      	add	r3, r1
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d0e4      	beq.n	800d854 <vTaskSwitchContext+0x24>
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4613      	mov	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	4a13      	ldr	r2, [pc, #76]	; (800d8e4 <vTaskSwitchContext+0xb4>)
 800d896:	4413      	add	r3, r2
 800d898:	60bb      	str	r3, [r7, #8]
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	605a      	str	r2, [r3, #4]
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d104      	bne.n	800d8ba <vTaskSwitchContext+0x8a>
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	605a      	str	r2, [r3, #4]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	68db      	ldr	r3, [r3, #12]
 800d8c0:	4a09      	ldr	r2, [pc, #36]	; (800d8e8 <vTaskSwitchContext+0xb8>)
 800d8c2:	6013      	str	r3, [r2, #0]
 800d8c4:	4a06      	ldr	r2, [pc, #24]	; (800d8e0 <vTaskSwitchContext+0xb0>)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6013      	str	r3, [r2, #0]
}
 800d8ca:	bf00      	nop
 800d8cc:	3714      	adds	r7, #20
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	20000ca0 	.word	0x20000ca0
 800d8dc:	20000c8c 	.word	0x20000c8c
 800d8e0:	20000c80 	.word	0x20000c80
 800d8e4:	200007a8 	.word	0x200007a8
 800d8e8:	200007a4 	.word	0x200007a4

0800d8ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	60fb      	str	r3, [r7, #12]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d912:	4b07      	ldr	r3, [pc, #28]	; (800d930 <vTaskPlaceOnEventList+0x44>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3318      	adds	r3, #24
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7fe fae7 	bl	800beee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d920:	2101      	movs	r1, #1
 800d922:	6838      	ldr	r0, [r7, #0]
 800d924:	f000 fc30 	bl	800e188 <prvAddCurrentTaskToDelayedList>
}
 800d928:	bf00      	nop
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	200007a4 	.word	0x200007a4

0800d934 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10a      	bne.n	800d95c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	617b      	str	r3, [r7, #20]
}
 800d958:	bf00      	nop
 800d95a:	e7fe      	b.n	800d95a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800d95c:	4b11      	ldr	r3, [pc, #68]	; (800d9a4 <vTaskPlaceOnUnorderedEventList+0x70>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	613b      	str	r3, [r7, #16]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800d97a:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800d984:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d986:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3318      	adds	r3, #24
 800d98c:	4619      	mov	r1, r3
 800d98e:	68f8      	ldr	r0, [r7, #12]
 800d990:	f7fe fa89 	bl	800bea6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d994:	2101      	movs	r1, #1
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fbf6 	bl	800e188 <prvAddCurrentTaskToDelayedList>
}
 800d99c:	bf00      	nop
 800d99e:	3718      	adds	r7, #24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	20000ca0 	.word	0x20000ca0
 800d9a8:	200007a4 	.word	0x200007a4

0800d9ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b086      	sub	sp, #24
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10a      	bne.n	800d9d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	617b      	str	r3, [r7, #20]
}
 800d9d0:	bf00      	nop
 800d9d2:	e7fe      	b.n	800d9d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9d4:	4b0a      	ldr	r3, [pc, #40]	; (800da00 <vTaskPlaceOnEventListRestricted+0x54>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	3318      	adds	r3, #24
 800d9da:	4619      	mov	r1, r3
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f7fe fa62 	bl	800bea6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d002      	beq.n	800d9ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d9ee:	6879      	ldr	r1, [r7, #4]
 800d9f0:	68b8      	ldr	r0, [r7, #8]
 800d9f2:	f000 fbc9 	bl	800e188 <prvAddCurrentTaskToDelayedList>
	}
 800d9f6:	bf00      	nop
 800d9f8:	3718      	adds	r7, #24
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	200007a4 	.word	0x200007a4

0800da04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	60fb      	str	r3, [r7, #12]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	3318      	adds	r3, #24
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe fa93 	bl	800bf60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da3a:	4b1e      	ldr	r3, [pc, #120]	; (800dab4 <xTaskRemoveFromEventList+0xb0>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d11d      	bne.n	800da7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	3304      	adds	r3, #4
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe fa8a 	bl	800bf60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da50:	4b19      	ldr	r3, [pc, #100]	; (800dab8 <xTaskRemoveFromEventList+0xb4>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	429a      	cmp	r2, r3
 800da56:	d903      	bls.n	800da60 <xTaskRemoveFromEventList+0x5c>
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	4a16      	ldr	r2, [pc, #88]	; (800dab8 <xTaskRemoveFromEventList+0xb4>)
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da64:	4613      	mov	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4a13      	ldr	r2, [pc, #76]	; (800dabc <xTaskRemoveFromEventList+0xb8>)
 800da6e:	441a      	add	r2, r3
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	3304      	adds	r3, #4
 800da74:	4619      	mov	r1, r3
 800da76:	4610      	mov	r0, r2
 800da78:	f7fe fa15 	bl	800bea6 <vListInsertEnd>
 800da7c:	e005      	b.n	800da8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	3318      	adds	r3, #24
 800da82:	4619      	mov	r1, r3
 800da84:	480e      	ldr	r0, [pc, #56]	; (800dac0 <xTaskRemoveFromEventList+0xbc>)
 800da86:	f7fe fa0e 	bl	800bea6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da8e:	4b0d      	ldr	r3, [pc, #52]	; (800dac4 <xTaskRemoveFromEventList+0xc0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da94:	429a      	cmp	r2, r3
 800da96:	d905      	bls.n	800daa4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800da98:	2301      	movs	r3, #1
 800da9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800da9c:	4b0a      	ldr	r3, [pc, #40]	; (800dac8 <xTaskRemoveFromEventList+0xc4>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	601a      	str	r2, [r3, #0]
 800daa2:	e001      	b.n	800daa8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800daa4:	2300      	movs	r3, #0
 800daa6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800daa8:	697b      	ldr	r3, [r7, #20]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20000ca0 	.word	0x20000ca0
 800dab8:	20000c80 	.word	0x20000c80
 800dabc:	200007a8 	.word	0x200007a8
 800dac0:	20000c38 	.word	0x20000c38
 800dac4:	200007a4 	.word	0x200007a4
 800dac8:	20000c8c 	.word	0x20000c8c

0800dacc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800dad6:	4b29      	ldr	r3, [pc, #164]	; (800db7c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d10a      	bne.n	800daf4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800dade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae2:	f383 8811 	msr	BASEPRI, r3
 800dae6:	f3bf 8f6f 	isb	sy
 800daea:	f3bf 8f4f 	dsb	sy
 800daee:	613b      	str	r3, [r7, #16]
}
 800daf0:	bf00      	nop
 800daf2:	e7fe      	b.n	800daf2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d10a      	bne.n	800db20 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800db0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0e:	f383 8811 	msr	BASEPRI, r3
 800db12:	f3bf 8f6f 	isb	sy
 800db16:	f3bf 8f4f 	dsb	sy
 800db1a:	60fb      	str	r3, [r7, #12]
}
 800db1c:	bf00      	nop
 800db1e:	e7fe      	b.n	800db1e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7fe fa1d 	bl	800bf60 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	3304      	adds	r3, #4
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fe fa18 	bl	800bf60 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db34:	4b12      	ldr	r3, [pc, #72]	; (800db80 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d903      	bls.n	800db44 <vTaskRemoveFromUnorderedEventList+0x78>
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db40:	4a0f      	ldr	r2, [pc, #60]	; (800db80 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800db42:	6013      	str	r3, [r2, #0]
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db48:	4613      	mov	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4413      	add	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	4a0c      	ldr	r2, [pc, #48]	; (800db84 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800db52:	441a      	add	r2, r3
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	3304      	adds	r3, #4
 800db58:	4619      	mov	r1, r3
 800db5a:	4610      	mov	r0, r2
 800db5c:	f7fe f9a3 	bl	800bea6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db64:	4b08      	ldr	r3, [pc, #32]	; (800db88 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d902      	bls.n	800db74 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800db6e:	4b07      	ldr	r3, [pc, #28]	; (800db8c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800db70:	2201      	movs	r2, #1
 800db72:	601a      	str	r2, [r3, #0]
	}
}
 800db74:	bf00      	nop
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20000ca0 	.word	0x20000ca0
 800db80:	20000c80 	.word	0x20000c80
 800db84:	200007a8 	.word	0x200007a8
 800db88:	200007a4 	.word	0x200007a4
 800db8c:	20000c8c 	.word	0x20000c8c

0800db90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db98:	4b06      	ldr	r3, [pc, #24]	; (800dbb4 <vTaskInternalSetTimeOutState+0x24>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dba0:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <vTaskInternalSetTimeOutState+0x28>)
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	605a      	str	r2, [r3, #4]
}
 800dba8:	bf00      	nop
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	20000c90 	.word	0x20000c90
 800dbb8:	20000c7c 	.word	0x20000c7c

0800dbbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d10a      	bne.n	800dbe2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	613b      	str	r3, [r7, #16]
}
 800dbde:	bf00      	nop
 800dbe0:	e7fe      	b.n	800dbe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10a      	bne.n	800dbfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	60fb      	str	r3, [r7, #12]
}
 800dbfa:	bf00      	nop
 800dbfc:	e7fe      	b.n	800dbfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dbfe:	f000 ffb1 	bl	800eb64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc02:	4b1d      	ldr	r3, [pc, #116]	; (800dc78 <xTaskCheckForTimeOut+0xbc>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	69ba      	ldr	r2, [r7, #24]
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc1a:	d102      	bne.n	800dc22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61fb      	str	r3, [r7, #28]
 800dc20:	e023      	b.n	800dc6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	4b15      	ldr	r3, [pc, #84]	; (800dc7c <xTaskCheckForTimeOut+0xc0>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d007      	beq.n	800dc3e <xTaskCheckForTimeOut+0x82>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	69ba      	ldr	r2, [r7, #24]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d302      	bcc.n	800dc3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	61fb      	str	r3, [r7, #28]
 800dc3c:	e015      	b.n	800dc6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	697a      	ldr	r2, [r7, #20]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d20b      	bcs.n	800dc60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	1ad2      	subs	r2, r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7ff ff9b 	bl	800db90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	61fb      	str	r3, [r7, #28]
 800dc5e:	e004      	b.n	800dc6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc66:	2301      	movs	r3, #1
 800dc68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc6a:	f000 ffab 	bl	800ebc4 <vPortExitCritical>

	return xReturn;
 800dc6e:	69fb      	ldr	r3, [r7, #28]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3720      	adds	r7, #32
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	20000c7c 	.word	0x20000c7c
 800dc7c:	20000c90 	.word	0x20000c90

0800dc80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dc80:	b480      	push	{r7}
 800dc82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dc84:	4b03      	ldr	r3, [pc, #12]	; (800dc94 <vTaskMissedYield+0x14>)
 800dc86:	2201      	movs	r2, #1
 800dc88:	601a      	str	r2, [r3, #0]
}
 800dc8a:	bf00      	nop
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	20000c8c 	.word	0x20000c8c

0800dc98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dca0:	f000 f852 	bl	800dd48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dca4:	4b06      	ldr	r3, [pc, #24]	; (800dcc0 <prvIdleTask+0x28>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d9f9      	bls.n	800dca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dcac:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <prvIdleTask+0x2c>)
 800dcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dcbc:	e7f0      	b.n	800dca0 <prvIdleTask+0x8>
 800dcbe:	bf00      	nop
 800dcc0:	200007a8 	.word	0x200007a8
 800dcc4:	e000ed04 	.word	0xe000ed04

0800dcc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcce:	2300      	movs	r3, #0
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	e00c      	b.n	800dcee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4a12      	ldr	r2, [pc, #72]	; (800dd28 <prvInitialiseTaskLists+0x60>)
 800dce0:	4413      	add	r3, r2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe f8b2 	bl	800be4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	3301      	adds	r3, #1
 800dcec:	607b      	str	r3, [r7, #4]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b37      	cmp	r3, #55	; 0x37
 800dcf2:	d9ef      	bls.n	800dcd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dcf4:	480d      	ldr	r0, [pc, #52]	; (800dd2c <prvInitialiseTaskLists+0x64>)
 800dcf6:	f7fe f8a9 	bl	800be4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcfa:	480d      	ldr	r0, [pc, #52]	; (800dd30 <prvInitialiseTaskLists+0x68>)
 800dcfc:	f7fe f8a6 	bl	800be4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd00:	480c      	ldr	r0, [pc, #48]	; (800dd34 <prvInitialiseTaskLists+0x6c>)
 800dd02:	f7fe f8a3 	bl	800be4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd06:	480c      	ldr	r0, [pc, #48]	; (800dd38 <prvInitialiseTaskLists+0x70>)
 800dd08:	f7fe f8a0 	bl	800be4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd0c:	480b      	ldr	r0, [pc, #44]	; (800dd3c <prvInitialiseTaskLists+0x74>)
 800dd0e:	f7fe f89d 	bl	800be4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd12:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <prvInitialiseTaskLists+0x78>)
 800dd14:	4a05      	ldr	r2, [pc, #20]	; (800dd2c <prvInitialiseTaskLists+0x64>)
 800dd16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd18:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <prvInitialiseTaskLists+0x7c>)
 800dd1a:	4a05      	ldr	r2, [pc, #20]	; (800dd30 <prvInitialiseTaskLists+0x68>)
 800dd1c:	601a      	str	r2, [r3, #0]
}
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	200007a8 	.word	0x200007a8
 800dd2c:	20000c08 	.word	0x20000c08
 800dd30:	20000c1c 	.word	0x20000c1c
 800dd34:	20000c38 	.word	0x20000c38
 800dd38:	20000c4c 	.word	0x20000c4c
 800dd3c:	20000c64 	.word	0x20000c64
 800dd40:	20000c30 	.word	0x20000c30
 800dd44:	20000c34 	.word	0x20000c34

0800dd48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd4e:	e019      	b.n	800dd84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd50:	f000 ff08 	bl	800eb64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd54:	4b10      	ldr	r3, [pc, #64]	; (800dd98 <prvCheckTasksWaitingTermination+0x50>)
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe f8fd 	bl	800bf60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd66:	4b0d      	ldr	r3, [pc, #52]	; (800dd9c <prvCheckTasksWaitingTermination+0x54>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	4a0b      	ldr	r2, [pc, #44]	; (800dd9c <prvCheckTasksWaitingTermination+0x54>)
 800dd6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd70:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <prvCheckTasksWaitingTermination+0x58>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3b01      	subs	r3, #1
 800dd76:	4a0a      	ldr	r2, [pc, #40]	; (800dda0 <prvCheckTasksWaitingTermination+0x58>)
 800dd78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd7a:	f000 ff23 	bl	800ebc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f810 	bl	800dda4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd84:	4b06      	ldr	r3, [pc, #24]	; (800dda0 <prvCheckTasksWaitingTermination+0x58>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e1      	bne.n	800dd50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dd8c:	bf00      	nop
 800dd8e:	bf00      	nop
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20000c4c 	.word	0x20000c4c
 800dd9c:	20000c78 	.word	0x20000c78
 800dda0:	20000c60 	.word	0x20000c60

0800dda4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d108      	bne.n	800ddc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f001 f8c0 	bl	800ef40 <vPortFree>
				vPortFree( pxTCB );
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f001 f8bd 	bl	800ef40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddc6:	e018      	b.n	800ddfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d103      	bne.n	800ddda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f001 f8b4 	bl	800ef40 <vPortFree>
	}
 800ddd8:	e00f      	b.n	800ddfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d00a      	beq.n	800ddfa <prvDeleteTCB+0x56>
	__asm volatile
 800dde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde8:	f383 8811 	msr	BASEPRI, r3
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	60fb      	str	r3, [r7, #12]
}
 800ddf6:	bf00      	nop
 800ddf8:	e7fe      	b.n	800ddf8 <prvDeleteTCB+0x54>
	}
 800ddfa:	bf00      	nop
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
	...

0800de04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de0a:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <prvResetNextTaskUnblockTime+0x38>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d104      	bne.n	800de1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de14:	4b0a      	ldr	r3, [pc, #40]	; (800de40 <prvResetNextTaskUnblockTime+0x3c>)
 800de16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de1c:	e008      	b.n	800de30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de1e:	4b07      	ldr	r3, [pc, #28]	; (800de3c <prvResetNextTaskUnblockTime+0x38>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	4a04      	ldr	r2, [pc, #16]	; (800de40 <prvResetNextTaskUnblockTime+0x3c>)
 800de2e:	6013      	str	r3, [r2, #0]
}
 800de30:	bf00      	nop
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	20000c30 	.word	0x20000c30
 800de40:	20000c98 	.word	0x20000c98

0800de44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de4a:	4b0b      	ldr	r3, [pc, #44]	; (800de78 <xTaskGetSchedulerState+0x34>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d102      	bne.n	800de58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de52:	2301      	movs	r3, #1
 800de54:	607b      	str	r3, [r7, #4]
 800de56:	e008      	b.n	800de6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de58:	4b08      	ldr	r3, [pc, #32]	; (800de7c <xTaskGetSchedulerState+0x38>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d102      	bne.n	800de66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de60:	2302      	movs	r3, #2
 800de62:	607b      	str	r3, [r7, #4]
 800de64:	e001      	b.n	800de6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de66:	2300      	movs	r3, #0
 800de68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de6a:	687b      	ldr	r3, [r7, #4]
	}
 800de6c:	4618      	mov	r0, r3
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr
 800de78:	20000c84 	.word	0x20000c84
 800de7c:	20000ca0 	.word	0x20000ca0

0800de80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d051      	beq.n	800df3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de9a:	4b2a      	ldr	r3, [pc, #168]	; (800df44 <xTaskPriorityInherit+0xc4>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d241      	bcs.n	800df28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	db06      	blt.n	800deba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deac:	4b25      	ldr	r3, [pc, #148]	; (800df44 <xTaskPriorityInherit+0xc4>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	6959      	ldr	r1, [r3, #20]
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4a1f      	ldr	r2, [pc, #124]	; (800df48 <xTaskPriorityInherit+0xc8>)
 800decc:	4413      	add	r3, r2
 800dece:	4299      	cmp	r1, r3
 800ded0:	d122      	bne.n	800df18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	3304      	adds	r3, #4
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe f842 	bl	800bf60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dedc:	4b19      	ldr	r3, [pc, #100]	; (800df44 <xTaskPriorityInherit+0xc4>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deea:	4b18      	ldr	r3, [pc, #96]	; (800df4c <xTaskPriorityInherit+0xcc>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d903      	bls.n	800defa <xTaskPriorityInherit+0x7a>
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def6:	4a15      	ldr	r2, [pc, #84]	; (800df4c <xTaskPriorityInherit+0xcc>)
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4a10      	ldr	r2, [pc, #64]	; (800df48 <xTaskPriorityInherit+0xc8>)
 800df08:	441a      	add	r2, r3
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	3304      	adds	r3, #4
 800df0e:	4619      	mov	r1, r3
 800df10:	4610      	mov	r0, r2
 800df12:	f7fd ffc8 	bl	800bea6 <vListInsertEnd>
 800df16:	e004      	b.n	800df22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df18:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <xTaskPriorityInherit+0xc4>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df22:	2301      	movs	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	e008      	b.n	800df3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <xTaskPriorityInherit+0xc4>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df32:	429a      	cmp	r2, r3
 800df34:	d201      	bcs.n	800df3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df36:	2301      	movs	r3, #1
 800df38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df3a:	68fb      	ldr	r3, [r7, #12]
	}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	200007a4 	.word	0x200007a4
 800df48:	200007a8 	.word	0x200007a8
 800df4c:	20000c80 	.word	0x20000c80

0800df50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df5c:	2300      	movs	r3, #0
 800df5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d056      	beq.n	800e014 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df66:	4b2e      	ldr	r3, [pc, #184]	; (800e020 <xTaskPriorityDisinherit+0xd0>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	693a      	ldr	r2, [r7, #16]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d00a      	beq.n	800df86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	60fb      	str	r3, [r7, #12]
}
 800df82:	bf00      	nop
 800df84:	e7fe      	b.n	800df84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10a      	bne.n	800dfa4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	60bb      	str	r3, [r7, #8]
}
 800dfa0:	bf00      	nop
 800dfa2:	e7fe      	b.n	800dfa2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfa8:	1e5a      	subs	r2, r3, #1
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d02c      	beq.n	800e014 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d128      	bne.n	800e014 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fd ffca 	bl	800bf60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe4:	4b0f      	ldr	r3, [pc, #60]	; (800e024 <xTaskPriorityDisinherit+0xd4>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d903      	bls.n	800dff4 <xTaskPriorityDisinherit+0xa4>
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff0:	4a0c      	ldr	r2, [pc, #48]	; (800e024 <xTaskPriorityDisinherit+0xd4>)
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff8:	4613      	mov	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4a09      	ldr	r2, [pc, #36]	; (800e028 <xTaskPriorityDisinherit+0xd8>)
 800e002:	441a      	add	r2, r3
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	3304      	adds	r3, #4
 800e008:	4619      	mov	r1, r3
 800e00a:	4610      	mov	r0, r2
 800e00c:	f7fd ff4b 	bl	800bea6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e010:	2301      	movs	r3, #1
 800e012:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e014:	697b      	ldr	r3, [r7, #20]
	}
 800e016:	4618      	mov	r0, r3
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	200007a4 	.word	0x200007a4
 800e024:	20000c80 	.word	0x20000c80
 800e028:	200007a8 	.word	0x200007a8

0800e02c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b088      	sub	sp, #32
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e03a:	2301      	movs	r3, #1
 800e03c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d06a      	beq.n	800e11a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d10a      	bne.n	800e062 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	60fb      	str	r3, [r7, #12]
}
 800e05e:	bf00      	nop
 800e060:	e7fe      	b.n	800e060 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d902      	bls.n	800e072 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	61fb      	str	r3, [r7, #28]
 800e070:	e002      	b.n	800e078 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e076:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e078:	69bb      	ldr	r3, [r7, #24]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	69fa      	ldr	r2, [r7, #28]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d04b      	beq.n	800e11a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d146      	bne.n	800e11a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e08c:	4b25      	ldr	r3, [pc, #148]	; (800e124 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	69ba      	ldr	r2, [r7, #24]
 800e092:	429a      	cmp	r2, r3
 800e094:	d10a      	bne.n	800e0ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	60bb      	str	r3, [r7, #8]
}
 800e0a8:	bf00      	nop
 800e0aa:	e7fe      	b.n	800e0aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	69fa      	ldr	r2, [r7, #28]
 800e0b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	db04      	blt.n	800e0ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0c6:	69bb      	ldr	r3, [r7, #24]
 800e0c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	6959      	ldr	r1, [r3, #20]
 800e0ce:	693a      	ldr	r2, [r7, #16]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4a13      	ldr	r2, [pc, #76]	; (800e128 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e0da:	4413      	add	r3, r2
 800e0dc:	4299      	cmp	r1, r3
 800e0de:	d11c      	bne.n	800e11a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fd ff3b 	bl	800bf60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ee:	4b0f      	ldr	r3, [pc, #60]	; (800e12c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d903      	bls.n	800e0fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fa:	4a0c      	ldr	r2, [pc, #48]	; (800e12c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e102:	4613      	mov	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4413      	add	r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	4a07      	ldr	r2, [pc, #28]	; (800e128 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e10c:	441a      	add	r2, r3
 800e10e:	69bb      	ldr	r3, [r7, #24]
 800e110:	3304      	adds	r3, #4
 800e112:	4619      	mov	r1, r3
 800e114:	4610      	mov	r0, r2
 800e116:	f7fd fec6 	bl	800bea6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e11a:	bf00      	nop
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	200007a4 	.word	0x200007a4
 800e128:	200007a8 	.word	0x200007a8
 800e12c:	20000c80 	.word	0x20000c80

0800e130 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800e136:	4b09      	ldr	r3, [pc, #36]	; (800e15c <uxTaskResetEventItemValue+0x2c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	699b      	ldr	r3, [r3, #24]
 800e13c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e13e:	4b07      	ldr	r3, [pc, #28]	; (800e15c <uxTaskResetEventItemValue+0x2c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e144:	4b05      	ldr	r3, [pc, #20]	; (800e15c <uxTaskResetEventItemValue+0x2c>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800e14c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800e14e:	687b      	ldr	r3, [r7, #4]
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	200007a4 	.word	0x200007a4

0800e160 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e160:	b480      	push	{r7}
 800e162:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e164:	4b07      	ldr	r3, [pc, #28]	; (800e184 <pvTaskIncrementMutexHeldCount+0x24>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d004      	beq.n	800e176 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e16c:	4b05      	ldr	r3, [pc, #20]	; (800e184 <pvTaskIncrementMutexHeldCount+0x24>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e172:	3201      	adds	r2, #1
 800e174:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e176:	4b03      	ldr	r3, [pc, #12]	; (800e184 <pvTaskIncrementMutexHeldCount+0x24>)
 800e178:	681b      	ldr	r3, [r3, #0]
	}
 800e17a:	4618      	mov	r0, r3
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	200007a4 	.word	0x200007a4

0800e188 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e192:	4b21      	ldr	r3, [pc, #132]	; (800e218 <prvAddCurrentTaskToDelayedList+0x90>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e198:	4b20      	ldr	r3, [pc, #128]	; (800e21c <prvAddCurrentTaskToDelayedList+0x94>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fd fede 	bl	800bf60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1aa:	d10a      	bne.n	800e1c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d007      	beq.n	800e1c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1b2:	4b1a      	ldr	r3, [pc, #104]	; (800e21c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4819      	ldr	r0, [pc, #100]	; (800e220 <prvAddCurrentTaskToDelayedList+0x98>)
 800e1bc:	f7fd fe73 	bl	800bea6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1c0:	e026      	b.n	800e210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e1ca:	4b14      	ldr	r3, [pc, #80]	; (800e21c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d209      	bcs.n	800e1ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1da:	4b12      	ldr	r3, [pc, #72]	; (800e224 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	4b0f      	ldr	r3, [pc, #60]	; (800e21c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7fd fe81 	bl	800beee <vListInsert>
}
 800e1ec:	e010      	b.n	800e210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ee:	4b0e      	ldr	r3, [pc, #56]	; (800e228 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	4b0a      	ldr	r3, [pc, #40]	; (800e21c <prvAddCurrentTaskToDelayedList+0x94>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f7fd fe77 	bl	800beee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e200:	4b0a      	ldr	r3, [pc, #40]	; (800e22c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	429a      	cmp	r2, r3
 800e208:	d202      	bcs.n	800e210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e20a:	4a08      	ldr	r2, [pc, #32]	; (800e22c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	6013      	str	r3, [r2, #0]
}
 800e210:	bf00      	nop
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	20000c7c 	.word	0x20000c7c
 800e21c:	200007a4 	.word	0x200007a4
 800e220:	20000c64 	.word	0x20000c64
 800e224:	20000c34 	.word	0x20000c34
 800e228:	20000c30 	.word	0x20000c30
 800e22c:	20000c98 	.word	0x20000c98

0800e230 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08a      	sub	sp, #40	; 0x28
 800e234:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e236:	2300      	movs	r3, #0
 800e238:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e23a:	f000 fb07 	bl	800e84c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e23e:	4b1c      	ldr	r3, [pc, #112]	; (800e2b0 <xTimerCreateTimerTask+0x80>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d021      	beq.n	800e28a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e246:	2300      	movs	r3, #0
 800e248:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e24e:	1d3a      	adds	r2, r7, #4
 800e250:	f107 0108 	add.w	r1, r7, #8
 800e254:	f107 030c 	add.w	r3, r7, #12
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fd fbef 	bl	800ba3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	9202      	str	r2, [sp, #8]
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	2302      	movs	r3, #2
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	2300      	movs	r3, #0
 800e26e:	460a      	mov	r2, r1
 800e270:	4910      	ldr	r1, [pc, #64]	; (800e2b4 <xTimerCreateTimerTask+0x84>)
 800e272:	4811      	ldr	r0, [pc, #68]	; (800e2b8 <xTimerCreateTimerTask+0x88>)
 800e274:	f7fe feac 	bl	800cfd0 <xTaskCreateStatic>
 800e278:	4603      	mov	r3, r0
 800e27a:	4a10      	ldr	r2, [pc, #64]	; (800e2bc <xTimerCreateTimerTask+0x8c>)
 800e27c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e27e:	4b0f      	ldr	r3, [pc, #60]	; (800e2bc <xTimerCreateTimerTask+0x8c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e286:	2301      	movs	r3, #1
 800e288:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10a      	bne.n	800e2a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e294:	f383 8811 	msr	BASEPRI, r3
 800e298:	f3bf 8f6f 	isb	sy
 800e29c:	f3bf 8f4f 	dsb	sy
 800e2a0:	613b      	str	r3, [r7, #16]
}
 800e2a2:	bf00      	nop
 800e2a4:	e7fe      	b.n	800e2a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e2a6:	697b      	ldr	r3, [r7, #20]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	20000cd4 	.word	0x20000cd4
 800e2b4:	080104d0 	.word	0x080104d0
 800e2b8:	0800e3f5 	.word	0x0800e3f5
 800e2bc:	20000cd8 	.word	0x20000cd8

0800e2c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08a      	sub	sp, #40	; 0x28
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	607a      	str	r2, [r7, #4]
 800e2cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d10a      	bne.n	800e2ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800e2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	623b      	str	r3, [r7, #32]
}
 800e2ea:	bf00      	nop
 800e2ec:	e7fe      	b.n	800e2ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e2ee:	4b1a      	ldr	r3, [pc, #104]	; (800e358 <xTimerGenericCommand+0x98>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d02a      	beq.n	800e34c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2b05      	cmp	r3, #5
 800e306:	dc18      	bgt.n	800e33a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e308:	f7ff fd9c 	bl	800de44 <xTaskGetSchedulerState>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b02      	cmp	r3, #2
 800e310:	d109      	bne.n	800e326 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e312:	4b11      	ldr	r3, [pc, #68]	; (800e358 <xTimerGenericCommand+0x98>)
 800e314:	6818      	ldr	r0, [r3, #0]
 800e316:	f107 0110 	add.w	r1, r7, #16
 800e31a:	2300      	movs	r3, #0
 800e31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31e:	f7fd fff1 	bl	800c304 <xQueueGenericSend>
 800e322:	6278      	str	r0, [r7, #36]	; 0x24
 800e324:	e012      	b.n	800e34c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <xTimerGenericCommand+0x98>)
 800e328:	6818      	ldr	r0, [r3, #0]
 800e32a:	f107 0110 	add.w	r1, r7, #16
 800e32e:	2300      	movs	r3, #0
 800e330:	2200      	movs	r2, #0
 800e332:	f7fd ffe7 	bl	800c304 <xQueueGenericSend>
 800e336:	6278      	str	r0, [r7, #36]	; 0x24
 800e338:	e008      	b.n	800e34c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e33a:	4b07      	ldr	r3, [pc, #28]	; (800e358 <xTimerGenericCommand+0x98>)
 800e33c:	6818      	ldr	r0, [r3, #0]
 800e33e:	f107 0110 	add.w	r1, r7, #16
 800e342:	2300      	movs	r3, #0
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	f7fe f8db 	bl	800c500 <xQueueGenericSendFromISR>
 800e34a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3728      	adds	r7, #40	; 0x28
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20000cd4 	.word	0x20000cd4

0800e35c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af02      	add	r7, sp, #8
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e366:	4b22      	ldr	r3, [pc, #136]	; (800e3f0 <prvProcessExpiredTimer+0x94>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	3304      	adds	r3, #4
 800e374:	4618      	mov	r0, r3
 800e376:	f7fd fdf3 	bl	800bf60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b00      	cmp	r3, #0
 800e386:	d022      	beq.n	800e3ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	699a      	ldr	r2, [r3, #24]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	18d1      	adds	r1, r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	6978      	ldr	r0, [r7, #20]
 800e396:	f000 f8d1 	bl	800e53c <prvInsertTimerInActiveList>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d01f      	beq.n	800e3e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	6978      	ldr	r0, [r7, #20]
 800e3ac:	f7ff ff88 	bl	800e2c0 <xTimerGenericCommand>
 800e3b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d113      	bne.n	800e3e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	60fb      	str	r3, [r7, #12]
}
 800e3ca:	bf00      	nop
 800e3cc:	e7fe      	b.n	800e3cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3d4:	f023 0301 	bic.w	r3, r3, #1
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	6a1b      	ldr	r3, [r3, #32]
 800e3e4:	6978      	ldr	r0, [r7, #20]
 800e3e6:	4798      	blx	r3
}
 800e3e8:	bf00      	nop
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	20000ccc 	.word	0x20000ccc

0800e3f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e3fc:	f107 0308 	add.w	r3, r7, #8
 800e400:	4618      	mov	r0, r3
 800e402:	f000 f857 	bl	800e4b4 <prvGetNextExpireTime>
 800e406:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	4619      	mov	r1, r3
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f000 f803 	bl	800e418 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e412:	f000 f8d5 	bl	800e5c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e416:	e7f1      	b.n	800e3fc <prvTimerTask+0x8>

0800e418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e422:	f7ff f88f 	bl	800d544 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e426:	f107 0308 	add.w	r3, r7, #8
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 f866 	bl	800e4fc <prvSampleTimeNow>
 800e430:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d130      	bne.n	800e49a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d10a      	bne.n	800e454 <prvProcessTimerOrBlockTask+0x3c>
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	429a      	cmp	r2, r3
 800e444:	d806      	bhi.n	800e454 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e446:	f7ff f88b 	bl	800d560 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e44a:	68f9      	ldr	r1, [r7, #12]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff ff85 	bl	800e35c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e452:	e024      	b.n	800e49e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d008      	beq.n	800e46c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e45a:	4b13      	ldr	r3, [pc, #76]	; (800e4a8 <prvProcessTimerOrBlockTask+0x90>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <prvProcessTimerOrBlockTask+0x50>
 800e464:	2301      	movs	r3, #1
 800e466:	e000      	b.n	800e46a <prvProcessTimerOrBlockTask+0x52>
 800e468:	2300      	movs	r3, #0
 800e46a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e46c:	4b0f      	ldr	r3, [pc, #60]	; (800e4ac <prvProcessTimerOrBlockTask+0x94>)
 800e46e:	6818      	ldr	r0, [r3, #0]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	683a      	ldr	r2, [r7, #0]
 800e478:	4619      	mov	r1, r3
 800e47a:	f7fe fd75 	bl	800cf68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e47e:	f7ff f86f 	bl	800d560 <xTaskResumeAll>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d10a      	bne.n	800e49e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e488:	4b09      	ldr	r3, [pc, #36]	; (800e4b0 <prvProcessTimerOrBlockTask+0x98>)
 800e48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e48e:	601a      	str	r2, [r3, #0]
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	f3bf 8f6f 	isb	sy
}
 800e498:	e001      	b.n	800e49e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e49a:	f7ff f861 	bl	800d560 <xTaskResumeAll>
}
 800e49e:	bf00      	nop
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20000cd0 	.word	0x20000cd0
 800e4ac:	20000cd4 	.word	0x20000cd4
 800e4b0:	e000ed04 	.word	0xe000ed04

0800e4b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b085      	sub	sp, #20
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e4bc:	4b0e      	ldr	r3, [pc, #56]	; (800e4f8 <prvGetNextExpireTime+0x44>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d101      	bne.n	800e4ca <prvGetNextExpireTime+0x16>
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	e000      	b.n	800e4cc <prvGetNextExpireTime+0x18>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d105      	bne.n	800e4e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4d8:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <prvGetNextExpireTime+0x44>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	60fb      	str	r3, [r7, #12]
 800e4e2:	e001      	b.n	800e4e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3714      	adds	r7, #20
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	20000ccc 	.word	0x20000ccc

0800e4fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e504:	f7ff f8ca 	bl	800d69c <xTaskGetTickCount>
 800e508:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e50a:	4b0b      	ldr	r3, [pc, #44]	; (800e538 <prvSampleTimeNow+0x3c>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	429a      	cmp	r2, r3
 800e512:	d205      	bcs.n	800e520 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e514:	f000 f936 	bl	800e784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	e002      	b.n	800e526 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e526:	4a04      	ldr	r2, [pc, #16]	; (800e538 <prvSampleTimeNow+0x3c>)
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e52c:	68fb      	ldr	r3, [r7, #12]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	20000cdc 	.word	0x20000cdc

0800e53c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
 800e548:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e54a:	2300      	movs	r3, #0
 800e54c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e55a:	68ba      	ldr	r2, [r7, #8]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d812      	bhi.n	800e588 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	1ad2      	subs	r2, r2, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	699b      	ldr	r3, [r3, #24]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d302      	bcc.n	800e576 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e570:	2301      	movs	r3, #1
 800e572:	617b      	str	r3, [r7, #20]
 800e574:	e01b      	b.n	800e5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e576:	4b10      	ldr	r3, [pc, #64]	; (800e5b8 <prvInsertTimerInActiveList+0x7c>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3304      	adds	r3, #4
 800e57e:	4619      	mov	r1, r3
 800e580:	4610      	mov	r0, r2
 800e582:	f7fd fcb4 	bl	800beee <vListInsert>
 800e586:	e012      	b.n	800e5ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d206      	bcs.n	800e59e <prvInsertTimerInActiveList+0x62>
 800e590:	68ba      	ldr	r2, [r7, #8]
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	d302      	bcc.n	800e59e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e598:	2301      	movs	r3, #1
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	e007      	b.n	800e5ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e59e:	4b07      	ldr	r3, [pc, #28]	; (800e5bc <prvInsertTimerInActiveList+0x80>)
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	f7fd fca0 	bl	800beee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e5ae:	697b      	ldr	r3, [r7, #20]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	20000cd0 	.word	0x20000cd0
 800e5bc:	20000ccc 	.word	0x20000ccc

0800e5c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b08e      	sub	sp, #56	; 0x38
 800e5c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5c6:	e0ca      	b.n	800e75e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	da18      	bge.n	800e600 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e5ce:	1d3b      	adds	r3, r7, #4
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10a      	bne.n	800e5f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	61fb      	str	r3, [r7, #28]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f6:	6850      	ldr	r0, [r2, #4]
 800e5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5fa:	6892      	ldr	r2, [r2, #8]
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	f2c0 80aa 	blt.w	800e75c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	3304      	adds	r3, #4
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fd fca1 	bl	800bf60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e61e:	463b      	mov	r3, r7
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff ff6b 	bl	800e4fc <prvSampleTimeNow>
 800e626:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b09      	cmp	r3, #9
 800e62c:	f200 8097 	bhi.w	800e75e <prvProcessReceivedCommands+0x19e>
 800e630:	a201      	add	r2, pc, #4	; (adr r2, 800e638 <prvProcessReceivedCommands+0x78>)
 800e632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e636:	bf00      	nop
 800e638:	0800e661 	.word	0x0800e661
 800e63c:	0800e661 	.word	0x0800e661
 800e640:	0800e661 	.word	0x0800e661
 800e644:	0800e6d5 	.word	0x0800e6d5
 800e648:	0800e6e9 	.word	0x0800e6e9
 800e64c:	0800e733 	.word	0x0800e733
 800e650:	0800e661 	.word	0x0800e661
 800e654:	0800e661 	.word	0x0800e661
 800e658:	0800e6d5 	.word	0x0800e6d5
 800e65c:	0800e6e9 	.word	0x0800e6e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e666:	f043 0301 	orr.w	r3, r3, #1
 800e66a:	b2da      	uxtb	r2, r3
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e676:	699b      	ldr	r3, [r3, #24]
 800e678:	18d1      	adds	r1, r2, r3
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e680:	f7ff ff5c 	bl	800e53c <prvInsertTimerInActiveList>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d069      	beq.n	800e75e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	6a1b      	ldr	r3, [r3, #32]
 800e68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e690:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d05e      	beq.n	800e75e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e6a0:	68ba      	ldr	r2, [r7, #8]
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	699b      	ldr	r3, [r3, #24]
 800e6a6:	441a      	add	r2, r3
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6b2:	f7ff fe05 	bl	800e2c0 <xTimerGenericCommand>
 800e6b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e6b8:	6a3b      	ldr	r3, [r7, #32]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d14f      	bne.n	800e75e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	61bb      	str	r3, [r7, #24]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6da:	f023 0301 	bic.w	r3, r3, #1
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e6e6:	e03a      	b.n	800e75e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6ee:	f043 0301 	orr.w	r3, r3, #1
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d10a      	bne.n	800e71e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	617b      	str	r3, [r7, #20]
}
 800e71a:	bf00      	nop
 800e71c:	e7fe      	b.n	800e71c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e720:	699a      	ldr	r2, [r3, #24]
 800e722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e724:	18d1      	adds	r1, r2, r3
 800e726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e72c:	f7ff ff06 	bl	800e53c <prvInsertTimerInActiveList>
					break;
 800e730:	e015      	b.n	800e75e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e738:	f003 0302 	and.w	r3, r3, #2
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d103      	bne.n	800e748 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e742:	f000 fbfd 	bl	800ef40 <vPortFree>
 800e746:	e00a      	b.n	800e75e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e74e:	f023 0301 	bic.w	r3, r3, #1
 800e752:	b2da      	uxtb	r2, r3
 800e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e75a:	e000      	b.n	800e75e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e75c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e75e:	4b08      	ldr	r3, [pc, #32]	; (800e780 <prvProcessReceivedCommands+0x1c0>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	1d39      	adds	r1, r7, #4
 800e764:	2200      	movs	r2, #0
 800e766:	4618      	mov	r0, r3
 800e768:	f7fd fff2 	bl	800c750 <xQueueReceive>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f47f af2a 	bne.w	800e5c8 <prvProcessReceivedCommands+0x8>
	}
}
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	3730      	adds	r7, #48	; 0x30
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20000cd4 	.word	0x20000cd4

0800e784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b088      	sub	sp, #32
 800e788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e78a:	e048      	b.n	800e81e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e78c:	4b2d      	ldr	r3, [pc, #180]	; (800e844 <prvSwitchTimerLists+0xc0>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e796:	4b2b      	ldr	r3, [pc, #172]	; (800e844 <prvSwitchTimerLists+0xc0>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fd fbdb 	bl	800bf60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6a1b      	ldr	r3, [r3, #32]
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7b8:	f003 0304 	and.w	r3, r3, #4
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d02e      	beq.n	800e81e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d90e      	bls.n	800e7f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e7de:	4b19      	ldr	r3, [pc, #100]	; (800e844 <prvSwitchTimerLists+0xc0>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	f7fd fb80 	bl	800beee <vListInsert>
 800e7ee:	e016      	b.n	800e81e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	693a      	ldr	r2, [r7, #16]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	68f8      	ldr	r0, [r7, #12]
 800e7fc:	f7ff fd60 	bl	800e2c0 <xTimerGenericCommand>
 800e800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10a      	bne.n	800e81e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	603b      	str	r3, [r7, #0]
}
 800e81a:	bf00      	nop
 800e81c:	e7fe      	b.n	800e81c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e81e:	4b09      	ldr	r3, [pc, #36]	; (800e844 <prvSwitchTimerLists+0xc0>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1b1      	bne.n	800e78c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e828:	4b06      	ldr	r3, [pc, #24]	; (800e844 <prvSwitchTimerLists+0xc0>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e82e:	4b06      	ldr	r3, [pc, #24]	; (800e848 <prvSwitchTimerLists+0xc4>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a04      	ldr	r2, [pc, #16]	; (800e844 <prvSwitchTimerLists+0xc0>)
 800e834:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e836:	4a04      	ldr	r2, [pc, #16]	; (800e848 <prvSwitchTimerLists+0xc4>)
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	6013      	str	r3, [r2, #0]
}
 800e83c:	bf00      	nop
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	20000ccc 	.word	0x20000ccc
 800e848:	20000cd0 	.word	0x20000cd0

0800e84c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b082      	sub	sp, #8
 800e850:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e852:	f000 f987 	bl	800eb64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <prvCheckForValidListAndQueue+0x60>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d120      	bne.n	800e8a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e85e:	4814      	ldr	r0, [pc, #80]	; (800e8b0 <prvCheckForValidListAndQueue+0x64>)
 800e860:	f7fd faf4 	bl	800be4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e864:	4813      	ldr	r0, [pc, #76]	; (800e8b4 <prvCheckForValidListAndQueue+0x68>)
 800e866:	f7fd faf1 	bl	800be4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e86a:	4b13      	ldr	r3, [pc, #76]	; (800e8b8 <prvCheckForValidListAndQueue+0x6c>)
 800e86c:	4a10      	ldr	r2, [pc, #64]	; (800e8b0 <prvCheckForValidListAndQueue+0x64>)
 800e86e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e870:	4b12      	ldr	r3, [pc, #72]	; (800e8bc <prvCheckForValidListAndQueue+0x70>)
 800e872:	4a10      	ldr	r2, [pc, #64]	; (800e8b4 <prvCheckForValidListAndQueue+0x68>)
 800e874:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e876:	2300      	movs	r3, #0
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	4b11      	ldr	r3, [pc, #68]	; (800e8c0 <prvCheckForValidListAndQueue+0x74>)
 800e87c:	4a11      	ldr	r2, [pc, #68]	; (800e8c4 <prvCheckForValidListAndQueue+0x78>)
 800e87e:	2110      	movs	r1, #16
 800e880:	200a      	movs	r0, #10
 800e882:	f7fd fbff 	bl	800c084 <xQueueGenericCreateStatic>
 800e886:	4603      	mov	r3, r0
 800e888:	4a08      	ldr	r2, [pc, #32]	; (800e8ac <prvCheckForValidListAndQueue+0x60>)
 800e88a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e88c:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <prvCheckForValidListAndQueue+0x60>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d005      	beq.n	800e8a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e894:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <prvCheckForValidListAndQueue+0x60>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	490b      	ldr	r1, [pc, #44]	; (800e8c8 <prvCheckForValidListAndQueue+0x7c>)
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fe fb10 	bl	800cec0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8a0:	f000 f990 	bl	800ebc4 <vPortExitCritical>
}
 800e8a4:	bf00      	nop
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20000cd4 	.word	0x20000cd4
 800e8b0:	20000ca4 	.word	0x20000ca4
 800e8b4:	20000cb8 	.word	0x20000cb8
 800e8b8:	20000ccc 	.word	0x20000ccc
 800e8bc:	20000cd0 	.word	0x20000cd0
 800e8c0:	20000d80 	.word	0x20000d80
 800e8c4:	20000ce0 	.word	0x20000ce0
 800e8c8:	080104d8 	.word	0x080104d8

0800e8cc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b08a      	sub	sp, #40	; 0x28
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
 800e8d8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800e8da:	f06f 0301 	mvn.w	r3, #1
 800e8de:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <xTimerPendFunctionCallFromISR+0x3c>)
 800e8ee:	6818      	ldr	r0, [r3, #0]
 800e8f0:	f107 0114 	add.w	r1, r7, #20
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	683a      	ldr	r2, [r7, #0]
 800e8f8:	f7fd fe02 	bl	800c500 <xQueueGenericSendFromISR>
 800e8fc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e900:	4618      	mov	r0, r3
 800e902:	3728      	adds	r7, #40	; 0x28
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20000cd4 	.word	0x20000cd4

0800e90c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	3b04      	subs	r3, #4
 800e91c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3b04      	subs	r3, #4
 800e92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	f023 0201 	bic.w	r2, r3, #1
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	3b04      	subs	r3, #4
 800e93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e93c:	4a0c      	ldr	r2, [pc, #48]	; (800e970 <pxPortInitialiseStack+0x64>)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3b14      	subs	r3, #20
 800e946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	3b04      	subs	r3, #4
 800e952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f06f 0202 	mvn.w	r2, #2
 800e95a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3b20      	subs	r3, #32
 800e960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e962:	68fb      	ldr	r3, [r7, #12]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	0800e975 	.word	0x0800e975

0800e974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e97e:	4b12      	ldr	r3, [pc, #72]	; (800e9c8 <prvTaskExitError+0x54>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e986:	d00a      	beq.n	800e99e <prvTaskExitError+0x2a>
	__asm volatile
 800e988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98c:	f383 8811 	msr	BASEPRI, r3
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	60fb      	str	r3, [r7, #12]
}
 800e99a:	bf00      	nop
 800e99c:	e7fe      	b.n	800e99c <prvTaskExitError+0x28>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	60bb      	str	r3, [r7, #8]
}
 800e9b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9b2:	bf00      	nop
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0fc      	beq.n	800e9b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e9ba:	bf00      	nop
 800e9bc:	bf00      	nop
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	20000024 	.word	0x20000024
 800e9cc:	00000000 	.word	0x00000000

0800e9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e9d0:	4b07      	ldr	r3, [pc, #28]	; (800e9f0 <pxCurrentTCBConst2>)
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	6808      	ldr	r0, [r1, #0]
 800e9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9da:	f380 8809 	msr	PSP, r0
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f04f 0000 	mov.w	r0, #0
 800e9e6:	f380 8811 	msr	BASEPRI, r0
 800e9ea:	4770      	bx	lr
 800e9ec:	f3af 8000 	nop.w

0800e9f0 <pxCurrentTCBConst2>:
 800e9f0:	200007a4 	.word	0x200007a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e9f4:	bf00      	nop
 800e9f6:	bf00      	nop

0800e9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e9f8:	4808      	ldr	r0, [pc, #32]	; (800ea1c <prvPortStartFirstTask+0x24>)
 800e9fa:	6800      	ldr	r0, [r0, #0]
 800e9fc:	6800      	ldr	r0, [r0, #0]
 800e9fe:	f380 8808 	msr	MSP, r0
 800ea02:	f04f 0000 	mov.w	r0, #0
 800ea06:	f380 8814 	msr	CONTROL, r0
 800ea0a:	b662      	cpsie	i
 800ea0c:	b661      	cpsie	f
 800ea0e:	f3bf 8f4f 	dsb	sy
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	df00      	svc	0
 800ea18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea1a:	bf00      	nop
 800ea1c:	e000ed08 	.word	0xe000ed08

0800ea20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ea26:	4b46      	ldr	r3, [pc, #280]	; (800eb40 <xPortStartScheduler+0x120>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a46      	ldr	r2, [pc, #280]	; (800eb44 <xPortStartScheduler+0x124>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d10a      	bne.n	800ea46 <xPortStartScheduler+0x26>
	__asm volatile
 800ea30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea34:	f383 8811 	msr	BASEPRI, r3
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	f3bf 8f4f 	dsb	sy
 800ea40:	613b      	str	r3, [r7, #16]
}
 800ea42:	bf00      	nop
 800ea44:	e7fe      	b.n	800ea44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ea46:	4b3e      	ldr	r3, [pc, #248]	; (800eb40 <xPortStartScheduler+0x120>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a3f      	ldr	r2, [pc, #252]	; (800eb48 <xPortStartScheduler+0x128>)
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d10a      	bne.n	800ea66 <xPortStartScheduler+0x46>
	__asm volatile
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	60fb      	str	r3, [r7, #12]
}
 800ea62:	bf00      	nop
 800ea64:	e7fe      	b.n	800ea64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea66:	4b39      	ldr	r3, [pc, #228]	; (800eb4c <xPortStartScheduler+0x12c>)
 800ea68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	22ff      	movs	r2, #255	; 0xff
 800ea76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	781b      	ldrb	r3, [r3, #0]
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea80:	78fb      	ldrb	r3, [r7, #3]
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	4b31      	ldr	r3, [pc, #196]	; (800eb50 <xPortStartScheduler+0x130>)
 800ea8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ea8e:	4b31      	ldr	r3, [pc, #196]	; (800eb54 <xPortStartScheduler+0x134>)
 800ea90:	2207      	movs	r2, #7
 800ea92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea94:	e009      	b.n	800eaaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ea96:	4b2f      	ldr	r3, [pc, #188]	; (800eb54 <xPortStartScheduler+0x134>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	4a2d      	ldr	r2, [pc, #180]	; (800eb54 <xPortStartScheduler+0x134>)
 800ea9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eaa0:	78fb      	ldrb	r3, [r7, #3]
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eaaa:	78fb      	ldrb	r3, [r7, #3]
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eab2:	2b80      	cmp	r3, #128	; 0x80
 800eab4:	d0ef      	beq.n	800ea96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eab6:	4b27      	ldr	r3, [pc, #156]	; (800eb54 <xPortStartScheduler+0x134>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f1c3 0307 	rsb	r3, r3, #7
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	d00a      	beq.n	800ead8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	60bb      	str	r3, [r7, #8]
}
 800ead4:	bf00      	nop
 800ead6:	e7fe      	b.n	800ead6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ead8:	4b1e      	ldr	r3, [pc, #120]	; (800eb54 <xPortStartScheduler+0x134>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	021b      	lsls	r3, r3, #8
 800eade:	4a1d      	ldr	r2, [pc, #116]	; (800eb54 <xPortStartScheduler+0x134>)
 800eae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eae2:	4b1c      	ldr	r3, [pc, #112]	; (800eb54 <xPortStartScheduler+0x134>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eaea:	4a1a      	ldr	r2, [pc, #104]	; (800eb54 <xPortStartScheduler+0x134>)
 800eaec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eaf6:	4b18      	ldr	r3, [pc, #96]	; (800eb58 <xPortStartScheduler+0x138>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a17      	ldr	r2, [pc, #92]	; (800eb58 <xPortStartScheduler+0x138>)
 800eafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb02:	4b15      	ldr	r3, [pc, #84]	; (800eb58 <xPortStartScheduler+0x138>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a14      	ldr	r2, [pc, #80]	; (800eb58 <xPortStartScheduler+0x138>)
 800eb08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb0e:	f000 f8dd 	bl	800eccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb12:	4b12      	ldr	r3, [pc, #72]	; (800eb5c <xPortStartScheduler+0x13c>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb18:	f000 f8fc 	bl	800ed14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb1c:	4b10      	ldr	r3, [pc, #64]	; (800eb60 <xPortStartScheduler+0x140>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a0f      	ldr	r2, [pc, #60]	; (800eb60 <xPortStartScheduler+0x140>)
 800eb22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eb26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb28:	f7ff ff66 	bl	800e9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eb2c:	f7fe fe80 	bl	800d830 <vTaskSwitchContext>
	prvTaskExitError();
 800eb30:	f7ff ff20 	bl	800e974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eb34:	2300      	movs	r3, #0
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	e000ed00 	.word	0xe000ed00
 800eb44:	410fc271 	.word	0x410fc271
 800eb48:	410fc270 	.word	0x410fc270
 800eb4c:	e000e400 	.word	0xe000e400
 800eb50:	20000dd0 	.word	0x20000dd0
 800eb54:	20000dd4 	.word	0x20000dd4
 800eb58:	e000ed20 	.word	0xe000ed20
 800eb5c:	20000024 	.word	0x20000024
 800eb60:	e000ef34 	.word	0xe000ef34

0800eb64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	607b      	str	r3, [r7, #4]
}
 800eb7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb7e:	4b0f      	ldr	r3, [pc, #60]	; (800ebbc <vPortEnterCritical+0x58>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3301      	adds	r3, #1
 800eb84:	4a0d      	ldr	r2, [pc, #52]	; (800ebbc <vPortEnterCritical+0x58>)
 800eb86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb88:	4b0c      	ldr	r3, [pc, #48]	; (800ebbc <vPortEnterCritical+0x58>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d10f      	bne.n	800ebb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb90:	4b0b      	ldr	r3, [pc, #44]	; (800ebc0 <vPortEnterCritical+0x5c>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00a      	beq.n	800ebb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	603b      	str	r3, [r7, #0]
}
 800ebac:	bf00      	nop
 800ebae:	e7fe      	b.n	800ebae <vPortEnterCritical+0x4a>
	}
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr
 800ebbc:	20000024 	.word	0x20000024
 800ebc0:	e000ed04 	.word	0xe000ed04

0800ebc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ebca:	4b12      	ldr	r3, [pc, #72]	; (800ec14 <vPortExitCritical+0x50>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10a      	bne.n	800ebe8 <vPortExitCritical+0x24>
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	f383 8811 	msr	BASEPRI, r3
 800ebda:	f3bf 8f6f 	isb	sy
 800ebde:	f3bf 8f4f 	dsb	sy
 800ebe2:	607b      	str	r3, [r7, #4]
}
 800ebe4:	bf00      	nop
 800ebe6:	e7fe      	b.n	800ebe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	; (800ec14 <vPortExitCritical+0x50>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	3b01      	subs	r3, #1
 800ebee:	4a09      	ldr	r2, [pc, #36]	; (800ec14 <vPortExitCritical+0x50>)
 800ebf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ebf2:	4b08      	ldr	r3, [pc, #32]	; (800ec14 <vPortExitCritical+0x50>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d105      	bne.n	800ec06 <vPortExitCritical+0x42>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	f383 8811 	msr	BASEPRI, r3
}
 800ec04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec06:	bf00      	nop
 800ec08:	370c      	adds	r7, #12
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	20000024 	.word	0x20000024
	...

0800ec20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec20:	f3ef 8009 	mrs	r0, PSP
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	4b15      	ldr	r3, [pc, #84]	; (800ec80 <pxCurrentTCBConst>)
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	f01e 0f10 	tst.w	lr, #16
 800ec30:	bf08      	it	eq
 800ec32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ec36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec3a:	6010      	str	r0, [r2, #0]
 800ec3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ec40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ec44:	f380 8811 	msr	BASEPRI, r0
 800ec48:	f3bf 8f4f 	dsb	sy
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f7fe fdee 	bl	800d830 <vTaskSwitchContext>
 800ec54:	f04f 0000 	mov.w	r0, #0
 800ec58:	f380 8811 	msr	BASEPRI, r0
 800ec5c:	bc09      	pop	{r0, r3}
 800ec5e:	6819      	ldr	r1, [r3, #0]
 800ec60:	6808      	ldr	r0, [r1, #0]
 800ec62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec66:	f01e 0f10 	tst.w	lr, #16
 800ec6a:	bf08      	it	eq
 800ec6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec70:	f380 8809 	msr	PSP, r0
 800ec74:	f3bf 8f6f 	isb	sy
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	f3af 8000 	nop.w

0800ec80 <pxCurrentTCBConst>:
 800ec80:	200007a4 	.word	0x200007a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec84:	bf00      	nop
 800ec86:	bf00      	nop

0800ec88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	607b      	str	r3, [r7, #4]
}
 800eca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eca2:	f7fe fd0b 	bl	800d6bc <xTaskIncrementTick>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d003      	beq.n	800ecb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ecac:	4b06      	ldr	r3, [pc, #24]	; (800ecc8 <xPortSysTickHandler+0x40>)
 800ecae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecb2:	601a      	str	r2, [r3, #0]
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	f383 8811 	msr	BASEPRI, r3
}
 800ecbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ecc0:	bf00      	nop
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	e000ed04 	.word	0xe000ed04

0800eccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eccc:	b480      	push	{r7}
 800ecce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ecd0:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <vPortSetupTimerInterrupt+0x34>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ecd6:	4b0b      	ldr	r3, [pc, #44]	; (800ed04 <vPortSetupTimerInterrupt+0x38>)
 800ecd8:	2200      	movs	r2, #0
 800ecda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ecdc:	4b0a      	ldr	r3, [pc, #40]	; (800ed08 <vPortSetupTimerInterrupt+0x3c>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a0a      	ldr	r2, [pc, #40]	; (800ed0c <vPortSetupTimerInterrupt+0x40>)
 800ece2:	fba2 2303 	umull	r2, r3, r2, r3
 800ece6:	099b      	lsrs	r3, r3, #6
 800ece8:	4a09      	ldr	r2, [pc, #36]	; (800ed10 <vPortSetupTimerInterrupt+0x44>)
 800ecea:	3b01      	subs	r3, #1
 800ecec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ecee:	4b04      	ldr	r3, [pc, #16]	; (800ed00 <vPortSetupTimerInterrupt+0x34>)
 800ecf0:	2207      	movs	r2, #7
 800ecf2:	601a      	str	r2, [r3, #0]
}
 800ecf4:	bf00      	nop
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	e000e010 	.word	0xe000e010
 800ed04:	e000e018 	.word	0xe000e018
 800ed08:	20000004 	.word	0x20000004
 800ed0c:	10624dd3 	.word	0x10624dd3
 800ed10:	e000e014 	.word	0xe000e014

0800ed14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ed24 <vPortEnableVFP+0x10>
 800ed18:	6801      	ldr	r1, [r0, #0]
 800ed1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed1e:	6001      	str	r1, [r0, #0]
 800ed20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ed22:	bf00      	nop
 800ed24:	e000ed88 	.word	0xe000ed88

0800ed28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ed28:	b480      	push	{r7}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ed2e:	f3ef 8305 	mrs	r3, IPSR
 800ed32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2b0f      	cmp	r3, #15
 800ed38:	d914      	bls.n	800ed64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ed3a:	4a17      	ldr	r2, [pc, #92]	; (800ed98 <vPortValidateInterruptPriority+0x70>)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	4413      	add	r3, r2
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ed44:	4b15      	ldr	r3, [pc, #84]	; (800ed9c <vPortValidateInterruptPriority+0x74>)
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	7afa      	ldrb	r2, [r7, #11]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d20a      	bcs.n	800ed64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	607b      	str	r3, [r7, #4]
}
 800ed60:	bf00      	nop
 800ed62:	e7fe      	b.n	800ed62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ed64:	4b0e      	ldr	r3, [pc, #56]	; (800eda0 <vPortValidateInterruptPriority+0x78>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ed6c:	4b0d      	ldr	r3, [pc, #52]	; (800eda4 <vPortValidateInterruptPriority+0x7c>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d90a      	bls.n	800ed8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ed74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	603b      	str	r3, [r7, #0]
}
 800ed86:	bf00      	nop
 800ed88:	e7fe      	b.n	800ed88 <vPortValidateInterruptPriority+0x60>
	}
 800ed8a:	bf00      	nop
 800ed8c:	3714      	adds	r7, #20
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	e000e3f0 	.word	0xe000e3f0
 800ed9c:	20000dd0 	.word	0x20000dd0
 800eda0:	e000ed0c 	.word	0xe000ed0c
 800eda4:	20000dd4 	.word	0x20000dd4

0800eda8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08a      	sub	sp, #40	; 0x28
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800edb4:	f7fe fbc6 	bl	800d544 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800edb8:	4b5b      	ldr	r3, [pc, #364]	; (800ef28 <pvPortMalloc+0x180>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d101      	bne.n	800edc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800edc0:	f000 f920 	bl	800f004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800edc4:	4b59      	ldr	r3, [pc, #356]	; (800ef2c <pvPortMalloc+0x184>)
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4013      	ands	r3, r2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f040 8093 	bne.w	800eef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d01d      	beq.n	800ee14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800edd8:	2208      	movs	r2, #8
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4413      	add	r3, r2
 800edde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f003 0307 	and.w	r3, r3, #7
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d014      	beq.n	800ee14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f023 0307 	bic.w	r3, r3, #7
 800edf0:	3308      	adds	r3, #8
 800edf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f003 0307 	and.w	r3, r3, #7
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00a      	beq.n	800ee14 <pvPortMalloc+0x6c>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	617b      	str	r3, [r7, #20]
}
 800ee10:	bf00      	nop
 800ee12:	e7fe      	b.n	800ee12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d06e      	beq.n	800eef8 <pvPortMalloc+0x150>
 800ee1a:	4b45      	ldr	r3, [pc, #276]	; (800ef30 <pvPortMalloc+0x188>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d869      	bhi.n	800eef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee24:	4b43      	ldr	r3, [pc, #268]	; (800ef34 <pvPortMalloc+0x18c>)
 800ee26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ee28:	4b42      	ldr	r3, [pc, #264]	; (800ef34 <pvPortMalloc+0x18c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee2e:	e004      	b.n	800ee3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ee30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d903      	bls.n	800ee4c <pvPortMalloc+0xa4>
 800ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1f1      	bne.n	800ee30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee4c:	4b36      	ldr	r3, [pc, #216]	; (800ef28 <pvPortMalloc+0x180>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d050      	beq.n	800eef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2208      	movs	r2, #8
 800ee5c:	4413      	add	r3, r2
 800ee5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	685a      	ldr	r2, [r3, #4]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	1ad2      	subs	r2, r2, r3
 800ee70:	2308      	movs	r3, #8
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d91f      	bls.n	800eeb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	f003 0307 	and.w	r3, r3, #7
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00a      	beq.n	800eea0 <pvPortMalloc+0xf8>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	613b      	str	r3, [r7, #16]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea2:	685a      	ldr	r2, [r3, #4]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	1ad2      	subs	r2, r2, r3
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eeb2:	69b8      	ldr	r0, [r7, #24]
 800eeb4:	f000 f908 	bl	800f0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eeb8:	4b1d      	ldr	r3, [pc, #116]	; (800ef30 <pvPortMalloc+0x188>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	4a1b      	ldr	r2, [pc, #108]	; (800ef30 <pvPortMalloc+0x188>)
 800eec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eec6:	4b1a      	ldr	r3, [pc, #104]	; (800ef30 <pvPortMalloc+0x188>)
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	4b1b      	ldr	r3, [pc, #108]	; (800ef38 <pvPortMalloc+0x190>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d203      	bcs.n	800eeda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eed2:	4b17      	ldr	r3, [pc, #92]	; (800ef30 <pvPortMalloc+0x188>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4a18      	ldr	r2, [pc, #96]	; (800ef38 <pvPortMalloc+0x190>)
 800eed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	685a      	ldr	r2, [r3, #4]
 800eede:	4b13      	ldr	r3, [pc, #76]	; (800ef2c <pvPortMalloc+0x184>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	431a      	orrs	r2, r3
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	2200      	movs	r2, #0
 800eeec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eeee:	4b13      	ldr	r3, [pc, #76]	; (800ef3c <pvPortMalloc+0x194>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	3301      	adds	r3, #1
 800eef4:	4a11      	ldr	r2, [pc, #68]	; (800ef3c <pvPortMalloc+0x194>)
 800eef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eef8:	f7fe fb32 	bl	800d560 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	f003 0307 	and.w	r3, r3, #7
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00a      	beq.n	800ef1c <pvPortMalloc+0x174>
	__asm volatile
 800ef06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	60fb      	str	r3, [r7, #12]
}
 800ef18:	bf00      	nop
 800ef1a:	e7fe      	b.n	800ef1a <pvPortMalloc+0x172>
	return pvReturn;
 800ef1c:	69fb      	ldr	r3, [r7, #28]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3728      	adds	r7, #40	; 0x28
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	200040a8 	.word	0x200040a8
 800ef2c:	200040bc 	.word	0x200040bc
 800ef30:	200040ac 	.word	0x200040ac
 800ef34:	200040a0 	.word	0x200040a0
 800ef38:	200040b0 	.word	0x200040b0
 800ef3c:	200040b4 	.word	0x200040b4

0800ef40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d04d      	beq.n	800efee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef52:	2308      	movs	r3, #8
 800ef54:	425b      	negs	r3, r3
 800ef56:	697a      	ldr	r2, [r7, #20]
 800ef58:	4413      	add	r3, r2
 800ef5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	4b24      	ldr	r3, [pc, #144]	; (800eff8 <vPortFree+0xb8>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4013      	ands	r3, r2
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10a      	bne.n	800ef84 <vPortFree+0x44>
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	60fb      	str	r3, [r7, #12]
}
 800ef80:	bf00      	nop
 800ef82:	e7fe      	b.n	800ef82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00a      	beq.n	800efa2 <vPortFree+0x62>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	60bb      	str	r3, [r7, #8]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	4b14      	ldr	r3, [pc, #80]	; (800eff8 <vPortFree+0xb8>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	4013      	ands	r3, r2
 800efac:	2b00      	cmp	r3, #0
 800efae:	d01e      	beq.n	800efee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d11a      	bne.n	800efee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	4b0e      	ldr	r3, [pc, #56]	; (800eff8 <vPortFree+0xb8>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	43db      	mvns	r3, r3
 800efc2:	401a      	ands	r2, r3
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800efc8:	f7fe fabc 	bl	800d544 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	4b0a      	ldr	r3, [pc, #40]	; (800effc <vPortFree+0xbc>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4413      	add	r3, r2
 800efd6:	4a09      	ldr	r2, [pc, #36]	; (800effc <vPortFree+0xbc>)
 800efd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800efda:	6938      	ldr	r0, [r7, #16]
 800efdc:	f000 f874 	bl	800f0c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800efe0:	4b07      	ldr	r3, [pc, #28]	; (800f000 <vPortFree+0xc0>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	3301      	adds	r3, #1
 800efe6:	4a06      	ldr	r2, [pc, #24]	; (800f000 <vPortFree+0xc0>)
 800efe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800efea:	f7fe fab9 	bl	800d560 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800efee:	bf00      	nop
 800eff0:	3718      	adds	r7, #24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	bf00      	nop
 800eff8:	200040bc 	.word	0x200040bc
 800effc:	200040ac 	.word	0x200040ac
 800f000:	200040b8 	.word	0x200040b8

0800f004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f00a:	f243 23c8 	movw	r3, #13000	; 0x32c8
 800f00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f010:	4b27      	ldr	r3, [pc, #156]	; (800f0b0 <prvHeapInit+0xac>)
 800f012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f003 0307 	and.w	r3, r3, #7
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00c      	beq.n	800f038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3307      	adds	r3, #7
 800f022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f023 0307 	bic.w	r3, r3, #7
 800f02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f02c:	68ba      	ldr	r2, [r7, #8]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	4a1f      	ldr	r2, [pc, #124]	; (800f0b0 <prvHeapInit+0xac>)
 800f034:	4413      	add	r3, r2
 800f036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f03c:	4a1d      	ldr	r2, [pc, #116]	; (800f0b4 <prvHeapInit+0xb0>)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f042:	4b1c      	ldr	r3, [pc, #112]	; (800f0b4 <prvHeapInit+0xb0>)
 800f044:	2200      	movs	r2, #0
 800f046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	4413      	add	r3, r2
 800f04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f050:	2208      	movs	r2, #8
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	1a9b      	subs	r3, r3, r2
 800f056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f023 0307 	bic.w	r3, r3, #7
 800f05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	4a15      	ldr	r2, [pc, #84]	; (800f0b8 <prvHeapInit+0xb4>)
 800f064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f066:	4b14      	ldr	r3, [pc, #80]	; (800f0b8 <prvHeapInit+0xb4>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2200      	movs	r2, #0
 800f06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f06e:	4b12      	ldr	r3, [pc, #72]	; (800f0b8 <prvHeapInit+0xb4>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	2200      	movs	r2, #0
 800f074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	1ad2      	subs	r2, r2, r3
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f084:	4b0c      	ldr	r3, [pc, #48]	; (800f0b8 <prvHeapInit+0xb4>)
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	4a0a      	ldr	r2, [pc, #40]	; (800f0bc <prvHeapInit+0xb8>)
 800f092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	4a09      	ldr	r2, [pc, #36]	; (800f0c0 <prvHeapInit+0xbc>)
 800f09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f09c:	4b09      	ldr	r3, [pc, #36]	; (800f0c4 <prvHeapInit+0xc0>)
 800f09e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f0a2:	601a      	str	r2, [r3, #0]
}
 800f0a4:	bf00      	nop
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	20000dd8 	.word	0x20000dd8
 800f0b4:	200040a0 	.word	0x200040a0
 800f0b8:	200040a8 	.word	0x200040a8
 800f0bc:	200040b0 	.word	0x200040b0
 800f0c0:	200040ac 	.word	0x200040ac
 800f0c4:	200040bc 	.word	0x200040bc

0800f0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b085      	sub	sp, #20
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f0d0:	4b28      	ldr	r3, [pc, #160]	; (800f174 <prvInsertBlockIntoFreeList+0xac>)
 800f0d2:	60fb      	str	r3, [r7, #12]
 800f0d4:	e002      	b.n	800f0dc <prvInsertBlockIntoFreeList+0x14>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	60fb      	str	r3, [r7, #12]
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d8f7      	bhi.n	800f0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	68ba      	ldr	r2, [r7, #8]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d108      	bne.n	800f10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	685a      	ldr	r2, [r3, #4]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	441a      	add	r2, r3
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	441a      	add	r2, r3
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d118      	bne.n	800f150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	4b15      	ldr	r3, [pc, #84]	; (800f178 <prvInsertBlockIntoFreeList+0xb0>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	429a      	cmp	r2, r3
 800f128:	d00d      	beq.n	800f146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	685a      	ldr	r2, [r3, #4]
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	441a      	add	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	601a      	str	r2, [r3, #0]
 800f144:	e008      	b.n	800f158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f146:	4b0c      	ldr	r3, [pc, #48]	; (800f178 <prvInsertBlockIntoFreeList+0xb0>)
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	601a      	str	r2, [r3, #0]
 800f14e:	e003      	b.n	800f158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d002      	beq.n	800f166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f166:	bf00      	nop
 800f168:	3714      	adds	r7, #20
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop
 800f174:	200040a0 	.word	0x200040a0
 800f178:	200040a8 	.word	0x200040a8

0800f17c <__errno>:
 800f17c:	4b01      	ldr	r3, [pc, #4]	; (800f184 <__errno+0x8>)
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	20000028 	.word	0x20000028

0800f188 <__libc_init_array>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	4d0d      	ldr	r5, [pc, #52]	; (800f1c0 <__libc_init_array+0x38>)
 800f18c:	4c0d      	ldr	r4, [pc, #52]	; (800f1c4 <__libc_init_array+0x3c>)
 800f18e:	1b64      	subs	r4, r4, r5
 800f190:	10a4      	asrs	r4, r4, #2
 800f192:	2600      	movs	r6, #0
 800f194:	42a6      	cmp	r6, r4
 800f196:	d109      	bne.n	800f1ac <__libc_init_array+0x24>
 800f198:	4d0b      	ldr	r5, [pc, #44]	; (800f1c8 <__libc_init_array+0x40>)
 800f19a:	4c0c      	ldr	r4, [pc, #48]	; (800f1cc <__libc_init_array+0x44>)
 800f19c:	f000 fffa 	bl	8010194 <_init>
 800f1a0:	1b64      	subs	r4, r4, r5
 800f1a2:	10a4      	asrs	r4, r4, #2
 800f1a4:	2600      	movs	r6, #0
 800f1a6:	42a6      	cmp	r6, r4
 800f1a8:	d105      	bne.n	800f1b6 <__libc_init_array+0x2e>
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}
 800f1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1b0:	4798      	blx	r3
 800f1b2:	3601      	adds	r6, #1
 800f1b4:	e7ee      	b.n	800f194 <__libc_init_array+0xc>
 800f1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ba:	4798      	blx	r3
 800f1bc:	3601      	adds	r6, #1
 800f1be:	e7f2      	b.n	800f1a6 <__libc_init_array+0x1e>
 800f1c0:	08010a90 	.word	0x08010a90
 800f1c4:	08010a90 	.word	0x08010a90
 800f1c8:	08010a90 	.word	0x08010a90
 800f1cc:	08010a94 	.word	0x08010a94

0800f1d0 <memcpy>:
 800f1d0:	440a      	add	r2, r1
 800f1d2:	4291      	cmp	r1, r2
 800f1d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f1d8:	d100      	bne.n	800f1dc <memcpy+0xc>
 800f1da:	4770      	bx	lr
 800f1dc:	b510      	push	{r4, lr}
 800f1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1e6:	4291      	cmp	r1, r2
 800f1e8:	d1f9      	bne.n	800f1de <memcpy+0xe>
 800f1ea:	bd10      	pop	{r4, pc}

0800f1ec <memset>:
 800f1ec:	4402      	add	r2, r0
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d100      	bne.n	800f1f6 <memset+0xa>
 800f1f4:	4770      	bx	lr
 800f1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800f1fa:	e7f9      	b.n	800f1f0 <memset+0x4>

0800f1fc <iprintf>:
 800f1fc:	b40f      	push	{r0, r1, r2, r3}
 800f1fe:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <iprintf+0x2c>)
 800f200:	b513      	push	{r0, r1, r4, lr}
 800f202:	681c      	ldr	r4, [r3, #0]
 800f204:	b124      	cbz	r4, 800f210 <iprintf+0x14>
 800f206:	69a3      	ldr	r3, [r4, #24]
 800f208:	b913      	cbnz	r3, 800f210 <iprintf+0x14>
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 fa5e 	bl	800f6cc <__sinit>
 800f210:	ab05      	add	r3, sp, #20
 800f212:	9a04      	ldr	r2, [sp, #16]
 800f214:	68a1      	ldr	r1, [r4, #8]
 800f216:	9301      	str	r3, [sp, #4]
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 fc2f 	bl	800fa7c <_vfiprintf_r>
 800f21e:	b002      	add	sp, #8
 800f220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f224:	b004      	add	sp, #16
 800f226:	4770      	bx	lr
 800f228:	20000028 	.word	0x20000028

0800f22c <_puts_r>:
 800f22c:	b570      	push	{r4, r5, r6, lr}
 800f22e:	460e      	mov	r6, r1
 800f230:	4605      	mov	r5, r0
 800f232:	b118      	cbz	r0, 800f23c <_puts_r+0x10>
 800f234:	6983      	ldr	r3, [r0, #24]
 800f236:	b90b      	cbnz	r3, 800f23c <_puts_r+0x10>
 800f238:	f000 fa48 	bl	800f6cc <__sinit>
 800f23c:	69ab      	ldr	r3, [r5, #24]
 800f23e:	68ac      	ldr	r4, [r5, #8]
 800f240:	b913      	cbnz	r3, 800f248 <_puts_r+0x1c>
 800f242:	4628      	mov	r0, r5
 800f244:	f000 fa42 	bl	800f6cc <__sinit>
 800f248:	4b2c      	ldr	r3, [pc, #176]	; (800f2fc <_puts_r+0xd0>)
 800f24a:	429c      	cmp	r4, r3
 800f24c:	d120      	bne.n	800f290 <_puts_r+0x64>
 800f24e:	686c      	ldr	r4, [r5, #4]
 800f250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f252:	07db      	lsls	r3, r3, #31
 800f254:	d405      	bmi.n	800f262 <_puts_r+0x36>
 800f256:	89a3      	ldrh	r3, [r4, #12]
 800f258:	0598      	lsls	r0, r3, #22
 800f25a:	d402      	bmi.n	800f262 <_puts_r+0x36>
 800f25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f25e:	f000 fad3 	bl	800f808 <__retarget_lock_acquire_recursive>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	0719      	lsls	r1, r3, #28
 800f266:	d51d      	bpl.n	800f2a4 <_puts_r+0x78>
 800f268:	6923      	ldr	r3, [r4, #16]
 800f26a:	b1db      	cbz	r3, 800f2a4 <_puts_r+0x78>
 800f26c:	3e01      	subs	r6, #1
 800f26e:	68a3      	ldr	r3, [r4, #8]
 800f270:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f274:	3b01      	subs	r3, #1
 800f276:	60a3      	str	r3, [r4, #8]
 800f278:	bb39      	cbnz	r1, 800f2ca <_puts_r+0x9e>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	da38      	bge.n	800f2f0 <_puts_r+0xc4>
 800f27e:	4622      	mov	r2, r4
 800f280:	210a      	movs	r1, #10
 800f282:	4628      	mov	r0, r5
 800f284:	f000 f848 	bl	800f318 <__swbuf_r>
 800f288:	3001      	adds	r0, #1
 800f28a:	d011      	beq.n	800f2b0 <_puts_r+0x84>
 800f28c:	250a      	movs	r5, #10
 800f28e:	e011      	b.n	800f2b4 <_puts_r+0x88>
 800f290:	4b1b      	ldr	r3, [pc, #108]	; (800f300 <_puts_r+0xd4>)
 800f292:	429c      	cmp	r4, r3
 800f294:	d101      	bne.n	800f29a <_puts_r+0x6e>
 800f296:	68ac      	ldr	r4, [r5, #8]
 800f298:	e7da      	b.n	800f250 <_puts_r+0x24>
 800f29a:	4b1a      	ldr	r3, [pc, #104]	; (800f304 <_puts_r+0xd8>)
 800f29c:	429c      	cmp	r4, r3
 800f29e:	bf08      	it	eq
 800f2a0:	68ec      	ldreq	r4, [r5, #12]
 800f2a2:	e7d5      	b.n	800f250 <_puts_r+0x24>
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f000 f888 	bl	800f3bc <__swsetup_r>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d0dd      	beq.n	800f26c <_puts_r+0x40>
 800f2b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f2b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2b6:	07da      	lsls	r2, r3, #31
 800f2b8:	d405      	bmi.n	800f2c6 <_puts_r+0x9a>
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	059b      	lsls	r3, r3, #22
 800f2be:	d402      	bmi.n	800f2c6 <_puts_r+0x9a>
 800f2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2c2:	f000 faa2 	bl	800f80a <__retarget_lock_release_recursive>
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	bd70      	pop	{r4, r5, r6, pc}
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	da04      	bge.n	800f2d8 <_puts_r+0xac>
 800f2ce:	69a2      	ldr	r2, [r4, #24]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	dc06      	bgt.n	800f2e2 <_puts_r+0xb6>
 800f2d4:	290a      	cmp	r1, #10
 800f2d6:	d004      	beq.n	800f2e2 <_puts_r+0xb6>
 800f2d8:	6823      	ldr	r3, [r4, #0]
 800f2da:	1c5a      	adds	r2, r3, #1
 800f2dc:	6022      	str	r2, [r4, #0]
 800f2de:	7019      	strb	r1, [r3, #0]
 800f2e0:	e7c5      	b.n	800f26e <_puts_r+0x42>
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f000 f817 	bl	800f318 <__swbuf_r>
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	d1bf      	bne.n	800f26e <_puts_r+0x42>
 800f2ee:	e7df      	b.n	800f2b0 <_puts_r+0x84>
 800f2f0:	6823      	ldr	r3, [r4, #0]
 800f2f2:	250a      	movs	r5, #10
 800f2f4:	1c5a      	adds	r2, r3, #1
 800f2f6:	6022      	str	r2, [r4, #0]
 800f2f8:	701d      	strb	r5, [r3, #0]
 800f2fa:	e7db      	b.n	800f2b4 <_puts_r+0x88>
 800f2fc:	08010a14 	.word	0x08010a14
 800f300:	08010a34 	.word	0x08010a34
 800f304:	080109f4 	.word	0x080109f4

0800f308 <puts>:
 800f308:	4b02      	ldr	r3, [pc, #8]	; (800f314 <puts+0xc>)
 800f30a:	4601      	mov	r1, r0
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	f7ff bf8d 	b.w	800f22c <_puts_r>
 800f312:	bf00      	nop
 800f314:	20000028 	.word	0x20000028

0800f318 <__swbuf_r>:
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	460e      	mov	r6, r1
 800f31c:	4614      	mov	r4, r2
 800f31e:	4605      	mov	r5, r0
 800f320:	b118      	cbz	r0, 800f32a <__swbuf_r+0x12>
 800f322:	6983      	ldr	r3, [r0, #24]
 800f324:	b90b      	cbnz	r3, 800f32a <__swbuf_r+0x12>
 800f326:	f000 f9d1 	bl	800f6cc <__sinit>
 800f32a:	4b21      	ldr	r3, [pc, #132]	; (800f3b0 <__swbuf_r+0x98>)
 800f32c:	429c      	cmp	r4, r3
 800f32e:	d12b      	bne.n	800f388 <__swbuf_r+0x70>
 800f330:	686c      	ldr	r4, [r5, #4]
 800f332:	69a3      	ldr	r3, [r4, #24]
 800f334:	60a3      	str	r3, [r4, #8]
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	071a      	lsls	r2, r3, #28
 800f33a:	d52f      	bpl.n	800f39c <__swbuf_r+0x84>
 800f33c:	6923      	ldr	r3, [r4, #16]
 800f33e:	b36b      	cbz	r3, 800f39c <__swbuf_r+0x84>
 800f340:	6923      	ldr	r3, [r4, #16]
 800f342:	6820      	ldr	r0, [r4, #0]
 800f344:	1ac0      	subs	r0, r0, r3
 800f346:	6963      	ldr	r3, [r4, #20]
 800f348:	b2f6      	uxtb	r6, r6
 800f34a:	4283      	cmp	r3, r0
 800f34c:	4637      	mov	r7, r6
 800f34e:	dc04      	bgt.n	800f35a <__swbuf_r+0x42>
 800f350:	4621      	mov	r1, r4
 800f352:	4628      	mov	r0, r5
 800f354:	f000 f926 	bl	800f5a4 <_fflush_r>
 800f358:	bb30      	cbnz	r0, 800f3a8 <__swbuf_r+0x90>
 800f35a:	68a3      	ldr	r3, [r4, #8]
 800f35c:	3b01      	subs	r3, #1
 800f35e:	60a3      	str	r3, [r4, #8]
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	1c5a      	adds	r2, r3, #1
 800f364:	6022      	str	r2, [r4, #0]
 800f366:	701e      	strb	r6, [r3, #0]
 800f368:	6963      	ldr	r3, [r4, #20]
 800f36a:	3001      	adds	r0, #1
 800f36c:	4283      	cmp	r3, r0
 800f36e:	d004      	beq.n	800f37a <__swbuf_r+0x62>
 800f370:	89a3      	ldrh	r3, [r4, #12]
 800f372:	07db      	lsls	r3, r3, #31
 800f374:	d506      	bpl.n	800f384 <__swbuf_r+0x6c>
 800f376:	2e0a      	cmp	r6, #10
 800f378:	d104      	bne.n	800f384 <__swbuf_r+0x6c>
 800f37a:	4621      	mov	r1, r4
 800f37c:	4628      	mov	r0, r5
 800f37e:	f000 f911 	bl	800f5a4 <_fflush_r>
 800f382:	b988      	cbnz	r0, 800f3a8 <__swbuf_r+0x90>
 800f384:	4638      	mov	r0, r7
 800f386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f388:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <__swbuf_r+0x9c>)
 800f38a:	429c      	cmp	r4, r3
 800f38c:	d101      	bne.n	800f392 <__swbuf_r+0x7a>
 800f38e:	68ac      	ldr	r4, [r5, #8]
 800f390:	e7cf      	b.n	800f332 <__swbuf_r+0x1a>
 800f392:	4b09      	ldr	r3, [pc, #36]	; (800f3b8 <__swbuf_r+0xa0>)
 800f394:	429c      	cmp	r4, r3
 800f396:	bf08      	it	eq
 800f398:	68ec      	ldreq	r4, [r5, #12]
 800f39a:	e7ca      	b.n	800f332 <__swbuf_r+0x1a>
 800f39c:	4621      	mov	r1, r4
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f000 f80c 	bl	800f3bc <__swsetup_r>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d0cb      	beq.n	800f340 <__swbuf_r+0x28>
 800f3a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f3ac:	e7ea      	b.n	800f384 <__swbuf_r+0x6c>
 800f3ae:	bf00      	nop
 800f3b0:	08010a14 	.word	0x08010a14
 800f3b4:	08010a34 	.word	0x08010a34
 800f3b8:	080109f4 	.word	0x080109f4

0800f3bc <__swsetup_r>:
 800f3bc:	4b32      	ldr	r3, [pc, #200]	; (800f488 <__swsetup_r+0xcc>)
 800f3be:	b570      	push	{r4, r5, r6, lr}
 800f3c0:	681d      	ldr	r5, [r3, #0]
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	460c      	mov	r4, r1
 800f3c6:	b125      	cbz	r5, 800f3d2 <__swsetup_r+0x16>
 800f3c8:	69ab      	ldr	r3, [r5, #24]
 800f3ca:	b913      	cbnz	r3, 800f3d2 <__swsetup_r+0x16>
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f000 f97d 	bl	800f6cc <__sinit>
 800f3d2:	4b2e      	ldr	r3, [pc, #184]	; (800f48c <__swsetup_r+0xd0>)
 800f3d4:	429c      	cmp	r4, r3
 800f3d6:	d10f      	bne.n	800f3f8 <__swsetup_r+0x3c>
 800f3d8:	686c      	ldr	r4, [r5, #4]
 800f3da:	89a3      	ldrh	r3, [r4, #12]
 800f3dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3e0:	0719      	lsls	r1, r3, #28
 800f3e2:	d42c      	bmi.n	800f43e <__swsetup_r+0x82>
 800f3e4:	06dd      	lsls	r5, r3, #27
 800f3e6:	d411      	bmi.n	800f40c <__swsetup_r+0x50>
 800f3e8:	2309      	movs	r3, #9
 800f3ea:	6033      	str	r3, [r6, #0]
 800f3ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3f0:	81a3      	strh	r3, [r4, #12]
 800f3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3f6:	e03e      	b.n	800f476 <__swsetup_r+0xba>
 800f3f8:	4b25      	ldr	r3, [pc, #148]	; (800f490 <__swsetup_r+0xd4>)
 800f3fa:	429c      	cmp	r4, r3
 800f3fc:	d101      	bne.n	800f402 <__swsetup_r+0x46>
 800f3fe:	68ac      	ldr	r4, [r5, #8]
 800f400:	e7eb      	b.n	800f3da <__swsetup_r+0x1e>
 800f402:	4b24      	ldr	r3, [pc, #144]	; (800f494 <__swsetup_r+0xd8>)
 800f404:	429c      	cmp	r4, r3
 800f406:	bf08      	it	eq
 800f408:	68ec      	ldreq	r4, [r5, #12]
 800f40a:	e7e6      	b.n	800f3da <__swsetup_r+0x1e>
 800f40c:	0758      	lsls	r0, r3, #29
 800f40e:	d512      	bpl.n	800f436 <__swsetup_r+0x7a>
 800f410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f412:	b141      	cbz	r1, 800f426 <__swsetup_r+0x6a>
 800f414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f418:	4299      	cmp	r1, r3
 800f41a:	d002      	beq.n	800f422 <__swsetup_r+0x66>
 800f41c:	4630      	mov	r0, r6
 800f41e:	f000 fa59 	bl	800f8d4 <_free_r>
 800f422:	2300      	movs	r3, #0
 800f424:	6363      	str	r3, [r4, #52]	; 0x34
 800f426:	89a3      	ldrh	r3, [r4, #12]
 800f428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f42c:	81a3      	strh	r3, [r4, #12]
 800f42e:	2300      	movs	r3, #0
 800f430:	6063      	str	r3, [r4, #4]
 800f432:	6923      	ldr	r3, [r4, #16]
 800f434:	6023      	str	r3, [r4, #0]
 800f436:	89a3      	ldrh	r3, [r4, #12]
 800f438:	f043 0308 	orr.w	r3, r3, #8
 800f43c:	81a3      	strh	r3, [r4, #12]
 800f43e:	6923      	ldr	r3, [r4, #16]
 800f440:	b94b      	cbnz	r3, 800f456 <__swsetup_r+0x9a>
 800f442:	89a3      	ldrh	r3, [r4, #12]
 800f444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f44c:	d003      	beq.n	800f456 <__swsetup_r+0x9a>
 800f44e:	4621      	mov	r1, r4
 800f450:	4630      	mov	r0, r6
 800f452:	f000 f9ff 	bl	800f854 <__smakebuf_r>
 800f456:	89a0      	ldrh	r0, [r4, #12]
 800f458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f45c:	f010 0301 	ands.w	r3, r0, #1
 800f460:	d00a      	beq.n	800f478 <__swsetup_r+0xbc>
 800f462:	2300      	movs	r3, #0
 800f464:	60a3      	str	r3, [r4, #8]
 800f466:	6963      	ldr	r3, [r4, #20]
 800f468:	425b      	negs	r3, r3
 800f46a:	61a3      	str	r3, [r4, #24]
 800f46c:	6923      	ldr	r3, [r4, #16]
 800f46e:	b943      	cbnz	r3, 800f482 <__swsetup_r+0xc6>
 800f470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f474:	d1ba      	bne.n	800f3ec <__swsetup_r+0x30>
 800f476:	bd70      	pop	{r4, r5, r6, pc}
 800f478:	0781      	lsls	r1, r0, #30
 800f47a:	bf58      	it	pl
 800f47c:	6963      	ldrpl	r3, [r4, #20]
 800f47e:	60a3      	str	r3, [r4, #8]
 800f480:	e7f4      	b.n	800f46c <__swsetup_r+0xb0>
 800f482:	2000      	movs	r0, #0
 800f484:	e7f7      	b.n	800f476 <__swsetup_r+0xba>
 800f486:	bf00      	nop
 800f488:	20000028 	.word	0x20000028
 800f48c:	08010a14 	.word	0x08010a14
 800f490:	08010a34 	.word	0x08010a34
 800f494:	080109f4 	.word	0x080109f4

0800f498 <__sflush_r>:
 800f498:	898a      	ldrh	r2, [r1, #12]
 800f49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f49e:	4605      	mov	r5, r0
 800f4a0:	0710      	lsls	r0, r2, #28
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	d458      	bmi.n	800f558 <__sflush_r+0xc0>
 800f4a6:	684b      	ldr	r3, [r1, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dc05      	bgt.n	800f4b8 <__sflush_r+0x20>
 800f4ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	dc02      	bgt.n	800f4b8 <__sflush_r+0x20>
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ba:	2e00      	cmp	r6, #0
 800f4bc:	d0f9      	beq.n	800f4b2 <__sflush_r+0x1a>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f4c4:	682f      	ldr	r7, [r5, #0]
 800f4c6:	602b      	str	r3, [r5, #0]
 800f4c8:	d032      	beq.n	800f530 <__sflush_r+0x98>
 800f4ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	075a      	lsls	r2, r3, #29
 800f4d0:	d505      	bpl.n	800f4de <__sflush_r+0x46>
 800f4d2:	6863      	ldr	r3, [r4, #4]
 800f4d4:	1ac0      	subs	r0, r0, r3
 800f4d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4d8:	b10b      	cbz	r3, 800f4de <__sflush_r+0x46>
 800f4da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4dc:	1ac0      	subs	r0, r0, r3
 800f4de:	2300      	movs	r3, #0
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4e4:	6a21      	ldr	r1, [r4, #32]
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	47b0      	blx	r6
 800f4ea:	1c43      	adds	r3, r0, #1
 800f4ec:	89a3      	ldrh	r3, [r4, #12]
 800f4ee:	d106      	bne.n	800f4fe <__sflush_r+0x66>
 800f4f0:	6829      	ldr	r1, [r5, #0]
 800f4f2:	291d      	cmp	r1, #29
 800f4f4:	d82c      	bhi.n	800f550 <__sflush_r+0xb8>
 800f4f6:	4a2a      	ldr	r2, [pc, #168]	; (800f5a0 <__sflush_r+0x108>)
 800f4f8:	40ca      	lsrs	r2, r1
 800f4fa:	07d6      	lsls	r6, r2, #31
 800f4fc:	d528      	bpl.n	800f550 <__sflush_r+0xb8>
 800f4fe:	2200      	movs	r2, #0
 800f500:	6062      	str	r2, [r4, #4]
 800f502:	04d9      	lsls	r1, r3, #19
 800f504:	6922      	ldr	r2, [r4, #16]
 800f506:	6022      	str	r2, [r4, #0]
 800f508:	d504      	bpl.n	800f514 <__sflush_r+0x7c>
 800f50a:	1c42      	adds	r2, r0, #1
 800f50c:	d101      	bne.n	800f512 <__sflush_r+0x7a>
 800f50e:	682b      	ldr	r3, [r5, #0]
 800f510:	b903      	cbnz	r3, 800f514 <__sflush_r+0x7c>
 800f512:	6560      	str	r0, [r4, #84]	; 0x54
 800f514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f516:	602f      	str	r7, [r5, #0]
 800f518:	2900      	cmp	r1, #0
 800f51a:	d0ca      	beq.n	800f4b2 <__sflush_r+0x1a>
 800f51c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f520:	4299      	cmp	r1, r3
 800f522:	d002      	beq.n	800f52a <__sflush_r+0x92>
 800f524:	4628      	mov	r0, r5
 800f526:	f000 f9d5 	bl	800f8d4 <_free_r>
 800f52a:	2000      	movs	r0, #0
 800f52c:	6360      	str	r0, [r4, #52]	; 0x34
 800f52e:	e7c1      	b.n	800f4b4 <__sflush_r+0x1c>
 800f530:	6a21      	ldr	r1, [r4, #32]
 800f532:	2301      	movs	r3, #1
 800f534:	4628      	mov	r0, r5
 800f536:	47b0      	blx	r6
 800f538:	1c41      	adds	r1, r0, #1
 800f53a:	d1c7      	bne.n	800f4cc <__sflush_r+0x34>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d0c4      	beq.n	800f4cc <__sflush_r+0x34>
 800f542:	2b1d      	cmp	r3, #29
 800f544:	d001      	beq.n	800f54a <__sflush_r+0xb2>
 800f546:	2b16      	cmp	r3, #22
 800f548:	d101      	bne.n	800f54e <__sflush_r+0xb6>
 800f54a:	602f      	str	r7, [r5, #0]
 800f54c:	e7b1      	b.n	800f4b2 <__sflush_r+0x1a>
 800f54e:	89a3      	ldrh	r3, [r4, #12]
 800f550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f554:	81a3      	strh	r3, [r4, #12]
 800f556:	e7ad      	b.n	800f4b4 <__sflush_r+0x1c>
 800f558:	690f      	ldr	r7, [r1, #16]
 800f55a:	2f00      	cmp	r7, #0
 800f55c:	d0a9      	beq.n	800f4b2 <__sflush_r+0x1a>
 800f55e:	0793      	lsls	r3, r2, #30
 800f560:	680e      	ldr	r6, [r1, #0]
 800f562:	bf08      	it	eq
 800f564:	694b      	ldreq	r3, [r1, #20]
 800f566:	600f      	str	r7, [r1, #0]
 800f568:	bf18      	it	ne
 800f56a:	2300      	movne	r3, #0
 800f56c:	eba6 0807 	sub.w	r8, r6, r7
 800f570:	608b      	str	r3, [r1, #8]
 800f572:	f1b8 0f00 	cmp.w	r8, #0
 800f576:	dd9c      	ble.n	800f4b2 <__sflush_r+0x1a>
 800f578:	6a21      	ldr	r1, [r4, #32]
 800f57a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f57c:	4643      	mov	r3, r8
 800f57e:	463a      	mov	r2, r7
 800f580:	4628      	mov	r0, r5
 800f582:	47b0      	blx	r6
 800f584:	2800      	cmp	r0, #0
 800f586:	dc06      	bgt.n	800f596 <__sflush_r+0xfe>
 800f588:	89a3      	ldrh	r3, [r4, #12]
 800f58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f594:	e78e      	b.n	800f4b4 <__sflush_r+0x1c>
 800f596:	4407      	add	r7, r0
 800f598:	eba8 0800 	sub.w	r8, r8, r0
 800f59c:	e7e9      	b.n	800f572 <__sflush_r+0xda>
 800f59e:	bf00      	nop
 800f5a0:	20400001 	.word	0x20400001

0800f5a4 <_fflush_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	690b      	ldr	r3, [r1, #16]
 800f5a8:	4605      	mov	r5, r0
 800f5aa:	460c      	mov	r4, r1
 800f5ac:	b913      	cbnz	r3, 800f5b4 <_fflush_r+0x10>
 800f5ae:	2500      	movs	r5, #0
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	bd38      	pop	{r3, r4, r5, pc}
 800f5b4:	b118      	cbz	r0, 800f5be <_fflush_r+0x1a>
 800f5b6:	6983      	ldr	r3, [r0, #24]
 800f5b8:	b90b      	cbnz	r3, 800f5be <_fflush_r+0x1a>
 800f5ba:	f000 f887 	bl	800f6cc <__sinit>
 800f5be:	4b14      	ldr	r3, [pc, #80]	; (800f610 <_fflush_r+0x6c>)
 800f5c0:	429c      	cmp	r4, r3
 800f5c2:	d11b      	bne.n	800f5fc <_fflush_r+0x58>
 800f5c4:	686c      	ldr	r4, [r5, #4]
 800f5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0ef      	beq.n	800f5ae <_fflush_r+0xa>
 800f5ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f5d0:	07d0      	lsls	r0, r2, #31
 800f5d2:	d404      	bmi.n	800f5de <_fflush_r+0x3a>
 800f5d4:	0599      	lsls	r1, r3, #22
 800f5d6:	d402      	bmi.n	800f5de <_fflush_r+0x3a>
 800f5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5da:	f000 f915 	bl	800f808 <__retarget_lock_acquire_recursive>
 800f5de:	4628      	mov	r0, r5
 800f5e0:	4621      	mov	r1, r4
 800f5e2:	f7ff ff59 	bl	800f498 <__sflush_r>
 800f5e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5e8:	07da      	lsls	r2, r3, #31
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	d4e0      	bmi.n	800f5b0 <_fflush_r+0xc>
 800f5ee:	89a3      	ldrh	r3, [r4, #12]
 800f5f0:	059b      	lsls	r3, r3, #22
 800f5f2:	d4dd      	bmi.n	800f5b0 <_fflush_r+0xc>
 800f5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5f6:	f000 f908 	bl	800f80a <__retarget_lock_release_recursive>
 800f5fa:	e7d9      	b.n	800f5b0 <_fflush_r+0xc>
 800f5fc:	4b05      	ldr	r3, [pc, #20]	; (800f614 <_fflush_r+0x70>)
 800f5fe:	429c      	cmp	r4, r3
 800f600:	d101      	bne.n	800f606 <_fflush_r+0x62>
 800f602:	68ac      	ldr	r4, [r5, #8]
 800f604:	e7df      	b.n	800f5c6 <_fflush_r+0x22>
 800f606:	4b04      	ldr	r3, [pc, #16]	; (800f618 <_fflush_r+0x74>)
 800f608:	429c      	cmp	r4, r3
 800f60a:	bf08      	it	eq
 800f60c:	68ec      	ldreq	r4, [r5, #12]
 800f60e:	e7da      	b.n	800f5c6 <_fflush_r+0x22>
 800f610:	08010a14 	.word	0x08010a14
 800f614:	08010a34 	.word	0x08010a34
 800f618:	080109f4 	.word	0x080109f4

0800f61c <std>:
 800f61c:	2300      	movs	r3, #0
 800f61e:	b510      	push	{r4, lr}
 800f620:	4604      	mov	r4, r0
 800f622:	e9c0 3300 	strd	r3, r3, [r0]
 800f626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f62a:	6083      	str	r3, [r0, #8]
 800f62c:	8181      	strh	r1, [r0, #12]
 800f62e:	6643      	str	r3, [r0, #100]	; 0x64
 800f630:	81c2      	strh	r2, [r0, #14]
 800f632:	6183      	str	r3, [r0, #24]
 800f634:	4619      	mov	r1, r3
 800f636:	2208      	movs	r2, #8
 800f638:	305c      	adds	r0, #92	; 0x5c
 800f63a:	f7ff fdd7 	bl	800f1ec <memset>
 800f63e:	4b05      	ldr	r3, [pc, #20]	; (800f654 <std+0x38>)
 800f640:	6263      	str	r3, [r4, #36]	; 0x24
 800f642:	4b05      	ldr	r3, [pc, #20]	; (800f658 <std+0x3c>)
 800f644:	62a3      	str	r3, [r4, #40]	; 0x28
 800f646:	4b05      	ldr	r3, [pc, #20]	; (800f65c <std+0x40>)
 800f648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f64a:	4b05      	ldr	r3, [pc, #20]	; (800f660 <std+0x44>)
 800f64c:	6224      	str	r4, [r4, #32]
 800f64e:	6323      	str	r3, [r4, #48]	; 0x30
 800f650:	bd10      	pop	{r4, pc}
 800f652:	bf00      	nop
 800f654:	08010025 	.word	0x08010025
 800f658:	08010047 	.word	0x08010047
 800f65c:	0801007f 	.word	0x0801007f
 800f660:	080100a3 	.word	0x080100a3

0800f664 <_cleanup_r>:
 800f664:	4901      	ldr	r1, [pc, #4]	; (800f66c <_cleanup_r+0x8>)
 800f666:	f000 b8af 	b.w	800f7c8 <_fwalk_reent>
 800f66a:	bf00      	nop
 800f66c:	0800f5a5 	.word	0x0800f5a5

0800f670 <__sfmoreglue>:
 800f670:	b570      	push	{r4, r5, r6, lr}
 800f672:	1e4a      	subs	r2, r1, #1
 800f674:	2568      	movs	r5, #104	; 0x68
 800f676:	4355      	muls	r5, r2
 800f678:	460e      	mov	r6, r1
 800f67a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f67e:	f000 f979 	bl	800f974 <_malloc_r>
 800f682:	4604      	mov	r4, r0
 800f684:	b140      	cbz	r0, 800f698 <__sfmoreglue+0x28>
 800f686:	2100      	movs	r1, #0
 800f688:	e9c0 1600 	strd	r1, r6, [r0]
 800f68c:	300c      	adds	r0, #12
 800f68e:	60a0      	str	r0, [r4, #8]
 800f690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f694:	f7ff fdaa 	bl	800f1ec <memset>
 800f698:	4620      	mov	r0, r4
 800f69a:	bd70      	pop	{r4, r5, r6, pc}

0800f69c <__sfp_lock_acquire>:
 800f69c:	4801      	ldr	r0, [pc, #4]	; (800f6a4 <__sfp_lock_acquire+0x8>)
 800f69e:	f000 b8b3 	b.w	800f808 <__retarget_lock_acquire_recursive>
 800f6a2:	bf00      	nop
 800f6a4:	200104fc 	.word	0x200104fc

0800f6a8 <__sfp_lock_release>:
 800f6a8:	4801      	ldr	r0, [pc, #4]	; (800f6b0 <__sfp_lock_release+0x8>)
 800f6aa:	f000 b8ae 	b.w	800f80a <__retarget_lock_release_recursive>
 800f6ae:	bf00      	nop
 800f6b0:	200104fc 	.word	0x200104fc

0800f6b4 <__sinit_lock_acquire>:
 800f6b4:	4801      	ldr	r0, [pc, #4]	; (800f6bc <__sinit_lock_acquire+0x8>)
 800f6b6:	f000 b8a7 	b.w	800f808 <__retarget_lock_acquire_recursive>
 800f6ba:	bf00      	nop
 800f6bc:	200104f7 	.word	0x200104f7

0800f6c0 <__sinit_lock_release>:
 800f6c0:	4801      	ldr	r0, [pc, #4]	; (800f6c8 <__sinit_lock_release+0x8>)
 800f6c2:	f000 b8a2 	b.w	800f80a <__retarget_lock_release_recursive>
 800f6c6:	bf00      	nop
 800f6c8:	200104f7 	.word	0x200104f7

0800f6cc <__sinit>:
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	f7ff fff0 	bl	800f6b4 <__sinit_lock_acquire>
 800f6d4:	69a3      	ldr	r3, [r4, #24]
 800f6d6:	b11b      	cbz	r3, 800f6e0 <__sinit+0x14>
 800f6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6dc:	f7ff bff0 	b.w	800f6c0 <__sinit_lock_release>
 800f6e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6e4:	6523      	str	r3, [r4, #80]	; 0x50
 800f6e6:	4b13      	ldr	r3, [pc, #76]	; (800f734 <__sinit+0x68>)
 800f6e8:	4a13      	ldr	r2, [pc, #76]	; (800f738 <__sinit+0x6c>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6ee:	42a3      	cmp	r3, r4
 800f6f0:	bf04      	itt	eq
 800f6f2:	2301      	moveq	r3, #1
 800f6f4:	61a3      	streq	r3, [r4, #24]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 f820 	bl	800f73c <__sfp>
 800f6fc:	6060      	str	r0, [r4, #4]
 800f6fe:	4620      	mov	r0, r4
 800f700:	f000 f81c 	bl	800f73c <__sfp>
 800f704:	60a0      	str	r0, [r4, #8]
 800f706:	4620      	mov	r0, r4
 800f708:	f000 f818 	bl	800f73c <__sfp>
 800f70c:	2200      	movs	r2, #0
 800f70e:	60e0      	str	r0, [r4, #12]
 800f710:	2104      	movs	r1, #4
 800f712:	6860      	ldr	r0, [r4, #4]
 800f714:	f7ff ff82 	bl	800f61c <std>
 800f718:	68a0      	ldr	r0, [r4, #8]
 800f71a:	2201      	movs	r2, #1
 800f71c:	2109      	movs	r1, #9
 800f71e:	f7ff ff7d 	bl	800f61c <std>
 800f722:	68e0      	ldr	r0, [r4, #12]
 800f724:	2202      	movs	r2, #2
 800f726:	2112      	movs	r1, #18
 800f728:	f7ff ff78 	bl	800f61c <std>
 800f72c:	2301      	movs	r3, #1
 800f72e:	61a3      	str	r3, [r4, #24]
 800f730:	e7d2      	b.n	800f6d8 <__sinit+0xc>
 800f732:	bf00      	nop
 800f734:	080109f0 	.word	0x080109f0
 800f738:	0800f665 	.word	0x0800f665

0800f73c <__sfp>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	4607      	mov	r7, r0
 800f740:	f7ff ffac 	bl	800f69c <__sfp_lock_acquire>
 800f744:	4b1e      	ldr	r3, [pc, #120]	; (800f7c0 <__sfp+0x84>)
 800f746:	681e      	ldr	r6, [r3, #0]
 800f748:	69b3      	ldr	r3, [r6, #24]
 800f74a:	b913      	cbnz	r3, 800f752 <__sfp+0x16>
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7ff ffbd 	bl	800f6cc <__sinit>
 800f752:	3648      	adds	r6, #72	; 0x48
 800f754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f758:	3b01      	subs	r3, #1
 800f75a:	d503      	bpl.n	800f764 <__sfp+0x28>
 800f75c:	6833      	ldr	r3, [r6, #0]
 800f75e:	b30b      	cbz	r3, 800f7a4 <__sfp+0x68>
 800f760:	6836      	ldr	r6, [r6, #0]
 800f762:	e7f7      	b.n	800f754 <__sfp+0x18>
 800f764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f768:	b9d5      	cbnz	r5, 800f7a0 <__sfp+0x64>
 800f76a:	4b16      	ldr	r3, [pc, #88]	; (800f7c4 <__sfp+0x88>)
 800f76c:	60e3      	str	r3, [r4, #12]
 800f76e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f772:	6665      	str	r5, [r4, #100]	; 0x64
 800f774:	f000 f847 	bl	800f806 <__retarget_lock_init_recursive>
 800f778:	f7ff ff96 	bl	800f6a8 <__sfp_lock_release>
 800f77c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f784:	6025      	str	r5, [r4, #0]
 800f786:	61a5      	str	r5, [r4, #24]
 800f788:	2208      	movs	r2, #8
 800f78a:	4629      	mov	r1, r5
 800f78c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f790:	f7ff fd2c 	bl	800f1ec <memset>
 800f794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f79c:	4620      	mov	r0, r4
 800f79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a0:	3468      	adds	r4, #104	; 0x68
 800f7a2:	e7d9      	b.n	800f758 <__sfp+0x1c>
 800f7a4:	2104      	movs	r1, #4
 800f7a6:	4638      	mov	r0, r7
 800f7a8:	f7ff ff62 	bl	800f670 <__sfmoreglue>
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	6030      	str	r0, [r6, #0]
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d1d5      	bne.n	800f760 <__sfp+0x24>
 800f7b4:	f7ff ff78 	bl	800f6a8 <__sfp_lock_release>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	e7ee      	b.n	800f79c <__sfp+0x60>
 800f7be:	bf00      	nop
 800f7c0:	080109f0 	.word	0x080109f0
 800f7c4:	ffff0001 	.word	0xffff0001

0800f7c8 <_fwalk_reent>:
 800f7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	4688      	mov	r8, r1
 800f7d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7d4:	2700      	movs	r7, #0
 800f7d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7da:	f1b9 0901 	subs.w	r9, r9, #1
 800f7de:	d505      	bpl.n	800f7ec <_fwalk_reent+0x24>
 800f7e0:	6824      	ldr	r4, [r4, #0]
 800f7e2:	2c00      	cmp	r4, #0
 800f7e4:	d1f7      	bne.n	800f7d6 <_fwalk_reent+0xe>
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ec:	89ab      	ldrh	r3, [r5, #12]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d907      	bls.n	800f802 <_fwalk_reent+0x3a>
 800f7f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	d003      	beq.n	800f802 <_fwalk_reent+0x3a>
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	47c0      	blx	r8
 800f800:	4307      	orrs	r7, r0
 800f802:	3568      	adds	r5, #104	; 0x68
 800f804:	e7e9      	b.n	800f7da <_fwalk_reent+0x12>

0800f806 <__retarget_lock_init_recursive>:
 800f806:	4770      	bx	lr

0800f808 <__retarget_lock_acquire_recursive>:
 800f808:	4770      	bx	lr

0800f80a <__retarget_lock_release_recursive>:
 800f80a:	4770      	bx	lr

0800f80c <__swhatbuf_r>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	460e      	mov	r6, r1
 800f810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f814:	2900      	cmp	r1, #0
 800f816:	b096      	sub	sp, #88	; 0x58
 800f818:	4614      	mov	r4, r2
 800f81a:	461d      	mov	r5, r3
 800f81c:	da07      	bge.n	800f82e <__swhatbuf_r+0x22>
 800f81e:	2300      	movs	r3, #0
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	89b3      	ldrh	r3, [r6, #12]
 800f824:	061a      	lsls	r2, r3, #24
 800f826:	d410      	bmi.n	800f84a <__swhatbuf_r+0x3e>
 800f828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f82c:	e00e      	b.n	800f84c <__swhatbuf_r+0x40>
 800f82e:	466a      	mov	r2, sp
 800f830:	f000 fc5e 	bl	80100f0 <_fstat_r>
 800f834:	2800      	cmp	r0, #0
 800f836:	dbf2      	blt.n	800f81e <__swhatbuf_r+0x12>
 800f838:	9a01      	ldr	r2, [sp, #4]
 800f83a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f83e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f842:	425a      	negs	r2, r3
 800f844:	415a      	adcs	r2, r3
 800f846:	602a      	str	r2, [r5, #0]
 800f848:	e7ee      	b.n	800f828 <__swhatbuf_r+0x1c>
 800f84a:	2340      	movs	r3, #64	; 0x40
 800f84c:	2000      	movs	r0, #0
 800f84e:	6023      	str	r3, [r4, #0]
 800f850:	b016      	add	sp, #88	; 0x58
 800f852:	bd70      	pop	{r4, r5, r6, pc}

0800f854 <__smakebuf_r>:
 800f854:	898b      	ldrh	r3, [r1, #12]
 800f856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f858:	079d      	lsls	r5, r3, #30
 800f85a:	4606      	mov	r6, r0
 800f85c:	460c      	mov	r4, r1
 800f85e:	d507      	bpl.n	800f870 <__smakebuf_r+0x1c>
 800f860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f864:	6023      	str	r3, [r4, #0]
 800f866:	6123      	str	r3, [r4, #16]
 800f868:	2301      	movs	r3, #1
 800f86a:	6163      	str	r3, [r4, #20]
 800f86c:	b002      	add	sp, #8
 800f86e:	bd70      	pop	{r4, r5, r6, pc}
 800f870:	ab01      	add	r3, sp, #4
 800f872:	466a      	mov	r2, sp
 800f874:	f7ff ffca 	bl	800f80c <__swhatbuf_r>
 800f878:	9900      	ldr	r1, [sp, #0]
 800f87a:	4605      	mov	r5, r0
 800f87c:	4630      	mov	r0, r6
 800f87e:	f000 f879 	bl	800f974 <_malloc_r>
 800f882:	b948      	cbnz	r0, 800f898 <__smakebuf_r+0x44>
 800f884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f888:	059a      	lsls	r2, r3, #22
 800f88a:	d4ef      	bmi.n	800f86c <__smakebuf_r+0x18>
 800f88c:	f023 0303 	bic.w	r3, r3, #3
 800f890:	f043 0302 	orr.w	r3, r3, #2
 800f894:	81a3      	strh	r3, [r4, #12]
 800f896:	e7e3      	b.n	800f860 <__smakebuf_r+0xc>
 800f898:	4b0d      	ldr	r3, [pc, #52]	; (800f8d0 <__smakebuf_r+0x7c>)
 800f89a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f89c:	89a3      	ldrh	r3, [r4, #12]
 800f89e:	6020      	str	r0, [r4, #0]
 800f8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8a4:	81a3      	strh	r3, [r4, #12]
 800f8a6:	9b00      	ldr	r3, [sp, #0]
 800f8a8:	6163      	str	r3, [r4, #20]
 800f8aa:	9b01      	ldr	r3, [sp, #4]
 800f8ac:	6120      	str	r0, [r4, #16]
 800f8ae:	b15b      	cbz	r3, 800f8c8 <__smakebuf_r+0x74>
 800f8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	f000 fc2d 	bl	8010114 <_isatty_r>
 800f8ba:	b128      	cbz	r0, 800f8c8 <__smakebuf_r+0x74>
 800f8bc:	89a3      	ldrh	r3, [r4, #12]
 800f8be:	f023 0303 	bic.w	r3, r3, #3
 800f8c2:	f043 0301 	orr.w	r3, r3, #1
 800f8c6:	81a3      	strh	r3, [r4, #12]
 800f8c8:	89a0      	ldrh	r0, [r4, #12]
 800f8ca:	4305      	orrs	r5, r0
 800f8cc:	81a5      	strh	r5, [r4, #12]
 800f8ce:	e7cd      	b.n	800f86c <__smakebuf_r+0x18>
 800f8d0:	0800f665 	.word	0x0800f665

0800f8d4 <_free_r>:
 800f8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8d6:	2900      	cmp	r1, #0
 800f8d8:	d048      	beq.n	800f96c <_free_r+0x98>
 800f8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8de:	9001      	str	r0, [sp, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f1a1 0404 	sub.w	r4, r1, #4
 800f8e6:	bfb8      	it	lt
 800f8e8:	18e4      	addlt	r4, r4, r3
 800f8ea:	f000 fc35 	bl	8010158 <__malloc_lock>
 800f8ee:	4a20      	ldr	r2, [pc, #128]	; (800f970 <_free_r+0x9c>)
 800f8f0:	9801      	ldr	r0, [sp, #4]
 800f8f2:	6813      	ldr	r3, [r2, #0]
 800f8f4:	4615      	mov	r5, r2
 800f8f6:	b933      	cbnz	r3, 800f906 <_free_r+0x32>
 800f8f8:	6063      	str	r3, [r4, #4]
 800f8fa:	6014      	str	r4, [r2, #0]
 800f8fc:	b003      	add	sp, #12
 800f8fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f902:	f000 bc2f 	b.w	8010164 <__malloc_unlock>
 800f906:	42a3      	cmp	r3, r4
 800f908:	d90b      	bls.n	800f922 <_free_r+0x4e>
 800f90a:	6821      	ldr	r1, [r4, #0]
 800f90c:	1862      	adds	r2, r4, r1
 800f90e:	4293      	cmp	r3, r2
 800f910:	bf04      	itt	eq
 800f912:	681a      	ldreq	r2, [r3, #0]
 800f914:	685b      	ldreq	r3, [r3, #4]
 800f916:	6063      	str	r3, [r4, #4]
 800f918:	bf04      	itt	eq
 800f91a:	1852      	addeq	r2, r2, r1
 800f91c:	6022      	streq	r2, [r4, #0]
 800f91e:	602c      	str	r4, [r5, #0]
 800f920:	e7ec      	b.n	800f8fc <_free_r+0x28>
 800f922:	461a      	mov	r2, r3
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	b10b      	cbz	r3, 800f92c <_free_r+0x58>
 800f928:	42a3      	cmp	r3, r4
 800f92a:	d9fa      	bls.n	800f922 <_free_r+0x4e>
 800f92c:	6811      	ldr	r1, [r2, #0]
 800f92e:	1855      	adds	r5, r2, r1
 800f930:	42a5      	cmp	r5, r4
 800f932:	d10b      	bne.n	800f94c <_free_r+0x78>
 800f934:	6824      	ldr	r4, [r4, #0]
 800f936:	4421      	add	r1, r4
 800f938:	1854      	adds	r4, r2, r1
 800f93a:	42a3      	cmp	r3, r4
 800f93c:	6011      	str	r1, [r2, #0]
 800f93e:	d1dd      	bne.n	800f8fc <_free_r+0x28>
 800f940:	681c      	ldr	r4, [r3, #0]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	6053      	str	r3, [r2, #4]
 800f946:	4421      	add	r1, r4
 800f948:	6011      	str	r1, [r2, #0]
 800f94a:	e7d7      	b.n	800f8fc <_free_r+0x28>
 800f94c:	d902      	bls.n	800f954 <_free_r+0x80>
 800f94e:	230c      	movs	r3, #12
 800f950:	6003      	str	r3, [r0, #0]
 800f952:	e7d3      	b.n	800f8fc <_free_r+0x28>
 800f954:	6825      	ldr	r5, [r4, #0]
 800f956:	1961      	adds	r1, r4, r5
 800f958:	428b      	cmp	r3, r1
 800f95a:	bf04      	itt	eq
 800f95c:	6819      	ldreq	r1, [r3, #0]
 800f95e:	685b      	ldreq	r3, [r3, #4]
 800f960:	6063      	str	r3, [r4, #4]
 800f962:	bf04      	itt	eq
 800f964:	1949      	addeq	r1, r1, r5
 800f966:	6021      	streq	r1, [r4, #0]
 800f968:	6054      	str	r4, [r2, #4]
 800f96a:	e7c7      	b.n	800f8fc <_free_r+0x28>
 800f96c:	b003      	add	sp, #12
 800f96e:	bd30      	pop	{r4, r5, pc}
 800f970:	200040c0 	.word	0x200040c0

0800f974 <_malloc_r>:
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	1ccd      	adds	r5, r1, #3
 800f978:	f025 0503 	bic.w	r5, r5, #3
 800f97c:	3508      	adds	r5, #8
 800f97e:	2d0c      	cmp	r5, #12
 800f980:	bf38      	it	cc
 800f982:	250c      	movcc	r5, #12
 800f984:	2d00      	cmp	r5, #0
 800f986:	4606      	mov	r6, r0
 800f988:	db01      	blt.n	800f98e <_malloc_r+0x1a>
 800f98a:	42a9      	cmp	r1, r5
 800f98c:	d903      	bls.n	800f996 <_malloc_r+0x22>
 800f98e:	230c      	movs	r3, #12
 800f990:	6033      	str	r3, [r6, #0]
 800f992:	2000      	movs	r0, #0
 800f994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f996:	f000 fbdf 	bl	8010158 <__malloc_lock>
 800f99a:	4921      	ldr	r1, [pc, #132]	; (800fa20 <_malloc_r+0xac>)
 800f99c:	680a      	ldr	r2, [r1, #0]
 800f99e:	4614      	mov	r4, r2
 800f9a0:	b99c      	cbnz	r4, 800f9ca <_malloc_r+0x56>
 800f9a2:	4f20      	ldr	r7, [pc, #128]	; (800fa24 <_malloc_r+0xb0>)
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	b923      	cbnz	r3, 800f9b2 <_malloc_r+0x3e>
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f000 fb2a 	bl	8010004 <_sbrk_r>
 800f9b0:	6038      	str	r0, [r7, #0]
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f000 fb25 	bl	8010004 <_sbrk_r>
 800f9ba:	1c43      	adds	r3, r0, #1
 800f9bc:	d123      	bne.n	800fa06 <_malloc_r+0x92>
 800f9be:	230c      	movs	r3, #12
 800f9c0:	6033      	str	r3, [r6, #0]
 800f9c2:	4630      	mov	r0, r6
 800f9c4:	f000 fbce 	bl	8010164 <__malloc_unlock>
 800f9c8:	e7e3      	b.n	800f992 <_malloc_r+0x1e>
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	1b5b      	subs	r3, r3, r5
 800f9ce:	d417      	bmi.n	800fa00 <_malloc_r+0x8c>
 800f9d0:	2b0b      	cmp	r3, #11
 800f9d2:	d903      	bls.n	800f9dc <_malloc_r+0x68>
 800f9d4:	6023      	str	r3, [r4, #0]
 800f9d6:	441c      	add	r4, r3
 800f9d8:	6025      	str	r5, [r4, #0]
 800f9da:	e004      	b.n	800f9e6 <_malloc_r+0x72>
 800f9dc:	6863      	ldr	r3, [r4, #4]
 800f9de:	42a2      	cmp	r2, r4
 800f9e0:	bf0c      	ite	eq
 800f9e2:	600b      	streq	r3, [r1, #0]
 800f9e4:	6053      	strne	r3, [r2, #4]
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f000 fbbc 	bl	8010164 <__malloc_unlock>
 800f9ec:	f104 000b 	add.w	r0, r4, #11
 800f9f0:	1d23      	adds	r3, r4, #4
 800f9f2:	f020 0007 	bic.w	r0, r0, #7
 800f9f6:	1ac2      	subs	r2, r0, r3
 800f9f8:	d0cc      	beq.n	800f994 <_malloc_r+0x20>
 800f9fa:	1a1b      	subs	r3, r3, r0
 800f9fc:	50a3      	str	r3, [r4, r2]
 800f9fe:	e7c9      	b.n	800f994 <_malloc_r+0x20>
 800fa00:	4622      	mov	r2, r4
 800fa02:	6864      	ldr	r4, [r4, #4]
 800fa04:	e7cc      	b.n	800f9a0 <_malloc_r+0x2c>
 800fa06:	1cc4      	adds	r4, r0, #3
 800fa08:	f024 0403 	bic.w	r4, r4, #3
 800fa0c:	42a0      	cmp	r0, r4
 800fa0e:	d0e3      	beq.n	800f9d8 <_malloc_r+0x64>
 800fa10:	1a21      	subs	r1, r4, r0
 800fa12:	4630      	mov	r0, r6
 800fa14:	f000 faf6 	bl	8010004 <_sbrk_r>
 800fa18:	3001      	adds	r0, #1
 800fa1a:	d1dd      	bne.n	800f9d8 <_malloc_r+0x64>
 800fa1c:	e7cf      	b.n	800f9be <_malloc_r+0x4a>
 800fa1e:	bf00      	nop
 800fa20:	200040c0 	.word	0x200040c0
 800fa24:	200040c4 	.word	0x200040c4

0800fa28 <__sfputc_r>:
 800fa28:	6893      	ldr	r3, [r2, #8]
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	b410      	push	{r4}
 800fa30:	6093      	str	r3, [r2, #8]
 800fa32:	da08      	bge.n	800fa46 <__sfputc_r+0x1e>
 800fa34:	6994      	ldr	r4, [r2, #24]
 800fa36:	42a3      	cmp	r3, r4
 800fa38:	db01      	blt.n	800fa3e <__sfputc_r+0x16>
 800fa3a:	290a      	cmp	r1, #10
 800fa3c:	d103      	bne.n	800fa46 <__sfputc_r+0x1e>
 800fa3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa42:	f7ff bc69 	b.w	800f318 <__swbuf_r>
 800fa46:	6813      	ldr	r3, [r2, #0]
 800fa48:	1c58      	adds	r0, r3, #1
 800fa4a:	6010      	str	r0, [r2, #0]
 800fa4c:	7019      	strb	r1, [r3, #0]
 800fa4e:	4608      	mov	r0, r1
 800fa50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <__sfputs_r>:
 800fa56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa58:	4606      	mov	r6, r0
 800fa5a:	460f      	mov	r7, r1
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	18d5      	adds	r5, r2, r3
 800fa60:	42ac      	cmp	r4, r5
 800fa62:	d101      	bne.n	800fa68 <__sfputs_r+0x12>
 800fa64:	2000      	movs	r0, #0
 800fa66:	e007      	b.n	800fa78 <__sfputs_r+0x22>
 800fa68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa6c:	463a      	mov	r2, r7
 800fa6e:	4630      	mov	r0, r6
 800fa70:	f7ff ffda 	bl	800fa28 <__sfputc_r>
 800fa74:	1c43      	adds	r3, r0, #1
 800fa76:	d1f3      	bne.n	800fa60 <__sfputs_r+0xa>
 800fa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa7c <_vfiprintf_r>:
 800fa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa80:	460d      	mov	r5, r1
 800fa82:	b09d      	sub	sp, #116	; 0x74
 800fa84:	4614      	mov	r4, r2
 800fa86:	4698      	mov	r8, r3
 800fa88:	4606      	mov	r6, r0
 800fa8a:	b118      	cbz	r0, 800fa94 <_vfiprintf_r+0x18>
 800fa8c:	6983      	ldr	r3, [r0, #24]
 800fa8e:	b90b      	cbnz	r3, 800fa94 <_vfiprintf_r+0x18>
 800fa90:	f7ff fe1c 	bl	800f6cc <__sinit>
 800fa94:	4b89      	ldr	r3, [pc, #548]	; (800fcbc <_vfiprintf_r+0x240>)
 800fa96:	429d      	cmp	r5, r3
 800fa98:	d11b      	bne.n	800fad2 <_vfiprintf_r+0x56>
 800fa9a:	6875      	ldr	r5, [r6, #4]
 800fa9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa9e:	07d9      	lsls	r1, r3, #31
 800faa0:	d405      	bmi.n	800faae <_vfiprintf_r+0x32>
 800faa2:	89ab      	ldrh	r3, [r5, #12]
 800faa4:	059a      	lsls	r2, r3, #22
 800faa6:	d402      	bmi.n	800faae <_vfiprintf_r+0x32>
 800faa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faaa:	f7ff fead 	bl	800f808 <__retarget_lock_acquire_recursive>
 800faae:	89ab      	ldrh	r3, [r5, #12]
 800fab0:	071b      	lsls	r3, r3, #28
 800fab2:	d501      	bpl.n	800fab8 <_vfiprintf_r+0x3c>
 800fab4:	692b      	ldr	r3, [r5, #16]
 800fab6:	b9eb      	cbnz	r3, 800faf4 <_vfiprintf_r+0x78>
 800fab8:	4629      	mov	r1, r5
 800faba:	4630      	mov	r0, r6
 800fabc:	f7ff fc7e 	bl	800f3bc <__swsetup_r>
 800fac0:	b1c0      	cbz	r0, 800faf4 <_vfiprintf_r+0x78>
 800fac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fac4:	07dc      	lsls	r4, r3, #31
 800fac6:	d50e      	bpl.n	800fae6 <_vfiprintf_r+0x6a>
 800fac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800facc:	b01d      	add	sp, #116	; 0x74
 800face:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad2:	4b7b      	ldr	r3, [pc, #492]	; (800fcc0 <_vfiprintf_r+0x244>)
 800fad4:	429d      	cmp	r5, r3
 800fad6:	d101      	bne.n	800fadc <_vfiprintf_r+0x60>
 800fad8:	68b5      	ldr	r5, [r6, #8]
 800fada:	e7df      	b.n	800fa9c <_vfiprintf_r+0x20>
 800fadc:	4b79      	ldr	r3, [pc, #484]	; (800fcc4 <_vfiprintf_r+0x248>)
 800fade:	429d      	cmp	r5, r3
 800fae0:	bf08      	it	eq
 800fae2:	68f5      	ldreq	r5, [r6, #12]
 800fae4:	e7da      	b.n	800fa9c <_vfiprintf_r+0x20>
 800fae6:	89ab      	ldrh	r3, [r5, #12]
 800fae8:	0598      	lsls	r0, r3, #22
 800faea:	d4ed      	bmi.n	800fac8 <_vfiprintf_r+0x4c>
 800faec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800faee:	f7ff fe8c 	bl	800f80a <__retarget_lock_release_recursive>
 800faf2:	e7e9      	b.n	800fac8 <_vfiprintf_r+0x4c>
 800faf4:	2300      	movs	r3, #0
 800faf6:	9309      	str	r3, [sp, #36]	; 0x24
 800faf8:	2320      	movs	r3, #32
 800fafa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb02:	2330      	movs	r3, #48	; 0x30
 800fb04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fcc8 <_vfiprintf_r+0x24c>
 800fb08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb0c:	f04f 0901 	mov.w	r9, #1
 800fb10:	4623      	mov	r3, r4
 800fb12:	469a      	mov	sl, r3
 800fb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb18:	b10a      	cbz	r2, 800fb1e <_vfiprintf_r+0xa2>
 800fb1a:	2a25      	cmp	r2, #37	; 0x25
 800fb1c:	d1f9      	bne.n	800fb12 <_vfiprintf_r+0x96>
 800fb1e:	ebba 0b04 	subs.w	fp, sl, r4
 800fb22:	d00b      	beq.n	800fb3c <_vfiprintf_r+0xc0>
 800fb24:	465b      	mov	r3, fp
 800fb26:	4622      	mov	r2, r4
 800fb28:	4629      	mov	r1, r5
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f7ff ff93 	bl	800fa56 <__sfputs_r>
 800fb30:	3001      	adds	r0, #1
 800fb32:	f000 80aa 	beq.w	800fc8a <_vfiprintf_r+0x20e>
 800fb36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb38:	445a      	add	r2, fp
 800fb3a:	9209      	str	r2, [sp, #36]	; 0x24
 800fb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f000 80a2 	beq.w	800fc8a <_vfiprintf_r+0x20e>
 800fb46:	2300      	movs	r3, #0
 800fb48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb50:	f10a 0a01 	add.w	sl, sl, #1
 800fb54:	9304      	str	r3, [sp, #16]
 800fb56:	9307      	str	r3, [sp, #28]
 800fb58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb5c:	931a      	str	r3, [sp, #104]	; 0x68
 800fb5e:	4654      	mov	r4, sl
 800fb60:	2205      	movs	r2, #5
 800fb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb66:	4858      	ldr	r0, [pc, #352]	; (800fcc8 <_vfiprintf_r+0x24c>)
 800fb68:	f7f0 fb3a 	bl	80001e0 <memchr>
 800fb6c:	9a04      	ldr	r2, [sp, #16]
 800fb6e:	b9d8      	cbnz	r0, 800fba8 <_vfiprintf_r+0x12c>
 800fb70:	06d1      	lsls	r1, r2, #27
 800fb72:	bf44      	itt	mi
 800fb74:	2320      	movmi	r3, #32
 800fb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb7a:	0713      	lsls	r3, r2, #28
 800fb7c:	bf44      	itt	mi
 800fb7e:	232b      	movmi	r3, #43	; 0x2b
 800fb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb84:	f89a 3000 	ldrb.w	r3, [sl]
 800fb88:	2b2a      	cmp	r3, #42	; 0x2a
 800fb8a:	d015      	beq.n	800fbb8 <_vfiprintf_r+0x13c>
 800fb8c:	9a07      	ldr	r2, [sp, #28]
 800fb8e:	4654      	mov	r4, sl
 800fb90:	2000      	movs	r0, #0
 800fb92:	f04f 0c0a 	mov.w	ip, #10
 800fb96:	4621      	mov	r1, r4
 800fb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb9c:	3b30      	subs	r3, #48	; 0x30
 800fb9e:	2b09      	cmp	r3, #9
 800fba0:	d94e      	bls.n	800fc40 <_vfiprintf_r+0x1c4>
 800fba2:	b1b0      	cbz	r0, 800fbd2 <_vfiprintf_r+0x156>
 800fba4:	9207      	str	r2, [sp, #28]
 800fba6:	e014      	b.n	800fbd2 <_vfiprintf_r+0x156>
 800fba8:	eba0 0308 	sub.w	r3, r0, r8
 800fbac:	fa09 f303 	lsl.w	r3, r9, r3
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	9304      	str	r3, [sp, #16]
 800fbb4:	46a2      	mov	sl, r4
 800fbb6:	e7d2      	b.n	800fb5e <_vfiprintf_r+0xe2>
 800fbb8:	9b03      	ldr	r3, [sp, #12]
 800fbba:	1d19      	adds	r1, r3, #4
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	9103      	str	r1, [sp, #12]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	bfbb      	ittet	lt
 800fbc4:	425b      	neglt	r3, r3
 800fbc6:	f042 0202 	orrlt.w	r2, r2, #2
 800fbca:	9307      	strge	r3, [sp, #28]
 800fbcc:	9307      	strlt	r3, [sp, #28]
 800fbce:	bfb8      	it	lt
 800fbd0:	9204      	strlt	r2, [sp, #16]
 800fbd2:	7823      	ldrb	r3, [r4, #0]
 800fbd4:	2b2e      	cmp	r3, #46	; 0x2e
 800fbd6:	d10c      	bne.n	800fbf2 <_vfiprintf_r+0x176>
 800fbd8:	7863      	ldrb	r3, [r4, #1]
 800fbda:	2b2a      	cmp	r3, #42	; 0x2a
 800fbdc:	d135      	bne.n	800fc4a <_vfiprintf_r+0x1ce>
 800fbde:	9b03      	ldr	r3, [sp, #12]
 800fbe0:	1d1a      	adds	r2, r3, #4
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	9203      	str	r2, [sp, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	bfb8      	it	lt
 800fbea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fbee:	3402      	adds	r4, #2
 800fbf0:	9305      	str	r3, [sp, #20]
 800fbf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fcd8 <_vfiprintf_r+0x25c>
 800fbf6:	7821      	ldrb	r1, [r4, #0]
 800fbf8:	2203      	movs	r2, #3
 800fbfa:	4650      	mov	r0, sl
 800fbfc:	f7f0 faf0 	bl	80001e0 <memchr>
 800fc00:	b140      	cbz	r0, 800fc14 <_vfiprintf_r+0x198>
 800fc02:	2340      	movs	r3, #64	; 0x40
 800fc04:	eba0 000a 	sub.w	r0, r0, sl
 800fc08:	fa03 f000 	lsl.w	r0, r3, r0
 800fc0c:	9b04      	ldr	r3, [sp, #16]
 800fc0e:	4303      	orrs	r3, r0
 800fc10:	3401      	adds	r4, #1
 800fc12:	9304      	str	r3, [sp, #16]
 800fc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc18:	482c      	ldr	r0, [pc, #176]	; (800fccc <_vfiprintf_r+0x250>)
 800fc1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc1e:	2206      	movs	r2, #6
 800fc20:	f7f0 fade 	bl	80001e0 <memchr>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d03f      	beq.n	800fca8 <_vfiprintf_r+0x22c>
 800fc28:	4b29      	ldr	r3, [pc, #164]	; (800fcd0 <_vfiprintf_r+0x254>)
 800fc2a:	bb1b      	cbnz	r3, 800fc74 <_vfiprintf_r+0x1f8>
 800fc2c:	9b03      	ldr	r3, [sp, #12]
 800fc2e:	3307      	adds	r3, #7
 800fc30:	f023 0307 	bic.w	r3, r3, #7
 800fc34:	3308      	adds	r3, #8
 800fc36:	9303      	str	r3, [sp, #12]
 800fc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc3a:	443b      	add	r3, r7
 800fc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800fc3e:	e767      	b.n	800fb10 <_vfiprintf_r+0x94>
 800fc40:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc44:	460c      	mov	r4, r1
 800fc46:	2001      	movs	r0, #1
 800fc48:	e7a5      	b.n	800fb96 <_vfiprintf_r+0x11a>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	3401      	adds	r4, #1
 800fc4e:	9305      	str	r3, [sp, #20]
 800fc50:	4619      	mov	r1, r3
 800fc52:	f04f 0c0a 	mov.w	ip, #10
 800fc56:	4620      	mov	r0, r4
 800fc58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc5c:	3a30      	subs	r2, #48	; 0x30
 800fc5e:	2a09      	cmp	r2, #9
 800fc60:	d903      	bls.n	800fc6a <_vfiprintf_r+0x1ee>
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0c5      	beq.n	800fbf2 <_vfiprintf_r+0x176>
 800fc66:	9105      	str	r1, [sp, #20]
 800fc68:	e7c3      	b.n	800fbf2 <_vfiprintf_r+0x176>
 800fc6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc6e:	4604      	mov	r4, r0
 800fc70:	2301      	movs	r3, #1
 800fc72:	e7f0      	b.n	800fc56 <_vfiprintf_r+0x1da>
 800fc74:	ab03      	add	r3, sp, #12
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	462a      	mov	r2, r5
 800fc7a:	4b16      	ldr	r3, [pc, #88]	; (800fcd4 <_vfiprintf_r+0x258>)
 800fc7c:	a904      	add	r1, sp, #16
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f3af 8000 	nop.w
 800fc84:	4607      	mov	r7, r0
 800fc86:	1c78      	adds	r0, r7, #1
 800fc88:	d1d6      	bne.n	800fc38 <_vfiprintf_r+0x1bc>
 800fc8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc8c:	07d9      	lsls	r1, r3, #31
 800fc8e:	d405      	bmi.n	800fc9c <_vfiprintf_r+0x220>
 800fc90:	89ab      	ldrh	r3, [r5, #12]
 800fc92:	059a      	lsls	r2, r3, #22
 800fc94:	d402      	bmi.n	800fc9c <_vfiprintf_r+0x220>
 800fc96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc98:	f7ff fdb7 	bl	800f80a <__retarget_lock_release_recursive>
 800fc9c:	89ab      	ldrh	r3, [r5, #12]
 800fc9e:	065b      	lsls	r3, r3, #25
 800fca0:	f53f af12 	bmi.w	800fac8 <_vfiprintf_r+0x4c>
 800fca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fca6:	e711      	b.n	800facc <_vfiprintf_r+0x50>
 800fca8:	ab03      	add	r3, sp, #12
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	462a      	mov	r2, r5
 800fcae:	4b09      	ldr	r3, [pc, #36]	; (800fcd4 <_vfiprintf_r+0x258>)
 800fcb0:	a904      	add	r1, sp, #16
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f000 f880 	bl	800fdb8 <_printf_i>
 800fcb8:	e7e4      	b.n	800fc84 <_vfiprintf_r+0x208>
 800fcba:	bf00      	nop
 800fcbc:	08010a14 	.word	0x08010a14
 800fcc0:	08010a34 	.word	0x08010a34
 800fcc4:	080109f4 	.word	0x080109f4
 800fcc8:	08010a54 	.word	0x08010a54
 800fccc:	08010a5e 	.word	0x08010a5e
 800fcd0:	00000000 	.word	0x00000000
 800fcd4:	0800fa57 	.word	0x0800fa57
 800fcd8:	08010a5a 	.word	0x08010a5a

0800fcdc <_printf_common>:
 800fcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce0:	4616      	mov	r6, r2
 800fce2:	4699      	mov	r9, r3
 800fce4:	688a      	ldr	r2, [r1, #8]
 800fce6:	690b      	ldr	r3, [r1, #16]
 800fce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fcec:	4293      	cmp	r3, r2
 800fcee:	bfb8      	it	lt
 800fcf0:	4613      	movlt	r3, r2
 800fcf2:	6033      	str	r3, [r6, #0]
 800fcf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fcf8:	4607      	mov	r7, r0
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	b10a      	cbz	r2, 800fd02 <_printf_common+0x26>
 800fcfe:	3301      	adds	r3, #1
 800fd00:	6033      	str	r3, [r6, #0]
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	0699      	lsls	r1, r3, #26
 800fd06:	bf42      	ittt	mi
 800fd08:	6833      	ldrmi	r3, [r6, #0]
 800fd0a:	3302      	addmi	r3, #2
 800fd0c:	6033      	strmi	r3, [r6, #0]
 800fd0e:	6825      	ldr	r5, [r4, #0]
 800fd10:	f015 0506 	ands.w	r5, r5, #6
 800fd14:	d106      	bne.n	800fd24 <_printf_common+0x48>
 800fd16:	f104 0a19 	add.w	sl, r4, #25
 800fd1a:	68e3      	ldr	r3, [r4, #12]
 800fd1c:	6832      	ldr	r2, [r6, #0]
 800fd1e:	1a9b      	subs	r3, r3, r2
 800fd20:	42ab      	cmp	r3, r5
 800fd22:	dc26      	bgt.n	800fd72 <_printf_common+0x96>
 800fd24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd28:	1e13      	subs	r3, r2, #0
 800fd2a:	6822      	ldr	r2, [r4, #0]
 800fd2c:	bf18      	it	ne
 800fd2e:	2301      	movne	r3, #1
 800fd30:	0692      	lsls	r2, r2, #26
 800fd32:	d42b      	bmi.n	800fd8c <_printf_common+0xb0>
 800fd34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd38:	4649      	mov	r1, r9
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	47c0      	blx	r8
 800fd3e:	3001      	adds	r0, #1
 800fd40:	d01e      	beq.n	800fd80 <_printf_common+0xa4>
 800fd42:	6823      	ldr	r3, [r4, #0]
 800fd44:	68e5      	ldr	r5, [r4, #12]
 800fd46:	6832      	ldr	r2, [r6, #0]
 800fd48:	f003 0306 	and.w	r3, r3, #6
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	bf08      	it	eq
 800fd50:	1aad      	subeq	r5, r5, r2
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	6922      	ldr	r2, [r4, #16]
 800fd56:	bf0c      	ite	eq
 800fd58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd5c:	2500      	movne	r5, #0
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	bfc4      	itt	gt
 800fd62:	1a9b      	subgt	r3, r3, r2
 800fd64:	18ed      	addgt	r5, r5, r3
 800fd66:	2600      	movs	r6, #0
 800fd68:	341a      	adds	r4, #26
 800fd6a:	42b5      	cmp	r5, r6
 800fd6c:	d11a      	bne.n	800fda4 <_printf_common+0xc8>
 800fd6e:	2000      	movs	r0, #0
 800fd70:	e008      	b.n	800fd84 <_printf_common+0xa8>
 800fd72:	2301      	movs	r3, #1
 800fd74:	4652      	mov	r2, sl
 800fd76:	4649      	mov	r1, r9
 800fd78:	4638      	mov	r0, r7
 800fd7a:	47c0      	blx	r8
 800fd7c:	3001      	adds	r0, #1
 800fd7e:	d103      	bne.n	800fd88 <_printf_common+0xac>
 800fd80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd88:	3501      	adds	r5, #1
 800fd8a:	e7c6      	b.n	800fd1a <_printf_common+0x3e>
 800fd8c:	18e1      	adds	r1, r4, r3
 800fd8e:	1c5a      	adds	r2, r3, #1
 800fd90:	2030      	movs	r0, #48	; 0x30
 800fd92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd96:	4422      	add	r2, r4
 800fd98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fda0:	3302      	adds	r3, #2
 800fda2:	e7c7      	b.n	800fd34 <_printf_common+0x58>
 800fda4:	2301      	movs	r3, #1
 800fda6:	4622      	mov	r2, r4
 800fda8:	4649      	mov	r1, r9
 800fdaa:	4638      	mov	r0, r7
 800fdac:	47c0      	blx	r8
 800fdae:	3001      	adds	r0, #1
 800fdb0:	d0e6      	beq.n	800fd80 <_printf_common+0xa4>
 800fdb2:	3601      	adds	r6, #1
 800fdb4:	e7d9      	b.n	800fd6a <_printf_common+0x8e>
	...

0800fdb8 <_printf_i>:
 800fdb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdbc:	460c      	mov	r4, r1
 800fdbe:	4691      	mov	r9, r2
 800fdc0:	7e27      	ldrb	r7, [r4, #24]
 800fdc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdc4:	2f78      	cmp	r7, #120	; 0x78
 800fdc6:	4680      	mov	r8, r0
 800fdc8:	469a      	mov	sl, r3
 800fdca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fdce:	d807      	bhi.n	800fde0 <_printf_i+0x28>
 800fdd0:	2f62      	cmp	r7, #98	; 0x62
 800fdd2:	d80a      	bhi.n	800fdea <_printf_i+0x32>
 800fdd4:	2f00      	cmp	r7, #0
 800fdd6:	f000 80d8 	beq.w	800ff8a <_printf_i+0x1d2>
 800fdda:	2f58      	cmp	r7, #88	; 0x58
 800fddc:	f000 80a3 	beq.w	800ff26 <_printf_i+0x16e>
 800fde0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fde4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fde8:	e03a      	b.n	800fe60 <_printf_i+0xa8>
 800fdea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fdee:	2b15      	cmp	r3, #21
 800fdf0:	d8f6      	bhi.n	800fde0 <_printf_i+0x28>
 800fdf2:	a001      	add	r0, pc, #4	; (adr r0, 800fdf8 <_printf_i+0x40>)
 800fdf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fdf8:	0800fe51 	.word	0x0800fe51
 800fdfc:	0800fe65 	.word	0x0800fe65
 800fe00:	0800fde1 	.word	0x0800fde1
 800fe04:	0800fde1 	.word	0x0800fde1
 800fe08:	0800fde1 	.word	0x0800fde1
 800fe0c:	0800fde1 	.word	0x0800fde1
 800fe10:	0800fe65 	.word	0x0800fe65
 800fe14:	0800fde1 	.word	0x0800fde1
 800fe18:	0800fde1 	.word	0x0800fde1
 800fe1c:	0800fde1 	.word	0x0800fde1
 800fe20:	0800fde1 	.word	0x0800fde1
 800fe24:	0800ff71 	.word	0x0800ff71
 800fe28:	0800fe95 	.word	0x0800fe95
 800fe2c:	0800ff53 	.word	0x0800ff53
 800fe30:	0800fde1 	.word	0x0800fde1
 800fe34:	0800fde1 	.word	0x0800fde1
 800fe38:	0800ff93 	.word	0x0800ff93
 800fe3c:	0800fde1 	.word	0x0800fde1
 800fe40:	0800fe95 	.word	0x0800fe95
 800fe44:	0800fde1 	.word	0x0800fde1
 800fe48:	0800fde1 	.word	0x0800fde1
 800fe4c:	0800ff5b 	.word	0x0800ff5b
 800fe50:	680b      	ldr	r3, [r1, #0]
 800fe52:	1d1a      	adds	r2, r3, #4
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	600a      	str	r2, [r1, #0]
 800fe58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe60:	2301      	movs	r3, #1
 800fe62:	e0a3      	b.n	800ffac <_printf_i+0x1f4>
 800fe64:	6825      	ldr	r5, [r4, #0]
 800fe66:	6808      	ldr	r0, [r1, #0]
 800fe68:	062e      	lsls	r6, r5, #24
 800fe6a:	f100 0304 	add.w	r3, r0, #4
 800fe6e:	d50a      	bpl.n	800fe86 <_printf_i+0xce>
 800fe70:	6805      	ldr	r5, [r0, #0]
 800fe72:	600b      	str	r3, [r1, #0]
 800fe74:	2d00      	cmp	r5, #0
 800fe76:	da03      	bge.n	800fe80 <_printf_i+0xc8>
 800fe78:	232d      	movs	r3, #45	; 0x2d
 800fe7a:	426d      	negs	r5, r5
 800fe7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe80:	485e      	ldr	r0, [pc, #376]	; (800fffc <_printf_i+0x244>)
 800fe82:	230a      	movs	r3, #10
 800fe84:	e019      	b.n	800feba <_printf_i+0x102>
 800fe86:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe8a:	6805      	ldr	r5, [r0, #0]
 800fe8c:	600b      	str	r3, [r1, #0]
 800fe8e:	bf18      	it	ne
 800fe90:	b22d      	sxthne	r5, r5
 800fe92:	e7ef      	b.n	800fe74 <_printf_i+0xbc>
 800fe94:	680b      	ldr	r3, [r1, #0]
 800fe96:	6825      	ldr	r5, [r4, #0]
 800fe98:	1d18      	adds	r0, r3, #4
 800fe9a:	6008      	str	r0, [r1, #0]
 800fe9c:	0628      	lsls	r0, r5, #24
 800fe9e:	d501      	bpl.n	800fea4 <_printf_i+0xec>
 800fea0:	681d      	ldr	r5, [r3, #0]
 800fea2:	e002      	b.n	800feaa <_printf_i+0xf2>
 800fea4:	0669      	lsls	r1, r5, #25
 800fea6:	d5fb      	bpl.n	800fea0 <_printf_i+0xe8>
 800fea8:	881d      	ldrh	r5, [r3, #0]
 800feaa:	4854      	ldr	r0, [pc, #336]	; (800fffc <_printf_i+0x244>)
 800feac:	2f6f      	cmp	r7, #111	; 0x6f
 800feae:	bf0c      	ite	eq
 800feb0:	2308      	moveq	r3, #8
 800feb2:	230a      	movne	r3, #10
 800feb4:	2100      	movs	r1, #0
 800feb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800feba:	6866      	ldr	r6, [r4, #4]
 800febc:	60a6      	str	r6, [r4, #8]
 800febe:	2e00      	cmp	r6, #0
 800fec0:	bfa2      	ittt	ge
 800fec2:	6821      	ldrge	r1, [r4, #0]
 800fec4:	f021 0104 	bicge.w	r1, r1, #4
 800fec8:	6021      	strge	r1, [r4, #0]
 800feca:	b90d      	cbnz	r5, 800fed0 <_printf_i+0x118>
 800fecc:	2e00      	cmp	r6, #0
 800fece:	d04d      	beq.n	800ff6c <_printf_i+0x1b4>
 800fed0:	4616      	mov	r6, r2
 800fed2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fed6:	fb03 5711 	mls	r7, r3, r1, r5
 800feda:	5dc7      	ldrb	r7, [r0, r7]
 800fedc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fee0:	462f      	mov	r7, r5
 800fee2:	42bb      	cmp	r3, r7
 800fee4:	460d      	mov	r5, r1
 800fee6:	d9f4      	bls.n	800fed2 <_printf_i+0x11a>
 800fee8:	2b08      	cmp	r3, #8
 800feea:	d10b      	bne.n	800ff04 <_printf_i+0x14c>
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	07df      	lsls	r7, r3, #31
 800fef0:	d508      	bpl.n	800ff04 <_printf_i+0x14c>
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	6861      	ldr	r1, [r4, #4]
 800fef6:	4299      	cmp	r1, r3
 800fef8:	bfde      	ittt	le
 800fefa:	2330      	movle	r3, #48	; 0x30
 800fefc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff00:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ff04:	1b92      	subs	r2, r2, r6
 800ff06:	6122      	str	r2, [r4, #16]
 800ff08:	f8cd a000 	str.w	sl, [sp]
 800ff0c:	464b      	mov	r3, r9
 800ff0e:	aa03      	add	r2, sp, #12
 800ff10:	4621      	mov	r1, r4
 800ff12:	4640      	mov	r0, r8
 800ff14:	f7ff fee2 	bl	800fcdc <_printf_common>
 800ff18:	3001      	adds	r0, #1
 800ff1a:	d14c      	bne.n	800ffb6 <_printf_i+0x1fe>
 800ff1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff20:	b004      	add	sp, #16
 800ff22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff26:	4835      	ldr	r0, [pc, #212]	; (800fffc <_printf_i+0x244>)
 800ff28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff2c:	6823      	ldr	r3, [r4, #0]
 800ff2e:	680e      	ldr	r6, [r1, #0]
 800ff30:	061f      	lsls	r7, r3, #24
 800ff32:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff36:	600e      	str	r6, [r1, #0]
 800ff38:	d514      	bpl.n	800ff64 <_printf_i+0x1ac>
 800ff3a:	07d9      	lsls	r1, r3, #31
 800ff3c:	bf44      	itt	mi
 800ff3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ff42:	6023      	strmi	r3, [r4, #0]
 800ff44:	b91d      	cbnz	r5, 800ff4e <_printf_i+0x196>
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	f023 0320 	bic.w	r3, r3, #32
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	2310      	movs	r3, #16
 800ff50:	e7b0      	b.n	800feb4 <_printf_i+0xfc>
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	f043 0320 	orr.w	r3, r3, #32
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	2378      	movs	r3, #120	; 0x78
 800ff5c:	4828      	ldr	r0, [pc, #160]	; (8010000 <_printf_i+0x248>)
 800ff5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff62:	e7e3      	b.n	800ff2c <_printf_i+0x174>
 800ff64:	065e      	lsls	r6, r3, #25
 800ff66:	bf48      	it	mi
 800ff68:	b2ad      	uxthmi	r5, r5
 800ff6a:	e7e6      	b.n	800ff3a <_printf_i+0x182>
 800ff6c:	4616      	mov	r6, r2
 800ff6e:	e7bb      	b.n	800fee8 <_printf_i+0x130>
 800ff70:	680b      	ldr	r3, [r1, #0]
 800ff72:	6826      	ldr	r6, [r4, #0]
 800ff74:	6960      	ldr	r0, [r4, #20]
 800ff76:	1d1d      	adds	r5, r3, #4
 800ff78:	600d      	str	r5, [r1, #0]
 800ff7a:	0635      	lsls	r5, r6, #24
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	d501      	bpl.n	800ff84 <_printf_i+0x1cc>
 800ff80:	6018      	str	r0, [r3, #0]
 800ff82:	e002      	b.n	800ff8a <_printf_i+0x1d2>
 800ff84:	0671      	lsls	r1, r6, #25
 800ff86:	d5fb      	bpl.n	800ff80 <_printf_i+0x1c8>
 800ff88:	8018      	strh	r0, [r3, #0]
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	6123      	str	r3, [r4, #16]
 800ff8e:	4616      	mov	r6, r2
 800ff90:	e7ba      	b.n	800ff08 <_printf_i+0x150>
 800ff92:	680b      	ldr	r3, [r1, #0]
 800ff94:	1d1a      	adds	r2, r3, #4
 800ff96:	600a      	str	r2, [r1, #0]
 800ff98:	681e      	ldr	r6, [r3, #0]
 800ff9a:	6862      	ldr	r2, [r4, #4]
 800ff9c:	2100      	movs	r1, #0
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f7f0 f91e 	bl	80001e0 <memchr>
 800ffa4:	b108      	cbz	r0, 800ffaa <_printf_i+0x1f2>
 800ffa6:	1b80      	subs	r0, r0, r6
 800ffa8:	6060      	str	r0, [r4, #4]
 800ffaa:	6863      	ldr	r3, [r4, #4]
 800ffac:	6123      	str	r3, [r4, #16]
 800ffae:	2300      	movs	r3, #0
 800ffb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffb4:	e7a8      	b.n	800ff08 <_printf_i+0x150>
 800ffb6:	6923      	ldr	r3, [r4, #16]
 800ffb8:	4632      	mov	r2, r6
 800ffba:	4649      	mov	r1, r9
 800ffbc:	4640      	mov	r0, r8
 800ffbe:	47d0      	blx	sl
 800ffc0:	3001      	adds	r0, #1
 800ffc2:	d0ab      	beq.n	800ff1c <_printf_i+0x164>
 800ffc4:	6823      	ldr	r3, [r4, #0]
 800ffc6:	079b      	lsls	r3, r3, #30
 800ffc8:	d413      	bmi.n	800fff2 <_printf_i+0x23a>
 800ffca:	68e0      	ldr	r0, [r4, #12]
 800ffcc:	9b03      	ldr	r3, [sp, #12]
 800ffce:	4298      	cmp	r0, r3
 800ffd0:	bfb8      	it	lt
 800ffd2:	4618      	movlt	r0, r3
 800ffd4:	e7a4      	b.n	800ff20 <_printf_i+0x168>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	4632      	mov	r2, r6
 800ffda:	4649      	mov	r1, r9
 800ffdc:	4640      	mov	r0, r8
 800ffde:	47d0      	blx	sl
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	d09b      	beq.n	800ff1c <_printf_i+0x164>
 800ffe4:	3501      	adds	r5, #1
 800ffe6:	68e3      	ldr	r3, [r4, #12]
 800ffe8:	9903      	ldr	r1, [sp, #12]
 800ffea:	1a5b      	subs	r3, r3, r1
 800ffec:	42ab      	cmp	r3, r5
 800ffee:	dcf2      	bgt.n	800ffd6 <_printf_i+0x21e>
 800fff0:	e7eb      	b.n	800ffca <_printf_i+0x212>
 800fff2:	2500      	movs	r5, #0
 800fff4:	f104 0619 	add.w	r6, r4, #25
 800fff8:	e7f5      	b.n	800ffe6 <_printf_i+0x22e>
 800fffa:	bf00      	nop
 800fffc:	08010a65 	.word	0x08010a65
 8010000:	08010a76 	.word	0x08010a76

08010004 <_sbrk_r>:
 8010004:	b538      	push	{r3, r4, r5, lr}
 8010006:	4d06      	ldr	r5, [pc, #24]	; (8010020 <_sbrk_r+0x1c>)
 8010008:	2300      	movs	r3, #0
 801000a:	4604      	mov	r4, r0
 801000c:	4608      	mov	r0, r1
 801000e:	602b      	str	r3, [r5, #0]
 8010010:	f7f2 fc26 	bl	8002860 <_sbrk>
 8010014:	1c43      	adds	r3, r0, #1
 8010016:	d102      	bne.n	801001e <_sbrk_r+0x1a>
 8010018:	682b      	ldr	r3, [r5, #0]
 801001a:	b103      	cbz	r3, 801001e <_sbrk_r+0x1a>
 801001c:	6023      	str	r3, [r4, #0]
 801001e:	bd38      	pop	{r3, r4, r5, pc}
 8010020:	20010500 	.word	0x20010500

08010024 <__sread>:
 8010024:	b510      	push	{r4, lr}
 8010026:	460c      	mov	r4, r1
 8010028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801002c:	f000 f8a0 	bl	8010170 <_read_r>
 8010030:	2800      	cmp	r0, #0
 8010032:	bfab      	itete	ge
 8010034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010036:	89a3      	ldrhlt	r3, [r4, #12]
 8010038:	181b      	addge	r3, r3, r0
 801003a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801003e:	bfac      	ite	ge
 8010040:	6563      	strge	r3, [r4, #84]	; 0x54
 8010042:	81a3      	strhlt	r3, [r4, #12]
 8010044:	bd10      	pop	{r4, pc}

08010046 <__swrite>:
 8010046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004a:	461f      	mov	r7, r3
 801004c:	898b      	ldrh	r3, [r1, #12]
 801004e:	05db      	lsls	r3, r3, #23
 8010050:	4605      	mov	r5, r0
 8010052:	460c      	mov	r4, r1
 8010054:	4616      	mov	r6, r2
 8010056:	d505      	bpl.n	8010064 <__swrite+0x1e>
 8010058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801005c:	2302      	movs	r3, #2
 801005e:	2200      	movs	r2, #0
 8010060:	f000 f868 	bl	8010134 <_lseek_r>
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801006a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801006e:	81a3      	strh	r3, [r4, #12]
 8010070:	4632      	mov	r2, r6
 8010072:	463b      	mov	r3, r7
 8010074:	4628      	mov	r0, r5
 8010076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801007a:	f000 b817 	b.w	80100ac <_write_r>

0801007e <__sseek>:
 801007e:	b510      	push	{r4, lr}
 8010080:	460c      	mov	r4, r1
 8010082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010086:	f000 f855 	bl	8010134 <_lseek_r>
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	bf15      	itete	ne
 8010090:	6560      	strne	r0, [r4, #84]	; 0x54
 8010092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801009a:	81a3      	strheq	r3, [r4, #12]
 801009c:	bf18      	it	ne
 801009e:	81a3      	strhne	r3, [r4, #12]
 80100a0:	bd10      	pop	{r4, pc}

080100a2 <__sclose>:
 80100a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a6:	f000 b813 	b.w	80100d0 <_close_r>
	...

080100ac <_write_r>:
 80100ac:	b538      	push	{r3, r4, r5, lr}
 80100ae:	4d07      	ldr	r5, [pc, #28]	; (80100cc <_write_r+0x20>)
 80100b0:	4604      	mov	r4, r0
 80100b2:	4608      	mov	r0, r1
 80100b4:	4611      	mov	r1, r2
 80100b6:	2200      	movs	r2, #0
 80100b8:	602a      	str	r2, [r5, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	f7f2 fb7f 	bl	80027be <_write>
 80100c0:	1c43      	adds	r3, r0, #1
 80100c2:	d102      	bne.n	80100ca <_write_r+0x1e>
 80100c4:	682b      	ldr	r3, [r5, #0]
 80100c6:	b103      	cbz	r3, 80100ca <_write_r+0x1e>
 80100c8:	6023      	str	r3, [r4, #0]
 80100ca:	bd38      	pop	{r3, r4, r5, pc}
 80100cc:	20010500 	.word	0x20010500

080100d0 <_close_r>:
 80100d0:	b538      	push	{r3, r4, r5, lr}
 80100d2:	4d06      	ldr	r5, [pc, #24]	; (80100ec <_close_r+0x1c>)
 80100d4:	2300      	movs	r3, #0
 80100d6:	4604      	mov	r4, r0
 80100d8:	4608      	mov	r0, r1
 80100da:	602b      	str	r3, [r5, #0]
 80100dc:	f7f2 fb8b 	bl	80027f6 <_close>
 80100e0:	1c43      	adds	r3, r0, #1
 80100e2:	d102      	bne.n	80100ea <_close_r+0x1a>
 80100e4:	682b      	ldr	r3, [r5, #0]
 80100e6:	b103      	cbz	r3, 80100ea <_close_r+0x1a>
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	20010500 	.word	0x20010500

080100f0 <_fstat_r>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	4d07      	ldr	r5, [pc, #28]	; (8010110 <_fstat_r+0x20>)
 80100f4:	2300      	movs	r3, #0
 80100f6:	4604      	mov	r4, r0
 80100f8:	4608      	mov	r0, r1
 80100fa:	4611      	mov	r1, r2
 80100fc:	602b      	str	r3, [r5, #0]
 80100fe:	f7f2 fb86 	bl	800280e <_fstat>
 8010102:	1c43      	adds	r3, r0, #1
 8010104:	d102      	bne.n	801010c <_fstat_r+0x1c>
 8010106:	682b      	ldr	r3, [r5, #0]
 8010108:	b103      	cbz	r3, 801010c <_fstat_r+0x1c>
 801010a:	6023      	str	r3, [r4, #0]
 801010c:	bd38      	pop	{r3, r4, r5, pc}
 801010e:	bf00      	nop
 8010110:	20010500 	.word	0x20010500

08010114 <_isatty_r>:
 8010114:	b538      	push	{r3, r4, r5, lr}
 8010116:	4d06      	ldr	r5, [pc, #24]	; (8010130 <_isatty_r+0x1c>)
 8010118:	2300      	movs	r3, #0
 801011a:	4604      	mov	r4, r0
 801011c:	4608      	mov	r0, r1
 801011e:	602b      	str	r3, [r5, #0]
 8010120:	f7f2 fb85 	bl	800282e <_isatty>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_isatty_r+0x1a>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_isatty_r+0x1a>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	20010500 	.word	0x20010500

08010134 <_lseek_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4d07      	ldr	r5, [pc, #28]	; (8010154 <_lseek_r+0x20>)
 8010138:	4604      	mov	r4, r0
 801013a:	4608      	mov	r0, r1
 801013c:	4611      	mov	r1, r2
 801013e:	2200      	movs	r2, #0
 8010140:	602a      	str	r2, [r5, #0]
 8010142:	461a      	mov	r2, r3
 8010144:	f7f2 fb7e 	bl	8002844 <_lseek>
 8010148:	1c43      	adds	r3, r0, #1
 801014a:	d102      	bne.n	8010152 <_lseek_r+0x1e>
 801014c:	682b      	ldr	r3, [r5, #0]
 801014e:	b103      	cbz	r3, 8010152 <_lseek_r+0x1e>
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	bd38      	pop	{r3, r4, r5, pc}
 8010154:	20010500 	.word	0x20010500

08010158 <__malloc_lock>:
 8010158:	4801      	ldr	r0, [pc, #4]	; (8010160 <__malloc_lock+0x8>)
 801015a:	f7ff bb55 	b.w	800f808 <__retarget_lock_acquire_recursive>
 801015e:	bf00      	nop
 8010160:	200104f8 	.word	0x200104f8

08010164 <__malloc_unlock>:
 8010164:	4801      	ldr	r0, [pc, #4]	; (801016c <__malloc_unlock+0x8>)
 8010166:	f7ff bb50 	b.w	800f80a <__retarget_lock_release_recursive>
 801016a:	bf00      	nop
 801016c:	200104f8 	.word	0x200104f8

08010170 <_read_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	; (8010190 <_read_r+0x20>)
 8010174:	4604      	mov	r4, r0
 8010176:	4608      	mov	r0, r1
 8010178:	4611      	mov	r1, r2
 801017a:	2200      	movs	r2, #0
 801017c:	602a      	str	r2, [r5, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	f7f2 fb00 	bl	8002784 <_read>
 8010184:	1c43      	adds	r3, r0, #1
 8010186:	d102      	bne.n	801018e <_read_r+0x1e>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	b103      	cbz	r3, 801018e <_read_r+0x1e>
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	bd38      	pop	{r3, r4, r5, pc}
 8010190:	20010500 	.word	0x20010500

08010194 <_init>:
 8010194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010196:	bf00      	nop
 8010198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019a:	bc08      	pop	{r3}
 801019c:	469e      	mov	lr, r3
 801019e:	4770      	bx	lr

080101a0 <_fini>:
 80101a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a2:	bf00      	nop
 80101a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101a6:	bc08      	pop	{r3}
 80101a8:	469e      	mov	lr, r3
 80101aa:	4770      	bx	lr
